{
    "contestId": 1644,
    "index": "C",
    "name": "Increase Subarray Sums",
    "type": "PROGRAMMING",
    "rating": 1400,
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation"
    ],
    "input": "The first line contains a single integer t (1\u2264t\u22645000)\u00a0\u2014 the number of testcases.The first line of the testcase contains two integers n and x (1\u2264n\u22645000; 0\u2264x\u2264105)\u00a0\u2014 the number of elements in the array and the value to add.The second line contains n integers a1,a2,\u2026,an (\u2212105\u2264ai\u2264105).The sum of n over all testcases doesn't exceed 5000.",
    "output": "For each testcase, print n+1 integers\u00a0\u2014 the maximum value of f(k) for all k from 0 to n independently.",
    "history": "You are given an array a1,a2,\u2026,an, consisting of n integers. You are also given an integer value x.Let f(k) be the maximum sum of a contiguous subarray of a after applying the following operation: add x to the elements on exactly k distinct positions. An empty subarray should also be considered, it has sum 0.Note that the subarray doesn't have to include all of the increased elements.Calculate the maximum value of f(k) for all k from 0 to n independently.NoteIn the first testcase, it doesn't matter which elements you add x to. The subarray with the maximum sum will always be the entire array. If you increase k elements by x, k\u22c5x will be added to the sum.In the second testcase:   For k=0, the empty subarray is the best option.  For k=1, it's optimal to increase the element at position 3. The best sum becomes \u22121+5=4 for a subarray [3,3].  For k=2, it's optimal to increase the element at position 3 and any other element. The best sum is still 4 for a subarray [3,3].  For k=3, you have to increase all elements. The best sum becomes (\u22122+5)+(\u22127+5)+(\u22121+5)=5 for a subarray [1,3]. "
}