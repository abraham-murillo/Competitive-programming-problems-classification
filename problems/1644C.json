{
    "contestId": 1644,
    "index": "C",
    "name": "Increase Subarray Sums",
    "type": "PROGRAMMING",
    "rating": 1400,
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation"
    ],
    "id": "1644C",
    "site": "codeforces",
    "url": "https://codeforces.com/problemset/problem/1644/C",
    "input": "The first line contains a single integer t\ud835\udc61 (1\u2264t\u226450001\u2264\ud835\udc61\u22645000)\u00a0\u2014 the number of testcases.The first line of the testcase contains two integers n\ud835\udc5b and x\ud835\udc65 (1\u2264n\u226450001\u2264\ud835\udc5b\u22645000; 0\u2264x\u22641050\u2264\ud835\udc65\u2264105)\u00a0\u2014 the number of elements in the array and the value to add.The second line contains n\ud835\udc5b integers a1,a2,\u2026,an\ud835\udc4e1,\ud835\udc4e2,\u2026,\ud835\udc4e\ud835\udc5b (\u2212105\u2264ai\u2264105\u2212105\u2264\ud835\udc4e\ud835\udc56\u2264105).The sum of n\ud835\udc5b over all testcases doesn't exceed 50005000.",
    "output": "For each testcase, print n+1\ud835\udc5b+1 integers\u00a0\u2014 the maximum value of f(k)\ud835\udc53(\ud835\udc58) for all k\ud835\udc58 from 00 to n\ud835\udc5b independently.",
    "note": "In the first testcase, it doesn't matter which elements you add x\ud835\udc65 to. The subarray with the maximum sum will always be the entire array. If you increase k\ud835\udc58 elements by x\ud835\udc65, k\u22c5x\ud835\udc58\u22c5\ud835\udc65 will be added to the sum.In the second testcase:   For k=0\ud835\udc58=0, the empty subarray is the best option.  For k=1\ud835\udc58=1, it's optimal to increase the element at position 33. The best sum becomes \u22121+5=4\u22121+5=4 for a subarray [3,3][3,3].  For k=2\ud835\udc58=2, it's optimal to increase the element at position 33 and any other element. The best sum is still 44 for a subarray [3,3][3,3].  For k=3\ud835\udc58=3, you have to increase all elements. The best sum becomes (\u22122+5)+(\u22127+5)+(\u22121+5)=5(\u22122+5)+(\u22127+5)+(\u22121+5)=5 for a subarray [1,3][1,3]. ",
    "history": "You are given an array a1,a2,\u2026,an\ud835\udc4e1,\ud835\udc4e2,\u2026,\ud835\udc4e\ud835\udc5b, consisting of n\ud835\udc5b integers. You are also given an integer value x\ud835\udc65.Let f(k)\ud835\udc53(\ud835\udc58) be the maximum sum of a contiguous subarray of a\ud835\udc4e after applying the following operation: add x\ud835\udc65 to the elements on exactly k\ud835\udc58 distinct positions. An empty subarray should also be considered, it has sum 00.Note that the subarray doesn't have to include all of the increased elements.Calculate the maximum value of f(k)\ud835\udc53(\ud835\udc58) for all k\ud835\udc58 from 00 to n\ud835\udc5b independently."
}