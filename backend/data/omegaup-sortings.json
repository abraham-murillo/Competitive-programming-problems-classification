[
  {
    "title": "Operaciones en filas y columnas sobre una matriz (reloaded)",
    "url": "https://omegaup.com/arena/problem/Operaciones-en-filas-y-columnas2",
    "history": "Un generador de enteros pseudo- aleatorios de 32 bits sin signo se puede implementar en te\u0301rminos de tres enteros A, C, X. Diremos que X es el primer nu\u0301mero aleatorio y que los siguientes nu\u0301meros los podemos generar con la instruccio\u0301n X ( A) ( X) + C. Por ejemplo, si A= 5, C= 2, X= 7 entonces 7 es el primer nu\u0301mero aleatorio, ( 5) ( 7) + 2 = 37 es el segundo nu\u0301mero aleatorio, ( 5) ( 37) + 2 = 187 es el tercer nu\u0301mero aleatorio, ( 5) ( 187) + 2 = 937 es el cuarto nu\u0301mero aleatorio, etce\u0301tera. Dados los valores de A, C, X, escribe un programa que use el generador anterior para sumarle valores a una matriz M de N \u00d7 16 enteros tambie\u0301n de 32 bits sin signo, inicialmente con ceros. Tu programa debe visitar la matriz T veces: en la primera visita la matriz debe recorrerse por filas ( de arriba para abajo, cada fila de izquierda a derecha) , en la segunda visita la matriz debe recorrerse por columnas ( de izquierda a derecha, cada columna de arriba para abajo) y asi\u0301 sucesivamente de forma alternada para las dema\u0301s visitas. Al recorrer los elementos de la matriz durante una visita, al elemento actual se le debe sumar el nu\u0301mero aleatorio actual, de modo de que al siguiente elemento se le sume el siguiente nu\u0301mero aleatorio ( el primer nu\u0301mero aleatorio a sumar es el valor inicial de X) . El generador no se debe reiniciar al terminar una visita: la siguiente visita debe usar los siguientes nu\u0301meros aleatorios. Una vez hecho lo anterior, tu programa debe ordenar ascendentemente los elementos de cada fila individual de la matriz. Finalmente, tu programa debe imprimir la suma de los elementos de cada columna individual de la matriz ( de izquierda a derecha) usando aritme\u0301tica de 32 bits sin signo.",
    "input": "Cinco enteros A, C, X, N, T. Puedes suponer que 0 \u2264 A, C, X \u2264 10^ 9, que 1 \u2264 N \u2264 1750000 y que 0 \u2264 T \u2264 40.",
    "output": "Una secuencia de 16 enteros que sean las sumas de las columnas despue\u0301s de llevar a cabo el proceso descrito.",
    "note": "",
    "topics": [
      "matrices",
      "sortings",
      "*special",
      "math"
    ],
    "id": 16197
  },
  {
    "title": "Empanadas de Adri\u00e1n",
    "url": "https://omegaup.com/arena/problem/Empanadas-de-Adrian",
    "history": "Adria\u0301n es un amante de las empanadas. Un di\u0301a entra en una tienda de empanadas donde se venden N empanadas y esta\u0301 dispuesto a comprar ma\u0301ximo M de ellas. Cada empanada, aporta a_ i puntos de felicidad si Adria\u0301n llega a comer esta empanada y tiene un sabor b_ i. Adema\u0301s si es la primera vez que Adria\u0301n prueba ese sabor de empanada en su vida, obtendra\u0301 K puntos de felicidad adicionales. Habra\u0301n empanadas que tambie\u0301n son del desagrado de Adria\u0301n, siendo que le restari\u0301an puntos de felicidad si las come, de tan feo sabor que tienen. Dados los puntos de felicidad de cada empanada y su sabor, determina la mayor cantidad de puntos de felicidad que Adria\u0301n podra\u0301 obtener, siendo que inicialmente nunca ha probado ninguna de las empanadas de la tienda en su vida.",
    "input": "En la primera li\u0301nea, primero un entero N representando el nu\u0301mero de empanadas disponibles, despue\u0301s un entero M representando el ma\u0301ximo nu\u0301mero de empanadas que Adria\u0301n esta\u0301 dispuesto a comprar, y un entero K, representando los puntos de felicidad adicionales, si Adria\u0301n come por primera vez un sabor de empanada que jama\u0301s habi\u0301a probado. En la segunda li\u0301nea con N enteros, los cua\u0301les describen al arreglo A y muestran la cantidad de puntos de felicidad que la empanada i aporta ( 1 < = i < = N) . En la tercera li\u0301nea con N enteros, los cua\u0301les describen al arreglo B y muestran los sabores de cada empanada i( 1 < = i < = N) .",
    "output": "Imprime la mayor cantidad de puntos de felicidad que Adria\u0301n puede obtener comiendo a lo ma\u0301s M empanadas, posiblemente 0.",
    "note": "",
    "topics": [
      "greedy",
      "two pointers",
      "sortings"
    ],
    "id": 15740
  },
  {
    "title": "\u00cdndice o glosario",
    "url": "https://omegaup.com/arena/problem/Indice-o-glosario",
    "history": "Martha ha escrito un libro, pero antes de publicarlo quiere asegurarse de que todo este\u0301 ordenado. Su editor esta\u0301 de vacaciones y la impresio\u0301n es man\u0303ana, debes ayudarla a terminar a tiempo. Si le falta el i\u0301ndice, imprime los capi\u0301tulos en orden nume\u0301rico, si le falta el glosario, hazlo en orden alfabe\u0301tico.",
    "input": "En la primera li\u0301nea un entero n, que representa el nu\u0301mero de capi\u0301tulos del libro. Despue\u0301s, n li\u0301neas con una palabra seguida de un espacio y un nu\u0301mero de pa\u0301gina. Finalmente en la n+ 1- e\u0301sima li\u0301nea, una i si debes imprimir el i\u0301ndice, o una g si debes imprimir el glosario.",
    "output": "La lista ordenada, ya sea alfabe\u0301tica, o nume\u0301ricamente en el mismo formato de la entrada, la palabra seguida de un espacio y el nu\u0301mero de pa\u0301gina.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15724
  },
  {
    "title": "Subiendo niveles",
    "url": "https://omegaup.com/arena/problem/Subiendo-niveles",
    "history": "Se hizo una rifa para ver quie\u0301n tendri\u0301a la suerte de participar en un nuevo juego altamente interactivo, y tu\u0301 te llevaste el boleto ganador! # ProblemaEl juego consiste de N salas, que puedes visitar cuando quieras y como quieras. Inicialmente comienzas con un nivel de poder k, y todas las salas i tienen un nivel de poder x_ i. Si entras a una sala i cuyo poder es menor o igual al tuyo, entonces ganas esa sala, y tu nivel k aumenta la cantidad de poder x_ i del nivel. Por ejemplo, si tu nivel es 50, y entras a una sala de nivel 35, entonces al salir, tu nivel sera\u0301 85. Si entras a una sala y tu poder es ma\u0301s bajo que el de la sala, pierdes el juego, y tu puntuacio\u0301n final sera\u0301 el nivel final de poder que conseguiste. Sabiendo que puedes acceder a las salas en cualquier orden, calcula el ma\u0301ximo nivel que puedes alcanzar sin perder.",
    "input": "Una li\u0301nea con dos enteros N, k, siendo la cantidad de salas, y tu nivel inicial de poder. En la segunda li\u0301nea, N enteros x_ i, describiendo el nivel de poder de cada sala.",
    "output": "Un solo entero que contenga el nivel ma\u0301ximo que se puede alcanzar en el juego.",
    "note": "",
    "topics": [
      "sortings",
      "greedy"
    ],
    "id": 15676
  },
  {
    "title": "Robando cuadritos de chocolate",
    "url": "https://omegaup.com/arena/problem/Robando-cuadritos-de-chocolate",
    "history": "Te gustan mucho las barras de chocolate y tienes un refrigerador con N de ellas. Cada barra de chocolate esta\u0301 dividida en cuadritos, de modo que es fa\u0301cil partir un pedazo. Tu sobrinito tambie\u0301n es un fan del chocolate y siempre que visita tu casa toma algunos cuadritos de chocolate sin que nadie se percate. Para hacerlo, tu sobrinito elige la barra ma\u0301s grande ( en caso de haber varias igual de grandes, la de ma\u0301s a la izquierda) y toma 5 cuadritos, pero si la barra tiene 5 cuadritos o menos, entonces agarra todos sus cuadritos excepto el u\u0301ltimo, porque no quiere acabarse la barra y que noten su ausencia. Dadas las longitudes iniciales de las N barras de chocolate, \u00bfcua\u0301ntos cuadritos le quedara\u0301n a cada barra despue\u0301s de que tu sobrinito visite K veces tu casa?",
    "input": "Un entero N seguido de N enteros que denotan las longitudes de las N barras. Puedes suponer que 1 \u2264 N \u2264 2 \u00d7 10^ 5, que 0 \u2264 K \u2264 10^ 9 y que las longitudes de las barras esta\u0301n entre 1 y 10^ 4",
    "output": "Una secuencia de N enteros que denoten las longitudes de las barras despue\u0301s de que ocurrieron las K visitas.",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "data structures"
    ],
    "id": 15545
  },
  {
    "title": "Otro problema de ordenamientos",
    "url": "https://omegaup.com/arena/problem/Otro-problema-de-ordenamientos",
    "history": "Ranaberto se encontro\u0301 un nu\u0301mero muy grande en la calle en un pedazo de papel. Quiere regresa\u0301rselo a su duen\u0303o original, pero antes de eso tambie\u0301n quiere hacerle un favor y ordenar el nu\u0301mero. Para ello puede ya sea sumar o restarle a este nu\u0301mero. Recuerda que para que se considere que esta\u0301 ordenado, cada di\u0301gito del nu\u0301mero debe ser igual o mayor que el di\u0301gito inmediatamente a su izquierda. Como no quiere perder mucho tiempo, intentara\u0301 ordenar el nu\u0301mero con la menor cantidad de operaciones, donde una operacio\u0301n es sumar o restar 1 al nu\u0301mero. Ayuda a Ranaberto a ordenar el numero con la menor cantidad de operaciones.",
    "input": "En la primer li\u0301nea un entero 1 \u2264 n \u2264 1e5 la cantidad de di\u0301gitos en el nu\u0301mero. En la siguiente li\u0301nea viene el nu\u0301mero en cuestio\u0301n. Representado con di\u0301gitos del 0 al 9. Esta\u0301 garantizado que este nu\u0301mero no contiene ceros a la izquierda.",
    "output": "En una sola li\u0301nea, imprime primero un signo, ' + ' o ' - ' , sin comillas, para denotar si se le sumara\u0301 o restara\u0301 al nu\u0301mero original. Luego imprime el nu\u0301mero que se le restara\u0301 o sumara\u0301 al original. Por u\u0301ltimo imprime el resultado final, un nu\u0301mero ordenado que resulta de la operacio\u0301n que se llevo\u0301 a cabo. Si existe ma\u0301s de una solucio\u0301n ( Ya sea sumando o restando) dale preferencia a la suma. Si el nu\u0301mero original ya esta\u0301 ordenado, imprime \" + 0 ( nu\u0301mero original) \" .",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15450
  },
  {
    "title": "Cableando por la ruta",
    "url": "https://omegaup.com/arena/problem/Cableando-por-la-ruta",
    "history": "Una conocida empresa proveedora deinternet ha entrado recientemente en unpartido Bonaerense, y sus tentadoraspromociones han generado el intere\u0301s deusuarios en varios pueblitos ubicados justo a un lado de una ruta. La empresa debe lograr conectar todos los pueblitos a su \u201cmegacentral\u201d proveedora de internet ( asi\u0301 la denomina laempresa en todas sus publicidades) . Estacentral tambie\u0301n se encuentra a un lado dela misma ruta. Lo\u0301gicamente, la empresaquiere realizar esta conexio\u0301n utilizando lami\u0301nima longitud posible de cable, para asi\u0301ahorrar costos. No es necesario que cada pueblo tengasu propio cable directo e ininterrumpidohasta la megacentral: Si hay un cableentre los pueblos A y B, y a su vez hay uncable entre el pueblo B y la central, esoes suficiente para abastecer de interneta ambos pueblos A y B. Estas cadenasde abastecimiento podri\u0301an ser tan largascomo se desee: Si hay un cable queconecta un pueblo A, con otro pueblo Bque ya esta\u0301 abastecido de alguna manera, el pueblo A queda a su vez automa\u0301ticamente abastecido. La figura muestra un ejemplo dondese abastece de internet a los 4 pueblospresentes en ella: ! [ enter image description here] [ 1] Utilizando solamente 4 cables, de 3, 5, 5 y 7 kilo\u0301metros, se ha logrado conectartodos los pueblitos a la megacentral, conuna longitud total de 20km de cable. Se te pide que escribas un programa quereciba el nu\u0301mero de kilo\u0301metro de ruta enel que se encuentran la megacentral y lospueblitos, y determine la mi\u0301nima cantidadde cable ( en kilo\u0301metros) que es necesarioutilizar para realizar la conexio\u0301n.",
    "input": "Se recibe: Primera li\u0301nea: Un u\u0301nico entero: La cantidad N ( 1 \u2264 N \u2264 200. 000) de pueblitosque hay que conectar en total. Segunda li\u0301nea: Un u\u0301nico entero K ( 0 \u2264K \u2264 109) : El nu\u0301mero de kilo\u0301metro de rutaen que se encuentra la megacentral. Tercera li\u0301nea: N nu\u0301meros enteros ki( 0 \u2264 ki \u2264 109) , separados por espacio. Estos son los nu\u0301meros de kilo\u0301metro deruta en que se encuentran ubicados losdistintos pueblitos.",
    "output": "Se debe escribir una u\u0301nica li\u0301nea, concon un u\u0301nico entero que indique la longitud total de cable necesaria ( en kilo\u0301metros) .",
    "note": "",
    "topics": [
      "math",
      "implementation",
      "sortings"
    ],
    "id": 15382
  },
  {
    "title": "B\u00fasquedas y modificaciones en un arreglo (reloaded)",
    "url": "https://omegaup.com/arena/problem/Busquedas-y-modificaciones-en-v2",
    "history": "Dado un arreglo de N enteros, escribe un programa que procese una secuencia de M comandos de los siguientes tipos: - ` CUENTA` K: Contar la cantidad de veces que aparece el entero K en el arreglo. - ` SUMA` K: Sumar K a todos los elementos del arreglo.",
    "input": "Dos enteros N y M seguidos de los N enteros del arreglo y posteriormente de los M comandos a procesar. Puedes suponer que 0 \u2264 N, M \u2264 2 \u00d7 10^ 5, que los elementos del arreglo esta\u0301n en el rango de 0 a 10^ 9 y que los valores a sumar esta\u0301n en el rango de - 10 y + 10.",
    "output": "Para cada evento del tipo ` CUENTA` , un entero que sea la cantidad de veces que aparece el entero dado. Los valores impresos deben aparecer separados por espacios en blanco.",
    "note": "",
    "topics": [
      "sortings",
      "binary search"
    ],
    "id": 15326
  },
  {
    "title": "6. Buscar K tripletas",
    "url": "https://omegaup.com/arena/problem/6-Buscar-K-tripletas",
    "history": "* * Objetivo: * * Dado un conjunto datos de n ejemplos, donde cada ejemplo es una tripleta ( A, B, C) de nu\u0301meros reales ( * float* ) , se desea buscar los k ejemplos ma\u0301s parecidos a una nueva observacio\u0301n ( X, Y, Z) . Medir la similitud entre ejemplos y la nueva observacio\u0301n a trave\u0301s de la menor distancia euclidiana, la cual puede calcularse como: d( ( A, B, C) , ( X, Y, Z) ) = \u221a( 1/ 3[ ( A- X) ^ 2 + ( B- Y) ^ 2 + ( C- Z) ^ 2 ] )",
    "input": "n kA_ 1 B_ 1 C_ 1A_ 2 B_ 2 C_ 2\u22eeA_ n B_ n C_ nX Y Z",
    "output": "Conjunto de los k ejemplos ma\u0301s similares a la nueva observacio\u0301n ( X, Y, Z) .",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15271
  },
  {
    "title": "5. Multiplicar polinomios",
    "url": "https://omegaup.com/arena/problem/5-Multiplicar-polinomios",
    "history": "Elaborar un programa que lea dos polinomios y devuelva la multiplicacio\u0301n de las entradas. Consideraciones: * Los monomios que integran los polinomios sera\u0301n de la forma: cx^ Ay^ Bz^ C, donde c \u2208Z es el coeficiente y A, B, C \u2208Z son los exponentes de x, y y z respectivamente. * El polinomio resultante debe tener los monomios ordenados de mayor a menor considerando los exponentes primero de x, despue\u0301s de y y finalmente de z. Por ejemplo: * x^ 3 + x^ 2 - y^ 2 * x^ 3 + 2x^ 2 - y^ 2 + 5z^ 2 * x^ 3 + x^ 2y^ 2 - x^ 1y^ 2 - 2z^ 3 + z^ 1",
    "input": "n mcoeficiente^ p_ 1 A^ p_ 1 B^ p_ 1 C^ p_ 1coeficiente^ p_ 2 A^ p_ 2 B^ p_ 2 C^ p_ 2. . . coeficiente^ p_ n A^ p_ n B^ p_ n C^ p_ ncoeficiente^ q_ 1 A^ q_ 1 B^ q_ 1 C^ q_ 1coeficiente^ q_ 2 A^ q_ 2 B^ q_ 2 C^ q_ 2. . . coeficiente^ q_ m A^ q_ m B^ q_ m C^ q_ mdonde n es el nu\u0301mero de elementos del polinomio p y m es el nu\u0301mero de elementos del polinomio q. Cada monomio sigue el formato: coeficiente A B C.",
    "output": "Coeficientes y exponentes del polinomio resultante.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15270
  },
  {
    "title": "4. Buscar Sub matriz",
    "url": "https://omegaup.com/arena/problem/4-Buscar-Sub-matriz",
    "history": "Dada una matriz A_ n \u00d7 m de n- filas por m- columnas, buscar todas las coincidencias de una matriz B_ p \u00d7 q dep- filas por q- columnas. Devolver una lista de todas las posiciones, parejas ( fila, columna) , donde aparece B en la matriz A. Por ejemplo, sea la matriz A: ! [ Matriz A] ( matrizA. png) Y sea la matriz B: ! [ Matriz B] ( matrizB. png) El programa debe devolver la lista de posiciones donde aparece B en A: ( 1, 2) ( 3, 4)",
    "input": "n ma_ 11 a_ 12 \u22ef a_ 1ma_ 21 a_ 22 \u22ef a_ 2m\u22eea_ n1 a_ n2 \u22ef a_ nmp qb_ 11 b_ 12 \u22ef b_ 1qb_ 21 b_ 22 \u22ef b_ 2q\u22eeb_ p1 b_ p2 \u22ef b_ pqPor simplicidad asumir que todos los nu\u0301meros ingresados son enteros, tambie\u0301n asumir que las posiciones de las filas y columnas comienzan en 0.",
    "output": "Lista de posiciones donde aparece B en A.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15269
  },
  {
    "title": "No 1. Buscar costo vuelo",
    "url": "https://omegaup.com/arena/problem/No-1-Buscar-costo-vuelo",
    "history": "Elaborar un programa que recibe los vuelos disponibles con sus costos. Tambie\u0301n recibe una lista de los pai\u0301ses a visitar en un viaje. Devolver el costo total del viaje. Por ejemplo, vea el siguiente grafo con los vuelos: ! [ Vuelos] ( vuelos. png) Se representan en una tabla con los detalles: ! [ Tabla] ( tabla. png) Dada la lista de pai\u0301ses MEX PAN ESP BRAel costo del viaje es 200 + 360 + 350 = 910",
    "input": "n mo_ 1 d_ 1 c_ 1o_ 2 d_ 2 c_ 2\u22eeo_ n d_ n c_ np1 p2 \u22ef p_ mDonde n es el nu\u0301mero de vuelos, m es el nu\u0301mero de pai\u0301ses a visitar, o_ i es el origen del vuelo, d_ i es el destino, c_ i es el costo yp_ j es el pai\u0301s a visitar, 1< = i< = n, 1< = j< = m. Por simplicidad, asumir que los costos de los vuelos son enteros yque los pai\u0301ses se representan con palabras de 3 caracteres.",
    "output": "El costo del viaje.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15268
  },
  {
    "title": "2. Vendedores",
    "url": "https://omegaup.com/arena/problem/2-Vendedores",
    "history": "Elaborar un programa que lea las ventas de un conjunto de vendedores y devuelvalos vendendores con mayor nu\u0301mero de ventas. La salida debera\u0301 tener a los k mejores vendedores con sus ventas respectivas. La primera li\u0301nea recibira\u0301 n y k que son el nu\u0301mero total de vendedoresy el nu\u0301mero de mejores vendedores a buscar, respectivamente.",
    "input": "n kc_ 1 v_ 1c_ 2 v_ 2\u22efc_ n v_ nDonde c_ i es el primer nombre de cada vendedor y v_ i es el monto de ventas de ese vendedor.",
    "output": "Lista de los k vendedores con el mayor monto de ventas.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15266
  },
  {
    "title": "1. Buscar K frecuentes",
    "url": "https://omegaup.com/arena/problem/1-Buscar-K-frecuentes",
    "history": "Elaborar un programa que reciba n palabras, y devuelva una lista de las k palabras ma\u0301s frecuentes. El programa debe devolver la palabra e indicar cuantas veces se repite. La entrada sera\u0301 el nu\u0301mero de palabras n, el nu\u0301mero k, desde la siguiente li\u0301nea recibe las palabras, cada una esta\u0301 separada por un espacio en blanco o un salto de li\u0301nea. Nota: El comando scanf( \"",
    "input": "n kP1P2. . . PnPor simplicidad asumir que ninguna palabra supera los 40 caracteres.",
    "output": "Lista de las k palabras ma\u0301s frecuentes consu respectivo nu\u0301mero de repeticiones. Las palabras deben estar ordenadas de mayor a menor frecuencia, en caso de empate seguir el orden alfabe\u0301tico.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15250
  },
  {
    "title": "3. Multiplicar polinomios",
    "url": "https://omegaup.com/arena/problem/3-Multiplicar-polinomios",
    "history": "Elaborar un programa que lea dos polinomios y devuelva la multiplicacio\u0301n de las entradas. Consideraciones: * Los monomios que integran los polinomios sera\u0301n de la forma: cx^ Ay^ Bz^ C, donde c \u2208Z es el coeficiente y A, B, C \u2208Z son los exponentes de x, y y z respectivamente. * El polinomio resultante debe tener los monomios ordenados de mayor a menor considerando los exponentes primero de x, despue\u0301s de y y finalmente de z. Por ejemplo: * x^ 3 + x^ 2 - y^ 2 * x^ 3 + 2x^ 2 - y^ 2 + 5z^ 2 * x^ 3 + x^ 2y^ 2 - x^ 1y^ 2 - 2z^ 3 + z^ 1",
    "input": "n mcoeficiente^ p_ 1 A^ p_ 1 B^ p_ 1 C^ p_ 1coeficiente^ p_ 2 A^ p_ 2 B^ p_ 2 C^ p_ 2. . . coeficiente^ p_ n A^ p_ n B^ p_ n C^ p_ ncoeficiente^ q_ 1 A^ q_ 1 B^ q_ 1 C^ q_ 1coeficiente^ q_ 2 A^ q_ 2 B^ q_ 2 C^ q_ 2. . . coeficiente^ q_ m A^ q_ m B^ q_ m C^ q_ mdonde n es el nu\u0301mero de elementos del polinomio p y m es el nu\u0301mero de elementos del polinomio q. Cada monomio sigue el formato: coeficiente A B C.",
    "output": "Coeficientes y exponentes del polinomio resultante.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15249
  },
  {
    "title": "1. Restar polinomios",
    "url": "https://omegaup.com/arena/problem/1-Restar-polinomios",
    "history": "Elaborar un programa que lea dos polinomios p y qy devuelva la resta de las entradas r = p - q. Consideraciones: * Los monomios que integran los polinomios sera\u0301n de la forma: cx^ Ay^ Bz^ C, donde c \u2208Z es el coeficiente yA, B, C \u2208Z son los exponentes de x, y y z respectivamente. * El polinomio resultante debe tener los monomios ordenados. * * La regla para ordenar a los monomios sera\u0301: * * * primero los que tengan el mayor exponente en x, * si tienen el mismo exponente en x, ira\u0301n primero los que tengan el mayor exponente en y, * si tambie\u0301n tienen el mismo exponente en y, ira\u0301n primero los que tengan el mayor exponente en z. Por ejemplo: * x^ 3 + x^ 2 - y^ 2 * x^ 3 + 2x^ 2 + 5y^ 4 - y^ 2 * x^ 3 + x^ 2y^ 2 - x^ 1y^ 2 + z^ 3 - 2z^ 1",
    "input": "El programa recibe primero dos nu\u0301meros que indican el nu\u0301mero de monomios de cada polinomio. A continuacio\u0301n, recibe los monomios respectivos a cada polinomio. n mcoeficiente^ p_ 1 A^ p_ 1 B^ p_ 1 C^ p_ 1coeficiente^ p_ 2 A^ p_ 2 B^ p_ 2 C^ p_ 2\u22eecoeficiente^ p_ n A^ p_ n B^ p_ n C^ p_ ncoeficiente^ q_ 1 A^ q_ 1 B^ q_ 1 C^ q_ 1coeficiente^ q_ 2 A^ q_ 2 B^ q_ 2 C^ q_ 2\u22eecoeficiente^ q_ m A^ q_ m B^ q_ m C^ q_ mdonde n es el nu\u0301mero de elementos del polinomio p ym es el nu\u0301mero de elementos del polinomio q. Cada monomio sigue el formato: coeficiente A B C.",
    "output": "La salida es el polinomio resultante r, expresado en te\u0301rminos de coeficientes y exponentes: coeficiente^ r_ 1 A^ r_ 1 B^ r_ 1 C^ r_ 1coeficiente^ r_ 2 A^ r_ 2 B^ r_ 2 C^ r_ 2\u22eecoeficiente^ r_ l A^ r_ l B^ r_ l C^ r_ ldonde l es el nu\u0301mero de monomios del polinomio resultado r. Observe que cada monomio termina en un salto de li\u0301nea.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15248
  },
  {
    "title": "1. Ordenar n\u00fameros -no",
    "url": "https://omegaup.com/arena/problem/1-Ordenar-numeros--no",
    "history": "Elaborar un programa que lea un conjunto de nu\u0301meros. La salida sera\u0301 el conjunto de nu\u0301meros ordenados de menor a mayor y de mayor a menor. El programa recibira\u0301 n que es la cantidad de valores, seguido de los nu\u0301meros.",
    "input": "nd_ 1 d_ 2 \u22ef d_ n",
    "output": "Los nu\u0301meros ingresados en orden ascendente, un salto de li\u0301nea seguidosde los mismos nu\u0301meros en orden descendente.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15247
  },
  {
    "title": "Ordenando tripletas por inversiones",
    "url": "https://omegaup.com/arena/problem/Ordenando-tripletas-por-inversio",
    "history": "Dada una tripleta de enteros, una inversio\u0301n es una pareja de elementos E_ 1, E_ 2 tales que E_ 1 aparece a la izquierda de E_ 2 pero donde E_ 1 > E_ 2. Por ejemplo, la tripleta ( 4, 7, 3) tiene dos inversiones que son ( 4, 3) y ( 7, 3) , la tripleta ( 9, 5, 1) tiene tres inversiones que son ( 9, 5) , ( 9, 1) y ( 5, 1) , la tripleta ( 1, 3, 2) tiene una inversio\u0301n que es ( 3, 2) y la tripleta ( 2, 5, 8) no tiene inversiones. Escribe un programa que lea una secuencia de N tripletas y que las ordene bajo los siguientes criterios: - Las tripletas con menor cantidad de inversiones deben aparecer primero. - En caso de empate en cantidad de inversiones, deben aparecer primero las tripletas cuyo primer elemento sea menor. - En caso de empate en cantidad de inversiones y en el primer elemento, deben aparecer primero las tripletas cuyo segundo elemento sea menor. - En caso de empate en cantidad de inversiones y en los dos primeros elementos, deben aparecer primero las tripletas cuyo tercer elemento sea menor.",
    "input": "Un entero N seguido de N tripletas. Puedes suponer que 1 \u2264 N \u2264 10^ 5, que los elementos de las tripletas esta\u0301n entre - 1000 y + 1000 y que ninguna tripleta tiene elementos repetidos.",
    "output": "Las N tripletas despue\u0301s de ordenarlas.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15238
  },
  {
    "title": "Marvel VS DC",
    "url": "https://omegaup.com/arena/problem/Marvel-VS-DC",
    "history": "# MARVEL VS DCMARVEL AND DC want to know once and for all who has the winning team. For this purpose, each franchise selects a team of superheroes who have an assigned personal score depending on their power. The first member of each team is selected and they face each other in a duel, whoever has the most points wins. This superhero will fight with the next in score of the other team and so on until an overall winner is obtained. In the case that the last two superheroes facing each other have the same score, a tie will be declared.",
    "input": "The first line wiht the n number of members of each team where 1 \u2264 n \u2264 20 . A second line with the score s of each superhero MARVEL and a third line with the score s of each superhero of DC, where 1 \u2264 s \u2264 100 .",
    "output": "1 if the winner team is MARVEL, < br> 2 if the winner team is DC, < br> 3 if it is a tie# # # ExamplesInput < br> 5 6 < br> 23 15 72 29 12 < br> 45 10 5 8 87 23 < br> Output < br> 2Input < br> 3 6 < br> 45 76 23 < br> 12 71 41 76 31 19 < br> Output < br> 3",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 15178
  },
  {
    "title": "Atenci\u00f3n de clientes",
    "url": "https://omegaup.com/arena/problem/Atencion-de-clientes",
    "history": "Realiza un programa que permita atender a una serie de personas de acuerdo a su rango de edad, pero tambie\u0301n considerando su hora de llegada; de manera que, las personas tengan oportunidad de ser atendidas y no duren demasiado formados. La poli\u0301tica de atencio\u0301n dice que las personas de 50 an\u0303os en adelante tienen un menor tiempo de espera, puesto que por cada 3 que se atienden de 50 en adelante, se atienden 2 de la fila comu\u0301n. Realiza un programa que ayude a identificar el orden y momento de cada una de las personas que fueron llegando. Se asume que una vez que comienza el turno de atencio\u0301n de una de las filas no se suspende hasta terminar de atender al nu\u0301mero de personas correspondiente. Ejemplo: suponiendo que el servicio arranca a las 8: 00 y en la fila comu\u0301n hay 5 personas que llegaron a las 7: 59, en la fila de mayores llega una persona a las 8: 01. El servicio arranca atendiendo a 2 personas de la fila comu\u0301n, una a las 8: 00 y otra a las 08: 01, es decir, NO se debe suspender el turno de la fila comu\u0301n por el hecho de que haya llegado alguien a la fila de mayores. Nota: Toma en cuenta que si una persona se forma en una fila ( de mayores o la comu\u0301n) a la misma hora que otra, se formara\u0301 primero la persona cuyo nombre sea menor en orden lexicogra\u0301fico.",
    "input": "Un entero N que representa el nu\u0301mero de personas que llegaron a formarse, el tiempo de inicio de atencio\u0301n I dado por 2 enteros separados por \" : \" , es decir una hora y un minuto. Finalmente, se leera\u0301n N_ i li\u0301neas que contienen una cadena P que representa el nombre de la persona seguida de un \" - \" , posteriormente un entero E que representa la edad de la persona, seguido de un \" - \" y el momento M en el que la persona llego\u0301 a formarse ( por 2 enteros separados por \" : \" ) .",
    "output": "N_ i li\u0301neas que estara\u0301n formadas por el nombre de la persona n seguida por un espacio y finalmente, el momento m en el comenzo\u0301 a ser atendido. NOTA: puedes suponer que cada persona tarda un minuto en ser atendida.",
    "note": "",
    "topics": [
      "data structures",
      "sortings"
    ],
    "id": 15114
  },
  {
    "title": "Modificando secuencias recursivamente (Reto Tokio)",
    "url": "https://omegaup.com/arena/problem/Modificando-secuencias-recursiv4",
    "history": "Escribe un programa que implemente el siguiente algoritmo recursivo f, el cual opera sobre una secuencia S de enteros y realiza los siguientes pasos: 1. Ordena S. 2. Si S tiene 20 o ma\u0301s elementos, entonces: - Invierte el orden de los primeros 20 elementos de S. 3. Busca la posicio\u0301n p del primer 0 de S. 4. Si la bu\u0301squeda tiene e\u0301xito, entonces: - Escribe un 1 en p. - Ejecuta f sobre la secuencia posterior a p.",
    "input": "Un entero N seguido de los N enteros de S. Puedes suponer que 1 \u2264 N \u2264 10^ 4 y que todos los elementos de S esta\u0301n entre - 1000 y + 1000.",
    "output": "La secuencia S despue\u0301s de ejecutar f sobre ella.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "sortings",
      "implementation"
    ],
    "id": 15111
  },
  {
    "title": "LEVEL UP!",
    "url": "https://omegaup.com/arena/problem/P2-ciic-2022-LEVEL-UP",
    "history": "Despue\u0301s de un largo tiempo entrenando tus destrezas de sigilo al ma\u0301ximo nivel, comienzas a ejercitar tu fuerza. Para eso, entras en un calabozo que contiene n monstruos. Al inicio, tu nivel de fuerza es 0 y cada monstruo tiene un nivel l_ i. Tu\u0301 solamente puedes derrotar a un monstruo si tu nivel de fuerza es mayor o igual al suyo. En el momento en que derrotas a un monstruo este desaparece y tu nivel de fuerza aumenta en 1. Pero como ya habi\u0301as entrenado tu sigilo, puedes decidir atacar a los monstruos en el orden que quieras sin que se den cuenta. No es necesario que acabes con todos los monstruos. \u00bfCua\u0301l es el ma\u0301ximo nivel de fuerza que puedes alcanzar?",
    "input": "La entrada consistira\u0301 en una li\u0301nea con un entero n representando el numero de monstruos. Luego siguen n li\u0301neas, donde cada li\u0301neaes un entero representando el nivel l_ i del monstruo i.",
    "output": "Un solo entero representando el ma\u0301ximo nivel que se puede alcanzar.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 14844
  },
  {
    "title": "Programando el m\u00f3dulo lunar",
    "url": "https://omegaup.com/arena/problem/Programando-el-modulo-lunar",
    "history": "La Ingeniera < a href= \" https: / / en. wikipedia. org/ wiki/ Margaret_ Hamilton_ ( software_ engineer) \" > Margaret Hamilton< / a> esta\u0301 a cargo de desarrollar el software para la computadora a bordo del mo\u0301dulo lunar de la misio\u0301n Apolo a la Luna. La computadora solamente tiene capacidad para realizar C operaciones, pero es posible que los astronautas a bordo del mo\u0301dulo lunar soliciten a la computadora realizar R operaciones. Si R excede C, la computadora debe elegir las C operaciones ma\u0301s importantes, ya que las R- C operaciones restantes no podra\u0301n ser realizadas. Ayuda a la Ing. Hamilton a escribir un programa que dada la capacidad C de la computadora a bordo del mo\u0301dulo lunar y las R operaciones solicitadas por los astronautas, determine cua\u0301les son las C operaciones ma\u0301s importantes.",
    "input": "En la primera li\u0301nea los nu\u0301meros C y R, separados por un espacio. En la segunda li\u0301nea, R enteros positivos { r_ i } separados por espacio, indicando la importancia de cada una de las R operaciones solicitadas por los astronautas.",
    "output": "Los C enteros positivos que corresponden a la importancia de las C operaciones ma\u0301s importantes, ordenadas de mayor a menor.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 14809
  },
  {
    "title": "B\u00fasquedas y modificaciones en un arreglo",
    "url": "https://omegaup.com/arena/problem/Busquedas-y-modificaciones-en-un",
    "history": "Dado un arreglo de N enteros, escribe un programa que procese una secuencia de M comandos de los siguientes tipos: - ` EXISTE` K: Determinar si el entero K existe o no en el arreglo. - ` CAMBIA_ PARES` : Sumar 3 a todos los elementos del arreglo que tengan un valor par.",
    "input": "El entero N seguido de los N enteros del arreglo. Posteriormente, el entero M seguido de los M comandos a procesar. Puedes suponer que 0 \u2264 N, M \u2264 10^ 5 y que los elementos del arreglo esta\u0301n en el rango de 0 a 10^ 9.",
    "output": "Para cada evento del tipo ` EXISTE` , un 1 si el entero buscado existe en el arreglo y un 0 en caso contrario. Los valores impresos deben aparecer separados por espaciado en blanco.",
    "note": "",
    "topics": [
      "binary search",
      "sortings"
    ],
    "id": 14662
  },
  {
    "title": "Los mola mola",
    "url": "https://omegaup.com/arena/problem/Los-mola-mola",
    "history": "Los peces mola mola ( O peces lunares) ! Molan mucho! Son tan grandes y tan delgados a la vez, siendo muy altos o muy anchos. Axyoan, un bio\u0301logo marino reconocido, estaba estudiando un tanque de mola molas, termino horrorizado cuando se dio cuenta que los peces que tenia en su tanque todos eran canibales, por lo cual se estaban comiendo entre si. Los peces mola mola al ser tan delgados, su grosor se suele ignorar, lo que importa es que tan altos y largos son. Para que un pez mola mola se coma a otro, el devorador tiene que ser ma\u0301s alto y ma\u0301s largo que su presa, de otra manera no habri\u0301a forma de que cupiera en su estomago. Sabiendo esto, y que en el tiempo que Axyoan estuvo afuera, todos los mola mola se comieron a los peces que se podian comer, \u00bfAl final cuantos peces quedara\u0301n?",
    "input": "Un entero N ( 1 \u2264 N \u2264 1000000) que indica la cantidad de peces en el tanque, seguido van a haber N lineas cada una conteniendo con dos nu\u0301meros X, Y, donde la i- esima indica la altura y largo del i- esimo pez.",
    "output": "Un solo entero indicando la cantidad de peces restantes.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 14496
  },
  {
    "title": "Ordenando alumnos por calificaciones",
    "url": "https://omegaup.com/arena/problem/Ordenando-alumnos-por-calificaci",
    "history": "Al inicio de un curso de matema\u0301ticas, el profesor les dijo a los alumnos que su calificacio\u0301n final estari\u0301a dada por un u\u0301nico examen E_ 1. Sin embargo, como a varios alumnos les fue mal, el profesor dio la oportunidad de presentar un segundo examen opcional E_ 2, de modo que la calificacio\u0301n final de un alumno que presentara ambos estari\u0301a dada por el promedio real de dichos exa\u0301menes. El curso ya ha terminado y el profesor desea ordenar a los alumnos bajo los siguientes criterios: - Los alumnos de mayor calificacio\u0301n final deben aparecer primero. - En caso de empate en calificacio\u0301n final, los alumnos que hayan presentado la menor cantidad de exa\u0301menes deben aparecer primero. - En caso de empate en calificacio\u0301n final y en nu\u0301mero de exa\u0301menes presentados, los alumnos con mayor calificacio\u0301n en el examen E_ 1 deben aparecer primero.",
    "input": "Un entero N seguido de N filas. Cada fila contiene dos enteros E_ 1, E_ 2 que denotan las calificaciones obtenidas por cada alumno ( si E_ 2 = - 1 entonces el alumno decidio\u0301 no presentar el segundo examen opcional, por lo que su calificacio\u0301n final estari\u0301a dada u\u0301nicamente por E_ 1) . Puedes suponer que 1 \u2264 N \u2264 10^ 5, que 0 \u2264 E_ 1 \u2264 10 y que - 1 \u2264 E_ 2 \u2264 10.",
    "output": "Una secuencia de N parejas de enteros que denota la lista de alumnos ordenada bajo los criterios previamente mencionados.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 14489
  },
  {
    "title": "Modificando secuencias recursivamente (reloaded)",
    "url": "https://omegaup.com/arena/problem/Modificando-secuencias-recursiv3",
    "history": "Escribe un programa que implemente el siguiente algoritmo recursivo f, el cual opera recursivamente sobre una secuencia de enteros y realiza los siguientes pasos: - Sea S la secuencia recibida por f y sea N la cantidad de elementos de S. Si N \u2265 2, entonces: 1. Si el primer elemento de S es par, entonces: - 1. 1. Ordena ascendentemente los primeros N- 1 elementos de S. - 1. 2. Ejecuta f sobre los primeros N- 1 elementos de S. 2. Si el u\u0301ltimo elemento de S es par, entonces: - 2. 1. Invierte el orden de los u\u0301ltimos N- 1 elementos de S. - 2. 2. Ejecuta f sobre los u\u0301ltimos N- 1 elementos de S.",
    "input": "Un entero N seguido de los N enteros de la secuencia original sobre la que f se ejecutara\u0301. Puedes suponer que 1 \u2264 N \u2264 20 y que todos los elementos de la secuencia esta\u0301n entre 0 y 10.",
    "output": "La secuencia despue\u0301s de ejecutar f sobre ella.",
    "note": "",
    "topics": [
      "dp",
      "sortings",
      "implementation",
      "dfs and similar"
    ],
    "id": 14388
  },
  {
    "title": "Acariciando Perros",
    "url": "https://omegaup.com/arena/problem/Acariciando-Perros",
    "history": "Mati\u0301as Mateo Mauricio Ma\u0301rquez Maci\u0301as tiene varios perros. Como es buen duen\u0303o, va a proceder a acariciarlos a todos. Pordesgracia solo puede acariciar un perro a la vez. Adema\u0301s, sus perros son impacientes, y si no son acariciados despue\u0301s de un rato, se emperran ( perros emperrados) . Esta impaciencia se representa por un nu\u0301mero. Cada vez que Mati\u0301as acaricia a un perro, todos los dema\u0301s decrementan su paciencia por 1. El perro siendo acariciado no reduce su paciencia. Mati\u0301as puede seguir acariciando perros siempre y cuando la paciencia de ningu\u0301n perro llegue a cero. Determina la cantidad de caricias que Mati\u0301as puede dar.",
    "input": "En la primer li\u0301nea un entero 2\u2264 n \u2264 1000. La cantidad de perros. En la segunda li\u0301nea n nu\u0301meros 1\u2264 a_ i \u2264 1000 donde el nu\u0301mero a_ i indica la paciencia inicial del i- e\u0301simo perro.",
    "output": "Imprime la cantidad ma\u0301xima de caricias que Mati\u0301as puede dar.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 14347
  },
  {
    "title": "Karate en TecnoMate",
    "url": "https://omegaup.com/arena/problem/Karate-en-TecnoMate",
    "history": "Solicite la descripcio\u0301n de este problema a su profesor.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 14224
  },
  {
    "title": "Carretera",
    "url": "https://omegaup.com/arena/problem/Carretera2",
    "history": "La comunidad Shipibo- Conibo esta\u0301 planeando colocar puntos de acceso a internet a lo largo de un tramo recto de la Carretera Marginal de la Selva para cubrir a los asentamientos que se encuentran junto a dicha carretera. Hay N asentamientos en este tramo recto que va de sur a norte y cada uno esta\u0301 ubicado en una posicio\u0301n dada por un nu\u0301mero entero no negativo de metros, donde 0 es el punto ma\u0301s al sur de este tramo. Como la carretera es muy grande, se puede asumir que cada asentamiento es un punto. Esta comunidad requiere tu ayuda porque tienen un problema muy complejo. Como primer punto, al comprar un punto de acceso a internet, se puede elegir el radio de cobertura de e\u0301ste. Es decir, si un punto de acceso esta\u0301 en la posicion x y tiene un radio de cobertura de 8, todos los puntos en el intervalo cerrado [ x - 8, x + 8] tendra\u0301n internet. Es ma\u0301s, cada punto de acceso a internet puede estar localizado en cualquier posicio\u0301n y tener un radio de cobertura distinto. Sin embargo, la complicacio\u0301n es que el costo de cada punto de acceso depende de su radio de cobertura y esta\u0301 dado por la siguiente fo\u0301rmulaF + 2 R_ i \u00d7 Vdonde F es un costo fijo, R es el radio de cobertura elegido para ese punto y V es un costo variable a usar para todos los puntos de acceso. La comunidad requiere que determines una configuracio\u0301n de costo mi\u0301nimo de puntos de acceso de manera que todos los asentamientos tengan internet. Puedes elegir la cantidad puntos de acceso, sus posiciones y sus radios de cobertura. No olvides que so\u0301lo tienes que reportar el costo total mi\u0301nimo.",
    "input": "La primera li\u0301nea de la entrada contiene 3 enteros F, V y N. La segunda li\u0301nea contiene N enteros en el intervalo [ 0, 100000] , que son las posiciones de los asentamientos. Estas posiciones no necesariamente esta\u0301n en orden y pueden haber puntos repetidos.",
    "output": "Un u\u0301nico entero con el costo total mi\u0301nimo de una configuracio\u0301n que pueda cubrir a todos los asentamientos.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 14131
  },
  {
    "title": "Locacion de casas",
    "url": "https://omegaup.com/arena/problem/Locacion-de-casas",
    "history": "Existen N casas a la venya. La i- va casa cuesta A_ i dolares. Tu\u0301 tienes un presupuesto de B dolares para gastar. \u00bfCu\u0301al es numero ma\u0301ximo de casas que puedes comprar?",
    "input": "La primera linea de entrada da el numero de casos de prueba deinido como T. Cada caso de prueba inicia con una li\u0301nea que contiene 2 enteros que corresponden a N y B respectivamente. La segunda linea contiene N enteros. The i- vo entero es A_ i es decir el costos de la i- va casa.",
    "output": "Para cada caso debera\u0301 existir una linea de salida que contenga * Caso # x: y* donde x es el numero de caso empezando con 1 y y es el numero ma\u0301ximo de casas que puede comprar",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 13806
  },
  {
    "title": "Ocupados",
    "url": "https://omegaup.com/arena/problem/Ocupados",
    "history": "Desde que iniciaron los entrenamientos de preseleccio\u0301n, ha sido difi\u0301cil seleccionar un horario para los entrenamientos y concursos. Esto debido a la ocupada agenda de los participantes, ( o procrastinacio\u0301n, o el covid, o tal vez nunca lo sabremos) . Una teori\u0301a del COMICH es que el tiempo que toman las actividades no se ha organizado en la secuencia ideal, aunque ya han intentado muchas variaciones como poner primero las actividades que requieren ma\u0301s tiempo, o realizar primero todas las que requieren un nu\u0301mero par de horas y un sin fin ma\u0301s. Desafortunadamente ninguna estrategia ha funcionado para que lleguen ma\u0301s de 3 alumnos a los entrenamientos. La u\u0301ltima esperanza es organizar las actividades en una secuencia * * hermosa* * \u00bfY que\u0301 rayos es eso se preguntaran? Pues bien, aqui\u0301 va el rollo: si tienen una lista con n nu\u0301meros enteros A= [ a_ 0, a_ 1, . . . , a_ n- 1] una secuencia hermosa es aquella en la que la suma de todos los pares consecutivos | a_ i- a_ i- 1| para 0 \u2264 i< n sera\u0301 mi\u0301nima. Su tarea sera\u0301 ayudar al COMICH a determinar el nu\u0301mero mi\u0301nimo de intercambios que deberi\u0301an realizarse para que una lista A cualquiera, la cual contenga la duracio\u0301n de todas las actividades propuestas se convierta en una lista hermosa.",
    "input": "* * n* * el nu\u0301mero de elmentos en ASeguido de n enteros a_ 0 a_ 1 . . . a_ n- 1",
    "output": "Un u\u0301nico entero indicando el nu\u0301mero mi\u0301nimo de intercambios necesarios para generar la secuencia hermosa.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 13709
  },
  {
    "title": "Wena ordenadora",
    "url": "https://omegaup.com/arena/problem/Wena-ordenadora",
    "history": "Wendolin tiene una pequen\u0303a obsesio\u0301n con el orden, todo lo que ve lo tiene que ordenar, adora hacerlo, es su aficio\u0301n favorita. Un di\u0301a se dio cuenta de que su obsesio\u0301n habi\u0301a ido muy lejos, pues leyendo un libro se percato\u0301 de que las palabras le causaban cierta molestia, queri\u0301a agrupar cada una de las letras y ordenar cada grupo de forma ascendente. Penso\u0301 primero en contar cada letra y despue\u0301s reescribirlo en un cuaderno, pero son bastantes palabras y probablemente perderi\u0301a la cuenta, esto adema\u0301s de causar ma\u0301s molestia, tambie\u0301n hari\u0301a todo ma\u0301s complicado. Por suerte es programadora y sabe que puede solucionar este gran e importante problema con sus habilidades. Necesita un programa que le diga la cantidad total de cada una de las letras, dando igual si son mayu\u0301sculas o minu\u0301sculas, no era necesario que el programa le dijera de que\u0301 letra habla, solo la cantidad, pues ella lo intuiri\u0301a porque este tiene que mostrar el resultado ordenado de la menor letra a la mayor, si no hay ni una sola letra de alguna de las 26 letras del abecedario ingle\u0301s, simplemente se ignora y no se imprime nada. Haz este programa y ayuda a Wen con su obsesio\u0301n.",
    "input": "Una oracio\u0301n de longitud N ( 1 \u2264 N \u2264 1e7) que puede contener L letras distintas ( 1 \u2264 L \u2264 26, indistintamente pueden ser mayu\u0301sculas o minu\u0301sculas, todas pertenecientes al alfabeto ingle\u0301s ) o espacios.",
    "output": "La cantidad total de cada una de las letras existentes en toda la oracio\u0301n, ordenadas de menor a mayor y separadas por un espacio.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 13704
  },
  {
    "title": "Destruyendo el Quicksort",
    "url": "https://omegaup.com/arena/problem/Destruyendo-el-Quicksort",
    "history": "Crystal recie\u0301n ha aprendido el algoritmo Quick Sort. Este algoritmo de Divide and Conquer tiene una propiedad interesante: Su mejor rendimiento posible para ordenar un arreglo a de n elementos diferentes usa O( nlogn) comparaciones, mientras que el peor usa O( n^ 2) y el promedio usa O( nlogn) . Crystal usa la expresio\u0301n pivot = \u230a| a| / 2\u230b para hacer su propio Quick Sort. De esta manera, su algoritmo se ve asi\u0301: \u201c` void particion( int pivot, vector< int> a, vector< int> L, vector< int> R) for( int i = 0; i < a. size( ) ; i+ + ) if( i = = pivot) continue; if( a[ i] < = a[ pivot] ) L. emplace_ back( a[ i] ) ; else R. emplace_ back( a[ i] ) ; void Quicksort( vector< int> a) if( a. size( ) < = 1) return; int pivot = a. size( ) / 2; vector< int> L, R; particion( pivot, a, L, R) ; Quicksort( L) ; Quicksort( R) ; L. emplace_ back( a[ pivot] ) ; for( auto x : R) L. emplace_ back( x) ; a = L; \u201c` Ahora, se te dara\u0301 un entero n y debes decirle a Crystal una permutacio\u0301n de los enteros ( 1, 2, . . . , n) que use la ma\u0301xima cantidad de comparaciones posible. * * Nota* * : Solo considerar las comparaciones en la funcio\u0301n ` particion` .",
    "input": "La primera li\u0301nea de entrada contiene un entero n, El nu\u0301mero de elementos de la permutacio\u0301n.",
    "output": "Imprime una sola li\u0301nea, una permutacio\u0301n que use la ma\u0301xima cantidad de comparaciones. Dado que pueden haber mu\u0301ltiples respuestas, imprime cualquiera de ellas.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 13625
  },
  {
    "title": "Desorden en el Consejo Estudiantil",
    "url": "https://omegaup.com/arena/problem/Desorden-en-el-Consejo-Estudiant",
    "history": "# La historia. . . Shirogane- san y Kaguya- sama, li\u0301deres del consejo estudiantil de Shuuchiin, tienen la tarea de organizar a los alumnos de la academia en una fila. Para esto se decidio\u0301 asignar un ID a cada alumno, de forma que al formarse los ID' s este\u0301n ordenados de forma ascendente. Sin embargo, la despistada secretaria Chika olvido organizar los ID' s, y los asigno en desorden entre los alumnos que estaban formados. Para no deshacer la fila, los alumnos pueden intercambiar lugares si solo si ambos alumnos son adyacentes en la fila ( que no haya alumnos entre ellos) , y si la paridad de sus ID' s es diferente, es decir, un ID es par y el otro impar. Ayuda al consejo estudiantil a determinar si pueden ordenar a los alumnos o no. ! [ ] ( fujiwara_ ok. gif)",
    "input": "Un entero n, que indica el nu\u0301mero de alumnos, seguido de n enteros con el ID de cada alumno.",
    "output": "Imprime \" Ordenable\" en caso de que los alumnos puedan ordenarse, o \" ! Ordenable\" en caso contrario.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 13555
  },
  {
    "title": "Ordenamiento inverso",
    "url": "https://omegaup.com/arena/problem/Ordenamiento-inverso",
    "history": "Problema ba\u0301sico de arreglo donde se debe de leer un arreglo y ordenarlo de mayor a menor.",
    "input": "Leer primero N, donde N es un nu\u0301mero entero positivo dentro del rango 1< = N< = 100 y el cual indica la cantidad de nu\u0301meros que se leeran desde el teclado. En las siguientes N lineas se encuentran los datos de entrada.",
    "output": "Imprimir el arreglo ordenado de mayor a menor",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 13466
  },
  {
    "title": "Juntando conchitas",
    "url": "https://omegaup.com/arena/problem/Juntando-conchitas-ASINUS",
    "history": "Emiliano ha llegado a la playa y se encuentra jugando en la arena con algunos juguetes que sus papa\u0301s le llevaron. Especialmente se encuentra jugando con una pala y una tina pequen\u0303a, por lo que se le ha ocurrido comenzar a recolectar conchas que el mar ha dejado en la orilla. Sin embargo, como es un nin\u0303o muy meto\u0301dico, ha decidido registrar cada una de las conchas que va recuperando de la arena, para ello, las comenzo\u0301 a clasificar por su peso en gramos. Su idea es que posteriormente se las pueda mostrar a sus papa\u0301s, pero, se le ha ocurrido que cuando ese momento llegue, le gustari\u0301a irlas mostrando de la ma\u0301s pequen\u0303a a la ma\u0301s grande para que se sorprendan. # ProblemaAyuda a Emiliano a registrar el peso en gramos de * * * N* * * conchas que ha recogido en la playa y que posteriormente, se muestre el peso en gramos de cada concha; de la de menor peso, a la que pese ma\u0301s.",
    "input": "* * * N* * * - el nu\u0301mero de conchas que ha recogido en la playa y de las cuales ira\u0301 registrando el peso. * * * K1* * * , * * * K2* * * , * * * K3* * * , * * * K4* * * , * * * . . . * * * - el peso en gramos respectivo a cada una de las * * * N* * * conchas.",
    "output": "* * * K1* * * , * * * K2* * * , * * * K3* * * , * * * K4* * * , * * * . . . * * * - el peso en gramos respectivo a cada una de las * * * N* * * conchas, en orden de menor a mayor. # ConsideracionesToma en cuenta el formato de la entrada y salida, ya que en esa forma sera\u0301 evaluado tu envi\u0301o.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 13436
  },
  {
    "title": "O todos o ninguno",
    "url": "https://omegaup.com/arena/problem/O-todos-o-ninguno",
    "history": "Junto con tus amigos, acabas de organizar una salida al famoso parque de diversiones Six Flags. Su deseo es subirse a todos los juegos del parque, pero no contabas con que los juegos tienen un requisito de estatura mi\u0301nima y con que varios de tus amigos son bastante chaparritos. Como eres muy solidario y no quieres excluir a nadie, acordaron que so\u0301lo se subira\u0301n a los juegos en los que todos cumplan el requisito de estatura. \u00bfA cua\u0301ntos juegos podra\u0301n subirse?",
    "input": "Inicialmente, dos enteros N y M. Posteriormente, una secuencia de N enteros que denotan los requisitos de estatura mi\u0301nima de los N juegos del parque. Finalmente, una secuencia de M enteros que denotan las estaturas de tu grupo de amigos, incluye\u0301ndote. Puedes suponer que 1 \u2264 N, M \u2264 10^ 5 y que todas las estaturas esta\u0301n en centi\u0301metros en el rango de 0 a 250.",
    "output": "Un entero que sea la cantidad de juegos a los que todos se pueden subir.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 13415
  },
  {
    "title": "Equilibrium",
    "url": "https://omegaup.com/arena/problem/Equilibrium",
    "history": "< br/ > A Erick le gusto\u0301 tanto el examen estatal, en especial el problema de Bloques de madera, \u00a1que decidio\u0301 comprar sus propios bloques de madera! Compro N bloques y comenzo\u0301 a apilarlos, cada uno de los N bloques tiene una longitud de a_ i para cada i entre 1 y N, como los bloques son cubos el solo saber la longitud te dice todas las dimensiones. Para poder poner un cubo arriba de otro, este ocupa tener una longitud estrictamente menor, para mantener la estabilidad de cada torre de bloques. Sin embargo, Erick queri\u0301a tener torres altas, por lo que decidio\u0301 construir la menor cantidad de torres para que estas fueran lo ma\u0301s altas posibles. \u00bfCua\u0301nto es la mi\u0301nimo cantidad de torres que puede hacer, utilizando todos los bloques? Hacer una torre significa poner uno o ma\u0301s bloques de madera uno sobre otro.",
    "input": "Un entero N indicando la cantidad de bloques. < br/ > Seguido vienen N enteros describiendo las longitudes de los bloques de madera. < br/ >",
    "output": "< br/ > La mi\u0301nima cantidad de torres que puede lograr.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 13408
  },
  {
    "title": "Ordenando por la parte decimal",
    "url": "https://omegaup.com/arena/problem/Ordenando-por-la-parte-decimal",
    "history": "Escribe un programa que lea N reales positivos y que los ordene de la siguiente manera: - Si la parte decimal de a es menor que la parte decimal de b, entonces a debe ir antes que b. La parte decimal incluye el punto decimal ( es decir, 0. 123 < 0. 5) . - Los nu\u0301meros que empaten en la parte decimal deben quedar ordenados de menor a mayor.",
    "input": "Un entero N seguido de N reales positivos. Puedes suponer que 1 \u2264 N \u2264 10^ 5.",
    "output": "Los N reales despu\u0301es de ordenarlos.",
    "note": "",
    "topics": [
      "math",
      "sortings",
      "implementation"
    ],
    "id": 13294
  },
  {
    "title": "Yu-Gi-Oh!",
    "url": "https://omegaup.com/arena/problem/Yu-Gi-Oh",
    "history": "Jorge se encontraba jugando Yu- Gi- Oh! con sus n cartas cuando de pronto adquirio\u0301 un poder que le permiti\u0301a ver el nivel de cada carta en su pila de cartas ( deck) . Las cartas esta\u0301n numeradas de 1 a n desde el fondo hasta la cima de la pila. El deck esta\u0301 representado por un arreglo con las puntuaciones p_ i ( 1 \u2264 i \u2264 n) de cada carta. La carta con puntuacio\u0301n p_ 1 esta\u0301 en el fondo y la carta con puntuacio\u0301n p_ n esta\u0301 en la cima. Jorge esta\u0301 a punto de revolver su deck, por lo que quiere utilizar este poder para maximizar la fuerza de su deck y vencer a Santy, su malvado oponente. La fuerza del deck se define como: \u2211_ i= 1^ n n^ n - i\u00b7 p_ i Jorge revuelve su deck de la siguiente manera: - Elige un entero k ( 0 < k) . - Toma las primeras k cartas de la cima de su deck y las pone, en el orden en el que esta\u0301n, en la cima de una segunda pila que va a ser su deck revuelto. - Repite el proceso hasta que no queden cartas en su deck original. Por ejemplo, si el deck es 1 2 3 4 5, puede revolverlo de la siguiente manera: - k = 1: se toma la primer carta de la cima del deck original y se ponen en la cima del segundo deck. - Original: 1 2 3 4- Segundo: 5- k = 3: se toman las primeras 3 cartas de la cima del deck original y se ponen en la cima del segundo deck. - Original: 1- Segundo: 5 2 3 4- k = 1: se toma la primer carta de la cima del deck original y se ponen en la cima del segundo deck. - Original: - Segundo: 5 2 3 4 1Jorge sabe que eres un buen programador y quiere ganar a toda costa, por lo que te ha pedido que le ayudes a revolver su deck y calcules la fuerza obtenida. # ProblemaDado un arreglo con las puntuaciones p_ i de las n cartas del deck de Jorge ( desde el fondo hasta la cima) , revuelve el deck y calcula la fuerza obtenida. El puntaje obtenido para cada caso sera\u0301 mayor si tu respuesta se acerca a la fuerza ma\u0301xima posible, o menor si se aleja de la fuerza ma\u0301xima posible. Si imprimes la ma\u0301xima fuerza posible, obtendra\u0301s todos los puntos.",
    "input": "En la primera li\u0301nea un entero n, la cantidad de cartas del deck de Jorge. En la segunda li\u0301nea, n enteros p_ i, las puntuaciones de cada carta empezando por el fondo y terminando en la cima del deck.",
    "output": "Una li\u0301nea con un entero indicando la fuerza calculada, mo\u0301dulo 10^ 9 + 7.",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "math",
      "number theory",
      "greedy"
    ],
    "id": 13002
  },
  {
    "title": "Ordena las cajas",
    "url": "https://omegaup.com/arena/problem/Ordena-las-cajas",
    "history": "Panchoberto es un coleccionista de cajas. Sus cajas son todos cubos, conocemos su volumen y su peso. Panchoberto quiere ordenar las cajas en una linea, primero con respecto a su volumen y luego conforme a su peso. Ordenara\u0301 las cajas de menor a mayor tomando en cuenta su volumen. Si hay un empate, se resolvera\u0301 con la caja que tenga un mayor peso. Ayu\u0301dale a decir co\u0301mo quedara\u0301n ordenadas sus cajas.",
    "input": "En la primer li\u0301nea un entero 2\u2264 n \u2264 1e5, la cantidad de cajas que tiene Panchoberto. En las siguientes n li\u0301neas viene un par de enteros 1 \u2264 a_ i, b_ i \u2264 1e5, el primer nu\u0301mero es el volumen y el segundo el peso de la caja correspondiente.",
    "output": "n enteros en una linea separados por un espacio y terminando en un salto de li\u0301nea. Cada entero es el i\u0301ndice de la caja que va en esa posicio\u0301n luego del ordenamiento.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 12923
  },
  {
    "title": "Operaciones triviales sobre un arreglo",
    "url": "https://omegaup.com/arena/problem/Operaciones-triviales-sobre-un-a",
    "history": "Dado un arreglo de N enteros, escribe un programa que procese una secuencia de M comandos de los siguientes tipos: - ` SUMA` K: Sumar el entero K a todos los elementos del arreglo. - ` ORDENA` : Ordenar el arreglo.",
    "input": "El entero N seguido de los N enteros del arreglo. Posteriormente, el entero M seguido de los M comandos a procesar. Puedes suponer que 0 \u2264 N, M \u2264 10^ 5 y que tanto los elementos del arreglo como los valores a sumar esta\u0301n en el rango de - 100 a + 100.",
    "output": "Los N enteros del arreglo despue\u0301s de procesar los comandos.",
    "note": "",
    "topics": [
      "math",
      "sortings"
    ],
    "id": 12895
  },
  {
    "title": "El desfile de perritos (original)",
    "url": "https://omegaup.com/arena/problem/El-desfile-de-perritos",
    "history": "Esta\u0301s por organizar el desfile anual de perritos y quieres que salga perfecto. Ya cuentas con los nombres de N perritos que desfilara\u0301n, pero desafortunadamente hay muchos perritos que se llaman igual y eso puede prestarse a confusiones, por lo que quieres evitar que dos perritos con el mismo nombre este\u0301n en el escenario al mismo tiempo. El escenario tiene espacio para E perritos y la idea es que los perritos desfilen de izquierda a derecha, de modo que cuando salga un perrito del escenario, vaya entrando el siguiente. Por ejemplo, si E= 3 entonces entrara\u0301n al escenario los perritos 1, 2, y 3; despue\u0301s saldra\u0301 el perrito 1 para que pueda entrar el 4, despue\u0301s saldra\u0301 el perrito 2 para que pueda entrar el 5, etce\u0301tera. Faltan pocas horas para el desfile y quisieras simularlo con la lista de nombres que ya tienes, para asi\u0301 saber si el orden actual cumplira\u0301 con tus expectativas o si ocurrira\u0301 en algu\u0301n momento lo que quieres evitar. Escribe un programa que te ayude a determinarlo. ! [ enter image description here] [ 1]",
    "input": "Dos enteros N y E seguidos de los nombres de los N perritos que desfilara\u0301n. Puedes suponer que 0 \u2264 E \u2264 N \u2264 10^ 4.",
    "output": "Si dos perritos con el mismo nombre estara\u0301n en el escenario al mismo tiempo, tu programa debe imprimir el mensaje \" * * ` Habran dos perritos con el nombre ` * P* ` al mismo tiempo` * * \" , donde P es el nombre de los perritos involucrados. So\u0301lo debes imprimir ese mensaje la primera vez que ocurra esta situacio\u0301n. Si lo anterior no ocurrira\u0301, tu programa debe imprimir el mensaje \" * * ` El desfile de perritos estara bien hecho` * * \" .",
    "note": "",
    "topics": [
      "sortings",
      "strings"
    ],
    "id": 12854
  },
  {
    "title": "Ordenando por cantidad de cifras",
    "url": "https://omegaup.com/arena/problem/Ordenando-por-cantidad-de-cifras",
    "history": "Escribe un programa que lea una secuencia de N enteros y los ordene de la siguiente manera: - Debera\u0301n aparecer primero los enteros que tengan menos cifras. - En caso de empate en cantidad de cifras, debera\u0301n aparecer primero los enteros de mayor valor.",
    "input": "El entero N seguido de la secuencia de N enteros. Puedes suponer que 0 \u2264 N \u2264 10^ 5, que todos los enteros de la secuencia esta\u0301n entre 0 y 1000 y que e\u0301stos no aparecen con ceros a la izquierda.",
    "output": "Los enteros de la secuencia despue\u0301s de ordenarlos.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 12793
  },
  {
    "title": "Explorando un nuevo mundo",
    "url": "https://omegaup.com/arena/problem/Explorando-un-nuevo-mundo",
    "history": "# HistoriaUna enfermedad mortal amenaza la vida de la tierra. Esta enfermedad convierte a los humanos en murcielagos. La grandes naciones se han unido para encontrar una cura a esto. Los grandes cientificos se dieron cuenta que la cura jama\u0301s sera\u0301 hallada en la tierra, asi\u0301 que decidieron explorar nuevas tierras. La OMI ( Organizacio\u0301n Mundial Interespacial) mando una nave con un gran nu\u0301mero de pasajeros para explorar cierto planeta. Las grandes mentes decidieron dividir a los tripulantes en grupos. El problema es que unas personas tienen menos experiencia que los otros. Cierto tripulante cuenta con una inexperiencia e_ i, esto significa que debe estar en un grupo con * * por lo menos* * e_ i personas. # ProblemaLos cientificos quieren explorar rapido el planeta; por lo cua\u0301l, les conviene tener bastantes grupos. Ayudar a los cientificos a saber cua\u0301l es la cantidad ma\u0301xima de grupos que pueden obtener. * * Nota: * * No es necesario que todas las personas este\u0301n en un grupo. Pueden haber personas que se queden en la nave.",
    "input": "Se te dara\u0301 un nu\u0301mero N que indica la cantidad de personas que hay en la nave. Seguido se te dara\u0301 una lista de N nu\u0301meros e_ i que indica el nivel de * * inexperiencia* * de cada tripulante",
    "output": "Un u\u0301nico nu\u0301mero representado la cantidad ma\u0301xima de grupos que se pueden hacer. # Ejemplos| | input52 3 1 2 2| | output2| | descriptionPodemos dejar a la persona con inexperiencia 3 en la navey los grupos seri\u0301an 1, 2 y 2, 2. Los grupos estan bienformados porque en cada grupo no hay un persona que tenga menospersonas que la experiencia de los integrantes. Adema\u0301s se puedever que es el mayor nu\u0301mero de grupos que se pueden hacer. | | input42 2 1 1| | output3| | end# Limites* * Para un 10",
    "note": "",
    "topics": [
      "sortings",
      "greedy"
    ],
    "id": 12705
  },
  {
    "title": "Mr. Mistoffelees",
    "url": "https://omegaup.com/arena/problem/Mr-Mistoffelees",
    "history": "Mr. Mistoffelees es un mago malvado que busca causar inconveniencias. Su plan mas reciente es cambiar el orden con el cual percibimos los nu\u0301meros. Comos sabemos, el nu\u0301mero 2 va inmediatamente despue\u0301s del 1, el 3 despue\u0301s del 2 etc. A trave\u0301s de magia male\u0301fica, el orden ahora es distinto. Tu tienes una coleccio\u0301n de n nu\u0301meros enteros que mantienes ordenada. Tu tarea es acomodarlos con respecto al nuevo orden dado por el mago.",
    "input": "En la primer li\u0301nea un entero 1\u2264 n \u2264 1e5, la cantidad de nu\u0301meros afectados por el mago. En la segunda li\u0301nea hay n nu\u0301meros distintos 1 \u2264 a_ i \u2264 n estos representan el nuevo ordenamiento de los nu\u0301meros. En la tercer li\u0301nea un entero 1\u2264 m \u2264 1e5 el taman\u0303o de tu coleccio\u0301n de nu\u0301meros. En la u\u0301ltima li\u0301nea m enteros 1\u2264 b_ i \u2264 n los numeros que tienes en tu coleccio\u0301n.",
    "output": "m enteros separados por un espacio, los cuales deben encontrarse ordenados de forma ascendente.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 12700
  },
  {
    "title": "\u00bfLe brind\u00e9 un buen servicio?",
    "url": "https://omegaup.com/arena/problem/Le-brinde-un-buen-servicio-hoy",
    "history": "Melanie consiguio\u0301 un nuevo trabajo como cajera en un banco. Ella esta\u0301 muy emocionada porque asi\u0301 tendra\u0301 dinero para invitar a Adriana a un lujoso restaurante. Sin embargo, Melanie es pe\u0301sima en su trabajo lo cual preocupa a Alonso, su supervisor, quie\u0301n a pesar de que odia a Adriana y quisiera ver que Melanie sea despedida, debe mejorar la situacio\u0301n o sera\u0301 e\u0301l quie\u0301n sea despedido. Alonso no es tonto, asi\u0301 que le pide a cada cliente que diga que\u0301 tra\u0301mite realizara\u0301 para asi\u0301 poder decirle cua\u0301nto tiempo demorara\u0301 su tra\u0301mite. Con esta informacio\u0301n crea una lista con el tiempo que demorara\u0301 cada cliente en sus tra\u0301mites, la cual puede servir a Melanie para mejorar las cosas. Alonso le da la lista a Melanie y le dice que la despedira\u0301 si no optimiza el funcionamiento de la cola. Melanie se da cuenta que las personas se * * molestan* * si el tiempo que esperan en la cola supera el tiempo que demorara\u0301n en sus tra\u0301mites. Melanie esta\u0301 desesperada por lo que te pide ayuda para que cambies de posicio\u0301n a las personas en la fila de tal forma que la cantidad de personas * * molestas* * sea mi\u0301nima. * * Importante: A pesar de que un cliente este\u0301 molesto Melanie debe atenderlo* *",
    "input": "- La primera linea contiene un nu\u0301mero entero n, la cantidad de personas en la fila. - La segunda li\u0301nea son n nu\u0301meros que representan el tiempo que demorara\u0301 cada persona en hacer su tra\u0301mite.",
    "output": "En una u\u0301nica linea imprime el ma\u0301ximo nu\u0301mero de personas * * no molestas* * que se puede lograr. | | input530 4 3 7 8| | output4| | end| | input105 1 1 1 1 1 1 1 1 1| | output3| | end# Limites- 2 \u2264 n \u2264 10^ 5* * NOTA: * * En el primer ejemplo, si ordenamos a los clientes de la siguiente forma: [ 3 4 8 7 30] , todos los clientes en la fila no estari\u0301an molestos excepto el cliente con tiempo de tra\u0301mite 7 ( el 4to en la fila) , por lo que la respuesta es 4.",
    "note": "",
    "topics": [
      "sortings",
      "greedy"
    ],
    "id": 12680
  },
  {
    "title": "Aburrimiento",
    "url": "https://omegaup.com/arena/problem/Dividir-puntos-en-partes-iguales",
    "history": "La e\u0301poca de pandemia te tiene aburrido y una tarde, ya desesperado, decidiste jugar con puntos en el plano cartesiano. Empezaste con 11 puntos en el plano, y teniendo una atraccio\u0301n desmedida por el equilibrio y el balance, quisiste dividirlos en conjuntos de igual cantidad. Para lograr tu objetivo, trazaste una recta desde el origen a uno de los puntos. De esta forma conseguiste que el plano quedara dividido en dos partes, ambas con 5 puntos en su interior, como se muestra en la figura: ! [ Figura] ( figura. png) Luego de seguir experimentando con distintos puntos e incrementando la cantidad de puntos, te preguntas si esta tarea puede ser automatizada.",
    "input": "Una li\u0301nea con un entero positivo impar n indicando el nu\u0301mero de puntos. Luego seguira\u0301n n li\u0301neas, con 2 nu\u0301meros ( de tipo float) por li\u0301nea separados por un espacio, representando las coordenadas de cada punto en el plano cartesiano.",
    "output": "Una u\u0301nica li\u0301nea con las 2 coordenadas del punto deseado, separadas por un espacio y redondeadas a 4 decimales. El punto de la salida es el u\u0301nico punto que al formar una recta con el origen, divide al conjunto de puntos en dos subconjuntos de igual taman\u0303o a ambos lados de la recta.",
    "note": "Se garantiza que el punto deseado sea u\u0301nico.",
    "topics": [
      "sortings"
    ],
    "id": 12490
  },
  {
    "title": "El par de guantes del Conejo Blanco",
    "url": "https://omegaup.com/arena/problem/El-par-de-guantes-del-Conejo-Bla",
    "history": "El Conejo Blanco regresaba ansiosamente a casa, pues habi\u0301a perdido sus guantes en su camino a ver a la Duquesa. De pronto, el Conejo Blanco vio a Alicia y confundido le dijo \" Ana Mari\u0301a, ve corriendo a casa para traerme el par de guantes que esta\u0301 sobre la mesa\" . Alicia corrio\u0301 presurosa a la casa del Conejo Blanco, sin detenerse a preguntar por que\u0301 la habi\u0301an llamado Ana Mari\u0301a y no Alicia. Al entrar a la casa, vio una mesa en la que habi\u0301a N guantes revueltos y de muchos colores. Al poner ma\u0301s atencio\u0301n, Alicia noto\u0301 que habi\u0301a exactamente una pareja de guantes del mismo color G y que todos los dema\u0301s guantes eran de colores distintos y sin pareja.",
    "input": "Un entero N seguido de N enteros A_ 1, A_ 2, . . . , A_ N que representan los colores de los guantes.",
    "output": "El entero G, correspondiente al color de los guantes que si\u0301 vienen en pareja. # RangosPuedes suponer que 2 \u2264 N \u2264 2 \u00d7 10^ 5 y que 0 \u2264 A_ i \u2264 10^ 9.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 12488
  },
  {
    "title": "lombrices",
    "url": "https://omegaup.com/arena/problem/lombrices-ANH",
    "history": "Debido a una pandemia que azota al mundo ha comenzado a aumentar el desempleo en la ciudad. Cada vez hay menos negocios abiertos, y por cuestio\u0301n de presupuesto muchos de los que si\u0301 se encuentran abiertos esta\u0301n recortando su personal. Una industria que crecio\u0301 fue la agri\u0301cola, ya que la demanda de alimento aumento\u0301 porque la gente no tiene otra cosa que hacer, so\u0301lo comer. Por eso, mi ti\u0301o, fue a buscar empleo en las afueras de la ciudad, pero el u\u0301nico empleo que encontro\u0301 fue de organizador de lombrices. Su trabajo consta de ordenar las lombrices en la granja por taman\u0303o. En la granja tienen organizados estos invertebrados en grupos de 5. Y mi ti\u0301o debe acomodarlos del ma\u0301s pequen\u0303o al ma\u0301s grande. Para facilitarlo, mi ti\u0301o pidio\u0301 le ayudaras a crear un programa que le indique el orden correcto.",
    "input": "Cinco nu\u0301meros enteros que representar la longitud de cada lombriz en cms.",
    "output": "La lista de longitudes de manera ordenada separados por un espacio",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 12361
  },
  {
    "title": "El maestro To\u00f1o (Mayor a menor).",
    "url": "https://omegaup.com/arena/problem/El-maestro-Tono",
    "history": "En la clase de programacio\u0301n el profesor Ton\u0303o esta apunto de dar el tema de \" Me\u0301todos de ordenamiento\" , sin embargo antes de iniciar quizo poner aprueba sus alumnos dando el siguiente problema: Profesor Ton\u0303o: Si yo tengo esta cadena de nu\u0301meros 134563 y la quiero ordenar de mayor a menor como\u00bfCo\u0301mo quedari\u0301a? . A lo que el alumno Ahmed respondio\u0301: 654331\u00a1Correcto! Sencillo \u00bfno? ahora quiero que me creen un pequen\u0303o programa que al recibir una cadena de longitud N con nu\u0301meros del 0 al 9, me devuelva dicha cadena pero ordenada de mayor a menor.",
    "input": "Se va a ingresar una cadena conformada por nu\u0301meros del 0 al 9 ( cadena junta, sin espacios, sin comas, ni decimales) se pueden colocar nu\u0301meros repetidos. La longitud de la cadena debe ser mayor a 0 y menor a 100.",
    "output": "Como salida se obtendra\u0301 la cadena ordenada de mayor a menor ( junta, sin espacios o comas) .",
    "note": "",
    "topics": [
      "strings",
      "sortings",
      "implementation"
    ],
    "id": 12241
  },
  {
    "title": "Ordenando por el valor de la potencia",
    "url": "https://omegaup.com/arena/problem/Ordenando-por-el-valor-de-la-pot",
    "history": "Escribe un programa que lea un arreglo de N parejas de enteros ( B, E) y los ordene ascendentemente segu\u0301n el valor de B^ E. En caso de empates en dicho valor, primero deben aparecer los de menor B y despue\u0301s los de menor E.",
    "input": "Un entero N seguido de N parejas de enteros ( B, E) . Puedes suponer que 1 \u2264 N \u2264 50000, que 0 \u2264 B, E \u2264 32 y que 0 \u2264 B^ E\u2264 10^ 18.",
    "output": "Las N parejas del arreglo ordenado.",
    "note": "",
    "topics": [
      "math",
      "sortings"
    ],
    "id": 12088
  },
  {
    "title": "Pachito y sus tareas",
    "url": "https://omegaup.com/arena/problem/pachito-tareas",
    "history": "Pachito es un chico muy ocupado. Justamente la semana pasada tuvo un concierto de piano y ahora se ha atrasado en el colegio ( que es bastante pesado) . Para man\u0303ana tiene que presentar n tareas para las diferentes asignaturas. Cada tarea i le toma t_ i minutos para hacerla. Sin embargo, hoy solo cuenta con T minutos disponibles. \u00bfPuedes ayudar a Pachito a determinar cua\u0301l es el nu\u0301mero ma\u0301ximo de tareas que puede hacer?",
    "input": "La primera li\u0301nea tiene el nu\u0301mero de tareas y el tiempo disponible, n y T, respectivamente. La segunda li\u0301nea tiene n nu\u0301meros separados por un espacio, los tiempos t_ i para realizar cada tarea.",
    "output": "El nu\u0301mero de tareas que puede hacer Pachito para man\u0303ana.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 12083
  },
  {
    "title": "Ordenando por distancia al origen",
    "url": "https://omegaup.com/arena/problem/Ordenando-por-distancia-al-orige",
    "history": "Escribe un programa que lea un arreglo de N puntos en el plano ( x_ i, y_ i) y los ordene segu\u0301n su distancia con respecto al origen. En caso de empates en distancia, primero deben aparecer los de menor x y despue\u0301s los de menor y.",
    "input": "Un entero N seguido de N parejas de enteros ( x_ i, y_ i) . Puedes suponer que 1 \u2264 N \u2264 10^ 5 y que las coordenadas esta\u0301n en el rango de - 25000 a + 25000.",
    "output": "Los N puntos del arreglo ordenado.",
    "note": "",
    "topics": [
      "geometry",
      "math",
      "sortings"
    ],
    "id": 12054
  },
  {
    "title": "Ordenando por magnitud",
    "url": "https://omegaup.com/arena/problem/Ordenando-por-magnitud",
    "history": "Escribe un programa que lea un arreglo de N enteros y ordene sus elementos por valor absoluto. En caso de empates en valor absoluto, primero deben aparecer los negativos y luego los positivos.",
    "input": "Un entero N seguido de N enteros. Puedes suponer que 1 \u2264 N \u2264 10^ 5 y que los enteros del arreglo esta\u0301n en el rango de - 10^ 9 a 10^ 9.",
    "output": "Los N enteros del arreglo ordenado.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 12053
  },
  {
    "title": "Los flamencos de la Reina Roja",
    "url": "https://omegaup.com/arena/problem/Los-flamencos-de-la-Reina-Roja",
    "history": "El partido de cro\u0301quet de la Reina Roja es muy singular, porque en lugar de palos se usan flamencos para golpear a los pobres erizos que sirven de pelotas. La Reina Roja siempre se habi\u0301a enorgullecido de que su parvada de flamencos se mantiene ordenada por estaturas entre juego y juego, y no se imagino\u0301 que la llegada de Alicia vendri\u0301a a hacerla dudar incluso de esto. Durante el partido de cro\u0301quet, Alicia y la Duquesa ( eterna enemiga de la Reina Roja) platicaban sobre los flamencos que estaban usando. La Reina Roja estaba muy lejos y no alcanzo\u0301 a escuchar la conversacio\u0301n, excepto cuando la Duquesa grito\u0301 con mucha seguridad \" \u00a1Tienes razo\u0301n Alicia! pa\u0301jaros de igual plumaje hacen buen maridaje\" . Despue\u0301s de que termino\u0301 el partido, la Reina Roja se dio cuenta de que sus flamencos eran muy coloridos ( habi\u0301a azules, blancos, cafe\u0301s, dorados y escarlatas) . La Reina Roja decidio\u0301 ordenar sus flamencos por estatura, pero separa\u0301ndolos por color. El problema era que ahora habi\u0301a cinco filas de flamencos, por lo que se pregunto\u0301 \u00bfsera\u0301 que el flamenco de estatura H_ 1 esta\u0301 en la misma fila que el flamenco de estatura H_ 2? Ayuda a la Reina Roja a contestar estas preguntas.",
    "input": "Inicialmente, un entero N seguido de N parejas H, C donde H es la altura de un flamenco y C es su color ( * A* para azul, * B* para blanco, * C* para cafe\u0301, * D* para dorado y * E* para escarlata) . Posteriormente, un entero M seguido de M parejas de enteros H_ 1, H_ 2 que denotan una pregunta de la Reina Roja. Puedes suponer que 1 \u2264 N, M \u2264 10^ 6, que las estaturas de los flamencos esta\u0301n en en rango de 0 a 10^ 9 y que adema\u0301s son distintas.",
    "output": "Para cada pregunta, un 1 si los flamencos dados esta\u0301n en la misma fila y un 0 en caso contrario.",
    "note": "",
    "topics": [
      "sortings",
      "binary search"
    ],
    "id": 12008
  },
  {
    "title": "Ordenando de forma ascendente y descendente",
    "url": "https://omegaup.com/arena/problem/Ordenando-de-forma-ascendente-y-",
    "history": "Dado un arreglo de N enteros, escribe un programa que procese una lista de M instrucciones a ejecutar secuencialmente, las cuales pueden ser de los siguientes tipos: - ` < ` : Ordenar el arreglo de menor a mayor. - ` > ` : Ordenar el arreglo de mayor a menor. - ` I` K: Imprimir el valor actual del K- e\u0301simo elemento del arreglo.",
    "input": "Un entero N seguido de los N enteros del arreglo. Posteriormente, un entero M seguido de las M instrucciones. Puedes suponer que 1 \u2264 N \u2264 10^ 5, que 1 \u2264 M \u2264 10^ 6, que 0 \u2264 K < N y que la primera instruccio\u0301n sera\u0301 ya sea ` < ` o ` > ` .",
    "output": "Para cada instruccio\u0301n del tipo ` I` K, el valor actual del K- e\u0301simo elemento del arreglo.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 11976
  },
  {
    "title": "ranas 4 laif",
    "url": "https://omegaup.com/arena/problem/ranas-4-laif",
    "history": "Connie y Blyde son una pareja de ranas cuyo pasatiempo es saltar. Todo el di\u0301a se la pasan saltando en una hilera de rocas cerca de su casa. Un di\u0301a se les aparece un pez volador ma\u0301gico y les propone un acertijo. El pez inscribe nu\u0301meros ma\u0301gicos en las piedras. Pone a Connie en la piedra ma\u0301s a la izquierda, y a Blyde en la que le sigue. A continuacio\u0301n les pone un hechizo el cual hace que cada rana solo pueda saltar a otra piedra si entre estas dos existe una y solo una piedra de por medio. Cuando una rana salta de piedra en piedra puede o no intercambiar los nu\u0301meros que estaban inscritos en ellas. El pez ma\u0301gico volador les dice que si logran reacomodar los nu\u0301meros de manera que estos queden ordenados de forma no descendente de izquierda a derecha, les dara\u0301 un deseo. Ayuda a Connie y Blyde a saber si es posible completar el desafi\u0301o.",
    "input": "En la primer li\u0301nea un entero 2 \u2264 n \u2264 1e6 el nu\u0301mero de piedras. En la segunda li\u0301nea n enteros 1 \u2264 a_ i \u2264 n los nu\u0301meros inscritos en las piedras, en su orden inicial. Donde el i\u0301ndice 1 corresponde a la piedra ma\u0301s a la izquierda.",
    "output": "Imprime \" larga vida al pez\" sin comillas, si es posible ordenar los nu\u0301meros con las limitaciones dadas. De lo contrario, imprime \" pez tramposo\" sin comillas.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 11928
  },
  {
    "title": "Las rosas del jard\u00edn de la Reina Roja",
    "url": "https://omegaup.com/arena/problem/Las-rosas-del-jardin-de-la-Reina",
    "history": "La Reina Roja es una persona bastante especial, ya que adora las rosas rojas y detesta sobremanera las rosas blancas. El gran problema es que tambie\u0301n es muy violenta, y no dudara\u0301 un segundo en cortarle la cabeza al jardinero que ose llevarle una rosa blanca en los ramos de rosas que ella pide con frecuencia. Desafortunadamente para los jardineros, el jardi\u0301n de la Reina Roja tiene muchas rosas blancas, asi\u0301 que los jardineros tienen que pintar las rosas blancas de rojo para que la Reina Roja no los ejecute. Un di\u0301a mientras los jardineros descansaban, uno de sus compan\u0303eros les aviso\u0301 que la Reina Roja iba en camino. Los jardineros entraron en pa\u0301nico porque el jardi\u0301n teni\u0301a todavi\u0301a muchas rosas blancas sin pintar. En la desesperacio\u0301n, cada jardinero grito\u0301 su posicio\u0301n en el jardi\u0301n y el color de la rosa que estaba en ese lugar. Los jardineros saben que la Reina Roja siempre pide ramos que este\u0301n formados por las rosas que se encuentren en algu\u0301n intervalo cerrado [ I, U] de las posiciones del jardi\u0301n. El jardi\u0301n es muy amplio y no todas sus posiciones tienen una rosa, pero sabes que cada rosa tiene un jardinero asignado. Ayuda a los jardineros a determinar cua\u0301ntas rosas blancas tendri\u0301an que pintar para cada uno de los intervalos que le podri\u0301an interesar a la Reina Roja.",
    "input": "Inicialmente, un entero N seguido de N parejas P, C donde P es la posicio\u0301n de un jardinero y C es el color de la rosa que se encuentra ahi\u0301 ( * R* para roja y * B* para blanca) . Posteriormente, un entero M seguido de M parejas de enteros I, U que denotan los extremos de los intervalos de intere\u0301s. Puedes suponer que 1 \u2264 N, M \u2264 10^ 5 y que I \u2264 U. Adema\u0301s, puedes suponer que todas las posiciones del jardi\u0301n P, I, U esta\u0301n en el rango de 0 a 10^ 9 y que todas las rosas esta\u0301n en posiciones distintas.",
    "output": "Para cada intervalo dado, la cantidad de rosas blancas que existen en esa parte del jardi\u0301n.",
    "note": "",
    "topics": [
      "sortings",
      "binary search"
    ],
    "id": 11927
  },
  {
    "title": "Ordena y Busca",
    "url": "https://omegaup.com/arena/problem/Ordena-y-Busca",
    "history": "Realiza una aplicacio\u0301n en C+ + en forma individual, en donde dado n nu\u0301meros de entrada y realice las funciones de ordenamiento de intercambio, burbuja y merge sort. La aplicacio\u0301n debera\u0301 leer los n datos ordenarlos, decir la cantidad de comparaciones de cada uno de los tres me\u0301todos, posteriormente debera\u0301 leer las q consultas de datos, diciendo la posicio\u0301n donde se encuentra el dato en el arreglo ordenado ( - 1 en caso de que no se encuentre) y la cantidad de comparaciones que hizo tanto por la bu\u0301squeda secuencial como por la bu\u0301squeda binaria.",
    "input": "Primero vendra\u0301 una li\u0301nea con la * * n* * ( nu\u0301mero de datos) seguido de las n lineas con los datos nume\u0301ricos, posteriormente vendra\u0301 una li\u0301nea con la q, y posteriormente vendra\u0301 los q nu\u0301meros que se desean consultar.",
    "output": "En una li\u0301nea vendra\u0301n la cantidad de comparaciones que arrojo\u0301 el ordenamiento de intercambio, el ordenamiento de burbuja y el ordenamiento de MergeSort, separados por un espacio. Despue\u0301s vendra\u0301n q lineas ( una por cada consulta) con el formato de posicio\u0301n, cantidad de comparaciones por bu\u0301squeda secuencial y cantidad de comparaciones por bu\u0301squeda binaria.",
    "note": "",
    "topics": [
      "binary search",
      "sortings"
    ],
    "id": 11694
  },
  {
    "title": "Hombre misterioso",
    "url": "https://omegaup.com/arena/problem/Hombre-misterioso",
    "history": "Los programadores mayas estan callendo por el * hoyo sin fin* , pero un misterioso hombre ma\u0301gico oculto en las sombras del templo decide ayudarlos con el poder de * volar* . Para ello necesita darles N poderes, cada poder tiene un nivel ma\u0301gico, sin embargo, ellos no pueden recibir los poderes en cualquier orden, tienen que recibirlos tal que: | a_ 1 - a_ 2 | \u2264| a_ 2 - a_ 3 | \u2264| a_ 3 - a_ 4 | \u2264 . . . \u2264| a_ n- 1 - a_ n | . De no ser asi\u0301, morira\u0301n por los cambios de magi\u0301a tan drasticos. # ProblemaAyuda al misterioso hombre proporcionando la secuencia que debe lanzar los poderes a los programadores mayas.",
    "input": "En la primeria li\u0301nea un nu\u0301mero N que es la cantidad de poderes que tiene el misterioso hombre, seguido de N li\u0301neas donde N_ i es el nivel que tiene el i- e\u0301simo poder.",
    "output": "N nu\u0301meros que representan el arreglo que satisface las condiciones. Cualquier arreglo que cumpla las condiciones sera\u0301 tomado como correcto. Si logras hacer que la condicio\u0301n se cumpla parcialmente recibira\u0301s algunos puntos. Por ejemplo, el arreglo 8, 9, 10, 4, 2, 3 no cumple la condicio\u0301n en todo el arreglo. Pero * * los primeros* * 4 elementos si ( | 8- 9| = 1 \u2264 | 9 - 10| = 1 \u2264 | 10 - 4| = 6) , entonces no se te dan todos los puntos pero si algunos. ( Mientras ma\u0301s nu\u0301meros cumplan la condicio\u0301n ma\u0301s puntos tendra\u0301s) | | input65 - 2 4 8 6 5| | output5 5 4 6 8 - 2| | descriptionEste caso se cumple la condicio\u0301n de la siguiente manera: | 5 - 5 | \u2264| 5 - 4 | \u2264| 4 - 6 | \u2264| 6- 8 | \u2264| 8 - ( - 2) | | | input48 1 4 2| | output1 2 4 8| | end# Li\u0301mites- 1 \u2264 N \u2264 10^ 5- 1 \u2264 N_ i \u2264 10^ 9",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 11616
  },
  {
    "title": "Ordenando en cubetas",
    "url": "https://omegaup.com/arena/problem/Ordenando-en-cubetas",
    "history": "# DescripcionEstabas trabajando en una tienda de juguetes, ese di\u0301a llego una carga de pelotas de varios colores, tu jefe puso a tu mejor amigo Leonardo a ordenarlas, su tarea era separarlas por colores para poder ofrecerlas a los clientes. Sin embargo Leonardo sabe que tienen muchos clientes dalto\u0301nicos, por eso mismo ordeno las pelotas de distintos colores por nu\u0301meros, al terminar esta tarea recibio\u0301 una llamada de emergencia, su hijo estaba por nacer, por lo que se tuvo que ir. Como no termino de ordenar las pelotas y sabiendo que su jefe es muy estricto decidiste ayudar a tu amigo a terminar su tarea, por suerte el habi\u0301a dejado algunas cubetas para que se puedan separar las pelotas, el u\u0301nico detalle es que debes contar la cantidad de pelotas, para poder meterlo al inventario. # ProblemaTu tarea es sencilla, u\u0301nicamente debes imprimir el nu\u0301mero y la cantidad de pelotas que hay de ese tipo, si no hay ninguna de ese color, debes imprimir 0, el nu\u0301mero de colores no excedera\u0301 de 100.",
    "input": "Se te dara\u0301 un entero N que representa la cantidad de pelotas que hay y un entero M que representa el mayor nu\u0301mero que puedes encontrar en las pelotas. En la siguiente li\u0301nea se te dara\u0301 N elementos, los cuales son las distintas pelotas con su distinto nu\u0301mero.",
    "output": "Debes imprimir todas las cantidades de pelotas, de manera ascendente empezando desde el 1 hasta M, debes imprimir el nu\u0301mero de la pelota seguido por dos puntos y un espacio, posteriormente la cantidad de pelotas que hay de ese tipo. Por ejemplo si tenemos 3 pelotas del color 1 se debe imprimir de la siguiente manera 1: 3 .",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 11601
  },
  {
    "title": "Counting Sort",
    "url": "https://omegaup.com/arena/problem/Counting-Sort",
    "history": "Estas cansado de utilizar el Quicksort por que tienes muy mala suerte y siempre colocas el pivote en un mal lugar. Es por ello que decidiste buscar otros algoritmos de ordenamiento y encontraste el Counting Sort. Si no sabes como implementarlo en la solucio\u0301n del problema viene una explicacio\u0301n.",
    "input": "En la primer linea recibira\u0301s la variable n que es el numero de elementos en el arreglo( 1< = n< = 100000) . La siguiente linea contiene el arreglo desordenado a con n enteros ( 1< = a_ i< = 100000)",
    "output": "Debes implementar el algoritmo del Counting Sort e imprimir: en la primer linea el arreglo ordenado b. En la siguiente li\u0301nea, los valores de las posiciones b_ i del arreglo donde hiciste el counting .",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 11398
  },
  {
    "title": "Circulismo",
    "url": "https://omegaup.com/arena/problem/Circulismo",
    "history": "Te has inscrito a una escuela de arte y la clase del di\u0301a de hoy es circulismo, donde todo lo que se dibuja sobre el lienzo son ci\u0301rculos. Tu primera tarea de la clase es poder pintar un lienzo de altura H y base B, solo puedes dibujar ci\u0301rculos, pero con el detalle de que cada ci\u0301rculo tiene que tener su centro sobre la li\u0301nea horizontal que esta\u0301 en medio, el maestro te dio una descripcio\u0301n de una serie de ci\u0301rculos ( su posicio\u0301n y su radio) que son los u\u0301nicos ci\u0301rculos que puedes dibujar, tienes que pintar cada ci\u0301rculo con un color diferente. Pero la pintura es muy cara por eso quieres comprar la menor cantidad de colores y como tienes que cubrir cada rinco\u0301n de cuadro con al menos un color, quieres saber cua\u0301l es el menor nu\u0301mero de colores necesarios para realizar tu primer obra maestra de circulismo. ! [ Ejemplo de entrada] ( circulismo. png)",
    "input": "- Primer li\u0301nea: contiene 3 nu\u0301meros H, B y N, donde H es la altura del cuadro, B es la longitud de la base y N es el nu\u0301mero de ci\u0301rculos que tienes permitido dibujar. - Siguientes N li\u0301neas: cada li\u0301nea representa la descripcio\u0301n de cada ci\u0301rculo y contiene dos nu\u0301meros X y R, donde X es la posicio\u0301n del centro del ci\u0301rculo y R es el radio del ci\u0301rculo.",
    "output": "Tu programa debe decir cua\u0301l es el mi\u0301nimo nu\u0301mero de colores que se necesita para realizar tu pintura o imprimir - 1 si no es posible pintar todo el cuadro.",
    "note": "",
    "topics": [
      "sortings",
      "greedy"
    ],
    "id": 11353
  },
  {
    "title": "Arreglo de mayor a menor",
    "url": "https://omegaup.com/arena/problem/Arreglo-de-mayor-a-menor",
    "history": "Con tus conocimientos sobre arreglos y bucles en C+ + , tu\u0301 tarea es crear un algori\u0301tmo el cua\u0301l, dado un arreglo de 5 nu\u0301meros enteros a, b, c, d, e imprima dicho arreglo pero con los nu\u0301meros ordenados de * mayor a menor* .",
    "input": "Se te dara\u0301n como valor de entrada cinco nu\u0301meros enteros a, b, c, d, e.",
    "output": "Debera\u0301s imprimir dichos nu\u0301meros ordenados de * mayor a menor* separados por un espacio.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 11350
  },
  {
    "title": "Informando a los desinformados",
    "url": "https://omegaup.com/arena/problem/Informando-a-los-desinformados",
    "history": "Siempre activa, Susana Distancia se comprometio\u0301 a informar telefo\u0301nicamente a todos los habitantes de la ciudad acerca de las medidas de sana distancia. Para ello, ha conseguido a trave\u0301s del gobierno de la ciudad una lista que contiene los nu\u0301meros de todos los habitantes, adema\u0301s de que ella tiene su propia lista de los nu\u0301meros a los que ya llamo\u0301 para informar. Desafortunadamente su lista estaba desordenada y puede tener nu\u0301meros repetidos, adema\u0301s de que la lista del gobierno tambie\u0301n esta\u0301 desordenada. Afortunadamente, Susana Distancia cuenta con tu ayuda para generar una lista ordenada de los D nu\u0301meros distintos T_ 1, T_ 2, . . . , T_ D a los que falta por llamar.",
    "input": "En el primer renglo\u0301n, dos enteros positivos N y M. En el siguiente renglo\u0301n, los N nu\u0301meros G_ 1, G_ 2, . . . , G_ N en la lista del gobierno. En el siguiente renglo\u0301n, los M nu\u0301meros S_ 1, S_ 2, . . . , S_ M en la lista de Susana Distancia.",
    "output": "En el primer renglo\u0301n el entero D. En el siguiente renglo\u0301n, los D nu\u0301meros T_ 1, T_ 2, . . . , T_ D en orden creciente. # Li\u0301mites1 \u2264 N \u2264 10^ 51 \u2264 M \u2264 10^ 510^ 8 \u2264 G_ I < 10^ 9 para cada 1 \u2264 I \u2264 N10^ 8 \u2264 S_ J < 10^ 9 para cada 1 \u2264 J \u2264 M",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 11288
  },
  {
    "title": "Moda-GCF",
    "url": "https://omegaup.com/arena/problem/Moda-GCF",
    "history": "La moda en estadi\u0301stica es el valor que tiene mayor frecuencia absoluta en un conjunto de datos. Para calcular la moda debera\u0301s leer el nu\u0301mero total de datos n seguido por los datos de la lista l. Se asume que l siempre tendra\u0301 una u\u0301nica moda.",
    "input": "Un nu\u0301mero entero n seguido de la lista de elementos l. l sera\u0301 una lista de nu\u0301meros enteros menores a 1000 separados por espacio. 0< n < 1000",
    "output": "La moda de l",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 11233
  },
  {
    "title": "Edades",
    "url": "https://omegaup.com/arena/problem/Edades",
    "history": "< / br> # Descripcio\u0301n: < / br> En un salo\u0301n de clases la maestra quiere saber cuantos alumnos hay con la misma edad. Ayuda a la maestra a calcular la cantidad. < / br> # Entrada: < / br> La primera li\u0301nea contendra\u0301 un nu\u0301mero n nu\u0301mero de alumnos ( 1 \u2264 n \u2264 50) . Las siguiente n entradas sera\u0301n nu\u0301meros enteros a_ 1, a_ 2, a_ 3. . . . a_ n ( 1 \u2264 a_ i \u2264 40) , las edades de los alumnos. Salida< / br> Imprime en orden ascendente por la edad y despue\u0301s la cantidad de alumnos correspondiente. Ejemplo< / br> | | input612 12 8 6 9 8| | output6 18 29 112 2| | end",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "binary search"
    ],
    "id": 11053
  },
  {
    "title": "Acomodando zapatillas",
    "url": "https://omegaup.com/arena/problem/Acomodando-zapatillas",
    "history": "Ayla es una nin\u0303a que tiene demasiadas zapatillas y un di\u0301a decidio\u0301 acomodar cada una de ellas, mientras las acomodaba se dio cuenta que teni\u0301a un desorden y asi\u0301 que decidio\u0301 re- ordenarlas y tirar a la basura todas las zapatillas que se habi\u0301an quedado solas. Ayla tiene un monto\u0301n de zapateros en donde tiene una infinidad de zapatillas. # Problema: Realiza un programa que dadas la cantidad de zapatillas que teni\u0301a, y un identificador de cada zapatilla, decir de cuantas zapatillas se puede deshacer Ayla, es decir, todas las que han perdido su par. Dos zapatillas son del mismo par si tienen el mismo identificador.",
    "input": "En la primer li\u0301nea, un numero * * * N* * * con la cantidad de zapatillas que tiene Ayla. En la segunda li\u0301nea, * * * K* * * nu\u0301meros, el identificador de cada una de las zapatillas.",
    "output": "En la primera li\u0301nea los identificadores de las zapatillas que puede tirar, en la segunda li\u0301nea la cantidad de zapatillas que puede tirar y en la tercera li\u0301nea la cantidad de zapatillas que Ayla se quedara\u0301, en caso de que Ayla haya encontrado todos los pares de las zapatillas debes imprimir : D en lugar de los identificadores.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 11023
  },
  {
    "title": "Baphy y la tienda de pociones",
    "url": "https://omegaup.com/arena/problem/Baphy-y-la-tienda-de-pociones",
    "history": "< br/ > Un di\u0301a Baphy decidio\u0301 iniciar una tienda de pociones en el reino de \" La Perla de Occidente\" . < br/ > Un di\u0301a llego el sabio Matute a pedir informacio\u0301n acerca de las pociones que vendi\u0301a Baphy, y se dio cuenta que le pareci\u0301an u\u0301tiles todas. Asi\u0301 que se dispuso a comprar todas las que pudiera, con el pago de K monedas que recibio\u0301 despue\u0301s de haber empujado un castillo con su ma\u0301gico sistema. < br/ > Baphy tiene n pociones y cada una tiene un precio diferente, una vez que se compra una pocio\u0301n esta se agota, evitando comprar varias veces la misma pocio\u0301n. < br/ > Ayuda a Matute a saber cual es la cantidad ma\u0301xima de pociones que puede comprar.",
    "input": "Dos enteros, n y k que representan la cantidad de pociones de Baphy y la cantidad de dinero de Matute. < br/ > Seguido vienen n lineas cada una con un entero a_ i que indica el precio de la i- esima pocio\u0301n.",
    "output": "< br/ > La cantidad ma\u0301xima de pociones que puede comprar Matute.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 10850
  },
  {
    "title": "\u00d3ptimos de Pareto",
    "url": "https://omegaup.com/arena/problem/pareto",
    "history": "Dado un conjunto de n puntos ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , . . . , ( x_ n, y_ n) en el plano, decimos que un punto ( x_ i, y_ i) es * o\u0301ptimo de Pareto* si para todo j = \u0338 i se cumple por lo menos una de las siguientes dos condiciones: * x_ i x_ j* y_ i y_ jEs decir, que no haya ningu\u0301n punto que este\u0301 estrictamente arriba y a la derecha de ( x_ i, y_ i) . No\u0301tese que un conjunto de puntos puede contener varios o\u0301ptimos de Pareto. * Por ejemplo el conjunto de puntos ( 1, 1) , ( 3, 1) , ( 1, 3) tiene dos o\u0301ptimo de Pareto: ( 3, 1) y ( 1, 3) . * En este otro ejemplo los o\u0301ptimos de Pareto se muestran en rojo: ! [ Imagen con ejemplo de o\u0301ptimos de Pareto] ( pareto. png) # ProblemaDado un conjunto de n puntos ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , . . . , ( x_ n, y_ n) , imprime el nu\u0301mero de o\u0301ptimos de Pareto que contiene.",
    "input": "* Un entero N, indicando el nu\u0301mero de puntos. * N li\u0301neas. Cada li\u0301nea contiene dos coordenadas que definen un punto ( x_ i, y_ i) . Se garantiza que ninguno de los puntos se repetira\u0301. * 0 \u2264 x_ i, y_ i \u2264 100, 000, 000* Para el 50",
    "output": "El nu\u0301mero de o\u0301ptimos de Pareto en el conjunto de puntos.",
    "note": "",
    "topics": [
      "sortings",
      "divide and conquer"
    ],
    "id": 10814
  },
  {
    "title": "Leer libros",
    "url": "https://omegaup.com/arena/problem/Leer-Libros",
    "history": "Mari\u0301a esta\u0301 entrenando para la * 1er Copa Centroamericana de Programacio\u0301n* . Tiene H horas antes de que empiece la competicio\u0301n y tiene L libros que quiere estudiar. Ella lee una pa\u0301gina cada minuto y quiere saber cua\u0301l es el ma\u0301ximo nu\u0301mero de libros que puede leer antes de la competicio\u0301n. Ella tambie\u0301n sabe que leer libros grandes es ma\u0301s u\u0301til, entonces si hay dos grupos con el mismo nu\u0301meros de libros, ella prefiere el grupo con el libro ma\u0301s grande que no este\u0301 en el otro grupo.",
    "input": "* La primer li\u0301nea tendra\u0301 dos nu\u0301meros H y L. * La pro\u0301xima li\u0301nea tendra\u0301 los L nu\u0301meros. Cada nu\u0301mero indica el nu\u0301mero de pa\u0301ginas de cada uno de los libros. * No hay dos libros con el mismo nu\u0301mero de pa\u0301ginas. * 0 H \u2264 10, 000* 0 L \u2264 100, 000* 0 L_ i \u2264 100, 000",
    "output": "El mejor grupo de libros ordenados por nu\u0301mero de pa\u0301ginas.",
    "note": "",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": 10813
  },
  {
    "title": "Cara o escudo",
    "url": "https://omegaup.com/arena/problem/Cara-o-Escudo",
    "history": "Jaime acaba de aprender el juego de \u201ccara o escudo\u201d ( o \u201ccara o corona\u201d) . Este juego consiste en lanzar una moneda hacia el aire, permitie\u0301ndole girar y observar si la moneda aterriza con la \u201ccara\u201d o el \u201cescudo\u201d boca arriba. El profesor de matema\u0301ticas le explico\u0301 a Jaime que jugando el juego de cara o escudo varias veces, se puede obtener una secuencia de resultados. Por ejemplo, la lista completa de las secuencias posibles al jugar cara o escudo 3 veces, es la siguiente: CCC, CCE, CEE, CEC, EEE, ECE, EEC, ECC* Fig 1. Todas las secuencias de cara o escudo de longitud 3. C singifica cara, E escudo* El profesor le explico\u0301 que aunque los resultados de cada juego sean aleatorios, se pueden obtener todas las posibles permutaciones de una longitud n, si se juega cara o escudo suficientes veces. Jaime quiere comprobar si lo que le dijo su profesor es cierto, y para eso, escribe un programa que identifica si todas las combinaciones para una secuencia de longitud n existen en un string input. Por ejemplo, en la siguiente cadena de caracteres, se pueden obtener todas las posibles secuencias de resultados de longitud 2. ECECCEEECCE* Fig 2. Un string the longitud total k = 11, donde se encuentran todas las posibles secuencias de longitud n = 2. * E| CE| CC| EE| EC| CE* Fig 3. Divisiones necesarias para obtener todas las posibles secuencias de longitud n = 2, Empezando despue\u0301s del primer caracter, p = 1* \u00bfPuedes ayudarle a Jaime? Escribe un programa, que calcule, dado input string S, si es posible obtener todas las combinaciones de una secuencia de \u201ccara o escudo\u201d de taman\u0303o n. Se debe dar un n\u0301umero p, que indica en que\u0301 posicio\u0301n se empieza a dividir y contar las secuencias. Si hay varias soluciones para el problema, da cual sea tenga el valor de n ma\u0301s alto. Una secuencia no puede ser repetida en la sucesio\u0301n.",
    "input": "La entrada correspondera\u0301 al string que simboliza el resultado de muchos juegos de cara o escudo. La entrada puede tener hasta 11000 caracteres.",
    "output": "La salida consistira\u0301 de dos nu\u0301meros. Primero un nu\u0301mero * n* y * p* , en este orden, descritos en el problema. Si hay varios valores de * n* o * p* que satisfagan una solucio\u0301n, escoge la solucio\u0301n que primero tenga el mayor valor de * n* , y despue\u0301s el menor valor de * p* .",
    "note": "",
    "topics": [
      "strings",
      "math",
      "sortings",
      "implementation"
    ],
    "id": 10810
  },
  {
    "title": "Golpeando villanos",
    "url": "https://omegaup.com/arena/problem/Golpeando-villanos",
    "history": "# ProblemaFrustado de no poder salvar a la gente del Hospital, Eli\u0301as decidio derrotar a la mayori\u0301a de los villanos en la ciudad. Eli\u0301as hizo una lista con los villanos que queri\u0301a derrotar que eran n en total. Para su mala suerte, Eli\u0301as solo puede causar k de dan\u0303o a un villano por cada batalla. Adema\u0301s cada villano tiene una resistencia de a_ i. Entonces Eli\u0301as se propuso hacer los siguiente: 1- Hacer una batalla contra el primer villano de la lista. Entonces le quita k de resistencia. 2- Si el villano fue vencido ( resistencia 0) , lo tacha de su lista; si no, lo pone al final. 3- Pasa al segundo villano, repite el proceso y asi\u0301 sucesivamente hasta derrotar a todos. Eli\u0301as quiere saber en que orden derrotara a los villanos dada su lista, para ver si esta satisfecho con esa lista. Ayudalo a saber lo que quiere. # DescripcionSe te dara una lista de n nu\u0301meros r_ i que representan la resistencia de cada villano, adema\u0301s el orden en el que se encuentran es el orden que esta\u0301n en la lista incialmente. Debera\u0301s responder n nu\u0301meros que indican el orden en que fue derrotados los villanos. Debera\u0301s imprimir la posicio\u0301n en la lista original de dicho villano. Es decir, si el primer nu\u0301mero que pones es un 3, quiere decir que el villano que estaba originalmente en la posicio\u0301n 3 de la lista fue el primero en ser derrotado.",
    "input": "Un nu\u0301mero n que indica el nu\u0301mero de villanos y k que es el dan\u0303o que hace Eli\u0301as al villano en un batalla. Seguido n nu\u0301meros r_ i que fueron mencionados anteriormente.",
    "output": "n nu\u0301meros que representan el orden en que fueron vencidos los villanos.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 10808
  },
  {
    "title": "Costo de mensajeria",
    "url": "https://omegaup.com/arena/problem/Costo-de-mensajeria",
    "history": "Felipe estaba apunto de lograr la maxima compan\u0303ia electronica, pero no pudo hacer que su empresa sea eficiente y por eso fracaso. Por tanto, felipe se rindio con las empresas tecnologicas y empezo su servicio de mensajeri\u0301a. El servicio se llevaba acabo en un lugar muy especial, todo el lugar era una linea recta, por tanto cada locacio\u0301n se podi\u0301a ver como un punto; es decir, uno podi\u0301a tener su casa en punto - 5 o 10. En cada cierto punto habi\u0301a un * * punto de mensajeria* * que basicamente es donde entran y salen los mesajes. Felipe hizo una pagina web para presentar su servicio e hizo un lugar especial que era para ayuda a los clientes. Los mensajes que ma\u0301s llegaban alli\u0301 eran las preguntas de \" si el centro de mensajeri\u0301a ma\u0301s cercano que tengo es el que esta en a_ i \u00bfCuanto es lo minimo y maximo que puedo pagar? \" . El costo de envi\u0301ar un mensaje es igual a la cantidad de casas o distancia que hay entre un centro de mensajeri\u0301a a otro. Es decir, si yo quiero enviar del lugar 5 al 20 el costo seri\u0301a de | 5- 20| = 15. Adema\u0301s las personas son inteligentes y saben que no tiene sentido enviar un mensaje al lugar mismo, es decir, no se envi\u0301an mensajes desde la ubicacio\u0301n 5 a la ubicacio\u0301n 5. Como Felipe esta muy ocupado haciendo otras cosas te pidio ayuda para responder estas preguntas, tu como buen programador flojo decidiste precalcular todas las respuestas. Asi\u0301 que agarraste la lista de todas las ubicaciones de los puntos de mensajeria y decidiste calcular la respuesta de el costo minimo y maximo que se puede generar desde cada punto de mensajeria. # ProblemaDada la lista de los n puntos de mensajeria a_ i. En donde el nu\u0301mero dado es la ubicacio\u0301n de los puntos, decir para cada nu\u0301mero la respuesta de cual es el costo minimo que se puede hacer y el maximo. Se debe responder en el orden que son dados.",
    "input": "Un nu\u0301mero n que indica el nu\u0301mero de puntos. Seguido, n nu\u0301meros a_ i que son las ubicaciones de los puntos de mensajeri\u0301a.",
    "output": "n li\u0301neas con pares de nu\u0301meros que indica el precio minimo y maximo que puede hacer.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 10807
  },
  {
    "title": "Ordenamiento Alfabetico",
    "url": "https://omegaup.com/arena/problem/Ordenamiento-Alfabetico",
    "history": "# DescripcionJacobo andaba de curioso viendo la lista de los participantes de la OMI para ver si estaba su mayor enemigo, en eso se dio cuenta que la lista no tenia un orden especial, asi\u0301 que decido ordenarla alfabeticamente. Santy decidio hacer un problema acerca de esto. # ProblemaDada una lista de n nombres, ordenarlos de forma alfabetica ( no distingir entre mayusculas y minusculas) . * * Nota* * : Si hay dos palabras que son la misma si no distinguimos entre mayusculas y minusculas; entonces, desempatamos por la menor lexicograficamente tomando encuenta mayusculas y minusuclas.",
    "input": "Un nu\u0301mero n que representa la cantidad de participantes, luego n palabras que son los nombres de los participantes. Los nombres son una solo cadena sin espacios, con letras del alfabeto ingles en mayusculas o minusculas.",
    "output": "Los nombres ordenados alfabeticamente",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "strings"
    ],
    "id": 10806
  },
  {
    "title": "Calificaciones de un grupo",
    "url": "https://omegaup.com/arena/problem/Calificaciones-de-un-grupo",
    "history": "El profesor Oswaldo es una persona avanzada de edad por lo tanto tarda muchos di\u0301as elaborando su informe de calificaciones de los grupos a los cuales imparte clase, tu\u0301 como buen estudiante de informa\u0301tica le comentaste que puede optimizar mucho tiempo si genera su reporte de calificaciones de manera automatizada y ofreciste tu ayuda para realizar un programa. El profesor te comento\u0301 que si hay dos alumnos con calificacio\u0301n ma\u0301s alta debes de considerar ordenarlos de manera alfabe\u0301tica, pero solo mostrando a un so\u0301lo alumno, esta misma regla se aplica la persona con menor calificacio\u0301n, de igual manera te recordo\u0301 que las calificaciones se ponen en escala del * * * 1 al 100* * * , en donde los alumnos que obtienen un promedio mayor o igual a 60 son los que aprueban al curso, en el caso de los alumnos que tienen una calificacio\u0301n menor que 60 son los que se consideran como reprobados. Debido a que es muy comu\u0301n tener errores al momento de tipear debera\u0301s validar que la calificacio\u0301n ingresada no sea mayor a * * * 100* * * o menor a * * * 0* * * ya que si no se considera esto el reporte de calificaciones puede salir incorrecto, en caso de que se ingrese una calificacio\u0301n debera\u0301s de advertir esta situacio\u0301n no valida mostrando el siguiente mensaje \" * * UPS, ERROR! , DIGITE DE NUEVO LA CALIFICACION* * \" y posteriormente debera\u0301s solicitar de nuevo la calificacio\u0301n.",
    "input": "En la primera linea un entero * * * N* * * la cual representa el nu\u0301mero de alumnos a capturar, en las siguientes lineas 2 x * * * N* * * los nombres junto con el primer apellido y el la calificacio\u0301n de los * * * N* * * alumnos.",
    "output": "- Promedio total del grupo, en caso de tener decimales solo se deben de mostrar dos en caso contrario no mostrar ninguno. - Cantidad de alumnos aprobados- Cantidad de alumnos reprobados- La calificacio\u0301n mayor y el alumno que la obtuvo- La calificacio\u0301n menor y el alumno que la obtuvo",
    "note": "",
    "topics": [
      "strings",
      "math",
      "sortings",
      "matrices",
      "data structures",
      "implementation"
    ],
    "id": 10794
  },
  {
    "title": "Ordenamiendo por frecuencia",
    "url": "https://omegaup.com/arena/problem/Ordenamiendo-por-frecuencia",
    "history": "Santy ya se habi\u0301a cansado de hacer problemas, asi\u0301 que pidio ayuda a Jacobo para venir con la idea de un problema que tenga que ver con Ordenamientos. Y le dijo \u00bfPor que no hacer un problema donde debas ordenar por frecuencia? Y entonces Santy decidio robarle esta idea. # ProblemaSe te dara un arreglo de n elementos, el cua\u0301l debera ser ordenado por la cantidad de veces que aparece el elemento en todo el arreglo. Si dos elementos aparecen la misma cantidad de veces, entonce se hara desempate por el que sea menor. ( Primero van elementos con mayor frecuencia)",
    "input": "Un nu\u0301mero n que representa la cantidad de elementos en arreglo, y en la siguiente linea se te daran los n nu\u0301meros del arreglo.",
    "output": "El arreglo ordenado por frecuencias.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 10784
  },
  {
    "title": "Escaleras alteradas",
    "url": "https://omegaup.com/arena/problem/Minimo-Ordenamiento",
    "history": "Funcio\u0301n que devolvera el minimo taman\u0303o del sub arreglo que debe ser ordenado. # # # Para\u0301metros* ` N` : Taman\u0303o del arreglo. * Regresa: un entero representando el taman\u0303o. NOTA: El arreglo esta indexado en 0. # SampleEl archivo de ejemplo consiste de un entero n que es el taman\u0303o del arreglo, seguido del arreglo. Luego, en la ultima linea ira un entero con la respuesta.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "two pointers"
    ],
    "id": 10782
  },
  {
    "title": "Mejorando la empresa",
    "url": "https://omegaup.com/arena/problem/Apariciones-pares",
    "history": "Molesto despue\u0301s de fallar su entrevista en FB. Felipe decide crear su propia empresa \" malvados y asociados\" . Para que su empresa funcione de forma correcta, necesita que en cada a\u0301rea de la empresa halla una cantidad par de persona trabajando. La empresa tiene un total de n empleados, tu tarea sera\u0301 decir cuantas personas faltari\u0301a poner para que la empresa funcione de forma correcta. # ProblemaDado una lista de n nu\u0301meros que representan en que a\u0301rea trabaja cada empleado actual, decir cuantos empleados habri\u0301a que contratar ( los nuevos empleados puede trabajar en cualquier a\u0301rea) para que la empresa funcione de manera correcta.",
    "input": "Se te dara\u0301 un nu\u0301mero n que representa la cantidad de empleado. Luego, una lista de n nu\u0301meros que son las a\u0301reas en la que trabaja cada empleado.",
    "output": "Un u\u0301nico entero que representa la minima cantidad de personas que faltan para que la empresa funcione de forma correcta.",
    "note": "",
    "topics": [
      "hashing",
      "sortings"
    ],
    "id": 10778
  },
  {
    "title": "Ordenamiento vacuno",
    "url": "https://omegaup.com/arena/problem/Ordenamiento-vacuno",
    "history": "Despue\u0301s de la gran aventura que tuvo jorge para encontrar a su ayudante perfecto ( en busca de derrotar a Santy) , Jorge se dirige hacia la torre maligna. En el camino se encuentra con unas vacas, que mugen cada cierto tiempo. En ese lugar hay un profesor loco con las vacas tratando de descifrar el patron de mugido; este mismo profesor es el u\u0301nico que puede dejar pasar a Jorge por ese lugar. Si Jorge no pasa por aqui\u0301 tendra\u0301 que tomar la ruta larga y maligna. Entonces Jorge decide preguntarle al profesor si lo dejaba salir. Este mismo le dijo que si le deci\u0301a cuantos mugidos iban hacer las vacas en este minuto, entonces si lo dejaba pasar. El profesor es buena onda entonces le dijo todo lo que habi\u0301a aprendido de las vacas y eso es que cada minutos a las vacas se les muestra un arreglo, luego se les muestra como el arreglo se va ordenando con el bubble sort y cada vez que hay un cambio entonces las vacas mugen. Entonces, la tarea de Jorge era decir cuantas veces mugen las vacas en cierto minuto. Como Jorge no entendi\u0301a muy bien como las vacas mugi\u0301an entonces, su compan\u0303ero decidio\u0301 darle una idea de como seri\u0301a un algoritmo para eso\u201c` c+ + for( i = 0 hasta n- 1) for( j = 0 hasta n - 1 - i) if( ar[ j] > ar[ j+ 1] ) cambiar( ar[ j] , ar[ j+ 1] ) imprimir \" Muuu\" \u201c` Entonces quieres ver cuantas veces se imprime \" Muuu\" # ProblemaDada un arreglo A de taman\u0303o n, decir cuantas veces mugen las vacas cuando ven dicho arreglo ordenarse con el bubble sort.",
    "input": "Un natural n que representa el taman\u0303o del arreglo, seguido n enteros que son los elementos A_ i.",
    "output": "Un unico nu\u0301mero que representa la cantidad de veces que mugen las vacas con ese arreglo.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 10772
  },
  {
    "title": "El legado m\u00e1s grande",
    "url": "https://omegaup.com/arena/problem/1er-ccp-abues",
    "history": "Durante la u\u0301ltima fiesta familiar te llamo\u0301 mucho la atencio\u0301n ver que tus abues tambie\u0301n son abues de ma\u0301s nin\u0303as y nin\u0303os. Esto te dio tanta curiosidad que empezaste a ver que\u0301 tantos nietos tuvieron los abuelos de tus papa\u0301s y los abuelos de tus abuelos. Asi\u0301 se te ocurrio\u0301 una genial pregunta que\u0301 contestar: * \" \u00bfQuie\u0301n ha dejado el legado de nietos ma\u0301s grande en la historia de la familia? \" * Despue\u0301s de escuchar tantas historias que te contaron tus papa\u0301s, ti\u0301os, abuelos y viejos amigos de la familia por fin conseguiste la informacio\u0301n necesaria para resolver esta pregunta. So\u0301lo queda la parte ma\u0301s divertida: escribe un programa que procese toda la informacio\u0301n y determine quie\u0301n ha tenido ma\u0301s nietos en la historia de la familia.",
    "input": "- Un entero N, indicando el nu\u0301mero de li\u0301neas. - N li\u0301neas. Cada li\u0301nea tendra\u0301 dos palabras, A y B, que representan una relacio\u0301n entre dos miembros de la familia. - A es el nombre de la hija o hijo. - B es el nombre de la madre o padre. - No hay familiares con nombres repetidos. - En la familia ninguna pareja de padres tiene antepasados en comu\u0301n. Es decir, no existe ninguna pareja de padres que tuvieran el mismo familiar de abuelo, o tatarabuelo, o bisabuelo, etc. - So\u0301lo se consideran nietos los hijos de hijos. - 1 \u2264 N \u2264 1, 200",
    "output": "El nombre del familiar con ma\u0301s nietos en la familia. En dado caso de empate listar los familiares empatados en orden alfabe\u0301tico separados por un espacio. # Ejemplos| | input5YoMerengues MamaLindaMamaLinda AbuelaLinaMamaLinda AbueloTitoTiaTere AbueloTitoPrimaVera TiaTere| | outputAbueloTito| | descriptionEn tanto a nietos AbueloTito tiene 2 ( PrimaVera y YoMerengues) , AbuelaLina tiene 1 ( YoMerengues) , y todos los dema\u0301s tienen 0. Asi\u0301 AbueloTito es quie\u0301n ha tenido ma\u0301s nietos en la historia de la familia. | | input6YoMerengues MamaLindaMamaLinda AbuelaLinaMamaLinda AbueloTitoTiaTere AbueloTitoPrimaVera TiaTereAbueloTito BisabuelaTita| | outputAbueloTito BisabuelaTita| | descriptionLa diferencia con el ejemplo anterior es la incorporacio\u0301n de BisabuelaTita que tiene 2 nietas ( MamaLinda y TiaTere) . La respuesta es empate entre AbueloTito y BisabuelaTita. | | end",
    "note": "",
    "topics": [
      "strings",
      "implementation",
      "sortings",
      "trees",
      "graphs"
    ],
    "id": 10730
  },
  {
    "title": "Ordenamiento Vector Enteros",
    "url": "https://omegaup.com/arena/problem/Ordenamiento-Vector-Enteros",
    "history": "Se ingresa un valor entero X ( 1< = X< = 50000) , y a continuacio\u0301n N filas conteniendo cada una un valor entero ( tipo int) . Como resultado, se deben mostrar los N valores ingresados, ordenados ascendentemente, uno por li\u0301nea.",
    "input": "La primer li\u0301nea de entrada contendra\u0301 el valor X. Luego vendra\u0301n N li\u0301neas con un valor entero por li\u0301nea. | | input104118467633426500191691572411478293582696224464| | output4163341147815724184671916924464265002696229358| | end",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 10688
  },
  {
    "title": "Suma m\u00ednima de d\u00edgitos",
    "url": "https://omegaup.com/arena/problem/Suma-minima-de-digitos",
    "history": "# HistoriaFelipe estaba jugando muy tranquilamente, cuando de repente llega Santy con un juego super divertido el cua\u0301l le encantaba. El juego consisti\u0301a en que cada quien tiene n bloques con un nu\u0301mero pintado ( ambos teni\u0301an los mismo bloquees; es decir, uno teni\u0301a una copia del otro) . Luego, teni\u0301as que formar 2 nu\u0301meros uniendo dichos bloques, quien dijera la suma ma\u0301s chica de ambos nu\u0301mero primero era el ganador. Como Felipe no le gusta perder decidio\u0301 hacer un algoritmo que fuera capaz de resolver el problema de forma ra\u0301pida. # ProblemaSe te da una lista de n nu\u0301meros, donde cada nu\u0301mero es solo un digito ( nu\u0301meros del 0 al 9) . Se quieren armar 2 nu\u0301meros \" pegando\" los digitos dados, talque la suma de ambos nu\u0301meros sea mi\u0301nima y se usen todos los digitos dados exactamente una vez. A \" pegar\" nos referimos que si tenemos los digitos 1, 3, 7 podemos formar el nu\u0301mero 137 juntando los digitos, igual se puede formar 317 y 713, entre otros. ( Son validos los nu\u0301meros que empiezan con 0 como 045)",
    "input": "Se te da el nu\u0301mero n que son la cantidad de digitos que tienes. Luego se te dan los n digitos.",
    "output": "Un u\u0301nico nu\u0301mero que es la suma de los dos nu\u0301meros formados.",
    "note": "",
    "topics": [
      "math",
      "sortings"
    ],
    "id": 10589
  },
  {
    "title": "Procesando calificaciones de alumnos",
    "url": "https://omegaup.com/arena/problem/Procesando-calificaciones-de-alu",
    "history": "Esta\u0301s modernizando la base de datos de tu escuela y deseas recopilar informacio\u0301n mientras se procesan las calificaciones de los alumnos. Los alumnos de la escuela tienen nu\u0301meros de lista impli\u0301citos 1, 2, 3, . . . , etc. y el programa que disen\u0303es debera\u0301 procesar una secuencia de las siguientes instrucciones: - REGISTRA c: Registrar que el siguiente alumno de la lista obtuvo calificacio\u0301n c. - CUENTA c i j: Contar cua\u0301ntos alumnos con calificacio\u0301n c existen entre los nu\u0301meros de lista i y j inclusivo.",
    "input": "Un entero N seguido de las N instrucciones a procesar. Puedes suponer que 0 \u2264 N \u2264 10^ 5, que todas las calificaciones esta\u0301n entre 0 y 100 y que todos los intervalos de nu\u0301meros de lista se referira\u0301n a alumnos ya registrados.",
    "output": "Para cada instruccio\u0301n de cuenta, el valor correspondiente.",
    "note": "",
    "topics": [
      "sortings",
      "binary search"
    ],
    "id": 10428
  },
  {
    "title": "ME Mario el alpinista",
    "url": "https://omegaup.com/arena/problem/ME-Mario-el-alpinista",
    "history": "Mario Montes es un famoso alpinista quien se encuentra conta\u0301ndole sobre sus aventuras a sus amigos. Ha escalado tantas montan\u0303as que cuando alguien le pide que nombre algunas que haya escalado, no sabe que\u0301 decir. Por suerte, siempre carga consigo la lista entera de todas las montan\u0303as que alguna vez ha conquistado y su altura. Como quiere impresionar a sus amigos, e\u0301l pretende ordenar la lista de la mayor altura a la menor. No quiere perder la atencio\u0301n de los dema\u0301s asi\u0301 que debe trabajar ra\u0301pido.",
    "input": "En la primera li\u0301nea el entero N, la cantidad de montan\u0303as que Mario Montes ha ascendido. En la siguiente li\u0301nea N enteros 1, 000< = n_ i< = 7, 000: las alturas de esas montan\u0303as, separadas por un espacio en blanco.",
    "output": "Imprime 1 li\u0301nea con las alturas de las montan\u0303as, de mayor a menor",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 10250
  },
  {
    "title": "ME asistente del profesor",
    "url": "https://omegaup.com/arena/problem/ME-asistente-del-profesor",
    "history": "El profesor Ba\u0301rquez esta\u0301 calificando los exa\u0301menes de su clase de matema\u0301ticas. E\u0301l tiene un total de N alumnos. Los exa\u0301menes esta\u0301n * * valorados con enteros del 0 al 10* * . Una vez que los califica, los quiere ordenar del menor puntaje al mayor. Para darse una idea de co\u0301mo le va a su grupo, el profesor hara\u0301 adema\u0301s lo siguiente: anotara\u0301 la cantidad de alumnos que obtuvieron cada puntaje posible, empezando por el cero y terminando en el diez. Como e\u0301l sabe que el primer nu\u0301mero corresponde a la calificacio\u0301n de 0, la segunda al 1 y asi\u0301 consecutivamente, no escribira\u0301 los puntajes, solo la cantidad de veces que se reportaron. Por desgracia, a sus clases atienden muchos alumnos y e\u0301l no dispone de tanto tiempo, por lo que desea realizar su tarea lo ma\u0301s ra\u0301pido posible.",
    "input": "En la primera li\u0301nea el entero N, la cantidad de alumnos. En la siguiente li\u0301nea N enteros: las calificaciones obtenidas por los alumnos, separadas por un espacio en blanco",
    "output": "Imprime 2 li\u0301neas, la primera contiene las calificaciones obtenidas, ordenadas de menor a mayor. La segunda li\u0301nea contiene 11 enteros a_ 0, a_ 1, . . . a_ 10 la cantidad de alumnos que obtuvieron la calificacio\u0301n a_ i.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 10248
  },
  {
    "title": "ME Ordena las botellas",
    "url": "https://omegaup.com/arena/problem/Ordena-las-botellas",
    "history": "< / br> # Descripcio\u0301n: < / br> Hugo le gusta que todo este ordenado de menor a mayor, recientemente escucho del me\u0301todo burbuja para ordenar, pero no lo sabe implementar. Hugo quiere saber cua\u0301ntos movimientos se realizari\u0301an para ordenar botellas de pla\u0301stico por su altura. E\u0301l sabe que, si tiene 5 botellas, con una altura de 10, 5, 8, 3, 1; sabe que para ordenarlo de manera ascendente se llevan a cabo 10 movimientos, obteniendo como resultado 1, 3, 5, 8, 10. < / br> Ayuda a Hugo a hacer un programa que le diga directamente cuantos movimientos se deben realizar. # Entrada: < / br> La primera li\u0301nea contendra\u0301 un nu\u0301mero entero n ( 1 \u2264 n \u2264 50) . Las siguiente n entradas sera\u0301n nu\u0301meros enteros a_ 1, a_ 2, a_ 3. . . . a_ n ( 1 \u2264 a_ i \u2264 100) , en donde a_ i es el taman\u0303o de la botella en el lugar i.",
    "input": "",
    "output": "< / br> Imprime el nu\u0301mero de movimientos que se realizaron para que este ordenado.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 10247
  },
  {
    "title": "Y^3 + X^5 = N^7",
    "url": "https://omegaup.com/arena/problem/Y3--X5--N7",
    "history": "# HistoriaUn dia, Sebas estaba leyendo un Tzaloa de la OMM, y se encontro un problema muy dificil: \" Dado un entero N, determina si se cumple la igualdad Y^ 3 + X^ 5 = N^ 7 para algun X, Y entero. \" , cuya solucion no encontro. Tu como buen programador que eres, escribe un codigo que resuelva dicho problema.",
    "input": "Un entero N.",
    "output": "Imprime 1 o - 1 si existen o no dichos enteros respectivamente.",
    "note": "",
    "topics": [
      "strings",
      "shortest paths",
      "graphs",
      "constructive algorithms",
      "binary search",
      "greedy",
      "trees",
      "number theory",
      "data structures",
      "implementation",
      "games",
      "flows",
      "brute force",
      "matrices",
      "graph matchings",
      "combinatorics",
      "geometry",
      "sortings",
      "math",
      "meet-in-the-middle",
      "dp",
      "dfs and similar",
      "string suffix structures"
    ],
    "id": 9724
  },
  {
    "title": "Sumita cuadrada",
    "url": "https://omegaup.com/arena/problem/Sumita-cuadrada",
    "history": "Sebas esta\u0301 en un entrenamiento de matematicas, y le presentaron un problema: \" Demuestra que para toda N existe una suma de N nu\u0301meros tal que su suma sea un cuadrado perfecto. \" , Sebas esta muy ocupado para resolver ese problema, y tu\u0301 como buen programador que eres, te ha pedido que demuestres el problema con \" casitos\" .",
    "input": "Un entero N",
    "output": "Los N nu\u0301meros distintos entre si\u0301 separados por un espacio y ordenados en orden creciente tal que su suma sea un cuadrado perfecto",
    "note": "",
    "topics": [
      "trees",
      "shortest paths",
      "games",
      "brute force",
      "graph matchings",
      "dp",
      "geometry",
      "binary search",
      "math",
      "sortings",
      "number theory",
      "combinatorics",
      "greedy",
      "data structures",
      "flows",
      "matrices",
      "dfs and similar",
      "graphs",
      "strings",
      "meet-in-the-middle",
      "implementation",
      "constructive algorithms",
      "string suffix structures"
    ],
    "id": 9723
  },
  {
    "title": "Duplicados y ordenamiento",
    "url": "https://omegaup.com/arena/problem/Duplicados-y-ordenamiento",
    "history": "La maestra de programacion te encargo una investigacion de n paginas paratu mala suerte la impresora fallo ese dia y te imprimio duplicados y faltaron paginas. dependiendo una lista de numeros enteros positivos de n taman\u0303o, imprimiras la lista sin repetidos yen orden de menor a mayor",
    "input": "Un entero n que indica la cantidas de hojas impresas. M valores enteros positivos.",
    "output": "Imprimir la lista pero ordenada de menor a mayor sin repetidos",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 9454
  },
  {
    "title": "K-cambios en el Alfabeto de Rob",
    "url": "https://omegaup.com/arena/problem/El-alfabeto-de-Rob",
    "history": "En el CUCEI existe un grupo de alumnos llamado el Club de los Programadores Muertos. Este club esta\u0301 abierto para cualquiera que este\u0301 interesado en estudiar programacio\u0301n competitiva. La costumbre del club es estudiar temas de programacio\u0301n competitiva para despue\u0301s, en conjunto, resolver algunos problemas interesantes. Pero no todo es estudiar para los Programadores Muertos, tambie\u0301n les gusta jugar juegos, tomar cafe\u0301 y filosofar sobre la vida. Un di\u0301a a Rob se le ocurrio\u0301 inventar un juego para desafiar a todos los miembros del club. El juego consiste en intercambiar la posicio\u0301n de las letras del alfabeto para posteriormente ordenar palabras lexicograficamente con base en este nuevo alfabeto propuesto. Un ejemplo seri\u0301a que Rob dice que cambia la posicio\u0301n de las letras ` ' a' ` y ` ' c' ` , y posteriormente propone la palabra ` ' casas' ` por lo que el resultado de la palabra ordenada seri\u0301a ` ' caass' ` y no ` ' aacss' ` .",
    "input": "La primera linea contiene un entero T indicando los casos de prueba. Por cada caso de prueba la primera linea es un entero K el cual indica cua\u0301ntos cambios de posicio\u0301n se realizara\u0301n. Las siguientes K lineas son dos caracteres c1 y c2 separados por un espacio. La u\u0301ltima linea contiene una cadena de caracteres. Esta\u0301 asegurado que la cadena so\u0301lo contiene letras minu\u0301sculas del alfabeto americano.",
    "output": "Por cada caso de prueba imprimir en una linea la cadena ordenada de acuerdo al nuevo alfabeto propuesto por Rob.",
    "note": "",
    "topics": [
      "strings",
      "sortings"
    ],
    "id": 9288
  },
  {
    "title": "hackerman y los strings",
    "url": "https://omegaup.com/arena/problem/make-a-string-cpp",
    "history": "# DescripcionHa amanecido en un nuevo dia Hackerman ha encontrado unos viejos cubos con letras de cuando era pequen\u0303o, como hackerman es un programador ya algo viejo ( 22 an\u0303os) se ha propuesto un enigma con su tema basico favorito strings el penso en su mente. Se te dara un alfabeto que consta de N letras, tu tarea es hacer una cadena de la longitud ma\u0301xima posible para que se cumplan las siguientes condiciones: * la letra i- e\u0301sima aparece en la cadena no ma\u0301s de a_ i veces. * El nu\u0301mero de apariciones de cada letra en la cadena debe ser distinto para todas las letras que ocurrieron en la cadena al menos una vez.",
    "input": "La primera li\u0301nea de la entrada contiene un nu\u0301mero entero N ( 2 \u2264 N \u2264 26) : el nu\u0301mero de letras en el alfabeto. La siguiente li\u0301nea contiene n enteros a_ i ( 1 \u2264 a_ i \u2264 10^ 9) : el i- e\u0301simo de estos enteros limita la cantidad de apariciones del i- e\u0301simo cara\u0301cter en la cadena. SalidaImprimiras un solo entero: la longitud ma\u0301xima de la cadena que cumple con todos los requisitos. | | input32 5 5| | descriptionPor conveniencia, consideremos un alfabeto que consta de tres letras: \" a\" , \" b\" , \" c\" . En la primera muestra, algunas de las cadenas o\u0301ptimas son: \" cccaabbccbb\" , \" aabcbcbcbcb\" . | | output11| | input31 1 2| | descriptionEn el ejemplo, algunas de las cadenas o\u0301ptimas son: \" acc\" , \" cbc\" . | | output3| | end",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 9249
  },
  {
    "title": "Las rebanadas de pizza",
    "url": "https://omegaup.com/arena/problem/La-pizza-de-Salem",
    "history": "Salem es un gato que le encanta la pizza. Ha probado de todos los tipos, Salem no es un gato egoi\u0301sta, de hecho, e\u0301l quiere compartirla con sus amigos felinos. e\u0301l quiere comprar la pizza con rebanadas ma\u0301s pequen\u0303as considerando los esto\u0301magos de sus compan\u0303eros felinos, gracias a su basto conocimiento de pizzas este gato conoce las dimensiones de cada rebanada de pizza ( o eso cree e\u0301l) . Salem sabe que la mejor forma para calcular las a\u0301reas de un tria\u0301ngulo con lados a, b y c es la fo\u0301rmula de Hero\u0301n: A= \u221a( s( s- a) ( s- b) ( s- c) ) donde s= a+ b+ c/ 2 Sin embargo, Salem no puede programar ya que no existen teclados para gatos, \u00a1aqui\u0301 es donde entras tu\u0301! Salem te dara\u0301 una lista de los lados a, b y c de las rebanadas de pizza del poblado en el que piensa compartir la pizza, y tu\u0301 le dara\u0301s las tres mejores opciones ( ya que es mala idea tener solo una opcio\u0301n) . Ayuda a Salem a resolver su dilema y quiza\u0301 te de una rebanada de pizza la pro\u0301xima vez que lo veas.",
    "input": "La primer li\u0301nea contiene un entero n, las siguientes n li\u0301neas contendra\u0301n los lados a_ i, b_ i y c_ i de las rebanadas de pizza separados por un espacio.",
    "output": "Tres lineas con 3 enteros separados por un espacio, los cuales sera\u0301n los lados a_ i, b_ i y c_ i de las tres rebanadas de pizza con menor a\u0301rea.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 8739
  },
  {
    "title": "C\u00e1lculo de la mediana",
    "url": "https://omegaup.com/arena/problem/Calculo-de-la-mediana",
    "history": "Escribe un programa que lea una secuencia de N enteros distintos A = a_ 0, a_ 1, . . . , a_ N- 1 y que determine el valor de la mediana de A asi\u0301 como su i\u0301ndice.",
    "input": "Un entero N seguido de los N enteros de A. Puedes suponer que N es impar y menor que 10^ 5.",
    "output": "Dos enteros que sean el valor de la mediana de A y su i\u0301ndice.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 8671
  },
  {
    "title": "OIRCh LSD Radix Sort",
    "url": "https://omegaup.com/arena/problem/OIRCh-LSD-Radix-Sort",
    "history": "LSD Radix sort es un algoritmo de ordenamiento que consiste en ordenar desde el digito menos significativo hasta el ma\u0301s significativo, de manera que al terminar de ordenar todas las columnas de digitos individualmente logres obtener un arreglo ordenado. Debera\u0301s usar LSD Radix sort para ordenar un arreglo de m cadenas de bits; cada una de ellas de n bits de longitud.",
    "input": "Dos enteros n y m separados por un espacio, seguidos de m cadenas de bits sin separar.",
    "output": "Las m cadenas de bits ordenadas.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "strings"
    ],
    "id": 8656
  },
  {
    "title": "John Freddy y los numeros",
    "url": "https://omegaup.com/arena/problem/John-Freddy-y-los-numeros",
    "history": "John Freddy es un estudiante que le gusta jugar mucho al fu\u0301tbol, pero por estar jugando se le olvido hacer la tarea, por esa te pide el favor que le ayudes. La tarea consiste en dado un arreglo de N nu\u0301meros, quieres saber cuanto es el ma\u0301ximo producto que se puede hacer escogiendo dos nu\u0301meros del arreglo",
    "input": "Un nu\u0301mero N seguido de N enteros, * * a< sub> 0< / sub> , a< sub> 1< / sub> , . . . , a< sub> n- 1< / sub> . * *",
    "output": "El ma\u0301ximo producto que se puede hacer escogiendo dos nu\u0301meros del arreglo",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": 8640
  },
  {
    "title": "Fallas de Whatsapp",
    "url": "https://omegaup.com/arena/problem/Fallas-de-Whatsapp",
    "history": "Whatsapp empezo\u0301 a fallar hace unas horas junto con otras pa\u0301ginas web y te han pedido tu ayuda para reparar los dan\u0303os devastadores antes de que todas las plataformas se consumen. Todos los chats de grupo se han borrado y lo unico que queda son listas de dos amigos que fueron parte de esos grupos. Puedes reconstruir los grupos uniendo todos los amigos que son mutuos. Por ejemplo, si Edgar y Marvin son amigos y Edgar y Miguel ta\u0301mbien son amigos, se puede formar un grupo con estas tres personas.",
    "input": "Un nu\u0301mero * * N* * de amistades, cada amistad tendra dos strings con los nombres de cada persona. Se puede asegurar que un par de personas nunca se repite.",
    "output": "* * M* * li\u0301neas con cada grupo de personas. Se debe ordenar cada miembro de un grupo alfabeticamente por nombre y los grupos deben estar ordenados alfabeticamente entre ellos mismos. # Ejemplos| | input5Pablo JamesEfrain JamesPablo JoseMarvin EdgarEdgar Miguel| | outputEdgar Marvin MiguelEfrain James Jose Pablo| | endAqui\u0301, se imprimio\u0301 el grupo de Edgar, Marvin y Miguel primero porque Edgar viene antes que Efrai\u0301n alfabeticamente. Una gra\u0301fica de los grupos puede ser visto aqui: \u2014\u2014\u2014- ! [ Grupos] [ 1] \u2014\u2014\u2014- # Li\u0301mites1 \u2264 M \u2264 N \u2264 10000",
    "note": "",
    "topics": [
      "strings",
      "string suffix structures",
      "data structures",
      "sortings",
      "graphs"
    ],
    "id": 8636
  },
  {
    "title": "Orden raro por divisores",
    "url": "https://omegaup.com/arena/problem/Orden-raro-por-divisores",
    "history": "Escribe un programa que lea N enteros positivos y que los ordene de la siguiente manera: - Si a tiene menos divisores que b entonces a debe ir antes que b. - Los nu\u0301meros que empaten en cantidad de divisores deben quedar ordenados de mayor a menor.",
    "input": "Un entero N seguido de N enteros, donde todo esta\u0301 en el rango de 1 a 100. Puedes suponer que 1 \u2264 N \u2264 10^ 5.",
    "output": "Los N enteros despu\u0301es de ordenarlos.",
    "note": "",
    "topics": [
      "math",
      "sortings",
      "matrices",
      "implementation"
    ],
    "id": 8612
  },
  {
    "title": "N\u00fameros Mayores",
    "url": "https://omegaup.com/arena/problem/Numeros-Mayores1",
    "history": "Dado un set de nu\u0301meros, quieres determinar cua\u0301ntos nu\u0301meros son mayores a cada valor.",
    "input": "Un nu\u0301mero * * N* * , el nu\u0301mero de valores en el arreglo, seguido por * * N* * valores i_ n, el valor de cada elemento del arreglo. * * Nota importante* * : los nu\u0301meros se pueden repetir.",
    "output": "* * N* * li\u0301neas con los valores correspondientes a cua\u0301ntos nu\u0301meros mayores hay a partir del elemento en ese lugar",
    "note": "",
    "topics": [
      "sortings",
      "combinatorics",
      "implementation"
    ],
    "id": 8582
  },
  {
    "title": "Agust\u00edn y su resentimiento",
    "url": "https://omegaup.com/arena/problem/Agustin-y-su-resentimiento",
    "history": "\u00a1Ayuda! En el burgo enemigo el rey Osman esta\u0301 aprendiendo a programar D: Como todos en el reino sabra\u0301n, el rey Agusti\u0301n y el rey Osman fueron amigos en sus di\u0301as de infancia hasta que por razones que ninguno de los dos han querido explicar se volvieron enemigos mortales. Aqui\u0301 en el burgo del rey Agusti\u0301n guardamos un profundo resentimiento hacia todos nuestros enemigos, es por eso que al enterarnos que el rey Osman estaba empezando a programar mandamos nuestros mejores espi\u0301as hacia el burgo enemigo y encontramos el siguiente co\u0301digo escrito en C+ + : \u201c` [ C+ + ] int input[ MAX_ N] , toSort[ MAX_ N] ; long long quickSort ( int lft, int rgt, int lev ) if ( lft > = rgt ) return 0LL; int piv = lft + input[ lev]",
    "input": "Un entero N seguido de N nu\u0301meros, A_ 0, A_ 1, . . . , A_ n- 1, que corresponden al arreglo input. Se garantiza que 0 \u2264 A_ i \u2264 n- 1 para todo i, 0 \u2264 i \u2264 n- 1.",
    "output": "N nu\u0301meros, B_ 0, B_ 1, . . . , B_ n- 1 que corresponden al arreglo toSort. Todos los nu\u0301meros de esta funcio\u0301n tienen que ser diferentes y ademas todos tienen que estar entre 1 y n, o sea, para todo x en el arreglo toSort, se tiene que 1 \u2264 x \u2264 n.",
    "note": "",
    "topics": [
      "data structures",
      "constructive algorithms",
      "implementation",
      "sortings"
    ],
    "id": 8572
  },
  {
    "title": "Subiendo la bomba por la colina",
    "url": "https://omegaup.com/arena/problem/Subiendo-la-bomba-por-la-colina",
    "history": "Hay N robots en una colina y una bomba en la base de la misma: tu objetivo es usar los robots para subir la bomba lo ma\u0301s posible sobre la colina. Cada robot cuenta con una altura inicial H, una cantidad de energi\u0301a E y puede bajar la colina sin gastar energi\u0301a pero gasta una unidad de energi\u0301a para subir una unidad de altura. Cuando un robot alcanza la bomba, e\u0301ste puede cargarla y lleva\u0301rsela ( el robot gasta la misma cantidad de energi\u0301a subiendo con o sin la bomba) ; el robot puede soltar la bomba en cualquier momento o bien, soltarla hasta que se acabe su energi\u0301a y ya no pueda avanzar ma\u0301s. Si fuera posible, otro robot puede ir a recoger la bomba en la posicio\u0301n en la que quedo\u0301 para seguir subie\u0301ndola. Los robots pueden programarse en cualquier orden. Escribe un programa que determine la altura ma\u0301xima que puede alcanzar la bomba si se usan los robots de manera o\u0301ptima.",
    "input": "Un entero N seguido de N parejas de enteros H, E que determinan la altura y energi\u0301a de cada robot. Puedes suponer que 0 \u2264 N \u2264 10^ 5, 0 \u2264 H \u2264 10^ 9 y 0 \u2264 E \u2264 10^ 6.",
    "output": "Un entero positivo que sea la altura ma\u0301xima que puede alcanzar la bomba.",
    "note": "",
    "topics": [
      "sortings",
      "greedy"
    ],
    "id": 8526
  },
  {
    "title": "La ultima esperanza",
    "url": "https://omegaup.com/arena/problem/La-ultima-esperanza",
    "history": "Di\u0301a 2, 523 despue\u0301s de la destruccio\u0301n de nuestro planeta madre, seguimos en bu\u0301squeda de un planeta ideal para nuestra supervivencia, a la nave solo le quedan combustible para recorrer 3 an\u0303os luz mas. Hemos encontrado una constelacio\u0301n cercana con planetas con Hiridium, al parecer encontramos una esperanza. Por fortuna del destino fue interceptado este mensaje por tu poderosisimo nokia 3310 que no conforme con recibirlo de un galaxia muy lejana, lo tradujo para ti de Arimosimonestl a Espan\u0303ol y te dio acceso a la base de datos cienti\u0301fica de la nave nodriza, como crack de la programacio\u0301n que eres no te quedaras con los brazos cruzados y enviaras un mensaje de texto a la raza alieni\u0301gena ( Esperando que no salga muy caro : C) , indica\u0301ndole cual es el planeta mas optimo para su supervivencia, este planeta sera el que contenga mayor cantidad de Hiridium, y que este a al menos a k distancia de la estrella mk3620013.",
    "input": "* n Cantidad de estrellas y planetas que se recibira\u0301* Por cada planeta y estrella se recibira\u0301 su nombre , posicio\u0301n, cantidad- de- Hiridium. * Distancia k maxima a la que estara\u0301 el planeta. * Finalmente se dara\u0301 la posicio\u0301n de la estrella mk3620013",
    "output": "Se imprimira\u0301 el nombre del planeta mas optimo y su posicio\u0301n.",
    "note": "* Se sabe que para que uno de los astros dados sea un planeta su nivel de Hiridium debe ser de al menos 5, de lo contrario sera una estrella la cual no es habitable. * La base de datos a la cual tienes acceso no esta actualizada por lo cual la estrella mk3620013 se llama diferente, el u\u0301nico dato que tienes de ella es su posicio\u0301n. * En caso de no existir planetas habitables cerca de mk3620013 imprime sin comillas \" c murieron : ' v\" * mk3620013 estara\u0301 dentro de los astros dados. ! [ enter image description here] [ 1]",
    "topics": [
      "binary search",
      "combinatorics",
      "implementation",
      "constructive algorithms",
      "sortings"
    ],
    "id": 8229
  },
  {
    "title": "Fosiles pokemon",
    "url": "https://omegaup.com/arena/problem/Fosiles-pokemon",
    "history": "* * Historia de relleno para el programa* * Tu trabajas en una zona de arqueologi\u0301a, genial, aunque tu no eres el que excava y encuentra los huesos de dinosaurios, a ti te contrataron para que hagas un programa que analizara la zona. La zona tiene alrededor de * N* fo\u0301siles, el equipo de excavacio\u0301n llegara dentro de * K* di\u0301as, pero la tierra de esa zona hace que los fo\u0301siles se hundan mas profundo, cada di\u0301a se hunde 1 metros, el equipo que te llegara en unos di\u0301as, solo podra\u0301 excavar * R* metros, tu trabajo es crear un programa que logre predecir que fo\u0301siles podra\u0301n ser excavados por el equipo que llegara en * K* di\u0301as. Cuando pasa un di\u0301a el primer fo\u0301sil ingresado bajara una casilla abajo, luego el siguiente di\u0301a bajara el primero y el segundo fo\u0301sil, el siguiente di\u0301a, el primero bajara, luego el segundo, luego el tercer y asi\u0301 consecutivamente, si un fo\u0301sil esta abajo de la cantidad de metros que puede excavar el equipo, sera marcado con el numero 2 y si se puede excavar, sera marcado con un 1. La zona consta de una cuadro de 10 metros de largo y por * * ( 1 < M< = 100) * * de profundidad hacia abajo, el cual se puede representar de esta manera: | | input* * ( X = 10) * * 0 0 0 0 0 0 0 0 0 0 * * ( Y = 6) * * 0 0 0 1 0 0 0 0 0 0 ( profundidad de la cueva) 0 1 0 0 0 0 0 0 0 0 ( los 1 son fo\u0301siles y los) 0 0 1 0 0 0 0 0 0 0 ( 0 son espacios de tierra) 0 0 1 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0| | end",
    "input": "El programa debera\u0301 introducir un numero * R* que representara que tantos metros podra\u0301 excavar el equipo, seguido de un numero * N* con un valor * Z* , que son la cantidad de fo\u0301siles en la zona, seguido por la posicio\u0301n en X de los fo\u0301siles, para por ultimo, introducir la cantidad * K* de di\u0301as que pasaran antes de que el equipo llegue.",
    "output": "La salida consta de una matriz unidimensional mostrando los fo\u0301siles en el terreno y mostrando con un 1 los fo\u0301siles que podra\u0301n ser sacados con el equipo y con un 2 los que se perdera\u0301n en la tierra, la matriz siempre sera una matriz de 10x10.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "dfs and similar",
      "dp"
    ],
    "id": 7978
  },
  {
    "title": "Rompecabezas extra\u00f1o",
    "url": "https://omegaup.com/arena/problem/Rompecabezas-extrano",
    "history": "Un di\u0301a, como cualquier otro, Fernanda estaba jugando Fornite con Jose\u0301, jugaban y jugaban y nada ma\u0301s no ganaban : ( A Fernanda le entro\u0301 una crisis nerviosa de la rabia, al ser asesinada de un headshoot a 1500 m, por lo que decidio\u0301 dejar de jugar al fornait y ponerse a resolver rompecabezas. Uno de los rompecabezas con los que se cruzo\u0301 le estaba rompiendo la cabeza, como la intensio\u0301n de resolver rompecabezas era para relajarse decidio\u0301 pedirte tu ayuda, para no estresarse tanto ni tampoco sentirse como una inu\u0301til al no poder resolver el rompecabezas. \u00bfy de que\u0301 constaba el problema que tanto mosqueaba a Fer? se preguntaran, pues muy fa\u0301cil. . . la intencio\u0301n era acomodar ciertas palabras, las palabras que tuvieran las mismas letras se debi\u0301an de acomodar en un mismo monto\u0301n, asi\u0301 bien podi\u0301as tener muchos montones con muchas palabras. Pero ella tampoco quiere que todo lo hagas tu\u0301, reitero, no se quiere sentir inu\u0301til, por lo que solo le tendra\u0301s que decir la cantidad de palabras que tiene el monto\u0301n ma\u0301s grande.",
    "input": "N que representa la cantidad de palabras del rompecabezas. N_ i o sea N palabras",
    "output": "La cantidad de palabras en el monto\u0301n ma\u0301s grande.",
    "note": "",
    "topics": [
      "sortings",
      "strings",
      "implementation"
    ],
    "id": 7916
  },
  {
    "title": "Comprando agua",
    "url": "https://omegaup.com/arena/problem/Comprando-agua",
    "history": "Despue\u0301s de un divertido taller de la OMIAGS te das cuenta que llevas 5 horas sin tomar agua. Como sabes lo importante que es mantenerse hidratado, decides llegar a la tienda ma\u0301s cercana para comprar una botella de agua. Al llegar, observas que existen N marcas de agua, todas de diferente precio. Puesto que tienes que pagar tu camio\u0301n de regreso a casa, quieres aquirir el producto de menor precio.",
    "input": "Un entero N, indicando la cantidad de marcas disponibles, seguido de N enteros, todos distintos, indicando los precios.",
    "output": "Imprimir el precio de la botella que vas a adquirir, que tiene que ser la de menor costo.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 7896
  },
  {
    "title": "El desorden de Karla reloaded",
    "url": "https://omegaup.com/arena/problem/El-desorden-de-Karla-reloaded",
    "history": "Karel, como es bien sabido, es un robot muy ordenado, lleva su pasio\u0301n por el ordenamiento a cada rinco\u0301n del mundo, lo comparte con todos sus amigos y conocidos. Su prima lejana, Karla, no comparte la misma pasio\u0301n con Karel, el di\u0301a de hoy la visito\u0301 y se encontro\u0301 con la horrible situacio\u0301n de 3 montones de zumbadores desordenados dentro de la casa. # Problema. Ayuda a Karel a ordenar los montones de zumbadores de menor a mayor. # Entrada. Karel inicia en la esquina inferior izquierda del mundo con orientacio\u0301n desconocida. La casa de Karla consiste de una u\u0301nica fila de ancho 1 y de largo 3. En cada casilla se encuentra un monto\u0301n de zumbadores a ordenar. # Salida. Karel debera\u0301 ordenar de forma creciente los montones de zumbadores, para ensen\u0303arle a su prima Karla lo que es tener las cosas en orden. # Ejemplo. < b> Mundo de entrada< / b> ! [ Entrada] [ 1] < b> Mundo de salida< / b> ! [ Salida] [ 2] # Consideraciones. * Karel inicia en la esquina 1, 1 con orientacio\u0301n desconocida. * Para un grupo del 50",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 7887
  },
  {
    "title": "Santy Sort",
    "url": "https://omegaup.com/arena/problem/Santy-Sort",
    "history": "A nuestros super- amigos les iba muy bien en su oficio, pero crei\u0301an que ya era momento de regresar y terminar con su aventura ( ya teni\u0301an todo lo que necesitaban) . Al momento de querer regresar por el portal se encontraron con varias personas tapando el camino, todas furiosas con antorchas y armas; pareci\u0301a que queri\u0301an atacar el cuartel central del cartel. El informante del cartel le dijo a Joel y Santy lo que habi\u0301a sucedido. Resulta que un hombre misterioso que se hace llamar \" campechano\" , se dice que vino del ma\u0301s alla\u0301 con fines de venganza contra los super- amigos. Esta persona le informo a los ciudadanos de lo que ellos habi\u0301an hecho con el precio de los dulces y naturalmente las personas se molestaron tanto al punto de armar una trinchera contra todo el cartel. Fue en ese momento que Joel y Santy recordaron que dejaron a su amigo Victor ( de campeche) fuera del examen y el estaba muy molesto por eso. Luego Joel recordo\u0301 que dejo el portal hacia la tierra de los problemas abierto. Para su buena suerte Santy recordo\u0301 que dejo un atajo escondido para llegar al portal por vi\u0301a subterra\u0301nea. La puerta del atajo estaba bloqueada con contrasen\u0303a, en la pantalla de la puerta apareci\u0301a un arreglo A de N nu\u0301meros enteros. Santy recordo\u0301 que para desbloquear la puerta habi\u0301a que ordenar los nu\u0301meros de forma creciente; pero los super amigos no teni\u0301an una computadora a la mano y solo sabi\u0301an ordenar nu\u0301meros poniendo la funcio\u0301n sort( ) . Y las ideas que teni\u0301an ( burbuja) eran muy tardas; por lo cua\u0301l Santy se le ocurrio\u0301 la magnifica idea de inventar su propio me\u0301todo de ordenamiento \" Santy- sort\" . El me\u0301todo era muy sencillo Santy agarraba un nu\u0301mero del arreglo ( A_ i) y comparaba en tercias, vei\u0301a el nu\u0301mero de dos posiciones atra\u0301s ( A_ i- 2) y si el nu\u0301mero era menor ( A_ i < A_ i- 2) entonces reverti\u0301a el arreglo desde A[ i - 2] hasta A[ i] ( lo volteaba) . Y esto lo haci\u0301a para cada nu\u0301mero hasta que ya no pudiera hacer ma\u0301s cambios. El pseudoco\u0301digo se veri\u0301a algo asi\u0301: Termine = falseMientras ! Termine: Termine = true; Desde i = 3 hasta N: Si ( A[ i] > A[ i - 2] ) : Termine = falseRevertir desde A[ i - 2] hasta A[ i] La funcio\u0301n revertir se refiere a lo siguiente, si tengo la lista 4, 5, 7, 8, 9, 19 y revierto ( volteo) todos los elementos me queda: 19, 9, 8, 7, 5, 4Para entender mejor el Santy- sort, pensemos que tenemos el arreglo: 34, 48, 56, 23, 5Primera pasada: - Ve la * primera* tercia 34, 48, 56, vemos que 56 > 34 por lo tanto no pasa nada y nos queda 34, 48, 56, 23, 5- Ve la * segunda* tercia 48, 56, 23 como 23 < 48 revertimos ese pedazo del arreglo y nos queda: 34, 23, 56, 48, 5- Ve la * tercera* tercia 56, 48, 5 como 5 < 56 revertimos ese pedazo del arreglo y nos queda: 34, 23, 5, 48, 56Como hubo al menos un cambio entonces volvemos a pasar: - Ve la * primera* tercia 34, 23, 5, ya que 5 < 34 por lo tanto revertimos y nos queda: 5, 23, 34, 48, 56- Ve la * segunda tercia 23, 34, 48 como 48 > 23 no pasa nada y queda igual el arreglo 5, 23, 34, 48, 56- Ve la * tercera* tercia 34, 48, 56 como 56 > 34 no pasa nada y queda igual el arreglo 5, 23, 34, 48, 56Como hubo al menos un cambio entonces volvemos a pasar pero en esta pasada no hay cambios por lo cual el arreglo permanece igual y ya arreglado 5, 23, 34, 48, 56Pero Santy se dio cuenta que no siempre te queda un arreglo ordenada por ejemplo 5, 98, 79, 34, 45 despue\u0301s del Santy- sort queda como 5, 34, 45, 98, 79. Entonces ellos quieren saber si el Santy- sort les dejara ordenado el arreglo o no. # ProblemaDado un arreglo A imprimir \" Si\" , si despue\u0301s de hacer el Santy- sort el arreglo queda ordenado o \" No\" en caso contrario.",
    "input": "N representando el nu\u0301mero de elementos del arregloEn la siguiente linea N nu\u0301meros enteros ( A_ i) que son los elementos del arreglo",
    "output": "\" Si\" , si despue\u0301s de hacer el Santy- sort el arreglo queda ordenado o \" No\" en caso contrario.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 7873
  },
  {
    "title": "Promedio, Mediana y Moda",
    "url": "https://omegaup.com/arena/problem/Promedio-Mediana-y-Moda",
    "history": "Juanito esta haciendo una encuesta a todos los miembros de su ciudad y quiere saber cual es el promedio, la mediana y la moda de los edades de todos los ciudadanos. El problema es que ha capturado los datos de millones personas y Excel ya no quiere calcular tantos datos. Recuerda que el promedio es la suma de los datos entre el numero de personas, la mediana es el valor justo en medio de la lista ordenada ( si hay dos valores en medio, se toma el promedio de los dos) y la moda es el valor mas comu\u0301n.",
    "input": "La primera li\u0301nea es el nu\u0301mero de personas entrevistadas * * N* * y las siguentes * * N* * li\u0301neas contienen las edades de cada persona.",
    "output": "El promedio, la mediana y la moda con decimales en ese orden separados por espacios.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 7862
  },
  {
    "title": "D\u00e1ndole fuerza a los Vengadores",
    "url": "https://omegaup.com/arena/problem/Fuerza-a-los-Vengadores",
    "history": "En la ciudad de Wakanda se esta llevando a cabo una guerra entre algunos de nuestros queridos y amados super- he\u0301roes los vengadores contra las tropas del maligno Thanos. La batalla se estima que sera de proporciones e\u0301picas, pero puede que la fuerza de los vengadores no sea suficiente como para derrotar a los rivales. Para la suerte de los vengadores Felipe esta al rescate, pero Felipe es un super- he\u0301roe tan fuerte que sus poderes igual lo dan\u0303an; por lo cual sus poderes se deben usar en la menor cantidad posible. # ProblemaLa batalla entre ambos equipos ( vengadores y enemigos) esta balanceada en cuanto integrantes. Ambos tienen N miembros en su equipo y cada miembro cuenta con una fuerza F_ i. Para saber que equipo va ganar se calculan los * * * Puntos de victoria* * * . Los puntos de victoria que tiene cada equipo se calcula de la siguiente forma: tomas a cada miembro de los vengadores A_ i ( 1< = i < = N) y comparas la fuerza de todos contra cada uno de los integrantes del equipo de Thanos T_ j ( 1< = j< = N) . Si la fuerza del vengador es mayor, los vengadores ganan un punto, si es igual nadie recibe punto y si es menor el equipo de Thanos recibe un punto. Haces la comparacio\u0301n para cada posible par de A_ i y T_ j para obtener los puntos en total. Si el equipo de los vengares tiene ma\u0301s puntos significa que ellos ganan, si esto sucede debes imprimir \" Avengers\" y por cuantos puntos ganan. De lo contrario significa que Felipe debe actuar para darle ma\u0301s puntos de victoria a los vengadores, asi\u0301 que debes imprimir \" Thanos\" y un nu\u0301mero indicando el mi\u0301nimo nu\u0301mero de puntos que necesitan los vengadores para ganarle al equipo de Thanos",
    "input": "Un u\u0301nico nu\u0301mero entero N que el indica el nu\u0301mero de integrantes que tiene cada equiposEn la siguiente linea N nu\u0301meros enteros positivos separados por un espacio representando la fuerza de cada integrante de los vengadoresEn la siguiente linea N nu\u0301meros enteros positivos separados por un espacio representando la fuerza de cada integrante del grupo de Thanos",
    "output": "Una palabra \" Thanos\" o \" Avengers\" dependiendo de quien gane. En otra linea un entero S representando lo dicho en el problema.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "two pointers"
    ],
    "id": 7734
  },
  {
    "title": "N\u00fameros en Orden",
    "url": "https://omegaup.com/arena/problem/Numeros-en-Orden",
    "history": "Guardar n enteros en una lista ligada, imprimirla, proceder a su ordenamiento e imprimirla.",
    "input": "n enteros que se guardara\u0301n en la lista ligada.",
    "output": "n enteros ordenados ascendentemente",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 7655
  },
  {
    "title": "Buddy el ordenador.",
    "url": "https://omegaup.com/arena/problem/Buddy-el-ordenador",
    "history": "# Descripcio\u0301n. Recientemente Buddy en sus clases de historia universal perruna, aprendio\u0301 que los perros de los creadores de las primeras computadoras le sugirieron a sus duen\u0303os llamarles < i> ordenadores< / i> porque en aquel entonces cuando las computadoras eran monocroma\u0301ticas y del taman\u0303o de un perro pastor alema\u0301n, teni\u0301an como principal funcio\u0301n ordenar datos nume\u0301ricos. Desde entonces Buddy ha estado un poco obsesionado con las decisiones de sus ancestros, y ahora cada lista de nu\u0301meros que se le cruza en su camino quiere ordenarlos de distintas maneras. Particularmente, si una lista de nu\u0301meros A_ 1, A_ 2, A_ 3, . . . , A_ n se le cruza en su camino, le gusta ordenarlos de primero de menor a mayor, luego los ordena de manera inversa a la posicio\u0301n original de la lista, despue\u0301s los ordena de mayor a menor, luego toma los nu\u0301meros en las posiciones impares de la lista y los ordena de menor a mayor, y por u\u0301ltimo toma los nu\u0301meros en las posiciones pares de la lista y los ordena de mayor a menor. Como Buddy quiere evitar la fatiga, te ha pedido tu ayuda para ordenar una lista de nu\u0301meros de taman\u0303o n de las distintas maneras en que le gusta ordenarlos. # Entrada. La primera li\u0301nea contiene un nu\u0301mero n el taman\u0303o de la lista. La siguiente li\u0301nea contiene n nu\u0301meros, que representa a la lista a ordenar. # Salida. Debera\u0301s imprimir en li\u0301neas distintas la lista ordenada en las diferentes maneras que a Buddy le gusta en el orden que a Buddy le gusta. # Ejemplo. | | input104 9 2 1 3 4 7 6 7 2| | output1 2 2 3 4 4 6 7 7 92 7 6 7 4 3 1 2 9 49 7 7 6 4 4 3 2 2 12 3 4 7 79 6 4 2 1| | end# Consideraciones. * 1\u2264 n \u2264 1000* 0\u2264 A_ i \u2264 10^ 5# Buddy te recuerda. Buddy te recuerda que no importa el algoritmo de ordenamiento que utilices.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 7566
  },
  {
    "title": "Omitiendo la intersecci\u00f3n",
    "url": "https://omegaup.com/arena/problem/Omitiendo-la-interseccion",
    "history": "Dadas dos secuencias de N enteros, escribe un programa que reimprima las secuencias pero omitiendo los enteros que aparecen en ambas secuencias. El orden de aparicio\u0301n de los enteros debe conservarse.",
    "input": "Un entero N seguido de dos li\u0301neas donde cada una tiene N enteros. Puedes suponer que 0 \u2264 N \u2264 100, 000 y que los enteros de las secuencias esta\u0301n en el rango de - 10^ 9 a + 10^ 9.",
    "output": "Dos li\u0301neas que contengan las secuencias de enteros originales pero omitiendo los enteros que aparecen en ambas secuencias. # NotaEste problema se puede resolver con los temas vistos en * Algoritmos y Estructuras de Datos* de la UAM Azcapotzalco.",
    "note": "",
    "topics": [
      "implementation",
      "binary search",
      "sortings"
    ],
    "id": 7563
  },
  {
    "title": "La familia de Buddy.",
    "url": "https://omegaup.com/arena/problem/La-familia-de-Buddy",
    "history": "# Descripcio\u0301n. Alguna vez Buddy el perro estuvo junto con su familia perruna: sus hermanos, su papa\u0301 y su mama\u0301. Con el paso de los an\u0303os, la familia de Buddy se separo\u0301 y jama\u0301s se volvieron a encontrar. Tiempo despue\u0301s Buddy encontro\u0301 un a\u0301lbum familiar con n fotos de distintos perros. Por alguna razo\u0301n, los perros tienen un nu\u0301mero en vez de un nombre escrito en la foto ( los perros malhumorados tienen un nu\u0301mero negativo) . Buddy no sabe el nu\u0301mero que identifica a cada uno de los integrantes de su familia, sin embargo, sabe que los miembros de su familia aparecen con ma\u0301s frecuencia en el a\u0301lbum que el resto de los perros. Buddy quiere saber la frecuencia con la que aparece cada perro en el a\u0301lbum para asi\u0301 reconocer a los miembros de su familia. Como Buddy quiere evitar la fatiga, te ha pedido ayuda para realizar esta difi\u0301cil tarea. # Entrada. Primera li\u0301nea: un nu\u0301mero nSegunda li\u0301nea: n nu\u0301meros. El i- e\u0301simo de ellos representa el perro que aparece en la i- e\u0301sima foto del a\u0301lbum. # Salida. Debera\u0301s imprimir una lista con los nu\u0301meros de los perros ordenados descendentemente por el nu\u0301mero de veces que aparecen en el a\u0301lbum de fotos. Si dos perros aparecen la misma cantidad de veces en el a\u0301lbum, se debera\u0301 imprimir primero el perro cuyo nu\u0301mero sea ma\u0301s grande que el otro. # Ejemplo. | | input104 1 - 1 5 1 4 5 1 2 3| | output15432- 1| | end# Consideraciones. * Para 50",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 7448
  },
  {
    "title": "Promedios en intervalos",
    "url": "https://omegaup.com/arena/problem/Promedios-en-intervalos",
    "history": "Dado un registro de alumnos donde cada uno tiene un nu\u0301mero de lista y una calificacio\u0301n, escribe un programa que pueda resolver la siguiente pregunta: \u00bfcua\u0301l es el promedio entero de las calificaciones de los alumnos cuyos nu\u0301meros de lista esta\u0301n entre I y U inclusivo?",
    "input": "Un entero N seguido de N parejas de enteros L, C donde L es el nu\u0301mero de lista de un alumno y C es su calificacio\u0301n. Posteriormente un entero M seguido de M parejas de enteros I y U. Puedes suponer que 0 \u2264 N \u2264 10^ 5, M \u2265 0, 0 \u2264 L \u2264 10^ 9, 0 \u2264 C \u2264 10, 0 \u2264 I \u2264 U < N y que no hay nu\u0301meros de lista repetidos, aunque puede haber nu\u0301meros de lista faltantes.",
    "output": "Para cada intervalo, un entero que sea el promedio entero de las calificaciones de los alumnos con nu\u0301meros de lista en ese intervalo o bien, el entero - 1 si no hay alumnos en ese intervalo.",
    "note": "",
    "topics": [
      "binary search",
      "sortings"
    ],
    "id": 7412
  },
  {
    "title": "Buddy y el pollo.",
    "url": "https://omegaup.com/arena/problem/Buddy-y-el-pollo",
    "history": "En un di\u0301a normal, Buddy el perro iba caminando por la calle, pensando en lo rico que seri\u0301a comerse un pollo. Al tratar de comunicarle a su duen\u0303a su necesidad de comer pollo, se dio cuenta de que no teni\u0301a suficientes croquetas para decirle este mensaje ( si\u0301, Buddy y su duen\u0303a se entienden con croquetas) . Triste pero no derrotado, Buddy se decidio\u0301 salir de casa en busca de delicioso pollo frito, rostizado o en salsa verde. Al cabo de unos di\u0301as, un misterioso pollo de taman\u0303o n aparecio\u0301 en su camino, este fue el mejor di\u0301a de su vida. Como Buddy es un perro muy compartido, considero\u0301 repartirlo entre sus amigos perrunos, y analizo\u0301 de que\u0301 manera podi\u0301a repartir el pollo en partes iguales sin que sobrara ningu\u0301n pellejito, hueso o carne. Ayuda a Buddy da\u0301ndole todas las opciones en las que puede repartir su pollo.",
    "input": "La entrada consiste de una sola li\u0301nea con n: el taman\u0303o del pollo.",
    "output": "Debera\u0301s imprimir en una sola li\u0301nea una lista con las opciones en las que Buddy puede repartir su pollo en partes iguales. Como Buddy quiere evitar la fatiga, debera\u0301s imprimir esta lista en orden ascendente. Si dicha lista no existe entonces debera\u0301s dejar una li\u0301nea en blanco.",
    "note": "",
    "topics": [
      "math",
      "number theory",
      "sortings"
    ],
    "id": 7410
  },
  {
    "title": "Modificando secuencias a lo loco",
    "url": "https://omegaup.com/arena/problem/Modificando-secuencias-a-lo-loco",
    "history": "Dada una secuencia de N enteros donde el entero 5 aparece al menos dos veces, realiza lo siguiente: - Sea p_ 1 la posicio\u0301n de la primera ocurrencia del entero 5 en la secuencia, invierte la subsecuencia anterior a p_ 1. - Sea p_ 2 la posicio\u0301n de la segunda ocurrencia del entero 5 en la secuencia, invierte la subsecuencia posterior a p_ 2. - Busca la primera ocurrencia del entero 7 en la subsecuencia posterior a p_ 1 pero anterior a p_ 2. Si existe, reempla\u0301zala por el entero 0. En caso contrario, ordena la subsecuencia mencionada. Escribe un programa que imprima el estado final de la secuencia.",
    "input": "Un entero N seguido de los N enteros de la secuencia. Puedes suponer que 2 \u2264 N \u2264 100, que los enteros de la secuencia esta\u0301n en el rango de 0 a 100 y que el entero 5 aparece al menos dos veces.",
    "output": "Los N enteros de la secuencia despue\u0301s de realizar las operaciones.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 7377
  },
  {
    "title": "Ordenar de mayor a menor tres n\u00fameros",
    "url": "https://omegaup.com/arena/problem/Ordenar-Mayor-a-menor-3-numeros",
    "history": "Realiza un problema que ordene de mayor a menor tres nu\u0301meros.",
    "input": "Escribe tres nu\u0301meros enteros a, b y c",
    "output": "Los tres nu\u0301meros enteros introducidos pero ordenados de mayor a menor.",
    "note": "",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ],
    "id": 7343
  },
  {
    "title": "El mayor de tres n\u00fameros",
    "url": "https://omegaup.com/arena/problem/El-mayor-de-tres-numeros",
    "history": "Realiza un problema que imprima el mayor de tres nu\u0301meros.",
    "input": "Escribe tres nu\u0301meros enteros a, b y c",
    "output": "El nu\u0301mero entero mayor de los tres nu\u0301meros introducidos.",
    "note": "",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ],
    "id": 7341
  },
  {
    "title": "Mayor a menor",
    "url": "https://omegaup.com/arena/problem/Mayor-a-menor",
    "history": "Realiza un problema que ordene de mayor a menor dos nu\u0301meros.",
    "input": "Escribe dos nu\u0301meros enteros x_ 1 y x_ 2",
    "output": "Los dos nu\u0301meros enteros introducidos pero ordenados de mayor a menor.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 7335
  },
  {
    "title": "El menor de dos n\u00fameros",
    "url": "https://omegaup.com/arena/problem/El-menor-de-dos-numeros",
    "history": "Realiza un problema que imprima el menor de dos nu\u0301meros.",
    "input": "Escribe dos nu\u0301meros enteros x_ 1 y x_ 2",
    "output": "El nu\u0301mero entero menor de los dos nu\u0301meros introducidos.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 7333
  },
  {
    "title": "Menor a Mayor",
    "url": "https://omegaup.com/arena/problem/Menor-a-Mayor",
    "history": "Realiza un problema que ordene de menor a mayor dos nu\u0301meros.",
    "input": "Escribe dos nu\u0301meros enteros x_ 1 y x_ 2",
    "output": "Los dos nu\u0301meros enteros introducidos pero ordenados de menor a mayor.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "math"
    ],
    "id": 7332
  },
  {
    "title": "Consultando registros",
    "url": "https://omegaup.com/arena/problem/Consultando-Registros",
    "history": "Considere un conjunto de N registros que representan la informacio\u0301n de unusuario de acuerdo con los siguientes campos: * Un nu\u0301mero de identificacio\u0301n compuesto por 8 digitos. * Un promedio compuesto por un nu\u0301mero real no negativo. * Un entero que representa la edad del usuario. Ordene este conjunto de datos con base en la edad del usuario y posteriormenteimprima la informacio\u0301n del K- e\u0301simo usuario de acuerdo al valor indicado de K.",
    "input": "Un entero N seguido de N secuencias de tres valores que contienen laidentificacio\u0301n, el promedio y la edad de un usuario. Posteriormente un entero Kque representa el i\u0301ndice en el conjunto ordenado, con base en la edad, del usuariocuya informacio\u0301n se desea imprimir. Puede suponer que 0 \u2264 N \u2264 100, que los usuarios esta\u0301n indizados a partir de 0 y que el promedio de cada usuario es unreal entre 0 y 10.",
    "output": "La informacio\u0301n del K- e\u0301simo usuario en el conjunto ordenado o la cadena * ERROR* si K es un i\u0301ndice inva\u0301lido. Es necesario imprimir el promedio del usuario con so\u0301lodos posiciones decimales.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 7192
  },
  {
    "title": "Ordenando las letras de la l\u00ednea",
    "url": "https://omegaup.com/arena/problem/Ordenando-las-letras-de-la-linea",
    "history": "Escribe un programa que lea una li\u0301nea de texto y la imprima con sus letras ordenadas. Los caracteres no alfabe\u0301ticos deben permanecer en su posicio\u0301n original.",
    "input": "Una li\u0301nea de texto de a lo mucho 100 caracteres. Puedes suponer que la li\u0301nea consiste de letras minu\u0301sculas, comas, puntos y espacios en blanco.",
    "output": "La li\u0301nea de texto con sus letras ordenadas",
    "note": "",
    "topics": [
      "strings",
      "sortings"
    ],
    "id": 7152
  },
  {
    "title": "Ordenando columnas",
    "url": "https://omegaup.com/arena/problem/Ordenando-columnas",
    "history": "Dada una matriz A de m filas y n columnas. Escribe un programa que imprimaA con cada una de sus columnas ordenada de manera creciente.",
    "input": "Dos enteros m, n que representas el nu\u0301mero de filas y columnas de la matrizA. A continuacio\u0301n los m \u00d7 n enteros que representan cada una de lasentradas de la matriz. Puedes asumir que cada entrada en la matriz es unentero cuyo valor esta en el intervalo [ - 100, 100] y que 1 \u2264 m, n \u2264 100",
    "output": "La matriz A con cada una de sus columnas ordenada de manera creciente.",
    "note": "",
    "topics": [
      "implementation",
      "math",
      "sortings",
      "matrices"
    ],
    "id": 7130
  },
  {
    "title": "El lado m\u00e1s corto",
    "url": "https://omegaup.com/arena/problem/El-lado-mas-corto",
    "history": "Escribe un programa que, dadas las coordenadas de los ve\u0301rtices de un cuadrila\u0301tero, calcule la longitud de su lado ma\u0301s corto. ! [ enter image description here] [ 1]",
    "input": "Ocho reales x_ 1, y_ 1, x_ 2, y_ 2, x_ 3, y_ 3, x_ 4, y_ 4. Puedes suponer que 0 \u2264 x_ i, y_ i \u2264 100 y que los ve\u0301rtices se listan ordenados en el sentido de las manecillas del reloj.",
    "output": "Un real que sea la longitud del lado ma\u0301s corto del cuadrila\u0301tero. Tu programa se considerara\u0301 correcto si el valor calculado es razonablemente cercano a la respuesta exacta.",
    "note": "",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ],
    "id": 7093
  },
  {
    "title": "Ordenando n\u00fameros",
    "url": "https://omegaup.com/arena/problem/Ordenando-numeros",
    "history": "Escribe un programa que lea cuatro enteros y los imprima ordenados.",
    "input": "Cuatro enteros A, B, C, D. Puedes suponer que 0 \u2264 A, B, C, D \u2264 1000.",
    "output": "Cuatro enteros que sean los valores de A, B, C, D ordenados.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 7091
  },
  {
    "title": "Ordenamiento super basico",
    "url": "https://omegaup.com/arena/problem/boredx100",
    "history": "Como dejaron a Xela solo en su casa y tenia tiempo que no torturaba a los oli\u0301mpicos de la OB pense en hacer un problema tan dificil que ni el mismo Legna pudiera resolver pero al ver a su gata dormiendo decidio mejor hacer un simple y aburrido problema de ordenacion",
    "input": "La primer li\u0301nea de entrada contendra\u0301 el nu\u0301mero N. La segunda li\u0301nea contendra\u0301 N elementos separados por un espacio. # ProblemaSolo debes de ordenarlos| | input45 10 3 8| | output3 5 8 10| | end# Nota: Deberi\u0301a de estar estudiando etimologi\u0301as",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 6892
  },
  {
    "title": "Las sumas locas del Chema",
    "url": "https://omegaup.com/arena/problem/Las-sumas-locas-del-Chema",
    "history": "Chema es muy aficionado a las matema\u0301ticas, en su tiempo libre toma papel y la\u0301piz e inventa juegos con nu\u0301meros, recientemente ha inventado un juego donde te proporciona dos conjuntos de enteros S, A y te reta a que encuentres de cuantas formas se puede lograr cada elemento S_ i sumando dos elementos cualesquiera del conjunto A. Como tiene cierto grado de autismo, siempre se asegura de escribir los nu\u0301meros de cada conjunto, de tal forma que ninguno se repita.",
    "input": "En la primera li\u0301nea los enteros M, N que denotan el taman\u0303o del conjunto S y A respectivamente. En la segunda li\u0301nea los M enteros del conjunto S separados por un espacio. En la tercera li\u0301nea, los N enteros que conforman el conjunto A, separados por espacios.",
    "output": "El nu\u0301mero de parejas distintas que hay en A, tal que su suma se encuentre en S.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 6880
  },
  {
    "title": "Mataron a Kenny",
    "url": "https://omegaup.com/arena/problem/Mataron-a-Kenny",
    "history": "KENNY quiere saber el mayor de N nu\u0301meros, para hacerlo mas interesante el quiere sumarle el numeromas pequen\u0303o y multiplicarlo por N, como KENNY esta muerto quiere que hagas un programa que realice\u0301 estos ca\u0301lculos por el. ! [ enter image description here] [ 1] < / center>",
    "input": "En la primera linea un entero N que indica la cantidad de nu\u0301meros a leer en la segunda linea separados por un espacio.",
    "output": "Un entero L que representa la suma del mayor con el menor y su multiplicacio\u0301n por N",
    "note": "",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": 6845
  },
  {
    "title": "Subarreglos palindamigos",
    "url": "https://omegaup.com/arena/problem/Subarreglos-palindamigos",
    "history": "Imagina un grupo de N personas numeradas de 1 a N, y que esta\u0301n ordenadas de izquierda a derecha, de menor a mayor. Entre estas personas existen M relaciones de amistad. Si hay una relacio\u0301n de amistad entre las personas A y B, entonces A es amigo de B y B es amigo de A. Considera que A es amigo de A, todos son amigos de si mismos. Si A es amigo de B y B es amigo de C, entonces no necesariamente A es amigo de C. # ProblemaDadas la relaciones de amistad debes determinar el subarreglo palindamigo de mayor longitud. Un subarreglo es palindamigo si la primera persona es amiga de la u\u0301ltima, la segunda de la penu\u0301ltima, la tercera de la antepenu\u0301ltima y asi sucesivamente.",
    "input": "En la primera li\u0301nea dos enteros N y M, la cantidad de personas y el numero de relaciones de amistad. En las siguientes M li\u0301neas dos enteros A y B, que significa que hay una relacio\u0301n de amistad entre estas personas",
    "output": "El taman\u0303o del subarreglo palindamigo de mayor longitud.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 6811
  },
  {
    "title": "Monedas volteadas en intervalos",
    "url": "https://omegaup.com/arena/problem/Monedas-volteadas-en-intervalos",
    "history": "Cuentas con un fila infinita de monedas donde todas muestran sol inicialmente. Escribe un programa que calcule la menor cantidad de monedas que necesitas voltear para que exista al menos un a\u0301guila en cada uno de los M intervalos que se te dara\u0301n.",
    "input": "Un entero M seguido de M parejas de enteros I, J correspondientes a intervalos cerrados. Puedes suponer que 0 \u2264 M \u2264 100, 000 y que 1 \u2264 I \u2264 J \u2264 1, 000, 000.",
    "output": "Un entero que sea la menor cantidad de monedas que necesitas voltear.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "greedy"
    ],
    "id": 6758
  },
  {
    "title": "Las tareas de Briaares",
    "url": "https://omegaup.com/arena/problem/Las-tareas-de-Briaares",
    "history": "U\u0301ltimamente Briaares ha estado muy atareado por lo que necesita tu ayuda. E\u0301l debe resolver K tareas de las N que tiene, en el menor tiempo posible. Para facilitar las cosas le asigno\u0301 un valor de tiempo a cada tarea. Por el mismo motivo \u2013 que esta\u0301 muy apurado \u2013 necesita tu ayuda para que le digas cua\u0301l es el menor tiempo que debe invertir para acabar K tareas. Supongamos que decide hacer las tareas x_ 1 , x_ 2, x_ 3 , . . . , x_ k ( en ese orden) . Entonces, el tiempo que le toma resolver estas tareas juntas lo definio\u0301 como \u2211_ 1 \u2264 i < j \u2264 k | x_ i - x_ j| . \u00bfPor que\u0301 una formula tan rara y no solo sumar los tiempos? Solo Briaares lo sabe. . .",
    "input": "En la primera linea dos enteros, N y K, la cantidad de tareas que tiene y la cantidad que debe resolver. En la siguiente linea N enteros separados por un espacio, donde el ie\u0301simo valor representa el tiempo que le asigno\u0301 a la tarea i.",
    "output": "La mi\u0301nima cantidad de tiempo para que Briaares acabe K tareas.",
    "note": "",
    "topics": [
      "sortings",
      "two pointers"
    ],
    "id": 6749
  },
  {
    "title": "Supermercado",
    "url": "https://omegaup.com/arena/problem/Supermercado_cpp",
    "history": "",
    "input": "reciviras un numero N representando la cantidad de productos en las proximas n lineas reciviras el nombre del producto seguido de su precio.",
    "output": "tendras que imprimir en el tiket los productos ordenados de mayor a menor precio iniciando por el numero 1 hasta N separado por una cadena \" | \" ( sin las comillas) seguido del nombre del producto seguido por la misma cadena de separacion seguido del precio, finalmente seguido de un salto de linea deberas imprimir el total de las compras",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 6688
  },
  {
    "title": "A Mezclar Palabras",
    "url": "https://omegaup.com/arena/problem/A-Mezclar-Palabras",
    "history": "A Marco se le ha dado una misio\u0301n muy especial, que consiste en mezclar 3 cadenas que tienen los caracteres ordenados de menor a mayor, y encontrar el cara\u0301cter que quedara\u0301 en medio de la nueva cadena. * * Nota* * : Mezclar cadenas con caracteres ordenados de menor a mayor, es un proceso que consiste en crear una nueva cadena que contendra\u0301 todos los caracteres de las cadenas mezcladas, estando tambie\u0301n ordenados de menor a mayor. Por ejemplo, al mezclar las cadenas \u201dabd\u201d, \u201d bcd\u201d y \u201d e\u201d, quedara\u0301 la cadena \u201dabbcdde\u201d# ProblemaAyuda a Marco a saber que\u0301 cara\u0301cter quedara\u0301 en medio en la cadena que se produce al mezclar las tres cadenas que le dieron.",
    "input": "Tres li\u0301neas diferentes, cada una con una cadena de caracteres de letras minu\u0301scula diferentes. El taman\u0303o de cada cadena sera\u0301 de a lo ma\u0301s 1000001. Se asegura que la suma de las longitudes de las cadenas sera\u0301 impar.",
    "output": "El cara\u0301cter que estara\u0301 en medio en la nueva cadena.",
    "note": "",
    "topics": [
      "strings",
      "sortings"
    ],
    "id": 6648
  },
  {
    "title": "Ordenando archivos",
    "url": "https://omegaup.com/arena/problem/Ordenando-archivos-v2",
    "history": "Dada una secuencia de N enteros positivos distintos, imprime dicha secuencia ordenada.",
    "input": "El entero N en formato de texto seguido de un espacio en blanco. Posteriormente la secuencia de N enteros, los cuales debera\u0301n leerse con rutinas de lectura sin formato ( por ejemplo, * fread* ) . Cada entero de la secuencia estara\u0301 representado con sizeof( int32 _ t) = 4 bytes. Puedes suponer que 0 \u2264 N \u2264 2^ 21 y que todos los bytes que conforman la secuencia son caracteres ASCII gra\u0301ficos.",
    "output": "La secuencia ordenada, la cual debera\u0301 imprimirse con rutinas de escritura sin formato ( por ejemplo, * fwrite* ) . Cada entero debera\u0301 representarse con sizeof( int32 _ t) = 4 bytes. # NotaYa que OmegaUp vincula la entrada esta\u0301ndar a un archivo, un programa podra\u0301 leer la entrada ma\u0301s de una vez utilizando rutinas de posicionamiento en archivos ( por ejemplo, * fseek* o * rewind* ) sobre * stdin* o equivalente.",
    "note": "",
    "topics": [
      "data structures",
      "expression parsing",
      "*special",
      "sortings",
      "implementation"
    ],
    "id": 6556
  },
  {
    "title": "Cuadros rom\u00e1nticos",
    "url": "https://omegaup.com/arena/problem/Cuadros-romanticos",
    "history": "He\u0301ctor, el programador ti\u0301mido, se ha armado de valor y por fin ha decidido declararle su amor a Erick, pero Andrea, la novia de Erick, no puede enterarse de este amor prohibido. Sabiendo esto He\u0301ctor disen\u0303o\u0301 una manera de codificar su mensaje. Consiste en darle una clave seguido de un mensaje, para resolver este mensaje Erick debe de ordenar alfabe\u0301ticamente la clave y mover cada columna correspondiente de cada letra de la clave a su nueva posicio\u0301n. Erick ha decidido que le ayudara\u0301s creando un programa que resuelva los acertijos de He\u0301ctor, ya que sabe que este mensaje de amor no sera\u0301 el u\u0301ltimo.",
    "input": "La primera li\u0301nea contendra\u0301 n, el nu\u0301mero de filas y de caracteres que contendra\u0301 cada fila. < br/ > La siguiente li\u0301nea contendra\u0301 n caracteres, que forman la clave del acertijo. < br/ > Las siguientes n li\u0301neas contendra\u0301n n caracteres. El mensaje a descifrar.",
    "output": "n li\u0301neas con n caracteres resolviendo el acertijo.",
    "note": "",
    "topics": [
      "strings",
      "sortings",
      "implementation"
    ],
    "id": 6534
  },
  {
    "title": "ULAM ordenado",
    "url": "https://omegaup.com/arena/problem/ULAM-ordenado",
    "history": "El siguiente procedimiento se llama conjetura de ULAM en honor al matema\u0301tico S. Ulam: * Comience con cualquier entero positivo N. * Si es par, divi\u0301dalo entre 2* Si es impar, multipli\u0301quelo por 3 y agre\u0301guele 1. * Obtenga enteros sucesivamente repitiendo el proceso* Al final, obtendra el nu\u0301mero 1, independientemente del entero inicial. Tu tarea es dado un entero positivo N, imprime en orden ascendente todos los enteros generados por el procedimiento anteriormente planteado.",
    "input": "Una li\u0301nea con el entero N.",
    "output": "Los nu\u0301meros de la serie ULAM en orden ascendente y separados por espacios.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 6447
  },
  {
    "title": "Football (aka soccer)",
    "url": "https://omegaup.com/arena/problem/Football-aka-soccer",
    "history": "Football the most popular sport in the world ( americans insist to call it * Soccer* , but we will callit * Football* ) . As everyone knows, Brasil is the country that have most World Cup titles ( four ofthem: 1958, 1962, 1970 and 1994) . As our national tournament have many teams ( and even regionaltournaments have many teams also) it\u2019s a very hard task to keep track of standings with so many teamsand games played! So, * * your task is* * quite simple: write a program that receives the tournament name, team names andgames played and outputs the tournament standings so far. A team wins a game if it scores more goals than its oponent. Obviously, a team loses a game if itscores less goals. When both teams score the same number of goals, we call it a tie. A team earns 3points for each win, 1 point for each tie and 0 point for each loss. Teams are ranked according to these rules ( in this order) : 1. Most points earned. 2. Most wins. 3. Most goal difference ( i. e. goals scored - goals against) 4. Most goals scored. 5. Less games played. 6. Lexicographic order.",
    "input": "The first line of input will be the tournament name, on a single line. Tournamentnames can have any letter, digits, spaces etc. Tournament names will have length of at most 100. Then, in the next line, there will be a number T ( 1 < T \u2264 30) , which stands for the number of teamsparticipating on this tournament. Then will follow T lines, each one containing one team name. Teamnames may have any character that have ASCII code greater than or equal to 32 ( space) , except for* * # * * and * * @ * * characters, which will never appear in team names. No team name will have more than 30characters. Following to team names, there will be a non- negative integer G on a single line which stands forthe number of games already played on this tournament. G will be no greater than 1000. Then, G lineswill follow with the results of games played. They will follow this format: \u201c` team_ name_ 1# goals1@ goals2# team_ name_ 2\u201c` For instance, the following line: \u201c` Team A# 3@ 1# Team B\u201c` Means that in a game between * Team A* and * Team B* , * Team A* scored 3 goals and * Team B* scored 1. All goals will be non- negative integers less than 20. * * You may assume that there will not be inexistentteam names* * ( i. e. all team names that appear on game results will have apperead on the team namessection) and that no team will play against itself.",
    "output": "For each tournament, you must output the tournament name in a single line. In the next T lines youmust output the standings, according to the rules above. Notice that should the tie- breaker be thelexographic order, it must be done case insenstive. The output format for each line is shown bellow: [ a] ) Team_ name [ b] p, [ c] g ( [ d] - [ e] - [ f] ) , [ g] gd ( [ h] - [ i] ) Where: * [ a] = team rank* [ b] = total points earned* [ c] = games played* [ d] = wins* [ e] = ties* [ f] = losses* [ g] = goal difference* [ h] = goals scored* [ i] = goals againstThere must be a single blank space between fields and a single blank line between output sets. See the sample output for examples.",
    "note": "",
    "topics": [
      "sortings",
      "strings"
    ],
    "id": 6304
  },
  {
    "title": "Los libros de Santy 2",
    "url": "https://omegaup.com/arena/problem/Los-libros-de-Santy-2",
    "history": "Santy tiene muchos libros, los cuales tienen un numero como identificador y todos son distintos, lo malo es que su hermana menor se los desordeno todos. Adema\u0301s man\u0303ana Santy entra a la escuela y necesita tener todos sus libros ordenados, al igual que debe tener una forma ra\u0301pida de buscar aquellos que necesite. Asi\u0301 que decidio\u0301 hacer un programa que le diga la posicio\u0301n de sus libros despue\u0301s de ordenarlos de menor a mayor. # ProblemaDado un arreglo de N nu\u0301meros no ordenados que representan los libros, decir en que posicio\u0301n se encuentran Q de esos libros despue\u0301s de ser ordenados",
    "input": "Primera linea: N y Q que representan el numero de libros que hay y los que quiere conocer su posicio\u0301nSegunda linea: N nu\u0301meros A_ i que representa el ID de cada libroTercera linea Q nu\u0301meros B_ i que representa el ID de cada libro que busca",
    "output": "Una linea con Q nu\u0301meros separados por un espacio representando la posicio\u0301n de cada libro despue\u0301s de ser ordenado; donde el numero 1 responde a B_ 1 ( i responde a B_ i) teniendo en cuenta que esta indexado desde 0* Nota* : Santy a veces puede ser muy tonto y pedir el mismo libro ma\u0301s de una vez",
    "note": "",
    "topics": [
      "binary search",
      "sortings",
      "math",
      "implementation"
    ],
    "id": 6272
  },
  {
    "title": "Ordenando Edades",
    "url": "https://omegaup.com/arena/problem/Ordenando-Edades",
    "history": "Leera\u0301s la edad en an\u0303os de toda la gente del pai\u0301s cuya edad es como mi\u0301nimo 1. Se sabe que nadie tiene una edad superior a 100. Tienes como meta mostrar las edades de todas las personas ordenadas de manera ascendente.",
    "input": "Se tiene un entero * * N* * ( 1 \u2264 N \u2264 1000000) que corresponde a la edad de las personas que viven en el pai\u0301s. En las siguientes li\u0301neas hay * * N* * enteros que indican las edades de las personas de manera individual.",
    "output": "Imprime las edades ordenadas de menor a mayor de todas las personas del pai\u0301s.",
    "note": "",
    "topics": [
      "sortings",
      "hashing",
      "implementation"
    ],
    "id": 6256
  },
  {
    "title": "Merge Sort Interactivo",
    "url": "https://omegaup.com/arena/problem/COMI-MergeSort",
    "history": "| | inputmezclar( 0, 5) | | output- | | descriptionAsumiendo que ` int lista[ ] = 1, 5, 3, 4, 6, 2` despue\u0301s de llamar mezclar el arreglo queda ordenado completamente1, 2, 3, 4, 5, 6| | inputmezclar( 1, 3) | | output- | | descriptionAsumiendo que ` int lista[ ] = 1, 5, 3, 4, 6, 2` El arreglo queda ordenado entre las posiciones 1 y 31, 3, 4, 5, 2, 6| | end# Restricciones0 / leq n / leq 10, 000libinteractive: download",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 6149
  },
  {
    "title": "Bucket",
    "url": "https://omegaup.com/arena/problem/COMI-Bucket",
    "history": "| | inputinicio( N[ 1, 2, 3, 3, 2] , 5) | | output- | | descriptionEl arreglo es 1 2 3 3 2| | output| | inputpregunta( 2) | | output2| | descriptionHay 2 , 2 en mi arreglo. | | inputpregunta( 3) | | output2| | descriptionHay 2, 3 en mi arreglo| | end# Restricciones* 1 \u2264 M \u2264 1, 000* 0 \u2264 n_ i \u2264 100# Consideraciones* Se asegura que el arreglo nunca tendra\u0301 ma\u0301s de 1, 000 elementos. libinteractive: download",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 6143
  },
  {
    "title": "Bubble",
    "url": "https://omegaup.com/arena/problem/COMI-Bubble",
    "history": "| | inputinicio( 2) | | output- | | descriptionEl taman\u0303o del arreglo es de 2. | | inputpregunta( 0) | | output20| | descriptionEl usuario pregunta que nu\u0301mero hay en la posicio\u0301n 0. | | inputpregunta( 1) | | output15| | descriptionEl usuario pregunta que nu\u0301mero hay en la posicio\u0301n 1 . | | inputcambia( 0) | | output| | descriptionAhora la posicio\u0301n 0 tiene 15 y la posicio\u0301n 1 tiene 20. Con lo cual el arreglo queda ordenado. | | end# Restricciones0 \u2264 n \u2264 1, 000# Consideraciones* Se asegura que el arreglo nunca tendra\u0301 ma\u0301s de 1, 000 elementos. libinteractive: download",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 6122
  },
  {
    "title": "Revancha",
    "url": "https://omegaup.com/arena/problem/COMI-Comida-Fria",
    "history": "Los estadi\u0301sticos no te caen bien, ni tu a ellos. Desde que teni\u0301as 4 an\u0303os, tu enojo contra estos traga- nu\u0301meros ha ido en aumento. Pero esto esta\u0301 a punto de cambiar. Despue\u0301s de muchas noches de insomnio, se te ha ocurrido la mejor de las revanchas: ganarles en su propio juego. Vas a escribir un paquete para estadi\u0301stica tan completo que los vas a dejar sin trabajo. Decides que lo primero que tu progama debe hacer es ana\u0301lisis de datos ba\u0301sico, que consiste en leer un conjunto de datos ( una lista de enteros) y va a calcular las siguientes medidas de dispersio\u0301n: * Valor mi\u0301nimo: el valor ma\u0301s pequen\u0303o en la lista. Por ejemplo el valor ma\u0301s pequen\u0303o ( mi\u0301nimo) de los nu\u0301meros 5, 6, 5, 3 es 3. * Valor ma\u0301ximo: el valor ma\u0301s grande en la lista. El valor ma\u0301s grande ( ma\u0301ximo) de los nu\u0301meros 5, 6, 5, 3 es 6. * Media ( valor promedio) : la suma de todos los nu\u0301meros en la lista, dividida entre la cantidad de nu\u0301meros que hay en ella. La media de los nu\u0301meros 5, 6, 5, 3 es ( 5+ 6+ 5+ 3) / 4 = 19/ 4 = 4. 75. Por sencillez, te piden que tu programa redondee los resultados al nu\u0301mero entero mas grande, pero que sea menor o igual que el resultado. Por ejemplo: 4. 75 se redondea a 4.",
    "input": "La primer li\u0301nea de entrada contiene un solo entero, n ( 1 \u2264 n \u2264 1000) , el taman\u0303o de la lista de nu\u0301meros. En las siguientes n li\u0301neas hay un entero, x_ i ( 0 \u2264 x_ i \u2264 1000000) , en cada linea.",
    "output": "La salida contiene 3 enteros separados por un espacio: el mi\u0301nimo, el ma\u0301ximo, y el promedio de la lista de nu\u0301meros.",
    "note": "",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ],
    "id": 6084
  },
  {
    "title": "Aut\u00f3matas celulares",
    "url": "https://omegaup.com/arena/problem/Automatas-celulares",
    "history": "Un auto\u0301mata celular es un modelo matema\u0301tico que es u\u0301til para llevar a cabo simulaciones discretas. E\u0301ste consiste de una rejilla donde cada celda es llamada ce\u0301lula, de una asignacio\u0301n de estados discretos para las ce\u0301lulas, de una descripcio\u0301n de la vecindad de cada ce\u0301lula del auto\u0301mata y de un conjunto de reglas que permiten actualizar los estados de las ce\u0301lulas del tiempo t_ i al tiempo t_ i + 1. Escribe un programa que implemente un auto\u0301mata celular con una rejilla de N \u00d7 N ce\u0301lulas con estados binarios ` # ` o ` - ` . La vecindad de una ce\u0301lula consistira\u0301 de ella y de las ocho ce\u0301lulas que la rodean ( vecindad de Moore) y se debe considerar que la u\u0301ltima fila es vecina de la primera ( de manera circular) mientras que lo mismo ocurre para la u\u0301ltima y primera columnas.",
    "input": "El entero N seguido de una matriz de N \u00d7 N caracteres ` # ` o ` - ` que denotan los estados de las ce\u0301lulas de la rejilla al tiempo t_ 0. Posteriormente un entero M seguido de M matrices de 3 \u00d7 3, una al lado de la otra y separadas por espacios, las cuales denotan las vecindades para las que la ce\u0301lula central en el tiempo t_ i se vera\u0301 como ` # ` en el tiempo t_ i+ 1 ( la ce\u0301lula se vera\u0301 como ` - ` para cualquier otra vecindad) . Finalmente, un entero T. Puedes suponer que 1 \u2264 N \u2264 100, 0 \u2264 M \u2264 512 y 0 \u2264 T \u2264 10.",
    "output": "Una matriz de N \u00d7 N caracteres que muestre la rejilla del auto\u0301mata en el tiempo T. | | input4- # - # # - # \u2013# - # # - # - 01| | output\u2014\u2014\u2014\u2014\u2014- | | input4- # - # # - # \u2013# - # # - # - 3- # - - # - # # # # - # # # # # - # - # - - # - # # # 1| | output# - # \u2013# - # # - # \u2013# - # | | input4# # # # # \u2013# # \u2013# # # # # 4# # # # # # # \u2013 \u2013# # \u2013 \u2013# # \u2013 \u2013# # \u2013 \u2013# # # # # # # 1| | output\u2014\u2013# # \u2013# # \u2014\u2013| | input4# # # # # \u2013# # \u2013# # # # # 4# # # # # # # \u2013 \u2013# # \u2013 \u2013# # \u2013 \u2013# # \u2013 \u2013# # # # # # # 2| | output\u2014\u2014\u2014\u2014\u2014- | | end",
    "note": "",
    "topics": [
      "implementation",
      "binary search",
      "math",
      "sortings",
      "matrices"
    ],
    "id": 5949
  },
  {
    "title": "El juego de la silla",
    "url": "https://omegaup.com/arena/problem/El-juego-de-la-silla",
    "history": "El juego de las sillas consiste en caminar alrededor de una fila de sillas mientras suena una pista sonora. Cuando la pista sonora se detiene, debes sentarte cuanto antes en una silla antes de que te la ganen. Esta\u0301s practicando para el torneo mundial del juego de la silla y sabes que la estrategia ganadora es siempre sentarte en la silla ma\u0301s cercana, sin importar si la silla te queda adelante o atra\u0301s. Escribe un programa que lea las posiciones de las N sillas y que responda cua\u0301ntos segundos te toma llegar a la silla ma\u0301s cercana si actualmente te encuentras en la posicio\u0301n P y te mueves a un ritmo de una unidad de distancia por segundo.",
    "input": "Un entero N seguido de N enteros que denotan las posiciones de las sillas. Posteriormente un entero M seguido de M enteros P_ 1, P_ 2, . . . , P_ m que corresponden con los valores de P para los que debes contestar la pregunta mencionada. Puedes suponer que 1 \u2264 N, M \u2264 10^ 5, que todas las sillas esta\u0301n en posiciones distintas y que todas las posiciones esta\u0301n en el rango de 0 a 10^ 9.",
    "output": "Para cada P_ i, la distancia a la que te queda la silla ma\u0301s cercana.",
    "note": "",
    "topics": [
      "binary search",
      "sortings"
    ],
    "id": 5924
  },
  {
    "title": "Bibliotecario eficiente",
    "url": "https://omegaup.com/arena/problem/Bibliotecario-eficiente",
    "history": "La vida da mil vueltas ( yo te lo avise\u0301) , y te encuentras de ayudante en una biblioteca. Te encargaron administrar una cantidad N de libros de los cuales tienes el nombre y si esta\u0301n disponibles para prestar o no. Debes crear un sistema que, dado el nombre de un libro, sea capaz de decir la disponibilidad de dicho libro en el sistema.",
    "input": "Un nu\u0301mero * * N* * de libros en el sistema seguido de * * N* * parejas de li\u0301neas: un string * * L* * que es el nombre del libro y un string D que es la disponibilidad del libroAl final recibira\u0301s un string * * Q* * que representa el libro cuya disponibilidad se desea conocer.",
    "output": "Un string S con la disponibilidad del libro",
    "note": "",
    "topics": [
      "binary search",
      "implementation",
      "sortings"
    ],
    "id": 5923
  },
  {
    "title": "Muletillas de robots",
    "url": "https://omegaup.com/arena/problem/Muletillas-de-robots",
    "history": "Mucha gente tiene problemas al exponer, y los robots humanoides del planeta N- 0J4- V4 no son la excepcio\u0301n. Aunque estos robots hablan con nu\u0301meros en lugar de con palabras, tambie\u0301n son propensos a usar muletillas parecidas al cla\u0301sico \" este. . . \" de los humanos terrestres ( pero ellos con nu\u0301meros) . Tuviste acceso al discurso de un robot profesor de programacio\u0301n y te gustari\u0301a detectar si tambie\u0301n usa muletillas. Como en realidad no entiendes el idioma de los robots, asumira\u0301s que la muletilla es el nu\u0301mero que ma\u0301s aparece en el discurso del robot. Escribe un programa que te ayude a identificarlo.",
    "input": "Un entero N seguido de los N enteros que conforman el discurso del robot. Puedes asumir que 1 \u2264 N \u2264 100, 000 y que todos los enteros del discurso esta\u0301n en el rango de 0 a 2, 000, 000, 000.",
    "output": "El entero que ma\u0301s aparezca en el discurso del robot. En caso de que varios nu\u0301meros aparezcan la misma cantidad de veces, puedes imprimir cualquiera de ellos.",
    "note": "",
    "topics": [
      "sortings",
      "trees",
      "graphs"
    ],
    "id": 5760
  },
  {
    "title": "Intercambios m\u00ednimos para ordenar",
    "url": "https://omegaup.com/arena/problem/swap-min-sort",
    "history": "Dada una secuencia de N enteros, calcula el nu\u0301mero mi\u0301nimo de intercambios que se necesitan para ordenarlos.",
    "input": "El entero N seguido de la secuencia de N enteros. Puedes suponer que 0 \u2264 N \u2264 1, 000, 000 y que los N enteros son distintos y esta\u0301n en el rango de - 1, 000, 000, 000 a + 1, 000, 000, 000.",
    "output": "Un entero con la respuesta.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 5716
  },
  {
    "title": "Ordenamiento con condicionales",
    "url": "https://omegaup.com/arena/problem/Ordenamiento-con-condicionales",
    "history": "Dados 3 nu\u0301meros, debera\u0301s imprimirlos de manera ordenada ascendente",
    "input": "se te dara\u0301n 3 nu\u0301meros separados por un espacio",
    "output": "La salida sera\u0301n esos 3 nu\u0301meros pero ordenados",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 5711
  },
  {
    "title": "Hablando entre robots",
    "url": "https://omegaup.com/arena/problem/Hablando-entre-robots",
    "history": "En un planeta de robots, los idiomas ma\u0301s utilizados son el idioma \" 0\" y el idioma \" 1\" , los cuales no constan de palabras sino de nu\u0301meros. Afortunadamente cuentas con un diccionario bilingu\u0308e para poder realizar traducciones entre ambos idiomas. Escribe un programa que lea el contenido de tu diccionario y que posteriormente realice las traducciones solicitadas.",
    "input": "Un entero N seguido de una secuencia de N parejas de enteros P_ 0, P_ 1 donde cada pareja indica que el nu\u0301mero P_ 0 en el idioma \" 0\" corresponde con el nu\u0301mero P_ 1 en el idioma \" 1\" . Posteriormente un entero M seguido de una secuencia de M parejas de enteros D, P donde cada pareja indica que se desea traducir el nu\u0301mero P del idioma D al otro idioma del planeta. Puedes suponer que 0 \u2264 N, M \u2264 100, 000, 0 \u2264 D \u2264 1, que no hay nu\u0301meros repetidos en el diccionario y que esta\u0301n en el rango de 0 a 10^ 9.",
    "output": "Para cada traduccio\u0301n, un entero que corresponda con el resultado de la misma o - 1 si la traduccio\u0301n no puede realizarse.",
    "note": "",
    "topics": [
      "sortings",
      "binary search"
    ],
    "id": 5603
  },
  {
    "title": "Convenci\u00f3n",
    "url": "https://omegaup.com/arena/problem/OMI-2017-Pandillas",
    "history": "# HistoriaAlexis y varios otros de sus amigos matema\u0301gicos se encuentran en la Convencio\u0301n Nacional de Matema\u0301ticas y Magia. Alexis, como quiere fomentar que sus amigos compartan su magia y conocimiento, se le han ocurrido algunas ideas para que todos convivan ma\u0301s. Una de las ideas de Alexis es juntar al grupo ma\u0301s grande de amigos que se conozcan todos entre si\u0301. Esto es, que cada persona del grupo sea amigo de todas y cada una de las otras personas en ese mismo grupo. Esta es una tarea muy fa\u0301cil para Alexis y las tareas fa\u0301ciles no son cool, por lo que Alexis quiere an\u0303adir una restriccio\u0301n a esta idea. Para ello, lo que va a hacer Alexis es numerar del 0 al N- 1 a las N personas de la convencio\u0301n. Despue\u0301s va a juntar al grupo ma\u0301s grande de amigos que se conozcan todos entre si\u0301, de tal forma que en ese grupo de personas sus nu\u0301meros sean consecutivos. # ProblemaAyuda a Alexis a compartir la magia y el conocimiento juntando al grupo ma\u0301s grande de personas que cumplan con la restriccio\u0301n de su idea cool ( recuerda que la restriccio\u0301n cool es que todos los miembros de un grupo adema\u0301s de ser amigos entre si, tengan nu\u0301meros consecutivos) .",
    "input": "En la primera li\u0301nea los enteros N y M, representando el nu\u0301mero de asistentes a la convencio\u0301n y el nu\u0301mero de amistades respectivamente. Cada una de las siguientes M li\u0301neas tendra\u0301 dos enteros a_ i b_ i que indican que la persona a_ i es amiga de la persona b_ i y viceversa.",
    "output": "Un entero representando el taman\u0303o del grupo ma\u0301s grande de personas que cumplan con la restriccio\u0301n cool de Alexis.",
    "note": "",
    "topics": [
      "dp",
      "sortings"
    ],
    "id": 5508
  },
  {
    "title": "Dos Tres Multiplos",
    "url": "https://omegaup.com/arena/problem/Dos-Tres-Multiplos",
    "history": "Se tiene un nu\u0301mero entero compuesto x de la forma x= 2^ m* 3^ ncon m y n nu\u0301meros enteros. A este nu\u0301mero se le aplicara\u0301n y operaciones. Cada operacio\u0301n consiste en multiplicar por 2 o por 3, o dividir entre 2 o entre 3. De los resultados mostrados, decidir cua\u0301les son posibles despue\u0301s de aplicarlas y operaciones.",
    "input": "La primera fila contiene dos nu\u0301meros separados por espacio. El primero es el nu\u0301mero x querepresenta el nu\u0301mero al que se le aplicara\u0301n las operaciones. El segundo es el nu\u0301mero y que representa cua\u0301ntas operaciones se habra\u0301nde realizar. La segunda fila contiene una lista de Z nu\u0301meros, separadas por espacio, cada n[ umero z= 2^ r* 3^ s para dos potencias r y s enteraspositivas, que representan cada uno un probable resultado.",
    "output": "De los probables resultados, mostrar so\u0301lo los resultados a los que es posiblellegar despue\u0301s de aplicar y operaciones, como una lista separada porespacios, ordenada de menor a mayor. Si no hay ninguna solucio\u0301n, imprimir \" 0\" ( cero) .",
    "note": "",
    "topics": [
      "sortings",
      "dfs and similar"
    ],
    "id": 5428
  },
  {
    "title": "A+B",
    "url": "https://omegaup.com/arena/problem/ASUMAB",
    "history": "El primer problema de hoy es tan simple como a+ b. < BR> Recibira\u0301s una cadena de caracteres con di\u0301gitos. < BR> Tendra\u0301s que reacomodar esos di\u0301gitos para construir dos enteros no negativos, a y b, tal que la suma de a+ b sea la ma\u0301s grande posible. < BR> Cada nu\u0301mero debe tener al menos un di\u0301gito. < BR> No se permitira\u0301n ceros a la izquierda, sin embargo el nu\u0301mero cero hecho con un solo 0 es permitido. < BR> Tendra\u0301s que usar cada digito exactamente la misma cantidad de veces que aparezca en la cadena de caracteres inicial.",
    "input": "La primera li\u0301nea contendra\u0301 un entero t especificando el nu\u0301mero de casos. Cada caso consistira\u0301 en una li\u0301nea con una cadena de caracteres con di\u0301gitos de taman\u0303o n. Si hay ma\u0301s de dos di\u0301gitos, no todos sera\u0301n ceros.",
    "output": "Por cada caso, imprime una li\u0301nea con la suma ma\u0301s grande que puede ser conseguida.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "number theory",
      "strings",
      "math"
    ],
    "id": 5416
  },
  {
    "title": "Frequency Sort",
    "url": "https://omegaup.com/arena/problem/Frequency-Sort",
    "history": "Iancarlo es un gran desencriptador. El sabe que cualquier cifrado en el mundo puede romperse por un analisis de frecuencias, sin embargo tiene una idea completamente erronea de lo que significa analisis de frecuencias. Iancarlo intercepto un mensaje de su enemigo Isaias. El mensaje de Isaias consiste de N numeros, todos menores o igual a C. Iancarlo cree que el analisis de frecuencia consiste de ordenar la secuencia de numeros de tal forma que los numeros mas frecuentes aparecen antes que los numeros menos frecuentes. Formalmente, la secuencia debe ser ordenada de tal forma que para cualesquiera dos numeros X y Y, X aparece antes que Y si el numero de veces que X aparece en la secuencia original es mayor que el numero de veces que Y aparece. Si el numero de apariciones es el mismo, el nu\u0301mero que aparece primero en la secuencia original, debe aparecer antes en la secuencia ordenada. Ayuda a Iancarlo a \" descifrar\" el codigo de Isaias.",
    "input": "En la primera linea vienen dos numeros enteros positivos N y C, la longitud del mensaje, y el numero de la descripcio\u0301n respectivamente. La siguiente linea contiene N enteros menores o iguales que C , el mensaje de Isaias.",
    "output": "En una sola linea, debes imprimir los N enteros de la secuencia ordenada con un espacio entre cada uno.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 5315
  },
  {
    "title": "Compactaci\u00f3n de archivos",
    "url": "https://omegaup.com/arena/problem/Compactacion-de-archivos",
    "history": "Tienes una base de datos de personas y has estado borrando muchos registros u\u0301ltimamente. Sin embargo, cuando borras un registro la implementacio\u0301n de tu base de datos so\u0301lo lo marca como borrado y el taman\u0303o del archivo jama\u0301s ha disminuido. Para recuperar ese espacio, deseas reconstruir el archivo sin incluir los registros borrados. El archivo consta de un entero N seguido de dos secuencias ( la primera de enteros y la segunda de cadenas) . El entero N denota la cantidad de registros del archivo, incluyendo los registros borrados. La primera secuencia contiene, para cada uno de los N registros, tres enteros I_ nombre, I_ apellido, B donde B es 1 si el registro ha sido borrado y 0 en otro caso, mientras que I_ nombre, I_ apellido son i\u0301ndices sobre la segunda secuencia ( numerados desde cero) . La segunda secuencia contiene 2N cadenas que denotan los nombres o apellidos de las personas cuyos registros hacen referencia a ellas. Se sabe que cada cadena es referida exactamente una vez. Escribe un programa que lea los datos del archivo actual y genere un archivo que no contenga los registros borrados ni las cadenas referidas por los mismos.",
    "input": "Un entero N seguido de la informacio\u0301n de los N registros y posteriormente las 2N cadenas. Puedes suponer que 0 \u2264 N \u2264 10^ 5, que todas las cadenas son alfabe\u0301ticas de entre 1 y 16 caracteres y que no existen duplicados.",
    "output": "Un entero M seguido de la informacio\u0301n de los M registros no borrados y posteriormente las 2M cadenas que satisfacen la relacio\u0301n dada en la entrada. La compactacio\u0301n debe ser estable, es decir, si el registro r_ 1 aparece antes que el registro r_ 2 en la entrada y ninguno de los dos fue borrado, entonces r_ 1 debe aparecer antes que r_ 2 en la salida. Lo mismo debe cumplirse para las cadenas.",
    "note": "",
    "topics": [
      "binary search",
      "*special",
      "sortings"
    ],
    "id": 5261
  },
  {
    "title": "Lectura y escritura de datos",
    "url": "https://omegaup.com/arena/problem/Lectura-y-escritura-de-datos",
    "history": "Dada una secuencia de enteros, imprime dicha secuencia ordenada de la siguiente manera: primero los enteros pares en orden creciente y luego los enteros impares en orden decreciente. Tu programa debe leer los datos e imprimir la salida segu\u0301n los formatos indicados en la entrada.",
    "input": "La primera li\u0301nea de la entrada consta de dos caracteres E, S y un caracter de salto de li\u0301nea. El resto de la entrada contiene la secuencia de enteros, la cual debe procesarse hasta el fin de archivo. Si E = ' T' entonces la secuencia debera\u0301 leerse con rutinas de lectura con formato ( por ejemplo, * scanf* ) . Si E = ' B' entonces la secuencia debera\u0301 leerse con rutinas de lectura sin formato ( por ejemplo, * fread* ) y cada entero se representara\u0301 con sizeof( int32 _ t) = 4 bytes. Puedes suponer que la secuencia tendra\u0301 a lo mucho 100, 000 enteros y que todos los bytes de sus representaciones binarias son caracteres ASCII gra\u0301ficos.",
    "output": "Si S = ' T' entonces la secuencia debera\u0301 imprimirse con rutinas de escritura con formato ( por ejemplo, * printf* ) y los enteros debera\u0301n estar separados por un espacio o salto de li\u0301nea. Si S = ' B' entonces la secuencia debera\u0301 imprimirse con rutinas de escritura sin formato ( por ejemplo, * fwrite* ) y cada entero debera\u0301 representarse con sizeof( int32 _ t) = 4 bytes.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "expression parsing"
    ],
    "id": 5039
  },
  {
    "title": "'Cajas de dulces'",
    "url": "https://omegaup.com/arena/problem/Cajas-de-dulces",
    "history": "Carlitos fue a la tienda con su mama a comprar el mandado, y vio un estante con N cajas de dulces, entonces Carlitos le pide a su mama que si le puede comprarle algunas cajas, su mama dijo que si pero que solo agarrara K cajas y que si agarraba una caja tenia que agarrar las que esta\u0301ban junto para que no se tarde en ver cual escoger, Carlitos acepta el trato y va a agarrarlos, como su mama solo le permitio llevarse K cajas y que solo se podia llevar cajas que estuvieran juntas, entonces decide llevarse lo maximo de dulces posible, pero no sabe cuanto es el maximo de dulces que se puede llevar, entonces decides ayudarlo para saber la suma total de dulces que Carlitos se puede llevar.",
    "input": "Recibira\u0301s 2 nu\u0301meros N y K, que N representa el numero de cajas que hay en el estante y K las cajas que puede agarrar. En la siguiente linea seguira\u0301n los N_ i nu\u0301meros que es el numero de dulces que contiene cada caja",
    "output": "Un numero que represente la suma maxima de dulces que puede llevarse Carlitos.",
    "note": "",
    "topics": [
      "sortings",
      "math",
      "implementation"
    ],
    "id": 4902
  },
  {
    "title": "Pivot",
    "url": "https://omegaup.com/arena/problem/Pivote_UP",
    "history": "# Pivote! [ pivot] [ 1] Dado un arreglo X de n nu\u0301meros, x_ 0, . . . , x_ n- 1, escribe un programa que coloque un elemento del arreglo llamado \" pivote\" en alguna posicio\u0301n, y reordene el arreglo en base a dicho pivote, de tal manera que los elementos a su izquierda sean menores, y los elementos a su derechea sean mayores o iguales. Por ejemplo, suponga el siguiente arreglo: X = 2, 6, 8, 1, 3, 9, 5, 7 Si tomamos el nu\u0301mero 7 como pivote, un reordamiento va\u0301lido seri\u0301a: 3, 1, 2, 5, 6, 7, 9, 8 Co\u0301mo se puede observar, todos los elementos a la izquierda de 7, son menores a 7, y los elementos a la derecha son mayores a 7, por lo cual es reordamiento va\u0301lido.",
    "input": "La primera li\u0301nea contiene un nu\u0301mero n ( 2 \u2264 n \u2264 1000) , indicando el nu\u0301mero de elementos en el arreglo. Le siguen n numeros en el rango de [ 0, 10^ 6] , que representan a los elementos del arreglo.",
    "output": "En la primera li\u0301nea imprimir dos nu\u0301meros, n y k, indicando la cantidad de elementos en el arreglo y la posicio\u0301n final del pivote. Le siguen n li\u0301nea, cada uno con los elementos del arreglo reordenado. | | input826813957| | output8 531256798| | end",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 4897
  },
  {
    "title": "Hola Mundo",
    "url": "https://omegaup.com/arena/problem/ofs-hola-mundo",
    "history": "",
    "input": "Dos nu\u0301meros, a y b. # SaludaLa suma de ambos nu\u0301meros.",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "math"
    ],
    "id": 4754
  },
  {
    "title": "Horarios empalmados",
    "url": "https://omegaup.com/arena/problem/Horarios-empalmados",
    "history": "En la feria de ciencias de este an\u0303o se organizaron muchos eventos en diferentes puntos de tu escuela, pero desafortunadamente no podra\u0301s asistir a todos los eventos debido a que algunos horarios esta\u0301n empalmados. Tu consuelo sera\u0301 el asistir a la mayor cantidad posible de eventos distintos completos. Dada la lista de tiempos de inicio y fin de cada evento, escribe un programa que calcule a cua\u0301ntos eventos puedes asistir.",
    "input": "Un entero N seguido de N parejas de enteros T_ i, F_ i que denotan los tiempos de inicio y de fin del i- e\u0301simo evento. Puedes suponer que 1 \u2264 N \u2264 100, 000 y que 0 \u2264 T_ i < F_ i \u2264 1, 000, 000 para 1 \u2264 i \u2264 N.",
    "output": "Un entero que denota la mayor cantidad de eventos a los cuales es posible asistir.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": 4747
  },
  {
    "title": "Torneo de listas ordenadas",
    "url": "https://omegaup.com/arena/problem/Torneo-de-listas-ordenadas",
    "history": "Supo\u0301n que tienes L listas ordenadas de N elementos cada una y deseas obtener una lista ordenada con L * N elementos. Para construirla, planeas encontrar el elemento ma\u0301s pequen\u0303o de entre todas las listas y luego lo extraera\u0301s de aque\u0301lla en la que se encuentre, repitiendo este proceso tantas veces como sea necesario. Sin embargo, la bu\u0301squeda del elemento a extraer la hara\u0301s mediante un torneo binario entre las cabezas de las L listas. Escribe un programa que imprima las cabezas de las N listas al momento de realizar la K- e\u0301sima extraccio\u0301n y el torneo realizado durante la misma.",
    "input": "Tres enteros L, N, K seguidos de L li\u0301neas con N enteros ordenados cada una. Puedes suponer que 1 \u2264 L \u2264 256 y es potencia de dos, que 1 \u2264 N \u2264 1000, que 1 \u2264 K \u2264 L * N y que los L * N enteros son distintos y esta\u0301n en el intervalo de 1 a 1000000.",
    "output": "log_ 2( L) + 1 renglones con L, L / 2, L / 4, . . . , 1 enteros cada una, los cuales corresponden con cada una de las fases del torneo. Para indicar que una lista esta\u0301 vaci\u0301a y que por lo tanto ya no hay enteros a considerar, debes usar el nu\u0301mero - 1. Observa que una lista vaci\u0301a siempre pierde en las comparaciones.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 4692
  },
  {
    "title": " Alicia y las llaves doradas de las puertas",
    "url": "https://omegaup.com/arena/problem/aldp",
    "history": "Despue\u0301s de su larga cai\u0301da, Alicia quedo\u0301 atrapada en el fondo del agujero del conejo. Afortunadamente no estaba totalmente oscuro y pudo ver que habi\u0301a muchas puertas ( todas cerradas) y una mesa con varias llaves doradas. Seguramente alguna llave abriri\u0301a alguna de estas puertas, asi\u0301 que Alicia lo intento\u0301 y pronto descubrio\u0301 que las chapas de las puertas eran de diferentes taman\u0303os y que estaban ordenadas en fila, de la ma\u0301s pequen\u0303a a la ma\u0301s grande. Cada llave so\u0301lo abriri\u0301a la chapa del mismo taman\u0303o. Como en verdad eran muchas puertas y muchas llaves, Alicia penso\u0301 que le tomari\u0301a mucho tiempo intentar abrir todas las puertas con las llaves correctas. Ayuda a Alicia a determinar que\u0301 llaves abren que\u0301 puertas.",
    "input": "Un entero M seguido de los taman\u0303os de las chapas P_ 1, . . . , P_ M. Posteriormente un entero N seguido de los taman\u0303os de las llaves L_ 1, . . . , L_ N. Puedes suponer que 1 \u2264 N, M \u2264 100, 000, que los taman\u0303os de las chapas son distintos con 1 \u2264 P_ 1 < P_ 2 < . . . < P_ M \u2264 100, 000 y que los taman\u0303os de las llaves cumplen 1 \u2264 L_ i \u2264 100, 000 para toda 1 \u2264 i \u2264 N.",
    "output": "Para cada una de las N llaves, el nu\u0301mero de la puerta que puede ser abierta con esa llave o 0 si no corresponde con ninguna puerta.",
    "note": "",
    "topics": [
      "binary search",
      "sortings"
    ],
    "id": 4470
  },
  {
    "title": "Permutaciones de Caract\u00e9res",
    "url": "https://omegaup.com/arena/problem/Perm_Char",
    "history": "Un compan\u0303ero colecciona cartas con diferentes si\u0301mbolos, y quiere checar cuales son las cantidad de conjuntos diferente que puede generar con ellas. Te ha pedido su ayuda pero te puso ciertas reglas debido a su estre\u0301s de orde\u0301n. - El conjunto que te de esta\u0301 ordenado de carta de mayor importancia, a menor importancia- Tienen que ir en orden lexicogra\u0301fico de acuerdo a su orden- Se consideran aparte, incluso si se repiten las mismas letras- Tambie\u0301n cuenta el conjunto vacio",
    "input": "En la entrada tendra\u0301s una seri\u0301e de N caracte\u0301res c u\u0301nidos, cada uno representando un si\u0301mbolo de la carta. Aqui\u0301 ya esta\u0301n en el orden de el compan\u0303ero.",
    "output": "Todas las diferentes combinaciones en orde\u0301n lexicogra\u0301fico, incluyendo el conjunto vacio.",
    "note": "",
    "topics": [
      "sortings",
      "divide and conquer"
    ],
    "id": 4399
  },
  {
    "title": "K Subconjuntos",
    "url": "https://omegaup.com/arena/problem/ksubconjuntos",
    "history": "Dada una cadena de caracteres de longitud n, genera todos los posibles subconjuntos de longitud k, imprime los resultados en orden alfabe\u0301tico, una por li\u0301nea. Como referencia, para una cadena de longitud n, el numero de subconjuntos de longitud k se puede calcular con la fo\u0301rmula: n k = n! / k! ( n - k) !",
    "input": "En la primer li\u0301nea 2 enteros, n y k. En la segunda li\u0301nea una cadena de caracteres de longitud n.",
    "output": "Todos los subconjuntos de longitud k, en orden alfabe\u0301tico.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "strings",
      "combinatorics",
      "sortings",
      "dp"
    ],
    "id": 4217
  },
  {
    "title": "Carrera estructurada",
    "url": "https://omegaup.com/arena/problem/Carrera-estructurada",
    "history": "En una carrera participaron 6< = N< = 1000 personas, a cada participante se le asigno\u0301 un nu\u0301mero u\u0301nico ( id) que lo identifica y la categori\u0301a en la que competira\u0301. Existen dos categori\u0301as: * 1 Categori\u0301a de 5 kilo\u0301metros* 2 Categori\u0301a de 10 kilome\u0301tros. # ProblemaDados el id, el nombre, el tiempo que registro\u0301 ( en minutos) y la categori\u0301a en la que participo\u0301 cada persona, determina los ganadores del primero, segundo y tercer lugar en cada categori\u0301a. Puedes estar seguro que la medicio\u0301n del tiempo es tan exacta que nunca habra\u0301 empates.",
    "input": "En la primera li\u0301nea el entero N. En cada una de las siguientes 4xN li\u0301neas, el id, nombre, tiempo y categori\u0301a de cada persona.",
    "output": "6 li\u0301neas, en las primeras tres los ids y nombres de los ganadores de los primeros tres lugares en la categoria 1, en las u\u0301ltimas tres li\u0301neas, los ids y nombres de los ganadores de los primeros tres lugares en la categori\u0301a 2. Obviamente los ganadores de los primeros tres lugares en cada categori\u0301a son aquellos que registren los tres menores tiempos. # Ejemplos| | input8101Martin Gonzalez39. 662103Julian Cardenas50. 052102Felix Garduza120. 562105Arturo Gonzalez28. 211104Jose Soto32. 41109Pedro Guerra23. 441120Luis Jimenez22. 11195Mario Torres110. 262| | output120 Luis Jimenez109 Pedro Guerra105 Arturo Gonzalez101 Martin Gonzalez103 Julian Cardenas195 Mario Torres| | descriptionLas primeras tres li\u0301neas corresponden a los primeros tres lugares de la categori\u0301a 1, las u\u0301ltimas tres li\u0301neas a los ganadores de la categori\u0301a 2. | | end| | input511Martin Gonzalez19. 9121Julian Cardenas20. 0133Felix Garduza19. 1142Arturo Gonzalez55. 2154Jose Soto61. 51| | output33 Felix Garduza11 Martin Gonzalez21 Julian Cardenas| | descriptionTodos los participantes son de categori\u0301a 1, por lo tanto solo se imprimen los tres mejores tiempos. | | end# SUBTASK* Para el 50",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 4184
  },
  {
    "title": "Cuadro de Honor",
    "url": "https://omegaup.com/arena/problem/Cuadro-de-Honor",
    "history": "# DescriptionDados los nombres y promedios de 1 < = 1000 < = N alumnos, imprime el cuadro de honor ( En el cuadro solo pueden estar las personas que obtienen 9. 5 o ma\u0301s) .",
    "input": "En la primera li\u0301nea el entero N. en las siguientes 2xN li\u0301neas, los nombres y promedios de los N alumnos.",
    "output": "K li\u0301neas con los nombres de los alumnos que alcanzaron cuadro de honor, despue\u0301s de ordenar la lista alfabe\u0301ticamente.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 4166
  },
  {
    "title": "Puntos Ordenados",
    "url": "https://omegaup.com/arena/problem/Puntos-Ordenados",
    "history": "# DescriptionDado un conjunto de 1< = N< = 1000 coordenadas x, y en un plano cartesiano, imprime los puntos ordenados de forma creciente con respecto a X.",
    "input": "En la primera li\u0301nea el entero N. en las siguientes N li\u0301neas las coordenadas x, y de cada punto.",
    "output": "Una lista con N li\u0301neas, cada li\u0301nea contiene las coordenadas de los puntos ( x y) ordenados de forma creciente respecto a X.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 4162
  },
  {
    "title": "Encuesta Reloaded",
    "url": "https://omegaup.com/arena/problem/Encuesta-Reloaded",
    "history": "# DescriptionEn una encuesta sobre salud, se recogieron los datos de 1< = N< = 100 personas, se requiere capturar id, nombre, peso y estatura para cada una de las N personas, calcular su imc y generar somo salida una lista de ids, nombres e imc.",
    "input": "En la primera li\u0301nea el entero N. en las siguientes cuatro li\u0301neas, los datos id, nombre, peso y estatura de la primera persona, los datos de la segunda persona esta\u0301n en las 4 li\u0301neas siguientes y asi\u0301 sucesivamente para las N personas. Recuerda que el IMC de una persona se calcula dividiendo su peso entre el cuadrado de su estatura.",
    "output": "Una lista con N li\u0301neas, cada li\u0301nea contiene el Id, Nombre e IMC ( con 1 decimal) ordenados decrecientemente por IMC.",
    "note": "",
    "topics": [
      "sortings",
      "strings",
      "implementation"
    ],
    "id": 4154
  },
  {
    "title": "Promedios reloaded",
    "url": "https://omegaup.com/arena/problem/Promedios-reloaded",
    "history": "Escribe un programa que lea N datos enteros 1< = N< = 100, calcula el promedio y cuales son mayores al promedio.",
    "input": "En la primera li\u0301nea el entero N, en la segunda li\u0301nea, N enteros separados por un espacio.",
    "output": "En la primera li\u0301nea el promedio ajustado a un decimal, en la segunda li\u0301nea los nu\u0301meros mayores al promedio en orden creciente. # Ejemplos# | | input57 5 3 2 1| | output3. 65 7| | description| | end",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 4101
  },
  {
    "title": "Tres n\u00fameros mas grandes",
    "url": "https://omegaup.com/arena/problem/Tres-numeros-mas-grandes",
    "history": "Se te pide encontrar los tres nu\u0301meros mas grandes que existen en un conjunto de N nu\u0301meros. Debes imprimir esos tres nu\u0301meros en orden descendente.",
    "input": "Leer primero N, donde 3< = N< = 100. El dato N indica la cantidad de nu\u0301meros que se leera\u0301n desde el teclado. En las siguientes N lineas se encuentran los datos de entrada. Cada uno de los datos de entrada es un nu\u0301mero entero que puede ser desde - 100, 000 hasta 100, 000.",
    "output": "Imprima los tres nu\u0301meros mas grandes de mayor a menor, cada uno de ellos en una li\u0301nea separada. # Ejemplos| | input101 2 3 4 5 6 7 8 9 10| | output1098| | input53 25 100 23 28| | output1002825| | end",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 4029
  },
  {
    "title": "El chairo y la mayor suma",
    "url": "https://omegaup.com/arena/problem/El-chairo-y-la-mayor-suma",
    "history": "Ulises el chairo tiene un arreglo a_ 1, a_ 2, . . . , a_ n de n ( 1\u2264 n \u2264 2\u00b7 10^ 5) elementos. Planea hacer q operaciones, cada una definida por l_ i, r_ i. Una operacion definida por l_ i, r_ i consiste en sumar los numeros en las posiciones l_ i, l_ i+ 1, . . . , r_ i ( es decir a_ l_ i, . . . , a_ r_ i) . Sin embargo, despues de hacer esto, decidio reordenar los elementos de tal manera que la suma de los resultados de las operaciones se maximice.",
    "input": "Primera LI\u0300nea: n, q ( 1 \u2264 n, q \u2264 2\u00b7 10^ 5) Segunda Linea: los n numeros a_ 1, a_ 2, . . . , a_ nSiguientes m lineas: l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n)",
    "output": "La maxima suma de las operaciones posible al permutar los a_ i' s'",
    "note": "",
    "topics": [
      "data structures",
      "sortings",
      "implementation"
    ],
    "id": 4007
  },
  {
    "title": "Positivos y negativos",
    "url": "https://omegaup.com/arena/problem/Positivos-y-negativos",
    "history": "Con este problema vamos a repasar el manejo ba\u0301sico de arreglos. Crea un programa que permita leer un conjunto de N nu\u0301meros enteros y despue\u0301s imprima una lista ordenada ( de menor a mayor) de los nu\u0301meros positivos y despue\u0301s una lista ordenada ( de mayor a menor) de los nu\u0301meros negativos.",
    "input": "Leer primero N, donde 1< = N< = 100. El dato N indica la cantidad de nu\u0301meros que se leera\u0301n desde el teclado. En la siguiente li\u0301nea debera\u0301s leer los N nu\u0301meros que se encuentran separados por un espacio. Cada uno de los N nu\u0301meros tiene un valor de entre - 2000 y 2000.",
    "output": "Imprima la palabra \" POSITIVOS\" y en las siguientes li\u0301neas la lista de los nu\u0301meros positivos ordenada de menor a mayor. En la siguiente li\u0301nea escriba la palabra \" NEGATIVOS\" y en las siguientes li\u0301neas una lista de los nu\u0301meros negativos ordenados de mayor a menor. # Ejemplos| | input66 - 2 3 - 4 5 1| | outputPOSITIVOS1356NEGATIVOS- 2- 4| | endNOTA: Aunque no existan nu\u0301meros positivos o negativos se deben imprimir las palabras \" POSITIVOS\" y \" NEGATIVOS\" .",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 3986
  },
  {
    "title": "Ordena B\u00e1sico 2",
    "url": "https://omegaup.com/arena/problem/Ordena-Basico-2",
    "history": "Este es un problema ba\u0301sico de arreglos en el cual debe leer un arreglo y ordenarlo de MAYOR a MENOR.",
    "input": "Leer primero N, donde 1< = N< = 100. El dato N indica la cantidad de nu\u0301meros que se leera\u0301n desde el teclado. En las siguientes N lineas se encuentran los datos de entrada.",
    "output": "Imprima el arreglo ordenado de mayor a menor. # Ejemplos| | input42 8 1 3| | output8321| | end| | input101 2 3 4 5 6 7 8 9 0| | output9876543210| | end",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 3981
  },
  {
    "title": "Conectando Circuitos",
    "url": "https://omegaup.com/arena/problem/Conectando-Circuitos",
    "history": "En una tabla de circuito impreso, se colocan cables conductores sobre una tabla no conductora. Como los cables conductores no pueden cruzarse sin crear un corto circuito, las tablas se dividen en varias capas, y se separan entre ellas por material no conductivo. Sin embargo, entre ma\u0301s capas tengan las tablas, su precio se incrementa. Como quieres gastar lo menos posible, debes conectar los cables conductores requeridos, en cada una de las capas, de forma que se minimice el nu\u0301mero de capas usadas. En este caso, se observan las tablas donde cada cable conductor, esta\u0301 conectando dos puertos localizados en orillas opuestas de la tabla, buscando minimizar el costo de la misma. Supongamos que tenemos una tabla como muestra la figura de abajo a la izquierda. Si requirieras conectar un cable conductor entre A y B y otro entre C y D, puede hacerse en una sola capa como se muestra en la figura de en medio. < center> < img src= \" http: / / bonjoursoft. com/ omegaup/ 5. png\" width= \" 80",
    "input": "La primera li\u0301nea contiene N ( 1< = N< = 10^ 5) el nu\u0301mero de cables conductores. Cada una de las siguientes N li\u0301neas contiene dos enteros X_ i y Y_ i ( 0< = X_ i, Y_ i< = 10^ 6) separados por un espacio, significando que el i- e\u0301simo cable conductor debe conectar los puntos ( X_ i, 0) y ( Y_ i, H) . Debes asumir que todos los 2N terminales dados en la entrada son distintos.",
    "output": "Un u\u0301nico entero que representa el nu\u0301mero mi\u0301nimo de capas necesarias para acomodar todos los cables conductores.",
    "note": "",
    "topics": [
      "binary search",
      "dp",
      "sortings"
    ],
    "id": 3907
  },
  {
    "title": "Reordenamiento Lexicografico",
    "url": "https://omegaup.com/arena/problem/Reordenamiento-Lexicografico",
    "history": "Considera una secuencia de N letras ( puede haber letras repetidas) , a partir de la cual queremos formar una palabra siguiendo estas 2 operaciones: - Tomar la primera letra de la secuencia original, borrarla, y colocarla al final de la palabra que estamos formando. - Tomar la ultima letra de la secuencia original, borrarla, y colocarla al final de la palabra que estamos formando. # ProblemaEscribe un programa que dada la secuencia de letras, determine la menor palabra lexicograficamente que se puede obtener con esas 2 operaciones.",
    "input": "En la primera li\u0301nea un entero N. Cada una de las siguientes N li\u0301neas contendra\u0301 un solo caracter indicando la i- e\u0301sima letra de la secuencia.",
    "output": "La menor palabra que se puede generar, adema\u0301s, * * debes imprimir un salto de li\u0301nea cada 80 caracteres. * *",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "strings",
      "data structures"
    ],
    "id": 3892
  },
  {
    "title": "Candidato independiente",
    "url": "https://omegaup.com/arena/problem/candidato_independiente",
    "history": "E\u0301ste es un an\u0303o electoral y las candidaturas independientes han sido autorizadas. Para ganar terreno, Engel, candidato independiente, ha decidido eficientar sus asistencias a los diferentes eventos ( conferencias, cenas, desayunos, presentaciones, visitas, etc. ) Engel desea acudir a tantos eventos como sea posible. No hay tanto problema entre semana porque so\u0301lo hay dos o tres eventos en la tarde, pero los sa\u0301bados su agenda esta\u0301 saturada. Por lo general los eventos empiezan a las 8 am ( desayuno incluido) y pueden terminarse hasta media noche ( para no molestar a los vecinos) . Naturalmente Engel quiere asistir al ma\u0301ximo nu\u0301mero de eventos posibles. Cada evento tiene una hora de inicio y otra de fin, todas las horas exactas. Esta\u0301n listadas con el formato de 24 horas. Por ejemplo un evento podra\u0301 empezar a las 10 am ( 10) y finalizar a las 2 pm ( 14) . El primer evento puede empezar a las 8 am ( 8) y el u\u0301ltimo evento finalizar a media noche ( 24) . A fin de no ser descorte\u0301s, Engel se queda en cada evento al menos media hora y se debe de considerar que el traslado entre los eventos es instanta\u0301neo. Si no hay eventos que atender en algunas horas del di\u0301a, simplemente se va a la casa de campan\u0303a a descansar.",
    "input": "Cada caso prueba contiene un entero p ( \u2264 100) que indica los eventos que se tienen considerados para ese di\u0301a. En las siguientes p li\u0301neas, cada una con el formato s, e, ambos enteros donde 8 \u2264 s \u2264 e \u2264 24, se indica la hora s de inicio del evento y el fin a la hora e. Se debe de tomar en cuenta que puede haber muchos eventos con la misma hora de inicio y fin",
    "output": "Indique el valor n con el ma\u0301ximo nu\u0301mero de eventos que Engel puede atender# Ejemplos| | input314 1514 1514 15| | output2| | input812 1313 1412 139 109 1012 1312 149 11| | output7| | end",
    "note": "",
    "topics": [
      "sortings",
      "greedy"
    ],
    "id": 3646
  },
  {
    "title": "Cuentas Prueba",
    "url": "https://omegaup.com/arena/problem/Cuentas-Prueba",
    "history": "# HistoriaSe quiere organizar un nuevo concurso de programacio\u0301n que reu\u0301na a los mejores competidores de la regio\u0301n. Para asegurarse que realmente sean los mejores programadores, se ha decidido que el evento sea u\u0301nicamente por invitacio\u0301n. No se quiere que se preste a favoritismos, asi\u0301 las invitaciones se repartira\u0301n entre los mejores programadores de una cierta pa\u0301gina de problemas muy conocida. El u\u0301nico inconveniente es que comu\u0301nmente los programadores tienen varias cuentas: la \u0093buena\u0094 y otra ( u otras ma\u0301s) para hacer pruebas. Se quiere evitar, en la medida de lo posible, invitar varias veces a la misma persona. # ProblemaComo parte del comite\u0301 organizador, te han pedido que crees un programa que sea capaz de decir cua\u0301les cuentas son posiblemente de prueba. Se considera que una cuenta puede ser de prueba cuando es un subconjunto de otra cuenta. Esto es, cuando todos los problemas de la primera cuenta esta\u0301n contenidos en una segunda.",
    "input": "La primera li\u0301nea contendra\u0301 un nu\u0301mero < b> n< / b> ( 1 le; < b> n< / b> le; 100) , la cantidad de cuentas a revisar. Cada una de las siguientes < b> n< / b> li\u0301neas empezara\u0301 con un nu\u0301mero < b> k< / b> ( 1 le; < b> k< / b> le; 1, 000) , la cantidad de problemas resueltos, seguido por < b> k< / b> nu\u0301meros distintos los cuales son los problemas. Los problemas sera\u0301n nu\u0301meros entre 100 y 10, 000.",
    "output": "La salida consistira\u0301 en < b> n< / b> li\u0301neas, una por cada cuenta revisada, conteniendo a cua\u0301l otra cuenta pueden pertenecer. En caso de que puedan pertenecer a dos o ma\u0301s cuentas, los nu\u0301meros debera\u0301n estar separados por una coma y en orden ascendente. En caso de que no sea una cuenta de prueba, se debera\u0301 escribir un guio\u0301n ( \u0091- \u0091) . | | input43 101 102 1033 104 103 1074 101 102 103 1045 101 107 103 104 102| | output3, 444- | | end",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 3602
  },
  {
    "title": "Asalta Kunas",
    "url": "https://omegaup.com/arena/problem/Asalta-Kunas",
    "history": "Karel recientemente se ha vuelto mayor de edad, lo que indica que podri\u0301a ir a prisio\u0301n en caso de que saliera con una menor de edad. Por suerte Karel se ha mudado a Karelandia donde tambie\u0301n le permiten tener una novia de diecise\u0301is an\u0303os. # ProblemaDada una lista de * * n* * personas acomoda de mayor a menor las personas con las que Karel puede salir en la fila 1. # Especificaciones- Karel no tiene zumbadores en su mochila. - Cada persona esta\u0301 representada por un monto\u0301n de zumbadores igual a su edad. - La posicio\u0301n y orientacio\u0301n inicial de Karel es desconocida. - El re\u0301cord de la persona ma\u0301s longeva en Karelandia es 100 an\u0303os. - El mundo de Karel sera\u0301 un recta\u0301ngulo de 100\u00d7100 sin paredes interiores. - Karel no puede tener una novia de diecisiete an\u0303os. - Las sen\u0303oritas estara\u0301n siempre en el primer renglo\u0301n. - Puede haber espacios vaci\u0301os entre ellas. # Mundo ejemplo entrada 1! [ entrada1] ( imagen. jpg) # Mundo ejemplo salida! [ salida1] ( imagen1. jpg)",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 3260
  },
  {
    "title": "La Sucesi\u00f3n de Karel",
    "url": "https://omegaup.com/arena/problem/La-Sucesion-de-Karel",
    "history": "Karel tiene una sucesio\u0301n de montones con uno o dos zumbadores, a partir de ella quiere hacer otra sucesio\u0301n que tenga las siguientes caracteri\u0301sticas: 1) Debera\u0301 tener la misma cantidad de montones. 2) Los montones de los dos extremos sera\u0301n iguales a los montones de los extremos del original. 3) Para decidir la cantidad de zumbadores en el monto\u0301n * * k- e\u0301simo* * de la nueva sucesio\u0301n se fija en los montones * * k- 1* * , * * k* * y * * k+ 1* * de la sucesio\u0301n original, ordena de forma no decreciente dichos montones, y la cantidad de zumbadores que tenga el monto\u0301n de en medio, sera\u0301 la cantidad de zumbadores que le pondra\u0301 al monto\u0301n * * k- e\u0301simo* * . Por ejemplo: si los montones tienen 2, 1 y 2 zumbadores respectivamente, despue\u0301s de ordenarlos quedari\u0301a 1, 2 y 2, por lo cual le pondri\u0301a 2 zumbadores a la nueva sucesio\u0301n. # ProblemaA partir de una sucesio\u0301n de montones de zumbadores, crea una nueva sucesio\u0301n con las caracteri\u0301sticas mencionadas en el pa\u0301rrafo anterior. # Especificaciones- Karel inicia en la casilla en la esquina inferior izquierda orientado al norte. - Karel tiene infinitos zumbadores en la mochila. - La sucesio\u0301n de los montones de zumbadores empieza en la esquina inferior izquierda y termina en una pared de altura 1. - Cada monto\u0301n tendra\u0301 uno o dos zumbadores. - La sucesio\u0301n resultante la debera\u0301s poner en el segundo renglo\u0301n empezando en la primera columna. - Solamente se te calificara\u0301 la cantidad de zumbadores que dejes en el segundo renglo\u0301n y que esta\u0301 exactamente arriba de la sucesio\u0301n original. # Mundo ejemplo entrada 1! [ entrada1] ( imagen. jpg) # Mundo ejemplo salida! [ salida1] ( imagen1. jpg)",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "dp",
      "dfs and similar"
    ],
    "id": 3258
  },
  {
    "title": "Derdenio y sus Estructuras de Datos",
    "url": "https://omegaup.com/arena/problem/Derdenio",
    "history": "Derdenio tiene dos listas de nu\u0301meros enteros ordenados de menor a mayor, pero quiere combinar ambas listas en una sola pero y que quede ordenada de mayor a menor. Ayuda a Derdenio a lograr su objetivo.",
    "input": "En la primera li\u0301nea, un nu\u0301mero entero positivo, N, la cantidad de nu\u0301meros que tiene en cada lista ordenada. En la segunda li\u0301nea, N nu\u0301meros ordenados de menor a mayor: la primer lista. En la tercera li\u0301nea, N nu\u0301meros ordenados de menor a mayor: la segunda lista.",
    "output": "2N nu\u0301meros, la lista resultante de combinar las dos listas iniciales, ordenada de mayor a menor.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 3131
  },
  {
    "title": "Greedy Artisan",
    "url": "https://omegaup.com/arena/problem/Greedy-Artisan",
    "history": "On their way to the next World Finals, Mr. Ed and his pals are visiting the beautiful city of Moscow. One of their favorite tourism activities is buying souvenirs to bring back home, so they are looking for matryoshkas in a big artisan market close to the Red Square. < center> ! [ Matryoshkas] ( matryoshkas. jpg) < / center> In the market, there is a very greedy and clever artisan that sells custom sets of matryoshkas. This artisan has n different matryoshkas in stock, each one having a unique identifier i ( 1 \u2264 i \u2264 n) , a size s_ i and a base price p_ i. As the artisan is really clever, he offers a special deal to his clients: Assume someone wants to buy the custom set T = i_ 1, i_ 2, . . . , i_ m of m matryoshkas. Let us call i_ max to the identifier of the matryoshka with the maximum size and, in case there are multiple matryoshkas with maximum size, the maximum price in T, then the price one has to pay to buy T is price( T) = \u2211_ j = 1^ m s_ i_ j/ s_ i_ max\u00d7 p_ i_ max Mr. Ed wants to exploit the artisan\u2019s deal buying exactly k matryoshkas, regardless which are the sizes of each matryoshka. Please determine the minimum number of money he needs to expend.",
    "input": "The input will contain several test cases. The first line of each test case contains 2 space- separated integers n and k, representing the number of matryoshkas the artisan has in stock and the number of matryoshkas Mr. Ed wants to buy ( 1 \u2264 n \u2264 100, 000 and 1 \u2264 k \u2264 n) . There will follow n lines. The i- th line contains 2 integers s_ i and p_ i, representing the size and the base price of the i- th matryoshka ( 1 \u2264 s_ i, p_ i \u2264 10^ 6) . There may be matryoshkas with the same s_ i and p_ i. The last test case is followed by a single line containing 2 zeroes.",
    "output": "For each case, print a single line with a real number with 6 digits after the decimal point representing the minimum price Mr. Ed has to pay to buy k matryoshkas ( see format below) . # Example| | input3 210 54 46 30 0| | outputCase # 1: 5. 000000| | end",
    "note": "",
    "topics": [
      "sortings",
      "greedy"
    ],
    "id": 3025
  },
  {
    "title": "PostesDF",
    "url": "https://omegaup.com/arena/problem/PostesDF",
    "history": "Cierta empresa de renta lonas para eventos sociales ( fiestas, reuniones, etc. ) . Requieren elegir \u201ck\u201d postes de los \u201cn\u201d postes que poseen de diversos taman\u0303os, mismos que sera\u0301n usados para colocar la lona. Es necesario que la distancia entre el poste de menor taman\u0303o y el poste de mayor taman\u0303o sea la mi\u0301nima para que la lona quede balanceada y luzca una apariencia agradable. # ProblemaDebes construir un programa que determine cua\u0301l es la diferencia mi\u0301nima ( entre el poste mayor y de menor taman\u0303o) de los \u201ck\u201d postes que sea posible encontrar de entre todos los postes que posee la empresa y que servira\u0301n para fijar la lona.",
    "input": "Tu programa debera\u0301 leer del teclado los siguientes datos. El primer renglo\u0301n va el nu\u0301mero 1< = k < = 10, 000 de postes que se requieren para el evento. En el segundo renglones va el nu\u0301mero k< = n < = 100, 000 de postes que tiene la empresaEn el tercer renglo\u0301n van el taman\u0303o de cada poste separado por un espacio el taman\u0303o de cada poste esta\u0301 entre 1 < = t < = 1, 000, 000.",
    "output": "La salida consistira\u0301 en un solo renglo\u0301n indicando la diferencia mi\u0301nima posible de la combinacio\u0301n de \u201ck\u201d postes que posee la empresa. # Ejemplos| | input310100 20 40 33 65 200 77 178 135 47| | output14| | end# Consideraciones\u2022 En la cinta habra\u0301 entre 3 y 1, 000, 000 de programas ( es una cinta muy larga) . \u2022 Todas las duraciones sera\u0301n nu\u0301meros enteros.",
    "note": "",
    "topics": [
      "implementation",
      "math",
      "sortings"
    ],
    "id": 2989
  },
  {
    "title": "Encontrando la posici\u00f3n.",
    "url": "https://omegaup.com/arena/problem/Encontrando-la-posicion",
    "history": "Dado un conjunto de 1< = N< = 100 nu\u0301meros enteros, determina en que lugar ( ordinal) queda el nu\u0301mero K despue\u0301s de ordenar el conjunto en forma creciente. Puedes estar seguro de que el entero K solo aparecera\u0301 una vez en el conjunto.",
    "input": "En la primera li\u0301nea el entero N. En la segunda li\u0301nea y separados por espacios, los N datos del conjunto. en la tercera li\u0301ne el entero K.",
    "output": "El entero que denota en que posicio\u0301n queda el entero K, despue\u0301s de ordenar el conjunto. Considera que las posiciones se cuentan a partir de 0. # Ejemplos# | | input75 6 2 10 1 20 88| | output4| | descriptionLos datos del conjunto ordenados de forma creciente: 1 2 5 6 8 10 20K= 8 esta\u0301 en la posicio\u0301n 4. | | end",
    "note": "",
    "topics": [
      "binary search",
      "implementation",
      "sortings"
    ],
    "id": 2878
  },
  {
    "title": "M\u00e1ximo repetido",
    "url": "https://omegaup.com/arena/problem/Maximo-repetido",
    "history": "Dado un conjunto de 1 \u2264 N \u2264100 nu\u0301meros enteros, determina cuantas veces aparece el elemento de valor ma\u0301ximo.",
    "input": "En la primera li\u0301nea el entero N. En la segunda li\u0301nea y separados por espacios, los N datos del conjunto.",
    "output": "Un entero que denota cuantas veces aparece el dato de valor ma\u0301ximo. # Ejemplos# | | input72 5 9 10 1 10 8| | output2| | descriptionEl dato de valor ma\u0301ximo es 10 y aparece 2 veces en el conjunto. | | end",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 2861
  },
  {
    "title": "Cadena perfecta",
    "url": "https://omegaup.com/arena/problem/Cadena-perfecta",
    "history": "Se te dara\u0301 una palabra de taman\u0303o indefinido, tu deber es separar los caracteres, ordenarlos ascendentemente segu\u0301n el alfabeto, e indicar cuantos caracteres identicos a el hay en la cadena. Si solo esta\u0301 una vez, sera\u0301 1( Ca\u0301racter) , si son 2 sera\u0301 2( Ca\u0301racter) , y asi\u0301 sucesivamente. # NotaObserva el ejemplo para un mayor entendimiento, si en la cadena hay 2 cara\u0301cteres iguales, solo\u0301 imprime uno, y al lado izquierdo del cara\u0301cter, un nu\u0301mero indicando cuantas veces se repite. ( Repeticiones) [ Cara\u0301cter] = 2h.",
    "input": "Una cadena de taman\u0303o indefinido. | | inputhola| | output1a1h1l1o| | end",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 2818
  },
  {
    "title": "Ordenando D\u00edgitos",
    "url": "https://omegaup.com/arena/problem/Ordenando-Digitos",
    "history": "Se tiene un archivo que contiene una gran cantidad de di\u0301gitos en desorden. Como ordenar es una de las tareas ma\u0301s ba\u0301sicas de la computacio\u0301n te interesa utilizar dicho archivo para practicar tus algoritmos de ordenacio\u0301n. # ProblemaEscribe un programa que dado N de di\u0301gitos, entregue como resultado los mismos N di\u0301gitos en orden ascendente. * * NOTA: * * Para este problema se hara\u0301 un especial e\u0301nfasis en la eficiencia de los algoritmos, por lo que te recomendamos que implementes la solucio\u0301n ma\u0301s eficiente que encuentres, es decir, la que se ejecute en el menor tiempo posible.",
    "input": "En la primera li\u0301nea el nu\u0301mero 1 \u2264 N \u2264 1, 000, 000. En la segunda li\u0301nea habra\u0301 N di\u0301gitos separados cada uno por un espacio.",
    "output": "En la primera y u\u0301nica li\u0301nea, los N di\u0301gitos ordenados, separados por un espacio cada uno.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 2797
  },
  {
    "title": "Salsa \"La Pikina\"",
    "url": "https://omegaup.com/arena/problem/OMI2015LENGUAJE2",
    "history": "Te contrataron para estar a cargo del a\u0301rea de exportaciones de la fa\u0301brica de salsa \u201cLa Pikina\u201d. Te acaba de llegar un pedido del extranjero. Tu cliente quiere la mayor cantidad de botellas de Salsa la Pikina que puedas enviar, sin embargo debido a regulaciones gubernamentales es necesario que todas las botellas que envi\u0301es contengan exactamente la misma cantidad de salsa. El sistema de llenado utilizado por tu fa\u0301brica tiene un alto margen de error, lo que hace imposible tener todas las botellas con la misma cantidad de salsa. Actualmente tienes N botellas de salsa en el almace\u0301n, cada una tiene una cierta cantidad de salsa. Cuentas tambie\u0301n con un total de K mililitros de salsa, cada uno de los cuales puedes agregar con un ma\u0301quina a la botella o botellas que desees. # ProblemaEscribe un programa que decida co\u0301mo agregar salsa a las botellas de modo que la cantidad de botellas que puedas enviar sea la ma\u0301xima posible, es decir, que la cantidad de botellas con exactamente la misma cantidad de salsa sea la ma\u0301xima posible usando a lo ma\u0301s K mililitros extras. Tu programa debera\u0301 escribir la cantidad de botellas y la cantidad de salsa que contendra\u0301n. En caso de que haya ma\u0301s de una solucio\u0301n con la misma cantidad de botellas debera\u0301s elegir aquella en que las botellas tengan la menor cantidad de salsa.",
    "input": "La primera li\u0301nea contendra\u0301 dos enteros N y K respectivamente. La segunda li\u0301nea contendra\u0301 N enteros representando la cantidad de mililitros que tiene cada una de las botellas.",
    "output": "Tu programa debera\u0301 escribir dos enteros separados por un espacio representando la cantidad ma\u0301xima de botellas que puedes enviar y los mililitros que contendra\u0301 cada una de ellas. # Restricciones* 1 \u2264 N \u2264 2, 000, 000 ( Nu\u0301mero de botellas) * 0 \u2264 K \u2264 1, 000, 000, 000 ( Cantidad de mililitros) * 0 \u2264 c_ i \u2264 1, 000, 000 ( Mililitros que contiene la i- e\u0301sima botella)",
    "note": "",
    "topics": [
      "sortings",
      "two pointers",
      "dp"
    ],
    "id": 2757
  },
  {
    "title": "Techo",
    "url": "https://omegaup.com/arena/problem/techo",
    "history": "Karel ha recibido las llaves de su nueva casa, esta\u0301 muy contento. Pero no sabe cua\u0301nto mide el techo de su nueva casa. # ProblemaAyuda a Karel a indicar el ancho del techo de su nueva casa, y colocar el taman\u0303o en la posicio\u0301n ( 1, 1) # Consideraciones< ul> < li> Karel empieza dentro de su casa nueva< / li> < li> La altura de su casa siempre es de un renlgo\u0301n< / li> < li> Karel trae infinito nu\u0301mero de beepers en su mochila< / li> < li> Karel esta\u0301 orientado hacia el este en la posicio\u0301n ( 1, 1) < / li> < li> La casa de Karel siempre tendra\u0301 techo< / li> < li> No importa la posicio\u0301n final de Karel< / li> < li> So\u0301lo importa la cantidad de beepers en la posicio\u0301n ( 1, 1) que indican el ancho del techo de la nueva casa de Karel< / li> < / ul> # Entrada ejemplo! [ Ejemplo de entrada] ( techo_ entrada. jpg) # Salida ejemplo! [ Ejemplo de salida] ( techo_ salida. jpg)",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 2678
  },
  {
    "title": "Calcula mediana",
    "url": "https://omegaup.com/arena/problem/Calcula-mediana",
    "history": "# ProblemaEn la clase de estadi\u0301stica te pidieron calcular las medianas de variosconjuntos de datos. Como no quieres hacer los ca\u0301lculos a mano, decidisteescribir un programa que realice el ca\u0301lculo. Escribe un programa que calcu\u0301le la mediana de un conjunto de datos. Losdatos pueden tener valores entre 1 y 1000000, y pueden ser hasta 200datos. # Entrada: Una li\u0301nea con el conjunto de datos# Salida: La mediana del conjunto de datos# Ejemplo: | | input100 95 90 90 85 80 75| | output90| | input1000 1 900 2 800 3 4 5 6 7 101 102 321| | output7| | end",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "math",
      "sortings",
      "implementation"
    ],
    "id": 2514
  },
  {
    "title": "Tecleando n\u00fameros",
    "url": "https://omegaup.com/arena/problem/Tecleando-numeros",
    "history": "Se te dara\u0301 un nu\u0301mero N de instrucciones que debera\u0301s realizar. Solo hay instrucciones de tipo A y B, cada una seguida de un nu\u0301mero M. A) Esta instruccio\u0301n indica que has tecleado el nu\u0301mero M. B) Tienes que imprimir cua\u0301ntas veces has tecleado el nu\u0301mero M hasta ese momento.",
    "input": "En la primera li\u0301nea un entero N. En las siguientes N li\u0301neas se te dara\u0301 una letra, ya sea A o B, seguida de un nu\u0301mero.",
    "output": "Por cada instruccio\u0301n B debera\u0301s imprimir cuantas veces se ha tecleado el nu\u0301mero M hasta ese momento.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 2501
  },
  {
    "title": "Mezcla de n\u00fameros",
    "url": "https://omegaup.com/arena/problem/Mezcla-de-numeros",
    "history": "Imagine que tiene dos pilas de exa\u0301menes ordenados por nu\u0301mero de lista y que quiere obtener una sola pila con todos los exa\u0301menes ordenados por nu\u0301mero de lista. Por ejemplo, una pila podri\u0301a consistir de los cuatro exa\u0301menes con nu\u0301meros 1, 5, 6 y 9 y la otra pila podri\u0301a consistir de los tres exa\u0301menes con nu\u0301meros 2, 7 y 11. Entonces, al mezclar los nu\u0301meros de lista obtendri\u0301a una pila con los siete exa\u0301menes con nu\u0301meros 1, 2, 5, 6, 7, 9 y 11. Si se da una lista de N nu\u0301meros a_ 1 < a_ 2 < . . . < a_ N y otra lista de M nu\u0301meros b_ 1 < b_ 2 < . . . < bM se desea obtener una lista con N+ M nu\u0301meros c_ 1 < c_ 2 < . . . < c_ N+ M que contenga a los N+ M nu\u0301meros dados.",
    "input": "La entrada consiste de dos nu\u0301meros enteros N y M separados por un espacio y con 1 \u2264 N, M \u2264 1000, seguidos de un renglo\u0301n con N nu\u0301meros enteros 0 < a_ 1 < a_ 2 < . . . < a_ N < 10, 000 y otro reglo\u0301n con M nu\u0301meros enteros 0 < b_ 1 < b_ 2 < . . . < b_ M < 10, 000. Puede suponer que todos los valores de a y de b sera\u0301n diferentes entre si\u0301.",
    "output": "La salida consiste de una lista con N+ M nu\u0301meros enteros c_ 1 < c_ 2 < . . . < c_ N+ M.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 2481
  },
  {
    "title": "Monedas",
    "url": "https://omegaup.com/arena/problem/Monedas",
    "history": "Despue\u0301s de haber ahorrado monedas durante toda tu vida te has dispuesto a gastarlas, sin embargo andar cargando kilos de monedas por la vida no es algo pra\u0301ctico. Asi\u0301 que te has puesto a pensar la mejor forma de cargar las monedas de modo que siempre te sea posible comprar algo que se te pueda antojar pero no quieres gastar ma\u0301s de cierta cantidad. Tu pareja sentimental ( novio o novia) ha decidido ayudarte, y para ello ha seleccionado un set de monedas que puedas llevar contigo. Asi\u0301 que por ahora solo quieres saber cua\u0301l es la primera cantidad que no podra\u0301s pagar con las monedas que ha seleccionado tu pareja sentimental. Nota que no quieres recibir cambio puesto que ya esta\u0301s harto de tantas monedas.",
    "input": "Primera li\u0301nea: contiene un entero N indicando la cantidad de monedas que ha seleccionado tu pareja sentimental. Segunda li\u0301nea: contiene N enteros v_ i indicando el valor de las monedas que ha seleccionado tu pareja sentimental.",
    "output": "Tu programa debera\u0301 decir cua\u0301l es la cantidad ma\u0301s pequen\u0303a que no puedes pagar con las monedas seleccionadas, sin que te den cambio.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 2430
  },
  {
    "title": "La fila de indios en la cornisa",
    "url": "https://omegaup.com/arena/problem/La-fila-de-indios-en-la-cornisa",
    "history": "En su hui\u0301da desesperada, John Carter localizo\u0301 una delgada cornisa al borde de un precipicio y subio\u0301 por ella. Los indios lo siguieron por la cornisa, pero pronto se dieron cuenta de que la tarea se dificultaba porque los indios ma\u0301s altos le tapaban la vista a los ma\u0301s bajos que veni\u0301an atra\u0301s. Por ello decidieron acomodarse de modo que los indios ma\u0301s bajos fueran adelante y los ma\u0301s altos fueran atra\u0301s. Sin embargo, cambiarse de lugar resultaba muy peligroso. El poco espacio disponible en la cornisa los obligo\u0301 a que dos indios podi\u0301an cambiar de lugar so\u0301lo si estaban uno justo detra\u0301s del otro. \u00bfCua\u0301l es la mi\u0301nima cantidad de dichos cambios que se necesitan para lograr su objetivo?",
    "input": "Un entero N seguido de las N alturas H_ 1, . . . , H_ N de los indios. Puedes suponer que 1 le; N le; 1, 000, 000, que 1 le; H_ i le; 1, 000, 000, 000 y que las alturas de todos los indios son distintas.",
    "output": "La cantidad mi\u0301nima M de cambios de lugar que deben realizarse.",
    "note": "",
    "topics": [
      "sortings",
      "divide and conquer"
    ],
    "id": 2372
  },
  {
    "title": "El cactus m\u00e1s alto en el horizonte",
    "url": "https://omegaup.com/arena/problem/cactus_horizonte",
    "history": "Mientras John Carter hui\u0301a de los indios, e\u0301l observo\u0301 varios cactus en el horizonte. Adema\u0301s de correr por su vida no teni\u0301a nada mejor que hacer, asi\u0301 que se aprendio\u0301 las alturas de los cactus. Posteriormente, en la seguridad de una cueva, se hizo varias preguntas como \u00bfcua\u0301l es la altura del cactus ma\u0301s alto en el horizonte? \u00bfcua\u0301l es la altura del tercer cactus ma\u0301s alto en el horizonte? Ayuda a John Carter a salir de la duda.",
    "input": "Un entero N seguido de las N alturas H_ 1, . . . , H_ N de los cactus en el horizonte. Posteriormente un entero P seguido de las P preguntas Q_ 1, . . . . , Q_ P, donde la pregunta Q_ J se lee \u00bfcua\u0301l es la altura del Q_ J cactus ma\u0301s alto en el horizonte? Puedes suponer que 1 le; N, P le; 1, 000, 000, que 1 le; H_ I le; 1, 000, 000, 000, que 1 le; Q_ J le; N y que las alturas de todos los cactus son distintas.",
    "output": "Salida: Las P alturas que responden a las preguntas dadas.",
    "note": "",
    "topics": [
      "binary search",
      "implementation",
      "sortings"
    ],
    "id": 2370
  },
  {
    "title": "La leche",
    "url": "https://omegaup.com/arena/problem/LaLeche",
    "history": "Como empacar leche es un negocio de tan bajo margen de ganancia, es importante mantener el precio de la materia prima ( leche) tan bajo como sea posible. Ayude a Felices Hacedores de Leche a obtener la leche que ellos necesitan de la manera m aacute; sbarata posible. La compa ntilde; ia Felices Hacedores de Leche tiene varios granjeros a los cuales ellospueden comprar leche, y cada uno tiene un precio ( potencialmente) diferente con elcual eacute; l vende a la planta envasadora de leche. A uacute; n m aacute; s, como las vacassolo pueden producir una cantidad limitada en un d iacute; a, los granjeros solotienen una cantidad limitada de leche para vender por d iacute; a. Cada d iacute; a, Felices Hacedores de Leche puede comprar una cantidad entera de lechede cada granja, menor o igual al l iacute; mite de la granja. Dado el requerimiento diario de Felices Hacedores de Leche, junto con elcosto por gal oacute; n y la cantidad disponible de leche para cada granja, calcule lacantidad m iacute; nima de dinero que se necesita para cumplir los requerimientos de FelicesHacedores de Leche. Nota: El total de la leche producida por d iacute; a por los granjeros ser aacute; suficientepara cumplir las demandas de los Hacedores Felices de Leche. # # # FORMATO DE ENTRADALa primer linea sera un numero con el total de casos de prueba. Cada caso de prueba se define de la siguiente manera: < / p> < b> L iacute; nea 1: < / b> : Dos enteros, N y M. < br> El primer valor, N, ( 0 le; N le; 2, 000, 000) es la cantidad de leche que Hacedores Felices de Lechequiere por d iacute; a. El segundo, M, ( 0 le; M le; 5, 000) es el n uacute; mero de granjeros a los cuales les pueden comprar. L iacute; neas 2 a M+ 1: < / b> : Las siguientes M l iacute; neas contienen dos enteros, P< sub> i< / sub> y A< sub> i< / sub> . < br> P< sub> i< / sub> ( 0 le; P< sub> i< / sub> le; 1, 000) es el precio en centavosque el granjero i cobra. < br> A< sub> i< / sub> ( 0 le; Ai le; 2, 000, 000) es la cantidad de lecheque el granjero i puede vender a Felices Hacedores de Leche por d iacute; a. # # # FORMATO DE SALIDAUna sola l iacute; nea con un solo entero que es la m iacute; nima cantidad de dinero con el queFelices Hacedores de Leche puede comprar su leche para un d iacute; a| | input1100 55 209 403 108 806 30| | output630| | end< h4> Fuente: USACO Training< / h4>",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "math"
    ],
    "id": 2210
  },
  {
    "title": "Limocargas ",
    "url": "https://omegaup.com/arena/problem/Limocargas",
    "history": "Cada limogochi pose una carga limocarga ( algo equivalente a electrocarga) u\u0301nica en su ge\u0301nero y es sabido que cuando dos limogochis se saludan, se libera una limocarga igual a la diferencia absoluta de sus limocargas. Esto es, si dos limogochis tienen cargas 5 y 7 entonces la carga liberada es | 5 - 7 | = | - 2 | = 2. Los limogochis suelen migrar cada an\u0303o para el ritual de saludos. Ellos se juntan en el lugar de siempre y cuando todos han llegado, cada limogochi comienzan a saludar a los dema\u0301s, sin saludar mas de una vez a un mismo limogochi, hasta que cada par de limogochis se haya saludado mutuamente. Lamentablemente, este ritual genera demasiada limocargas en la atmo\u0301sfera y resulta peligroso para la supervivencia de las otras especies del planeta. Por ello, se ha determinado capturar un limogochi de tal modo que minimize la cantidad total de limocargas. ProblemaDada la cantidad de limogochis y sus cargas. Encontrar la suma mi\u0301nima de limocargas que se puede generar en el ritual de saludos considerando que un limogochi fue capturado.",
    "input": "\u2014\u2014- En la primer li\u0301nea esta un entero C que indica el numero de casos. En la primera li\u0301nea de cada caso viene un u\u0301nico entero 0 < n < 30000 que especifica la cantidad de limogochis. En las segunda li\u0301nea vienen n enteros - 200000 < x1, x2, . . . xi, . . . , xn < 200000 separados por un espacio, donde xi representa la carga del limogochi enumerado con el i\u0301ndice i. Observa que el primer limogochi esta enumerado con el indice 1, el segundo con el 2, etcetera.",
    "output": "\u2014\u2014Un u\u0301nico entero que representa la suma mi\u0301nima de limocargas que se puede generar por los limogochis considerando que uno de ellos fue capturado.",
    "note": "",
    "topics": [
      "sortings",
      "combinatorics"
    ],
    "id": 2197
  },
  {
    "title": "Toxicity",
    "url": "https://omegaup.com/arena/problem/Toxicity",
    "history": "More wood for the fires, loud neighborsFlashlight reveries caught in the headlights of a truckEating seeds as a pastime activityThe toxicity of our city, of our city* * \u2014 System of a Down, Toxicity* * ! [ ejemplo] ( img/ toxicity. png) Ocurrio\u0301 un accidente en una planta que trabaja con qui\u0301micos peligrosos y ahora varias zonas de la ciudad donde habitas esta\u0301n cubiertas por desechos to\u0301xicos. Tu\u0301, como asistente personal al alcalde de la ciudad, quieres ayudar a las labores de contencio\u0301n del accidente. Una vez que los habitantes de las zonas afectadas han sido evacuados, se necesita construir un cerco de contencio\u0301n hecho de plomo y concreto alrededor de los puntos contaminados para evitar que la contaminacio\u0301n se siga esparciendo. Obviamente, la gente de la ciudad no esta\u0301 muy contenta con que se construyan muros de contencio\u0301n, pues obstruira\u0301 el acceso a sus casas o trabajos, asi\u0301 que tu misio\u0301n es garantizar la seguridad de la ciudad minimizando el a\u0301rea encerrada. Existen algunos requisitos que la ciudad ha puesto para poder construir los muros, asi\u0301 que tienes que tomarlos en consideracio\u0301n: - Por cuestiones de urbanismo y para no destrozar ningu\u0301n edificio, los muros estara\u0301n construidos sobre las banquetas de las calles, dispuestas en forma cuadricular- Para simplificar el proceso de construccio\u0301n, los muros sera\u0301n rectangulares. - Solo se tiene presupuesto para construir dos recta\u0301ngulos para encerrar las a\u0301reas afectadas- Los recta\u0301ngulos no se deben intersectar. Esto es, ninguna manzana puede estar encerrada por ma\u0301s de un recta\u0301ngulo",
    "input": "\u2014\u2013La primer li\u0301nea de la entrada contiene un u\u0301nico nu\u0301mero, * N* ( 1 \u2264 * N* \u2264 30) , el nu\u0301mero de casos de prueba que siguen. Cada caso contiene un entero * n* ( 2 \u2264 * n* \u2264 20, 000) , seguido de * n* li\u0301neas. Cada li\u0301nea contiene dos enteros * x* y * y* ( 0 \u2264 * x* , * y* \u2264 32, 000) separados por un espacio, que indican las coordenadas de la manzana donde se encuentra un edificio dan\u0303ado que debe ser cercado. Puede haber ma\u0301s de un edificio dan\u0303ado por manzana.",
    "output": "\u2014\u2014Para cada caso, debes imprimir una li\u0301nea \" Caso * c* : * n* \" , siendo * c* el nu\u0301mero secuencial del caso y * n* el menor nu\u0301mero posible de manzanas encerradas, tal que usando dos recta\u0301ngulos disjuntos, puedas encerrar todos los edificios dan\u0303ados. Sample Input/ Output\u2014\u2014\u2014\u2014\u2014\u2014- | | input271 53 33 55 16 55 13 281 12 13 14 11 42 43 44 4| | outputCaso 1: 15Caso 2: 8| | end",
    "note": "",
    "topics": [
      "dp",
      "sortings"
    ],
    "id": 2188
  },
  {
    "title": "Modas",
    "url": "https://omegaup.com/arena/problem/Modas",
    "history": "Como cualquier otro adolescente, las vacas adolescentes ocasionalmente se sobrepasan con las modas. Algunas veces es un hula hula, una piedra mascota, otras veces es Pokemon, Rick Astley, o tatuajes tribales en sus ubres. Matema\u0301ticamente, sabemos que una moda tiene un nivel de atraccio\u0301n inicial L. La vaca i tiene una resistencia R_ i que dice cuanto ella puede evitar una moda antes de tener otra alternativa distinta a la de participar. Cuando el nivel de atraccio\u0301n de una moda alcance o exceda la resistencia de una vaca, entonces la vaca querra\u0301 participar de la moda. Cada vaca que participe en una moda aumenta ( a trave\u0301s de presio\u0301n colectiva) el nivel de atraccio\u0301n de esa moda por algu\u0301n valor K. # ProblemaDada una poblacio\u0301n de N vacas, determine cua\u0301ntas vacas participaran en una moda.",
    "input": "* Li\u0301nea 1: Tres enteros separados por espacios: N, L, y K* Li\u0301neas 2. . N+ 1: La li\u0301nea i+ 1 contiene un solo entero que es la resistencia a modas de la vaca i: R_ i",
    "output": "* Li\u0301nea 1: Un solo entero que es el nu\u0301mero de vacas que participan finalmente de la moda.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 2128
  },
  {
    "title": "Pollero pollos",
    "url": "https://omegaup.com/arena/problem/Pollero-pollos",
    "history": "# DESCRIPCIONComo es el pollero es una persona que vende pollos y estos los transporta en bolsas y solo se le permite meter 2 pollos, desgraciadamente solo tiene una bolsa, para que dos pollos puedan entrar en una bolsa se requiere que la suma de sus longitudes no sea mayor a la longitud de la bolsa, dos o ma\u0301s pollos pueden tener la misma longitud. # PROBLEMASe te pide que hagas un programa que diga cuantos pares de pollos pueden entrar en una bolsa.",
    "input": "En la primera li\u0301nea hay 2 nu\u0301meros enteros el primer nu\u0301mero N indica el nu\u0301mero de pollos que se tiene el pollero este nu\u0301mero puede ir desde el valor de 2 hasta el valor de 20, 000 y el segundo nu\u0301mero el taman\u0303o de la bolsa, en las siguientes N li\u0301neas esta\u0301n las longitudes de los pollos. Las longitud de los pollos vari\u0301a de desde 1 hasta 1, 000, 000. La bolsa siempre medira\u0301 menos de 10, 000, 000.",
    "output": "Tu programa debera\u0301 un solo nu\u0301mero entero que contenga la cantidad de parejas de pollos que puede pueden entrar en una bolsa.",
    "note": "",
    "topics": [
      "sortings",
      "trees",
      "binary search",
      "graphs"
    ],
    "id": 2112
  },
  {
    "title": "Help Cupid",
    "url": "https://omegaup.com/arena/problem/Help-Cupid",
    "history": "Cupid\u2019s job is getting harder, so he is adopting new technologies to help himwith his difficult task of matching people into happy couples. He appointed thebest programmers in his staff to a new project called Advanced Couples Matching( ACM) . For this project, the programmers need to produce an algorithm thattakes a set of an even number of N lonely persons and matches them into N/ 2couples, such that each person is in exactly one couple. Sadly, the data available about each person is limited. In this modern world, using gender, ethnicity, age or nationality as criteria to form couples is nota sensible option, so the programmers can only use data about the internetconnection of each candidate. They decided to focus this stage on time zones. People living in closer time zones are more likely to find time to interactwith each other. Thus, the programmers decided to create couples so as tominimize the _ total time difference_ . Each time zone is identified by an integer between - 11 and 12, inclusive, representing its difference in hours from a particular time zone calledCoordinated Universal Time ( or UTC) . The time difference of two people livingin time zones represented by integers i and j is the minimum between | i \u2212j| and 24 - | i - j| . Given a partition of a set of an even number N ofcandidates into N/ 2 couples, its total time difference is the sum of the timedifference of each couple. You are asked to write a program that receives as input the time zones of a setof N candidates. The output of the program must be the minimum total timedifference among all possible partitions of the set into couples.",
    "input": "The first line contains an even integer N ( 2 \u2264 N \u2264 1000) representingthe number of candidates to be coupled. The second line contains N integersT_ 1, T_ 2, . . . , T_ N ( - 11 \u2264 T_ i \u2264 12 for i = 1, 2, . . . , N) indicating the time zones of the candidates.",
    "output": "Output a line with an integer representing the minimum total time differenceamong all possible partitions of the set of candidates into couples. # Examples| | input6- 3 - 10 - 5 11 4 4| | output5| | input2- 6 6| | output12| | input80 0 0 0 0 0 0 0| | output0| | end",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": 2065
  },
  {
    "title": "pb Tri\u00e1ngulo",
    "url": "https://omegaup.com/arena/problem/pb-Triangulo",
    "history": "Un tria\u0301ngulo es formado por 3 segmentos ( con valor entero) de recta unidos por sus extremos, sin embargo no todas las combinaciones de 3 segmentos pueden formar un tria\u0301ngulo. # ProblemaEscriba un programa que dados 3 nu\u0301meros que representan 3 segmentos de rectas, diga si pueden formar un tria\u0301ngulo recta\u0301ngulo.",
    "input": "En la primera li\u0301nea 3 nu\u0301meros \u201ca\u201d, \u201cb\u201d y \u201cc\u201d representando las longitudes de 3 segmentos de recta en un rango de entre 1 y 32, 000.",
    "output": "Una sola li\u0301nea en donde si es posible generar un tria\u0301ngulo recta\u0301ngulo debes imprimir la hipotenusa, el cateto mayor y el cateto menor y si no es posible formar un tria\u0301ngulo recta\u0301ngulo imprime la palabra \u201cimposible\u201d. # ConsideracionesTu programa se evaluara\u0301 con varios casos de prueba, para cada caso de prueba ( entrada) # Ejemplos| | input1 1 1| | outputimposible| | descriptionCaso # 1| | input3 4 5| | output5 4 3| | descriptionCaso # 2| | end# ConsideracionesTu programa se ejecutara con varios casos de prueba. # TipsEl teorema de Pita\u0301goras la hipotenusa es igual a la rai\u0301z cuadrada de la suma de los cuadrados de sus catetos. \u00bfEs necesario hacer el ca\u0301lculo de la rai\u0301z cuadrada?",
    "note": "",
    "topics": [
      "math",
      "sortings",
      "implementation"
    ],
    "id": 1932
  },
  {
    "title": "Cervantino",
    "url": "https://omegaup.com/arena/problem/Cervantino",
    "history": "Continuando con las aventuras de tu vida, fuiste al Cervantino en Guanajuato. Ahi\u0301 habi\u0301a, entre otras, cosas muchos pintores con ideas locachonas de distintas partes del mundo. A uno de estos pintores le gustaban mucho las hojas cuadriculadas de las libretas, por lo que en todas sus pinturas habi\u0301a una cuadricula. * * El artista decidi\u0301a pintar puntitos en las esquinas de los cuadros de la cuadricula. * * Para hacer las pinturas mas abstractas y modernas, el pintor necesitaba que se cumpliera alguna de las siguientes cosas, para cualquier par de puntos en su pintura: * Ambos puntos esta\u0301n en una li\u0301nea de la cuadricula. * Que al construir un recta\u0301ngulo con esquinas en el par de puntos y aristas formadas por las rayitas de la cuadricula, se cumpla que haya al menos otro punto en la pintura. Como te estas muriendo de hambre por falta de dinero, has decidido volverte asistente del pintor. En tu trabajo como asistente el pintor te da una pintura con puntitos y quiere que tu le pongas algunos mas para completarla. El pintor piensa que su pintura se veria mal si tiene mas de 200, 000 puntitos. Utiliza tus habilidades como programador para sobrevivir.",
    "input": "En la primera li\u0301nea N, el nu\u0301mero de puntitos que ya esta\u0301n en la cuadri\u0301cula. En las siguientes N li\u0301neas, las coordenadas x_ i, y_ i de los puntos de la cuadricula. Nunca habra\u0301n dos puntos iguales.",
    "output": "Un numero M, tal que N \u2264 M \u2264 200, 000, que represente el nu\u0301mero final de puntitos en la cuadri\u0301cula. En las siguientes M li\u0301neas, las coordenadas de los puntitos de la pintura final. Recuerda que solo le estas an\u0303adiendo puntos, por lo que todos los puntos de la figura original deben estar ahi. Ningu\u0301n punto en la salida debe repetirse.",
    "note": "",
    "topics": [
      "divide and conquer",
      "sortings"
    ],
    "id": 1895
  },
  {
    "title": " El cofre y la tablilla de lapizl\u00e1zuli",
    "url": "https://omegaup.com/arena/problem/lapizlazuli",
    "history": "Segu\u0301n una antigua leyenda, la historia de Gilgamesh fue escrita en tablillas de lapizla\u0301zuli. En ellas esta\u0301n narradas todas las pruebas que sufrio\u0301 Gilgamesh para volverse el ma\u0301s famoso de los reyes. Segu\u0301n la misma leyenda, las tablillas esta\u0301n guardadas en un cofre de cobre con un cerrojo de bronce. Los cofres esta\u0301 guardado en un templo de Uruk. Por alguna razo\u0301n sabes las dimensiones A \u00d7 B \u00d7 C de una tablilla y deseas saber si e\u0301sta cabe en el cofre de dimensiones X \u00d7 Y \u00d7 Z que tienes frente a ti.",
    "input": "Seis enteros A, B, C, X, Y, Z. Puedes suponer que 1 \u2264 A, B, C, X, Y, Z \u2264 1000.",
    "output": "El entero 1 si la tablilla cabe dentro del cofre o 0 en caso contrario. Considera que puede ser necesario rotar la tablilla.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 1888
  },
  {
    "title": "La destrucci\u00f3n de los gigantes de piedra",
    "url": "https://omegaup.com/arena/problem/gigantes",
    "history": "Durante su bu\u0301squeda del secreto de la vida eterna, Gilgamesh se encuentra con Siduri, la ninfa que vive en medio del mar. Gilgamesh le pregunta co\u0301mo llegar con Utanapi\u0301shtim y ella le responde que la u\u0301nica manera es ir con el barquero Urshanabi\u0301 y sus gigantes de piedra. Sin oi\u0301r ma\u0301s, Gilgamesh se dirige a donde esta\u0301 Urshanabi\u0301 y, al encontrarse con los gigantes de piedra, piensa que sera\u0301n un obsta\u0301culo en su camino y decide destruirlos. Para enfrentarlo, los gigantes se forman en una fila frente a e\u0301l. Como algunos gigantes son ma\u0301s altos que otros, Gilgamesh decide acabarlos uno por uno, comenzando por el ma\u0301s alto que pueda ver desde su posicio\u0301n. Gilgamesh es muy ha\u0301bil y, para destruir un gigante, simplemente tendra\u0301 que lanzar una flecha sin moverse de su posicio\u0301n. Cada gigante destruido se derrumba, permitiendo ver a aquellos otros gigantes que estaban detra\u0301s de e\u0301l. Dadas las alturas de los gigantes y sus nombres, escribe un programa que determine el orden en que los gigantes sera\u0301n destruidos.",
    "input": "Un entero N, que determina el nu\u0301mero de gigantes que Gilgamesh debe destruir, seguido de N li\u0301neas. Cada li\u0301nea estara\u0301 formada de una pareja h_ i, g_ i, donde h_ i representa la altura del gigante i- e\u0301simo y g_ i es el nombre de dicho gigante. Puede suponer que 1 \u2264 N \u2264 1, 000, 1 \u2264 h_ i, \u2264 100 y que el nombre de cada gigante no es ma\u0301s largo que 10 letras mayu\u0301sculas del alfabeto ingle\u0301s.",
    "output": "Debera\u0301 imprimir N li\u0301neas con los nombres de los gigantes en el orden en que fueron destruidos.",
    "note": "",
    "topics": [
      "sortings",
      "strings"
    ],
    "id": 1876
  },
  {
    "title": "Las monta\u00f1as destruidas por Gilgamesh",
    "url": "https://omegaup.com/arena/problem/montanas",
    "history": "Despue\u0301s de la muerte de Endiku, Gilgamesh va a buscar la vida eterna y en su camino se encuentra varias montan\u0303as, entre ellas los picos de Mashu\u0301. E\u0301l sigue dolido de la muerte de Enkidu y se imagina a si\u0301 mismo destruyendo todas las montan\u0303as. E\u0301l las ve de frente, de manera que las ma\u0301s altas tapan a las de atra\u0301s que son ma\u0301s bajas. Gilgamesh piensa destruir primero a la montan\u0303a ma\u0301s alta que vea, lo que posiblemente vuelva visibles a algunas montan\u0303as de atra\u0301s, y asi\u0301 sucesivamente hasta destruir todo. Dadas las alturas y los nombres de las montan\u0303as, determine el orden en que sera\u0301n destrui\u0301das.",
    "input": "Un entero N, que determina el nu\u0301mero de montan\u0303as que Gilgamesh debe destruir, seguido de N li\u0301neas. Cada li\u0301nea estara\u0301 formada de una pareja h_ i, s_ i, donde h_ i representa la altura de la montan\u0303a i- e\u0301sima y s_ i el nombre de dicha montan\u0303a. La primera li\u0301nea representa a la montan\u0303a que se encuentra ma\u0301s al frente y la u\u0301ltima li\u0301nea a la que se encuentra al final. Puede suponer que 1 \u2264 N \u2264 1, 000, que 1 \u2264 h_ i, \u2264 100 y que el nombre de cada montan\u0303a no es ma\u0301s largo que 10 letras mayu\u0301sculas del alfabeto ingle\u0301s.",
    "output": "Debera\u0301 imprimir N li\u0301neas con los nombres de las montan\u0303as en el orden en que fueron destrui\u0301das.",
    "note": "",
    "topics": [
      "sortings",
      "strings"
    ],
    "id": 1870
  },
  {
    "title": "Los ratones de Uruk",
    "url": "https://omegaup.com/arena/problem/Los-ratones-de-Uruk",
    "history": "Antes de la llegada de Gilgamesh a Uruk, la ciudad era constantemente asediada por sus enemigos y estaba al borde de la destruccio\u0301n. Las deidades de Uruk, lejos de querer compartir el mismo destino que la ciudad, se transformaron en ratones y huyeron a sus agujeros. Al momento de transformarse, los ratones se encontraban en una hilera y los agujeros tambie\u0301n, pero del otro lado de la calle. El rato\u0301n de ma\u0301s a la izquierda prosiguio\u0301 a refugiarse en el agujero desocupado de ma\u0301s a la izquierda, y asi\u0301 sucesivamente hasta que todos los ratones se escondieron. Dados los nombres de los ratones, los nombres de los agujeros y las posiciones de todos ellos en sus respectivas hileras, determina que\u0301 rato\u0301n se refugio\u0301 en que\u0301 agujero.",
    "input": "Un entero r seguido de r parejas ( nombre, posicio\u0301n) correspondientes a los r ratones y un entero h seguido de h parejas ( nombre, posicio\u0301n) correspondientes a los h agujeros. Puedes suponer que 1 le; r le; h le; 100000. Los nombres contendra\u0301n letras minu\u0301sculas ( a lo ma\u0301s 30) , no hay nombres ni posiciones repetidas por hilera y las posiciones esta\u0301n en el intervalo [ 1, 1000000000] con p1 < p2 si p1 esta\u0301 a la izquierda de p2.",
    "output": "Las r parejas ( nombre- rato\u0301n, nombre- agujero) que denotan que\u0301 rato\u0301n se escondio\u0301 en que\u0301 agujero. La lista debe imprimirse segu\u0301n el orden de los ratones de izquierda a derecha.",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 1805
  },
  {
    "title": "Los remos faltantes de Urshanab\u00ed",
    "url": "https://omegaup.com/arena/problem/remos",
    "history": "El u\u0301ltimo obsta\u0301culo de Gilgamesh para visitar a Utanapi\u0301shtim era cruzarlas aguas de la muerte y el u\u0301nico que lo podi\u0301a ayudar era el barquero Urshanabi\u0301. E\u0301ste le pidio\u0301 a Gilgamesh que fuera al bosque a cortar R a\u0301rboles parahacer los R remos que le faltaban. Como Gilgamesh estaba cansado, queri\u0301acaminar lo menos posible para traer uno por uno los a\u0301rboles necesarios. Escribeun programa que, dadas las coordenadas de N a\u0301rboles, calcule la mi\u0301nimadistancia D que debe caminar Gilgamesh desde el origen. Gilgamesh so\u0301lo puede cargar un a\u0301rbol a la vez.",
    "input": "Dos enteros N y R, seguidos de N parejas de enteros X_ i, Y_ i que son lascoordenadas ( X_ i, Y_ i) del a\u0301rbol i.",
    "output": "El valor de D ( redondeado al entero ma\u0301s cercano) .",
    "note": "",
    "topics": [
      "geometry",
      "sortings"
    ],
    "id": 1746
  },
  {
    "title": "Cr\u00e1teres",
    "url": "https://omegaup.com/arena/problem/crateres",
    "history": "En un intento por hacer que el hombre vuelva a la luna, el COMI ( Comite\u0301 Mexicano Interespacial) ha decidido instalar un centro de investigacio\u0301n en ella. Para esto envio\u0301 a Nanobot, un pequen\u0303o robot explorador, a determinar cua\u0301l es el mejor lugar para construirlo. El objetivo del COMI es instalar el centro en el fondo de un cra\u0301ter para analizar sus rocas y, por supuesto, quiere instalarlo en el cra\u0301ter en donde haya ma\u0301s rocas. Desafortunadamente, durante el regreso de Nanobot a la Tierra, algunos datos se han perdido debido a causas desconocidas, sin embargo en la memoria del pequen\u0303o robot se conservan los mapas que este trazo\u0301 en su recorrido por la superficie lunar. Los mapas lunares se encuentran representados en matrices de F x C kilo\u0301metros, en donde cada celda representa un kilo\u0301metro cuadrado. En estos mapas los cra\u0301teres se muestran como nu\u0301meros enteros indicando la cantidad de rocas que Nanobot encontro\u0301 en ese kilo\u0301metro cuadrado. El resto de la superficie ( es decir, el espacio sin cra\u0301teres) ha sido rellenado con 0. El pequen\u0303o robot ha numerado los cra\u0301teres de 1 a N, siguiendo un estricto orden de izquierda a derecha y de arriba abajo, esto es, los cra\u0301teres que este\u0301n ma\u0301s a la izquierda sera\u0301n los primeros en ser numerados. Si dos cra\u0301teres comienzan en la misma columna, el que este\u0301 ma\u0301s arriba en esa columna tendra\u0301 prioridad. En uno de sus recorridos Nanobot trazo\u0301 un mapa de 7 x 7 kilo\u0301metros cuadrados como el que se muestra debajo. Este mapa cuenta con 3 cra\u0301teres, el primero con 39 rocas, el segundo con 31 y el u\u0301ltimo con 39. ! [ mapa] [ 1] # ProblemaDentro de los datos que se han perdido se encuentra la ubicacio\u0301n donde Nanobot decidio\u0301 seri\u0301a conveniente instalar el centro. Tu tarea consiste en recuperar estos datos a partir de los mapas y decirle al COMI en que\u0301 cra\u0301ter deberi\u0301a ser construida la base, asi\u0301 como el nu\u0301mero de rocas que se han encontrado en e\u0301l.",
    "input": "Li\u0301nea 1: Contiene dos enteros separados por un espacio que representan F y C, las dimensiones del mapa lunar. Siguientes F li\u0301neas: Cada li\u0301nea contiene C enteros separados por un espacio que indican la cantidad de rocas para cada kilo\u0301metro cuadrado del mapa. * * Ejemplo: * * 7 70 0 0 0 0 7 80 1 5 8 0 7 80 3 4 7 0 0 90 2 8 0 0 0 00 0 1 0 5 9 00 0 0 2 1 2 00 3 2 1 6 0 0",
    "output": "Li\u0301nea 1: Dos enteros separados por un espacio representando el nu\u0301mero del cra\u0301ter en que se debera\u0301 instalar el centro de investigacio\u0301n y el nu\u0301mero de rocas que se encontraron en e\u0301l. Si el mapa no contiene ningu\u0301n cra\u0301ter, debera\u0301s escribir 0 en ambos valores. Nota: En caso de haber ma\u0301s de un cra\u0301ter con el nu\u0301mero ma\u0301ximo de rocas debera\u0301s escribir el de menor numeracio\u0301n ( N) . * * Ejemplo: * * 1 39# Li\u0301mites1 \u2264 F, C \u2264 500",
    "note": "",
    "topics": [
      "sortings",
      "math",
      "matrices"
    ],
    "id": 1453
  },
  {
    "title": "Agresivos",
    "url": "https://omegaup.com/arena/problem/agresivos",
    "history": "Una importante compan\u0303i\u0301a acaba de adquirir nuevas instaciones con N cubi\u0301culos para sus programadores, los cubi\u0301culos esta\u0301n ubicados a lo largo de una li\u0301nea recta en posiciones enteras. Sus P programadores son demasiado orgullosos y suelen culpar de sus propios errores a sus compan\u0303eros cercanos. Para prevenir este tipo de hostilidades la empresa quiere asignar los programadores a los cubi\u0301culos de tal manera que la distancia mi\u0301nima entre cualesquiera dos de los programadores sea tan grande como sea posible. # ProblemaEscribe un programa que dado el nu\u0301mero de programadores y la configuracio\u0301n de los cubi\u0301culos, determine co\u0301mo asignar los cubi\u0301culos de manera que la distancia mi\u0301nima sea la mas grande posible.",
    "input": "Li\u0301nea 1: Dos enteros separados por un espacio indicando N y P respectivamente. Siguientes N li\u0301neas. Cada li\u0301nea representara\u0301 la posicio\u0301n de un cubi\u0301culo y contendra\u0301 un u\u0301nico entero.",
    "output": "Li\u0301nea 1: Un entero indicando la distancia mi\u0301nima mas grande.",
    "note": "",
    "topics": [
      "binary search",
      "sortings"
    ],
    "id": 1382
  },
  {
    "title": "Nieves y el merge-sort",
    "url": "https://omegaup.com/arena/problem/Nieves-y-el-merge-sort",
    "history": "# Nieves ( el viejo) y el Merge- SortEl merge- sort es un algoritmo que ordena, ya sea creciente o decreciente, un arreglo. La idea viene de partir el arreglo a ordenar en 2 subarreglos del mismo taman\u0303o, ordenarlos y luego unir estos 2 subarreglos de tal forma que el arreglo unido siga ordenado. Para unir e\u0301stos dos subarreglos se mete cada uno en una cola( * ) , se va comparando cada elemento inicial de las 2 colas, se decide cual es el menor ( o mayor) y se agrega dicho elemento al arreglo ordenado ( y se elimina el elemento de la cola corespondiente) . Esto se hace hasta que no queden elementos en las colas. Para ordenar los subarreglos se puede usar, recursivamente, el merge- sort. La recursio\u0301n acaba cuando se llega a subarreglos triviales ( de taman\u0303o 1) . Un ejemplo: < br> ( 8 7 6 5 4 3 2 1) emsp; emsp; < - arreglo a ordenar< br> ( 8 7 6 5) \u2013 ( 4 3 2 1) emsp; < - subarreglos< br> ( 5 6 7 8) \u2013 ( 1 2 3 4) emsp; < - se ordenan ( recursion) y se meten a sus respectivas colas, donde los primero elementos a comparar sera\u0301n el ( 5) y el ( 1) , por lo tanto se va a escoger el elemento ( 1) ; luego el ( 5) con el ( 2) , luego el ( 5) con el ( 3) . . . quedando: < br> ( 1 2 3 4 5 6 7 8) Nieves ( el viejo) , despue\u0301s de tantos an\u0303os sin programar, decidio implementar e\u0301ste algoritmo para ordenar un arreglo de manera creciente. Sin embargo cometio\u0301 un error a la hora de meter los subarreglos ordenados a las colas: El subarreglo izquierdo si lo metio\u0301 a una cola, sin embargo el subarreglo derecho lo metio\u0301 a una pila( * * ) . El resto del algoritmo lo siguio\u0301 al pie de la letra. < br> < br> Usando el mismo ejemplo, a la hora de unir los subarreglos, se comparari\u0301a el elemento ( 5) con el elemento ( 4) ; luego el elemento ( 5) con el ( 3) , luego el ( 5) con el ( 2) . . . quedando: < br> ( 4 3 2 1 5 6 7 8) < br> Tu labor sera\u0301 imitar el co\u0301digo de Nieves para ayudarle en un futuro no muy lejano. < br> ( * * * * ) La cola es una estructura de datos llamada FIFO = First In First Out ( primero en llegar, primero en salir) . < br> ( * * * * * ) La pila es una estructura de datos llamada FILO = First In Last Out ( primero en llegar, u\u0301ltimo en salir) .",
    "input": "Primera li\u0301nea: n Cantidad de elementos a ordenar. Segunda li\u0301nea: x_ 1 x_ 2 . . . x_ n Los n elementos a ordenar separados por un espacio.",
    "output": "Los n nu\u0301mero separados por un espacio y ordenados segu\u0301n el algoritmo de Nieves.",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "data structures"
    ],
    "id": 1342
  },
  {
    "title": "Suma Manhattan",
    "url": "https://omegaup.com/arena/problem/Suma-Manhattan",
    "history": "Dada una lista S de N puntos en el plano cartesiano, calcula la suma de las distancias Manhattan entre todaslas parejas posibles de puntos. En otras palabras, calcula el valor de la siguiente expresio\u0301n: \u2211_ 0 \u2264 i < j < N manhattan( S_ i, S_ j) . Recuerda que la distancia Manhattan entre dos puntosmanhattan( ( p_ 1, p_ 2) , ( q_ 1, q_ 2) ) es | p_ 1 - q_ 1| + | p_ 2 - q_ 2| , donde | x| representa el valor absoluto de x.",
    "input": "En la primer li\u0301nea un entero, N, la cantidad de puntos. En las siguientes N li\u0301neas, dos enteros representando las coordenadas de un punto.",
    "output": "Un so\u0301lo entero: el resultado de evaluar la expresio\u0301n requerida. Imprime el resultado mo\u0301dulo 1, 000, 000, 007 ( 10^ 9 + 7) .",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "math"
    ],
    "id": 1300
  },
  {
    "title": "Consecutivos",
    "url": "https://omegaup.com/arena/problem/Consecutivos",
    "history": "Dado un conjunto de 1< = N< = 1000 elementos enteros, determina si despue\u0301s de ordenarse forman un conjunto de nu\u0301meros consecutivos. Imprime SI cuando se trate de un conjunto de nu\u0301meros consecutivos, NO en caso contrario.",
    "input": "En la primera li\u0301nea el entero N. En la segunda li\u0301nea y separados por un espacio, los N datos enteros.",
    "output": "Imprime SI, si el conjunto esta\u0301 formado por nu\u0301meros consecutivos, NO en caso contrario.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 1291
  },
  {
    "title": "Conjunto Permutado",
    "url": "https://omegaup.com/arena/problem/Conjunto-Permutado",
    "history": "Dados dos conjuntos A y B de 1 \u2264 N \u2264 1000 elementos enteros cada uno, determina si A es una permutacio\u0301n de B, es decir, si A tiene los mismos elementos que B ( aunque este\u0301n en distinto orden) .",
    "input": "En la primera li\u0301nea el entero N que denota el nu\u0301mero de elementos en cada conjunto. En la segunda li\u0301nea, los N enteros del conjunto A separados por espacios. En la tercera li\u0301nea, los N enteros del conjunto B separados por espacios.",
    "output": "Imprime SI ( con mayu\u0301sculas) si A es una permutacio\u0301n de B, o NO, en caso contrario.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 1246
  },
  {
    "title": "Mediana",
    "url": "https://omegaup.com/arena/problem/Mediana",
    "history": "Dado un conjunto de N elementos enteros, Determina su mediana. La mediana de un conjunto de datos, es el dato que queda justo enmedio despue\u0301s de ordenarlos, si el conjunto tiene un nu\u0301mero par de elementos, entonces la mediana se calcula promediando los dos datos de en medio. Por ejemplo: Sea N= 5Datos: 2 5 1 7 3Datos Ordenados: 1 2 3 5 7Salida: 3. 0Sea N= 6Datos: 4 9 6 2 3 5Datos Ordenados: 2 3 4 5 6 9Salida: 4. 5",
    "input": "64 9 6 2 3 5| | output",
    "output": "4. 5| | end",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "math"
    ],
    "id": 1230
  },
  {
    "title": "Ordenar",
    "url": "https://omegaup.com/arena/problem/Ordenar",
    "history": "Dado un conjunto de N elementos enteros, orde\u0301nalos en forma creciente e impri\u0301melos.",
    "input": "En la primera li\u0301nea el entero 1< = N< = 100 que denota el nu\u0301mero de datos en el conjunto. En la segunda li\u0301nea y separados por un espacio, los N datos enteros del conjunto.",
    "output": "El conjunto de datos ordenados en forma creciente",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 1229
  },
  {
    "title": "sedes",
    "url": "https://omegaup.com/arena/problem/sedes",
    "history": "Ahora que esta\u0301s en la preseleccio\u0301n de Veracruz, debes prepararte mucho para ser seleccionado. Como parte de este proceso, se deben realizar algunos entrenamientos y de preferencia en varias sedes del estado, por ejemplo Coatzacoalcos, Veracruz, Xalapa, Tuxpan, etc. Puesto que a ti te gusta viajar mucho, quieres asistir a las dos sedes que este\u0301n ma\u0301s lejos entre si\u0301. Suponiendo que todas las sedes se encontraran en li\u0301nea recta, una tras de otra, identifica, cua\u0301l es la distancia ma\u0301s larga que deberi\u0301as recorrer entre dos sedes.",
    "input": "En la primera li\u0301nea el nu\u0301mero n, que indica la cantidad de sedes para este an\u0303o. 1< = n< = 100000. En las siguientes n li\u0301neas un nu\u0301mero indicando la distancia de esa sede con respecto a tu ubicacio\u0301n actual entre 0< = d < = 5000. Supo\u0301n que tu ubicacio\u0301n actual es el inicio de la li\u0301nea recta, por lo que todas las distancias sera\u0301n positivas. Siempre te encuentras en el km 0, y en el ejemplo la primera sede esta\u0301 a 7 kilo\u0301metros de tu ubicacio\u0301n, la segunda a 5, la tercera a 13, y la cuarta a 4 kilo\u0301metros de tu ubicac",
    "output": "Un solo nu\u0301mero con un salto de li\u0301nea, indicando la distancia ma\u0301xima que hay entre dos sedes.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "math"
    ],
    "id": 1102
  },
  {
    "title": "Salchichas",
    "url": "https://omegaup.com/arena/problem/salchichas",
    "history": "Un carnicero tiene que satisfacer los pedidos de N clientes, cada uno de los cuales desea exactamente s_ i salchichas, para i desde 1 hasta N. Si el carnicero tiene T salchichas en total, \u00bfcua\u0301l es la ma\u0301xima cantidad de clientes a los que puede satisfacer? ! [ Ejemplo de salida] ( salchichas. jpg) Por ejemplo, si hay N = 2 clientes que desean s_ 1 = 10 y s_ 2 = 15 salchichas, y el carnicero tiene T = 20 salchichas, solo es posible satisfacer a un cliente.",
    "input": "La primer li\u0301nea contiene el nu\u0301mero N de clientes y la cantidad T de salchichas. La segunda li\u0301nea contiene N valores s_ 1, . . . , s_ n, separados por espacios.",
    "output": "Escribe una li\u0301nea, acabada con salto de li\u0301nea, con la ma\u0301xima cantidad de clientes que es posible satisfacer. # Ejemplos| | input1 108| | output1| | input1 1012| | output0| | input2 104 6| | output2| | input3 106 5 4| | output2| | input10 10018 5 21 7 14 42 17 5 10 12| | output8| | end",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 887
  },
  {
    "title": "Agencia matrimonial",
    "url": "https://omegaup.com/arena/problem/agencia_matrimonial",
    "history": "Una agencia matrimonial tiene n clientes de ambos sexos. Se conoce la edad de todos los clientes ( expresada en la misma unidad para todos, la cual no tiene porque\u0301 ser an\u0303os; podri\u0301an ser meses, di\u0301as, etce\u0301tera) . Los dos encargados de la agencia tienen opiniones diferentes acerca de co\u0301mo deberi\u0301an emparejarse los clientes. Uno piensa que deberi\u0301a minimizarse la suma de las diferencias de edades de cada pareja formada. El otro opina justamente lo contrario, es decir, que deberi\u0301a maximizarse esa suma de diferencias. Escribe un programa que calcule la mi\u0301nima suma posible de diferencias y la ma\u0301xima suma posible de diferencias. Por ejemplo, si n = 2, los hombres tienen edades 25 y 40, y las mujeres tienen edades 20 y 50, entonces so\u0301lo hay dos posibilidades: 25 - 20, 40 \u0096 50 ( con suma total 15) y 40 \u0096 20, 25 \u0096 50 ( con suma total 45) .",
    "input": "La entrada consiste en 1 \u2264 n \u2264 50000, seguido de n nu\u0301meros en una li\u0301nea con las edades de los hombres, seguido de n nu\u0301meros en otra li\u0301nea con las edades de las mujeres.",
    "output": "Escribe una li\u0301nea con dos nu\u0301meros separados por un espacio: La mi\u0301nima suma posible de las diferencias de edades, y la ma\u0301xima suma posible de las diferencias de edades. # Ejemplos| | input225 4020 50| | output15 45| | input465 18 65 2424 20 50 24| | output58 118| | input18058| | output22 22| | end",
    "note": "",
    "topics": [
      "sortings"
    ],
    "id": 842
  },
  {
    "title": "Mezclando Vainas",
    "url": "https://omegaup.com/arena/problem/Mezclando-Vainas",
    "history": "Las Carreras de Vainas eran un deporte muy popular en las zonas menos desarrolladas de la galaxia, como en Tatooine. Se las conoci\u0301a como \" La prueba definitiva de valenti\u0301a y habilidad \" . Era, sin duda alguna, uno de los deportes ma\u0301s peligrosos que se habi\u0301an inventado. Estas carreras no solo eran para entretenimiento, tambie\u0301n las apuestas que se haci\u0301an llegaron a ser tan importantes que, en algunos casos, la economi\u0301a y negocios de esas zonas llegaron a girar en torno a ellas. Las vainas eran pequen\u0303as naves, algunas ma\u0301s que otras, con capacidad para una sola persona. Estaban compuestas por una cabina anti- gravedad propulsadas por uno o ma\u0301s pares de motores de turbinas, conectados a la vaina por largos cables de Steelton, Los motores no estaban conectadas fi\u0301sicamente entre ellos, sino unidos por enlaces de potencia consistentes en emisiones de plasma. La cla\u0301sica de Boonta, es una de las ma\u0301s famosas en Tatooine organizada por Jabba el Hut. Han competido muchos famosos corredores entre ellos Anakin Sky Walker. Para este an\u0303o necesitan tu ayuda en la creacio\u0301n de un programa que proporcione el orden en que las vainas tienen que aparecer en la li\u0301nea de salida ( el orden es de acuerdo con el nu\u0301mero colocado en la vaina) . Hay M hangares donde se almacenan las vainas de carreras. Cada hangar puede guardar hasta de N vainas que esta\u0301n identificadas por un nu\u0301mero. Como las vainas de los M hangares se fusionan para formar una sola li\u0301nea de salida, el programa debe mantener el orden de tal manera que las vainas identificadas con los nu\u0301meros ma\u0301s pequen\u0303os este\u0301n antes en la li\u0301nea de aquellas con nu\u0301meros ma\u0301s grandes. Nota: Algunas vainas pueden compartir el mismo nu\u0301mero, y los nu\u0301meros pueden variar de 1 a N que es el nu\u0301mero ma\u0301ximo de vainas que caben en un hangar.",
    "input": "* En la primera li\u0301nea M y N que son el nu\u0301mero de hangares y el nu\u0301mero de vainas por hangar. * A continuacio\u0301n M li\u0301neas con N nu\u0301meros cada una separados por espacios en blanco que representan las vainas en su hangar.",
    "output": "Una li\u0301nea con la lista total de vainas ordenadas.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 840
  },
  {
    "title": "1 Ordena a los alumnos",
    "url": "https://omegaup.com/arena/problem/1-Ordena-un-arreglo",
    "history": "Los Chicos de la escuela van a recibir un premio, pero tienen que estar formados de la calificacion mayora la menor, ya que el Profe Rayito quiere orden y dar el mejor premio a la mejor calificacion, y asi sucesivamente.",
    "input": "Primero hay que pedir la cantidad de Alumnos y despues las calificaciones",
    "output": "mostrar las calificaciones ordenadas del mayor al menor",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 773
  },
  {
    "title": "Suma de dados",
    "url": "https://omegaup.com/arena/problem/suma_de_dados",
    "history": "Johnny lanza N dados de 6 caras, obteniendo diversos resultados. Encuentra cua\u0301l es la parejade dados lanzados cuya suma sea mi\u0301nima, y la pareja de dados cuya suma sea ma\u0301xima.",
    "input": "Un nu\u0301mero N entre 2 y 100. A continuacio\u0301n, N li\u0301neas con un nu\u0301mero entre 1 y 6 cada una, indicando las puntuaciones de los respectivos N dados.",
    "output": "Escribe dos li\u0301neas con un entero cada una: la suma de la pareja de dados con el resultadoma\u0301s pequen\u0303o, y la suma de la pareja de dados con el resultado ma\u0301s grande. # Ejemplo 1| | input261| | output77| | end# Ejemplo 2| | input43663| | output612| | end",
    "note": "",
    "topics": [
      "sortings",
      "math",
      "implementation"
    ],
    "id": 658
  },
  {
    "title": "ABC",
    "url": "https://omegaup.com/arena/problem/abc",
    "history": "Se te dan tres enteros A, B y C. Los nu\u0301meros no se te dan necesariamente en ese orden, perosi\u0301 sabemos que A es menor que B y B es menor que C. Simplemente, te pedimos que escribas los tres nu\u0301meros en el orden que se te indique.",
    "input": "La primera li\u0301nea contiene tres enteros menores que 100 ( los valores de A, B y C, en un ordencualesquiera) . La segunda li\u0301nea contiene tres letras mayu\u0301sculas ( \u0092A\u0092, \u0092B\u0092 y \u0092C\u0092) representandoel orden deseado.",
    "output": "Escribe una li\u0301nea con los tres nu\u0301meros, en el orden indicado, separados por espacios. # Ejemplos| | input1 5 3ABC| | output1 3 5| | input6 4 2CAB| | output6 2 4| | end",
    "note": "",
    "topics": [
      "sortings",
      "strings",
      "implementation"
    ],
    "id": 642
  },
  {
    "title": "Vestidos",
    "url": "https://omegaup.com/arena/problem/Vestidos",
    "history": "Joana quiere comprarse un vestido para su pro\u0301xima fiesta, asi\u0301 que va a una tienda y escoge los vestidos que ma\u0301s le gustaron. Al no poder decidirse por cual comprar decide crearse un criterio para escoger el mejor, el criterio dice lo siguiente: Evalu\u0301a el vestido con un nu\u0301mero del 1 al 10, donde 1 representa el ma\u0301s feo y 10 el ma\u0301s bonito, ahora fi\u0301jate con cua\u0301nto dinero cuentas para comprar; en base a esto decide cual te conviene comprar. # ProblemaAyuda a Joana a decidir cua\u0301l es el vestido que ma\u0301s le conviene comprar.",
    "input": "En el primer renglo\u0301n dos nu\u0301meros, el primero N que representa la cantidad de vestidos que ma\u0301s le gustaron a Joana y el segundo M la cantidad de dinero con la que cuenta para comprar el vestido. En las siguientes N li\u0301neas dos nu\u0301meros el primero representa que tanto le gusto\u0301 el vestido y el segundo el precio de e\u0301ste.",
    "output": "Un nu\u0301mero que represente el vestido que ma\u0301s le conviene comprar.",
    "note": "",
    "topics": [
      "implementation",
      "sortings"
    ],
    "id": 558
  },
  {
    "title": "Batalla",
    "url": "https://omegaup.com/arena/problem/batalla",
    "history": "Te has propuesto acabar con los malvados planes del Dr. Lira y combatir a su ejercito en una gran batalla. En esta batalla han pactado pelear con el mismo nu\u0301mero de unidades y ambos bandos formara\u0301n sus respectivos eje\u0301rcitos en una li\u0301nea cada uno, con cada una de tus unidades viendo de frente a exactamente uno de los soldados del Dr. Lira. Cada una de estas parejas de soldados que esta\u0301n de frente combatira\u0301. El ma\u0301s fuerte saldra\u0301 victorioso y el ma\u0301s de\u0301bil sera\u0301 capturado. Si dos unidades que se enfrentan son igualmente fuertes, tu unidad sera\u0301 capturada. Tienes informacio\u0301n de inteligencia que te indica el orden que usara\u0301 el Dr. Lira para alinear a su eje\u0301rcito y la fuerza de cada uno de sus elementos. Tu por supuesto conoces la fuerza de tus elementos y tienes que decidir co\u0301mo alinearlos de tal forma que maximizes la suma de las fuerzas de tus unidades que no sera\u0301n capturadas por el malvado Dr. Lira.",
    "input": "La primer li\u0301nea contiene 1 entero, N, que indicara\u0301 el nu\u0301mero de unidades de cada eje\u0301rcito. La segunda li\u0301nea contiene N enteros representando la fuerza da cada uno de tus N soldados. La tercer li\u0301nea contiene tambie\u0301n N enteros, representando la fuerza de los soldados del Dr. Lira y el orden en que los alineara\u0301 en la batalla. La fuerza da cada unidad sera\u0301 un entero entre 1 y 50 inclusive.",
    "output": "Un so\u0301lo entero representando la ma\u0301xima suma de fuerzas de tus soldados no capturados que puedes alcanzar.",
    "note": "",
    "topics": [
      "sortings",
      "implementation"
    ],
    "id": 241
  },
  {
    "title": "Metro",
    "url": "https://omegaup.com/arena/problem/metro",
    "history": "En el mushroom kingdom desean crear una red de li\u0301neas de tren subterra\u0301neo que conecte todo el reino. El mushroom kingdom cuenta con 3< = n< = 30000 estaciones numeradas de 1 a n, las cuales deben conectarse con vi\u0301as. Para ello, se han realizado estudios que permitieron calcular cua\u0301l seri\u0301a el costo 1< = c< = 1000 de conectar la estacio\u0301n i con la estacio\u0301n j ( 1< = i, j< = n, i distinto de j) para 2< = m< = 200000 pares de estaciones i, j. Como se quiere hacer un uso eficiente de los recursos, te han encomendado la creacio\u0301n de un programa que determine cua\u0301l es el costo mi\u0301nimo de unir todas las estaciones, es decir, cua\u0301l es el menor costo posible para construir vi\u0301as que permitan llegar desde cualquier estacio\u0301n a cualquier otra. Debes tomar en cuenta las siguientes consideraciones: 1. Siempre sera\u0301 posible conectar todas las estaciones con los pares i, j dados en la entrada. 2. Si el par i, j aparece en la entrada, no aparecera\u0301 el par j, i ni habra\u0301 repeticiones.",
    "input": "La primera li\u0301nea de la entrada tendra\u0301 2 enteros n y m, el nu\u0301mero de estaciones y el nu\u0301mero de posibles tramos a construir. Las siguientes m li\u0301neas contendra\u0301n la descripcio\u0301n de un posible tramo con 3 enteros i, j y c, donde i y j son las estaciones a conectarse y c es el costo que tendri\u0301a su construccio\u0301n.",
    "output": "Un u\u0301nico nu\u0301mero, el menor costo resultante de conectar todas las estaciones. # Ejemplos| | input4 51 2 12 3 12 4 13 4 24 1 2| | output3| | descriptionLas vi\u0301as construidas seri\u0301an las que conectan los pares ( 1, 2) , ( 2, 3) y ( 2, 4) , que suman un costo de 3| | input6 82 5 63 6 33 1 406 4 21 4 12 6 72 1 202 4 20| | output19| | descriptionLas vi\u0301as construidas seri\u0301an las que conectan los pares ( 2, 5) , ( 3, 6) , ( 6, 4) , ( 1, 4) y ( 2, 6) que suman un costo de 19| | end# Li\u0301mites* 3< = n< = 30000* 2< = m< = 200000",
    "note": "",
    "topics": [
      "greedy",
      "sortings",
      "graphs",
      "dsu"
    ],
    "id": 169
  },
  {
    "title": "Barn",
    "url": "https://omegaup.com/arena/problem/barn",
    "history": "# Separacio\u0301n de EstabloFue una noche oscura y tormentosa que arranco\u0301 el techo y las puertas de las pesebreras donde estaban las vacas del Granjero Juan. Afortunadamente, muchas de las vacas estaban de vacaciones, por lo tanto el establo no estaba totalmente lleno. Las vacas pasan la noche en pesebreras que esta\u0301n dispuestas adyacentes unas a las otras en una li\u0300nea larga. Algunas pesebreras tienen vacas en ellas; otras no. Todas las pesebreras tienen la misma longitud. El Granjero Juan debe erigir ra\u0301pidamente nuevas tablas en la parte frontal de los establos, pues se perdieron las puertas. Su nuevo proveedor de len\u0303a le dara\u0301 tablas de cualquier largo que e\u0301l desee, pero el proveedor puede u\u0301nicamente llevar un pequen\u0303o nu\u0301mero de tablas en total. El granjero Juan quiere minimizar la longitud total de tablas que e\u0301l debe comprar. Dados M ( 1 le; M le; 100 000) , el nu\u0301mero ma\u0301ximo de tablas que pueden ser comprados; S ( 1 le; S le; 100 000 000) , el nu\u0301mero total de pesebreras; C ( 1 le; C le; min( S, 150 000) ) el nu\u0301mero de vacas en las pesebreras y los nu\u0301meros de las C pesebreras ocupadas ( 1 le; nu\u0301mero_ de_ pesebrerale; S) , calcule el mi\u0301nimo nu\u0301mero de pesebreras que deben ser bloqueadas con el fin de bloquear todas las pesebreras que tienen vacas en ellas. Imprima su respuesta como el nu\u0301mero total de pesebreras bloqueadas.",
    "input": "Li\u0301nea 1: M, S, y C ( separados por espacios) Li\u0301neas 2- C+ 1: Cada li\u0300nea contiene un nu\u0301mero, los nu\u0301meros de las pesebreras ocupadas.",
    "output": "Una sola li\u0300nea con un entero que representa el nu\u0301mero total de pesebreras bloqueadas.",
    "note": "",
    "topics": [
      "sortings",
      "math"
    ],
    "id": 15
  }
]