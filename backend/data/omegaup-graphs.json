[
  {
    "title": "1-center problem",
    "url": "https://omegaup.com/arena/problem/1-center-problem",
    "history": "El problema de 1- centro, consiste en, dado un grafo completo ponderado no dirigido G= ( V, E) , encontrar un ve\u0301rtice i\u2208 V cuya distancia al ve\u0301rtice ma\u0301s alejado en V es mi\u0301nima. Es decir, el centro de un grafo se define como: argmin_ i \u2208 V max_ j \u2208 V d( i, j) en donde d( i, j) es la distancia de i a j.",
    "input": "El programa recibira\u0301 como entrada un entero positivo n\u2208Z^ + en la primer li\u0301nea, seguido de otros n^ 2 enteros positivos que representan la matriz de adyacencia del grafo de entrada ( se asume que existe un u\u0301nico centro en el grafo) .",
    "output": "Un u\u0301nico valor que representa el i\u0301ndice del ve\u0301rtice centro. Los ve\u0301rtices esta\u0301n etiquetados iniciando con i\u0301ndice 0.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 16624
  },
  {
    "title": "La cripta",
    "url": "https://omegaup.com/arena/problem/La-cripta",
    "history": "La asociacio\u0301n de exploradores tiene mucho prestigio por encontrar antiguos artefactos y hacer grandes descubrimientos, y desean mantener esta reputacio\u0301n. Acaban de encontrar una cripta que consiste de salas y pasillos, y como hay muchos tesoros dentro, quieren enviar tantos exploradores como sea posible. Aunque hay un problema, y es que la cripta es muy vieja y esta\u0301 en un terrible estado. Cada vez que una persona cruza por un pasillo, se rompe uno de los soportes del pasillo, y si se rompen todos, el pasillo se derrumba ( Si una persona rompe el u\u0301ltimo soporte que queda en un pasillo, esta siempre logra llegar a la pro\u0301xima sala antes de que el pasillo se derrumbe) . Si se supiera que algu\u0301n explorador quedo\u0301 atrapado, la reputacio\u0301n de la asociacio\u0301n estari\u0301a arruinada! Asi\u0301 que quieren tu ayuda para saber cua\u0301l es la ma\u0301xima cantidad de exploradores que pueden enviar, de forma que todos puedan entrar y salir de la cripta. # ProblemaLa cripta consiste de N salas y M pasillos, cada pasillo une dos salas a y b ( los pasillos nunca se intersectan) , y comienza con x soportes. La cripta tiene E salas que sirven de entrada, y S salas que sirven de salida. No puedes salir por una sala de entrada ni entrar por una sala de salida, y una sala nunca servira\u0301 de entrada y de salida al mismo tiempo. Dadas las N salas, M pasillos, las E salas de entrada y las S salas de salida, tienes que encontrar la mayor cantidad de exploradores que pueden entrar por alguna de las salas de entrada, y salir por una de las salas de salida. ( No todos los exploradores tienen que entrar ni salir por donde mismo, pueden usar diferentes entradas y diferentes salidas) .",
    "input": "En la primera li\u0301nea dos enteros N y M, la cantidad de salas y la cantidad de pasillos. En las siguientes M li\u0301neas tres enteros a, b, x, significando que entre la sala a y b hay un pasillo con x soportes. En la siguiente li\u0301nea un entero E, representando la cantidad de entradas que tiene la cripta. En la siguiente li\u0301nea, E enteros, las salas que sirven de entrada. En la siguiente li\u0301nea un entero S, representando la cantidad de salidas que tiene la cripta. En la siguiente li\u0301nea, S enteros, las salas que sirven de salida.",
    "output": "Un solo entero, la ma\u0301xima cantidad de exploradores que pueden entrar a la cripta, de forma que todos puedan salir.",
    "note": "",
    "topics": [
      "graphs",
      "flows"
    ],
    "id": 15566
  },
  {
    "title": "Islas desconocidas",
    "url": "https://omegaup.com/arena/problem/Islas-desconocidas",
    "history": "Te encuentras en un lugar desconocido, rodeado de aguay algunas islas. Tu misio\u0301n es explorar el lugar ycontar cuantas islas existen. El lugar desconocido es un a\u0301rea rectangular de taman\u0303oM \u00d7 N que contiene u\u0301nicamente letras ` W` y ` L` . La letra ` W` representa agua y la letra ` L` representatierra. Una isla es una regio\u0301n de tierra conectadavertical u horizontalmente.",
    "input": "La primer li\u0301nea contiene dos enteros M y N ( 1 \u2264 M, N \u2264 100) , el nu\u0301mero de renglones y de columnas respectivamente del lugar desconocido. Las siguientes M li\u0301neas contienen N caracteres ` W` o ` L` cada una, representando los elementos del lugar desconocido.",
    "output": "Un nu\u0301mero entero, la cantidad de islas que existen en ellugar desconocido.",
    "note": "",
    "topics": [
      "graphs",
      "graph matchings"
    ],
    "id": 15353
  },
  {
    "title": "Personas Famosas",
    "url": "https://omegaup.com/arena/problem/Personas-Famosas",
    "history": "En tu pueblo se denomina a una persona como \" famosa\" si esa persona es conocida por ma\u0301s de la mitad del pueblo. Como nuevo escritor de la revista del pueblo, tu tarea consiste en primero identificar a todas las personas famosas, para luego hacerles una entrevista.",
    "input": "En la primera li\u0301nea el valor de N representando al nu\u0301mero de habitantes del pueblo. Por conveniencia, las personas del pueblo esta\u0301n numeradas del 1 al N. Luego seguira\u0301n N li\u0301neas conformadas por varios nu\u0301meros de la siguiente manera: El primer nu\u0301mero i de cada li\u0301nea corresponde al nu\u0301mero que identifica a esa persona. El segu\u0301ndo nu\u0301mero 0 \u2264 c_ i < N corresponde a la cantidad de personas que la persona i conoce. Luego siguen c_ i nu\u0301meros separados por un espacio, representando a las personas que i conoce. Si una persona i conoce a una persona j, no necesariamente implica que la persona j conoce a i.",
    "output": "Todas las personas famosas del pueblo, una en cada li\u0301nea, ordenadas descendentemente por la cantidad de personas que las conocen. En caso de empates, la persona cuyo nu\u0301mero de identificacio\u0301n sea mayor aparece antes. En caso de no existir ninguna persona famosa, imprimir - 1.",
    "note": "1. Una persona no se puede conocer a si\u0301 mi\u0301smo. 2. Si n es impar de la forma 2k+ 1, entonces se considera famosa si ma\u0301s de k personas la conocen.",
    "topics": [
      "graphs"
    ],
    "id": 14848
  },
  {
    "title": "Carreteras",
    "url": "https://omegaup.com/arena/problem/Carreteras-BF",
    "history": "El semestre en li\u0301nea ha sido muy estresante pero al fin termino, consideras que te mereces unas vacaciones para despejar tu mente y poder descansar tranquilo sin embargo por azares del destino debera\u0301s resolver una ultima tarea antes de poder disfrutar tus vacaciones. En el viaje que vas a realizar tienes que ir de la ciudad 1 ( la ciudad donde vives) a la ciudad N ( tu destino vacacional) , sin embargo existe una gran cantidad de carreteras las cuales puedes tomar para viajar entre ciudades. Estas carreteras tienen un cuota para que puedas pasar por ellas, ademas como hay carreteras que esta\u0301n en un pe\u0301simo estado ( incluso hay rumores de que por ahi\u0301 espantan) , pasar por estas carreteras no te cobrara\u0301n ningu\u0301n centavo, al contrario te pagara\u0301n. Como quieres ahorrar la mayor cantidad de dinero necesitas encontrar cual es el camino ma\u0301s optimo que puedes seguir para llegar de la ciudad 1 a la ciudad N pasando por cualquier carretera las veces que lo desees. Nota que hay casos donde puedes conseguir dinero ilimitado viajando entre carreteras, sin embargo solo te interesa disfrutar de tus vacaciones.",
    "input": "En la primera linea dos nu\u0301meros enteros N y M representando el numero de ciudades y el numero de carreteras respectivamente. En las siguientes M lineas habra\u0301 3 nu\u0301meros enteros, primero u y v que nos dice que hay una carretera para ir desde la ciudad u a la ciudad v ( u = \u0338 v, ademas no habra\u0301 ma\u0301s de una carretera que va de la ciudad u a la ciudad v) y como tercer valor un numero c que representa la cuota que pagas si decides pasar por esa carretera, si este valor es negativo significa que a ti te pagaran.",
    "output": "Imprime la cantidad mi\u0301nima de dinero que debera\u0301s pagar para realizar tu viaje, si esta cantidad se torna en un nu\u0301mero negativo imprime 0, si es imposible llegar a tu destino imprime - 1.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 14396
  },
  {
    "title": "Vamos a la Namekusei",
    "url": "https://omegaup.com/arena/problem/Vamos-a-la-Namekusei",
    "history": "En el pai\u0301s \" Namekusei\" existen 10 casas, numeradas de 0 al 9, y algunas de esas casas esta\u0301n unidas por carreteras. Dadas todas las carreteras que hay en la Namekusei, escribe un programa que imprima todas las casas con la cua\u0301l esta\u0301 conectada directamente una casa. ! [ Texto alternativo] ( imagen1. jpg)",
    "input": "La primera linea sera\u0301 un entero n, indicando la cantidad de carreteras en Namekusei. Las siguientes n li\u0301neas contienen dos nu\u0301meros a y b , indicando que hay una carretera conectando a la casa a con la casa b y viceversa. La siguiente li\u0301nea es una pregunta, que esta\u0301 representada por un numero p. El programa debe imprimir en orden ascendente el numero de todas las casas con la cua\u0301l esta\u0301 conectado p",
    "output": "Imprimir en orden ascendente el numero de todas las casa con la cua\u0301l esta\u0301 conectado p",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "matrices",
      "graph matchings",
      "math"
    ],
    "id": 13925
  },
  {
    "title": "Los corazones de pintura roja",
    "url": "https://omegaup.com/arena/problem/Los-corazones-de-pintura-roja",
    "history": "La Reina habi\u0301a ordenado un jardi\u0301n de N rosas rojas, pero los jardineros se equivocaron y plantaron rosas blancas en su lugar. Para corregir su error, los jardineros decidieron que tomari\u0301an botes de pintura roja para pintar las rosas. Los jardineros corrieron desordenadamente de un lugar a otro con la pintura, tira\u0301ndola ocasionalmente en el camino de una rosa a otra. Justo cuando los jardineros terminaron de pintar las rosas, llego\u0301 la Reina enfurecida de todos modos y exigio\u0301 una explicacio\u0301n del tiradero de pintura. Temiendo por su cabeza, los jardineros le explicaron que las li\u0301neas de pintura roja formaban algunos corazones ( que en realidad eran tria\u0301ngulos: un tria\u0301ngulo esta\u0301 formado por las rosas I, J y K cuando existe un camino de pintura entre la rosa I y la J, otro entre la rosa J y la K y otro entre la rosa K y la I) .",
    "input": "En el primer renglo\u0301n, un entero N. Los siguientes N renglones forman una matriz sime\u0301trica A de N \u00d7 N enteros, donde A_ IJ vale 1 si hay pintura en el camino de la rosa I a la rosa J y vale 0 en caso contrario, para 1 \u2264 I, J \u2264 N. Puedes suponer que 1 \u2264 N \u2264 100 y que pueden existir camino de pintura que no formen parte de ningu\u0301n corazo\u0301n.",
    "output": "La cantidad de corazones ( tria\u0301ngulos) distintos que se pueden formar. Dos tria\u0301ngulos se consideran distintos so\u0301lo si existe un camino de pintura que no es comu\u0301n a ambos.",
    "note": "",
    "topics": [
      "graphs",
      "combinatorics"
    ],
    "id": 12835
  },
  {
    "title": "Ciudadela",
    "url": "https://omegaup.com/arena/problem/Reconectando",
    "history": "Solicite el enunciado de este problema a su profesor. Gracias!",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 12106
  },
  {
    "title": "El Manchado",
    "url": "https://omegaup.com/arena/problem/Lunares",
    "history": "Solicite el enunciado de este problema a su profesor. Gracias!",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 12105
  },
  {
    "title": "Persiguiendo al robot",
    "url": "https://omegaup.com/arena/problem/Persiguiendo-al-robot",
    "history": "# Historia! [ ] ( build. jpg) # ProblemaSe te dara un camino de n lugares con m conexiones, cada conexion tiene cierto costo c_ i. La tarea consiste en dar algu\u0301n camino desde a hasta b talque el costo sea minimo.",
    "input": "Un entero N representando la cantidad de lugares y un entero M la cantidad de conexiones. Se te daran a y b donde a es el lugar origen y b el destino. Seguido se te daran M tripletas de la forma l_ i, r_ i, c_ i. Donde esto representa una conexio\u0301n entre l_ i y r_ i ( puedes ir de l_ i hacia r_ i o vicerversa) con un costo de c_ i.",
    "output": "Un entero n que represente el nu\u0301mero de aristas. Seguido n enteros, de la forma p_ 1, . . . , p_ n donde p_ i es la arista por la que pasas ( en el orden que se te dieron originalmente) . En caso que no se pueda imprimir - 1. # Ejemplos| | input5 41 51 2 93 5 22 5 41 3 4| | output25 2| | descriptionPodemos ver que el problema nos pide ir desde 1 hasta 5. Para hacer esto con el menor costo posible hacemos 1 - > 3 - > 5. Podemos ir de 1 a 3 con coste 4 y de 3 a 5 con coste 2. Como la arista ( 1, 3) es la primera que debemos usar, entonces primero imprimimos esa ( representada con un 5 porque fue la quinta arista que nos dieron) y luego la de 3 a 5. Como son solo 2 aristas fue por eso que al inicio de la salida esta el 2. | | input3 12 31 2 43| | output- 1| | end# Limites- 0 < N < 10^ 5- 0 < M < min( 10^ 6, nlog( n) )",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 11975
  },
  {
    "title": "Los locos que hacen  tick-tocks",
    "url": "https://omegaup.com/arena/problem/Los-locos-que-hacen-tick-tocks",
    "history": "Comienzan los nervios, los futuros competidores estan resolviendo problemas todos los dias ( deberian) para prepararse y dar un buen papel en la olimpiada, pero debido a la situacion actual, los competidores estan cayendo muy bajo, hasta el punto de \" enloquecer\" y comienzan a hacer tick- toks, por lo que el delegado ha decidido poner un examen ( si, un examen como este ) , con el objetivo de salvarlos de la \" locura\" Muchos estudiantes participaran en el examen, todos de diversas escuelas Hay estudiantes numerados del 0 al N- 1 Pero el anfitrion no sabe informacio\u0301n alguna sobre a que\u0301 escuela pertenece cada estudiante. La u\u0301nica informacio\u0301n que tiene es que algunos pares particulares de estudiantes pertenecen a la misma escuela. Tu tarea es calcular de cua\u0301ntas maneras pueden elegir un par de estudiantes tales que no pertenecen a la misma escuela. Supongamos que se tenemos suficientes pares para permitirnos identificar los grupos de estudiantes a pesar de que es posible que no conozca su escuela directamente. Por ejemplo, si 6, 7, 8 son estudiantes de la misma escuela; es suficiente mencionar que ( 6, 7) y ( 7, 8) son pares de estudiantes de la misma escuela y eso fue posible sin proporcionar informacio\u0301n sobre un tercer par ( 6, 8) .",
    "input": "En la primera linea recibiras dos enteros N Y P separados por un solo espacio, Las P lineas recibiras dos enteros, cada una contiene 2 enteros separados por un solo espacio A y B de modo que se cumplen dos condiciones: * 0 \u2264 A, B \u2264 N- 1. * y A y B son estudiantes de la misma escuela.",
    "output": "Un solo entero que denota la cantidad de formas permitidas para elegir un par de estudiantes. | | input5 30 12 30 4| | output6| | descriptiondado que los estudiantes son 0, 1, 2, 3, 4el anfitrion del examen puede emparejar estudiantes de diferentes escuelas de 6 maneras, es decir( 0, 2) , ( 0, 3) , ( 1, 2) , ( 1, 3) , ( 2, 4) , ( 3, 4) . | | end# Limites* 1 \u2264 N \u2264 10^ 5* 1\u2264 P \u2264 10^ 4",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths",
      "combinatorics",
      "dsu",
      "dp",
      "dfs and similar"
    ],
    "id": 10822
  },
  {
    "title": "Mapa del Tesoro",
    "url": "https://omegaup.com/arena/problem/Mapa-del-Tesoro",
    "history": "Illinois Jones encontro\u0301 un mapa mientras exploraba un templo. El mapa detalla un archipie\u0301lago ( un conjunto de islas) en medio del oce\u0301ano Paci\u0301fico. Emocionado se dirige a esta a\u0301rea inexplorada en busca de ma\u0301s tesoros. E\u0301l pretende visitar todas las islas, siempre y cuando e\u0301stas no contengan uno o ma\u0301s lagos en su interior; ya que escucho\u0301 que ahi\u0301 habitan cocodrilos ( a los cuales les tiene una fobia terrible) . El mapa esta\u0301 descrito como una matriz de taman\u0303o nXm compuesta de dos tipos de celdas: 0 para agua y 1 para tierra. Una isla se considera como una o ma\u0301s celdas de tierra adyacentes entre si\u0301. Para la adyacencia, considera las 8 direcciones, incluyendo las diagonales. Un lago se considera como una isla pero de agua, las cuales tienen que estar rodeadas en su totalidad por celdas de tierra ( incluyendo las diagonales) . Asume que el terreno descrito por el mapa esta\u0301 rodeado completamente de agua ( e. g. si el mapa consiste de solo celdas de tierra, hay una isla) . Es posible que existan islas dentro de lagos, lagos dentro de estas islas etc. Determina cuantas islas visitara\u0301 Illinois Jones.",
    "input": "En la primera li\u0301nea 2 enteros, 1\u2264 n, m \u2264 1000 las dimensiones del mapa. Luego siguen n li\u0301neas cada una de m caracteres: ya sea 0 para el agua, o 1 para la tierra.",
    "output": "Imprime un entero, la cantidad de islas en el mapa que no contienen uno o ma\u0301s lagos.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths",
      "dfs and similar"
    ],
    "id": 10781
  },
  {
    "title": "El legado m\u00e1s grande",
    "url": "https://omegaup.com/arena/problem/1er-ccp-abues",
    "history": "Durante la u\u0301ltima fiesta familiar te llamo\u0301 mucho la atencio\u0301n ver que tus abues tambie\u0301n son abues de ma\u0301s nin\u0303as y nin\u0303os. Esto te dio tanta curiosidad que empezaste a ver que\u0301 tantos nietos tuvieron los abuelos de tus papa\u0301s y los abuelos de tus abuelos. Asi\u0301 se te ocurrio\u0301 una genial pregunta que\u0301 contestar: * \" \u00bfQuie\u0301n ha dejado el legado de nietos ma\u0301s grande en la historia de la familia? \" * Despue\u0301s de escuchar tantas historias que te contaron tus papa\u0301s, ti\u0301os, abuelos y viejos amigos de la familia por fin conseguiste la informacio\u0301n necesaria para resolver esta pregunta. So\u0301lo queda la parte ma\u0301s divertida: escribe un programa que procese toda la informacio\u0301n y determine quie\u0301n ha tenido ma\u0301s nietos en la historia de la familia.",
    "input": "- Un entero N, indicando el nu\u0301mero de li\u0301neas. - N li\u0301neas. Cada li\u0301nea tendra\u0301 dos palabras, A y B, que representan una relacio\u0301n entre dos miembros de la familia. - A es el nombre de la hija o hijo. - B es el nombre de la madre o padre. - No hay familiares con nombres repetidos. - En la familia ninguna pareja de padres tiene antepasados en comu\u0301n. Es decir, no existe ninguna pareja de padres que tuvieran el mismo familiar de abuelo, o tatarabuelo, o bisabuelo, etc. - So\u0301lo se consideran nietos los hijos de hijos. - 1 \u2264 N \u2264 1, 200",
    "output": "El nombre del familiar con ma\u0301s nietos en la familia. En dado caso de empate listar los familiares empatados en orden alfabe\u0301tico separados por un espacio. # Ejemplos| | input5YoMerengues MamaLindaMamaLinda AbuelaLinaMamaLinda AbueloTitoTiaTere AbueloTitoPrimaVera TiaTere| | outputAbueloTito| | descriptionEn tanto a nietos AbueloTito tiene 2 ( PrimaVera y YoMerengues) , AbuelaLina tiene 1 ( YoMerengues) , y todos los dema\u0301s tienen 0. Asi\u0301 AbueloTito es quie\u0301n ha tenido ma\u0301s nietos en la historia de la familia. | | input6YoMerengues MamaLindaMamaLinda AbuelaLinaMamaLinda AbueloTitoTiaTere AbueloTitoPrimaVera TiaTereAbueloTito BisabuelaTita| | outputAbueloTito BisabuelaTita| | descriptionLa diferencia con el ejemplo anterior es la incorporacio\u0301n de BisabuelaTita que tiene 2 nietas ( MamaLinda y TiaTere) . La respuesta es empate entre AbueloTito y BisabuelaTita. | | end",
    "note": "",
    "topics": [
      "implementation",
      "graphs",
      "sortings",
      "strings",
      "trees"
    ],
    "id": 10730
  },
  {
    "title": "Y^3 + X^5 = N^7",
    "url": "https://omegaup.com/arena/problem/Y3--X5--N7",
    "history": "# HistoriaUn dia, Sebas estaba leyendo un Tzaloa de la OMM, y se encontro un problema muy dificil: \" Dado un entero N, determina si se cumple la igualdad Y^ 3 + X^ 5 = N^ 7 para algun X, Y entero. \" , cuya solucion no encontro. Tu como buen programador que eres, escribe un codigo que resuelva dicho problema.",
    "input": "Un entero N.",
    "output": "Imprime 1 o - 1 si existen o no dichos enteros respectivamente.",
    "note": "",
    "topics": [
      "dfs and similar",
      "combinatorics",
      "math",
      "constructive algorithms",
      "strings",
      "dp",
      "games",
      "trees",
      "greedy",
      "data structures",
      "implementation",
      "flows",
      "shortest paths",
      "matrices",
      "binary search",
      "number theory",
      "graphs",
      "string suffix structures",
      "meet-in-the-middle",
      "sortings",
      "geometry",
      "brute force",
      "graph matchings"
    ],
    "id": 9724
  },
  {
    "title": "Sumita cuadrada",
    "url": "https://omegaup.com/arena/problem/Sumita-cuadrada",
    "history": "Sebas esta\u0301 en un entrenamiento de matematicas, y le presentaron un problema: \" Demuestra que para toda N existe una suma de N nu\u0301meros tal que su suma sea un cuadrado perfecto. \" , Sebas esta muy ocupado para resolver ese problema, y tu\u0301 como buen programador que eres, te ha pedido que demuestres el problema con \" casitos\" .",
    "input": "Un entero N",
    "output": "Los N nu\u0301meros distintos entre si\u0301 separados por un espacio y ordenados en orden creciente tal que su suma sea un cuadrado perfecto",
    "note": "",
    "topics": [
      "math",
      "dp",
      "graphs",
      "string suffix structures",
      "graph matchings",
      "sortings",
      "number theory",
      "greedy",
      "constructive algorithms",
      "meet-in-the-middle",
      "implementation",
      "trees",
      "dfs and similar",
      "shortest paths",
      "data structures",
      "games",
      "binary search",
      "geometry",
      "matrices",
      "strings",
      "brute force",
      "flows",
      "combinatorics"
    ],
    "id": 9723
  },
  {
    "title": "Panaderia",
    "url": "https://omegaup.com/arena/problem/Panaderia",
    "history": "# DescripcionMasha quiere abrir su propia panaderi\u0301a y hornear muffins en una de las n ciudades numeradas del 1 al n. Hay m caminos bidireccionales, cada uno de los cuales conecta un par de ciudades. Para hornear muffins en su panaderi\u0301a, Masha necesita establecer el suministro de harina de algu\u0301n almacenamiento. Solo hay k almacenes, ubicados en diferentes ciudades numeradas a1, a2, . . . , ak. Desafortunadamente, la ley del pai\u0301s en el que vive Masha prohi\u0301be abrir panaderi\u0301as en cualquiera de las ciudades que tienen almacenaje ubicado en ellas. Solo puede abrirlo en una de las otras n - k ciudades, y, por supuesto, se debe pagar la entrega de harina, por cada kilo\u0301metro de camino entre el almacenamiento y la panaderi\u0301a, Masha deberi\u0301a pagar 1 rublo. Formalmente, Masha pagara\u0301 x rublos, si abre la panaderi\u0301a en alguna ciudad b ( ai = \u0338 b por cada 1 \u2264 i \u2264 k) y elige un almace\u0301n en alguna ciudad s ( s = aj por aproximadamente 1 \u2264 j \u2264 k) y b y s esta\u0301n conectados por algu\u0301n camino de caminos de longitud de resumen x ( si hay ma\u0301s de un camino, Masha puede elegir cua\u0301l de ellos debe usarse) . Masha es muy ahorrativa y racional. Esta\u0301 interesada en una ciudad, donde puede abrir su panaderi\u0301a ( y elegir uno de los k almacenes y uno de los caminos entre la ciudad con panaderi\u0301a y la ciudad con almacenamiento) y pagar la cantidad mi\u0301nima posible de rublos para la entrega de harina. Por favor, ayuda a Masha a encontrar esta cantidad.",
    "input": "La primera li\u0301nea de la entrada contiene tres enteros n, m y k ( 1 \u2264 n, m \u2264 10^ 5, 0 \u2264 k \u2264 n) : la cantidad de ciudades en las que vive Masha, la cantidad de carreteras entre ellas y la cantidad de almacenes de harina respectivamente. Siguen m li\u0301neas. Cada uno de ellos contiene tres enteros u, v y l ( 1 \u2264 u, v \u2264 n, 1 \u2264 l \u2264 10^ 9, u = \u0338 v) , lo que significa que hay una carretera entre las ciudades u y v de una longitud de l kilo\u0301metros.",
    "output": "Si k > 0, entonces la u\u0301ltima li\u0301nea de la entrada contiene k enteros distintos a1, a2, . . . , ak ( 1 \u2264 ai \u2264 n) el nu\u0301mero de ciudades en las que se encuentra el almacenamiento de harina. Si k = 0, entonces esta li\u0301nea no se presenta en la entrada.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 9309
  },
  {
    "title": "Triangulo de amor",
    "url": "https://omegaup.com/arena/problem/Triangulo-de-amor",
    "history": "# DescripcionComo sabes no existen generos en los aviones, pero a cada avion le gusta otro avion, hay n aviones en la tierra enumerados de 1 a n, el avion con el numero i le gusta el avion fi donde 1 \u2264 fi \u2264 n y fi = \u0338 i. Llamamos triangulo del amor cuando a un avion A le gusta B y a B le gusta C y a C le gusta A.",
    "input": "La primera linea contiene un entero n ( 2 \u2264 n \u2264 5000) el cual representa el numero de aviones en la tierra. La siguiente linea contiene n enteros f1, f2, . . . , fn ( 1 \u2264 fi \u2264 n, fi = \u0338 i) lo cual representa para cada avion y el avion que le gusta.",
    "output": "imprimir \" YES\" si existe un triangulo del amor en la tierra, de lo contrario imprimir \" NO\" .",
    "note": "",
    "topics": [
      "implementation",
      "graphs"
    ],
    "id": 9197
  },
  {
    "title": "Uniendo ciudades",
    "url": "https://omegaup.com/arena/problem/Uniendo-ciudades",
    "history": "Estas jugando un juego donde creas ciudades y has decidido poner varias carreteras para unir tus ciudades y para mejorar tu economia. Sin embargo, tienes poco dinero debido a que has puesto muchas refineri\u0301as y quisieras construir las carreteras de tal manera que se puede ir de una ciudad a cualquiera de las otras gastando lo menos posible en carreteras. Cada metro de distancia te cuesta, asi que debes buscar minimizar la distancia acumulada. Se puede asegurar que siempre habra\u0301 una sola configuracio\u0301n ma\u0301s optima que los dema\u0301s.",
    "input": "Un nu\u0301mero * * N* * seguido por * * N* * li\u0301neas con una cuerda ( el nombre de la ciudad sin espacios) , la latitud * * Lt* * y la longitud * * Lg* * de esa ciudad como nu\u0301meros flotantes.",
    "output": "* * M* * li\u0301neas con dos cuerdas, el nombre de la primera y la segunda ciudad unida por cierta carretera. Cada li\u0301nea debe estar ordenada alfabeticamente y las dos cuerdas de cada li\u0301nea tambien deben estar ordenadas alfabeticamente.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 8664
  },
  {
    "title": "Minecraft 2D",
    "url": "https://omegaup.com/arena/problem/Minecraft-2D",
    "history": "\u00a1Steve esta\u0301 atrapado en una cueva y ocupa tu ayuda para escapar antes de que oscurezca! Steve tiene un mapa consigo que le permite ver los bloques que esta\u0301n a su alrededor, y necesita que tu creas un programa que le diga cual es el camino ma\u0301s corto a su casa. El mapa consiste en * * N* * x * * N* * ca\u0301racteres, con el ca\u0301racter X representando la ubicacio\u0301n inicial de Steve, H representando su casa, # indicando una pared y con . marcando un espacio libre.",
    "input": "Un nu\u0301mero * * N* * , seguido por * * N* * li\u0301neas con * * N* * caracteres representando el mapa.",
    "output": "* * M* * comandos indicando como se debe mover Steve para llegar a su casa. Puede ser ARRIBA, ABAJO, IZQUIERDA o DERECHA. Siempre habra\u0301 un solo camino ma\u0301s o\u0301ptimo que los dema\u0301s y siempre se podra\u0301 llegar a la casa.",
    "note": "",
    "topics": [
      "graphs",
      "constructive algorithms",
      "shortest paths",
      "implementation",
      "dfs and similar"
    ],
    "id": 8659
  },
  {
    "title": "Fallas de Whatsapp",
    "url": "https://omegaup.com/arena/problem/Fallas-de-Whatsapp",
    "history": "Whatsapp empezo\u0301 a fallar hace unas horas junto con otras pa\u0301ginas web y te han pedido tu ayuda para reparar los dan\u0303os devastadores antes de que todas las plataformas se consumen. Todos los chats de grupo se han borrado y lo unico que queda son listas de dos amigos que fueron parte de esos grupos. Puedes reconstruir los grupos uniendo todos los amigos que son mutuos. Por ejemplo, si Edgar y Marvin son amigos y Edgar y Miguel ta\u0301mbien son amigos, se puede formar un grupo con estas tres personas.",
    "input": "Un nu\u0301mero * * N* * de amistades, cada amistad tendra dos strings con los nombres de cada persona. Se puede asegurar que un par de personas nunca se repite.",
    "output": "* * M* * li\u0301neas con cada grupo de personas. Se debe ordenar cada miembro de un grupo alfabeticamente por nombre y los grupos deben estar ordenados alfabeticamente entre ellos mismos. # Ejemplos| | input5Pablo JamesEfrain JamesPablo JoseMarvin EdgarEdgar Miguel| | outputEdgar Marvin MiguelEfrain James Jose Pablo| | endAqui\u0301, se imprimio\u0301 el grupo de Edgar, Marvin y Miguel primero porque Edgar viene antes que Efrai\u0301n alfabeticamente. Una gra\u0301fica de los grupos puede ser visto aqui: \u2014\u2014\u2014- ! [ Grupos] [ 1] \u2014\u2014\u2014- # Li\u0301mites1 \u2264 M \u2264 N \u2264 10000",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "strings",
      "sortings",
      "string suffix structures"
    ],
    "id": 8636
  },
  {
    "title": "Aut\u00f3mata celular",
    "url": "https://omegaup.com/arena/problem/Automata-celular",
    "history": "Al hacer una investigacio\u0301n acerca de la auto\u0301mata celular, te has encontrado con el juego de la vida hecho por el matema\u0301tico i\u0301ngles John Conway en 1970. Este juego no es algo que tu \" juegas\" , sino que es una simulacio\u0301n de pequen\u0303as \" ce\u0301lulas\" o pixeles que viven, mueren y reproducen. Al ver el juego en accio\u0301n, te dara\u0301s cuenta que estas ce\u0301lulas tienden a interactuar con otras ce\u0301lulas cercanas para hacer figuras y animaciones extran\u0303as, y despues de muchos turnos estas figuras tienden a desaparecerse o se repiten formando patrones. ! [ Juego de la vida] [ 1] El juego consiste en un arreglo bidimensional de ce\u0301lulas y en cada turno se debe calcular el siguiente estado del juego sin modificar al estado pasado. Curioso de saber ma\u0301s, te pones a leer las reglas: Cada ce\u0301lula depende de las * * 8* * ce\u0301lulas a su alrededor: - Una ce\u0301lula viva con menos de dos vecinos se muere debido a la falta de poblacio\u0301n. - Una ce\u0301lula viva con dos o tres vecinos sigue viva en el siguiente turno. - Una ce\u0301lula viva con ma\u0301s de tres vecinos se muere debido a la sobrepoblacio\u0301n. - Una ce\u0301lula muerta con exactamente tres vecinos vivos se hace viva debido a la reproduccio\u0301n. Al leer ma\u0301s acerca de este juego, te das cuenta que existen ciertas configuraciones iniciales que son cao\u0301ticas o inestables; es decir, si despues de * * N* * turnos no se repite ningun estado o turno del juego, esa configuracio\u0301n es inestable. Has decidido crear un programa para identificar si una configuracio\u0301n inicial del juego de la vida es inestable o no. Adema\u0301s, en caso de llegar a una configuracio\u0301n que se repite o que se desaparece ( todas las ce\u0301lulas se mueren) , quisieras saber despue\u0301s de cuantos turnos pasa esto.",
    "input": "Recibira\u0301s un nu\u0301mero * * N* * , el nu\u0301mero de turnos hasta donde se debe simular. Por ejemplo, si este valor es 5, se debe simular desde el estado 0 ( la inicial) hasta el estado 5. Luego, recibiras * * 8* * li\u0301neas con * * 8* * cara\u0301cteres representando la configuracio\u0301n inicial que deseas probar. Es decir, el taman\u0303o del juego sera\u0301 de * * 8* * x * * 8* * o de 64 espacios. El cara\u0301cter * * # * * representara\u0301 siempre una ce\u0301lula viva y el cara\u0301cter * * . * * siempre representara\u0301 una ce\u0301lula muerta.",
    "output": "- En caso de ser inestable: Se debe imprimir el mapa con la u\u0301ltima configuracio\u0301n utilizando los mismos cara\u0301cteres de la entrada ( # y . ) en * * 8* * li\u0301neas distintas, luego se debe imprimir la palabra * * inestable* * en otra li\u0301nea. - En caso de que se desaparecen o se mueren todas las ce\u0301lulas: Se debe imprimir el mapa vaci\u0301o ( 8 x 8 puntos) y se debe imprimir en otra li\u0301nea * * desaparece despues de K turnos* * donde * * K* * es el nu\u0301mero del turno en el que desaparecen las ultimas ce\u0301lulas. - En caso de que se repiten unos turnos: Se debe imprimir el mapa con el primer estado que se repite y se debe de imprimir en otra li\u0301nea * * repite despues de K turnos* * donde * * K* * es el nu\u0301mero del primer turno que se vuelve a repitir despue\u0301s. # Ejemplos* * Ejemplo # 1: * * La simulacio\u0301n termina despue\u0301s de 1 turno y se determina que la configuracio\u0301n es inestable debido a que no se repitieron turnos. | | input1. . . . . . . . . . . . . . . . . . # # # . . . . . . . # . . . . . . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . | | output. . . . . . . . . . . # . . . . . . . # # . . . . . # . # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . inestable| | end* * Ejemplo # 2: * * La configuracio\u0301n se repite en el turno 0, 2, 4, 6, etc. . . adema\u0301s del 1, 3, 5, 7, etc. . . Se escoge 0 porque es el primer turno que se repite ma\u0301s adelante. | | input200. . . . . . . . . . . . . . . . . . # # # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . | | output. . . . . . . . . . . . . . . . . . # # # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . repite despues de 0 turnos| | end* * Ejemplo # 3: * * La figura expande y desaparece en el turno 25. | | input50. . . . . . . . . . . . . . . . . . . . . . . . . . . . # # . . . . . # # . . . . . . . # . . . . . . . . . . . . . . . . . . . | | output. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . desaparece despues de 25 turnos| | end* * Ejemplo # 4: * * La figura expande y llega a una configuracio\u0301n estable, pero como el li\u0301mite de turnos es 11 no se llega a repitir esta figura porque no se simula el siguiente turno. Si * * N* * fuera 12, se imprimiri\u0301a que se repite en el turno 11. | | input11. . . # . . . . . . # # # . . . . # # # # # . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . | | output. . . . . . . . . . . . . . . . . . . # . . . . . . # . # . . . . . # . # . . . . . . # . . . . . . . . . . . . . . . . . . . . inestable| | end# Li\u0301mites1 \u2264 K \u2264 N \u2264 200",
    "note": "",
    "topics": [
      "constructive algorithms",
      "brute force",
      "implementation",
      "graphs"
    ],
    "id": 8624
  },
  {
    "title": "Aguas termales",
    "url": "https://omegaup.com/arena/problem/Aguas-termales",
    "history": "Despue\u0301s del u\u0301ltimo terremoto en la lejana regio\u0301n de Volcantepec, se descubrieron nuevas fuentes de aguas termales formando pequen\u0303as lagunas en una regio\u0301n en que se pensaba construir un hotel ecolo\u0301gico. La noticia emociono\u0301 a los constructores, que decidieron utilizar las nuevas lagunas como parte de la arquitectura. Los ingenieros dividieron el sitio de construccio\u0301n en una cuadri\u0301cula uniforme de manera que cada celda de la cuadri\u0301cula estuviera cubierta de agua o de tierra. La pregunta que debes contestar es la siguiente: Dada una fila y una columna de la celda, de que\u0301 taman\u0303o es la laguna que la contiene. ( El taman\u0303o se mide por el nu\u0301mero de celdas de agua contiguas. Las celdas diagonales se consideran contiguas. )",
    "input": "El primer renglo\u0301n consiste en do\u0301s nu\u0301meros enteros. El primer nu\u0301mero entero representa la cantidad N de li\u0301neas que forman la cuadri\u0301cula. El segundo nu\u0301mero representa la cantidad M celdas tiene cada li\u0301nea. Las siguientes N li\u0301neas contienen una secuencia de M caracteres \" T\" y \" A\" donde la \" T\" representa que la celda esta\u0301 cubierta por tierra y la \" A\" representa que la celda esta\u0301 cubierta por agua. La u\u0301ltima li\u0301nea contiene dos nu\u0301meros n m que representa la posicio\u0301n en fila y columna desde donde se medira\u0301 el lago.",
    "output": "La frase \" El lago mide C celdas\" donde C es el a\u0301rea del lago.",
    "note": "",
    "topics": [
      "math",
      "graphs",
      "graph matchings",
      "matrices",
      "dfs and similar"
    ],
    "id": 8177
  },
  {
    "title": "Compuertas L\u00f3gicas",
    "url": "https://omegaup.com/arena/problem/Compuertas-Logicas",
    "history": "Bill Gates, Elon Musk y Tony Stark te han patrocinado personalmente con $ 1, 000, 000, 000 USD para que disen\u0303es un programa que prediga el resultado de un conjunto indefinido de compuertas logicas. Deberas buscar las tablas de las siete compuertas logicas * * AND, OR, NOT, NAND, NOR, XOR* * y * * XNOR* * para programar su comportamiento. * * No todas las li\u0301neas tienen la cantidad correcta de pare\u0301ntesis. Debera\u0301n verificar y corregirlas si este es el caso. * *",
    "input": "Una sola li\u0301nea con una cantidad desconocida de operadores. Los operadores pueden ser los siete que son mencionados arriba y los valores * * TRUE* * y * * FALSE* * . Todas estas funciones seran escritas de la siguiente manera: * * XOR* * ( * * TRUE* * , * * FALSE* * ) con dos entradas ( menos * * NOT* * que solo tiene una entrada) . Debes interpretar y obtener el resultado final de la operacio\u0301n.",
    "output": "Un solo valor * * TRUE* * o * * FALSE* * dependiendo de el resultado de la operacio\u0301n",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "math",
      "dfs and similar",
      "implementation"
    ],
    "id": 7851
  },
  {
    "title": "Clausura de carreteras",
    "url": "https://omegaup.com/arena/problem/Clausura-de-carreteras",
    "history": "El gobierno de Nlogonia esta\u0301 dispuesto a reducir la deuda pu\u0301blica del pai\u0301s y entre las medidas que se tomara\u0301n esta\u0301 la clausura de algunas carreteras, ya que e\u0301stas incurren en un alto costo de mantenimiento. Cada carretera conecta dos ciudades distintas y puede navegarse en ambas direcciones. Usando las carreteras actuales es posible llegar de cada ciudad a cualquier otra. El gobierno promete que el impacto de las clausuras sera\u0301 mi\u0301nimo para las vidas de los habitantes de Nlogonia. En particular, el gobierno ha dicho que despue\u0301s de clausurar algunas carreteras, la distancia mi\u0301nima que existira\u0301 de cada ciudad a la capital del pai\u0301s seguira\u0301 siendo la misma que cuando todas las carreteras podi\u0301an usarse. El Departamento de Caminos de Nlogonia te ha encomendado la tarea de, dadas las longitudes y los costos de mantenimiento de cada carretera, determinar cua\u0301les de ellas mantener y cua\u0301les de ellas clausurar de modo que la suma de los costos de mantenimiento de las carreteras a conservar sea mi\u0301nimo.",
    "input": "Dos enteros N y M que denotan la cantidad de ciudades y la cantidad de carreteras que actualmente existen, seguidos de la informacio\u0301n de las M carreteras. Las ciudades esta\u0301n numeradas de 1 a N donde la ciudad 1 es la capital de Nlogonia y cada carretera esta\u0301 descrita por cuatro enteros A, B, L, C donde A, B son las ciudades en los extremos de la carretera, L es la longitud de la carretera y C es su costo de mantenimiento. Puedes suponer que 2 \u2264 N \u2264 10^ 4, 1 \u2264 M \u2264 10^ 5, A = \u0338 B, 1 \u2264 L, C \u2264 10^ 9 y que siempre es posible llegar de cada ciudad a cualquier otra.",
    "output": "Un entero que sea la suma de los costos de las carreteras que deben mantenerse, las cuales deben permitir que la distancia mi\u0301nima de la capital del pai\u0301s a cualquier otra ciudad sea la misma que cuando se podi\u0301an usar todas las carreteras.",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "shortest paths"
    ],
    "id": 7791
  },
  {
    "title": "Aerolinea",
    "url": "https://omegaup.com/arena/problem/aerolinea",
    "history": "Una aeroli\u0301nea tiene una promocio\u0301n especial para sus usuarios. Una persona de entre todos los usuarios podra\u0301 ser seleccionada para elegir una serie de viajes sin costo a trave\u0301s de los pai\u0301ses en los cuales la aeroli\u0301nea opera. Esta persona podra\u0301 trazar su propia ruta sin una restriccio\u0301n ma\u0301s que la intri\u0301nseca, la cual es que so\u0301lo se puede elegir un siguiente destino desde un determinado pai\u0301s, si el determinado pai\u0301s tiene un vuelo hacia el pai\u0301s destino. # ProblemaSuponiendo que las personas que esta\u0301n participando no quieren quedarse en cualquiera de los otros pai\u0301ses, y que quieren volver al final de su viaje a su pai\u0301s original, ayuda a determinar de que\u0301 pai\u0301ses son las personas a las que ma\u0301s les conviene ganar la promocio\u0301n. Se considera que a alguien le conviene ganar la promocio\u0301n si podra\u0301 visitar ma\u0301s pai\u0301ses en su recorrido y al final podra\u0301 regresar a su pai\u0301s original.",
    "input": "En la primera li\u0301nea, un nu\u0301mero natural n indicando la cantidad de pai\u0301ses en los que la aeroli\u0301nea opera. En la segunda li\u0301nea, un nu\u0301mero natural m indicando la cantidad de rutas de vuelo que la aeroli\u0301nea entera puede realizar. En las siguientes m li\u0301neas, dos enteros no negativos representando el origen y el destino del vuelo E_ i = o_ i, d_ i.",
    "output": "Un conjunto de nu\u0301meros enteros no negativos S representando los pai\u0301ses cuyos habitantes usuarios de la aeroli\u0301nea les conviene ma\u0301s ganar la promocio\u0301n. Imprime los nu\u0301meros en orden ascendente.",
    "note": "",
    "topics": [
      "graphs",
      "dfs and similar",
      "trees"
    ],
    "id": 7423
  },
  {
    "title": "Acmar vs Ibmar",
    "url": "https://omegaup.com/arena/problem/Acmar-vs-Ibmar",
    "history": "Acmar e Ibmar esta\u0301n en guerra . Esta\u0301s a cargo de la red de rieles que transporta importantes suministros por todo Acmar durante este periodo tan delicado . La red de rieles esta\u0301 hecha por un conjunto de rieles que se encuentran en varios puntos de unio\u0301n . Ya que no hay un li\u0301mite de de rieles que se pueden encontrar en un punto de unio\u0301n , la red esta\u0301 hecha de tal manera que solo hay un camino entre dos puntos de unio\u0301n . Has intentando que agreguen algunas li\u0301neas redundantes con el objetivo de que hayan dos o ma\u0301s caminos entre los puntos de unio\u0301n , pero debido a la guerra , el presupuesto es limitado . Sin embargo , esto puede cambiar , debido a una terrible noticia que ha llegado mientras trabajabas en Ibmar : en el pro\u0301ximo mes , espi\u0301as enemigos planean destruir algu\u0301n punto de unio\u0301n . Lamentablemente , el punto especi\u0301fico que sera\u0301 destruido es desconocido , pero debido a que conoces bien a tu enemigo , sabes que sin duda alguna van a sabotear la union critica , especi\u0301ficamente , aquella cuya ausencia desconecte el mayor nu\u0301mero de pares de otras uniones en la red . No tienes mucho tiempo para actuar , por lo que debes an\u0303adir solo una li\u0301nea que conecte dos uniones que este\u0301n desconectadas , logrando reducir el nu\u0301mero de pares desconectados por el sabotaje .",
    "input": "La primera li\u0301nea contiene un entero n , indicando el nu\u0301mero de rieles en el sistema . Las siguientes n li\u0301neas sera\u0301n de la forma i_ 1 i_ 2 , indicando que el riel una a las uniones i_ 1 e i_ 2 . Las uniones esta\u0301n numeradas de forma consecutiva empezando en 0 . Todos los rieles son bidireccionales y ningu\u0301n riel aparece ma\u0301s de una vez . Hay exactamente un camino entre dos uniones dadas en la entrada .",
    "output": "Dos valores n_ 1 y n_ 2 , siendo n_ 1 el nu\u0301mero de pares de uniones que sera\u0301n desconectadas cuando el enemigo destruya la union critica , mientras que n_ 2 representa el nu\u0301mero de pares de uniones que continuara\u0301n desconectadas tras an\u0303adir el riel en la mejor posicio\u0301n posible . Nunca habra\u0301 ma\u0301s de una unio\u0301n cri\u0301tica .",
    "note": "",
    "topics": [
      "graphs",
      "dfs and similar"
    ],
    "id": 6964
  },
  {
    "title": "HCF - Haciendo amigos",
    "url": "https://omegaup.com/arena/problem/Haciendo-amigos",
    "history": "Un nuevo ciclo escolar ha comenzado y hay N alumnos nuevos en el salo\u0301n ( numerado de 1 a N) , debido a esto nadie tiene amigos. Conforme van pasando los di\u0301as algunos se vuelven amigos de otros, asi que decides hacer una investigacio\u0301n. Las amistades de los alumnos se comportan de la siguiente manera: - Es bidireccional : Si el alumno A es amigo del alumno B entonces el alumno B tambie\u0301n es amigo del alumno A. - Es transitiva : Si el alumno A es amigo del alumno B y el alumno B es amigo del alumno C, entonces el alumno A tambie\u0301n es amigo del alumno C. El propo\u0301sito de tu investigacio\u0301n es obtener un cierto valor al que llamaremos total. Cada que una nueva amistad es entablada sumas la cantidad de amigos que tiene cada uno de los N alumnos y este resultado lo agregas a totalHara\u0301s Q investigaciones en diferentes escuelas, de cada escuela conoces cuantos alumnos tiene y las relaciones de amistad que se fueron generando a lo largo de los di\u0301as. Para cada escuela debes determinar el valor ma\u0301ximo que puede alcanzar total de entre todos los posibles ordenamientos de las relaciones de amistad. ( Ver caso de ejemplo para ma\u0301s claridad) .",
    "input": "La primera li\u0301nea un entero Q, la cantidad de investigaciones que hara\u0301s. Las siguientes li\u0301neas describen la informacio\u0301n de las escuelas de la siguiente manera: - Primero dos enteros N y M, la cantidad de alumnos nuevos y la cantidad de amistades que se formaron. - En las siguientes M li\u0301neas habra\u0301 dos enteros u y v que significa que el alumno u entablo\u0301 una amistad con el alumno v.",
    "output": "Para cada escuela da como salida el ma\u0301ximo valor de total.",
    "note": "",
    "topics": [
      "dsu",
      "graphs"
    ],
    "id": 6684
  },
  {
    "title": "Divulgando las noticias",
    "url": "https://omegaup.com/arena/problem/Divulgando-las-noticias",
    "history": "Eres muy sociable y cada vez que te enteras de una noticia, se la cuentas a tus amigos al di\u0301a siguiente. Tus amigos tambie\u0301n son muy sociables, por lo que los amigos de tus amigos se enterara\u0301n de la noticia al segundo di\u0301a. Al tercer di\u0301a, los amigos de los amigos de tus amigos tambie\u0301n se enterara\u0301n de la noticia y asi\u0301 sucesivamente. El di\u0301a del * boom* es el di\u0301a en el que ma\u0301s personas se enteran por primera vez de la noticia ( sin contar el di\u0301a en el que la primera persona se entera) . Escribe un programa que calcule cua\u0301ntas personas se enteraron en el di\u0301a del * boom* de la noticia, si las personas en tu comunidad esta\u0301n convenientemente numeradas de 0 a N - 1 y la amistad entre personas no es una relacio\u0301n sime\u0301trica.",
    "input": "Un entero N seguido de N li\u0301neas, donde la i- e\u0301sima li\u0301nea ( comenzando con i = 0) contiene un entero A y una secuencia de A enteros con los i\u0301ndices de los amigos de la i- e\u0301sima persona. Posteriormente un entero K que denota el i\u0301ndice de la persona que origina la noticia. Puedes suponer que 1 \u2264 N \u2264 1000, que 0 \u2264 A \u2264min( N - 1, 10) y que todos los i\u0301ndices esta\u0301n en el rango de 0 a N - 1.",
    "output": "Un entero que sea el nu\u0301mero de personas se enteran por primera vez de la noticia en el di\u0301a * boom* .",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 6631
  },
  {
    "title": "Grafo Tramposo",
    "url": "https://omegaup.com/arena/problem/Grafo-Tramposo",
    "history": "Randy y Briaares son muy buenos amigos. El problema es que, por lo general, a Briaares le encanta molestar a Randy. Es por ello que Briaares decidio\u0301 construir un grafo lleno de trampas, un * * Grafo Tramposo* * . Una vez que Briaares termino\u0301 de elaborar el Grafo Tramposo, le grito\u0301 a Randy: * \" \u00a1Hey, Randy, ven a ver mi grandioso grafo! * solo para despue\u0301s poder patearlo dentro del grafo. Un Grafo Tramposo es un grafo no dirigido con n ve\u0301rtices y m aristas. Cada arista k tiene asignado un rango de enteros l_ k y r_ k ( l_ k\u2264 r_ k) . Para poder salir del Grafo Tramposo, Randy debe escoger inicialmente ( es decir, antes de empezar a moverse) algu\u0301n entero ( llame\u0301mosle x) , entonces Randy debera\u0301 moverse de alguna manera desde el ve\u0301rtice con el nu\u0301mero 1 al ve\u0301rtice con el nu\u0301mero n. Adema\u0301s, Randy puede pasar a trave\u0301s de una arista k so\u0301lo si l_ k\u2264 x\u2264 r_ k. Para hacer el escape ma\u0301s fa\u0301cil, Briaares definio\u0301 la * * lealtad* * de un camino que va desde el 1er ve\u0301rtice hasta el n- e\u0301simo como el nu\u0301mero de enteros x tales que, si Randy escoge algunos de ellos, puede pasar por el camino completo. Ayuda a Randy a encontrar el camino con la ma\u0301xima lealtad y asi\u0301 poder salir del Grafo Tramposo tan ra\u0301pido como sea posible.",
    "input": "La primera li\u0301nea contiene dos enteros n y m ( 2\u2264 n\u2264 10^ 3, 0\u2264 m\u2264 3\u00b7 10^ 3) . Las siguientes m li\u0301neas describen las aristas. Cada li\u0301nea contiene cuatro enteros a_ k, b_ k, l_ k y r_ k ( 1\u2264 a_ k, b_ k\u2264 n, 1\u2264 l_ k\u2264 r_ k\u2264 10^ 6) . Los nu\u0301meros significan que en el Grafo Tramposo, la k- e\u0301sima arista conecta los ve\u0301rtices a_ k y b_ k, y esta arista corresponde al rango de enteros desde l_ k a r_ k. Note que el grafo dado puede contener ciclos y mu\u0301ltiples aristas entre un mismo par de nodos.",
    "output": "En una sola li\u0301nea imprime un entero - la ma\u0301xima lealtad de entre todos los caminos que van del primer ve\u0301rtice al n- e\u0301simo. Si dicho camino no existe, o la ma\u0301xima lealtad es 0, imprime en una sola li\u0301nea \" Oh, vamos! \" , sin comillas.",
    "note": "",
    "topics": [
      "greedy",
      "graphs",
      "binary search",
      "shortest paths"
    ],
    "id": 6213
  },
  {
    "title": "UP Carreteras",
    "url": "https://omegaup.com/arena/problem/UP-Carreteras",
    "history": "# CarreterasEn UPlandia hay 1000 ciudades, numeradas de 0 al 999, y algunas de esas ciudades esta\u0301n unidas por carreteras. Dadas todas las carreteras que hay en UPlandia, escribe un programa que determine si dos ciudades esta\u0301n conectadas directamente por una carretera. # # Entrada y SalidaUn nu\u0301mero n ( 1 \u2264 n \u2264 100000) , indicando la cantidad de carreteras en UPlandia. Las siguientes n li\u0301neas contienen dos nu\u0301meros a y b, indicando que hay una carretera conectando a la ciudad a con la ciudad b y viceversa. La siguient li\u0301nea contiene un nu\u0301mero q ( 1 \u2264 q \u2264 10^ 6) que representa la cantidad de preguntas a contestar. Le siguen q preguntas, cada una representada por dos nu\u0301meros s y e. Por cada pregunta el programa debe imprimir \" YES\" si hay una carretera que conecta s con e. En caso contrario imprimir \" NO\" .",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graph matchings",
      "binary search",
      "graphs",
      "implementation"
    ],
    "id": 6007
  },
  {
    "title": "Fotografiando al fantasma",
    "url": "https://omegaup.com/arena/problem/Fotografiando-al-fantasma",
    "history": "En tu casa vive un fantasma y quieres volverte famoso mostra\u0301ndolo al mundo. Para lograr lo anterior, has invitado a un famoso investigador de lo paranormal para que venga a tomar fotos del fantasma, tarea que seri\u0301a muy difi\u0301cil de no ser porque el fantasma sigue una rutina bien establecida. Justo a las 11: 11 p. m. el fantasma aparece y empieza a teletransportarse entre cuartos de la casa. Cuando el fantasma visita el u\u0301ltimo cuarto de su rutina, desaparece. Ya que llevas muchos an\u0303os viviendo en esa casa, conoces el orden exacto en el que el fantasma visitara\u0301 los cuartos. Tu objetivo sera\u0301 planear el recorrido que le dara\u0301s al investigador para que logre tomar la mayor cantidad de fotos del fantasma. Tu casa esta\u0301 descrita por N cuartos o ve\u0301rtices numerados de 0 a N - 1 y por M aristas o pasillos de doble sentido. Tu posicio\u0301n inicial es el ve\u0301rtice 0 y te toma un minuto moverte por una arista para llegar a otro ve\u0301rtice. El fantasma tarda un minuto en teletransportarse y puedes optar por no cambiar de ve\u0301rtice si sabes que el fantasma llegara\u0301 a donde tu\u0301 esta\u0301s. Escribe un programa que calcule la mayor cantidad de fotos que es posible tomarle al fantasma.",
    "input": "Los enteros N, M seguidos de M parejas de enteros que denotan los ve\u0301rtices unidos por cada una de las M aristas. Posteriormente un entero F seguido de F enteros p_ 0, p_ 1, . . . , p_ F- 1 donde p_ i denota el ve\u0301rtice donde aparecera\u0301 el fantasma al minuto i. Puedes suponer que 0 \u2264 N, F \u2264 1, 000 y 0 \u2264 M \u2264 10, 000.",
    "output": "Un entero que sea la mayor cantidad de fotos que es posible tomarle al fantasma.",
    "note": "",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": 5778
  },
  {
    "title": "Invirtiendo aristas",
    "url": "https://omegaup.com/arena/problem/Invirtiendo-aristas",
    "history": "Tienes una gra\u0301fica simple de N ve\u0301rtices aislados ( numerados de 0 a N - 1) y realizara\u0301s una secuencia de M operaciones sobre ella. Existen dos tipos de operaciones: la operacio\u0301n A I J agrega una arista entre los ve\u0301rtices I y J o la quita si ya existi\u0301a, mientras que la operacio\u0301n V I agrega aristas de I hacia todos los dema\u0301s ve\u0301rtices, quitando las que ya existi\u0301an. Escribe un programa que calcule que\u0301 aristas tiene la gra\u0301fica despue\u0301s de aplicar todas las operaciones.",
    "input": "Los enteros N y M seguidos de una secuencia de M operaciones, una por li\u0301nea. Puedes suponer que 2 \u2264 N \u2264 1000, 0 \u2264 M \u2264 100000 y 0 \u2264 I = \u0338 J \u2264 N - 1.",
    "output": "Para cada arista de la gra\u0301fica resultante, una li\u0301nea con una pareja de enteros que denotan los ve\u0301rtices en los extremos de la arista. Tanto las aristas como los dos extremos de una misma arista pueden imprimirse en cualquier orden.",
    "note": "",
    "topics": [
      "matrices",
      "math",
      "graphs"
    ],
    "id": 5644
  },
  {
    "title": "Esperanza",
    "url": "https://omegaup.com/arena/problem/OMI-2017-Esperanza",
    "history": "# HistoriaRoque el filo\u0301sofo, el malvado archienemigo de los matema\u0301gicos, esta\u0301 preparando un misil para destruir el cuartel de la logia. Para evitarlo han colocado un rastreador en Roque para encontrar la ubicacio\u0301n secreta del misil. Los matema\u0301gicos acaban de recibir la sen\u0303al del rastreador con la ruta que Roque utilizo\u0301 para llegar hasta e\u0301l. La ruta esta\u0301 representada por una cadena de caracteres, cada caracter representa un paso a una casilla de la ruta y estos caracteres pueden ser: * ' L' indicando que Roque se movio\u0301 una casilla a la izquierda* ' R' indicando que Roque se movio\u0301 una casilla a la derecha* ' U' indicando que Roque se movio\u0301 una casilla hacia arriba* ' D' indicando que Roque se movio\u0301 una casilla hacia abajoLos matema\u0301gicos podra\u0301n detener a tiempo el lanzamiento del misil si la ruta que Roque les dio es la ma\u0301s corta hasta e\u0301l. En caso de que, utilizando solo casillas por las que Roque paso\u0301, exista otra ruta al misil que llegue en menos pasos, no lo podra\u0301n detener. Por ejemplo, en este caso, Roque utilizo\u0301 la ruta ma\u0301s corta posible y lograra\u0301n detener el misil: ! [ S] ( si. png) Pero en este otro caso existe una ruta al misil que utiliza solo casillas por las que Roque paso\u0301 pero llega en menos pasos, por lo tanto, los matema\u0301gicos no lograra\u0301n detenerlo: ! [ N] ( no. png) # ProblemaTu trabajo es escribir un programa que dada la cadena \u007fde pasos que realizo\u0301 Roque, escriba la letra * S* si la ruta era la ruta ma\u0301s corta posible o * N* si existi\u0301a una ruta ma\u0301s corta.",
    "input": "En la primer li\u0301nea se encuentra un entero N que es el nu\u0301mero de pasos que Roque utilizo\u0301. En la segunda li\u0301nea se encuentra una cadena de N caracteres que describe los pasos de la ruta.",
    "output": "Debera\u0301s escribir la letra mayu\u0301scula * S* si Roque utilizo\u0301 la ruta ma\u0301s corta posible o la letra mayu\u0301scula * N* si existi\u0301a una ruta ma\u0301s corta distinta a la que Roque tomo\u0301.",
    "note": "",
    "topics": [
      "hashing",
      "strings",
      "graphs"
    ],
    "id": 5519
  },
  {
    "title": "Prestamos",
    "url": "https://omegaup.com/arena/problem/Prestamos",
    "history": "En un pequen\u0303o pueblo llamado Kriz\u030c viven N personas. Cada una de ellas le pidio\u0301 dinero prestado a * * exactamente una* * otra persona del pueblo. Ahora toca pagar las deudas, \u00a1pero el problema es que todos ya se gastaron todo su dinero! El alcalde de Kriz\u030c decidio\u0301 resolver el problema. El gobierno le dara\u0301 dinero a algunas personas para que puedan pagar sus deudas. Cuando las personas reciben el dinero, se inicia una reaccio\u0301n en cadena - por ejemplo: Si la persona A recibe el dinero del gobierno y usa ese dinero para pagarle a la persona B, ahora la persona B utiliza ese dinero para pagarle la deuba a la persona C y asi\u0301 sucesivamente. Si la persona B no hubiera tenido suficiente dinero para saldar su deuda, se hubiera esperado a tener lo suficiente. Por otro lado, si le sobrara dinero, la persona B se hubiera quedado con el resto. Otro ejemplo: si so\u0301lo hay dos personas en Kriz\u030c, y cada una se debe $ 100 a la otra, el gobierno le dara\u0301 $ 100 a una para que le pague a la otra, y esa otra le pagara\u0301 tambie\u0301n su deuda a la primera. Tu tarea es calcular la menor cantidad de dinero que el gobierno necesita dar a algunos habitantes de tal manera que al terminar las reacciones en cadena todas las deudas queden saldadas.",
    "input": "La primera li\u0301nea de la entrada contiene un entero, N ( 2 \u2264 N \u2264 200, 000) , la cantidad de habitantes de Kriz\u030c, quienes esta\u0301n numerados de 1 a N. Las siguientes N li\u0301neas contienen dos enteros separados por un espacio. En la i- e\u0301sima de esas li\u0301neas, el primer nu\u0301mero, A_ i, representa el nu\u0301mero de la persona a la cual la i- e\u0301sima persona le debe dinero ( 1 \u2264 A_ i \u2264 N, A_ i = \u0338 i) , mientras que el segundo nu\u0301mero, B_ i, representa la cantidad de dinero que le debe ( 1 \u2264 B_ i \u2264 10, 000) .",
    "output": "La primer y u\u0301nica li\u0301nea de la salida debe contener so\u0301lo un entero - la mi\u0301nima cantidad de dinero que el gobierno debe dar a los habitantes para que todas las deudas queden saldadas.",
    "note": "",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": 4564
  },
  {
    "title": "Cueva del Tesoro ",
    "url": "https://omegaup.com/arena/problem/Cueva-del-Tesoro-",
    "history": "El abuelo de Bessie era un pirata que acumulo\u0301 un gran tesoro en uncofre lleno de oro. \u00a1El escondio\u0301 el cofre en una cueva que Bessie hadescubierto recientemente exactamente en la tierra del Granjero Juan! Justo en la entrada de la cueva ella encontro\u0301 un mapa que le dice comoconseguir el tesoro. < br / > < br / > La cueva tiene P pasajes ( 3 < = P < = 5, 000) convenientemente numerados1. . P. La entrada es el pasaje 1; el tesoro esta\u0301 ubicado en algu\u0301n pasajealcanzable T ( 2 < = T < = P) , cuyo valor se suministra. Todos los pasajestienen aproximadamente la misma longitud; cada uno llega a unabifurcacio\u0301n en donde un nu\u0301mero hasta ahora inexplorado de pasajesllevan a la inquisitiva vaca au\u0301n ma\u0301s profundo debajo de la tierra. Ningu\u0301n pasaje aparece como la bifurcacio\u0301n de ma\u0301s de un pasaje, y elmapa contiene un total de NS bifurcaciones ( 1 < = NS < = 5, 000) . < br / > < br / > Bessie quiere saber cua\u0301n lejos de la entrada esta\u0301 el tesoro y tambie\u0301nlos nu\u0301meros de los pasajes que se debe tomar para llegar al tesoro. < br / > < br / > Considere la representacio\u0301n esquema\u0301tica de una cueva mostrado acontinuacio\u0301n. Los nu\u0301meros de los pasajes son mosteados cerca al pasajeque ellos nombran. Para este ejemplo el tesoro esta\u0301 al final del pasajecon nu\u0301mero 7: < br / > < br / > < pre> 3/ / + / / 52/ 4 / 1 / + \u2014- + 6 # 7 / 11 / / 13 + + 8 10/ / 2+ 9 < / pre> < br / > < br / > Bessie tendri\u0301a que atravesar los pasajes 1, 2, 4, 6, y 7 para llegar altesoro, una distancia total de 5 ( la cual es simplemente el conteo depasajes) . < br / > < br / > El archivo de entrada incluye un conjunto de li\u0301neas, cada una con unnu\u0301mero de pasaje N ( 1 < = N < = P) y los dos pasajes ( B2 y B2; 1 < = B1< = P; 1 < = B2 < = P) que salen de e\u0301l. Alguna li\u0301nea en el archivo de laentrada incluira\u0301 el pasaje nu\u0301mero 1 y sus dos ramas ( en nuestro ejemplo, pasajes 2 y 13; asi\u0301 mismo, el pasaje nu\u0301mero 8 tiene dos ramas: 9 y 10) . < br / > < br / > Di\u0301gale a Bessie como obtener el tesoro.",
    "input": "* Li\u0301nea 1: La li\u0301nea 1 contiene tres enteros separados por espacios: P, NS, y T* Li\u0301neas 2. . NS+ 1: Cada li\u0301nea contiene tres enteros separados por espacio: N, B1, y B2",
    "output": "* Li\u0301nea 1: La distancia D desde la entrada hasta el tesoro. * Li\u0301neas 2. . D+ 1: La li\u0301nea i+ 1 contiene un solo entero que es el siguiente pasaje que Bessie toma para llegar al tesoro.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": 3345
  },
  {
    "title": "IOI 2011 - Crocodile's Underground City",
    "url": "https://omegaup.com/arena/problem/Crocodiles",
    "history": "La vida de la arqueo\u0301loga Benjamas corre peligro tras estar investigando una misteriosa ciudad subterra\u0301nea de cocodrilos. La ciudad tiene _ _ N_ _ salas. Existen _ _ M_ _ pasillos * bi- direccionales* , cada uno conecta dos salas diferentes. Los pasillos no son iguales, el tiempo necesario para recorrerlos no es el mismo en todos los pasillos. Solo _ _ K_ _ de las * * N* * salas le permiten a Benjamas salir de la ciudad. Benjamas inicia en la sala 0 y quiere encontrar una salida lo ma\u0301s * ra\u0301pido posible* . El cocodrilo guardia\u0301n de la ciudad quiere evitar que Benjamas escape. Desde su guarida controla puertas que pueden bloquear pasillos, es decir * cuando bloquea un nuevo pasillo el u\u0301ltimo pasillo que bloqueo\u0301 se des- bloquea. * Cada vez que Benjamas quiere dejar una sala el cocodrilo guardia\u0301n puede bloquear alguno de los pasillos conectados a la sala donde se encuentra. Despue\u0301s Benjamas escoge un pasillo libre y lo recorre. Cuando Benjamas entra a un pasillo, el guardia\u0301n no puede bloquearlo hasta que Benjamas llegue a la salida del pasillo. \u2014\u2014\u2014- Benjamas quiere disen\u0303ar un sencillo plan de escape, es decir, quiere definir un conjunto de instrucciones que le digan que hacer cada vez que entra en una sala. Sea _ _ A_ _ una sala, si la sala es una salida no es necesario ninguna instruccio\u0301n. Si _ _ A_ _ no es una salida la instruccio\u0301n tendra\u0301 una de las siguientes formas: - \u0093Si entras a la sala _ _ A_ _ , toma el pasillo hacia la sala _ _ B_ _ , si esta\u0301 bloqueado entonces toma el pasillo hacia la sala _ _ C_ _ . \u0094- \u0093No te preocupes por la sala _ _ A_ _ , segu\u0301n el plan de escape nunca llegaras a esa sala. \u0094\u2014\u2014\u2014- En algunos casos ( por ejemplo si el plan lleva a Benjamas a un ciclo ) el guardia\u0301n puede prevenir que Benjamas escape de la ciudad en un tiempo finito. Sea _ _ T_ _ el menor tiempo tal que despue\u0301s de _ _ T_ _ unidades de tiempo Benjamas siempre escapa de la ciudad sin importar lo que haga el guardia\u0301n, decimos que el plan de escape tarda _ _ T_ _ . Debes ayudar a Benjamas a encontrar el mi\u0301nimo T tal que existe un plan que te saca en * a lo ma\u0301s ese tiempo. *",
    "input": "Li\u0301nea 1: _ _ N_ _ , _ _ M_ _ , y _ _ K_ _ . Li\u0301neas 2 a M+ 1: Para 0 < = * i* < _ _ M_ _ , la li\u0301nea * i+ 2* contiene tres enteros * * a, b, c* * separadas por un espacio, que describe un pasillo que une la sala * a* con la sala * b* y el tiempo en recorrerlo es * c* . Li\u0301nea M+ 2: la lista de _ _ K_ _ enteros que contiene los i\u0301ndices de las salas que son salida. * La sala 0 nunca sera\u0301 salida. *",
    "output": "Tu programa debe imprimir el mi\u0301nimo T para el cual existe un plan de escape. Puedes asumir que cada sala que no contiene una salida tiene al menos dos pasillos. Adema\u0301s que para cada caso de prueba, existe un plan de escape en el cual T < = * 1 000 000 000* .",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 2820
  },
  {
    "title": "IOI 2000 - Murallas",
    "url": "https://omegaup.com/arena/problem/IOI-2000---Murallas",
    "history": "< center> ! [ Logo IOI 2000] ( logo00. jpg) < / center> \u2014\u2014\u2014# MurallasEn cierto pai\u0301s se han construido murallas de tal manera que cada muralla conecta exactamente dos ciudades. Las murallas no se cruzan entre ellas, por esta razo\u0301n, el pai\u0301s esta dividido en regiones, y para moverse de una regio\u0301n a otra es necesario pasar por una o ma\u0301s ciudades o cruzar una o ma\u0301s murallas. Para un par de ciudades A y B, hay a lo ma\u0301s una muralla con un final en A y el otro en B. Adema\u0301s, siempre es posible ir de A a B caminando en todo momento por una ciudad o una muralla. Los miembros de cierto club viven en diferentes ciudades. En cada ciudad vive un miembro del club o no vive ningu\u0301n miembro. Los miembros del club quieren reunirse en alguna de las regiones ( fuera de cualquier ciudad) . Ellos viajan en bicicleta, asi\u0301 que no quieren entrar a ninguna ciudad debido al tra\u0301fico, por lo que su u\u0301nica opcio\u0301n es cruzar algunas murallas para llegar a la regio\u0301n donde se llevara\u0301 a cabo la reunio\u0301n. Desean llegar a dicha reunio\u0301n cruzando el menor nu\u0301mero de murallas posibles. Ma\u0301s especi\u0301ficamente, para llegar a la regio\u0301n donde sera\u0301 la reunio\u0301n, cada miembro del club debe cruzar un nu\u0301mero ( posiblemente 0) de murallas. Los miembros del club desean encontrar la regio\u0301n para la cual la suma de estos nu\u0301meros ( que llamaremos suma de cruces de aqui\u0301 en adelante) es minimizada. < center> ! [ Sample Test] ( walls. jpg) < / center> Las ciudades esta\u0301n indexadas con enteros de 1 a N, donde N es el nu\u0301mero de ciudades. En la figura 1, los nodos indexados representan las ciudades y las li\u0301neas entre ellos representan las murallas. Supo\u0301n que hay tres miembros del club, que viven en las ciudades 3, 6, y 9. Una regio\u0301n o\u0301ptima para la reunio\u0301n y las respectivas rutas que deben seguir los miembros para llegar a ella se muestra en la figura 2. La suma de cruces es 2: El miembro que vive ne la ciudad 9 tiene que cruzar una muralla entre las ciudades 2 y 4, y el miembro que vive en la ciudad 6 tiene que cruzar la muralla entre las ciudades 4 y 7. Debera\u0301s escribir un programa que, dados el nu\u0301mero de ciudades, la descripcio\u0301n de las regiones y las ciudades en las que viven los miembros del club, calcule un regio\u0301n o\u0301ptima que minimice la suma de cruces.",
    "input": "La primera li\u0301nea contiene un entero: el nu\u0301mero de regiones M, 2 \u2264 M \u2264 200. La segunda li\u0301nea contiene un entero: el nu\u0301mero de ciudades N. 1 \u2264 N \u2264 250. La tercera li\u0301nea contiene el nu\u0301mero de miembros en el club L, 1 \u2264 L \u2264 30. En la cuarta li\u0301nea habra\u0301n L enteros distintos en orden creciente: los i\u0301ndices de las ciudades donde viven los miembros del club. Despue\u0301s de esto vienen 2M li\u0301neas de tal manera que hay un par de li\u0301neas describiendo cada una de las regiones: las primeras dos li\u0301neas de las 2M describen la primera regio\u0301n, las siguientes dos la segunda regio\u0301n y asi\u0301 sucesivamente. Para cada par de li\u0301neas describiendo una regio\u0301n, la primera de ellas contienen un entero I, el nu\u0301mero de ciudades en la frontera de la regio\u0301n. La segunda li\u0301nea contiene I enteros: los indices de las I ciudades en la frontera de la regio\u0301n en algu\u0301n orden en el cual pueden ser recorridas si se hiciera un viaje en el sentido de las manecillas del reloj al rededor de la frontera de la regio\u0301n, con un excepcio\u0301n: La u\u0301ltima regio\u0301n que se describe en la entrada es la \" regio\u0301n exterior\" , que rodea a todas las otras regiones y ciudades, y para esta\u0301 u\u0301ltima regio\u0301n, el orden de los i\u0301ndices corresponde a un recorrido en contra de las manecillas del reloj. El orden en que se dan las regiones define la manera de indexar las regiones: la primera regio\u0301n descrita se indexa con el nu\u0301mero 1, la segunda regio\u0301n descrita con el nu\u0301mero 2, etc. Nota que la entrada incluye todas las regiones formadas por las ciudades y las murallas, incluyendo la regio\u0301n exterior.",
    "output": "La primera li\u0301nea contiene un entero: la mi\u0301nima suma de cruces. La segunda li\u0301nea contiene un entero: el i\u0301ndice de una regio\u0301n optima que produce la mi\u0301nima suma de cruces. Pueden existir ma\u0301s de una solucio\u0301n para la regio\u0301n o\u0301ptima, tu programa sin embargo, so\u0301lo debe imprimir una de ellas.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 2278
  },
  {
    "title": "Is It A Tree",
    "url": "https://omegaup.com/arena/problem/IsItATree",
    "history": "A tree is a well- known data structure that is either empty ( null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties. - There is exactly one node, called the root, to which no directededges point. - Every node except the root has exactly one edge pointing to it. - There is a unique sequence of directed edges from the root to each node. For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not. ! [ tree] [ 1] In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not.",
    "input": "The input will consist of a sequence of descriptions ( test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero.",
    "output": "For each test case display the line \" Case k is a tree. \" or the line \" Case k is not a tree. \" , where k corresponds to the test case number ( they are sequentially numbered starting with 1) . # # # Sample Input6 8 5 3 5 2 6 4 5 6 0 08 1 7 3 6 2 8 9 7 5 7 4 7 8 7 6 0 03 8 6 8 6 4 5 3 5 6 5 2 0 0- 1 - 1# # # Sample OutputCase 1 is a tree. Case 2 is a tree. Case 3 is not a tree. Miguel A. Revilla1999- 03- 241er Concurso Local de Prograacion del Club de Progra[ 1] : acb279236fa1f42b3b09131b9a32d66fddbbbd3b. png",
    "note": "",
    "topics": [
      "graphs",
      "dfs and similar"
    ],
    "id": 2175
  },
  {
    "title": "Las ciudades vecinas a Uruk",
    "url": "https://omegaup.com/arena/problem/uruk",
    "history": "En uno de sus mu\u0301ltiples suen\u0303os, Gilgamesh vio concebida a Uruk como una ciudad pro\u0301spera. Para ello Uruk debe poder realizar comercio con las N- 1 ciudades de los alrededores. Gilgamesh ha decidido realizar la construccio\u0301n de varios caminos que comuniquen a todas las ciudades entre si\u0301. La construccio\u0301n de un camino entre cada pareja de ciudades es muy costoso por lo que Gilgamesh decide que basta con que exista una forma u\u0301nica de llegar de una ciudad a otra pero que siempre sea posible llegar desde una ciudad a cualquier otra. Los matema\u0301ticos de Uruk han disen\u0303ado un mapa con M posibles caminos entre algunas parejas de las N ciudades. La construccio\u0301n de cada camino tiene un costo m_ i. Ayude a Gilgamesh a determinar la suma de costos de los N- 1 caminos elegidos de manera que dicha suma sea mi\u0301nima.",
    "input": "Dos enteros N, M que representan el nu\u0301mero de ciudades que deben quedar comunicadas y los M caminos que comunican algunas de las ciudades. Seguido de M li\u0301neas con una pareja de nombres de ciudades s, t y el costo m_ i entre ellas. Puede suponer que 2 \u2264 N \u2264 100, N- 1 \u2264 M \u2264 ( N* ( N- 1) / 2) y 1 \u2264 m_ i \u2264 1, 000. El nombre de cada ciudad no sera\u0301 ma\u0301s largo que 10 letras minu\u0301sculas del alfabeto ingle\u0301s. Puede suponer que cada pareja de ciudades sera\u0301 dado de forma u\u0301nica.",
    "output": "La salida sera\u0301 la suma de costos de los N- 1 caminos que unen a las N ciudades. Puede suponer que siempre existe al menos una forma de conectar a las N ciudades.",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "strings"
    ],
    "id": 1976
  },
  {
    "title": "La b\u00fasqueda de Enkidu",
    "url": "https://omegaup.com/arena/problem/busenkidu",
    "history": "Cuando Gilgamesh se entero\u0301 de que los dioses habi\u0301an creado a Enkidu, un hombre tan fuerte como e\u0301l, decidio\u0301 ir a enfrentarlo. Gilgamesh so\u0301lo sabe que Enkidu se puede encontrar en alguno de N posibles lugares, los cuales esta\u0301n numerados del 1 al N. Gilgamesh comenzara\u0301 a viajar desde la ciudad 1 visitando las dema\u0301s ciudades en el transcurso de N - 1 di\u0301as, pero Gilgamesh no quiere visitar al di\u0301a ma\u0301s de una ciudad. Para cada nuevo di\u0301a Gilgamesh ha decidido siempre dirigirse a la ciudad vecina ma\u0301s cercana que au\u0301n no ha visitado. Si varias ciudades vecinas esta\u0301n igual de cerca y au\u0301n no han sido visitadas entonces Gilgamesh ira\u0301 a la que tiene un i\u0301ndice menor. Ayuda a Gilgamesh a determinar el orden en que visitari\u0301a las N- 1 ciudades.",
    "input": "Un entero N que representan el nu\u0301mero de ciudades que Gilgamesh recorrera\u0301. Seguido de una matriz M con N \u00d7 N entradas. Cada li\u0301nea i con 1 \u2264 i \u2264 N contiene las distancias directas hacia el resto de las ciudades j con 1 \u2264 j \u2264 N. La distancia de una ciudad a si\u0301 misma sera\u0301 igual a cero. Puede suponer que 2 \u2264 N \u2264 1000 y que la distancia entre cada pareja de ciudades es 1 \u2264 M_ ij\u2264 1000.",
    "output": "La salida sera\u0301n N- 1 enteros que son las ciudades en el orden en que fueron visitadas.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 1958
  },
  {
    "title": "La construcci\u00f3n de los remos de Gilgamesh",
    "url": "https://omegaup.com/arena/problem/conremos",
    "history": "Despue\u0301s de que el barquero Urshanabi\u0301 le pidio\u0301 a Gilgamesh cortar algunos troncos para construir los remos que les faltaban, Gilgamesh comenzo\u0301 a armar los remos. Gilgamesh corto\u0301 N troncos en total. Luego, comenzo\u0301 a construir los remos simplemente uniendo los troncos que corto. Algunos troncos se pueden utilizar independientemente para construir remos. Cada tronco esta\u0301 enumerado del 1 al N. Por ejemplo, suponga que Gilgamesh corto\u0301 N = 10 troncos y que realizo\u0301 5 uniones de troncos: 1 con 7, 2 con 5, 7 con 3, 4 con 8 y finalmente 3 con 8, esto quiere decir que Gilgamesh construyo\u0301 5 remos, un remo con { 1, 3, 4, 7, 8} , otro con { 2, 5} y tres ma\u0301s utilizando los troncos 6, 9 y 10. Ayude a Gilgamesh a determinar la cantidad de remos armo\u0301 en total dados los troncos que fue uniendo.",
    "input": "Dos enteros N, M que representan el nu\u0301mero de troncos que Gilgamesh corto\u0301 y el nu\u0301mero de uniones que realizo\u0301. Seguidos de M lineas que describen las M parejas de enteros que denotan los troncos que Gilgamesh combino\u0301. Puede suponer que 0 \u2264 M < N \u2264 10, 000.",
    "output": "Un entero R que representa el nu\u0301mero de remos que Gilgamesh construyo\u0301.",
    "note": "",
    "topics": [
      "dsu",
      "graphs",
      "dfs and similar"
    ],
    "id": 1957
  },
  {
    "title": "IOI 1996 - Red de Escuelas",
    "url": "https://omegaup.com/arena/problem/Red-de-Escuelas",
    "history": "< center> ! [ Logo IOI 1996] [ 1] < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Red de EscuelasAlgunas escuelas esta\u0301n conectadas en una gran red de computadoras con el propo\u0301sito de compartir software educativo a todas ellas. Se han hecho algunos convenios entre las escuelas dentro de la red: cada escuela mantiene una lista de contactos con la que distribuye software. Nota que si la escuela x tiene a la escuela y en su lista de contactos, no es necesario que la escuela y tenga a x en su lista. * * * Subtarea a* * * : Encuentra el mi\u0301nimo nu\u0301mero de escuelas a las que le tienes que entregar un software para que dicho software sea distribuido a todas las escuelas dentro de la red. * * * Subtarea b* * * : Se quiere asegurar que, entregando un solo software a cualquier escuela en la red, sea posible distribuirlo a todas las otras escuelas. Calcula el mi\u0301nimo nu\u0301mero de extensiones que se tienen que hacer para garantizarlo. Una extensio\u0301n se define como agregar un nuevo miembro en la lista de contactos de una escuela.",
    "input": "La primera li\u0301nea de entrada contendra\u0301 un entero n: el nu\u0301mero de escuelas en la red ( 1 \u2264 n \u2264 10^ 6) . Las escuelas esta\u0301n numeradas del 1 al n. Cada una de las siguientes n li\u0301neas describe la lista de contactos de la i- e\u0301sima escuela. La li\u0301nea nu\u0301mero i contendra\u0301 los nu\u0301meros de los contactos de la escuela i. La lista siempre termina con un nu\u0301mero 0. Se asegura que en el nu\u0301mero total de contactos en todas las listas no excede 10^ 6.",
    "output": "Dos li\u0301neas con un entero cada una, la respuesta a la subtarea a y b respectivamente. | | input52 4 3 04 5 0001 0| | output12| | end[ 1] : f796bd3baeef40024a6f5c2a745104dea0340acc. jpeg",
    "note": "",
    "topics": [
      "graphs",
      "greedy"
    ],
    "id": 1364
  },
  {
    "title": "Grand Traitors",
    "url": "https://omegaup.com/arena/problem/Grand-Traitors",
    "history": "# Grand TraitorsMany spies around the world work together to collect valuable information about their enemies, but there is an inevitable moment on life when your closest allies suddenly become your most fierce enemies. There are n ( 2 \u2264 n \u2264 10, 000) spies around the world, each one with a unique code number from 1 to n. The Spy Agency have information about p ( 1 \u2264 p \u2264 20, 000) betrayal plans. A betrayal plan consist of two spies A and B ( 1 \u2264 A, B \u2264 n) , meaning that the spy A is a traitor and plans to betray spy B. Anyway, the spies still have some honor and will not start their betrayal plans until they are betrayed first, that is: A spy will execute all his betrayal plans if and only if any other spy betrays him first. Knowing the betrayal plans, the Agency is interested in answering q ( 1 \u2264 q \u2264 100, 000) questions of the type: Given two code numbers X and Y ( 1 \u2264 X, Y \u2264 n) , can spy X be the first traitor executing some of his plans such that, after triggering all the corresponding betrayals, spy Y is betrayed by any other spy and nobody betrays spy X? Note that spy X may decide to not execute some of his betrayal plans, but any other spy that is betrayed must execute all of their plans. Please, help the Spy Agency answering such questions. The Agency ensures that all the betrayal plans are unique and no spy will plan to betray himself ( they are not dumb enough to do it) .",
    "input": "The first line of input contains three integers n, m and q. Then follows m betrayal plans conformed by two integers A and B. Each of the next q lines contains a question described by two integers X and Y.",
    "output": "For each question in the input, if spy X can execute some of his plans respecting the constraints mentioned above, print * \u201cYES\u201d* without quotes. In other case, print * \u201cNO\u201d* without quotes too. # Example| | input6 5 33 51 21 33 62 43 64 21 5| | outputYESNOYES| | end",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 1264
  },
  {
    "title": "Friendly",
    "url": "https://omegaup.com/arena/problem/Friendly",
    "history": "En la OVI nos hemos dado cuenta que los oli\u0301mpicos pasan demasiado tiempo resolviendo problemas y no tienen mucho tiempo para socializar, para mejorar esta situacio\u0301n, hemos decido darle a cada oli\u0301mpico un amigo. Las relaciones de amistad esta\u0301n dadas en un solo sentido, es decir, si Pedro es asignado para ser amigo de Juan, Pedro tiene que ser amigable con Juan, pero Juan no esta\u0301 obligado a ser reci\u0301proco. Las asignaciones de amigos esta\u0301n hechas por computadora, usando nu\u0301meros para identificar a cada oli\u0301mpico, a cada estudiante se le asigna exactamente un amigo, Algunas veces, ocurren ci\u0301rculos de amigos, por ejemplo, si Mari\u0301a es asignada a Faby, Faby es asignada a Luis, Luis es asignado a Juan y Juan es asignado a Mari\u0301a, tenemos un ci\u0301rculo de amigos. En el ci\u0301rculo se puede ver que Mari\u0301a tiene una separacio\u0301n de 0 respecto a Faby, de 1 respecto a Luis, de 2 respecto a Juan y de 3 respecto a si\u0301 misma. # ProblemaTu\u0301 tarea consiste en identificar, dadas las relaciones de amistad, si dos oli\u0301mpicos esta\u0301n en el mismo ci\u0301rculo de amistad y determinar su separacio\u0301n.",
    "input": "En la primera li\u0301nea un entero N que denota el nu\u0301mero de oli\u0301mpicos. Cada una de las siguientes N li\u0301neas, contienen parejas de enteros X, Y separados por un espacio ( 1< = X, Y< = 9999 y X! = Y) donde X es el oli\u0301mpico que tiene que ser amigable con Y. Por ejemplo 2 9, indica que el oli\u0301mpico 2 tiene que ser amigable con el 9. Las siguientes li\u0301neas contienen parjeas de enteros A, B separados por un espacio y cada una denota una pregunta ( si A y B esta\u0301n en un ci\u0301rculo de amistad y a que distancia esta\u0301n) . La u\u0301ltima li\u0301nea denota el final de la antrada con los valores 0 0 para A y B.",
    "output": "NoYes 0| | end",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 1108
  },
  {
    "title": "Pa\u00eds Desconectado",
    "url": "https://omegaup.com/arena/problem/Pais-Desconectado",
    "history": "Existe un pais con una geografia tan accidentada que es muy dificil y costoso hacer carreteras para interconectar sus ciudades. El presidente electo, se ha impuesto la tarea de comunicar el pais de tal forma que haya un camino entre cualquier par de ciudades y que le cueste lo menos posible. Despues de analizar el problema, un grupo de expertos ha recogido en un registro, todas las parejas de ciudades que se interconectan a traves de una carretera y se han dado a la tarea de determinar cual es el menor numero de carreteras a construir para que haya manera de llegar desde una ciudad A hasta cualquier ciudad B. Tu\u0301 como buen informatico y viendo la disposicion que tiene el nuevo gobierno, has decidido contribuir escribiendo un programa que basado en el registro de las conexiones que existen entre algunas ciudades, determine el minimo de carreteras a construir para que todo el pais quede interconectado. Las N ciudades del pais se enumeran desde 1 hasta N en forma consecutiva. Considere el caso donde se tienen 5 ciudades, estas se etiquetan del 1 al 5 y suponiendo que en el registro se tienen carreteras entre las ciudades 1- 2, 2- 3 y 4- 5, un mapa interconexion del pais se veria asi: ! [ ejemplo] ( pais. png) siendo el minimo de carreteras a construir para interconectar el pais igual a 1.",
    "input": "5 31 22 34 5| | output",
    "output": "1| | end# Li\u0301mites# 1< = N< = 1000001< = M< = 10000",
    "note": "",
    "topics": [
      "trees",
      "dsu",
      "graphs"
    ],
    "id": 1017
  },
  {
    "title": "Metro",
    "url": "https://omegaup.com/arena/problem/metro",
    "history": "En el mushroom kingdom desean crear una red de li\u0301neas de tren subterra\u0301neo que conecte todo el reino. El mushroom kingdom cuenta con 3< = n< = 30000 estaciones numeradas de 1 a n, las cuales deben conectarse con vi\u0301as. Para ello, se han realizado estudios que permitieron calcular cua\u0301l seri\u0301a el costo 1< = c< = 1000 de conectar la estacio\u0301n i con la estacio\u0301n j ( 1< = i, j< = n, i distinto de j) para 2< = m< = 200000 pares de estaciones i, j. Como se quiere hacer un uso eficiente de los recursos, te han encomendado la creacio\u0301n de un programa que determine cua\u0301l es el costo mi\u0301nimo de unir todas las estaciones, es decir, cua\u0301l es el menor costo posible para construir vi\u0301as que permitan llegar desde cualquier estacio\u0301n a cualquier otra. Debes tomar en cuenta las siguientes consideraciones: 1. Siempre sera\u0301 posible conectar todas las estaciones con los pares i, j dados en la entrada. 2. Si el par i, j aparece en la entrada, no aparecera\u0301 el par j, i ni habra\u0301 repeticiones.",
    "input": "La primera li\u0301nea de la entrada tendra\u0301 2 enteros n y m, el nu\u0301mero de estaciones y el nu\u0301mero de posibles tramos a construir. Las siguientes m li\u0301neas contendra\u0301n la descripcio\u0301n de un posible tramo con 3 enteros i, j y c, donde i y j son las estaciones a conectarse y c es el costo que tendri\u0301a su construccio\u0301n.",
    "output": "Un u\u0301nico nu\u0301mero, el menor costo resultante de conectar todas las estaciones. # Ejemplos| | input4 51 2 12 3 12 4 13 4 24 1 2| | output3| | descriptionLas vi\u0301as construidas seri\u0301an las que conectan los pares ( 1, 2) , ( 2, 3) y ( 2, 4) , que suman un costo de 3| | input6 82 5 63 6 33 1 406 4 21 4 12 6 72 1 202 4 20| | output19| | descriptionLas vi\u0301as construidas seri\u0301an las que conectan los pares ( 2, 5) , ( 3, 6) , ( 6, 4) , ( 1, 4) y ( 2, 6) que suman un costo de 19| | end# Li\u0301mites* 3< = n< = 30000* 2< = m< = 200000",
    "note": "",
    "topics": [
      "dsu",
      "greedy",
      "sortings",
      "graphs"
    ],
    "id": 169
  },
  {
    "title": "Camioncito",
    "url": "https://omegaup.com/arena/problem/camioncito",
    "history": "# El camioncito escolarLa nueva misio\u0301n del agente Solid Nieves es desenmascarar al malvado director Lira de la Primaria San Karel, que se esta\u0301 guardando los fondos de la escuela que se ahorra comprando leche Betty que es mucho ma\u0301s barata. Para cumplir con su misio\u0301n, Solid Nieves ha encontrado trabajo como conductor del camioncito que recoge a los nin\u0303os por la man\u0303ana y los lleva a la escuela. Ya que la escuela tuvo problemas con el u\u0301ltimo conductor del camioncito, ahora las madres suben a sus nin\u0303os en las esquinas en vez de que esperar al camioncito en su casa. Por esta razo\u0301n, a Solid Nieves le han dado una lista con * * N* * nin\u0303os a los que debe de recoger en una esquina en particular. La ciudad donde trabaja el agente puede verse como un grafo no dirigido con * * C* * calles ( aristas) y * * E* * esquinas ( nodos) . # ProblemaDebido a que cada segundo que Solid Nieves pasa en el camioncito es un segundo menos en el que puede trabajar para desenmascarar al malvado director Lira, Solid Nieves te ha pedido que le ayudes a encontrar la forma ma\u0301s corta de recoger a todos los nin\u0303os, dado que sale de la esquina * * I* * donde tiene su casa ( la cual no es su casa verdadera, sino una casa que le han asignado para la misio\u0301n) , y entregarlos en la esquina * * F* * donde esta\u0301 la escuela. A Solid Nieves no le importa pasar por una esquina ma\u0301s de una vez, siempre y cuando esa sea la ruta ma\u0301s corta.",
    "input": "En la primera li\u0301nea los nu\u0301meros * * N* * , * * C* * , * * E* * , * * I* * y * * F* * , separados por un espacio. Las siguientes * * C* * li\u0301neas describen las calles con tres nu\u0301meros enteros * * i* * , * * j* * y * * k* * , que representan que hay una calle entre la esquina * * i* * y la esquina * * j* * que puede ser recorrida en exactamente * * k* * minutos. La siguiente li\u0301nea contiene * * N* * nu\u0301meros, que indican en cua\u0301les esquinas debe de recoger el agente a los nin\u0303os. Ningu\u0301n nin\u0303o se recoge en la misma esquina y ningu\u0301n nin\u0303o se recoge en la primaria o en la esquina donde vive Solid Nieves.",
    "output": "Un solo nu\u0301mero * * S* * , que representa el tiempo mi\u0301nimo que le toma a Solid Nieves recoger a todos los nin\u0303os y dejarlos en la escuela. # Limites3 < = E < = 10001 < = N < = 100 < k < 1000",
    "note": "",
    "topics": [
      "brute force",
      "graphs"
    ],
    "id": 168
  },
  {
    "title": "Centros de Distribuci\u00f3n",
    "url": "https://omegaup.com/arena/problem/Centros-de-Distribucion",
    "history": "En una ciudad hay muchas tienditas que venden el producto de la compan\u0303i\u0301a \" Bembo\" . Como sus productos son muy vendidos, la compan\u0303i\u0301a ha instalado algunos centros de distribucio\u0301n a lo largo de la ciudad, lamentablemente no hizo ningu\u0301n ana\u0301lisis previo de donde deberi\u0301a ir cada centro y ahora tienen problemas con la distribucio\u0301n. La compan\u0303i\u0301a Bembo te ha contratado para que lo ayudes a decidir que centro de distribucio\u0301n debe mandar productos a que tienda de tal manera que sea lo ma\u0301s eficientemente posible. Como primera parte de tu anali\u0301sis, has localizado en un mapa las tiendas y los centros de distribucio\u0301n y medido las distancias entre ellos. Tambie\u0301n has localizado algunos otros puntos de intere\u0301s por los cuales puden pasar las camionetas de distribucio\u0301n en su camino a las tiendas. Ahora tienes que implementar un algoritmo que te diga que centro tiene que surtir a que tienda. # ProblemaDada la distancia entre los distintos puntos de intere\u0301s ( incluidos tiendas y centros de distribucio\u0301n) , indicar que centro de distribucio\u0301n debe surtir cada tienda de la ciudad de tal manera que la distancia entre la tienda y su respectivo centro de distribucio\u0301n, sea mi\u0301nima.",
    "input": "Li\u0301nea 1: Un entero * N* indicando la cantidad de puntos de intere\u0301s marcados en tu mapa. Siguientes * N* li\u0301neas: * N* enteros, * d< sub> i, j< / sub> * separados por un espacio cada una. Cada entero * j* de la * i* - e\u0301sima li\u0301nea indica la distancia del * i* - e\u0301simo punto de intere\u0301s al * j* - e\u0301simo punto de intere\u0301sSiguiente Li\u0301nea: un entero * T* indicando cuantas tiendas haySiguiente Li\u0301nea: * T* enteros, * t< sub> i< / sub> * , con el i\u0301ndice de cada punto de intere\u0301s que es tiendaSiguiente Li\u0301nea: un entero * C* representando cuantos centros de distribucio\u0301n haySiguiente Li\u0301nea: * C* enteros, * c< sub> i< / sub> * con el i\u0301ndice de cada punto de intere\u0301s que es centro de distribucio\u0301n* * Ejemplo: * * 80 2 1 3 - 1 - 1 - 1 - 15 0 - 1 - 1 3 - 1 - 1 - 1- 1 - 1 0 - 1 - 1 3 - 1 - 1- 1 - 1 - 1 0 - 1 10 - 1 - 1- 1 - 1 - 1 4 0 - 1 8 - 1- 1 - 1 - 1 - 1 - 1 0 - 1 - 1- 1 - 1 - 1 - 1 6 3 0 1- 1 - 1 - 1 - 1 - 1 - 1 - 1 047 3 6 235 1 4Linea 1: Debera\u0301s imprimir * T* enteros, cada uno con el i\u0301ndice del centro de distribucio\u0301n que le corresponde a cada tienda. Las salida estara\u0301 ordenada por el i\u0301ndice del punto de intere\u0301s de cada tienda. * * Ejemplo: * * 1 1 1 5# ConsideracionesUn punto de intere\u0301s nunca sera\u0301 a la vez tienda y centro de distribucio\u0301n. Si no hay camino de un punto de distribucio\u0301n a otro, la distancia sera\u0301 - 1. Si dos centros de distribucio\u0301n tienen la misma distancia hacia una tienda, preferiremos el que tenga el i\u0301ndice menor. * 1 \u2264 * N* \u2264 500* 1 \u2264 * d< sub> i, j< / sub> * \u2264 1000 si hay camino o - 1 si no. * 1 \u2264 * T* < * N* * 1 \u2264 * C* < * N* * 1 \u2264 * t< sub> i< / sub> * \u2264 * N* * 1 \u2264 * c< sub> i< / sub> * \u2264 * N*",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "graph matchings"
    ],
    "id": 16617
  },
  {
    "title": "La veganza de Rodrigo evil ",
    "url": "https://omegaup.com/arena/problem/La-vegana-de-Rodrigo-evil-",
    "history": "Hace poco Rodrigo compro\u0301 el Minecraft para jugar con sus amigos. En una de sus partidas alguien lo mato\u0301 por accidente, pero como Rodrigo es muy rencoroso decidio\u0301 tomar venganza en contra de quien lo mato\u0301 destruye\u0301ndole su casa = ( Rodrigo planea hacer explotar la casa y despue\u0301s huir para evitar que lo descubran. Como la casa de su amigo esta\u0301 en los cielos, la u\u0301nica manera de llegar a ella es por medio de unos puentes de bloques que conectan diferentes lugares del mundo. Sin embargo, actualmente algunos puentes esta\u0301n inconclusos y no es posible huir a cualquier lugar del mapa, por lo que Rodrigo quiere saber que\u0301 puentes debe terminar de modo de que gaste el mi\u0301nimo nu\u0301meros de bloques y pueda escapar por ellos a cualquier lugar del mapa.",
    "input": "Inicialmente, un entero N que representa el nu\u0301mero de lugares en el mapa seguido de un entero M que representa el numero de puentes actualmente construidos. Posteriormente, M parejas de enteros que denotan los identificadores de los lugares que esta\u0301n conectados por cada puente.",
    "output": "Un entero K que represente el nu\u0301mero mi\u0301nimo de puentes que Rodrigo debe construir, seguido de K parejas de enteros que denoten los identificadores de los lugares que Rodrigo debe conectar en cada puente que construya. En caso de que existan varias soluciones, imprime la lexicogra\u0301ficamente menor.",
    "note": "",
    "topics": [
      "graphs",
      "graph matchings"
    ],
    "id": 15398
  },
  {
    "title": "Joshi el f\u00edsico",
    "url": "https://omegaup.com/arena/problem/Joshi-el-fisico",
    "history": "Joshi, se ha cansado de ser un simple personaje de videojuegos por lo que ha decido cambiar su profesio\u0301n a fi\u0301sico y en esta ocasio\u0301n tiene un reto para ti. E\u0301l te presentara\u0301 un circuito compuesto u\u0301nicamente de resistencias, como este pero probablemente ma\u0301s complicado. ! [ enter image description here] [ 1] Un circuito posee segmentos llamados tuberi\u0301as, entre dos tuberi\u0301as a y b ( por simplicidad distintas) enumeradas de 1 a N ( 1 \u2264 N \u2264 2500) puede haber al menos una resistencia. La corriente ele\u0301ctrica en algu\u0301n momento puede viajar de una tuberi\u0301a u pasar por otras tuberi\u0301as y regresar a u nuevamente y repetirse infinitamente ( no importa el sentido de la corriente) . Como Joshi au\u0301n no consigue entender los te\u0301rminos correctos de la fi\u0301sica le llama a esto una tuberi\u0301a infinita. El reto consiste en encontrar la mi\u0301nima cantidad de tuberi\u0301as que formen una tuberi\u0301a infinita en un circuito dado. \u00bfSera\u0301s capaz de completar su reto con e\u0301xito?",
    "input": "En la primer li\u0301nea recibes dos enteros N y M, la cantidad de tuberi\u0301as y la cantidad de pares de tuberi\u0301as que tienen al menos una resistencia entre ellos . En las siguientes M li\u0301neas recibes un par de enteros a y b separados por un espacio, representando que hay al menos una resistencia entre las tuberi\u0301as a y b.",
    "output": "Un entero representando la mi\u0301nima cantidad de tuberi\u0301as que formen una tuberi\u0301a infinita en un circuito dado, si no hay ninguna tuberi\u0301a infinita debes imprimir - 1.",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 14360
  },
  {
    "title": "Cazador",
    "url": "https://omegaup.com/arena/problem/CazadorHunter",
    "history": "Erase\u0301 una vez un programador competitivo cuyo alias era * El cazador* . Los algoritmos que utiliza son muy extran\u0303os. Para resolver un grupo de problemas realiza los siguientes pasos: 1. Escoge un problema i y lo resuelve. 2. Lo relaciona con otro problema j anteriormente resuelto ( solamente si ya ha resuelto al menos 1 problema) . Dicha relacio\u0301n puede ser vista como una arista e que conecta dos vertices i, j. Por lo que al resolver N problemas ( 1 \u2264 N \u2264 10^ 5) debe haber creado N nodos y N- 1 aristas. Cada problema lo marca con una etiqueta, varios problemas pueden recibir la misma etiqueta. Sin embargo, al cazador no le gusta que dos problemas relacionados compartan la misma etiqueta, ni tampoco con los problemas relacionados a los vecinos. Formalmente, para los problemas con indices i, j, k si existe una conexio\u0301n de ( i, j) y de ( j, k) , entonces la etiqueta de i debe ser distinta a la de j y tambie\u0301n a la de k. Por favor, ayuda a * El cazador* a encontrar la mi\u0301nima cantidad de etiquetas que debe crear de forma que se cumpla la condicio\u0301n anterior.",
    "input": "En la primer li\u0301nea recibes un entero N. Las siguientes N- 1 li\u0301neas recibes dos enteros i y j separados por un espacio.",
    "output": "Un u\u0301nico entero, la mi\u0301nima cantidad de etiquetas que se necesitan para que nadie colapse.",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 14292
  },
  {
    "title": "Spider-Man Vs KingPin",
    "url": "https://omegaup.com/arena/problem/Spider-Man-Vs-KingPin-cpp",
    "history": "# DescripcionEs un nuevo di\u0301a y la ciudad de Nueva- York esta\u0301 en problemas de nuevo, pero Spider- Man esta aqui\u0301 para combatir al mal, esta vez Spider- Man necesita detener al malvado kingpin, ya que intenta hacer su supercolisionador de nuevo, Por fortuna Kingpin esta\u0301 en un edificio s el cual esta\u0301 rodeado por n edificios y estos edificios tienen m conexiones ele\u0301ctricas unidireccionales entre ellos; Spider- Man puede detenerlo, ya que e\u0301l sabe que si descarga la energi\u0301a del colisionador en todos los edificios aledan\u0303os al edificio s ( en donde el colisionador de kingpin se encuentra) podra\u0301 descargarlo y asi\u0301 detenerlo. Spider- Man se dio cuenta de que su telaran\u0303a conduce muy bien la energi\u0301a, ya que la corriente siempre pasa por la telaran\u0303a en una sola direccio\u0301n decide usarla para conectar todos los edificios que no tengan conexio\u0301n con el edificio s de kingpin, sin embargo, no tiene mucho Bio- Cable en su lanza telaran\u0303as, por lo que necesita saber cua\u0301l es el mi\u0301nimo nu\u0301mero de cables que tendra\u0301 que lanzar para que la energi\u0301a pueda ir del edificio s a todos los otros edificios. ! [ ilustracion] ( prueba. jpg)",
    "input": "La entrada consiste de 3 enteros n, m y s ( 1 \u2264 n \u2264 5000) , ( 1 \u2264 m \u2264 5000) , ( 1 \u2264 s \u2264 n) que denotan el nu\u0301mero de edificios aledan\u0303os, el nu\u0301mero de edificios conectados entre si\u0301, y el i\u0301ndice del edificio de Kingpin Respectivamente. En las siguientes m li\u0301neas leera\u0301s 2 enteros p y q que denota que existe un cable que va del edificio p al edificio q.",
    "output": "Un solo entero, que denota el nu\u0301mero mi\u0301nimo de cables que Spider- Man tendra\u0301 que lanzar para hacer que la energi\u0301a pueda ir del edificio s a todos los edificios aledan\u0303os. | | input5 4 51 22 33 44 1| | output1| | description! [ primer grafo] ( facil. png) En este caso Spider- Man necesita crear 1 solo cable con su telaran\u0303a desde * * 5* * hacia cualquiera de los otros * * 4* * edificios. Por lo que la respuesta es 1 nuestro He\u0301roe podra\u0301 ahorrar mucho Bio- Cable. | | input9 9 11 21 32 31 55 66 11 89 87 1| | output3| | description! [ segundo Grafo] ( medio. png) En este caso una solucio\u0301n posible es lanzar un cable entre * * ( 6, 4) * * otro entre * * ( 7, 9) * * y uno u\u0301ltimo entre * * ( 1, 7) * * gastando 3 cuerdas de Bio- Cable, siendo esta la solucio\u0301n O\u0301ptima. | | end# # Spider- Verse CONFIRMADOOOO! ! ! ! Nos veremos en la OMI",
    "note": "",
    "topics": [
      "dfs and similar",
      "graph matchings",
      "graphs"
    ],
    "id": 13729
  },
  {
    "title": "Pintando arreglos",
    "url": "https://omegaup.com/arena/problem/Pintando-arreglos",
    "history": "# HistoriaA los alumnos de Santy aun les quedaba mucho por aprender. Un di\u0301a vio en una peli\u0301cula como el protagonista entrenaba pintando una cera. Entonces, se le ocurrio\u0301 a Santy a ponerte entrenar pintando arreglos. Cada pintura tiene un ID, es decir, un nu\u0301mero que lo identifica. El 0 es el blanco. Por ejemplo, 1, 5, 2, 2, 2, 4, 4, 5, 6, 7, 5 Simboliza que el arreglo en la primera posicio\u0301n tiene la pintura 1, en la posicio\u0301n 2 tiene la pintura 5 y asi\u0301 sucesivamente. Tu tarea es pintar un arreglo como Santy te lo diga. # ProblemaEl arreglo inicialmente es blanco. Se te dara\u0301n Q instrucciones que indican como pintar el arreglo. Cada instruccio\u0301n es una tripleta de nu\u0301meros- a, b, x : Esta instruccio\u0301n quiere decir que vas a pintar el arreglo desde la posicio\u0301n a hasta la posicio\u0301n b con el color x. Los colores que te compro Santy son magicos y no se mezclan. Si una parte del arreglo teni\u0301a cierto color x_ 1 y ahora lo pintas de x_ 2 es parte se queda con el color x_ 2.",
    "input": "Se te da el nu\u0301mero N y Q indicando el taman\u0303o original del arreglo y la cantidad de instrucciones que recibira\u0301s. Seguido se te dara\u0301n Q li\u0301neas con tercias de nu\u0301mero indicando la instruccio\u0301n mencionada anteriormente.",
    "output": "La configuracio\u0301n del arreglo al final. # Ejemplos| | input9 31 3 14 6 27 9 4| | output1 1 1 2 2 2 4 4 4| | descriptionEl arreglo esta\u0301n indexado en 1. La primera instruccio\u0301n pinta las primeras 3 posiciones del color 1, la segunda instruccio\u0301n las siguientes 3 posiciones del color 2. Finalmente la u\u0301ltima instruccio\u0301n pinta del color 4 las u\u0301ltimas 3 posiciones| | input6 41 3 92 4 63 5 04 6 2| | output9 6 0 2 2 2| | end# Limites- 1 \u2264 a, b \u2264 N- 0 \u2264 x \u2264 10^ 8* * Para un 50",
    "note": "",
    "topics": [
      "dsu",
      "graph matchings",
      "graphs"
    ],
    "id": 13550
  },
  {
    "title": "Enemigos y amigos",
    "url": "https://omegaup.com/arena/problem/Enemigos-y-amigos",
    "history": "Hay dos dichos populares, \" el enemigo de mi enemigo, es mi amigo\" y \" el amigo de mi amigo es mi amigo\" . Fernando se puso a pensar sobre lo que dicen estos dichos y se dio cuenta que no siempre tienen sentido. Por ejemplo, si A es enemigo de B; B es enemigo de C y C es enemigo de A. Entonces A seri\u0301a amigo de C porque tienen a B de enemigo comu\u0301n, pero al mismo tiempo son enemigos. . . lo cua\u0301l no tiene sentido. Fernando observo\u0301 a un grupo de personas y descubrio\u0301 quien es enemigo de quien. Determina si los dichos populares tienen sentido para este grupo o no. Las enemistades son mutuas, si A es enemigo de B, B tambie\u0301n es enemigo de A.",
    "input": "Dos enteros N, M que representan la cantidad de personas y enemistades respectivamente. En las siguientes M li\u0301neas vienen dos enteros i y j, representando que la personas i y j son enemigos. Se asegura que i = \u0338 j y que no aparece dos veces la misma enemistad ( incluyendo j, i)",
    "output": "\" SI\" si tiene sentido los dichos, caso contrario \" NO\" # Ejemplos| | input6 71 21 41 62 33 44 55 6| | outputSI| | end| | input3 31 22 33 1| | outputNO| | end# Limites- 1 \u2264 N \u2264 5\u00d7 10^ 4- 0 \u2264 M \u2264 2\u00d7 10^ 5# Subtareas- ( 30 puntos) 1 \u2264 N \u2264 50- ( 30 puntos) 1 \u2264 N \u2264 1000- ( 40 puntos) Sin restricciones adicionales",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 13538
  },
  {
    "title": "Cornejonectate",
    "url": "https://omegaup.com/arena/problem/Cornejonectate",
    "history": "# Seguidores Fuertemente Seguidos! [ ] ( cornejonectate. jpeg) Cornejonectate es una nueva red social, en la que un usuario puede seguir a otro usuario y asi\u0301 recibir todas las noticias que ese usuario publique, la principal diferencia con esta red social es que cuando A decide seguir B, el cual a su vez sigue a C, entonces A tambie\u0301n seguira\u0301 C. La forman en que funciona Cornejonectate puede ocasionar que se formen los llamados grupos fuertemente seguidos, que son conjuntos de usuarios en donde todos siguen a todos directa o indirectamente. El taman\u0303o de este grupo es la cantidad de usuarios que lo forman. Escribe un programa que encuentre la cantidad de grupos fuertemente seguidos, asi\u0301 como la cantidad de usuarios en el grupo de menor taman\u0303o y la cantidad de usuarios en el grupo de mayor taman\u0303o. * * Ten en cuenta que si A sigue a B, no implica que B siga a A* *",
    "input": "La primera li\u0301nea contiene dos nu\u0301meros n ( 2 \u2264 n \u2264 1000) y m ( 2 \u2264 m \u2264 10^ 5) , que representan el nu\u0301mero de usuarios y la cantidad de relaciones de \" seguimiento\" que existen en la red social respectivamente. Le siguen m li\u0301neas, cada una con dos nu\u0301meros a y b ( 0 \u2264 a, b < n) , indicando que el usuario a sigue al usuario b.",
    "output": "La salida consiste de tres nu\u0301meros, la cantidad de grupos fuertemente seguidos, el taman\u0303o del grupo fuertemente seguido ma\u0301s pequen\u0303o, y el taman\u0303o del grupo fuertemente seguido ma\u0301s grande. Ver ejemplo.",
    "note": "",
    "topics": [
      "graphs",
      "graph matchings"
    ],
    "id": 13320
  },
  {
    "title": "Destruyan los Puentes",
    "url": "https://omegaup.com/arena/problem/Destruyan-los-Puentes",
    "history": "# Destruyan los Puentes! [ ] ( privateRyan. jpeg) En las batallas los puentes son de gran importancia, pues sirven para que pase la infanteri\u0301a, provisiones, etc. Es comu\u0301n que cuando se libra una batalla, quien este perdiendo destruya el puente como u\u0301ltima opcio\u0301n, algo asi\u0301 como \" Si yo no lo puedo usar, entonces que el enemigo tampoco lo pueda usar\" . El general Lufe es el encargado de defender el estado de Aguascalientes, su pueblo adorado, pero desafortudamente para el, la derrota en la batalla es inminente. El problema es que son demasiados puentes, un puente conecta dos municipios del estado, entonces, lo que el general Lufe quiere hacer es destruir so\u0301lo aquellos puentes que al destruirlos ocasionen que municipos queden incomunicados, asi\u0301 los enemigos no podra\u0301n acceder a ellos con tanta falicidad. Hay n municipos numerados del 0 al n- 1, y un puente conecta a un par de municipios. Para el siguiente ejemplo, el general Lufe destruiri\u0301a dos puentes, el puente ( 2 - 6) y el puente ( 5 - 8) , que lo que ocasionari\u0301a que municipios queden incomunicados. ! [ scale= 0. 7] ( grafo. png)",
    "input": "La primera li\u0301nea contiene dos nu\u0301meros n ( 2 \u2264 n \u2264 1000) y m ( 2 \u2264 m \u2264 10^ 5) , que representan el nu\u0301mero de municipios y puentes en Aguascalientes respectivamente. Le siguen m li\u0301neas, cada una con dos nu\u0301meros a y b ( 0 \u2264 a, b < n) , indicando que hay un puente que conecta a los municipos a y b.",
    "output": "La primera li\u0301nea contiene el nu\u0301mero de puentes a destruir por el General Lufe, las dema\u0301s li\u0301neas contienen los puentes a destruir ( ver el ejemplo) . Imprimir los puentes en orden ascendente, si un puente conecta al municipio a y al municipio b, asegurate que a < b, y ordenalos de acuerdo al valor de a, si dos puentes tienen el mismo valor de a, ordenalos de acuerdo al valor de b.",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 13317
  },
  {
    "title": "Componentes conexas de una gr\u00e1fica no dirigida",
    "url": "https://omegaup.com/arena/problem/Componentes-conexas-de-una-grafi",
    "history": "Dada una gra\u0301fica no dirigida de N ve\u0301rtices y M aristas, calcula su cantidad de componentes conexas. Los ve\u0301rtices de la gra\u0301fica esta\u0301n impli\u0301citamente numerados de 0 a N- 1.",
    "input": "Dos enteros N y M seguidos de M parejas de enteros que denotan los extremos de las aristas de la gra\u0301fica. Puedes suponer que 1 \u2264 N \u2264 10^ 4 y que 0 \u2264 M \u2264min( 10^ 5, N 2) .",
    "output": "Un entero que sea la cantidad de componentes conexas de la gra\u0301fica.",
    "note": "",
    "topics": [
      "graphs",
      "graph matchings"
    ],
    "id": 12886
  },
  {
    "title": "Buscando al chismoso",
    "url": "https://omegaup.com/arena/problem/Buscando-al-chismoso",
    "history": "La e\u0301poca de cuarentena durante la Covid- 19 fue una experiencia nueva para todos. Muchos pudieron sacarle el mayor provecho y otros simplemente se dedicaron a dejar la vida pasar. Una curiosa actividad durante esta u\u0301ltima cuarentena surgio\u0301 debido a que muchas personas se comunicaban entre si\u0301 para hablar de cualquier evento que ocurri\u0301a, por mi\u0301nimo que fuese. Por ejemplo, si es que decidi\u0301as tomar un u\u0301nico ban\u0303o una vez al mes como experiencia, tu mama\u0301 le contaba a su vecina, y esta a otra vecina, y al final, el( la) vecino( a) que te gustaba se terminaba enterando y te dejaba de hablar. Frente a esta situacio\u0301n, tus amigos del barrio y tu\u0301 quisieran saber quie\u0301nes son los vecinos con los que deberi\u0301an tener sumo cuidado porque son los responsables de que absolutamente todo el barrio se entere de los chismes. Es decir, son aquellos vecinos clave para la transmisio\u0301n de los chismes entre todos los vecinos.",
    "input": "El archivo de entrada tiene varios casos de prueba. Cada caso de prueba empieza con una li\u0301nea conteniendo dos enteros V ( 1 \u2264 V \u2264 100) y C ( 1 \u2264 C \u2264 V) indicando el nu\u0301mero de vecinos y la cantidad de conversaciones conocidas que mantienen esos vecinos. Luego vendra\u0301n C li\u0301neas las cuales tienen por lo menos 2 nu\u0301meros y como ma\u0301ximo V nu\u0301meros. El primer nu\u0301mero i de dicha li\u0301nea hara\u0301 referencia al i- e\u0301simo vecino que se comunica con el resto de vecinos en la li\u0301nea ( representados por nu\u0301meros del 1 al V) . El u\u0301ltimo nu\u0301mero de la li\u0301nea sera\u0301 0. El caso de prueba V= C= 0 indicara\u0301 el final del archivo de entrada y no debe ser procesado.",
    "output": "Por cada caso de prueba, imprimir en una li\u0301nea la lista de vecinos que son los responsables de que todos los vecinos se enteren de los chismes. Colocar un espacio de separacio\u0301n entre vecino y vecino cuando haya ma\u0301s de 2 vecinos importantes en la red de chismes. La lista de vecinos debe estar en orden incremental. En caso que no exista uno de esos vecinos, imprimir \" Barrio seguro\" | | input10 17 1 2 3 4 5 6 8 9 10 06 21 3 5 02 4 6 5 02 11 2 00 0| | output71 2 5Barrio seguro| | end",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 12193
  },
  {
    "title": "Social distancing",
    "url": "https://omegaup.com/arena/problem/social-distancing",
    "history": "* * Antonio* * necesita realizar las compras del mes, para hacerlo debe recorrer los pasillos de su mercado local. * * Antonio* * es precavido y sigue las recomendaciones de sana distancia, asi\u0301 que se pregunta si es seguro o no recorrer cada pasillo sin exponer a nadie a riesgo de un contagio. * * Antonio* * considera que un pasillo es seguro si en ningu\u0301n momento durante su recorrido se encuentra ubicado a * * dos metros ( 2m) o menos* * de otra persona. ( * * Nota* * : las dimensiones de Antonio y las dema\u0301s personas se pueden omitir y se consideran un punto en el plano cartesiano) . * * Antonio* * te ha pedido ayuda para escribir un programa que determine ( conociendo la ubicacio\u0301n fija de las personas en el mismo) si es seguro o no recorrer un pasillo. * * Nota1* * : * * Antonio* * puede iniciar en cualquier posicio\u0301n ( X_ start, 0) y terminarlo en cualquier posicio\u0301n ( X_ end, H) . * * Nota2* * : Las personas en el pasillo pueden o no seguir las recomendanciones estando en el pasillo. * * Nota3* * : En la siguiente imagen, con una persona situada en ( 3, 3) , los puntos A, B se encuentran en riesgo de contagio, mientras que los puntos C, D no. ! [ Explanation] ( explanation. png) * * Nota4* * : * * Antonio* * es libre de desplazarse por cualquier coordenada del pasillo ( no necesariamente coordenadas enteras) .",
    "input": "Un entero N indicando el nu\u0301mero de pasillos. Cada pasillo esta descrito de la siguiente manera: * Una li\u0301nea con tres nu\u0301meros enteros C, W, H indicando el nu\u0301mero de clientes, la anchura y largo del pasillo respectivamente. * C li\u0301neas con dos enteros ( X_ i, Y_ i) ; describiendo la posicio\u0301n de cada cliente.",
    "output": "Por cada pasillo una palabra indicando si es es seguro ( ` SAFE` ) o no ( ` RISKY` ) recorrer dicho pasillo para realizar sus compras sin exponerse a un contagio.",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 12082
  },
  {
    "title": "Aeropuertos en Camotelandia",
    "url": "https://omegaup.com/arena/problem/Aeropuertos-en-Camotelandia",
    "history": "La revolucio\u0301n industrial ha llegado por fin a Camotelandia. Previamente, solo existi\u0301an una cantidad limitada de caminos entre las ciudades y pueblos de Camotelandia. Para hacer posible que todos los ciudadanos puedan acceder todo lugar del pai\u0301s, se construira\u0301n aeropuertos, desde los cuales es posible llegar a todos los dema\u0301s aeropuertos. Un equipo de economistas e ingenieros determinaron el costo de construir un aeropuerto en cada una de las ciudades y pueblos. Tu tarea es buscar el costo ma\u0301s bajo posible con el cual puedas conectar todo el pai\u0301s.",
    "input": "En la primer li\u0301nea dos enteros 1\u2264 n \u2264 1e6, 0 \u2264 m \u2264 1e6 la cantidad de ciudades y caminos existentes. Luego siguen m li\u0301neas cada una con dos enteros distintos 1 \u2264 u_ i, v_ i, \u2264 n, u_ i v_ i indicando que existe un camino entre las ciudades u_ i y v_ i. Finalmente una li\u0301nea con n enteros 1 \u2264 c_ i \u2264 1e9 el costo de construir un aeropuerto en la ciudad _ i.",
    "output": "Un entero, el costo mi\u0301nimo para construir todos los aeropuertos necesarios",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths",
      "graph matchings"
    ],
    "id": 11804
  },
  {
    "title": "Pl\u00e1tano sabroso",
    "url": "https://omegaup.com/arena/problem/Platano-sabroso",
    "history": "En la jungla, la poderosa jungla, los monos duermen esta noche. Pero man\u0303ana despertara\u0301n con mucha hambre, en busca de pla\u0301tano. En esta jungla hay un solo a\u0301rbol que da pla\u0301tanos, y a diario se pelean por llegar a este suculento manjar. Cada mono reside en un a\u0301rbol, y varios monos pueden vivir en el mismo a\u0301rbol. Para moverese de a\u0301rbol en a\u0301rbol se columpian en lianas. Todos los monos son igual de ra\u0301pidos y muy inteligentes, por lo que siempre toman la ruta ma\u0301s o\u0301ptima para llegar al a\u0301rbol de pla\u0301tanos. Claramente el primer mono en llegar al pla\u0301tano se lo queda, pero \u00bfQue\u0301 sucede si llegan dos o ma\u0301s al mismo tiempo? Hacen lo que todos los animales salvajes hari\u0301an, y debaten sobre como distribuir la comida. Para ello tardan un cierto tiempo. Si llega otro mono antes de que terminen de deliberar, vuelven a empezar la discusio\u0301n. Tu tarea es, dada las posiciones iniciales de los monos y el pla\u0301tano, y la distribucio\u0301n de las lianas que conecten los a\u0301rboles, determinar cuantos monos comieron pla\u0301tano al final.",
    "input": "En la primera li\u0301nea cuatro enteros 1\u2264 n \u2264 1e3, 1 \u2264 x \u2264n( n- 1) / 2, 1\u2264 m, k \u2264 1e3 la cantidad de a\u0301rboles, de lianas, de monos, y el tiempo que tardan en debatir respectivamente. En la segunda li\u0301nea un entero 1\u2264 p \u2264 n, el a\u0301rbol que da pla\u0301tanos. Siguen x li\u0301neas cada una con dos enteros 1 \u2264 a_ i, a_ j \u2264 n, a_ i a_ j lo cual indica que hay una liana que conetca los a\u0301rboles con i\u0301ndices a_ i y a_ j. Luego sigue una li\u0301nea con m enteros, los i\u0301ndices de los a\u0301rboles donde viven los monos",
    "output": "Un entero, la cantidad de monos que consumieron pla\u0301tano de acuerdo a las reglas ya establecidas.",
    "note": "",
    "topics": [
      "graphs",
      "graph matchings",
      "shortest paths"
    ],
    "id": 11580
  },
  {
    "title": "Conocimiento es poder",
    "url": "https://omegaup.com/arena/problem/Conocimiento-es-poder",
    "history": "< / br> # Descripcio\u0301n: < / br> Eztair ahora es parte de la hermandad, y como parte del oficio, recibe el conocimiento de que en todas las ciudades de Italia existen tu\u0301neles secretos, estos llevan a diferentes salas las cuales pueden contener armas, libros, o recursos que pueden llegar a tener usos en sus viajes, lo interesante es que en la ultima sala de un camino siempre se encuentra un glifo, estos glifos transmiten conocimiento u\u0301nico que puede llegar a ser u\u0301til. < br/ > Para acceder a estos tu\u0301neles solo existe una entrada, y cada glifo se encuentra hasta la ultima sala( no tiene camino para continuar) . Solo se puede regresar a la sala del inicio volviendo por el mismo camino, por lo tanto solo existe un camino para llegar a un glifo. < br/ > Como estos tu\u0301neles son antiguos hay algunas salas que se han derrumbado, lo que impide el paso, pero como Eztair es un ser extraordinario, por esa cualidad entro a la hermandad, este puede abrirse camino por 2 salas seguidas que se han derrumbado abrie\u0301ndose paso al quitar los escombros( estos vuelven a su estado original despue\u0301s de un tiempo) , si se encuentra una tercera sala derrumbada seguida, esta no la puede atravesar ya que no le queda estamina, por lo tanto no puede llegar al glifo de ese camino. < br/ > Imprime cuantos glifos puede Eztair alcanzar; < br/ > La sala del comienzo ( siempre es la sala 0) y del ultimo siempre estara\u0301n en buen estado. < br/ > # Entrada: < br/ > La primera li\u0301nea contendra\u0301 un nu\u0301mero n nu\u0301mero de salas ( 1 \u2264 n \u2264 10^ 5) . < br/ > Las siguientes n- 1 lineas contiene 2 nu\u0301meros a_ i, o_ i las salas que tienen conexiones. < br/ > Las siguiente n entradas sera\u0301n nu\u0301meros enteros a_ 1, a_ 2, a_ 3. . . . a_ n , en donde si a_ i es 0 , la sala esta derrumbada y si es 1 no lo esta.",
    "input": "",
    "output": "< / br> Imprime el nu\u0301mero de glifos que Eztair puede alcanzar.",
    "note": "",
    "topics": [
      "graphs",
      "dfs and similar",
      "graph matchings"
    ],
    "id": 10930
  },
  {
    "title": "\u00c1rboles falsos",
    "url": "https://omegaup.com/arena/problem/Arboles-falsos",
    "history": "Ailan Perejila tiene un rancho en Oblatos. Ella esta\u0301 plantando a\u0301rboles para decorar el lugar. \u00a1En eso se dio cuenta de que algunos de sus \" a\u0301rboles\" en realidad no lo son! Ailan Sabe que no son a\u0301rboles porque no cumplen con la definicio\u0301n: \" un grafo no dirigido en el que cualesquier dos ve\u0301rtices esta\u0301n conectados por exactamente un camino\" . Ailan quiere talar todos los pseudo- a\u0301rboles para asi\u0301 quedarse con un bosque. Ayu\u0301dala a saber cua\u0301ntos pseudo- a\u0301rboles talar.",
    "input": "La primer li\u0301nea contiene 2 enteros, 1\u2264 n \u2264 500, 0\u2264 m\u2264n( n- 1) / 2, la cantidad de nodos y aristas en el grafo. Las siguientes m li\u0301neas describen las aristas, mediante pares de enteros 1\u2264 u, v \u2264 n, lo cual indica que existe un arista entre el nodo u y v, en ambas direcciones.",
    "output": "Imprime un entero, la cantidad de subgrafos que no son a\u0301rboles.",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 10917
  },
  {
    "title": "Trituradores de Basura",
    "url": "https://omegaup.com/arena/problem/Trituradores-de-Basura",
    "history": "Luke Skywalker , Han Solo y la princesa Leia Organa estaban escapando de los soldados de asalto imperiales dentro de la temible estrella de la muerte. Durante el escape los 3 amigos lograron entrar a un ducto que los llevo a un cuarto feo y mal oliente lleno de basura que se encontraba cerca de las celdas de prisioneros. Para su mala suerte el cuarto a donde entraron era uno de los trituradores de basura de la estrella de la muerte. Afortunadamente su amigo C3PO( que es un androide de protocolo) , esta escondido en las ca\u0301maras de vigilancia de la estrella de la muerte, desde ahi\u0301 puede desactivar los trituradores de basura y salvar la vida de sus amigos. ! [ enter image description here] [ 1] # ProblemaC3PO se encuentra frente a una paleta de comandos en el cuarto de ca\u0301maras de vigilancia, para poder desactivar los trituradores C3PO tiene que ingresar el codigo correcto en la paleta de comandos( ver figura) . Que es dado un numero entero N ( que es el numero de triturador) escribir en la paleta de comando el numero entero mas cercan o igual al numero N. Esta paleta de comandos es un poco especial ya que si presionas una tecla, no puedes presionar ninguna otra tecla que este ala izquierda o arriba de la que acabas de presionar, es decir si presionas una tecla 5 ya no podras presionar las teclas 1, 2, 3, 4, 7 porque se encuntran ya sea arriba o a la izquierda de la tecla 5, sin embargo puedes presionar cualquiera de las siguentes teclas 5, 6, 8, 9, 0. ! [ enter image description here] [ 2] ! [ enter image description here] [ 3] Dado un numero N ayuda a C3PO a encontrar el numero entero mas cercano que se pueda escribir en esta paleta de comandos.",
    "input": "En la primera linea de entrada un numero entero Q que representa la cantidad de casos a evaluar. En las siguientes Q lineas , un numero entero N por linea.",
    "output": "Q lineas ( una por caso) , que representan la solucio\u0301n para cada uno de los casos. * Nota: en caso de haber dos o mas soluciones que cumplan con lo que el problema pide , imprimir la que el numero sea menor.",
    "note": "",
    "topics": [
      "graphs",
      "dfs and similar",
      "implementation",
      "graph matchings",
      "strings"
    ],
    "id": 10286
  },
  {
    "title": "Connected",
    "url": "https://omegaup.com/arena/problem/Conectados",
    "history": "# ConectadosDado una gra\u0301fica con n nodos y m aristas no dirigidas. Y dado un par de nu\u0301meros a y b. Escribe un programa que determine si los nodos a y b esta\u0301n conectados. Los nodos esta\u0301n numerados del 1 al n.",
    "input": "La primera li\u0301nea contiene 2 nu\u0301meros n ( 1 \u2264 n \u2264 500) , m ( 1 \u2264 m \u2264 2n) . Siguen m li\u0301neas, cada una con dos nu\u0301meros x y y, indicando que hay una arista que conecta al nodo x con el nodo y y visceversa. La u\u0301ltima linea contiene dos nu\u0301meros a y b.",
    "output": "Si los nodos a y b esta\u0301n conectados imprime el mensaje \u201dYES\u201d. En caso contrario imprime \u201dNO\u201d. # # Ejemplos| | input4 21 24 31 3| | outputNO| | descriptionEl nodo 1 y el nodo 3 no esta\u0301n conectados. | | end",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 7648
  },
  {
    "title": "Escape del laberinto",
    "url": "https://omegaup.com/arena/problem/Escape-del-laberinto",
    "history": "Imagina que estas atrapado en un laberinto de celdas de * * n* * por * * m* * y pretendes escapar de e\u0301l. Se te dara\u0301 la descripcio\u0301n de un laberinto del cua\u0301l debera\u0301s indicar si existe salida o no de e\u0301l. Habra\u0301 exactamente una entrada, y exactamente una salida en el laberinto, y se encuentran en los bordes del laberinto.",
    "input": "Leera\u0301s dos nu\u0301meros enteros positivos F y C ( 3 < F, C \u2264 20) , que corresponden a las filas y columnas, respectivamente del laberinto. Enseguida aparecera\u0301n * F* li\u0301neas que contienen la informacio\u0301n del laberinto. El cara\u0301cter < code> # < / code> denota una pared. El cara\u0301cter < code> E< / code> denota la entrada y < code> S< / code> la salida, los espacios son los lugares por los que puedes moverte.",
    "output": "Determina si hay alguna ruta desde la entrada a la salida, e imprime \" Si\" si es asi\u0301, o \" No\" en caso contrario.",
    "note": "",
    "topics": [
      "dp",
      "graph matchings",
      "dfs and similar",
      "graphs",
      "math",
      "shortest paths",
      "matrices"
    ],
    "id": 6307
  },
  {
    "title": "MrK07. La \u00faltima, larga vida a Krista",
    "url": "https://omegaup.com/arena/problem/Larga-vida-a-Krista",
    "history": "# DescripcionMrKrista se ha convertido en un astronauta del Imperio del Jefe Supremo C+ + . Este mandatario lo ha mandado junto a un grupo l de compan\u0303eros a unaimportante misio\u0301n al planeta Marte, vaya sorpresa se encontro\u0301 nuestro protagonista, pues encontro\u0301 vida extraterrestre! Al avisar al jefe C+ + , este dijo: \" El objetivo es sencillo a partir de ahora: Identifique, la naturaleza de estos seres, sin embargo, solo tiene p di\u0301as para hacer su investigacio\u0301n, pues el cohete esta\u0301 programado para su regreso sin posibilidad de interrumpirlo\" . # ProblemaDado tres nu\u0301meros iniciales n, m y k; donde n y m son las dimensiones de el territorio que Krista revisara\u0301, se encontrara\u0301n k posiciones, todas y cadauna de ellas con dos datos x y y, que remarcan las posiciones de los alieni\u0301genas, determina su movimiento tomando en cuenta la siguiente nota enviada porel Mariscal Serpiente: * El estado de los aliens evoluciona a lo largo de unidades de tiempo discretas ( se podri\u0301a decir que por turnos) . La posicio\u0301n de todos los miembros se tiene en cuenta para calcular el estado de los mismos al turno siguiente. Todas las ce\u0301lulas se actualizan simulta\u0301neamente en cada turno, siguiendo estas reglas: * Un alien nace ( como las papas) con exactamente 3 aliens vecinos presentes ( es decir, al turno siguiente habra\u0301 un alien) . * Una alien vivo con 2 o\u0301 3 vecinos vivos sigue vivo, en otro caso muere o permanece muerto ( por \" soledad\" o \" superpoblacio\u0301n\" ) . * * NOTA: Un alien en la casilla x, y puede tener hasta 8 vecinos, en todos los puntos cardinales. Tenga cuidado.",
    "input": "Se dara\u0301n el la primera li\u0301nea tres nu\u0301meros n, m y k, luego k pares de nu\u0301meros, uno por li\u0301nea, donde se presenta x y y. Luego de los k pares, finitos nu\u0301meros 0' s y 1' s, donde un 1 significa que Krista puede pasar al siguiente di\u0301a, en caso de un 0, Krista debe regresar a casa, y mostrar la u\u0301ltimafoto de como estaban acomodados los aliens.",
    "output": "Un arreglo bidimensinal de n * m, donde se represente con una 0 en caso de no haber aliens o que estos este\u0301n muertos, y un 1 en caso de que este\u0301n vivos, todo esto, tras pasar los di\u0301as representados por los unos. | | input10 10 35 55 65 711111110| | output0000000000000000000000000000000000010000000001000000000100000000000000000000000000000000000000000000| | end# Li\u0301mites3< = n, m< = 1, 000, 0000< = k< = 35000001< = x, y< = 10, 000( 1 \u0301s ) < = 999, 999\" E\u0301xito, puedes hacerlo! : D\" . \" Auf Wiedersehen. . . \"",
    "note": "",
    "topics": [
      "graphs",
      "implementation",
      "dfs and similar",
      "graph matchings",
      "constructive algorithms",
      "strings",
      "number theory",
      "dp",
      "games"
    ],
    "id": 6198
  },
  {
    "title": "C\u00e1mara Secreta en el Monte Rushmore",
    "url": "https://omegaup.com/arena/problem/CamaraSecreta",
    "history": "Probablemente hayas escuchado que hay una escultura espectacular donde esta\u0301n cuatro famosos presidentes de los Estados Unidos en el Monte Rushmore. Sin embargo muy poca gente sabe que este monumento contiene una ca\u0301mara secreta. Esto suena como algo salido de una peli\u0301cula de Hollywood, pero la ca\u0301mara realmente existe. Esta puede ser encontrada detra\u0301s del rostro de Abraham Lincoln y fue disen\u0303ada para almacenar los documentos y reliquias histo\u0301ricos mas importantes de los Estados Unidos. En 1982, el famoso arqueo\u0301logo S. Dakota Jones visito\u0301 secretamente el monumento y encontro\u0301 que la ca\u0301mara realmente estaba completa, pero se mantuvo en secreto. Despue\u0301s de dar un vistazo, ella encontro\u0301 una bo\u0301veda oculta con unos documentos adentro. Por desgracia, esos documentos no teni\u0301an sentido asi\u0301 que ella sospecho\u0301 que estaban escritos en alguna especie de co\u0301digo, pero ella no pudo descifrarlo. A comienzo de semana, Dr. Jones finalmente descubrio\u0301 la llave para descifrar los documentos, ella encontro\u0301 un documento que contiene una lista de traducciones de letras. Algunas letras pueden tener mas de una traduccio\u0301n. Aplicando repetidamente alguna de esas traducciones a letras individuales a los documentos, ella deberi\u0301a ser capaz de descifrar los documentos. Ella necesita tu ayuda. Dado las posibles traducciones de letras y la lista de pares de palabras originales y descifradas. Tu tarea es verificar cuando las palabras en cada par coinciden. Dos palabras coinciden si ellas tienen la misma longitud y si cada letra de la primera palabra puede ser convertida en la letra correspondiente de la segunda palabra usando la lista de traducciones cero o mas veces.",
    "input": "La primera linea de la entrada contiene dos enteros m ( 1\u2264 m \u2264 500) y n ( 1\u2264 n \u2264 50) donde m es el nu\u0301mero de traducciones de letras y n es el nu\u0301mero de pares de palabras. Cada una de las siguientes m lineas contiene dos letras distintas a y b, indicando que la letra a puede ser traducida en la letra b. Cada par ordenado de letras ( a , b) aparecera a lo mas una vez. Las siguientes n lineas contienen una pareja de palabras a chequear. Las traducciones y palabras usan solo letras en minusculas \u0091a\u0092\u0096\u0091z\u0092, y cada palabra contiene al menos 1 y a lo mas 50 letras.",
    "output": "para cada par de palabras, imprima yes si las dos palabras coinciden, y no en otro caso.",
    "note": "",
    "topics": [
      "graphs",
      "graph matchings"
    ],
    "id": 5627
  },
  {
    "title": "Inundaciones",
    "url": "https://omegaup.com/arena/problem/Inundaciones",
    "history": "Debido a que Karelotitla\u0301n esta\u0301 construido sobre un inmenso lago ( igual que la famosa ciudad azteca) , cuando llueve mucho, las calles se inundan. Tu\u0301, como un estudiante de postgrado del Karelme\u0301cac, requieres saber como escurre el agua a trave\u0301s del terreno. El mapa de la ciudad puede verse como un mapa de flujo, el cual es una matriz en la que cada casilla tiene una direccio\u0301n que indica a que\u0301 direccio\u0301n escurre el agua ( norte, sur, este u oeste) . En ocasiones, hay casillas que no escurren a otra casilla, esas casillas se llaman pozos. Los ri\u0301os son los caminos que sigue el agua cuando escurre de una casilla a otra hasta llegar a un pozo ( siempre se llega a un pozo) . Dos casillas pertenecen a la misma cuenca si los ri\u0301os que contienen a las casillas, terminan en el mismo pozo. # ProblemaDado el mapa de flujo de Karelotitla\u0301n y una casilla x, determinar cuales casillas pertenecen a la misma cuenca a la que pertenece x.",
    "input": "En la primera li\u0301nea hay 4 enteros ren, col, posRen y posCol en ese orden. Donde ren y col representan el nu\u0301mero de renglones y columnas del mapa de flujo y posRen y posCol indican el renglo\u0301n y columna de la casilla x. En las siguientes ren li\u0301neas vienen col enteros, separados por un espacio, representando el mapa de flujo. El valor - 1 representa un pozo. El valor 0 indica que hay flujo al norte, el 1 que hay flujo al este, el 2 al sur y el 3 al oeste.",
    "output": "Una matriz de ren X col ceros y unos, separados por espacio, donde un uno indica que la casilla pertenece a la misma cuenca y un cero a una diferente a la que pertenece x.",
    "note": "",
    "topics": [
      "matrices",
      "graphs",
      "shortest paths",
      "graph matchings",
      "dsu",
      "dfs and similar",
      "math"
    ],
    "id": 2561
  },
  {
    "title": "El regreso de la Influenza AH1N1",
    "url": "https://omegaup.com/arena/problem/El-regreso-de-la-Influenza-AH1N1",
    "history": "Despue\u0301s de que la epidemia surgio\u0301 en la ciudad de Me\u0301xico se propago\u0301 por las islas de Karelotitlan ( si Karelotitlan tiene islas) , pero no so\u0301lo eso paso\u0301, el virus muto\u0301 en las islas y este nuevo virus es extremadamente contagioso por lo tanto los gobernantes de Karelotitlan decidieron destruir todos los puentes existentes para controlar la epidemia. Para poder salvar a la mayor cantidad de personas se ha decidido construir puentes solamente entre las islas no infectadas para que se puedan comunicar y no se infecten, una isla se considera como infectada si tan solo un reporte de infeccio\u0301n se ha dado en la isla. Se considera que dos secciones de tierra esta\u0301n en la misma isla si se unen ya sea al norte, sur, este u oeste. # ProblemaDado el mapa de las islas, decir cua\u0301l es el mi\u0301nimo numero de puentes que se deben construir para unir todas las islas que no esta\u0301n infectadas.",
    "input": "En la primera li\u0301nea dos nu\u0301meros enteros 1 < = F, C < = 1, 000, en las siguientes F li\u0301neas cada una con C caracteres con espacios entre cada uno. \u2018. \u2019 ( Punto) En caso de que se trate de una seccio\u0301n con agua, \u2018x\u2019 ( equis minu\u0301scula) en caso de que se haya reportado una infeccio\u0301n en ese lugar, y \u2018l\u2019 ( ele minu\u0301scula) en caso de que ese lugar se encuentre limpio de la epidemia. Tanto \u2018l\u2019 como \u2018x\u2019 son porciones de tierra de alguna isla.",
    "output": "El nu\u0301mero mi\u0301nimo de puentes que se deben construir para unir todas las islas que no tienen epidemia. Se considera que dos islas esta\u0301n unidas si existe alguna manera de llegar de una a otra pasando por cualquier numero de puentes e islas sin tocar el agua.",
    "note": "",
    "topics": [
      "graphs",
      "graph matchings"
    ],
    "id": 2556
  },
  {
    "title": "Don gato y su pandilla",
    "url": "https://omegaup.com/arena/problem/Don-gato-y-su-pandilla",
    "history": "Matute, exhausto de perseguir a la banda de gatos callejeros de Don Gato y su pandilla ( sin poder atraparlos) , ha decidido pedir ayuda profesional a una organizacio\u0301n secreta de programadores e\u0301lite, se dice que esta organizacio\u0301n se hace llamar OMI, y son capaces de resolver cualquier problema usando computadoras, tecnologi\u0301a y programacio\u0301n avanzada. Los miembros de OMI, muy a su pesar ( son fans de Don gato, pero trabajo es trabajo) han estudiado el comportamiento de Don gato y su pandilla, observando que estos siempre vagan por subregiones de la ciudad y que no muestran el ma\u0301s mi\u0301nimo intere\u0301s de abandonarla. El grupo de ingenieros OMI desarrollo\u0301 una trampa que es capaz de atrapar de manera infalible a un gato que se pose sobre ella ( Au\u0301n no sabemos como, la tecnologi\u0301a que usaron es ultrasecreta) . El equipo de psico\u0301logos de gatos de la OMI, despue\u0301s de muchas horas de ver ca\u0301pitulos de Don gato, ha desarrollado la sorprendente habilidad de predecir hacia donde ira\u0301 cada gato que visite un cuadrante de la ciudad. Esta informacio\u0301n es muy u\u0301til, pero no se sabe a ciencia cierta cuantos gatos tiene la pandilla ni en que cuadrante de la ciudad se encuentra cada uno. # ProblemaTu\u0301 como miembro de OMI debes desarrollar un programa que tomando la prediccio\u0301n de hacia donde ira\u0301 cada gato que visite un cuadrante de la ciudad, calcule el mi\u0301nimo nu\u0301mero de trampas que el equipo OMI debe desarrollar para asegurar que atrapara\u0301 a Don gato y toda su pandilla. El siguiente ejemplo muestra un mapa de los cuadrantes la ciudad de taman\u0303o 4x4 y la prediccio\u0301n de cada casilla. Nota que la direccio\u0301n que puede tomar el gato que llega a una casilla, puede ser uno de los 4 puntos cardinales. N- Norte, S- Sur, E- Este y W- Oeste. ! [ ejemplo] ( mapa. png) Para el ejemplo, el nu\u0301mero mi\u0301nimo de trampas que el equipo OMI debe poner es 4 y las debe poner en las casillas que se resaltan con las letras ma\u0301s grandes. Ponerlas en esas casillas asegura que no importando en que casilla se encuentren los gatos, cuando vaguen, siempre llegara\u0301n a una trampa que los atrape.",
    "input": "4 4SEWSNNESNWNWEWWW| | output",
    "output": "4| | end# Li\u0301mites# 1\u2264 N, M \u2264 1000",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs"
    ],
    "id": 1107
  },
  {
    "title": "\u00bfQu\u00e9 cursos puedo inscribir?",
    "url": "https://omegaup.com/arena/problem/Que-cursos-puedo-inscribir",
    "history": "En muchas universidades, inscribir algunos cursos requiere haber aprobado otros con anterioridad. Por ejemplo, para poder inscribir * Algoritmos y Estructuras de Datos* debes haber aprobado primero * Programacio\u0301n Estructurada* . Consideraremos dos tipos de requisitos entre cursos: - Si el curso A es un requisito duro del curso B entonces B puede inscribirse so\u0301lo si A ya fue aprobada. - Si el curso A es un requisito suave del curso B entonces B puede inscribirse si A ya fue aprobada o si A puede inscribirse ( en este u\u0301ltimo caso, A y B deben poder inscribirse juntas) . Dada una lista de cursos y sus requisitos, adema\u0301s de una lista de los cursos que ya aprobaste, escribe un programa que calcule que\u0301 cursos puedes inscribir.",
    "input": "Primero, un entero N seguido de la lista de requisitos de los N cursos de tu universidad. La informacio\u0301n de cada curso esta\u0301 dada por una li\u0301nea con un entero I que es la clave del curso en cuestio\u0301n y un entero K seguido de los datos de sus K requisitos. Un requisito se especifica con la clave del curso requerido antecedido por el caracter \u223c si es un requisito suave. Finalmente, un entero M seguido de una li\u0301nea de M enteros que son las claves de los cursos que ya aprobaste. Todos los cursos tienen claves nume\u0301ricas de 0 a N- 1. Puedes suponer que 0 \u2264 N \u2264 1000, que la lista de cursos aprobados es consistente con los requisitos entre cursos y que la gra\u0301fica de requisitos duros no tiene ciclos ( aunque la gra\u0301fica de requisitos suaves si\u0301 puede tenerlos) .",
    "output": "Una secuencia de enteros ordenada y sin duplicados que corresponde con las claves de los cursos que pueden inscribirse. # NotaEste problema se puede resolver con los temas vistos en * Algoritmos y Estructuras de Datos* de la UAM Azcapotzalco.",
    "note": "",
    "topics": [
      "graphs",
      "dfs and similar"
    ],
    "id": 7606
  },
  {
    "title": "Ordenamiento topol\u00f3gico",
    "url": "https://omegaup.com/arena/problem/Ordenamiento-topologico",
    "history": "Escribe un programa que lea una gra\u0301fica dirigida de N ve\u0301rtices ( numerados del 0 al N - 1) y M arcos. Tu programa debe imprimir el ordenamiento topolo\u0301gico lexicogra\u0301ficamente menor o - 1 si no existe.",
    "input": "El entero N seguido del entero M. Posteriormente M parejas de enteros x, y donde cada una denota un arco que va del ve\u0301rtice x al ve\u0301rtice y. Puedes suponer que 1 le; N le; M le; 100000.",
    "output": "N enteros separados por un espacio que denotan el orden en el que se visitan los ve\u0301rtices; en caso de no existir un ordenamiento topolo\u0301gico, el entero - 1.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 2888
  },
  {
    "title": "Pintando la gr\u00e1fica en equipo",
    "url": "https://omegaup.com/arena/problem/Pintando-la-grafica-en-equipo",
    "history": "Sea G una gra\u0301fica completa dirigida con costos en sus arcos. Deseas comenzar en algu\u0301n ve\u0301rtice de G, pintarlo de rojo, dirigirte a otro ve\u0301rtice no pintado y repetir la operacio\u0301n hasta que todos los ve\u0301rtices hayan sido pintados. Pintar un ve\u0301rtice no toma tiempo pero recorrer un arco si\u0301, por lo que tambie\u0301n deseas acabar lo ma\u0301s ra\u0301pido posible. Afortunadamente, tu mejor amigo te ofrecio\u0301 su ayuda para explorar G y pintar algunos ve\u0301rtices mientras tu\u0301 pintas los dema\u0301s. Se permite visitar ve\u0301rtices pintados mientras se recorre G. Escribe un programa que calcule el tiempo mi\u0301nimo necesario para pintar todos los ve\u0301rtices de G si tu\u0301 y tu amigo pueden elegir el ve\u0301rtice en el que comenzara\u0301 cada uno y adema\u0301s ambos comienzan a pintar al mismo tiempo.",
    "input": "Un entero N que denota el nu\u0301mero de ve\u0301rtices G, seguido de N \u00d7 N enteros que denotan los costos de los arcos de G expresados en forma de matriz de adyacencia. Puedes suponer que 2 \u2264 N \u2264 20, que hay ceros en la diagonal de la matriz y que el resto de los costos esta\u0301n en el rango de 1 a 1000.",
    "output": "Un entero que sea el tiempo mi\u0301nimo necesario para pintar todos los ve\u0301rtices de G.",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": 15964
  },
  {
    "title": "Vulnerabilidad",
    "url": "https://omegaup.com/arena/problem/pes-2022-vulnerabilidad",
    "history": "\u00a1Guerra en algoritmolandia! Los malvados treapseanos han declarado la guerra, y se preparan para invadir. El rey Hector de algoritmolandia esta muy ocupado preparando las defensas, y te ha pedido tu ayuda. En algoritmolandia hay N ciudades, cada una nombrada con un nu\u0301mero entre 1 y N. El cuartel del eje\u0301rcito esta\u0301 en la ciudad nu\u0301mero 1. Existen M caminos entre ciudades a trave\u0301s de los cuales transita el ejercito de algoritmolandia. La _ vulnerabilidad_ de la ciudad i, es la cantidad de caminos ( u, v) , tales que si quitas este camino, el tiempo mi\u0301nimo que tarda el ejercito en llegar desde de la ciudad 1 a la i aumenta. Tu tarea es hacer un programa que calcule la _ vulnerabilidad_ de cada ciudad que se le pregunte.",
    "input": "- La primera li\u0301nea contiene dos nu\u0301meros N y M la cantidad de ciudades y de caminos que hay en algoritmolandia. - Las siguientes M li\u0301neas contienen 3 numeros, u, v, h que representa que existe un camino entre la ciudad u y la v el cual se tarda h horas en cruzar de un lado a otro( sin importar la direccion) . El ejercito ademas no se entretiene en ninguna ciudad. - La siguiente linea contiene el numero Q que representa la cantidad de queries que se haran. - Las siguientes Q lineas tienen un valor i, para el cual deberas responder la vulnerabilidad de la ciudad i",
    "output": "- Q lineas, cada una respondiendo el valor de cada pregunta en el mismo orden que la entrada. # Li\u0301mites- 1 \u2264 N, Q \u2264 10^ 5- 1 \u2264 M \u2264 2 \u00d7 10^ 5- 1 \u2264 h \u2264 10^ 9- Solo habra\u0301 a lo ma\u0301s un camino entre cualquier par de ciudades- Al inicio, es posible viajar de la ciudad 1 a cualquier otra ciudad",
    "note": "",
    "topics": [
      "trees",
      "graphs",
      "shortest paths"
    ],
    "id": 15417
  },
  {
    "title": "La ruta del mensaje",
    "url": "https://omegaup.com/arena/problem/La-ruta-del-mensaje",
    "history": "Zordon, como buen mentor de los Power Rangers, los mantiene al tanto con los ataques que presenta la ciudad de Saltadilla, por lo que siempre mandan mensajes a los comunicadores de los Rangers. Desafortunadamente, a veces estos mensajes pasan por distintos ruteadores que no llegan a los Rangers, por lo que Zordon quiere saber si dicho mensaje llego\u0301 y por cua\u0301ntos ruteadores paso\u0301.",
    "input": "La primera li\u0301nea de entrada tiene dos nu\u0301meros enteros n y m: el nu\u0301mero de ruteadores y sus conexiones. Los ruteadores esta\u0301n numerados 1, 2, . . . , n. El mensaje se manda desde el ruteador 1 y debe llegar al ruteador n. Luego, hay m li\u0301neas que describen las conexiones. Cada li\u0301nea tiene dos nu\u0301meros enteros a y b: hay una conexio\u0301n entre esos ruteadores. Cada conexio\u0301n es entre dos ruteadores diferentes, y como ma\u0301ximo hay una conexio\u0301n entre dos ruteadores cualesquiera.",
    "output": "Si es posible enviar un mensaje, primero imprima k ( el nu\u0301mero mi\u0301nimo de ruteadores en una ruta va\u0301lida) y despue\u0301s imprima un ejemplo de tal ruta. Puedes imprimir cualquier solucio\u0301n va\u0301lida. Si no hay rutas, imprime ` IMPOSSIBLE` .",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 15401
  },
  {
    "title": "El mensaje del \u00e1rbol",
    "url": "https://omegaup.com/arena/problem/El-mensaje-del-arbol",
    "history": "Paquito y Brayan unieron fuerzas para esconder un mensaje oculto en una gra\u0301fica. Para poder descifrarlo, basta con encontrar el a\u0301rbol abarcador de costo mi\u0301nimo de la gra\u0301fica usando una adaptacio\u0301n del algoritmo de Prim. Las cadenas del mensaje descifrado aparecera\u0301n en el orden en el que el algoritmo incorpora aristas al a\u0301rbol abarcador. Cuando haya empate en el costo de las aristas que el algoritmo puede aceptar, el algoritmo debe preferir la arista que fue vista primero por el algoritmo, desempatando a su vez por el orden en el que las aristas se listan en la entrada.",
    "input": "Dos enteros n y m que representan el numero de ve\u0301rtice y aristas de la grafica. Cada arista esta\u0301 dada por sus dos extremos seguido de k que es el costo de la arista y una cadena s que forma parte del mensaje oculto en ella.",
    "output": "El mensaje oculto de la gra\u0301fica.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 14743
  },
  {
    "title": "S\u00edntesis Molecular",
    "url": "https://omegaup.com/arena/problem/pes-2022-sintestis-molecular",
    "history": "Siguiendo tu pasio\u0301n por viajar a lugares exo\u0301ticos, un di\u0301a decidiste visitar la Cueva Fold- Mani en Francia. Tu\u0301, siendo la persona aventurera que siempre has sido, decidiste dejar de seguir al gui\u0301a de la cueva a la mitad del tour y explorar el lugar por tu cuenta. Despue\u0301s de tres horas descendiendo por la cueva, te sorprendiste al ver una luz. Entre ma\u0301s te acercabas a la luz, notaste que en realidad lo que vei\u0301as era la luz de una la\u0301mpara rebotando contra lingotes de oro! Unos pasos ma\u0301s adelante, viste a Nicola\u0301s Flamel ma\u0301s vivo que nunca sentado en su silla, observando co\u0301mo entrabas. Despues de un rato conversando, Flamel te reto\u0301 a uno de sus famosos juegos. Siendo uno de los alquemistas ma\u0301s poderosos, teni\u0301a memorizadas todas las reacciones qui\u0301micas que transformaban una sustancia a otra. Para la conveniencia de todos, e\u0301l identifico\u0301 todas las sustancias con una letra y un nu\u0301mero. El juego es el siguiente: Todas las transformaciones esta\u0301n escritas en un pergamino, y son de la forma A B, representando que es posible transformar un objeto de tipo A a uno de tipo B. Por la naturaleza de la qui\u0301mica de Flamel, es imposible llegar a la misma substancia siguiendo una serie de transformaciones. Cada uno toma turnos transformando la sustancia, y el objetivo es llegar de un objeto tipo P a uno tipo Q. Gana el que ejecute la u\u0301ltima transformacio\u0301n. Sin embargo, Flamel tiene un giro interesante para el juego: durante todo el juego, entre los dos tienen derecho a jugar K \" doble turnos\" , es decir, pueden hacer dos transformaciones seguidas. Siendo un buen alquimista, Flamel te da la oportunidad de hacer la primera transformacio\u0301n ( nota que, si quisieras, puedes usar tu \" doble turno\" desde este primer turno) . Otro dato importante, ni a Flamel ni a ti les gusta el juego sucio, entonces e\u0301l te asegura que siempre habra\u0301 al menos una manera de llegar de P a Q con las transformaciones disponibles, y ambos acuerdan que no van a transformar el objeto de tal forma que se vuelva imposible llegar a Q. # ProblemaDada la lista de posibles transformaciones y las sustancias P y Q, determina quie\u0301n sera\u0301 el ganador del juego, suponiendo que Flamel y tu juegan de manera o\u0301ptima.",
    "input": "En la primera linea, dos nu\u0301meros N y K. En la segunda linea, dos tipos de objeto P y Q. Un tipo objeto es de la forma Gx, donde G es una letra y x es un numero sin ceros a la izquierda, por ejemplo \" B57\" o \" T3\" . En las siguientes N lineas, dos tipos de obeto A y B, que representan que es posible hacer una transformacion de A a B.",
    "output": "La palabra \" Flamel\" ( sin comillas) si Flamel gana o la palabra \" Nicolas\" ( sin comillas) si tu ganas ( tu\u0301 tambie\u0301n te llamas Nicola\u0301s, es meramente una coincidencia que seas tocayo de Flamel) .",
    "note": "",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": 14465
  },
  {
    "title": "Raccoon City",
    "url": "https://omegaup.com/arena/problem/Raccoon-City",
    "history": "Son las 3 a. m. en Raccoon City y nuestros amigos Chris, Jill y Barry esta\u0301n intentando escapar de un ataque zombie. Ellos se encuentran en la base de la polici\u0301a y quieren llegar al punto ma\u0301s alto de la ciudad, donde un helico\u0301ptero los esperara\u0301. Para confundir a los zombies, han decidido que Chris so\u0301lo puede viajar por calles, Jill por avenidas y Barry por carreteras. Adema\u0301s, saben que a los zombies se les dificulta subir en caminos empinados, por lo que el equipo ha decidido considerarlos caminos que estrictamente aumenten en altura. Por otro lado, hay puntos donde se cruzan estas carreteras, calles y avenidas, que pueden librarlos temporalmente de los zombies, pues si alguienpasa por un cruce, los zombies pensara\u0301n que nadie ma\u0301s pasara\u0301 luego por ahi, y si eventualmente alguien ma\u0301s del equipo llega al mismo cruce, no seencontrara\u0301 con ningun zombie. Es asi\u0301 que el equipo pide tu ayuda para que determines que\u0301 ruta de escape deben tomarde manera que se maximice el nu\u0301mero de cruces por el que pasen 2 o ma\u0301s miembros del equipo, sin importar si lo pasan al mismo tiempo o no.",
    "input": "La primera li\u0301nea contiene 2 nu\u0301meros N y M, el nu\u0301mero de intersecciones en la ciudad y el nu\u0301mero de miembros del equipo que necesitan escapar. Si M es 2, entoncessolo Chris y Jill necesitan escapar. Y si M es 3, Barry tambie\u0301n necesita escapar. Las intersecciones estan numeradas del 1 al N. La segunda li\u0301nea comienza con un nu\u0301mero E, el nu\u0301mero de caminos que puede tomar Chris. Luego siguen E pares de nu\u0301meros u y v, que significa que hay un camino directode la interseccion u a la v. La altura v es estrictamente mayor que la de u, por lo que Chris puede ir de u a v pero no de v a u. La tercera li\u0301nea es similar a la segunda pero con los caminos para Jill. Similarmente, si M es 3, entonces habra\u0301 una cuarta li\u0301nea con los caminos para Barry. Todos los miembros del equipo comienzan en la interseccio\u0301n 1 y quieren llegar a la N, donde esta\u0301 el helico\u0301ptero.",
    "output": "Imprime una u\u0301nica li\u0301nea con el maximo nu\u0301mero de intersecciones por el que van a pasar 2 o ma\u0301s miembros del equipo.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 13123
  },
  {
    "title": "El espejismo de la mayor\u00eda",
    "url": "https://omegaup.com/arena/problem/El-espejismo-de-la-mayoria",
    "history": "El espejismo de la mayori\u0301a se da cuando en una red un feno\u0301meno que no es mayoritario es percibido como mayoritario por la mayori\u0301a de los miembros de la red. \u00bfCo\u0301mo se percibe eso en una gra\u0301fica? Tomemos un pequen\u0303o ejemplo con una red social y cierta opinio\u0301n de un tema, cada nodo de la gra\u0301fica tiene una opinio\u0301n y tiene contactos que son las aristas de estos, la opinio\u0301n que percibe el nodo como mayoritaria sera\u0301 la opinio\u0301n que ma\u0301s se repite en sus contactos, por lo tanto, si unos pocos nodos tienen una opinio\u0301n diferente a la mayori\u0301a de la red, pero estos son muy influyentes, la opinio\u0301n mayoritaria que percibe la red social sera\u0301 la de estos pocos nodos, aunque la realidad sea diferente. Tu misio\u0301n sera\u0301 que, dada una gra\u0301fica que se te dara\u0301, calcular la opinio\u0301n mayoritaria que perciben los nodos de la gra\u0301fica y cuantos nodos perciben dicha opinio\u0301n.",
    "input": "Un entero N que significan los nodos de la gra\u0301fica, seguido, desde 0 hasta N \u2013 1 los datos del nodo N_ i que son, un cara\u0301cter C y un entero P que representan la opinio\u0301n del nodo y el nu\u0301mero de contactos del nodo respectivamente, y a estos le siguen P enteros que significan los i\u0301ndices de cada uno de los contactos que tiene el nodo N_ i, esto para cada uno de los N nodos. Si un nodo tiene el mismo nu\u0301mero de contactos con cada una de las opiniones, su opinio\u0301n mayoritaria sera\u0301 su propia opinio\u0301n.",
    "output": "Un caracter R y un entero I que representan cual es la opinio\u0301n mayoritaria que percibe la gra\u0301fica y cuantos nodos perciben esta opinio\u0301n, respectivamente. Puedes suponer que solo existen dos opiniones A y B, que los i\u0301ndices de los nodos esta\u0301n numerados desde 0 hasta N \u2013 1, que la gra\u0301fica no tiene ma\u0301s de 50 nodos y que no hay empates en la opinio\u0301n mayoritaria de toda la gra\u0301fica.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": 12922
  },
  {
    "title": "BOI 2016 - Boss",
    "url": "https://omegaup.com/arena/problem/Boss",
    "history": "Una empresa de n empleados debe hacer una reestructuracio\u0301n. En la jerarqui\u0301a resultante, representada como un a\u0301rbol con rai\u0301z, cada nodo sera\u0301 el jefe de sus hijos. Cada empleado tiene una lista de los jefes que aceptara\u0301n. Adema\u0301s, todos los empleados deben tener asignado un sueldo. El salario debe ser un nu\u0301mero entero positivo, y el salario de cada jefe tiene que ser mayor que la suma de los salarios de sus subordinados inmediatos. Tu tarea es estructurar la empresa para que todas las condiciones anteriores se mantengan, y la suma de todos los salarios sea tan pequen\u0303a como sea posible.",
    "input": "La primera li\u0301nea de entrada contiene un entero n: el nu\u0301mero de empleados. Los empleados esta\u0301n numerados 1, 2, . . . , n. Despue\u0301s de esto, la entrada contiene n li\u0301neas que describen las preferencias de los empleados. El ie\u0301simo dicha li\u0301nea contiene un nu\u0301mero entero k_ i, seguido de una lista de nu\u0301meros enteros k_ i. La lista consta de todos los empleados que el empleado i acepta como su jefe.",
    "output": "Un solo entero. La salida total del salario ma\u0301s bajo entre todas las reestructuraciones va\u0301lidas. Se asegura que existe al menos una solucio\u0301n.",
    "note": "",
    "topics": [
      "trees",
      "graphs",
      "shortest paths"
    ],
    "id": 4231
  },
  {
    "title": "Arboles Chistosos",
    "url": "https://omegaup.com/arena/problem/Arboles-Chistosos",
    "history": "A Fili le gustan mucho los a\u0301rboles. Recientemente el descubrio\u0301 un nuevo tipo de a\u0301rboles al que el llamo\u0301 * * a\u0301rbol chistoso* * . El a\u0301rbol consiste de N nodos numerados desde 1 hasta n, enraizado en el nodo 1, donde cada nodo i tiene un valor inicial A_ i. El a\u0301rbol tiene una propiedad especial: Cuando un valor * * val* * es an\u0303adido a el valor de un nodo * * i* * , el valor * * - val* * es an\u0303adido a todos los hijos de * * i* * . Nota que cuando an\u0303ades un valor * * - val* * a los hijos de un nodo i, tu tambie\u0301n tienes que sumar * * - ( - val) * * a los hijos de los hijos de * * i* * y asi\u0301 sucesivamente. Ve\u0301 los ejemplos para un mejor entendimiento. El a\u0301rbol soporta las siguientes operaciones: - * * 1 x val* * - > * * val* * es an\u0303adido al nodo * * x* * - * * 2 x* * - > Imprimir el valor actual del nodo xPara ayudar a Fili a entender mejor el funcionamiento del a\u0301rbol, tu tienes que responder M preguntas.",
    "input": "La primera linea contiene dos enteros N y M. La segunda linea contiene N enteros A_ i. Cada una de las siguientes N- 1 lineas contienen dos enteros u y v describiendo una arista entre el nodo u y el nodo v. Las siguientes M lineas describen las preguntas en el formato descrito anteriormente.",
    "output": "Para cada pregunta del tipo 2 imprimir el valor requerido.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "dfs and similar",
      "shortest paths",
      "trees"
    ],
    "id": 4050
  },
  {
    "title": "Caminos cortos",
    "url": "https://omegaup.com/arena/problem/Caminos-cortos",
    "history": "Se tiene un grafo de n nodos ( nu\u0301merados del 0 al * * n* * - 1) , dirigido y con pesos. Para cada nodo * * i* * , decir la longitud del camino mi\u0301nimo que empiece en el nodo 0, pase por el * * i* * y termine en el * * n* * - 1.",
    "input": "En la primera li\u0301nea se dan * * n* * y * * m* * , el nu\u0301mero de nodos y aristas, respectivamente. Las siguientes * * m* * li\u0301neas tienen 3 enteros cada una: * * a* * , * * b* * y * * c* * , que describen un arco que va del nodo * * a* * al nodo * * b* * con peso * * c* * .",
    "output": "Una li\u0301nea con * * n* * nu\u0301meros separados por espacios, la respuesta para cada nodo. Si para algu\u0301n nodo no existe un camino, imprimir - 1 como respuesta para ese nodo.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": 4012
  },
  {
    "title": "Meta Hack",
    "url": "https://omegaup.com/arena/problem/pes-2022-meta-hack",
    "history": "La COmpan\u0303i\u0301a del Metaverso Inteligente ( COMI) ha construido un nuevo mapa para que sus fieles subscriptores puedan relajarse despue\u0301s de un di\u0301a de trabajar intensamente. Tu\u0301, como oli\u0301mpico en contra de las convenciones establecidas por la sociedad, decidiste que quieres hackear este mapa por diversio\u0301n. El mapa puede ser representado como una serie de lugares importantes, desde los cuales hay varios pasillos que puedes usar en ambas direcciones para llegar a otros lugares importantes. El COMI quiere que los jugadores completen tareas en cada lugar importante para asi\u0301 poder ir desbloqueando los pasillos poco a poco, hasta llegar al nivel final. Tu\u0301, queriendo hackear este mapa para poder llegar al nivel final sin tener que completar las tareas, te pusiste a inspeccionar los pasillos y descubriste que es posible abrir algunos pasillos con una llave de administrador y otros con una tarjeta de administrador. Tambie\u0301n te diste cuenta que todos los pasillos de un lado se abren con una llave y del otro lado se abren con una tarjeta. Despue\u0301s de mucho buscar en internet, por fin averiguaste como construir las llaves y las tarjetas! Desafortunadamente, las tarjetas de administrador esta\u0301n hechas de titanio, y tu\u0301 solamente tienes acceso a llaves y tarjetas de pla\u0301stico. Despue\u0301s de buscar un poco ma\u0301s sin embargo, te diste cuenta que es posible utilizar las llaves y tarjetas de pla\u0301stico en los corredores, pero una vez que la usas, la quemari\u0301as tanto que ya no la podri\u0301as utilizar otra vez. Por esta razo\u0301n, decidiste llevar muchas llaves y tarjetas en tu mochila. Naturalmente, imprimir cosas en 3D es costoso, e imprimir muchas llaves o tarjetas puede levantar sospechas, entonces quieres minimizar el nu\u0301mero TOTAL de llaves y tarjetas que imprimes, de tal forma que asegures que puedes llegar desde el lugar inicial a cualquier otro. ( La razo\u0301n de esto es que todos los di\u0301as cambian la ubicacio\u0301n del nivel final, entonces quieres estar preparado para lo que sea. ) # ProblemaDada una lista de corredores ( u, v) , que representan que de u a v se llega con una llave ( entonces de v a u con una tarjeta) y el lugar inicial, regresa el mi\u0301nimo nu\u0301mero de llaves y tarjetas necesarias para poder llegar del lugar inicial a cualquier otro lugar.",
    "input": "En la primera linea dos nu\u0301meros N y M, que representan la cantidad total de lugares especiales y la cantidad de corredores que hay. En la segunda linea un nu\u0301mero S, el lugar inicial. En las siguientes M li\u0301neas, dos nu\u0301meros u, v, que representan que es posible llegar de u a v con llave y de v a u con tarjeta",
    "output": "El mi\u0301nimo nu\u0301mero total de llaves y tarjetas necesarias para llegar del lugar inicial a cualquier otro punto en el mapa.",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 15182
  },
  {
    "title": "Flip",
    "url": "https://omegaup.com/arena/problem/Flip",
    "history": "# DescriptionThis is a logic puzzle in which you have a square grid of 3x3 cells. Each cell is initially either white or black. When you click on a square it flips, or toggles, the color of that square and the colors of its four immediate north, south, east and west neighbors that exist ( they don\u2019t exist if they would be outside the grid) . The problem is to find the minimum number of cell clicks to transform a grid of all white cells into the input grid ( which is always possible) . You cannot rotate the grid. ! [ The Sample Problems] ( flip. jpg)",
    "input": "The first value in the input file is an integer P ( 0 \u2264 P \u2264 50) on a line by itself giving the number of problems to solve. For each of the P problems, 3 lines of 3 characters describe the input grid. The characters in the grid descriptions are \u2018* \u2019 ( for black) and \u2018. \u2019 ( for white) .",
    "output": "For each problem output a single integer giving the minimum number of clicks necessary to transform a grid of all white cells into the pattern given in the input. # Example| | input2* . . * * . * . . * * * * . . . . * | | output13| | end",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": 14808
  },
  {
    "title": "Corriendo y saludando por la UAM",
    "url": "https://omegaup.com/arena/problem/Corriendo-y-saludando-por-la-UAM",
    "history": "En un mundo donde no hubo covicho Paquito pronto regresara a la poderosi\u0301sima UAM azc por lo que esta planeando una estrategia para llegar a tiempo a los salones donde tiene clase pero como Paquito es un poco flojo tambie\u0301n quiere saber el esfuerzo que le toma ir por la ruta mas optima de partiendo de un salo\u0301n A a un salo\u0301n B por lo que hace un registro de cuanto tiempo y esfuerzo le toma pasar por los salones adema\u0301s de que sus amigos le han dicho sobre que caminos estara\u0301n para que lo puedan ver y lo saluden por lo que an\u0303ade este dato a su registro para asi\u0301 el trimestre que vine se prepare fi\u0301sicamente para aguantar el fuerzo que le tomara llegar temprano y cuantos amigos lo saludaran.",
    "input": "Dos enteros n y m que representan el numero de los salones que existen y el numero de caminos que los conectanseguido de m quintadas que representan los puntos a b el tiempo( t) que le toma de ir de a a b el esfuerzo ( e) y el numero de amigos( a) que estan en ese trayecto",
    "output": "Un entero k y d que representa el tiempo mi\u0301nimo yendo a los salones mas cortos en tiempo de llegada y los amigos que no pudo saludar con esa estrategia. Seguido de 4 li\u0301neas de enteros: * La primera representa los tiempos mi\u0301nimos que le toma pasar de el punto a cualquier salo\u0301n. * La segunda representa el esfuerzo que le tomo siguiendo esa estrategia anterior. * La tercera representa la suma de amigos que lo saludaron al tomar esa estrategia* El camino por donde paso paco para llegar del punto incial ( 0) A a B ( n- 1) en reversa o\u0301sea de B a A que minimiza el tiempo",
    "note": "",
    "topics": [
      "trees",
      "shortest paths",
      "graphs"
    ],
    "id": 14690
  },
  {
    "title": "La incubadora marciana",
    "url": "https://omegaup.com/arena/problem/La-incubadora-marciana",
    "history": "Los huevos de los marcianos se almacenan en N cuevas subterra\u0301neas numeradas de la 0 a la N- 1. En principio, cada cueva almacena un u\u0301nico huevo y e\u0301ste permanecera\u0301 ahi\u0301 durante un tiempo antes de transportarlo a la incubadora que esta\u0301n por construir. Dicha incubadora se construira\u0301 sobre alguna de las cuevas, pero los huevos que este\u0301n en otras cuevas debera\u0301n transportarse siguiendo algunos de los M sinuosos senderos que existen entre ellas. \u00bfSobre cua\u0301l cueva C se debe construir la incubadora si se desea minimizar la suma S de las distancias necesarias para transportar todos los huevos?",
    "input": "Dos enteros N, M seguidos de M tripletas de enteros I, J, L que denotan la existencia de un sendero de longitud L entre las cuevas I y J. Puedes suponer que 1 \u2264 N \u2264 100, que existen senderos que permiten llegar de cualquier cueva a cualquier otra y que no hay ma\u0301s de un sendero entre cada pareja de cuevas distintas. Adema\u0301s, para cada sendero puedes suponer que 0 \u2264 I = \u0338 J < N y que 1 \u2264 L \u2264 1000.",
    "output": "Dos enteros C y S. Si hubiera ma\u0301s de una posible cueva C, debera\u0301s imprimir la de i\u0301ndice menor.",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 13908
  },
  {
    "title": "Serpientes y escaleras en solitario",
    "url": "https://omegaup.com/arena/problem/2da-ccp-serpientes-escaleras",
    "history": "Uno de tus juegos de mesa favoritos es el famoso \" Serpientes y Escaleras\" . Este juego consta de un tablero de N celdas ( en este caso, numeradas de 0 a N- 1) y el jugador en turno avanza su ficha dependiendo del tiro de un dado. Adema\u0301s, hay serpientes y escaleras que conectan celdas con otras: si la ficha cae en una celda con serpiente al terminar su turno, la ficha sigue automa\u0301ticamente la serpiente y bajara\u0301 a una celda menor; algo similar ocurre al caer en una escalera, pero ella nos dejara\u0301 en una celda mayor. Las serpientes y las escaleras son unidireccionales: no se puede subir por una serpiente ni se puede bajar por una escalera. Pueden ocurrir serpientes o escaleras encadenadas y se deben respetar, pero cada celda origina a lo mucho una serpiente o una escalera. Normalmente, el juego involucra dos o ma\u0301s jugadores donde todos comienzan en la celda 0 y el objetivo es llegar primero a la celda N- 1. Aunque por la pandemia no tienes contrincantes a quienes retar, eso no evitara\u0301 que te diviertas, ya que ahora lo que te interesa saber es cua\u0301l es la cantidad mi\u0301nima de tiros que necesitas para completar el juego, y que\u0301 valor debe arrojar el dado en cada tiro.",
    "input": "Dos enteros N y M donde M denota la cantidad de serpientes o escaleras en el tablero. Posteriormente, M parejas de enteros I, J tales que caer en la celda I nos transferira\u0301 automa\u0301ticamente a la celda J ( una serpiente ocurre cuando J < I y una escalera ocurre cuando J > I) . Puedes suponer 1 \u2264 N \u2264 100000, que 0 \u2264 I = \u0338 J < N, que 0 \u2264 M < N y que no existen serpientes en la celda N - 1.",
    "output": "Imprime la secuencia ma\u0301s corta de tiros de un dado que permitan que la ficha llegue de la celda 0 a la celda N- 1. En caso de existir ma\u0301s de una solucio\u0301n, puedes imprimir cualquiera de ellas. En caso de no existir solucio\u0301n, imprime el entero - 1.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": 12978
  },
  {
    "title": "La visita al Sombrerero y a la Liebre",
    "url": "https://omegaup.com/arena/problem/La-visita-al-Sombrerero-y-a-la-L",
    "history": "Alicia estaba a la orilla del bosque cuando vio al Gato de Cheshire en la rama de un a\u0301rbol. Como no habi\u0301a nadie ma\u0301s a la vista, Alicia le pregunto\u0301 que\u0301 camino debi\u0301a seguir. El Gato le contesto\u0301 que eso dependi\u0301a de a do\u0301nde queri\u0301a ir, pues por alli\u0301 vivi\u0301a el Sombrerero y por alla\u0301 vivi\u0301a la Liebre. Como esa respuesta confundio\u0301 au\u0301n ma\u0301s a Alicia, el Gato fue un poco ma\u0301s expli\u0301cito y le dijo: \" Este bosque tiene N claros, unidos por M senderos. Nosotros estamos en el claro G y el Sombrerero vive en el claro S. La Liebre vive en el claro ma\u0301s lejano a donde vive el Sombrerero\" . Si Alicia siempre usa la ruta ma\u0301s corta para caminar por el bosque, \u00bfcua\u0301ntos senderos debe recorrer Alicia para visitar al Sombrerero? Y desde alli\u0301, \u00bfcua\u0301ntos senderos debe recorrer Alicia para visitar a la Liebre?",
    "input": "El primer renglo\u0301n contiene los cuatro enteros N, M, G y S. Cada uno de los siguientes M renglones contiene dos enteros A_ i, B_ i que son una pareja de claros unidos por un sendero. Puedes suponer que es posible llegar de un claro del bosque a cualquier otro.",
    "output": "La cantidad de senderos que debe recorrer Alicia para ir de G a S, seguida de la cantidad de senderos que debe recorrer Alicia para ir de S al claro ma\u0301s lejano. # RangosPuedes suponer que 3 \u2264 N \u2264 1000, que N- 1 \u2264 M \u2264min( N^ 2 - N/ 2, 3N) y que 0 \u2264 G, S, A_ i, B_ i < N.",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 12284
  },
  {
    "title": "Essalud",
    "url": "https://omegaup.com/arena/problem/essalud",
    "history": "La familia Rimeda es una de las tantas familias afectadas por la restriccio\u0301n domiciliaria durante la cuarentena pues tiene un miembro familiar que sufre de problemas pulmonares. Ellos tienen mucho miedo que haya un problema grave y deban llevarlo de emergencia al hospital donde tienen asegurado a este familiar. El papa\u0301 te ha pedido que por favor, encuentres el camino ma\u0301s interesante para ellos cuando alguna emergencia se presente. Cuando escuchas este pedido inmediatamente te preguntas \u00bfQue\u0301 significa lo ma\u0301s interesante para ellos? y el sen\u0303or Rimeda te aclara que su familia tiene diferentes preferencias para escoger caminos, por ejemplo, a los nin\u0303os les gusta pasar por zonas que tengan ma\u0301s vegetacio\u0301n. A la sen\u0303ora Rimeda le gusta pasar por zonas que tengan polici\u0301as porque asi\u0301 se sentira\u0301 segura y al sen\u0303or Rimeda le gusta lugares que no tengan muchos sema\u0301foros; entre otras preferencias. Mientras el lugar por el que pasen tenga ma\u0301s de estos elementos interesantes la ruta sera\u0301 ma\u0301s atractiva. Con toda tu experiencia de desarrollador, propones a la familia Rimeda lo siguiente: 1. La fami\u0301lia Rimeda debe preparar una hoja de ca\u0301lculo con todos los lugares que conozcan que sean interesantes para la ruta hasta el hospital. 2. Por cada lugar, anotar en una fila todas las caracteri\u0301sticas que tiene ese lugar, por ejemplo: * * Av. Unio\u0301n* * : polici\u0301as: * * SI* * , sema\u0301foros: * * SI* * , zonasverdes: * * NO* * , . . . . 3. La fami\u0301lia Rimeda te dara\u0301 una lista de elementos que ellos quieren que este\u0301n presente en su eleccio\u0301n, por ejemplo: polici\u0301as: * * SI* * , sema\u0301foros: * * NO* * , zonasverdes: * * SI* * . . . 4. Escogera\u0301s la ruta ma\u0301s ma\u0301s cercana considerando la preferencia de la familia Rimeda y adema\u0301s la distancia entre los puntos que ellos te han dado. La fami\u0301lia Rimeda acepta tus condiciones y adema\u0301s te pide que tu\u0301 tambie\u0301n adiciones otra lista de lugares que ellos no han consierado. Accedes a su pedido y mientras ambas partes preparan el documento, piensas que la fami\u0301lia Rimeda no sera\u0301 la u\u0301nica en pedirte este tipo de solucio\u0301n asi\u0301 que preparara\u0301s un algoritmo para retornar la ruta ma\u0301s cercana e interesante posible. Para continuar con el procesamiento transformas las elecciones de los Rimeda a una secuencia de 0s e 1s para indicar si dicho elemento esta\u0301 o no esta\u0301. Adema\u0301s, h( ? ) indicara\u0301 el valor de preferencia de la fami\u0301lia Rimeda y se calculara\u0301 como la cantidad de elementos considerados, dividido por la cantidad de elementos iguales ma\u0301s 1, todo al cuadrado. Ejemplo: Rimeda: 101Av. Unio\u0301n: 110H( Av. Union) = ( 3 / ( 1+ 1) ) ^ 2 = ( 1. 5) ^ 2 = 2. 25( solo el primer elemento fue igual 1= 1) La distancia entre un punto a y otro b estara\u0301 determinado por la distancia euclidiana: \u221a( ( a_ x- b_ x) ^ 2 + ( a_ y- b_ y) ^ 2 ) . Para todos lo casos si es que voy de un lugar de intere\u0301s X a otro de intere\u0301s Y debo considerar la distancia euclidiana entre X a Y, sumada al valor de preferencia para llegar a Y.",
    "input": "El archivo de entrada contendra\u0301 varios casos de prueba. Cada caso de prueba comenzara\u0301 con una li\u0301nea que tendra\u0301 5 nu\u0301meros enteros separados entre si: N, R, H, I, C. * N ( 2 \u2264 N \u2264 2000) que indica la cantidad de lugares interesantes. Todo lugar estara\u0301 enumerado de 1 a N. La casa de la fami\u0301lia Rimeda esta\u0301 inclui\u0301da en esta lista, asi\u0301 como el hospital destino. * R ( 1 \u2264 N) indica la casa de la fami\u0301lia Rimeda. * H ( 1 \u2264 N) indica al hospital destino. Luego vendra\u0301n N li\u0301neas conteniendo 2 enteros y una cadena de taman\u0303o I ( 1 \u2264 I \u2264 32) . Cada i- e\u0301sima li\u0301nea indicara\u0301 la informacio\u0301n del i- e\u0301simo lugar interesante. Los dos primeros nu\u0301meros indican las posiciones x, y ( - 1000 \u2264 x, y \u2264 1000) del i- e\u0301simo lugar y la cadena que sigue tendra\u0301 valores 0s y 1s indicando la presencia o no del elemento de intere\u0301s representado por su posicio\u0301n en dicha cadena. Finalmente aparecera\u0301n C ( 1 \u2264 C \u2264 50000) li\u0301neas, cada una con dos enteros, indicando que hay una ruta de ida y venida entre el primer y el segundo valor. Cuando se lea un valor N= 0, este indicara\u0301 el final del archivo de entrada y no debera\u0301 ser procesado.",
    "output": "Por cada entrada, imprimir en una sola li\u0301nea la ruta ma\u0301s interesante colocando en orden el nu\u0301mero del lugar interesante que se visitari\u0301a para llegar desde R hasta H. Debe dejar un espacio en blanco entre lugar y lugar. Si hubiera empate, escoger la ruta con la menor cantidad de lugares interesantes, si au\u0301n hubiera empate, escoger la ruta lexicogra\u0301ficamente menor. | | input3 1 3 5 33 4 101004 5 101005 4 110111 32 31 24 1 4 5 43 4 101004 5 101004 4 110105 4 110111 21 32 43 40 0 0 0| | output1 31 2 4| | end",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 12196
  },
  {
    "title": "Obsesi\u00f3n por la pizza",
    "url": "https://omegaup.com/arena/problem/Obsesion-por-la-pizza",
    "history": "Hoy te sientes de muy buen humor, pues has logrado solucionar un problema de programacio\u0301n que te ha tomado meses en encontrar la respuesta. Para celebrar has ordenado una pizza. Por fin, un largo rato despue\u0301s ha llegado tu pizza. El repartidor te jura que ha ido por el camino ma\u0301s ra\u0301pido e incluso te lo anota. Pero tu no le crees, es ma\u0301s, no sabes si la ruta si quiera es posible o correcta. Haz decidido comprobarlo por tu cuenta. La ciudad esta\u0301 representada como una red de intersecciones y calles. En esta ciudad extran\u0303a todas las calles son de ambos sentidos. Dado el camino que tomo\u0301 el repartidor, confirma si la ruta es correcta y la ma\u0301s ra\u0301pida ( puede que exista mas de una) .",
    "input": "En la primer li\u0301nea tres enteros 3\u2264 n \u2264 1000, n- 1 \u2264 m \u2264n* ( n- 1) / 2, 2 \u2264 p \u2264 n el nu\u0301mero de intersecciones y calles, y la interseccio\u0301n donde se ubica la pizeri\u0301a. Luego siguen m li\u0301neas cada una con tres enteros 1\u2264 u_ i, v_ i \u2264 n, 1\u2264 x \u2264 1e5 lo cual indica que existe un camino entre las intersecciones u_ i y v_ i con una longitud de x. Luego un entero r, la cantidad de intersecciones por donde paso\u0301 el repartidorFinalmente, una sucesio\u0301n de enteros describiendo las intersecciones por donde paso\u0301 el repartidorTu casa esta\u0301 en la interseccio\u0301n 1.",
    "output": "Si el repartidor tomo\u0301 la ruta ma\u0301s ra\u0301pida imprime \" Ok\" sin comillas, de lo contrario imprime \" > : ( \" tambie\u0301n sin comillas.",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 11751
  },
  {
    "title": "Alejando la bomba en la gr\u00e1fica",
    "url": "https://omegaup.com/arena/problem/Alejando-la-bomba-en-la-grafica",
    "history": "Hay R robots en una gra\u0301fica completa de N ve\u0301rtices y una bomba en el ve\u0301rtice 0 de la misma: tu objetivo es usar los robots para alejar la bomba lo ma\u0301s posible del ve\u0301rtice 0. Cada robot comienza en algu\u0301n ve\u0301rtice y tiene una cantidad de energi\u0301a que puede usar para recorrer la gra\u0301fica. Cuando un robot alcanza la bomba, e\u0301ste puede cargarla y lleva\u0301rsela ( el robot gasta la misma cantidad de energi\u0301a caminando con o sin la bomba) ; el robot puede soltar la bomba en cualquier momento o bien, soltarla hasta que se acabe su energi\u0301a y ya no pueda avanzar ma\u0301s. Si fuera posible, el siguiente robot puede ir a recoger la bomba en la posicio\u0301n en la que quedo\u0301 para seguir aleja\u0301ndola. Los robots trabajan en estricto orden secuencial segu\u0301n el orden dado por la entrada. Escribe un programa que determine que\u0301 tan lejos puede alejarse la bomba si se usan los robots de manera o\u0301ptima. Los robots pueden soltar la bomba en un ve\u0301rtice o incluso en una posicio\u0301n fraccionaria dentro de una arista.",
    "input": "Un entero N seguido de la matriz de adyacencia de una gra\u0301fica completa de N ve\u0301rtices ( los ve\u0301rtices se numeran impli\u0301citamente de 0 a N- 1 y cada entrada de la matriz es un entero que denota la longitud de la arista que une los ve\u0301rtices respectivos) . Posteriormente, un entero R seguido de R parejas de enteros V, E donde la i- e\u0301sima pareja denota el ve\u0301rtice inicial y la energi\u0301a del i- e\u0301simo robot. Puedes suponer que 0 \u2264 R < N \u2264 50 y que todas las longitudes y energi\u0301as esta\u0301n en el rango de 0 a 1000.",
    "output": "Un real que sea la distancia ma\u0301xima a la que puede alejarse la bomba del ve\u0301rtice 0. La respuesta se considerara\u0301 correcta si nume\u0301ricamente esta\u0301 razonablemente cerca de la respuesta exacta.",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs",
      "dp"
    ],
    "id": 10160
  },
  {
    "title": "Camino m\u00e1s corto con cupones",
    "url": "https://omegaup.com/arena/problem/Camino-mas-corto-con-cupones",
    "history": "Tu pai\u0301s tiene N ciudades y definitivamente la ciudad ma\u0301s cao\u0301tica es la 0 ( donde tu\u0301 vives) . Como necesitas vacaciones urgentemente, esta\u0301s planeando ir el pro\u0301ximo verano a la ciudad N - 1 que es famosa por ser un parai\u0301so tropical. Por otra parte, las carreteras que conectan las distintas ciudades del pai\u0301s cobran ciertas cuotas y no quisieras gastar demasiado dinero tan so\u0301lo en llegar a tu destino. Afortunadamente, cuentas con un cupo\u0301n que podra\u0301s usar en la carretera de tu eleccio\u0301n para omitir el pago de su cuota. \u00bfCua\u0301l es el costo mi\u0301nimo total al que podra\u0301s viajar de la ciudad 0 a la N - 1?",
    "input": "Dos enteros N, M seguidos de M tripletas de enteros A, B, C que denotan la existencia de una carretera que conecta las ciudades A y B con cuota C. Puedes suponer que 1 \u2264 N \u2264 10^ 4, que 0 \u2264 M \u2264 10^ 5, que 0 \u2264 A, B < N y que 1 \u2264 C \u2264 100.",
    "output": "Un entero que es el costo mi\u0301nimo para viajar de la ciudad 0 a la ciudad N - 1 o el entero - 1 si es imposible.",
    "note": "",
    "topics": [
      "graphs",
      "data structures",
      "implementation",
      "shortest paths"
    ],
    "id": 10150
  },
  {
    "title": "Juanjo el temible",
    "url": "https://omegaup.com/arena/problem/El-temible-Juanjo",
    "history": "Hoy Juanjo se levanto\u0301 enojado, es decir, si te lo encuentras es muy probable que te regan\u0303e. Sin embargo, tu sabes algo de Juanjo, e\u0301l so\u0301lo puede estar * * T- enojado* * , afortunadamente hoy en CUCEI hay una feria y hay ` K` puestos de taquitos. Para una persona normal 1 taquito le satisface en 1 unidad de anti- enojo; pero para Juanjo esto * * no* * sucede de la misma manera, e\u0301l empieza comiendo 1 taquito como el resto de nosotros satisfacie\u0301ndose en una 1 unidad de anti- enojo, pero si come 2 taquitos la cantidad de anti- enojo sigue mantenie\u0301ndose y al momento de comer 3 la cantidad de anti- enojo aumenta en 1, . . . , resumiendo lo descrito anteriormente: Juanjo so\u0301lo obtiene 1 unidad de anti- enojo si come exactamente 1 taquito ma\u0301s que la cantidad anterior de taquitos ( no importa que para llegar a esa cantidad de taquitos los haya comido en diferentes casillas o en la misma, Juanjo jama\u0301s pierde la cuenta de cuantos lleva comidos, despue\u0301s de obtener 1 unidad ma\u0301s de anti- enojo su cuenta de taquitos vuelve a empezar) . Juanjo no puede resistirse a los taquitos y menos hoy que son gratis, asi\u0301 que si puede llegar a una casilla de * * dos formas diferentes pero con el mismo tiempo* * preferira\u0301 aquella que le permita comer la * * mayor* * cantidad de taquitos, si esto * * no* * es posible preferira\u0301 llegar * * con el menor tiempo posible* * sacrificando los preciados taquitos : c. * * Nota 1: * * El tiempo que una persona tarda en comer taquitos es * * despreciable* * . ! [ enter image description here] [ 1] Tu\u0301 y tus amigos esta\u0301n en CUCEI y quieren salvarse de recibir un regan\u0303o, para esto deberi\u0301an de ir a un salo\u0301n, ahi\u0301 Juanjo no puede regan\u0303arte porque no puede interrumpir una clase y por lo tanto estara\u0301s a salvo si permaneces ahi\u0301. Si no puedes llegar a un salo\u0301n Juanjo puede regan\u0303arte. Se te da un tablero de ` N x M` que representa a CUCEI, donde los caracteres de la ` ' A' ` a la ` ' Z' ` te representan a ti y a tus amigos, la ` ' J' ` representa a Juanjo, ` ' ? ' ` representa un a\u0301rbol al que no puedes atravesar, ` ' . ' ` representa el camino por donde puedes pasar libremente, la ` ' s' ` representa un salo\u0301n, adema\u0301s de ` ' t' ` que representa un lugar dentro de CUCEI donde hay un puesto de taquitos gratis. Juanjo quiere saber a quienes puede regan\u0303ar. Para esto e\u0301l ignora a todas las dema\u0301s personas y so\u0301lo buscara\u0301 regan\u0303arte a ti. Esto lo hace para cada persona existente en el mapa. ! [ Caso de prueba ilustrado] [ 3] * * Nota 2: * * Tanto Juanjo, tus amigos y tu\u0301 se mueven en las 4 direcciones cardinales ( arriba, abajo, izquierda y derecha) , el tiempo que tardas en desplazarte de una casilla a otra es 1 segundo. * * Nota 3: * * Una unidad de anti- enojo quita una unidad de enojo, pero eso tu\u0301 ya lo sabi\u0301as. * * Nota 4: * * Juanjo puede esperar en una casilla el tiempo que sea necesario con para regan\u0303arte especi\u0301ficamente a ti. Juanjo siendo una persona muy ordenada decidio\u0301 hacer una lista de sus prioridades, siempre acata\u0301ndolas en orden: ! [ enter image description here] [ 2]",
    "input": "La primera linea contendra\u0301 una cantidad ` N` indicando la cantidad de filas, ` M` la cantidad de columnas, ` K` la cantidad de puestos de taquitos y ` T` la cantidad de T- enojo que tiene hoy Juanjo. Las siguientes ` N x M` son la cantidad de caracteres que representan al mundo en donde Juanjo regan\u0303ara\u0301 y comera\u0301 taquitos. Las siguientes ` K` lineas indicara\u0301n la cantidad de taquitos que hay en cada celda empezando de izquierda a derecha de arriba a abajo.",
    "output": "1 linea con un entero ` P` indicando cuantas personas fueron regan\u0303adas por Juanjo. ` P` lineas indicando cuales personas fueron regan\u0303adas, ordenadas alfabe\u0301ticamente, - 1 en caso de que nadie haya sido regan\u0303ado. | | input11 10 13 1s. . . ss. . . s? R. . ? ? . . t? . . t. . . . ttU. ? ? ? . . . tJC. B. . . . . tt. . . . ? . . . . ? . . . . t. . . . . . ts? . . ss. tt. . . tt? ? . . . . . A. . . . . . . . . . ? . . F. ? s1 1 1 1 1 1 1 1 1 1 1 1 1| | output0- 1| | end| | input11 10 13 3s. . . ss. . . s? R. . ? ? . . t? . . t. . . . ttU. ? ? ? . . . tJC. B. . . . . tt. . . . ? . . . . ? . . . . t. . . . . . ts? . . ss. tt. . . tt? ? . . . . . A. . . . . . . . . . ? . . F. ? s1 1 1 1 1 1 1 1 1 1 1 1 1| | output1U| | end# Li\u0301mites- 1 < = N < = 50- 1 < = M < = 50- 0 < = K < = 1000- 0 < = T < = 1, 000, 000, 007- 0 < = taquito[ i] < = 1, 000, 000",
    "note": "",
    "topics": [
      "shortest paths",
      "dp",
      "graphs"
    ],
    "id": 9149
  },
  {
    "title": "Amehc vs Citalord",
    "url": "https://omegaup.com/arena/problem/Amehc-vs-Citalord",
    "history": "Amehc, un raro ser humano nativo de Veracruz es motivo de estudio de muchos cienti\u0301ficos. Estos cienti\u0301ficos estudian principalmente su forma de desplazamiento. Para un estudio de manera mas grafica y visual, los cienti\u0301ficos recomiendan imaginar Veracruz como una cuadri\u0301cula de dimensiones N* M. Al ser una ciudad pueden existir casillas bloqueadas, ya sea por casas, automo\u0301viles o muchas otras cosas. Lo que han descubierto los cienti\u0301ficos es lo siguiente: - Amehc tiene un robot. - Por alguna extran\u0303a razo\u0301n Amehc siempre quiere salir de su casa e ir a dos lugares diferentes, llame\u0301moslos el lugar A y el lugar B. - Amech siempre se dirige al lugar A y manda a su robot al lugar B. - No deberi\u0301a ser sorpresa que tanto Amehc y su robot se mueven de una manera muy particular ( adema\u0301s de que siempre buscan llegar a su destino en el menor numero de pasos) . - En un paso tanto Amehc como su robot pueden ir a cualquier casilla adyacente, es decir, que compartan un lado. Siempre con la siguiente prioridad: Norte , Este , Sur y Oeste. - Si alguien llega a su destino antes que el otro se va a quedar sin moverse en la casilla hasta que el otro llegue a la suya, es decir, si Amehc llega al punto A antes que su robot al punto B, Amehc va a esperar sin moverse en el punto A hasta que su robot llegue. Ana\u0301logamente si su robot llega primero. - Una vez que ambos llegan a su destino deciden regresar al lugar donde comenzaron sus movimientos, ahora con la peculiaridad de que regresan exactamente por el camino en que llegaron. # ProblemaEl malvado Citalord se desperto\u0301 con ganas de molestar a Amehc y va a bloquear exactamente una casilla que antes no lo estaba, justo en el momento en que tanto Amehc y su robot esta\u0301n a su destino. Recuerda que si alguno llega primero decide esperar hasta que el otro llegue\u0301 al suyo. Va a bloquear aquella casilla talque ni Amehc ni su robot puedan llegar al comienzo y adema\u0301s que esta casilla este lo mas alejada de su casa.",
    "input": "En la primera li\u0301nea N y M, las dimensiones del mundo. En la segunda li\u0301nea dos enteros F_ c y C_ c, la fila y la columna en la que empieza tanto Amehc como su robot respectivamente. En la tercera li\u0301nea dos enteros F_ a y C_ a, la fila y la columna donde se encuentra el punto A. En la cuarta li\u0301nea dos enteros F_ b y C_ b, la fila y la columna donde se encuentra el punto B. En las siguientes N li\u0301neas habra\u0301 M caracteres que representan el mundo. - ' . ' : Representa una casilla por la que se puede pasar. - ' # ' : Representa una casilla bloqueada.",
    "output": "Las coordenadas de la casilla que Citalord debe bloquear.",
    "note": "",
    "topics": [
      "matrices",
      "graphs",
      "shortest paths",
      "implementation",
      "dfs and similar",
      "math"
    ],
    "id": 6517
  },
  {
    "title": "Atrapando al ladr\u00f3n",
    "url": "https://omegaup.com/arena/problem/Atrapando-al-ladron",
    "history": "Un ha\u0301bil ladro\u0301n acaba de robarse un valioso boti\u0301n y esta\u0301 esperando que un helico\u0301ptero de la mafia llegue por e\u0301l para escapar. Mientras tanto y para evitar ser atrapado, el ladro\u0301n esta\u0301 movie\u0301ndose por la ciudad de una manera aparentemente erra\u0301tica. Tu\u0301 eres el mejor polici\u0301a de la ciudad y tu labor es capturarlo lo ma\u0301s ra\u0301pido posible antes de que escape. Afortunadamente, una llamada ano\u0301nima te indico\u0301 en que\u0301 lugares estara\u0301 el ladro\u0301n antes de que pueda escapar. La ciudad esta\u0301 descrita por N ve\u0301rtices numerados de 0 a N - 1 y por M aristas o calles de doble sentido. Tu posicio\u0301n inicial es el ve\u0301rtice 0 y te toma un minuto moverte por una arista para llegar a otro ve\u0301rtice. El ladro\u0301n tiene la misma velocidad y puedes optar por no cambiar de ve\u0301rtice si sabes que el ladro\u0301n llegara\u0301 a donde tu\u0301 esta\u0301s. Escribe un programa que calcule la menor cantidad de minutos que necesitara\u0301s para atrapar al ladro\u0301n o si sera\u0301 imposible capturarlo.",
    "input": "Los enteros N, M seguidos de M parejas de enteros que denotan los ve\u0301rtices unidos por cada una de las M aristas. Posteriormente un entero L seguido de L enteros p_ 0, p_ 1, . . . , p_ L- 1 donde p_ i denota el ve\u0301rtice donde estara\u0301 el ladro\u0301n al minuto i. El ladro\u0301n escapa al minuto L. Puedes suponer que 0 \u2264 N, L \u2264 10, 000 y 0 \u2264 M \u2264 100, 000.",
    "output": "Un entero que sea la menor cantidad de minutos que se necesitan para atrapar el ladro\u0301n o el valor - 1 si es imposible capturarlo.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": 5775
  },
  {
    "title": "Mario rescata a Peach",
    "url": "https://omegaup.com/arena/problem/Mario-rescata-a-Peach",
    "history": "Mario debe rescatar a Peach, El mundo de Mario consiste de muros( * * # * * ) , espacios libres( * * . * * ) , lugares especiales( * * E* * ) , el lugar donde inicia Mario que adema\u0301s es un espacio libre( * * M* * ) , el lugar donde se encuentra Peach( * * P* * ) que tambie\u0301n es un espacio libre, los lugares especiales son espacios libres hacia los cuales puedes teletransportarte en cualquier momento y le toma k segundos, Mario puede moverse hacia la derecha, arriba, abajo o la izquierda un espacio por segundo obviamente no puede atravesar muros, sin embargo, Mario tiene un martillo que le permite derrumbar muros, se tarda 1 segundo en derribar un muro y para poder derribar un muro este debe estar adyacente a e\u0301l( arriba, abajo, derecha, izquierda) . Ayuda a Mario a salvar a la princesa.",
    "input": "En la primer li\u0301nea N, M y k las dimensiones del mundo y el costo de teletransportarse. Luego N li\u0301neas con M elementos que pueden ser * * # * * , . , E, M o P",
    "output": "El mi\u0301nimo tiempo que le toma a Mario rescatar a la princesa.",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 4206
  },
  {
    "title": "Trampas",
    "url": "https://omegaup.com/arena/problem/trampas",
    "history": "El aventurero Ah Balam se perdio\u0301 accidentalmente en un laberinto lleno de trampas. Por fortuna, en su intento por salir, Ah Balam encontro\u0301 un mapa del laberinto. El mapa del laberinto consta de una cuadricula de N filas por M columnas. Las filas estan numeradas de 1 a N de arriba hacia abajo( norte a sur) , las columnas estan numeradas de 1 a M de izquierda a derecha( oeste a este) . Cada casilla de la cuadricula contiene solo uno de estos 4 caracteres: ' S' , ' . ' , ' x' y ' # ' , que representan la salida, suelo sin trampa, suelo con trampa y pared. Ah Balam, como todo mortal, no puede caminar a trave\u0301s de las paredes, y solo puede moverse hacia 4 direcciones( norte, sur, este y oeste) , NO se puede mover en diagonal. Por ejemplo, si en el siguiente laberinto Ah Balam se encuentra inicialmente en la fila 2 columna 6, tendri\u0301a que pasar por al menos 2 trampas para llegar a la salida: # # # # # # # # # . S. # . . # # xxx# . # # # . . . x. # # # . . . # x# # # . . . x. # # # # # # # # # # Ah Balam ha solicitado tu ayuda. # ProblemaEscribe un programa que dada la posicio\u0301n inicial de Ah Balam y el mapa del laberinto, determine cual es el minimo nu\u0301mero de trampas por las que Ah Balam tiene que pasar para llegar a la salida.",
    "input": "Li\u0301nea 1: 2 enteros separados por un espacio que representan a N y M respectivamenteLi\u0301nea 2: La fila y la columna donde se encuentra inicialmente Ah Balam. Siguientes N li\u0301neas: M caracteres en cada una donde el j- e\u0301simo caracter de la i+ 2- e\u0301sima li\u0301nea representa la celda j de la fila i. * * Ejemplo: * * 7 82 6# # # # # # # # # . S. # . . # # xxx# . # # # . . . x. # # # . . . # x# # # . . . x. # # # # # # # # # # Nota: Ah Balam nunca se encontrara\u0301 inicialmente dentro de una pared.",
    "output": "Li\u0301nea 1: \u0002Un solo entero: el mi\u0301nimo de trampas por las que Ah Balam tiene que pasar para llegar a la salida. * * Ejemplo: * * 2# Li\u0301mitesPuedes asumir que 0 \u2264 N, M \u2264 300",
    "note": "",
    "topics": [
      "matrices",
      "graphs",
      "data structures",
      "math",
      "shortest paths"
    ],
    "id": 1623
  },
  {
    "title": "Los M\u00e1s Baratos",
    "url": "https://omegaup.com/arena/problem/masbaratos",
    "history": "Habi\u0301a una vez un pai\u0301s en el que sus ciudades estaban numeradas de 1 a * N* . Cada ciudad tiene un solo aeropuerto. Todos los di\u0301as hay * M* vuelos programados. Cada vuelo tiene un costo determinado. Hay un hombre que esta\u0301 ansioso por salir a vacacionar a alguna ciudad e inicialmente se encuentra en la ciudad 1. Quiere saber cuales son las * K* ciudades( incluyendo la ciudad 1) a las cuales podri\u0301a llegar gastando menos en viajes en avio\u0301n. # ProblemaEscribe un programa que dadas las descripciones de los vuelos, y el nu\u0301mero * K* , encuentre cuales son las * K* ciudades para las que necesitari\u0301a gastar menos en viajes en avio\u0301n.",
    "input": "Linea 1: 3 nu\u0301meros enteros separados por espacios representando * N* , * K* y * M* respectivamente. Siguientes * M* lineas: Cada li\u0301nea representara\u0301 un vuelo programando y contendra\u0301 3 nu\u0301meros enteros positivos separados por espacios representando la ciudad de origen, la ciudad de destino y el costo de dicho vuelo. * * Ejemplo: * * 4 2 51 3 21 4 34 2 24 3 22 3 1",
    "output": "Linea 1: * K* nu\u0301meros enteros positivos representando los nu\u0301meros de las * K* ciudades con el viaje mas barato, dichos nu\u0301meros debera\u0301n estar ordenados por el costo del viaje, siendo el primero la ciudad con el viaje mas barato, y el ultimo la ciudad con el * K* - e\u0301simo viaje mas barato. Si dos ciudadades tienen el mismo precio para llegar a ellas, deberas imprimir primero la que tenga el numero de identificacio\u0301n mas pequen\u0303o. * * Ejemplo: * * 1 3# Consideraciones1 \u2264 N \u2264 10001 \u2264 M \u2264 10001 \u2264 K \u2264 N",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 1523
  },
  {
    "title": "Viaje en K d\u00edas",
    "url": "https://omegaup.com/arena/problem/kdias",
    "history": "Habi\u0301a una vez un pais en el que sus ciudades estaban numeradas de 1 a * N* . Cada ciudad tiene un solo aeropuerto. Cada di\u0301a hay * M* vuelos programados y solamente se puede tomar uno de esos vuelos por di\u0301a. Cada vuelo tiene un costo determinado. Un agente de ventas se encuenta en la ciudad 1, y quiere llegar a la ciudad * X* tardandose exactamente * K* di\u0301as. # ProblemaEscribe un programa que dadas las descripciones de los vuelos, y los nu\u0301meros * X* y * K* , encuentre el camino mas barato para viajar desde la ciudad 1 hasta la ciudad * X* en exactamente * K* di\u0301as utilizando solamente los vuelos como forma de transporte.",
    "input": "Linea 1: 4 nu\u0301meros enteros separados por espacios representando * N* , * X* , * K* y * M* respectivamente. Siguientes * M* lineas: Cada li\u0301nea representara\u0301 un vuelo programando y contendra\u0301 3 nu\u0301meros enteros separados por espacios representando la ciudad de origen, la ciudad de destino y el costo de dicho vuelo. * * Ejemplo: * * 4 3 4 61 2 22 1 53 4 11 4 14 1 12 3 1",
    "output": "Linea 1: Un solo nu\u0301mero entero: el costo de la ruta mas barata siguiendo las condiciones indicadas. * * Ejemplo: * * 5# Consideraciones1 \u2264 N \u2264 2001 \u2264 M \u2264 10001 \u2264 K \u2264 1000",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": 1507
  },
  {
    "title": "Minecraft",
    "url": "https://omegaup.com/arena/problem/minecraft",
    "history": "Algunos de ustedes han jugado minecraft y saben que es un juego bastante simple, destruyes y colocas bloques a placer tratando de saciar tu ocio. En este problema partimos de un mapa con diversos bloques pero para facilitarte la tarea hemos decidido darte un mapa en 2D y al igual que en minecraft hay bloques con distintas durezas. La idea es que busques el tiempo mi\u0301nimo que te tomara\u0301 llegar de un punto a otro, los u\u0301nicos movimientos que puedes hacer son verticales y horizontales, no te puedes desplazar en diagonal. Si una casilla se encuentra vaci\u0301a, entonces solo te tomara\u0301 una unidad de tiempo caminar por ahi\u0301, en caso de que se encuentre un bloque se te indicara\u0301 la cantidad de tiempo que te tomara\u0301 destruir el bloque antes de que puedas caminar por ahi\u0301 si es que el bloque se puede destruir, en caso contrario se te indicara\u0301 que dicho bloque no puede ser destruido.",
    "input": "Un mapa descrito con caracteres donde ' # ' significa un bloque indestructible, ' . ' un bloque vaci\u0301o, y los di\u0301gitos del ' 1' al ' 9' bloques que toman de 1 a 9 unidades de tiempo destruir respectivamente. Adema\u0301s una posicio\u0301n inicial y una posicio\u0301n final a la que debes llegar, en el caso de que la posicio\u0301n final no se encuentre libre, debera\u0301s primero destruir el bloque que se encuentre en dicha posicio\u0301n. La posicio\u0301n inicial siempre estara\u0301 libre. La entrada vendra\u0301 de la siguiente forma: * Dos enteros N y M que indican la cantidad de filas y columnas del mapa respectivamente. * Dos nu\u0301meros f_ 0 y c_ 0 que indican la posicio\u0301n inicial en la que te encuentras. * Dos nu\u0301meros f_ 1 y c_ 1 que indican la posicio\u0301n final a la que debes llegar. * N li\u0301neas con M caracteres describiendo el mapa, empezando por la posicio\u0301n 1, 1.",
    "output": "El tiempo mi\u0301nimo en el que te transportas del punto inicial al punto final.",
    "note": "",
    "topics": [
      "shortest paths",
      "graphs"
    ],
    "id": 118
  },
  {
    "title": "Pir\u00e1mide de tareas",
    "url": "https://omegaup.com/arena/problem/Piramide-de-tareas",
    "history": "Jorge va a empezar a hacer sus tareas, pero las tiene apiladas en forma de pira\u0301mide, por lo que no puede hacerlas en cualquier orden. Para que Jorge pueda completar todas sus tareas, tiene que empezar por la que esta\u0301 en la cima de la pira\u0301mide y cuando termine esa tarea, puede continuar con cualquiera de las dos tareas que han quedado descubiertas, y asi\u0301 sucesivamente. Cada vez que se completa una tarea, siempre quedan dos nuevas tareas descubiertas para el siguiente minuto ( a menos que haya llegado a la base de la pira\u0301mide) . Al principio, la pira\u0301mide se encuentra de esta manera, ya que solo la tarea de la cima esta\u0301 disponible para hacer: ! [ Pira\u0301mide de tareas inicio] [ 2] Las tareas en verde son las que Jorge ya completo\u0301, las tareas en naranja son las tareas que Jorge ya tiene disponibles para hacer y las tareas en rojo son las tareas inaccesibles para Jorge. La pira\u0301mide de tareas en algu\u0301n momento puede verse asi\u0301: ! [ Pira\u0301mide de tareas] [ 1] Afortunadamente o desafortunadamente ( segu\u0301n sea el caso) Jorge puede hacer ma\u0301ximo p tareas en un minuto y la pira\u0301mide esta\u0301 conformada por h niveles. Ayuda a Jorge a calcular la mi\u0301nima cantidad de minutos que necesita para completar todas sus tareas.",
    "input": "Dos enteros h y p separados por un espacio.",
    "output": "Un entero indicando la cantidad mi\u0301nima de minutos que necesita Jorge para terminar todas sus tareas.",
    "note": "",
    "topics": [
      "number theory",
      "trees",
      "implementation",
      "graphs"
    ],
    "id": 15743
  },
  {
    "title": "Armando el ejercito",
    "url": "https://omegaup.com/arena/problem/Armando-el-ejercito",
    "history": "El gran Imperio OMI ( Otomanos Muy Inteligentes) esta\u0301 planeando un ataque para expandir su territorio, el secreto de todas sus victorias es que son un imperio muy organizado y les gusta realizar todo de forma calculada, requieren de tu ayuda para prepararse. El Imperio esta\u0301 formado por distintos territorios, conectados entre si\u0301 por caminos, especi\u0301ficamente, existen N territorios y N- 1 caminos. Cada camino conecta dos territorios, y estos caminos * * NUNCA* * forman intersecciones. Los caminos esta\u0301n hechos de forma que desde cualquier territorio se puede llegar hacia cualquier otro territorio. Cada territorio cuenta con soldados, los cuales a su vez tienen un rango. A los OMIs no les gusta que los rangos queden separados, asi\u0301 que cada ciudad tiene dos nu\u0301meros l y r, los cuales indican el rango ma\u0301s bajo y el rango ma\u0301s alto, de forma que todos los rangos i tal que l \u2264 i \u2264 r existen. Como no les gusta tener eje\u0301rcitos disparejos, cada territorio tambie\u0301n tiene un nu\u0301mero x, el cual significa que todos los rangos del territorio tienen x soldados en cada rango. # ProblemaPara realizar el ataque definitivo, los OMIs deben reunir un eje\u0301rcito que cumpla con sus requisitos, asi\u0301 que te van a preguntar por varios posibles acomodos. El Imperio quiere formar un eje\u0301rcito u\u0301nicamente con ciertos rangos. El imperio define dos nu\u0301meros a y b, para que un soldado de rango k sea va\u0301lido para apuntarse, debe cumplir a \u2264 k \u2264 b. El imperio va a comenzar en un territorio u y terminar en un territorio v, de tal forma que en cada territorio en el camino de u a v ( inclusivo) , van a llevarse a todos los soldados cuyo rango k cumpla a \u2264 k \u2264 b. Quieren saber con cua\u0301ntos soldados contara\u0301n en cada acomodo. ( No\u0301tese que entre cualquier par de territorios u y v, solo existe un camino)",
    "input": "Dos enteros N y Q: La cantidad de territorios y la cantidad de preguntas. En las siguientes N li\u0301neas: Tres enteros l_ i, r_ i x_ i, significando que el territorio i, todo rango j tal que l \u2264 j \u2264 r tiene x soldados. En las siguientes N- 1 li\u0301neas: dos enteros u v, indicando que existe un camino entre los territorios u y v. En las siguientes Q li\u0301neas: cuatro enteros u v a b, significando que se quiere saber un posible acomodo que empieza en el territorio u y termina en el territorio v, y que se llevari\u0301a a todos los soldados cuyo rango k cumpla a \u2264 k \u2264 b.",
    "output": "Para cada posible acomodo, imprime la cantidad de soldados que formara\u0301n parte del eje\u0301rcito.",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "data structures"
    ],
    "id": 15567
  },
  {
    "title": "Metrobus Reloaded",
    "url": "https://omegaup.com/arena/problem/pes-2022-metrobus-reloaded",
    "history": "# ProblemaWarel, el transportista tramposo, debe mover paquetes entre los aeropuertos de Algoritmolandia. Algoritmolandia tiene N aeropuertos etiquetados del 1 al N. Estos estan conectados por N- 1 vuelos bidireccionales, de forma de que entre cualquier par de aeropuertos exista una ruta para enviar paquetes entre ellos. Por leyes comerciales, cada aeropuerto tiene un li\u0301mite de W_ i kilogramos por paquete, si en algu\u0301n momento el aeropuerto tiene en sus manos un paquete de peso mayor que W_ i kilogramos, el trampostista encargado sera\u0301 despedido, en este caso Warel seri\u0301a el despedido. Sin embargo, Warel es un tramposo y sabe que los presidentes de los aeropuertos son corruptos, a un presidente le puedes pagar 1 peso y el no revisara\u0301 el peso de tu paquete. Por lo que si pagas sobornos puedes enviar paquetes ma\u0301s pesados que los de una persona que siga la ley. Warel cada que recibe un contrato para enviar un paquete del aeropuerto a al aeropuerto b con c pesos de precio, debe ver cua\u0301l es el peso ma\u0301ximo del paquete a enviar. No olvides que Warel no trabaja de gratis, por lo que de los c pesos, Warel siempre se queda con un peso como tarifa. Adema\u0301s, Warel nunca tendra\u0301 suficiente dinero para sobornar a todos los aeropuertos en la ruta de a hacia b.",
    "input": "Dos enteros, N y Q, indicando cuentos aeropuertos hay en Algoritmolandia y cuantos contratos Warel evaluara\u0301. En la siguiente li\u0301nea vienen N enteros separados por espacios, el iesimo entero indican el li\u0301mite del aeropuerto i. En las siguientes N- 1 li\u0301neas vienen dos enteros u y v, mostrando que hay un vuelo entre el aeropuerto u y el aeropuerto v. Finamente, en las siguientes Q li\u0301neas vienen los contratos de Warel, cada contrato constara\u0301 de tres enteros a, b y c, indicando un contrato para enviar un paquete del aeropuerto a hacia b con precio c.",
    "output": "Imprime Q enteros separados por nuevas li\u0301neas, los pesos ma\u0301ximos de los paquetes para cada contrato, debes imprimirlos en el mismo orden que vienen en la entrada. # Ejemplos| | input4 64 2 6 72 14 21 31 2 22 3 31 3 11 4 32 4 13 4 3| | output464726| | end# Li\u0301mites- 1 \u2264 N, Q \u2264 10^ 5- 1 \u2264 W_ i \u2264 10^ 9# Subtareas- 1 \u2264 N, Q \u2264 1, 000 ( 20 puntos) - Se asegura que W_ u \u2264 W_ v para todo u y v tal que u esta\u0301 en el camino desde v hacia el nodo 1 ( 30 puntos) - Sin restricciones adicionales ( 50 puntos)",
    "note": "",
    "topics": [
      "trees",
      "graphs",
      "data structures",
      "binary search"
    ],
    "id": 15337
  },
  {
    "title": "Cartas en la compa\u00f1\u00eda",
    "url": "https://omegaup.com/arena/problem/pes-2022-compania",
    "history": "El COMI ( Compan\u0303ia Organizada Muy Ineficientemente) quiere hacer algo respecto a su comuniacio\u0301n, pues actualmente mandar mensajes toma mucho dinero. La compan\u0303i\u0301a tiene N empleados numerados del 0 al N- 1. actualmente esta estructurada de forma de que cada quien tiene un supervisor directo, excepto por el presidente de la compan\u0303ia, quien no tiene supervisor. Se dice que i supervisa a j si: i es el supervisor directo de j, o si i supervisa a alguie\u0301n que supervisa a j. Se garantiza\u0301 que el presidente supervisa a todos los empleados. Durante el trabajo, el empleado a y b necesitara\u0301n formar un equipo para resolver una tarea, pero para esto deben pedirle permiso a alguien que sea supervisor de ambos. Pero se considera irrespetuoso preguntarle a alguien que supervisa a otro empleado que pudo dar el permiso. Es decir, deben pedirle permiso a alguien que los supervise a ambos, pero no supervise a un empleado que tambie\u0301n sea supervisor de a y b. Si uno es supervisor del otro, por ejemplo a sea supervisor de b, basta con que b pida permiso de a. Pero, para pedir permiso, ambos deben escribir una carta y estas dos cartas deben llegar a la persona que ha de ceder el permiso. Actualmente, en la compan\u0303i\u0301a un empleado solo puede enviar o reenviar cartas a su supervisor directo. Cada que se reenvi\u0301a una carta, se paga $ 1 al servicio postal. Como formar un equipo cuesta mucho dinero en envi\u0301os, pidieron tu ayuda para mejorar la comunicacio\u0301n en la empresa. A todo empleado le dara\u0301s exactamente un contacto, de forma de que el empleado pueda enviar cartas a su supervisor o a su contacto. ( Nota que i tenga de contacto j NO implica que j tenga de contacto a i) . Tu trabajo como consultor de comunicaciones es decidir el contacto de cada empleado buscando que el costo ma\u0301ximo de formar un equipo dada la estructura de la empresa sea minimizado. Adema\u0301s, como parte de tu asesori\u0301a debera\u0301s entrenarlos haciendo el ruteo de las cartas de algunos equipos. # Implementacio\u0301nDebes enviar un archivo que implemente el procedimiento ` contactos` que llamara\u0301 a la funcio\u0301n ` estableceContactos` . Tambie\u0301n debera\u0301s implementar el procedimiento ` permiso` , que llamara\u0301 a la funcio\u0301n ` rutasCartas` . Estos procedimientos y funciones son descritos a continuacio\u0301n: # # contactos- C+ + : ` void contactos( int N, int Q, int[ ] supervisor) ` Recibe dos enteros N y Q representando cuantos empleados hay y cuantos equipos tendra\u0301s que obtener permiso. Tambie\u0301n recibe un vector indicando que el supervisor de i es ` supervisor[ i] ` . El presidente tendra\u0301 - 1 como supervisorDebe llamar una vez a ` estableceContactos( int N, int lista[ ] ) ` donde pasa N y la lista de contacto, indicando que i tiene de contacto a ` lista[ i] ` - # # establecerContactos- C+ + : ` void establecerContactos( int N, int lista[ ] ) ` Esta funcio\u0301n esta implementada por el evaluador. Se comporta de la siguiente forma: Recibe la lista que indica los contactos. ` lista[ i] ` indica el contacto del empleado i. Si no se llama desde contactos( ) , o se llama dos veces o ma\u0301s. Recibira\u0301s 0 pts. # # permiso- C+ + : ` void permiso( int a, int b) ` Debe obtener el permiso para formar el equipo con el empleado a y b. Para esto debe llamar a rutaCartas para que la carta de a y b lleguen a un empleado que pueda darles permiso. Una vez las cartas esten alli\u0301, debe terminar. # # rutaCartas- C+ + : ` void rutaCartas( int L, int movimientos[ ] ) ` Esta funcio\u0301n esta implementada por el evaluador. Se comporta de la siguiente forma: * * movimientos* * indica los movimientos que se haran para mover las cartas hasta el supervisor correcto. Funciona de la siguiente forma, se tomara el ` movimiento[ 0] ` como el primero y el ` movimiento[ L- 1] ` como el u\u0301ltimo: - ` movimiento[ i] = 0` indica que la carta a fue enviada al supervisor de quien la teni\u0301a. - ` movimiento[ i] = 1` indica que la carta a fue enviada al contacto de quien la teni\u0301a. - ` movimiento[ i] = 2` indica que la carta b fue enviada al supervisor de quien la teni\u0301a. - ` movimiento[ i] = 3` indica que la carta b fue enviada al contacto de quien la teni\u0301a. Si llamas a rutaCartas con argumentos inva\u0301lidos o ma\u0301s de una vez por llamada a permiso( ) , recibira\u0301s 0 puntos.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "data structures",
      "trees",
      "graphs"
    ],
    "id": 15325
  },
  {
    "title": "2.Comandos-Rojo-Negro_Evaluaci\u00f3nFinal",
    "url": "https://omegaup.com/arena/problem/2Comandos-Rojo-Negro_EvaluacionF",
    "history": "Implementar un A\u0301rbol Binario de Bu\u0301squeda * * * Rojo Negro* * * . El programa recibira\u0301 una serie de n comandos, los leera\u0301, ejecutara\u0301 y mostrara\u0301 elresultado respectivo en pantalla. Cada comando constara\u0301 de un nu\u0301mero entero que representa la instruccio\u0301n yun nu\u0301mero entero asociado. Comandos admitidos: - 1 a- Inserta el nu\u0301mero a en el a\u0301rbol rojo negro. - 2 a- Elimina la primera ocurrencia del nu\u0301mero a del a\u0301rbol rojo negro. - 3 1- Imprime el a\u0301rbol binario de bu\u0301squeda rojo negro in- order. - 3 2- Imprime el a\u0301rbol binario de bu\u0301squeda rojo negro pre- order. - 3 3- Imprime el a\u0301rbol binario de bu\u0301squeda rojo negro post- order. Nota: Al momento de imprimir se separan los nu\u0301meros por un espacio en blanco, printf( \"",
    "input": "nc_ 1 a_ 1c_ 2 a_ 2\u22eec_ n a_ ndonde n es el nu\u0301mero de comandos.",
    "output": "Las respuestas a los comandos ejecutados.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 15137
  },
  {
    "title": "1.Camino-distancia-m\u00e1s-corta9_Evaluaci\u00f3nFinal",
    "url": "https://omegaup.com/arena/problem/1Camino-distancia-mas-corta9_Eva",
    "history": "Dado un grafo pesado dirigido G, un nodo de origen o y un nodo de destino d, devolver la ruta ma\u0301s corta desde el origen al destino. La entrada sera\u0301 la matriz de adyacencia E_ n \u00d7 n para n ve\u0301rtices. Un valor e_ u, v > 0 indica el peso del enlace, mientras que, un valor de 0 representa que no e\u0301xiste enlace.",
    "input": "n o de_ 1, 1 e_ 1, 2 \u22ef e_ 1, ne_ 2, 1 e_ 2, 2 \u22ef e_ 2, n\u22eee_ n, 1 e_ n, 2 \u22ef e_ n, ndonde n es el nu\u0301mero de ve\u0301rtices, o es el identificador del nodo origen yd es el identificador del nodo destino.",
    "output": "Lista de ve\u0301rtices que indican la ruta ma\u0301s corta desde el origen al destino. o v_ 1 v_ 2 \u22ef dNota: Los ve\u0301rtices esta\u0301n separados por espacios en blanco, por simplicidad se asume que despue\u0301s del u\u0301ltimo ve\u0301rtice existe un espacio en blanco.",
    "note": "",
    "topics": [
      "graphs",
      "trees"
    ],
    "id": 15136
  },
  {
    "title": "4.Distancia-Dijkstra_Tarea\u00c1rboles",
    "url": "https://omegaup.com/arena/problem/4Distancia-Dijkstra_TareaArboles",
    "history": "Dado un grafo dirigido pesado G, devolver el peso de la ruta ma\u0301s corta entre un par de nodos origen y destino. La entrada sera\u0301 la matriz de adyacencia E_ n \u00d7 n para n ve\u0301rtices. Un valor e_ u, v > 0 indica el peso del enlace, mientras que, un valor de 0 representa que no e\u0301xiste enlace.",
    "input": "n o de_ 1, 1 e_ 1, 2 \u22ef e_ 1, ne_ 2, 1 e_ 2, 2 \u22ef e_ 2, n\u22eee_ n, 1 e_ n, 2 \u22ef e_ n, ndonde n es el nu\u0301mero de ve\u0301rtices, o es el identificador del nodo origen yd es el identificador del nodo destino.",
    "output": "Costo de la ruta ma\u0301s corta desde el nodo o hasta el nodo d.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 15135
  },
  {
    "title": "3.Suma-MST_Tarea\u00c1rboles",
    "url": "https://omegaup.com/arena/problem/3Suma-MST_TareaArboles",
    "history": "Dado un grafo pesado G devolver el peso de sumar los enlaces de su a\u0301rbol de expansio\u0301n mi\u0301nima. La entrada sera\u0301 la matriz de adyacencia E_ n \u00d7 n para n ve\u0301rtices. Un valor e_ u, v > 0 indica el peso del enlace, mientras que, un valor de 0 representa que no e\u0301xiste enlace.",
    "input": "n re_ 1, 1 e_ 1, 2 \u22ef e_ 1, ne_ 2, 1 e_ 2, 2 \u22ef e_ 2, n\u22eee_ n, 1 e_ n, 2 \u22ef e_ n, ndonde n es el nu\u0301mero de ve\u0301rtices, r es el identificador del nodo rai\u0301z.",
    "output": "Suma de los enlaces del a\u0301rbol de expansio\u0301n mi\u0301nima ( MST, por sus siglas en ingle\u0301s) .",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 15134
  },
  {
    "title": "2.Cola-de-Prioridades-Heap_Tarea\u00c1rboles",
    "url": "https://omegaup.com/arena/problem/2-Cola-de-Prioridades---Heap",
    "history": "Implementar una cola con prioridades utilizando un max- heap. La cola recibira\u0301 n parejas clave( key) - valor, con el fin de evidenciarque el orden de llegada se afecta cuando las claves se repiten. La salida del programa sera\u0301 todas las parejas ( clave, valor) extrai\u0301das del heap.",
    "input": "nk_ 1 v_ 1k_ 2 v_ 2\u22eek_ n v_ ndonde n es el nu\u0301mero de parejas k_ i clave, v_ i valor.",
    "output": "Parejas clave valor extrai\u0301das del heap separadas por un espacio. ( k_ 1, v_ 1) ( k_ 2, v_ 2) \u22ef ( k_ n, v_ n)",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 15133
  },
  {
    "title": "Consultas de nodos en el \u00e1rbol",
    "url": "https://omegaup.com/arena/problem/Consultas-de-nodos-en-el-arbol",
    "history": "Acabas de aprender co\u0301mo son los a\u0301rboles binarios de bu\u0301squeda, por lo que decides aplicar lo aprendido haciendo un programa que imprima el a\u0301rbol en * preorden* , * posorden* y * en orden* y que tambie\u0301n calcule la altura del a\u0301rbol. Adema\u0301s, el programa debe poder determinar si un nodo con cierto valor existe y, en caso afirmativo, cua\u0301les son sus hijos inmediatos, tanto a la izquierda como a la derecha. En tu escuela te ensen\u0303aron que los nodos con valores repetidos bajan por la derecha del nodo padre y asi\u0301 lo programara\u0301s.",
    "input": "Inicialmente, un entero N seguido de los N enteros que se insertara\u0301n en el a\u0301rbol. Posteriormente, un entero M seguido de los M valores a buscar en los nodos del a\u0301rbol.",
    "output": "Inicialmente, tres secuencias de enteros que representan co\u0301mo se ve el a\u0301rbol en * preorden* , * posorden* y * en orden* , respectivamente. Posteriormente un entero que representa la altura del a\u0301rbol. Finalmente, la respuesta de cada una de las M bu\u0301squedas: si un nodo no existe, imprimir ` - 1` ; si un nodo si\u0301 existe pero no tiene hijos, imprimir ` No tiene nodos hijos` ; si un nodo si\u0301 existe y al menos un hijo, imprimir los valores de los hijos ( primero el izquierdo y despue\u0301s el derecho) imprimiendo ` No tiene nodos a la izquierda` o ` No tiene nodos a la derecha` si alguno de los dos hijos falta. En caso de que haya ma\u0301s de un nodo con el mismo valor a buscar, debera\u0301s responder con base en el primero de ellos.",
    "note": "",
    "topics": [
      "graphs",
      "trees"
    ],
    "id": 14767
  },
  {
    "title": "Brayan y su diccionario",
    "url": "https://omegaup.com/arena/problem/Brayan-y-su-diccionario",
    "history": "Brayan adquirio\u0301 un diccionario virtual que cambia constantemente las palabras que contiene en el por lo que decide hacer un programa que busque si una dicha pablara esta en el diccionario o no adema\u0301s de cuantas palabras coinciden en un patro\u0301n dado y un di\u0301a decide prestarte dicho diccionario pero como le gusta verte sufrir no te pasa el co\u0301digo por lo que decides hacer el tuyo agrega\u0301ndole la funcio\u0301n de buscar una palabra por el i\u0301ndice del diccionario.",
    "input": "Dos enteros n y m que representan la cantidad de palabras del diccionario que te presto Brayan y la cantidad de instrucciones que hara\u0301s en el diccionario con tu programa. * bus busca en el diccionario la cadena s que consta de nu\u0301meros , si\u0301mbolos, y letras ( mayu\u0301sculas y minu\u0301sculas) adema\u0301s de que dichas palabras no superan los 25 caracteres. * pre buscar cuantas palabras del diccionario cumplen que son prefijo de t con la u\u0301nica condicio\u0301n de que el prefijo y la palabra sean distintos en taman\u0303o de longitud . * ejemplo pre cadena [ cadena , cadenas] solo contara como prefijo valido cadenas pero cadena no ya que coinciden en taman\u0303o* indi buscar en el diccionario que palabra esta asociada a ese i\u0301ndice.",
    "output": "La respuesta de cada instruccio\u0301n hecha. * * bus* Si la palabra esta\u0301, imprimir ` Si esta es la cadena # ` i donde i es la posicio\u0301n que ocupo\u0301 dicha palabra cuando se te dio el diccionario como entrada, empezando por 0. Si la palabra no esta\u0301, existen dos situaciones. La primera situacio\u0301n ocurre cuando la palabra buscada no tiene un prefijo en comu\u0301n con ninguna palabra del diccionario o cuando la palabra es un prefijo de alguna palabra del diccionario; en este caso debes ` No esta la cadena = ( ` . La segunda situacio\u0301n ocurre cuando la palabra buscada tiene un prefijo comu\u0301n con cualquier palabra del diccionario; en este caso debes imprimir el prefijo comu\u0301n ma\u0301s grande. * pre el numero de prefijos que cumplen la condicion* indi en caso de que dicho i\u0301ndice este asociado a una cadena imprimir la cadena en caso contrario imprimir No esta",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "strings",
      "trees",
      "string suffix structures"
    ],
    "id": 14723
  },
  {
    "title": "Metrob\u00fas",
    "url": "https://omegaup.com/arena/problem/pes-2022-metrobus",
    "history": "Despue\u0301s de muchos meses de clases virtuales, ha sido posible organizar una concentracio\u0301n presencial. \u00a1Todos esta\u0301n muy emocionados por poder reunirse nuevamente en el PES! : ) El COMI se encuentra organizando la logi\u0301stica del evento y como parte del proceso, es necesario seleccionar el hotel en donde se hospedara\u0301n los participantes. Esta decisio\u0301n estara\u0301 basada en la cantidad de tiempo de transporte durante la concentracio\u0301n. El transporte seleccionado para esta ocasio\u0301n es el metrobu\u0301s. El metrobu\u0301s de la Ciudad de Me\u0301xico esta\u0301 compuesto por N estaciones ( 1 \u2264 N \u2264 50, 000) con la peculiaridad de que para cada par de estaciones existe una u\u0301nica ruta. Adema\u0301s, se conoce el tiempo T ( 1 \u2264 T \u2264 500) en minutos que es necesario invertir para hacer el viaje entre cada dos estaciones directamente conectadas. Sabemos que hay un hotel cercano a cada estacio\u0301n y que el tiempo de traslado del hotel a la estacio\u0301n es insignificante. El COMI tiene una lista de M ( 0 \u2264 M \u2264 N) lugares ( localizados convenientemente cerca de cada una de las estaciones) que se visitara\u0301n durante la concentracio\u0301n y la cantidad de veces se visitara\u0301 cada uno ( 1 \u2264 F \u2264 300) . Para simplificar la organizacio\u0301n, la ruta seguida siempre sera\u0301 del hotel al lugar de intere\u0301s de ida y de regreso; es decir, no se ira\u0301 de un lugar de intere\u0301s a otro sin antes regresar al hotel. Dado que el tiempo es oro en la concentracio\u0301n, es necesaria tu ayuda para determinar el mi\u0301nimo tiempo de traslado posible visitando todos los lugares de intere\u0301s, asi\u0301 como la ubicacio\u0301n de los hoteles donde se puede lograr este valor o\u0301ptimo. # ProblemaAyuda al COMI a encontrar la mi\u0301nima cantidad de tiempo que se utilizara\u0301 en traslados en el metrobu\u0301s y el/ los lugares donde se deberi\u0301a elegir el hotel.",
    "input": "La primera li\u0301nea contiene un entero N, la cantidad de estaciones del metrobu\u0301s. Las siguientes N - 1 li\u0301neas contienen 3 enteros representando dos estaciones conectadas y el tiempo de traslado T, respectivamente. La li\u0301nea N + 1 contiene un entero M, el nu\u0301mero de lugares que esta\u0301n planeados para visitar. Las siguientes M li\u0301neas contienen cada una el lugar al que se ha planeado ir y la cantidad de veces que se visitara\u0301.",
    "output": "En la primera li\u0301nea, la cantidad mi\u0301nima de tiempo utilizado en traslados seleccionando la ubicacio\u0301n del hotel o\u0301ptimamente. En la segunda li\u0301nea, K enteros representando los lugares en los que es posible alcanzar el valor o\u0301ptimo, ordenados ascendentemente. # Ejemplos| | input21 2 1721 52 10| | output1702| | descriptionExisten dos estaciones de metrobu\u0301s. Si se decide seleccionar el hotel de la estacio\u0301n 1, el tiempo total de traslado sera\u0301 5( 0) + 10( 34) = 340. Por otro lado, si se selecciona el hotel de la estacio\u0301n 2, el traslado sera\u0301 5( 34) + 10( 0) = 170. Solo es posible obtener el valor mi\u0301nimo si se elige el hotel en esa estacio\u0301n. | | end# # Subtareas* ( 30 puntos) : 1 \u2264 N \u2264 1, 000* ( 20 puntos) : Cada estacio\u0301n de metrobu\u0301s esta\u0301 conectada directamente con a lo ma\u0301s otras dos estaciones. * ( 50 puntos) : Sin restricciones adicionales.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 14682
  },
  {
    "title": "Ranking of kings",
    "url": "https://omegaup.com/arena/problem/Ranking-of-kings",
    "history": "Bijjo es un joven pri\u0301ncipe que espera ser rey, sin embargo, lo u\u0301nico que tiene a su favor es que es de la familia real, la cual tiene una manera particular de pasar la corona, donde la gente renuncia a la corona ( ser rey es cansado) . Una vez que el actual rey decida renunciar a la corona, esta pasara\u0301 al hijo mayor que aun desee la corona, dado que los hijos pueden renunciar su derecho a la corona antes de tenerla. Sabiendo su a\u0301rbol familiar, Bijjo le dio la curiosidad de saber cual es la mi\u0301nima cantidad de personas que deben renunciar a la corona con un resultado de el siendo el nuevo rey. No tiene ninguna mala intencio\u0301n, solamente es un chico curioso, \u00a1Ayu\u0301dale a saber la respuesta!",
    "input": "Un entero N ( 1 \u2264 N \u2264 1000000) que indica la cantidad de gente que es parte de la familia, en la siguiente linea vendra\u0301n N - 1 nu\u0301meros, donde el i- esimo indica que quien es el padre de la persona i + 1. Donde la persona nu\u0301mero 1 es el rey actual y patriarca de la familia. En la tercera linea aparece un nu\u0301mero X que indica el nu\u0301mero asignado a Bojji.",
    "output": "Mostrar un nu\u0301mero que indica la mi\u0301nima gente que ocupa renunciar para que Bojji sea rey.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 14499
  },
  {
    "title": "El laberinto m\u00e1s divertido",
    "url": "https://omegaup.com/arena/problem/Laberinto-divertido",
    "history": "Has sido contratado por la Fundacio\u0301n para el Ocio y los Pasatiempos Interesantes ( FOPI) para optimizar el nivel de diversio\u0301n de los juegos de laberintos de un perio\u0301dico local. Estos juegos consisten en tableros de dos dimensiones en los que hay algunas casillas vaci\u0301as y otras bloqueadas, adema\u0301s de una entrada y una salida. El objetivo del jugador es encontrar un camino de la entrada a la salida. Por otro lado, segu\u0301n los protocolos de calidad de la FOPI, todo laberinto debe ser * * perfecto* * , es decir, que para cualquier par de casilleros vaci\u0301os del tablero existe una u\u0301nica forma de trazar un camino entre ellos sin pasar dos veces por la misma casilla. Por ejemplo, de los siguientes laberintos, el de la izquierda no es perfecto, mientras que el de la derecha si\u0301 lo es ( los casilleros blancos son vaci\u0301os y los negros, bloqueados) . nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; nbsp; ! [ ] ( labyrinth- 1. jpg) nbsp; nbsp; nbsp; ! [ ] ( labyrinth- 2. jpg) Para tu buena suerte, ellos te van a dar un laberinto casi completo, al que solo le falta una entrada y una salida. Tu objetivo es escoger dos casilleros del borde para que sean la entrada y la salida del laberinto. Estos dos casilleros se convertira\u0301n en casilleros vaci\u0301os y el laberinto debe * * permanecer siendo perfecto* * despue\u0301s de ese cambio. Adema\u0301s, debes escoger la entrada y la salida de tal forma que se maximice la diversio\u0301n del laberinto. Siguiendo las normas de la FOPI, decimos que un laberinto X es ma\u0301s divertido que otro laberinto Y si es que el camino de la entrada a la salida en X es ma\u0301s largo que el correspondiente en Y.",
    "input": "La primera li\u0301nea de la entrada tiene dos nu\u0301meros, n y m, las dimensiones del tablero. Las siguientes n li\u0301neas tienen una cadena de m caracteres cada una. Asi\u0301, el j- e\u0301simo caracter ( 0 \u2264 j < m) en la i- e\u0301sima fila ( 0 \u2264 i < n) describe el casillero ( i, j) del tablero. Si este caracter es ` ' . ' ` ( sin las comillas) , se trata de un casillero vaci\u0301o y si es ` ' # ' ` ( sin las comillas) , se trata de un casillero bloqueado. Esta\u0301 garantizado que el tablero dado es perfecto y adema\u0301s no tiene ni entrada ni salida, es decir que los casilleros de la forma ( i, 0) , ( 0, j) , ( n- 1, j) , ( i, m- 1) ( 0 \u2264 i < n, 0 \u2264 j < m) esta\u0301n bloqueados. Tambie\u0301n esta\u0301 garantizado que existe al menos un par de estas casillas que se pueden escoger para volverlas vaci\u0301as y que sean la entrada y salida del laberinto.",
    "output": "La salida deben ser dos li\u0301neas. La primera de ellas consistira\u0301 de dos nu\u0301meros separados por un espacio en blanco, las coordenadas de la entrada al laberinto. La segunda li\u0301nea tendra\u0301 el mismo formato para las coordenadas de la salida del laberinto. Nota que hay varias soluciones posibles. En particular, es posible invertir el orden de la salida y de la entrada del laberinto para obtener otra solucio\u0301n. De todas las soluciones, queremos la que tenga entrada lexicogra\u0301ficamente menor. Si hay ma\u0301s de una solucio\u0301n con la misma entrada lexicograficamente menor, de entre estas, queremos la que tenga la salida lexicogra\u0301ficamente menor. Decimos que una coordenada ( x_ i, y_ i) es lexicogra\u0301ficamente menor a otra ( x_ j, y_ j) si x_ i < x_ j, o x_ i = x_ j y y_ i < y_ j.",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "implementation"
    ],
    "id": 14135
  },
  {
    "title": "Di\u00e1metro de un \u00e1rbol",
    "url": "https://omegaup.com/arena/problem/diametro-de-un-arbol",
    "history": "Se le da un a\u0301rbol que consta con N nodos. Tu tarea es calcular el dia\u0301metro de un a\u0301rbol que es la distancia ma\u0301xima entre dos nodos mas profundos . * * Nota: * * cada nodo que visita para llegar al otro se cuenta en una unidad",
    "input": "La primera li\u0301nea de entrada contiene un nu\u0301mero entero n: el nu\u0301mero de nodos. Los nodos esta\u0301n numerados 1, 2, . . . , n. Luego hay n\u22121 li\u0301neas que describen los bordes . Cada li\u0301nea contiene dos nu\u0301meros enteros a y b: hay un borde entre los nodos a y b que se lee como de a me puedo ir a b",
    "output": "Imprime un entero: el dia\u0301metro del a\u0301rbol# Explicacio\u0301n! [ enter image description here] [ 1] explicacio\u0301n ejemplo 2\u21921\u21923\u21925",
    "note": "",
    "topics": [
      "graphs",
      "trees"
    ],
    "id": 13907
  },
  {
    "title": "Karelfombras 1",
    "url": "https://omegaup.com/arena/problem/Karelfombras-1",
    "history": "Karel tiene una empresa que pone alfombras llamada Karelfombras. Esta\u0301 vez Karel fue contratado para colocar una alfombra en un hotel. Colocar la alfombra consiste en poner un zumbador en todas las casillas del hotel. Karel viendo los planos del hotel, se percato\u0301 de que este tiene forma de a\u0301rbol. # Definicio\u0301n de a\u0301rbolUn a\u0301rbol es un conjunto de casillas adyacentes rodeada por paredes que cumple la siguiente condicio\u0301n: Si Karel se coloca en cualquier casilla del a\u0301rbol, le es imposible caminar por el a\u0301rbol y regresar a la casilla de donde comenzo\u0301 sin dar media vuelta. Definimos media vuelta como: - 1) Dar un paso- 2) Dar dos giros a la izquierda- 3) Dar un pasoAdema\u0301s, definimos una hoja como una casilla del a\u0301rbol que solo tiene una casilla adyacente. Aqui\u0301 hay ejemplos de arboles: ! [ arbol] ( ar1. png) ! [ arbol] ( ar2. png) ! [ arbol] ( ar3. png) ! [ arbol] ( ar4. png) Y aqui\u0301 hay mundos que no son a\u0301rboles: ! [ no arbol] ( not1. png) ! [ no arbol] ( not2. png) ! [ no arbol] ( not3. png) ! [ no arbol] ( not4. png) # TareaDado la descripcio\u0301n de los cubos y cuantas contrasen\u0303as tiene que haber mi\u0301nimo, determina la K ma\u0301s pequen\u0303a que ofrezca dicha seguridad deseada.",
    "input": "! [ entrada] ( in. png)",
    "output": "! [ salida] ( out. png) # Consideraciones- Karel tiene zumbadores infinitos en su mochila- No imparta la orientacio\u0301n ni posicio\u0301n final de Karel- Nunca habra\u0301 una pared enfrente de Karel al inicio- Karel comienza en una hoja# Subtareas- ( 20 pts) El mundo es una li\u0301nea recta- ( 20 pts) El mundo es un pasillo- ( 40 pts) No hay condiciones extra- ( 20 pts) Solo puedes hacer 2N avanzas, donde N es la cantidad de casillas en el a\u0301rbol. # Glosariohttps: / / omegaup. com/ docs/ Glosario- OMIPS. pdf",
    "note": "",
    "topics": [
      "trees",
      "dfs and similar",
      "implementation",
      "graphs"
    ],
    "id": 13414
  },
  {
    "title": "N\u00fameros Sofisticados",
    "url": "https://omegaup.com/arena/problem/Soph-Numbers",
    "history": "Tu amigo Andre\u0301s es un gran fana\u0301tico de los nu\u0301meros curiosos, por lo que en sus ratos libres busca nu\u0301meros con propiedades especiales. Un di\u0301a, Andre\u0301s encontro\u0301 unos nu\u0301meros bastante peculiares a los que llamo\u0301: * nu\u0301meros sofisticados* . Y les dio la definicio\u0301n siguiente: > Un nu\u0301mero sofisticado es todo entero positivo en base decimal, conformado so\u0301lo> por di\u0301gitos uno y cero, tal que al ser convertido a base binaria, el> nu\u0301mero decimal sea subcadena de su correspondiente en binario. * * Ejemplos de nu\u0301meros sofisticados: * * 0_ d es subcadena de 0_ b , por tanto 0 es sofisticado. 11_ d es subcadena de 1011_ b, por tanto 11 es sofisticado. 101_ d es subcadena de 1100101_ b, por tanto 101 es sofisticado. Como Andre\u0301s adema\u0301s es un gran informa\u0301tico, se dispuso a hacer un programa que dados N ceros y M unos, imprima ascendentemente todos los posibles nu\u0301meros sofisticados que se pueden formar usando exactamente todos esos di\u0301gitos. * * Nota: los ceros a la izquierda tambie\u0301n sera\u0301n contados como usados, pero no sera\u0301n solicitados en la salida. * *",
    "input": "N y M en la misma li\u0301nea, separados por un espacio. Donde N es el nu\u0301mero de di\u0301gitos cero y M es el nu\u0301mero de di\u0301gitos uno.",
    "output": "Imprimira\u0301s todos los posibles nu\u0301meros sofisticados ordenados ascendentemente, separa\u0301ndolos cada uno por un salto de li\u0301nea. * Recuerda que el nu\u0301mero sofisticado es entero y esta\u0301 en base decimal. * # Ejemplos| | input1 1| | output110| | end| | input2 2| | output1110111010011100| | end# Li\u0301mites* 0 \u2264 N, M \u2264 9* Si N = 0, entonces M = \u0338 0* Si M = 0, entonces N = \u0338 0* * * Se garantiza para todos los casos de prueba por lo menos un nu\u0301mero sofisticado* *",
    "note": "",
    "topics": [
      "graphs",
      "trees"
    ],
    "id": 13377
  },
  {
    "title": "Borde Exterior",
    "url": "https://omegaup.com/arena/problem/borde_exterior",
    "history": "Kallus contrato\u0301 a IG- 88 para seguir a Han Solo y llevarlo ante las autoridades imperiales. Parado\u0301jicamente Han esta\u0301 tratando de ganar ventaja llamando la atencio\u0301n de otros cazarrecompensas para complicarle la travesi\u0301a a IG- 88. El borde exterior de la galaxia tiene n planetas habitados y n - 1 rele\u0301s de masa que permiten llegar a cualquiera de esos planetas desde cualquier otro ( el Halco\u0301n no esta\u0301 en muy buen estado y no puede saltar mucho al hiperespacio) . En cada planeta i hay p_ i cazarrecompensas. Han lleva cargando v droides sen\u0303uelos en el equipaje. Al salir de un planeta, puede( es opcional) dejar un sen\u0303uelo para que genere una transmisio\u0301n que llame la atencio\u0301n de todos los cazarrecompensas en los planetas vecinos ( hacie\u0301ndoles creer que se ofrece una recompensa por IG- 88) . Una vez dejado un sen\u0303uelo en un planeta, todos los cazarrecompensas de los planetas vecinos viajara\u0301n al planeta donde se dejo\u0301 el sen\u0303uelo, y en consecuencia el nu\u0301mero de cazarrecompensas en ese planeta y sus vecinos cambiara\u0301. El proceso sucede en este orden: 1. Han llega al planeta i y tiene que lidiar con p_ i cazarrecompensas. 2. Deja un droide sen\u0303uelo. 3. Sale del planeta. 4. El droide se activa. 5. Los cazarrecompensas de los planetas vecinos viajan al planeta i antes de que Han llegue al siguiente planeta ( asi\u0301 que Han no tiene que lidiar con ellos) . Han puede empezar su trayecto en cualquier planeta del borde exterior, viajar por unos cuantos rele\u0301s de masa y luego retirarse permanentemente del borde exterior en cualquier momento ( el Halco\u0301n no puede saltar mucho al hiperespacio) . Despue\u0301s de que Han Solo se retire del borde exterior, IG- 88 lo rastreara\u0301 recorriendo la misma ruta. Usando los droides sen\u0303uelo, Han quiere maximizar la diferencia entre el nu\u0301mero de cazarrecompensas que IG- 88 se va a encontrar en su camino y el nu\u0301mero de cazarrecompensas que e\u0301l mismo se encuentre. Recuerda que so\u0301lo los cazarrecompensas presentes en un planeta justo antes de que Han llegue cuentan para el total de cazarrecompensas que e\u0301l tiene que lidiar. Para encontrar una explicacio\u0301n con ma\u0301s detalle, ve\u0301ase el comentario del ejemplo.",
    "input": "La primera li\u0301nea contendra\u0301 n, el nu\u0301mero de planetas y v, el nu\u0301mero de sen\u0303uelos en el equipaje. La segunda li\u0301nea contendra\u0301 n enteros separados por espacios, indicando p_ 1. . . p_ n. Las siguientes n - 1 li\u0301neas describira\u0301n los rele\u0301s de masa con parejas de nu\u0301meros a_ i y b_ i, que indican que hay un rele\u0301 de masa entre los planetas a_ i y b_ i ( los rele\u0301s se pueden recorrer en ambas direcciones) .",
    "output": "Un u\u0301nico nu\u0301mero: la diferencia ma\u0301xima entre el nu\u0301mero de cazarrecompensas que IG- 88 se encuentra y el nu\u0301mero de cazarrecompensas que Han Solo se encuentra.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 13029
  },
  {
    "title": "Los soldados culpables de nada",
    "url": "https://omegaup.com/arena/problem/Los-soldados-culpables-de-nada",
    "history": "Una man\u0303ana, los N soldados de la Reina Roja estaban en el jardi\u0301n. Algunos teni\u0301an las manos ocupadas, pues cargaban enormes macetas, y otros teni\u0301an las manos libres, pues solo pasaban por alli\u0301. Ninguno imaginaba que la Reina Roja se acercaba de muy mal humor. Cuando ella llego\u0301, simplemente sen\u0303alo\u0301 a uno de sus soldados, lo culpo\u0301 de cualquier cosa y ordeno\u0301 que le cortaran la cabeza. Cada soldado culpado que teni\u0301a las manos libres, las ocupo\u0301 para sen\u0303alar a otros dos soldados no culpados au\u0301n, para asi\u0301 salvar la cabeza. Cada soldado culpado que teni\u0301a las manos ocupadas no podi\u0301a culpar a nadie, pero se podi\u0301a ocultar debajo de la maceta que cargaba. Este proceso se repitio\u0301 hasta que todos los soldados fueron culpados en algu\u0301n momento. \u00bfCua\u0301ntos soldados fueron culpados en el K- e\u0301simo paso?",
    "input": "Inicialmente, los enteros N y K. Posteriormente, N- 1 parejas de enteros A_ i y B_ i que denotan que el soldado A_ i culpo\u0301 al soldado B_ i. Puedes suponer que cada soldado culpo\u0301 a 0 o 2 soldados.",
    "output": "La cantidad de soldados que fueron culpados en el K- e\u0301simo paso. El primer paso ( es decir, el paso con K= 1) ocurre cuando un soldado es culpado directamente por la Reina Roja. # RangosPuedes suponer que 1 \u2264 N, K \u2264 10^ 5 y que 1 \u2264 A_ i, B_ i \u2264 N.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 12246
  },
  {
    "title": "El arbol milenario",
    "url": "https://omegaup.com/arena/problem/El-arbol-milenario",
    "history": "< br/ > Nuestro du\u0301o favorito de exploradoras de ruinas Wendoli\u0301n y Grecia se encontraron en la legendaria ruina del a\u0301rbol milenario rojinegro y autobalanceable. < br/ > < br/ > En caso de ser cierto valdri\u0301a una fortuna, \u00a1Pero una fortuna llena de conocimiento! No hay otra cosa ma\u0301s que desear en este mundo. Pero ellas tienen el conocimiento de que el a\u0301rbol maldito mal optimizado y de complejidad cuadra\u0301tica podri\u0301a esconderse entre las sombras camuflajea\u0301ndose como el a\u0301rbol legendario. < br/ > < br/ > En caso de encontrarse con un a\u0301rbol maldito se llevara\u0301n la condena de problemas mal redactados y llenos de feas implementaciones con un monto\u0301n de ifs. < br/ > < br/ > Sin embargo es fa\u0301cil de identificar cual es cual, aunque el nombre indique otra cosa, \u00a1El a\u0301rbol maldito no es realmente un a\u0301rbol! Aunque tiene n - 1 ve\u0301rtices estos no esta\u0301n necesariamente conectados de tal forma que no hay islas ni tampoco ciclos. Mientras que el legendario a\u0301rbol es identificable porque, e\u0301l si\u0301 es un a\u0301rbol. < br/ > < br/ > \u00a1Ayuda a nuestro du\u0301o de exploradoras a saber si se encontraron con el legendario a\u0301rbol milenario o el despreciable a\u0301rbol maldito! Ojo que en ambos a\u0301rboles sus ve\u0301rtices no esta\u0301n representados por simples nu\u0301meros, sino por nu\u0301meros milenarios. < i> ( Pueden ser muy grandes) . < / i>",
    "input": "Un entero N que indica la cantidad de ve\u0301rtices del a\u0301rbol. < br/ > < br/ > Seguido vendra\u0301n N - 1 lineas cada una indicada por dos enteros A y B indicando que hay una arista bi- direccional entre A y B.",
    "output": "< br/ > En caso de ser el a\u0301rbol milenario imprimir \" Hemos sido bendecidos\" , de caso contrario imprimir \" Que esta maldicion sea rapida\" .",
    "note": "",
    "topics": [
      "graphs",
      "trees"
    ],
    "id": 11445
  },
  {
    "title": "El edificio de los vecinos desinformados",
    "url": "https://omegaup.com/arena/problem/El-edificio-de-los-vecinos-curio",
    "history": "Como parte de su tarea, Susana Distancia tambie\u0301n ha tenido que informar sobre la sana distancia a las personas que no tienen tele\u0301fono. Incluso descubrio\u0301 un edificio de departamentos sin tele\u0301fonos en el que ninguno de sus habitantes estaba informado. Los N departamentos de este edificio esta\u0301n numerados del 1 al N y Susana Distancia escogio\u0301 algunos para ir a informar personalmente a sus habitantes. Tras ello, Susana les pidio\u0301 a las personas elegidas que fueran a avisar a sus vecinos desinformados y que les dieran la misma indicacio\u0301n. Susana tambie\u0301n pidio\u0301 que cada vez que un habitante le avisara a otro, anotaran esto en una bita\u0301cora. Al poco tiempo, el edificio completo ya estaba enterado de las medidas de sana distancia. Los habitantes del edificio estaban orgullosos de lo que lograron y decidieron reconstruir, a partir de los M registros de la bita\u0301cora, la lista de los S departamentos A_ 1, A_ 2, . . . , A_ S cuyos habitantes fueron directamente informados por Susana Distancia y la lista de los T departamentos B_ 1, B_ 2, . . . , B_ T cuyos habitantes no le informaron a ningu\u0301n vecino.",
    "input": "La primera li\u0301nea contiene el entero N y la segunda li\u0301nea contiene un entero M. Cada una de las siguientes M li\u0301neas contiene dos enteros P_ i y Q_ i, lo que significa que el habitante del departamento P_ i le informo\u0301 al vecino del departamento Q_ i. Puedes suponer que la bita\u0301cora no incluye registros donde un vecino le avisa a otro que ya estaba informado.",
    "output": "La primera li\u0301nea contiene los enteros S y T. La segunda li\u0301nea contiene los S enteros A_ 1, A_ 2, . . . , A_ S en orden creciente. La tercera li\u0301neacontiene los T enteros B_ 1, B_ 2, . . . , B_ T en orden creciente. # Li\u0301mites0 \u2264 M < N \u2264 10^ 51 \u2264 P_ i = \u0338 Q_ i \u2264 N",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 11390
  },
  {
    "title": "Contando menores",
    "url": "https://omegaup.com/arena/problem/Contando-menores",
    "history": "# ProblemaSe te da un arreglo de N nu\u0301meros y por cada posicio\u0301n quieres saber cuantos nu\u0301meros hay a la derecha tal que sean menores al de la posicio\u0301n actual. Como el ultimo elemento no tiene nadie a la derecha, es 0 por default. Por ejemplo, si tenemos el arreglo [ 12, 3, 2, 5, 4, 0] el resultado debe ser 5, 2, 1, 2, 1, 0. Porque para el primer elemento que es 12 todos son menores que el, mientras para 3 hay 2 elementos que son menores a el, los cuales son 2 y 0. Asi\u0301 sucesivamente hasta obtener todas las respuestas.",
    "input": "Se te da el nu\u0301mero N que representa la cantidad de nu\u0301meros del arreglo. En la segunda li\u0301nea se te dan n nu\u0301meros que son los elementos de arreglo.",
    "output": "n nu\u0301meros que representan lo descrito en el problema",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "data structures",
      "binary search"
    ],
    "id": 10497
  },
  {
    "title": "Agustin y sus amigos",
    "url": "https://omegaup.com/arena/problem/Agustin-y-sus-amigos",
    "history": "En el lejano pueblo en el que vive Agusti\u0301n ( llamado Bogota\u0301) la gente normalmente es muy amistosa. Tienen esta regla de que el amigo de mi amigo es mi amigo, o sea, si digamos Juan es amigo de Pedro y Pedro es amigo de Se\u0301rvulo, entonces Juan se volveri\u0301a amigo de Se\u0301rvulo. Y no solo eso, tambie\u0301n se aseguran que su amistad sea compartida, o sea, si Juan es amigo de Pedro tiene que pasar que Pedro sea amigo de Juan ( en otros pueblos no pasa esto y la verdad es bastante triste) . Tambie\u0301n pasa que cada persona es amiga de si\u0301 misma, cosa que no es tan remarcable como las dos anteriores. Estas condiciones hacen que en Bogota\u0301 se generen grupos de amigos donde, en el grupo, todos son amigos con todos. Agusti\u0301n, que algu\u0301n di\u0301a quiere ser alcalde, estaba muy preocupado por el estado de felicidad de los habitantes de su pueblo y llego a una conclusio\u0301n despue\u0301s de mucho pensarlo; si alguien esta triste sus amigos que esta\u0301n ma\u0301s felices le pueden contagiar un poco de su felicidad, asi\u0301 que genero una medida de felicidad que se trata de: dado un grupo de amigos, su i\u0301ndice de felicidad es el menor i\u0301ndice de felicidad entre todas las personas del grupos sumado con el mayor i\u0301ndice de felicidad entre todas las personas del grupo; esto es, si por ejemplo Juan, Pedro, y Gustavo son un grupo de amigos tal que Juan tiene un i\u0301ndice de felicidad 10, Pedro tiene uno de 9 y Gustavo tiene uno de 8, el i\u0301ndice de felicidad del grupo seri\u0301a 8+ 10= 18. Ahora, te preguntara\u0301s, \u00bfCo\u0301mo hallar el i\u0301ndice de felicidad de cada persona? No importa, eso lo ha venido hallando el gobierno de la ciudad de Bogota\u0301 con me\u0301todos que tampoco tienen sentido. Ese i\u0301ndice de cada ciudadano lo cambian de vez en cuando cuando hallan nuevos datos que los haga evaluar su decisio\u0301n. Agusti\u0301n, que algu\u0301n di\u0301a planea lanzarse de alcalde, te pidio\u0301 que hicieras un co\u0301digo que pudiera resolver una serie de queries, en concreto tres: * * Query 0: * Entran dos datos, A y B, que significa que el ciudadano con el nu\u0301mero A y el ciudadano con el nu\u0301mero B se acaban de volver amigos. * * Query 1: * Entra un dato, K, y tiene que imprimir la cantidad de grupos que tienen un i\u0301ndice de felicidad menor o igual a K* * Query 2: * Entra dos datos, A y I, que significa que el i\u0301ndice de felicidad del ciudadano con el nu\u0301mero A acaba de cambiar a IEn Bogota\u0301 hay N ciudadanos, y a cada uno se le asigna un nu\u0301mero del 1 hasta el N. Igual, el programa empieza con los i\u0301ndices de felicidad iniciales de cada ciudadano ( V_ 1, V_ 2, V_ 3, . . . , V_ n) correspondientes a los i\u0301ndices de felicidad iniciales de las personas ( 1, 2, 3, . . . , n) . Por favor, \u00bfPuedes ayudar a los ciudadanos del pueblo de Agusti\u0301n a estar a gusti\u0301n? : )",
    "input": "En la primera li\u0301nea un entero N, en la segunda li\u0301nea N enteros que representan V_ 1, V_ 2, V_ 3, . . . , V_ n correspondientes a los i\u0301ndices de felicidad iniciales de las personas 1, 2, 3, . . . , n respectivamente. En la tercera li\u0301nea un entero Q correspondiente a la cantidad de queries. En las siguientes Q li\u0301neas, cada una empieza con el nu\u0301mero del tipo de query y luego con los datos correspondientes a cada query.",
    "output": "Para cada query de tipo 1, imprimir la solucio\u0301n de esa query.",
    "note": "",
    "topics": [
      "graphs",
      "data structures",
      "trees"
    ],
    "id": 8604
  },
  {
    "title": "R\u00edos",
    "url": "https://omegaup.com/arena/problem/riv",
    "history": "Casi todo el reino de Byteland esta\u0301 cubierto por bosques y ri\u0301os. Los ri\u0301os pequen\u0303os se unen en ri\u0301os ma\u0301s grandes, y finalmente todos los ri\u0301os se unen en un u\u0301nico ri\u0301o grande. El ri\u0301o grande desemboca en el mar cerca de Bytetown. Hay n villas de len\u0303adores en Byteland, cada una ubicada cerca de un ri\u0301o. Hay un gran aserradero en Bytetown que procesa todos los a\u0301rboles cortados en el reino. Los a\u0301rboles bajan flotando desde las villas a trave\u0301s de los ri\u0301os al aserradero en Bytetown. El rey de Byteland decidio\u0301 construir k aserraderos adicionales en algunas villas para reducir el costo de transportar los a\u0301rboles hacia abajo. Despue\u0301s de construir los aserraderos, no todos los a\u0301rboles necesitara\u0301n bajar hasta Bytetown, ya que podra\u0301n ser procesados en el primer aserradero que encuentren mientras flotan ri\u0301o abajo. Obviamente los a\u0301rboles cortados cerca de una villa con un aserradero no necesitara\u0301n ser transportados por ri\u0301o. Tambie\u0301n hay que notar que los ri\u0301os en Byteland no se separan. Asi que, para cada villa, hay un u\u0301nico camino ri\u0301o abajo hacia Bytetown. Los contadores del rey calcularon cua\u0301ntos a\u0301rboles son cortados por cada villa al an\u0303o. Debes de decidir do\u0301nde construir los aserraderos para minimizar el costo total de transportar los a\u0301rboles por an\u0303o. El costo de transporte es de un centavo por kilo\u0301metro, por a\u0301rbol. # ProblemaEscribe un programa que dadas las villas, el nu\u0301mero de aserraderos a construir, y la descripcio\u0301n de los ri\u0301os, determine el costo mi\u0301nimo de transporte luego de colocar los aserraderos.",
    "input": "La primera li\u0301nea contiene 2 enteros: n \u2014 el nu\u0301mero de villas que no son Bytetown ( 2 \u2264 n \u2264 100) , y k \u2014 el nu\u0301mero de aserraderos adicionales a construir ( 1 \u2264 k \u2264 50 y k \u2264 n) . Las villas esta\u0301n numeradas 1, 2, . . . , n mientras que Bytetown tiene el nu\u0301mero 0. Las siguientes n li\u0301neas contendera\u0301n 3 enteros separados por espacios. Donde la li\u0301nea i + 1 contendera\u0301: * w_ i \u2014 el nu\u0301mero de a\u0301rboles cortados cerca de la villa i por an\u0303o con 0 \u2264 w_ i \u2264 10000, * v_ i \u2014 la primer villa ( o Bytetown) que se encuentra ri\u0301o abajo desde la villa i ( 0 \u2264 v_ i \u2264 n) , * d_ i \u2014 la distancia ( en kilo\u0301metros) por ri\u0301o desde la villa i a la villa v_ i ( 1 \u2264 d_ i \u2264 10000) . Se garantiza que el costo total de trasportar todos los a\u0301rboles al aserradero en Bytetown en un an\u0303o no excede 2000000000 centavos.",
    "output": "La primera y u\u0301nica li\u0301nea de la salida debera\u0301 contener un so\u0301lo entero: el costo mi\u0301nimo de transporte ( en centavos)",
    "note": "",
    "topics": [
      "graphs",
      "dp",
      "trees"
    ],
    "id": 8384
  },
  {
    "title": "Sokoban Reloaded",
    "url": "https://omegaup.com/arena/problem/SokobanReloaded",
    "history": "Seguramente ya conoces el clasico juego de Sokoban. Por si no fuera asi, se trata de que el obrero empuje los rubies que se muestran en la figura para ponerlos sobre los circulos verdes; o en muchas versiones, cajas sobre marcas en el suelo. Considera un juego de sokoban en el cual el obrero debe empujar una sola caja a traves de un cuarto hacia una ubicacio\u0301n determinada. Solo puede empujarla y no tiene suficientes fuerzas para tirar de ella. El acto de empujar la caja se ejerce cuando el obrero estando en una casilla adyacente a la caja la empuja, pasando el obrero a ocupar la casilla que antes ocupaba la caja y e\u0301sta la casilla vecina a la que ocupaba originalmente. El obrero so\u0301lo puede empujar la caja desde una casilla vecina horizontal o verticalmente, NUNCA en diagonal. Cuando en un movimiento no empuja la caja, el obrero puede moverse una casilla al norte, sur, este u oeste, siempre y cuando no pase a una casilla que este ocupada por una pared( No\u0301tese que el obrero tampoco se puede mover en diagonal) . De igual manera, el obrero solo puede empujar la caja si la caja pasa a ocupar un lugar en el cual no se encuentra una pared. El cuarto esta\u0301 representado por una cuadricula de 7 x 7 rodeada de una pared perimetral. # ProblemaEscribe un programa que dado el mapa del cuarto: Encuentre la longitud de la secuencia de movimientos mas corta para que el obrero empuje la caja hasta la ubicacio\u0301n dada, asi\u0301 como la secuencia de movimientos necesaria para llevar la caja al punto final",
    "input": "La entrada constara\u0301 de 7 li\u0301neas, cada una de 7 caracteres dando el mapa del laberinto. Los caracteres X indican paredes, el caracter O( O, no cero) indica la ubicacio\u0301n del obrero, el caracter C la ubicacio\u0301n de la caja, y el caracter D el lugar de destino de la caja. Los pasillos por donde el obrero y la caja pueden transitar se representan por un punto ( caracter ASCII 46) . El j- e\u0301simo caracter de la i- e\u0301sima li\u0301nea representa el contenido de la casilla que se encuentra en la fila i, columna j del mapa del cuarto.",
    "output": "La primera linea debera\u0301 contener de un solo entero n, siendo n el taman\u0303o de la secuencia de pasos para colocar la caja en el lugar de destino. La segunda li\u0301nea, n caracteres separados por un espacio, indicando el movimiento del obrero. Los movimientos sera\u0301n representados por las letras mayu\u0301sculas N, S, E, O que significan movimiento al norte, sur, este u oeste respectivamente. De haber ma\u0301s de una respuesta correcta con la misma longitud, cualquiera sera\u0301 considerada correcta.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 7620
  },
  {
    "title": "Charly, Blak y la casa de To\u00f1o",
    "url": "https://omegaup.com/arena/problem/Charly-Blak-y-la-casa-de-Tono",
    "history": "La casa de Ton\u0303o abrira\u0301 tres nuevas sucursales en la ciudad! Charly al ser tan adicto a su comida ha decidido cambiarse de casa, a una tal que la suma de las distancias de su nueva casa a las nuevas sucursales sea lo mi\u0301nimo posible. La ciudad de Me\u0301xico la representaremos como un a\u0301rbol de N nodos numerados de 1 a N. # ProblemaComo todavi\u0301a no anuncian en que lugares pondra\u0301n las nuevas sucursales, Charly ira\u0301 practicando su velocidad de respuesta para determinar donde sera\u0301 su nueva casa. Para esto le pidio\u0301 ayuda a Blak. Blak le hara\u0301 Q preguntas a Charly diciendo: * \" Si las nuevas sucursales de la casa de Ton\u0303o esta\u0301n en los nodos A, B, y C, \u00bfCual nodo sera\u0301 tu nueva casa? \" * Por cierto, considera que Charly esta\u0301 loco, asi\u0301 que puede decidir mudarse a una sucursal.",
    "input": "En la primera li\u0301nea dos enteros N y Q, la cantidad de nodos del a\u0301rbol y la cantidad de preguntas que hara\u0301 Blak. En las siguientes N- 1 li\u0301neas una pareja de enteros, indicando que hay una conexio\u0301n entre esos nodos. En las siguientes Q li\u0301neas tres enteros distintos A, B y C, los lugares donde se abrira\u0301n las nuevas sucursales.",
    "output": "Q li\u0301neas, en cada una de ellas la respuesta a la i- esima pregunta con dos enteros D y S, el indice del nodo que sera\u0301 la nueva casa de Charly y la suma de la distancia de D a A, B y C respectivamente.",
    "note": "",
    "topics": [
      "graphs",
      "trees"
    ],
    "id": 7000
  },
  {
    "title": "2018_1 Validacion",
    "url": "https://omegaup.com/arena/problem/2018_1_Validacion",
    "history": "Recibir un par de nu\u0301meros enteros, mientras que estos no sean iguales, o uno sea par y el otro impar, o los dos sean mayores de mil.",
    "input": "Cada ciclo, dos nu\u0301meros enteros.",
    "output": "Si los dos nu\u0301meros recibidos no cumplen con las condiciones requeridas, imprimir \u201cTODAVIA NO\u201c y volver a pedir dos nu\u0301meros de entrada. Si los dos nu\u0301meros cumplen con las condiciones, imprimir \u201cYA\u201c y finalizar.",
    "note": "",
    "topics": [
      "graphs",
      "implementation",
      "trees",
      "binary search"
    ],
    "id": 5772
  },
  {
    "title": "Muletillas de robots",
    "url": "https://omegaup.com/arena/problem/Muletillas-de-robots",
    "history": "Mucha gente tiene problemas al exponer, y los robots humanoides del planeta N- 0J4- V4 no son la excepcio\u0301n. Aunque estos robots hablan con nu\u0301meros en lugar de con palabras, tambie\u0301n son propensos a usar muletillas parecidas al cla\u0301sico \" este. . . \" de los humanos terrestres ( pero ellos con nu\u0301meros) . Tuviste acceso al discurso de un robot profesor de programacio\u0301n y te gustari\u0301a detectar si tambie\u0301n usa muletillas. Como en realidad no entiendes el idioma de los robots, asumira\u0301s que la muletilla es el nu\u0301mero que ma\u0301s aparece en el discurso del robot. Escribe un programa que te ayude a identificarlo.",
    "input": "Un entero N seguido de los N enteros que conforman el discurso del robot. Puedes asumir que 1 \u2264 N \u2264 100, 000 y que todos los enteros del discurso esta\u0301n en el rango de 0 a 2, 000, 000, 000.",
    "output": "El entero que ma\u0301s aparezca en el discurso del robot. En caso de que varios nu\u0301meros aparezcan la misma cantidad de veces, puedes imprimir cualquiera de ellos.",
    "note": "",
    "topics": [
      "sortings",
      "graphs",
      "trees"
    ],
    "id": 5760
  },
  {
    "title": "K-tree",
    "url": "https://omegaup.com/arena/problem/K-tree",
    "history": "Recientemente una estudiante creativa, Lesha, tuvo una conferencia sobre los a\u0301rboles. Despue\u0301s de la conferencia Lesha se inspiro\u0301 y se le ocurrio\u0301 su propio a\u0301rbol, al cual llamo\u0301 k- tree. Un k- tree es un a\u0301rbol con rai\u0301ces infinitas donde: - Cada ve\u0301rtice tiene exactamente k hijos; - Cada arista tiene cierto peso; - Si miramos las aristas que van de algu\u0301n ve\u0301rtice asus hijos ( exactamente k aristas) , entonces sus pesos sera\u0301n iguales a 1, 2, 3, . . . , k . La imagen de abajo muestra una parte de un 3- a\u0301rbol. ! [ ] ( http: / / codeforces. com/ predownloaded/ d8/ 06/ d806ea87722907ab843e197d329bceb3e8403972. png) Tan pronto como Dima, un buen amigo de Lesha, se entero\u0301 del a\u0301rbol, se pregunto\u0301 de inmediato: * \u00bfCua\u0301ntos caminos de peso total n ( la suma de todos los pesos de las aristas en el camino) esta\u0301n ahi\u0301, partiendo de la rai\u0301z de un k- tree y que contiene tambie\u0301n al menos una arista de peso al menos d ? . * Ayuda a Dima a encontrar una respuesta a su pregunta. Como el nu\u0301mero de formas puede ser bastante grande, imprima el resultado mo\u0301dulo 10 ^ 9 + 7.",
    "input": "Una li\u0301nea con tres enteros separados por espacios: n, k, d.",
    "output": "Un entero, la respuesta a la pregunta de Dima en mo\u0301dulo 10^ 9 + 7.",
    "note": "",
    "topics": [
      "trees",
      "dp",
      "graphs",
      "dfs and similar",
      "math",
      "combinatorics"
    ],
    "id": 5692
  },
  {
    "title": "Recorridos en amplitud y en profundidad",
    "url": "https://omegaup.com/arena/problem/Recorridos-amplitud-profundidad",
    "history": "Los recorridos en amplitud y en profundidad sobre una gra\u0301fica son muy importantes en la pra\u0301ctica. Por ejemplo, muchos programas que juegan al ajedrez primero determinan las consecuencias en el corto plazo de todas las posibles jugadas ( bu\u0301squeda en amplitud) , eligen un subconjunto pequen\u0303o de las estrategias que parecen buenas y luego analizan lo que puede pasar con ellas ma\u0301s a largo plazo ( bu\u0301squeda en profundidad) . En este problema debera\u0301s implementar los recorridos en amplitud y en profundidad sobre un a\u0301rbol. Por ejemplo, dado el siguiente a\u0301rbol en el que los hijos de cada ve\u0301rtice se procesan de izquierda a derecha, el recorrido en amplitud visitara\u0301 los ve\u0301rtices en el orden 0 5 4 7 1 2 3 6 mientras que el recorrido en profundidad visitara\u0301 los ve\u0301rtices en el orden 0 5 1 6 4 7 2 3. Escribe un programa que tome un a\u0301rbol de N ve\u0301rtices e imprima tales recorridos. ! [ enter image description here] [ 1]",
    "input": "Un entero N seguido de N li\u0301neas. Cada li\u0301nea inicia con dos enteros V, H que indican que el ve\u0301rtice V tiene H hijos; posteriormente en la li\u0301nea se listan los H hijos de V segu\u0301n aparecen en el a\u0301rbol de izquierda a derecha. Puedes suponer que 1 \u2264 N \u2264 100, 000 y que los ve\u0301rtices esta\u0301n numerados del 0 al N - 1, donde el ve\u0301rtice 0 siempre es la rai\u0301z del a\u0301rbol.",
    "output": "Dos li\u0301neas con N enteros cada uno. La primera li\u0301nea contiene el orden en el que se visitan los ve\u0301rtices cuando se recorre el a\u0301rbol en amplitud y la segunda li\u0301nea el orden cuando se recorre el a\u0301rbol en profundidad.",
    "note": "",
    "topics": [
      "graphs",
      "implementation",
      "trees"
    ],
    "id": 5666
  },
  {
    "title": "COCI - Zagrade",
    "url": "https://omegaup.com/arena/problem/COCI---Zagrade",
    "history": "Una expresio\u0301n es una cadena de consiste so\u0301lo en parejas de pare\u0301ntesis correctamente apareados. Por ejemplo, \" ( ) ( ) \" y \" ( ( ) ( ) ) \" son expresiones, mientras que \" ) ( \" y \" ( ) ( \" no lo son. Podemos definir expresiones de forma inductiva como sigue: * \" ( ) \" es una expresio\u0301n. * Si a es una expresio\u0301n, entonces \" ( a) \" tambie\u0301n es una expresio\u0301n. * Si a y b son expresiones, entonces \" ab\" es tambie\u0301n una expresio\u0301n. Un a\u0301rbol es una estructura que consiste en n nodos indicados con nu\u0301meros de 1 a n y n - 1 bordes colocadosHay una ruta u\u0301nica entre cada uno de los dos nodos. Adema\u0301s, se escribe un solo cara\u0301cter en cada nodo. El cara\u0301cter es un pare\u0301ntesis abierto \" ( \" o un cerrado \" ) \" . Para los diferentes nodos a y b, w_ a, b es una cadena obtenida atravesando el camino u\u0301nico de a a b y, uno por uno, an\u0303adiendo el cara\u0301cter escrito en el nodo que estamos pasando. La cadena w_ a, b tambie\u0301n contiene el cara\u0301cter escrito en el nodo a ( enLa primera posicio\u0301n) y el cara\u0301cter escrito en el nodo b ( en la u\u0301ltima posicio\u0301n) . Encuentre el nu\u0301mero total de pares de nodos diferentes a y b tales que w_ a, b es una expresio\u0301n correcta.",
    "input": "La primera li\u0301nea de contiene el nu\u0301mero entero n - el nu\u0301mero de nodos en el a\u0301rbol. La siguiente li\u0301nea contiene una cadena de caracteres n donde cada cara\u0301cter es \" ) \" o \" ( \" , el jth en la cadena es el cara\u0301cter escrito en el nodo j. Cada una de las siguientes n - 1 li\u0301neas contiene dos enteros positivos diferentes x y y ( 1 \u2264 x, y \u2264 n) - las etiquetas de los nodos conectados directamente con un borde.",
    "output": "El numero requerido de pares de nodos.",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 5335
  },
  {
    "title": "Vacas Vecinas",
    "url": "https://omegaup.com/arena/problem/Vacas-Vecinas",
    "history": "El Granjero Juan se ha dado cuenta que sus vacas frecuentemente visitan campos vecinos. Teniendo esto en cuenta, e\u0301l quiere plantar suficiente pasto en cada uno de sus campos, no solamente para lasvacas situadas inicialmente en esos campos, pero tambie\u0301n para las vacas que los visitan de campos vecinos. Especi\u0301ficamente, la granja de GJ consiste de N campos ( 1 < = N < = 100, 000) , donde algunos pares de campos esta\u0301n conectados por senderos bidireccionales ( en total N- 1 de ellos) . GJ ha disen\u0303ado la granja de tal manera entre cualesquiera dos pares i y j de campos, hay un camino u\u0301nico hecho por senderos conectando i y j. El campo i es la casa de C( i) vacas, aunque algunas veces se mueven a un campo diferente cruzando hasta K senderos ( 1 < = K < = 20) . GJ quiere plantar suficiente pasto en cada pasto i para alimentar el nu\u0301mero ma\u0301ximo de vacas, M( i) , que podri\u0301a eventualmente ocupar ese campo \u2013 esto es, el nu\u0301mero de vacas que potencialmente podri\u0301an llegar al campo i cruzando a lo ma\u0301s K senderos. Dada la estructura de la granja de GJ y el valor de C( i) para cada campo i, ayude a GJ a calcular M( i) para cada campo i.",
    "input": "Li\u0301nea 1: Dos enteros separado por un espacio, N y K. Li\u0301neas 2. . N: Cada li\u0301nea contiene dos enteros separados por un espacio, i y j ( 1 < = i, j < = N) indicando que los campos i y j esta\u0301n conectados directamente por un sendero. Li\u0301neas N+ 1. . 2N: La li\u0301nea N+ i contiene el entero C( i) . ( 0 < = C( i) < = 1000) .",
    "output": "Li\u0301neas 1. . N: La li\u0301nea i debe contener el valor de M( i) .",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "trees"
    ],
    "id": 4904
  },
  {
    "title": "Las ganancias de Marco I",
    "url": "https://omegaup.com/arena/problem/Las-ganancias-de-Marco-I",
    "history": "Marco vende regularmente burritos en la Universidad Panamericana, para poder tener un buen control de sus ventas las ganancias de cada dia las guarda en una alcanci\u0301a diferente. Dados n di\u0301as Marco quiere saber cuales fueron sus ganancias en diferentes periodos de tiempo.",
    "input": "- Un numero n indicando la cantidad de di\u0301as que vendio\u0301. - n enteros, cada uno con un numero x_ i indicando la ganancia del dia i. - Un numero q indicando la cantidad de rangos que quiere consultar. - q lineas, cada una con 2 enteros a y b donde a es el primer dia del rango y b el u\u0301ltimo dia.",
    "output": "Una linea por cada rango indicando la suma desde el dia a hasta el dia b",
    "note": "",
    "topics": [
      "trees",
      "dp",
      "graphs",
      "implementation"
    ],
    "id": 4891
  },
  {
    "title": "Calculando divisores",
    "url": "https://omegaup.com/arena/problem/CALC_DIVISORES",
    "history": "Un divisor es una cantidad que divide a otra sin dejar residuo. Por ejemplo, 4 es divisor de 20, dado que 20 \u00f7 4 = 5, y el residuo de esta divisio\u0301n es 0. Para un nu\u0301mero n, existen dos nu\u0301meros que siempre van a ser sus divisores: 1 y n. Escribe un programa que calcule todos los divisores de un nu\u0301mero entero n.",
    "input": "La entrada consiste de una sola li\u0301nea con el valor de n.",
    "output": "Todos los divisores de n, uno por li\u0301nea, empezando desde el ma\u0301s grande hasta el ma\u0301s chico.",
    "note": "",
    "topics": [
      "math",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": 4353
  },
  {
    "title": "IOI 2015 - Towns",
    "url": "https://omegaup.com/arena/problem/Towns",
    "history": "Hay N pueblitos en Kazajista\u0301n, numerados de 0 a N - 1. Tambie\u0301n hay un nu\u0301mero desconocido deciudades grandes. Tanto los pueblitos como las ciudades grandes de Kazajista\u0301n se conocen como* asentamientos* . Todos los asentamientos de Kazajista\u0301n esta\u0301n conectados por una u\u0301nica red de carreterasbidireccionales. Cada carretera conecta dos asentamientos distintos y cada par de asentamientos esta\u0301 directamente conectado por a lo ma\u0301s una carretera. Para cada par de asentamientos a y b, existe una u\u0301nica manera para ir de a a b utilizando las carreteras, asumiendo que cada carretera se utiliza a lo ma\u0301s una vez. Se sabe que cada pueblito esta\u0301 directamente conectado a un u\u0301nico otro asentamiento, y cada ciudad grande esta\u0301 conectada a tres o ma\u0301s asentamientos. La siguiente figura muestra una red de 11 pueblitos y 7 ciudades grandes. Los pueblitos se muestran como ci\u0301rculos etiquetados con enteros y las ciudades grandes se muestran como cuadradosetiquetados con letras. < p style= \" text- align: center; \" > < img src= \" towns. png\" > < / p> Cada carretera tiene una longitud entera positiva. La distancia entre dos asentamientos es la sumami\u0301nima de las longitudes de las carreteras que se deben atravesar para ir de un asentamiento al otro. Para cada ciudad grande C, podemos definir como r( C) la distancia de al pueblito ma\u0301s alejado dedicha ciudad. Una ciudad grande C es un * centro* si la distancia r( C) es la ma\u0301s pequen\u0303a entre todas las ciudades grandes. La distancia entre un centro y el pueblito ma\u0301s alejado del centro se denotara\u0301 como R. Es decir, R es el valor ma\u0301s pequen\u0303o de todos los valores r( C_ i) para cualquier C_ i. En el ejemplo de arriba, el pueblito ma\u0301s alejado de la ciudad grande a es el pueblito 8, y la distancia entre ellos es r( a) = 1 + 4 + 12 = 17. Para la ciudad grande g tambie\u0301n tenemos que r( g) = 17. ( Uno de los pueblitos que esta\u0301 ma\u0301s alejado de * * g* * es el pueblito 6) . El u\u0301nico centro en el ejemplo de arriba es la ciudad grande f, con r( f) = 16. Por lo tanto, en el ejemplo de arriba, * * R* * es * * 16* * . Si se elimina un centro, la red se divide en mu\u0301ltiples piezas conectadas. Un centro esta\u0301 * balanceado* si cada una de las piezas sobrantes despue\u0301s de haber quitado el centro contiene a lo ma\u0301s \u230aN/ 2\u230b pueblitos. ( Hay que enfatizar que no estamos considerando las ciudades grandes) . Nota que \u230ax\u230b denota el entero ma\u0301s grande que es menor o igual a x. En nuestro ejemplo, la ciudad grande f es un centro. Si eliminamos la ciudad grande f, la red se dividira\u0301 en cuatro piezas conectadas. Estas cuatro piezas consisten en los siguientes conjuntos de pueblitos: * 0, 1, 10* , * 2, 3* , * 4, 5, 6, 7* , y * 8, 9* . Ninguna de las piezas tiene ma\u0301s de\u230a11/ 2\u230b = 5 pueblitos, por lo tanto la ciudad grande f es un centro balanceado. # ProblemaInicialmente, la u\u0301nica informacio\u0301n que tienes acerca de la red de asentamientos y carreteras es el nu\u0301mero N de pueblitos. No conoces el nu\u0301mero de ciudades grandes. Tampoco sabes nada acerca dela disposicio\u0301n de carreteras del pai\u0301s. So\u0301lo puedes obtener informacio\u0301n nueva haciendo preguntasacerca de las distancias entre pares de pueblitos. Tu tarea es determinar: * En todas las subtareas: la distancia R. * En las subtareas 3 a 6: determinar si existe un centro balanceado en la red. Necesitas implementar la funcio\u0301n ` hubDistance` . El evaluador calificara\u0301 mu\u0301ltiples casos en una solaejecucio\u0301n. El nu\u0301mero de casos por ejecucio\u0301n es a lo ma\u0301s * * 100* * . Para cada caso de prueba, el evaluadorllamara\u0301 a tu funcio\u0301n ` hubDistance` exactamente una vez. Asegu\u0301rate que tu funcio\u0301n inicializa todas lasvariables necesarias cada vez que se llama. # # Tu procedimiento: ` hubDistance( N, sub) ` # # # Para\u0301metros* ` N` : el nu\u0301mero de pueblitos. * ` sub` : el nu\u0301mero de subtarea ( explicado en la seccio\u0301n Subtareas) . * Si ` sub` es 1 o 2, la funcio\u0301n puede regresar ya sea R o - R. * Si ` sub` es mayor a 2, si existe un centro balanceado entonces la funcio\u0301n debe regresar R, de lo contrario debe regresar - R. Tu funcio\u0301n ` hubDistance` puede obtener informacio\u0301n de la red de carreteras llamando a la funcio\u0301n delevaluador ` getDistance( i, j) ` . Esta funcio\u0301n regresa la distancia entre los pueblitos ` i` y ` j` . Nota que si ` i` y ` j` son iguales, la funcio\u0301n regresara\u0301 ` 0` . Tambie\u0301n regresara\u0301 ` 0` si los argumentos son inva\u0301lidos. # Li\u0301mitesEn cada caso de prueba: * N es un entero entre 6 y 110, inclusive. * La distancia entre dos pueblitos distintos es entre 1 y 1, 000, 000, inclusive. El nu\u0301mero de preguntas que tu programa puede hacer es limitado. El li\u0301mite vari\u0301a por subtarea, y seindica en la tabla de abajo. Si tu programa intenta exceder el li\u0301mite del nu\u0301mero de preguntas, sera\u0301terminado y se asumira\u0301 que dio una respuesta incorrecta. # Subtarea 1 [ 13 puntos] * Nu\u0301mero de preguntas: N( N - 1) / 2* Encontrar centros balanceados: NO# Subtarea 2 [ 12 puntos] * Nu\u0301mero de preguntas: \u23087N/ 2\u2309* Encontrar centros balanceados: NO# Subtarea 3 [ 13 puntos] * Nu\u0301mero de preguntas: N( N - 1) / 2* Encontrar centros balanceados: SI# Subtarea 4 [ 10 puntos] * Nu\u0301mero de preguntas: \u23087N/ 2\u2309* Encontrar centros balanceados: SI* Cada ciudad grande esta\u0301 conectada a* exactamente* tres asentamientos# Subtarea 5 [ 13 puntos] * Nu\u0301mero de preguntas: \u23085N\u2309* Encontrar centros balanceados: SI# Subtarea 6 [ 39 puntos] * Nu\u0301mero de preguntas: \u23087N/ 2\u2309* Encontrar centros balanceados: SINota que \u2308x\u2309 denota el entero ma\u0301s pequen\u0303o que es mayor o igual a x. # Experimentacio\u0301nlibinteractive: download# Evaluador de ejemploNota que el nu\u0301mero de subtarea es parte de la entrada. El evaluador de ejemplo cambia sucomportamiento de acuerdo al nu\u0301mero de subtarea. El evaluador de ejemplo lee la entrada del archivo * towns. in* en el siguiente formato: * li\u0301nea 1: El nu\u0301mero subtarea y el nu\u0301mero de casos de prueba. * li\u0301nea 2: N_ 1, el nu\u0301mero de pueblitos en el primer caso de prueba. * siguientes N_ 1 li\u0301neas: El j- e\u0301simo nu\u0301mero ( 1 \u2264 j \u2264 N_ 1) en la i- e\u0301sima de estas li\u0301neas( 1 \u2264 i \u2264 N_ 1) es la distancia entre los pueblitos i - 1 y j - 1. * El resto de los casos tendra\u0301n el mismo formato que el primer caso de prueba. Para cada caso de prueba, el evaluador de ejemplo imprime el valor de retorno de ` hubDistance` y elnu\u0301mero de llamadas en li\u0301neas separadas. El archivo de entrada que corresponde al ejemplo de arriba es: 1 1110 17 18 20 17 12 20 16 23 20 1117 0 23 25 22 17 25 21 28 25 1618 23 0 12 21 16 24 20 27 24 1720 25 12 0 23 18 26 22 29 26 1917 22 21 23 0 9 21 17 26 23 1612 17 16 18 9 0 16 12 21 18 1120 25 24 26 21 16 0 10 29 26 1916 21 20 22 17 12 10 0 25 22 1523 28 27 29 26 21 29 25 0 21 2220 25 24 26 23 18 26 22 21 0 1911 16 17 19 16 11 19 15 22 19 0El formato es bastante diferente a especificar la lista de carreteras. Nota que tienes permiso demodificar los evaluadores de ejemplo para que utilicen un formato de entrada distinto.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 4234
  },
  {
    "title": "Arboles Chistosos 2",
    "url": "https://omegaup.com/arena/problem/Arboles-Chistosos-2",
    "history": "\" - Hay un problema, hay que sacarlo, echamelo Garo\" - dijo Ethan. # ProblemaTienes un a\u0301rbol que contiene N nodos, un a\u0301rbol es aquel que para cualquier par de nodos existe u\u0301nicamente un camino entre ellos, los nodos esta\u0301n numerados de 1 a N, cada arista en el a\u0301rbol tendra\u0301 un peso T_ i. Vamos a definir D( a, b) como la arista ma\u0301s pesada entre el camino de a hasta b. Ahora definamos C( w) es la cantidad de parejas ( a, b) 1\u2264 a \u2264 b \u2264 N tal que cumplan esta condicio\u0301n D( a, b) = w. Ahora como tu eres muy inteligente te hara\u0301n preguntas en el cual consiste de 2 enteros 1 \u2264 L \u2264 R \u2264 N con la suma de C( i) para toda i tal que L \u2264 i \u2264 R.",
    "input": "La primera li\u0301nea dos enteros N y Q el nu\u0301mero de nodos y el nu\u0301mero de preguntas que te hara\u0301n respectivamente. Siguientes N - 1 li\u0301neas contendra\u0301n 3 enteros A, B, C las cuales son que existe una arista entre A y B con un peso de C. Siguientes Q li\u0301neas contendra\u0301n dos enteros L y R de la pregunta a responder.",
    "output": "Q li\u0301neas con la respuesta de todas las preguntas respectivamente.",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "sortings"
    ],
    "id": 4083
  },
  {
    "title": "1.1 Moving 2 streets",
    "url": "https://omegaup.com/arena/problem/11-Moving-2-streets",
    "history": "# DescriptionProgramm Karel to move 2 streets foreward.",
    "input": "Start Karel in the initial situation illustrated in following figure! [ enter image description here] [ 1]",
    "output": "Karel' s task is to move 2 streets! [ enter image description here] [ 2] [ 1] : 7fa6da03f29b73b7947daa6e754067ddf14685fa. jpeg[ 2] : b954af5a500980caf9868320b7bd7de919215025. jpeg",
    "note": "",
    "topics": [
      "implementation",
      "trees",
      "graphs"
    ],
    "id": 3458
  },
  {
    "title": "IOI 2005 - Rivers",
    "url": "https://omegaup.com/arena/problem/Rivers",
    "history": "Casi todo el Reino de Bytelandia esta\u0301 cubierto de bosques y ri\u0301os. Pequen\u0303os ri\u0301os se unen formando ri\u0301os ma\u0301s grandes, quienes, a su vez, se unen formando un enorme ri\u0301o. El enorme ri\u0301o desemboca al mar cerca de * Ciudad- Byte* . Hay _ _ n_ _ villas de len\u0303adores en Bytelandia, cada una establecida cerca de un ri\u0301o. Actualmente, hay una gran serreri\u0301a en Ciudad- Byte que procesa todos los a\u0301rboles cortados en el Reino. Los a\u0301rboles son transportados ri\u0301o abajo desde las villas hasta la serreri\u0301a en * Ciudad- Byte* . El rey de Bytelandia decidio\u0301 construir k serreri\u0301as adicionales en algunas villas para reducir el costo de transportacio\u0301n de los a\u0301rboles hasta ri\u0301o abajo. Despue\u0301s de construir las serreri\u0301as adicionales, los a\u0301rboles ya no necesitara\u0301n ser transportados hasta * Ciudad- Byte* , sino que podra\u0301n ser procesados en la primera serreri\u0301a que encuentren ri\u0301o abajo. Obviamente, los a\u0301rboles cortados cerca de una villa con una serreri\u0301a no necesitara\u0301n ser transportados por el ri\u0301o. Es preciso mencionar que los ri\u0301os de Bytelandia no se bifurcan. Por lo tanto, por cada villa, hay un u\u0301nico camino desde ella hasta * Ciudad- Byte* . Los contadores del rey calcularon la cantidad de a\u0301rboles cortados en cada villa por an\u0303o. Debes decidir donde construir las serreri\u0301as para minimizar el costo total de transporte de a\u0301rboles por an\u0303o. El transporte fluvial cuesta un centavo por kilo\u0301metro, por cada a\u0301rbol.",
    "input": "La primer li\u0301nea de entrada contiene dos enteros: n \u0097 el nu\u0301mero de villas existentes sin contar Ciudad- Byte ( 2 < = n < = 100) , y k \u0097 el nu\u0301mero de serreri\u0301as adicionales que sera\u0301n construidas ( 1 < = k < = 50 y k < = n ) . Las villas esta\u0301n numeradas como * 1* , * 2* , , n, mientras que * Ciudad- Byte* es identificada con el nu\u0301mero 0. Cada una de las n li\u0301neas siguientes ( una para cada villa) contiene tres enteros, separados por espacios. La li\u0301nea i + 1 contiene: * w_ i \u0097 el nu\u0301mero de a\u0301rboles que se cortan cerca de la villa * i* por an\u0303o ( 0 < = w_ i < = 10, 000) , * v_ i \u0097 la primer villa ( o en su defecto, Ciudad- Byte) que se encuentra ri\u0301o abajo de la villa * i* ( 0 < = v_ i < = n) , * d_ i \u0097 la distancia ( dada en kilo\u0301metros) del ri\u0301o desde la villa * i* hasta la villa v_ i ( 0 < = d_ i < = 10 000) .",
    "output": "La primer y u\u0301nica li\u0301nea de salida debe contener un entero: * el costo mi\u0301nimo de transportacio\u0301n fluvial ( en centavos) * . Para un 50",
    "note": "",
    "topics": [
      "trees",
      "dp",
      "graphs"
    ],
    "id": 2859
  },
  {
    "title": "Barrancas del Cobre",
    "url": "https://omegaup.com/arena/problem/OMI2015LENGUAJE1",
    "history": "Las barrancas del cobre son uno de los puntos de intere\u0301s turi\u0301stico ma\u0301s famosos de Chihuahua. Una agencia de viajes te ha pedido ayuda para disen\u0303ar un recorrido a trave\u0301s de ellas. El recorrido a trave\u0301s de las barrancas tiene N vistas espectaculares numeradas de 1 a N. Por supuesto, hay algunas ma\u0301s llamativas que otras. Los expertos de la agencia han calificado cada una de las N vistas de acuerdo a su espectacularidad. Los recorridos que vende la agencia llevan a los turistas a un punto de inicio y a partir de ahi\u0301 visitan las siguientes K vistas. La agencia tiene una preocupacio\u0301n. Cuando llevas un turista de una vista a la siguiente, si la segunda vista es * * ma\u0301s espectacular* * el turista se siente * * emocionado* * , sin embargo si la segunda vista es * * menos espectacular* * el turista se siente * * decepcionado* * . La emocio\u0301n y decepcio\u0301n del turista pueden medirse. Cuando el turista pasa de una vista a la siguiente, su emocio\u0301n total cambia de acuerdo a las siguientes reglas: * Si la nueva vista es * * ma\u0301s espectacular* * la emocio\u0301n total * * aumenta* * una cantidad igual a la diferencia de espectacularidad entre ambas barrancas. * Si la nueva vista es * * menos espectacular* * la emocio\u0301n total * * disminuye* * una cantidad igual a la diferencia de espectacularidad entre ambas barrancas. Obviamente la agencia no puede reacomodar las barrancas, asi\u0301 que en un recorrido el turista pasara\u0301 por vistas que aumenten su emocio\u0301n y vistas que disminuyan su emocio\u0301n. La agencia quiere que le ayudes a encontrar el recorrido con el cual el turista quedara\u0301 ma\u0301s emocionado. * * NOTA: Te recomendamos ampliamente revisar la explicacio\u0301n del ejemplo para que el problema te quede ma\u0301s claro* * . # ProblemaEscribe un programa que dada la espectacularidad de cada una de las N vistas y el nu\u0301mero K de vistas que se van a incluir en el recorrido encuentre cua\u0301l es la emocio\u0301n total ma\u0301xima que se puede lograr.",
    "input": "Tu programa debe leer del teclado la siguiente informacio\u0301n: * En la primera li\u0301nea los nu\u0301mero N y K, el nu\u0301mero de vistas y la longitud del recorrido. * En la siguiente li\u0301nea habra\u0301 N nu\u0301meros no negativos separados por un espacio que indican la espectacularidad de las N vistas.",
    "output": "Tu programa debe escribir en la pantalla un u\u0301nico nu\u0301mero que representa la emocio\u0301n total ma\u0301xima posible para un recorrido de K vistas. # Restricciones2 \u2264 N \u2264 50, 000, el nu\u0301mero de vistas. 1 \u2264 K \u2264 N, la cantidad de vistas en el recorrido. 0 \u2264 e_ i \u2264 10, 000, la espectacularidad de la i- e\u0301sima vista.",
    "note": "",
    "topics": [
      "math",
      "implementation",
      "graphs",
      "trees",
      "matrices"
    ],
    "id": 2755
  },
  {
    "title": "IOI 2012 - Cangrejo Escribano",
    "url": "https://omegaup.com/arena/problem/Cangrejo-Escribano",
    "history": "< center> ! [ Logo IOI 2012] ( logo12. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Cangrejo EscribanoAlgunas personas dicen que Leonardo da Vinci fue un gran admirador de Johannes Gutenberg, el herrero alema\u0301n que invento\u0301 la impresio\u0301n de tipos mo\u0301viles, y que le rindio\u0301 homenaje disen\u0303ando una maquina llamada \" el cangrejo escribano\" \u0097 * il gambero scrivano* \u0097 el cual era un dispositivo de escritura bastante simple. Dicho dispositivo era muy similar a una maquina de escribir moderna y aceptaba dos comandos: uno para escribir el siguiente caracter y otro para deshacer los comandos ma\u0301s recientes. La caracteri\u0301stica ma\u0301s notable del cangrejo escribano es que su comando para deshacer es extremadamente poderoso, dado que al ser e\u0301l mismo considerado como un comando, puede ser deshecho. Tu tarea consiste en implementar una versio\u0301n en software del cangrejo escribano: debe iniciar con un texto vaci\u0301o, aceptar una secuencia de comandos ingresados por el usuario y responder preguntas para conocer posiciones especificas sobre la versio\u0301n actual del texto, como se muestra a continuacio\u0301n. * ` EscribirLetra( L) ` . Agrega al final del texto la letra L ( ` ' a' ` \u2264 L \u2264 ` ' z' ` ) . * ` DeshacerComandos( U) ` . Deshace los u\u0301ltimos U comandos realizados, para un entero positivo U. * ` ObtenerLetra( P) ` . Imprime la letra en la posicio\u0301n P del texto, para un i\u0301ndice no negativo P ( indexado desde 0) . Esta pregunta * * no* * es un comando, por lo tanto es ignorada por el comando deshacer. Dichas funciones sera\u0301n llamadas n veces en cualquier orden. Se garantiza que el valor de U no excedera\u0301 la cantidad de comandos previamente recibidos y el i\u0301ndice P sera\u0301 menor que la longitud del texto actual. ` DeshacerComandos( U) ` deshace los U previos comandos en * reversa* ; esto es, si el comando a ser deshecho es ` EscribirLetra( L) ` , entonces quita L del final del texto actual. En cambio, si el comando a ser deshecho es ` DeshacerComandos( V) ` , entonces rehace los V comandos previos en su orden * original* . Considera la siguiente secuencia de comandos como ejemplo: < center> ! [ Ejemplo] ( ejemplo. png) < / center>",
    "input": "La primer li\u0301nea contiene el nu\u0301mero total de comandos n. Las siguientes n li\u0301neas pueden ser: * Una letra ` ' T' ` seguida de un caracter L. Representando un comando ` EscribirLetra( L) ` . * Una letra ` ' U' ` seguida de un entero U. Representando un comando ` DeshacerComandos( U) ` . * Una letra ` ' P' ` seguida de un i\u0301ndice P. Representando un comando ` ObtenerLetra( P) ` .",
    "output": "Por cada comando ` ObtenerLetra( P) ` en la entrada, debera\u0301s imprimir una li\u0301nea con el caracter que estaba en la posicio\u0301n P del texto en el momento en que se realizo\u0301 la pregunta. | | input14T aT bP 1T dU 2U 1P 2T eU 1U 5T cP 2U 2P 2| | outputbdcd| | end# Li\u0301mites# Subtarea 1 [ 5 puntos] * 1 \u2264 n \u2264 100* No habra\u0301 comandos ` DeshacerComandos` . # Subtarea 2 [ 7 puntos] * 1 \u2264 n \u2264 100* No se deshara\u0301n comandos ` DeshacerComandos` . # Subtarea 3 [ 22 puntos] * 1 \u2264 n \u2264 5, 000* No hay restricciones en los comandos. # Subtarea 4 [ 26 puntos] * 1 \u2264 n \u2264 1, 000, 000* Todas los comandos ` ObtenerLetra` ira\u0301n al final. # Subtarea 5 [ 40 puntos] * 1 \u2264 n \u2264 1, 000, 000* No hay restricciones en los comandos.",
    "note": "",
    "topics": [
      "data structures",
      "math",
      "strings",
      "graphs",
      "matrices",
      "trees",
      "string suffix structures"
    ],
    "id": 2130
  },
  {
    "title": "Wifi",
    "url": "https://omegaup.com/arena/problem/wifi",
    "history": "En una ciudad hay una red de dispositivos porta\u0301tiles que opera de la siguiente manera: El a\u0301rea esta\u0301 dividida en casillas que forman una matriz de SxS con filas y columnas numeradas de 0 a S- 1. Cada casilla contiene una estacio\u0301n local. El nu\u0301mero de dispositivos porta\u0301tiles puede cambiar dentro de una misma casilla porque los dispositivos pueden ser movidos de una casilla a otra, prendidos o apagados. Una estacio\u0301n local puede reportar cambios en el nu\u0301mero de dispositivos activos enviando su fila y su columna a la estacio\u0301n principal. # ProblemaEscribe un programa que reciba los reportes y responda preguntas acerca del total de dispositivos porta\u0301tiles activos en cualquier regio\u0301n rectangular.",
    "input": "Li\u0301nea 1: Contendra\u0301 un u\u0301nico entero indicando el valor de * S* Siguientes li\u0301neas: Cada li\u0301nea puede representar o una pregunta o un reporte. Si la li\u0301nea representa un reporte contendra\u0301 el caracte\u0301r 1 seguido de 3 enteros X Y A indicando que a la posicio\u0301n ( X, Y) se sumaron A aparatos porta\u0301tiles( no\u0301tese que A puede ser negativo) . Si la li\u0301nea representa una pregunta contendra\u0301 el caracter 2 seguido de 4 enteros L B R y T, indicando la pregunta \" \u00bfCua\u0301ntos aparatos activos hay en las casillas ( X, Y) donde L \u2264 X \u2264 R y B \u2264 Y \u2264 T? \" U\u0301ltima Li\u0301nea: Contendra\u0301 solamente el caracte\u0301r 3* * Ejemplo: * * 41 1 2 32 0 0 2 21 1 1 21 1 2 - 12 1 1 2 33",
    "output": "Linea * i* : La respuesta a la * i* - e\u0301sima pregunta. * * Ejemplo: * * 34# Li\u0301mites1 \u2264 * S* \u2264 1024La entrada no contendra\u0301 mas de 65 mil li\u0301neasLos valores absolutos de los nu\u0301meros de cada casilla nunca superara\u0301n 40 mil. En la tabla completa habra\u0301 a lo mas 2^ 30 dispositivos. De las 20 entradas, en 16 de ellas * S* \u2264 512",
    "note": "",
    "topics": [
      "trees",
      "graphs"
    ],
    "id": 1695
  },
  {
    "title": "Permutaciones Generadoras",
    "url": "https://omegaup.com/arena/problem/cuentaperm",
    "history": "Seguramente ya conoces la estructura de datos llamada Arbol Binario de Bu\u0301squeda. La estructura consiste de un a\u0301rbol binario enraizado donde cada nodo tiene a lo ma\u0301s dos hijos que son etiquetados como hijo izquierdo o como hijo derecho( no puede tener 2 hijos izquierdos o dos hijos derechos) . Otra restriccio\u0301n que tiene un a\u0301rbol binario de bu\u0301squeda es que cada nodo es mayor que su hijo izquierdo( si existe) y es menor que su hijo derecho ( si existe) . Usualmente un a\u0301rbol binario de bu\u0301squeda se construye insertando elementos con el siguiente algoritmo: funcion insertar_ bajo_ nodo( padre, clave) si( clave< padre) si( padre tiene hijo izquierdo) insertar_ bajo_ nodo( hijo izquierdo de padre, clave) ; sinohijo izquierdo de padre = clavesi( clave> padre) si( padre tiene hijo derecho) insertar_ bajo_ nodo( hijo derecho de padre, clave) ; sinohijo derecho de padre = clavefuncion insertar( clave) si hay raizraiz= clavesinoinsertar_ bajo_ nodo( raiz, clave) Es un hecho muy conocido que si se insertan los nodos en diferente orden el a\u0301rbol puede ser diferente. Por ejemplo: insertar( 3) insertar( 2) insertar( 1) Produce un a\u0301rbol distinto a: insertar( 1) insertar( 2) insertar( 3) Sin embargoinsertar( 2) insertar( 3) insertar( 1) Produce el mismo a\u0301rbol queinsertar( 2) insertar( 1) insertar( 3) # ProblemaEscribe un programa que dado un a\u0301rbol binario de bu\u0301squeda cuyas claves son enteros de 1 a N ( sin repeticio\u0301n) cuente cua\u0301ntas permutaciones distintas de insercio\u0301n pueden producirlo.",
    "input": "Li\u0301nea 1: Dos enteros N y R separados por un espacio indicando el nu\u0301mero de nodos y la rai\u0301z respectivamente. Li\u0301nea k+ 1: Dos enteros a y b separados por un espacio indicando los hijos izquierdo y derecho de k respectivamente, a= - 1 indica que k no tiene hijo izquierdo y b= - 1 indica que k no tiene hijo derecho ( por ser a\u0301rbol binario de bu\u0301squeda a b) . * * Ejemplo: * * 3 2- 1 - 11 3- 1 - 1",
    "output": "Li\u0301nea 1: Un solo entero indicando el nu\u0301mero de permutaciones que pueden generar el a\u0301rbol * * mod 997* * . * * Ejemplo: * * 2# Li\u0301mites* El a\u0301rbol binario de la entrada siempre es un a\u0301rbol binario de bu\u0301squeda. * 1 \u2264 N \u2264 1000",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "dp"
    ],
    "id": 1459
  },
  {
    "title": "Recoge beepers",
    "url": "https://omegaup.com/arena/problem/recoge_beepers",
    "history": "# ProblemaHay varios beepers tirados en el cuarto de Karel, en varias posiciones del mismo. Debes hacer un programa que haga que Karel recorra todo el cuarto y recoja todos los beepers que encuentre. Una vez que tenga todos los beepers debera\u0301 depositarlos en la esquina inferior izquierda del cuarto y apagarse. # Entrada ejemplo! [ Ejemplo de entrada] ( recoge_ beepers_ entrada. jpg) # Salida ejemplo! [ Ejemplo de salida] ( recoge_ beepers_ salida. jpg) # Condiciones< ul> < li> Karel se encuentra inicialmente orientado hacia el norte< / li> < li> Karel esta\u0301 inicialmente en la esquina inferior izquierda del cuarto< / li> < li> El cuarto es totalmente rectangular rodeado por paredes< / li> < li> El cuarto rectangular puede tener cualquier medida de 1x1 hasta 20x20< / li> < li> No importa la posicio\u0301n ni la orientacio\u0301n final de Karel< / li> < / ul>",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "trees",
      "graphs",
      "implementation"
    ],
    "id": 1157
  },
  {
    "title": "Orden de las hojas",
    "url": "https://omegaup.com/arena/problem/Orden-de-las-hojas",
    "history": "Un amigo tuyo apellidado Roble es aficionado a los a\u0301rboles binarios y ha inventado un juego MUY divertido que consta de 4 sencillos pasos: 1. Inicialmente Roble dibuja un a\u0301rbol binario de bu\u0301squeda con n ve\u0301rtices numerados de 1 a n. Dado que es un a\u0301rbol binario de bu\u0301squeda, para cada ve\u0301rtice v, el hijo derecho de v ( si existe) es mayor que v, y el hijo izquierdo de v ( si existe) es menor que v. 2. Luego, Roble escribe en un papel, los nu\u0301meros de todas las hojas del a\u0301rbol en orden descendente. 3. Posteriormente Roble borra las hojas del a\u0301rbol que dibujo\u0301( quedando un nuevo a\u0301rbol dibujado) . 4. Si no ha borrado todos los ve\u0301rtices, regresa al paso 2. Por ejemplo, si Roble dibuja inicialmente el siguiente a\u0301rbol: ! [ Entrada] ( 1. jpg) E\u0301l escribira\u0301 en la hoja 8 6 4 1 7 3 2 5. Roble te reta a que le digas que\u0301 a\u0301rbol dibujo\u0301 inicialmente. # ProblemaDebes escribir un programa que dado el o\u0301rden en que Roble escribio\u0301 los nu\u0301meros que identifican a cada ve\u0301rtice, encuentre el recorrido en pre- o\u0301rden del a\u0301rbol binario de bu\u0301squeda que Roble dibujo\u0301.",
    "input": "Li\u0301nea 1: Solamente el nu\u0301mero entero nLi\u0301nea 2: n nu\u0301meros enteros separados por espacios, donde el i- e\u0301simo nu\u0301mero de esta li\u0301nea representa el i- e\u0301simo nu\u0301mero que Roble escribio\u0301.",
    "output": "Li\u0301nea 1: n nu\u0301meros representando el recorrido en preorden del a\u0301rbol binario. Donde el i- e\u0301simo nu\u0301mero debera\u0301 representar el i- e\u0301simo ve\u0301rtice que se visita durante el recorrido.",
    "note": "",
    "topics": [
      "trees",
      "data structures",
      "graphs"
    ],
    "id": 778
  },
  {
    "title": "Harlem",
    "url": "https://omegaup.com/arena/problem/harlem",
    "history": "\u00a1Con los terroristas! Gracias al furor de hacer videos de Harlem Shake' s, el buen Nieves y sus amigos de la OMI han decidido hacer un bailecito tambie\u0301n, sin embargo, organizar a todas las personas es muy complicado ya que Nieves es muy popular y tiene amigos por todo Me\u0301xico. Para realizar el Harlem Shake se cuenta con N personas ( incluyendo a Nieves) que viven en una determinada casa, todos los participantes se reunira\u0301n en alguna de estas casas para hacer el baile y, como nadie quiere viajar por mucho tiempo, Nieves quiere que el tiempo ma\u0301ximo que cualquiera de sus amigos haga hasta la casa elegida sea mi\u0301nimo. Para saber cual casa elegir, Nieves llamo\u0301 a algunos de sus amigos preguntando cuanto tiempo t haci\u0301an desde la casa a hasta la casa b, lamentablemente Nieves solo tuvo cre\u0301dito en su celular para preguntar N- 1 tiempos entre distintas casas, pero se dio\u0301 cuenta de que con la informacio\u0301n que recolecto\u0301 es posible conocer el tiempo que se hace entre cualesquiera dos casas usando una ruta que pase por otras casas intermedias. Conociendo el nu\u0301mero N de amigos y N- 1 tiempos entre diferentes casas, Nieves necesita decidir en que casa hacer el Harlem Shake de manera que el ma\u0301ximo tiempo que le tomara\u0301 a cualquier participante para llegar a esa casa sea mi\u0301nimo.",
    "input": "Una li\u0301nea con un entero: N, el nu\u0301mero de participantes. N- 1 li\u0301neas con tres enteros: a, b y t, indica que desde la casa a hasta la casa b se hace un tiempo t, este tiempo es el mismo para el caso inverso, desde la b hasta la a.",
    "output": "Una li\u0301nea con dos enteros: El indice i de la casa que Nieves debe seleccionar y el mi\u0301nimo tiempo T que cualquier participante hara\u0301 a esta casa. En caso de que ma\u0301s de una casa obtenga el tiempo mi\u0301nimo, Nieves debe elegir aquella cuyo indice i sea menor.",
    "note": "",
    "topics": [
      "graphs",
      "dp",
      "trees"
    ],
    "id": 187
  },
  {
    "title": "El Mundo de Victoria",
    "url": "https://omegaup.com/arena/problem/El-mundo-de-Victoria",
    "history": "Victoria vive en un mundo rectangular de N filas y M columnas donde cada posicio\u0301n de e\u0301l tiene una altura a_ i, j. A pesar de la gran belleza del mundo de Victoria este presenta un gran problema: es muy irregular, por lo que a Victoria le es muy difi\u0301cil caminar sobre e\u0301l. Para poder recorrer todo su mundo a voluntad y poder apreciar su enorme atractivo Victoria decidio\u0301 comprarse una troca, pero no tiene la intencio\u0301n de gastar mucho en ella, u\u0301nicamente lo necesario para que esta sea lo suficientemente potente como para poder atravesar los caminos necesarios para recorrer la totalidad de su mundo. Lo anterior pues ella considera que una troca demasiado costosa la distraeri\u0301a del encanto natural del entorno. Una troca con X unidades de potencia le permitira\u0301n a Victoria trasladarse desde una posicio\u0301n cualquiera hacia otra adyacente siempre y cuando el valor absoluto de la diferencia de alturas entre ambas posiciones no sea mayor a X. Dos posiciones se consideran adyacentes si comparten un lado. # ProblemaEscribe un programa que, dado el taman\u0303o del mundo de Victoria y las alturas de todas sus posiciones determine la potencia mi\u0301nima que debera\u0301 tener la troca de Victoria para que esta le permita recorrer todo su mundo.",
    "input": "- En la primera li\u0301nea 2 nu\u0301meros N y M. La cantidad de filas y columnas en el mundo de Victoria. - En cada una de las siguientes N li\u0301neas, M nu\u0301meros que representan las alturas de las posiciones del mundo de Victoria.",
    "output": "- En la primera li\u0301nea un nu\u0301mero X que representa la potencia mi\u0301nima que debera\u0301 tener la troca de Victoria para que esta le permita recorrer todo su mundo.",
    "note": "",
    "topics": [
      "binary search",
      "dfs and similar",
      "shortest paths",
      "dsu"
    ],
    "id": 15752
  },
  {
    "title": "El algoritmo de Kruskal",
    "url": "https://omegaup.com/arena/problem/El-algoritmo-de-Kruskal",
    "history": "El algoritmo de Kruskal construye un a\u0301rbol abarcador de costo mi\u0301nimo de la siguiente forma: primero se ordenan las aristas ascendentemente por costo y luego se agregan al a\u0301rbol abarcador una por una, exceptuando las aristas que formen un ciclo ( es decir, las que conecten dos ve\u0301rtices que ya esta\u0301n en la misma componente conexa) . Escribe un programa que determine que\u0301 aristas son las que el algoritmo de Kruskal agrega al a\u0301rbol abarcador, si las aristas con el mismo costo deben desempatarse prefiriendo la que fue listada primero en la entrada.",
    "input": "Dos enteros N y M seguidos de M tripletas de enteros A, B, C que denotan la existencia de una arista que une los ve\u0301rtices A y B con costo C. Los ve\u0301rtices se encuentran numerados impli\u0301citamente de 0 a N- 1. Puedes suponer que no existen lazos ni aristas paralelas en la gra\u0301fica, que 1 \u2264 N \u2264 10^ 4, que 0 \u2264 M \u2264N 2, que 0 \u2264 C \u2264 1000 y que siempre es posible construir el a\u0301rbol abarcador.",
    "output": "Una cadena de M di\u0301gitos ` 1` y ` 0` que describa si cada una de las aristas de la entrada debe agregarse o no al a\u0301rbol abarcador.",
    "note": "",
    "topics": [
      "dsu",
      "trees"
    ],
    "id": 15646
  },
  {
    "title": "Bloques de construcci\u00f3n",
    "url": "https://omegaup.com/arena/problem/Bloques-de-construccion",
    "history": "Juan cuenta con N bloques numerados de 0 a N- 1 e inicialmente hay N pilas de un bloque cada una. Juan realizara\u0301n M operaciones sobre ellas y hay dos tipos de operaciones: - ` M` X Y: Colocar la pila que contiene al bloque X arriba de la pila que contiene al bloque Y. Si los bloques X, Y ya esta\u0301n en la misma pila, se debe ignorar la operacio\u0301n. - ` C` X: Contar cua\u0301ntos bloques hay debajo del bloque X. Escribe un programa que procese secuencialmente las operaciones que Juan realizo\u0301 y calcule la respuesta correcta para cada operacio\u0301n de tipo ` C` .",
    "input": "Una li\u0301nea con los enteros N y M seguidos de M operaciones, una por li\u0301nea. Puedes suponer que 0 \u2264 N \u2264 30000, 0 \u2264 M \u2264 10^ 6 y que 0 \u2264 X, Y < N.",
    "output": "Para cada operacio\u0301n de tipo ` C` , un entero con la respuesta respectiva.",
    "note": "",
    "topics": [
      "dsu"
    ],
    "id": 14813
  },
  {
    "title": "ANIEI 2021 - F",
    "url": "https://omegaup.com/arena/problem/ANIEI-2021---F",
    "history": "En las universidades estadounidenses, es comu\u0301n que existan fraternidades. Parte de pertenecer a una fraternidad consiste en considerar hermano a alguien que este\u0301 en la misma fraternidad que la tuya. Curiosamente, hay gente que no desea unirse a ninguna fraternidad porque tienen la rara costumbre de ir a la escuela a estudiar ( aunque, como todo mundo sabe, el objetivo de la escuela es socializar) . En la FEA ( Facultad de Ensen\u0303anza y Aprendizaje) hubo un problema con los registros de las fraternidades, pero todos los hermanos recuerdan al menos a otro hermano de su misma fraternidad. Suponiendo que todos los alumnos de la FEA esta\u0301n numerados de 1 a N y que cuentas con la informacio\u0301n de todas las parejas de hermanos que se recuerdan entre si\u0301, \u00bfpuedes indicar cua\u0301ntas fraternidades hay y cua\u0301ntas personas no pertenecen a ninguna fraternidad?",
    "input": "La primera li\u0301nea contiene dos enteros N y H separados por un espacio, los cuales denotan la cantidad de estudiantes de la FEA y la cantidad de parejas que recuerden su hermandad, respectivamente. Las siguientes H li\u0301neas contienen dos enteros i y j separados por un espacio, indicando que el estudiante i recuerda su hermandad con el estudiante j.",
    "output": "Una li\u0301nea con dos enteros separados por un espacio, el primero siendo la cantidad de fraternidades y el segundo siendo el nu\u0301mero de personas que no pertenecen a fraternidad alguna.",
    "note": "",
    "topics": [
      "dsu"
    ],
    "id": 14238
  },
  {
    "title": "Uni\u00f3n-pertenencia",
    "url": "https://omegaup.com/arena/problem/Union-pertenencia",
    "history": "Cuentas con N conjuntos donde inicialmente el I- e\u0301simo conjunto guarda el entero I y se realizara\u0301n M operaciones en sucesio\u0301n que pueden ser de dos tipos: - * U* X Y: unir el conjunto donde se encuentra el entero X con el conjunto donde se encuentra el entero Y. - * P* X Y: determinar si los enteros X, Y esta\u0301n en el mismo conjunto. Escribe un programa que responda correctamente para cada operacio\u0301n de tipo * P* .",
    "input": "Dos enteros N, M seguido de las M operaciones a realizar. Puedes suponer que 0 \u2264 N, M \u2264 100, 000 y que 0 \u2264 X, Y < N.",
    "output": "Para cada operacio\u0301n de tipo * P* , un 1 si los enteros dados esta\u0301n en el mismo conjunto y un 0 en otro caso.",
    "note": "",
    "topics": [
      "dsu"
    ],
    "id": 7745
  },
  {
    "title": "Union de Pa\u00edses",
    "url": "https://omegaup.com/arena/problem/Union-de-Paises",
    "history": "# Union de Pai\u0301ses! [ ] ( union. jpg) Lufidonia es un planeta donde inicialmente hay n ciuaddes, cada una en un pai\u0301s diferente, pero por cada camino que se construye que une a dos ciudades distintas, esas dos ciudades pasan a formar parte de un mismo pai\u0301s, esto con la intencio\u0301n de que al final so\u0301lo quede un pai\u0301s donde todos vivan en armoni\u0301a. Dados la cantidad inicial de ciudades n, y los caminos que se construyen, escribe un programa que determine la cantidad de pai\u0301ses que existen despue\u0301s de construir un camino. Las ciuades estan numeradas del 1 al n.",
    "input": "La primera li\u0301nea contiene 2 nu\u0301meros n ( 1 \u2264 n \u2264 10^ 6) , m ( 1 \u2264 m \u2264 10^ 6) . Indicando la cantidad ciudades, y la cantidad de caminos a construir. Siguen m li\u0301neas, cada una con dos nu\u0301meros x y y, indicando que se construye un camino que une a la ciudad x con la ciudad y.",
    "output": "La salida consiste de m li\u0301neas. Por cada camino que se construye imprime la cantidad de pai\u0301ses que existen. # # Ejemplos| | input5 31 34 55 3| | output432| | descriptionInicialmente hay 5 pai\u0301ses, despue\u0301s de unir la ciudad 1 y 3, existen 4 pai\u0301ses. Al unir la ciudad 4 y 5 existen 3 pai\u0301ses, y por u\u0301ltimo al unir la ciudad 5 y 3, exiten un total de 2 pai\u0301ses, el formado por las ciuades 1, 3, 4, 5 y el formado por la ciudad 2. | | end",
    "note": "",
    "topics": [
      "dsu"
    ],
    "id": 7649
  },
  {
    "title": "Intersecci\u00f3n",
    "url": "https://omegaup.com/arena/problem/Interseccion",
    "history": "Dadas 3 listas de N nu\u0301meros enteros cada una. Calcular el conjunto interseccio\u0301n ( un nu\u0301mero x estari\u0301a en el conjunto interseccio\u0301n si pertenece a las 3 listas) .",
    "input": "Un nu\u0301mero N, seguido de un renglo\u0301n con los N nu\u0301meros de la primera lista, seguido de un renglo\u0301n con los N nu\u0301meros de la segunda lista, seguido de un renglo\u0301n con los N nu\u0301meros de la u\u0301ltima lista. Puede suponer que 5 \u2264 N \u2264 100 y que cada nu\u0301mero x de una lista cumple 0 \u2264 x \u2264 90. ( Las listas pueden tener nu\u0301meros repetidos. )",
    "output": "Todos los nu\u0301meros del conjunto interseccio\u0301n escritos de menor a mayor, separados por espacios.",
    "note": "",
    "topics": [
      "implementation",
      "dsu"
    ],
    "id": 5005
  },
  {
    "title": "Terremoto",
    "url": "https://omegaup.com/arena/problem/terremoto",
    "history": "La Ciudad QuienSabeDo\u0301nde ha sufrido de un terrible terremoto. Afortunadamente no hubo bajas, sin embargo, todas las calles quedaron bloqueadas por escombro y hay que atender a las vi\u0301ctimas ( darle atencio\u0301n medica a algunos enfermos, llevar provisiones, etc) . Por ello, es necesario abrirse camino a trave\u0301s del escombro. En QuienSabeDo\u0301nde, las esquinas se identifican con enteros de 1 a n. Ninguna calle conecta a ma\u0301s de dos esquinas; dicho de otra manera, los extremos de cada calle son esquinas y a lo largo de cada calle no hay otras esquinas. Los rescatistas han hecho un minucioso plan del orden en que ira\u0301n removiendo el escombro de las calles. El encargado de llevar provisiones se encuentra inicialmente en la esquina 1 y no puede ir a ninguna otra esquina, ya que todas las calles esta\u0301n bloqueadas por escombro. Conforme los rescatistas vayan removiendo escombro de las calles, al encargado le interesa saber si puede o no llegar a alguna esquina especi\u0301fica. # ProblemaEscribe un programa que dados, los desbloqueos de las calles y las preguntas del encargado en orden cronolo\u0301gico, para cada pregunta del encargado responda si se puede o no ir desde la esquina 1 hasta la esquina correspondiente, tomando en cuenta so\u0301lo las calles que ya se despejaron anteriormente.",
    "input": "La primera contiene el nu\u0301mero n de esquinas en la ciudad. Las siguientes n li\u0301neas contienen, cada una, la descripcio\u0301n ya sea de un desbloqueo de calle o de una pregunta del encargado de llevar provisiones. La u\u0301ltima li\u0301nea contiene una ` F` indicando el final de los datos de entrada. Un * * * desbloqueo* * * se describe mediante la letra ` D` seguida de un espacio y luego los enteros a y b separados por un espacio, que representan las esquinas de la calle en la cual acaban de quitar escombro ( no\u0301tese que cada calle se puede recorrer en ambas direcciones) . Una* * * pregunta* * * se describe mediante la letra ` P` seguida por un espacio y luego el entero c que representa la esquina a la cual el encargado quiere saber si puede ir.",
    "output": "Para cada pregunta, una li\u0301nea con un entero que valga 1 si la respuesta de la pregunta respectiva es afirmacio\u0301n o que valga 0 si la respuesta es una negacio\u0301n.",
    "note": "",
    "topics": [
      "dsu"
    ],
    "id": 1619
  },
  {
    "title": "Abba",
    "url": "https://omegaup.com/arena/problem/abba",
    "history": "Dada una cadena de caracteres * S* , la operacio\u0301n * * reemplaza( * a, b* ) * * cambia cada una de las ocurrencias del caracter * a* por el caracter * b* . Por ejemplo, si * S* = \" abracadabra\" entonces * * * reemplaza( b, c) * * * produce la cadena \" acracadacra\" . Un pali\u0301ndrome es una cadena de caracteres que se lee de la misma forma de izquierda a derecha que de derecha a izquierda. Por ejemplo, \" abba\" y \" dad\" son pali\u0301ndromes. Un pali\u0301ndrome es una cadena de caracteres que se lee de la misma forma de izquierda a derecha que de derecha a izquierda. Por ejemplo, \" abba\" y \" dad\" son pali\u0301ndromes. # ProblemaEscribe un programa que lea una cadena de caracteres * S* y que encuentre el nu\u0301mero mi\u0301nimo * r* de aplicaciones de la operacio\u0301n * * reemplaza* * que transforman a * S* en un pali\u0301ndrome.",
    "input": "Una cadena * S* formada exclusivamente por letras minu\u0301sculas del alfabeto ingle\u0301s.",
    "output": "El valor de * r*",
    "note": "",
    "topics": [
      "dsu",
      "string suffix structures",
      "strings"
    ],
    "id": 1373
  },
  {
    "title": "Network",
    "url": "https://omegaup.com/arena/problem/Network",
    "history": "Bob, es un administrador de redes y supervisa una red de computadoras manteniendo un registro de las conexiones entre las computadoras de la red. Cada conexion es bidireccional, dos computadoras se consideran interconectadas si existe una conexion directa entre ellas o si ambas estan conectadas indirectamente a traves de otra computadora. Ocasionalmente, Bob requiere verificar rapidamente si un par de computadoras estan interconectadas, directa o indirectamente de acuerdo a la informacio\u0301n del registro. # Problema# Escribe un programa que basado en la informacio\u0301n de entrada, cuente el numero de respuestas afirmativas y negativas a cada interrogante.",
    "input": "10 7c 1 5c 2 7q 7 1c 3 9q 9 6c 2 5q 7 5| | output",
    "output": "1 2| | end# Li\u0301mites# 1< = N< = 100001< = M< = 1000000",
    "note": "",
    "topics": [
      "trees",
      "graphs",
      "dsu"
    ],
    "id": 1020
  },
  {
    "title": "El buho",
    "url": "https://omegaup.com/arena/problem/Albert",
    "history": "Despu\u0301es de la u\u0301ltima prueba, sigues caminando por horas en la oscuridad hasta que ves la siguiente inscripcion, parecida a un mapa, entonces lo comprendes todo! [ Imagen] ( imagen. png) Estas en la posicio\u0301n x_ 1, y_ 1 dentro de una cuadricula de n x m, es decir de n filas y m columnas. Puedes moverte entre las casillas de esta cuadricula de forma horizontal y vertical mientras que no haya alguna pared entre estas casillas. Cada pared tiene tambie\u0301n una puerta cerrada que puede abrirse con exactamente una llave, y notaste que llevas contigo K llaves, sin embargo, solo puedes usar cada llave una sola vez. Al usar una llave en una puerta, te permite pasar a la casilla que estaba separada por la pared. Te preguntas si puedes llegar a la salida, la posicio\u0301n marcada por las posiciones x_ 2, y_ 2, usando a lo mucho K llaves. La imagen solo es un ejemplo de como se veria la cuadricula en los casos de ejemplo.",
    "input": "La entrada empieza con una li\u0301nea con 3 enteros n, m y K. despue\u0301s siguen n li\u0301neas con m enteros representando las casillas de la cuadricula, cada entero tendra\u0301 un valor entre 0 y 15. Cada pared presente suma un valor a cada casilla: la pared de la izquierda suma 1, la pared de arriba suma 2, la pared de la derecha suma 4 y finalmente la pared de abajo suma 8. Se asegura que si una pared esta\u0301 presente entre dos casillas, dicha pared * * se sumara a los valores de ambas casillas* * . Sigue una li\u0301nea con los valores de x_ 1, y_ 1. Finalmente una li\u0301nea con los valores de x_ 2, y_ 2.",
    "output": "En caso de ser posible llegar a la salida, imprimir \" SI\" sin las comillas. de ser imposible imprimir \" NO\" sin las comillas.",
    "note": "",
    "topics": [
      "dfs and similar"
    ],
    "id": 15735
  },
  {
    "title": "Neto el Viajero",
    "url": "https://omegaup.com/arena/problem/Neto-el-Viajero",
    "history": "Desde que mi compa el Neto perdio\u0301 su vuelo a la CDMX se ha vuelto mucho ma\u0301s precavido a la hora de planear sus viajes. A dema\u0301s de llegar con 2 horas de antelacio\u0301n al aeropuerto para vuelos nacionales y con 3 horas para vuelos internacionales, ahora, antes de pagar su hospedaje en li\u0301nea verifica primero que sea posible llegar de GDL a su destino y de su destino a GDL por vi\u0301a ae\u0301rea. Sin embargo, el hacer esta verificacio\u0301n adicional cada vez que quiere irse de vacaciones ya lo esta\u0301 cansando, por lo que te pide a ti que le ayudes a crear una lista de todos los destinos a los que puede viajar cumpliendo con la restriccio\u0301n mencionada, para simplificar sus pro\u0301ximas planeaciones de viaje. # ProblemaEscribe un programa que, dada la cantidad de aeropuertos que existen y la lista de todos los vuelos sencillos ( de ida) que hay entre ellos determine a cua\u0301les puede llegar desde el aeropuerto de GDL tal que tambie\u0301n pueda volver al aeropuerto de GDL desde ellos e imprima una lista ordenada enumera\u0301ndolos.",
    "input": "- En la primera li\u0301nea 2 nu\u0301meros N y M. La cantidad de aeropuertos que existen y la cantidad de vuelos sencillos que hay entre ellos. - En cada una de las siguientes M li\u0301neas, 2 nu\u0301meros a_ i y b_ i indicando que existe un vuelo sencillo desde el aeropuerto a_ i hacia el b_ i.",
    "output": "- En la primera li\u0301nea una lista en orden ascendente, separada por espacios, de los aeropuertos a los que puede llegar Neto desde el aeropuerto de GDL tal que tambie\u0301n pueda volver al aeropuerto de GDL desde ellos.",
    "note": "",
    "topics": [
      "dfs and similar",
      "shortest paths"
    ],
    "id": 15642
  },
  {
    "title": "El Vendedor de NFTs",
    "url": "https://omegaup.com/arena/problem/El-Vendedor-de-NFTs",
    "history": "Tras su reciente viaje a Colombia tu compa el Germa\u0301n anda corto de efectivo, tu\u0301 como su amigo decides ayudarle a conseguir dinero y para ello se te ocurre que puedes emprender un negocio. Recordando el reciente auge de los tokens no fungibles ( NFTs, por sus siglas en ingle\u0301s) piensas que puedes convertirte en un vendedor de NFTs para conseguir el dinero, pero para ello primero necesitas crearlos y dado que no eres tan buen pintor, pero si\u0301 un gran programador, decides que lo mejor sera\u0301 automatizar el proceso de creacio\u0301n construyendo un robot pintor. Te gustari\u0301a que tu robot funcionara de la siguiente manera: - Dado un lienzo con una red cuadrada de puntos de F filas y C columnas, el robot comenzara\u0301 a trazar sobre un punto y sin dejar de pintar continuara\u0301 su recorrido hasta conectar todos los puntos, esto haciendo movimientos estrictamente verticales y horizontales que vayan de un punto a otro y sin pasar dos veces por un mismo punto. ! [ Figura1] ( figura1. png) * Posibles NFT creado sobre un lienzo con una red de 6 filas y 6 columnas. * Como eres un joven muy precavido, antes de comenzar a desarrollar el robot quieres saber si los ingresos que obtendra\u0301s sera\u0301n mayores que tu inversio\u0301n, por lo que te preguntas si tu robot podra\u0301 crear suficientes NFTs distintos, dadas las dimensiones de la red de puntos, como para que el negocio se vuelva rentable. # ProblemaEscribe un programa que dadas las dimensiones de la red cuadrada de puntos plasmada sobre tus lienzos determine cua\u0301ntos NFTs distintos seri\u0301a capaz de crear tu robot si lo construyeras.",
    "input": "- En la primera li\u0301nea los nu\u0301meros F y C. La cantidad de filas y columnas de la red.",
    "output": "- Una li\u0301nea con un nu\u0301mero que represente la cantidad de NFTs distintos que podri\u0301a crear tu robot.",
    "note": "",
    "topics": [
      "dp",
      "math",
      "brute force",
      "dfs and similar"
    ],
    "id": 15629
  },
  {
    "title": "Agrupaci\u00f3n de primates",
    "url": "https://omegaup.com/arena/problem/Agrupacion-de-primates",
    "history": "La famosa primato\u0301loga y antropo\u0301loga Jane Goodall se dirige a Tanzania para observar el comportamiento de chimpance\u0301s salvajes. En preparacio\u0301n para su llegada, sus colaboradores elaboraron un mapa que indica los lugares donde habitan los chimpance\u0301s que la Dra. Goodall puede observar durante su expedicio\u0301n. El mapa consiste en una reti\u0301cula rectangular de N filas por M columnas donde cada celda esta\u0301 marcada con una letra \u2018C\u2019 si en ese lugar habita un chimpance\u0301 y con un punto ( \u2018. \u2019) si en ese lugar no habita ningu\u0301n chimpance\u0301. Al analizar el mapa, la Dra. Goodall noto\u0301 que algunos chimpance\u0301s parecen formar grupos a los que llamo\u0301 \" familias de chimpance\u0301s\" . Dos chimpance\u0301s pertenecen a la misma familia si su ubicacio\u0301n aparece en celdas adyacentes en el mapa ( es decir, una de ellas esta\u0301 inmediatamente a la izquierda, derecha, arriba o abajo de la otra) . Por ejemplo, el siguiente mapa de 8 filas por 10 columnas indica la ubicacio\u0301n de 21 chimpance\u0301s formando 6 grupos de taman\u0303o 1, 1, 1, 1, 5 y 12, respectivamente: < pre> . . . . . C. . . . . . . . CCC. . . . . . . . C. . . . . . C. . . . C. . . . . CCCC. . . . . . CCCC. . . . . . CCCC. . . . . C. . . . C. . < / pre> Ayuda a la Dra. Goodall a encontrar el taman\u0303o de la familia ma\u0301s numerosa de chimpance\u0301s.",
    "input": "En la primera li\u0301nea el nu\u0301mero N de filas y M de columnas del mapa. En cada una de las siguientes li\u0301neas, M caracteres indicando si en esa posicio\u0301n habita un chimpance\u0301 o no.",
    "output": "El taman\u0303o de la familia ma\u0301s numerosa de chimpance\u0301s.",
    "note": "",
    "topics": [
      "implementation",
      "dfs and similar",
      "shortest paths"
    ],
    "id": 14900
  },
  {
    "title": "Animal Farm",
    "url": "https://omegaup.com/arena/problem/Animal-Farm",
    "history": "# DescriptionOne or more office buildings will be converted to be used as breeding areas forvarious species of small farm animals, such as chickens, pigs, goats, etc. Theproblem is to find out how many species can be raised in each building, consideringeach kind of animal must inhabit an isolated space. All buildings have only one rectangular floor. For each building we are given a plan composed of X by Y square units. Each square unitcan have any combination of walls on its four sides, or no walls at all. If a unit is locatedon the periphery of a building and is open to the outside it should be considered as a part ofthe outside area, so that if several areas are open to the outside they should be considered asbelonging to the same area.",
    "input": "The first line of input contains a single integer T, representing the number of buildings inthe test. The description of T buildings follow. The first line of a building description containstwo integer numbers separated by a space X, and Y, representing the dimensions of the rectangularbuilding. Each of the following Y lines contains X integer numbers separated by a space, each of thesenumbers represent the walls of the square unit located at coordinate y, x, this value is a number between0 and 15, the following image shows the walls in a square unit for each possible value: ! [ Possible walls] ( imagen. jpg)",
    "output": "For each building in the input print a line with a single integer number, the number of areasin the building. # Example| | input34 413 5 5 159 8 3 84 3 15 29 6 6 42 313 62 213 125 50 1 5 5 513 1 8 0 124 5 13 0 810 3 3 6 313 8 8 0 0| | output635| | end# NoteThe example has three buildings, shown below. ! [ Buildings example] ( buildings. jpg)",
    "note": "",
    "topics": [
      "dfs and similar"
    ],
    "id": 14796
  },
  {
    "title": "Flores crecientes",
    "url": "https://omegaup.com/arena/problem/ofmi-2022-flores",
    "history": "En tu camino hacia la EGOI 2022, descubres que el puente que lleva al edificio de la competencia quedo\u0301 totalmente destruido. Lastimosamente, ese puente era la u\u0301nica manera de llegar ahi\u0301 y tienes que encontrar otra manera de llegar ra\u0301pido, ya que la competencia esta\u0301 por iniciar. Observando a tu alrededor, descubres que existe otro camino para llegar hacia el edificio, y esta\u0301 compuesto por mu\u0301ltiples flores gigantes cuadradas las cuales puedes saltar con facilidad. Las flores todavi\u0301a no han crecido totalmente, y si fuera au\u0301n peor, estas lo hacen extremadamente lento. Algunas de ellas, incluso tienen un li\u0301mite de crecimiento y no pueden exceder de cierta longitud. Existe la posibilidad donde nunca puedas cruzar hacia el otro lado. En tu camino hacia las flores, te encuentras un mapa cartesiano con las coordenadas del tallo de cada flor. Te puedes mover en las ocho direcciones. Tambie\u0301n, con tus altas capacidades de observacio\u0301n, notas que todas flores crecen a un ritmo constante y todas se expanden desde el centro del tallo. En un principio, ninguna flor ha crecido. # ProblemaDadas las coordenadas en metros de cada uno de los tallos de las flores, y la coordenada de entrada y salida, debes determinar cua\u0301l es la minima cantidad de minutos para llegar de la entrada a la salida pisando en todo momento alguna flor ( incluyendo en la entrada y en la salida) . Considera que en cada minuto todas las flores crecen M metros hacia las cuatro direcciones salvo aquellas que hayan alcanzado su li\u0301mite de crecimiento. El crecimiento de las flores es instanta\u0301neo al cambiar de minuto; es decir, no hay nu\u0301meros decimales. Para poder cruzar de una flor a otra, estas tienen que estar * * totalmente* * conectadas. Dos flores esta\u0301n totalmente conectadas si comparten al menos una esquina o un lado. Desde el minuto cero se puede pisar el tallo de la flor.",
    "input": "- En la primera li\u0301nea, dos nu\u0301meros enteros N, M, que simbolizan el nu\u0301mero de flores a cruzar, y el crecimiento en metros por minuto de cada flor, respectivamente. - En la segunda li\u0301nea, dos nu\u0301meros que simbolizan las coordenadas de la entrada del puente. - En la tercera li\u0301nea, dos nu\u0301meros que representan las coordenadas de la salida del puente. - En las siguientes N li\u0301neas vendra\u0301n dos nu\u0301meros por li\u0301nea que simbolizan las coordenadas ( x_ i, y_ i) de cada tallo. - Por u\u0301ltimo, seguira\u0301n N li\u0301neas con la longitud ma\u0301xima de la planta L_ i. Si L_ i = - 1 significa que esta flor no tiene li\u0301mite de crecimiento.",
    "output": "Un entero con la mi\u0301nima cantidad de minutos que se necesita para poder cruzar hacia el edificio de la competencia. Si es imposible llegar al otro lado, imprime - 1.",
    "note": "",
    "topics": [
      "dfs and similar",
      "shortest paths",
      "binary search"
    ],
    "id": 14511
  },
  {
    "title": "Puente de Metr\u00f3polis",
    "url": "https://omegaup.com/arena/problem/Puente-de-Metropolis",
    "history": "# HistoriaJorge estaba jugando la campan\u0303a de * Halo 2* , pero se encontro\u0301 un problema al llegar a la misio\u0301n * Metro\u0301polis* . Al principio de la misio\u0301n tiene que cruzar un puente construido por N bloques etiquetados con un caracter que puede ser una letra mayu\u0301scula de la ' A' a la ' Z' , minu\u0301scula de la ' a' a la ' z' o nu\u0301meros del ' 0' al ' 9' . A Jorge no le gusta cruzar cualquier puente, sino que e\u0301l solo cruza * * puentes bonitos* * . Los * * puentes bonitos* * tienen la caracteri\u0301stica que * sin importar el extremo en el que incies el orden en el que aparecen las etiquetas es el mismo* . Por ejemplo, si el puente tiene las etiquetas \" * * 1bZ3Zb1* * \" a Jorge le gustari\u0301a cruzarlo; porque no importa si lo cruza desde el inicio al final o desde el final al inicio, siempre vera\u0301 el orden de etiquetas \" * * 1bZ3Zb1* * \" . Para solucionar el problema, Jorge quiere convertir el puente en un * * puente bonito* * . Puedes lograr esto insertando bloques en el puente existente. Sin embargo, Jorge lo quiere hacer usando la menor cantidad de bloques posibles. # ProblemaDada una cadena de caracteres que representa el puente existente, determinar el mi\u0301nimo nu\u0301mero de bloques que se tienen que insertar para convertirlo en un * * puente bonito* * .",
    "input": "En la primera li\u0301nea un entero N, el taman\u0303o del puente. En la segunda li\u0301nea, una cadena de caracteres que representa el puente.",
    "output": "Imprimir la mi\u0301nima cantidad de bloques que tienen que ser insertados en el puente original para convertirlo en un * * puente bonito* * .",
    "note": "",
    "topics": [
      "dfs and similar",
      "strings",
      "dp"
    ],
    "id": 13633
  },
  {
    "title": "Capturando tripulantes",
    "url": "https://omegaup.com/arena/problem/Capturando-tripulantes",
    "history": "La gran misio\u0301n espacial OMI ( Orbitando Mundos Interestelares) ha iniciado y todo el mundo esta\u0301 emocionado, ya que la gran nave viajara\u0301 a un misterioso planeta para extraer un mineral muy precioso. Sin embargo, el malvado Doctor Bueno planea detener la misio\u0301n para poder quedarse con todo el mineral. Para sabotear la misio\u0301n, te ha enviado para infiltrarte a la nave, tu objetivo es capturar tantos tripulantes como sea posible para que el Doctor pueda tomar control de la nave. # ProblemaTu misio\u0301n no sera\u0301 tan fa\u0301cil, puesto que los tripulantes esta\u0301n al tanto de que hay un impostor y esta\u0301n muy atentos. Cada tripulante esta\u0301 volteando en una direccio\u0301n y puede ver la casilla que tiene delante. Si un tripulante esta\u0301 siendo observado por otro, no podra\u0301s capturarlo a no ser que puedas primero capturar a su compan\u0303ero que lo esta\u0301 observandoLa nave consiste de un recta\u0301ngulo de N filas y M columnas con paredes, espacio vaci\u0301o y tripulantes.",
    "input": "N y M, la altura y el largo de la nave. N filas de M caracteres: * # Representa una pared* . Representa un espacio vaci\u0301o* U Representa un tripulante viendo hacia arriba* R Representa un tripulante viendo hacia la derecha* D Representa un tripulante viendo hacia abajo* L Representa un tripulante viendo hacia la izquierda* Representa la posicio\u0301n inicial del impostor",
    "output": "Un solo entero, la ma\u0301xima cantidad de tripulantes que se pueden capturar.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "shortest paths"
    ],
    "id": 13091
  },
  {
    "title": "Defese",
    "url": "https://omegaup.com/arena/problem/Defese",
    "history": "Pepito de Calabaza esta\u0301 en tercero de primaria aprendiendo sobre teori\u0301a de grafos. El di\u0301a de hoy le ensen\u0303ara\u0301n la bu\u0301squeda en profundidad. Su maestro le explica el procedimiento: 1. Visita un ve\u0301rtice u2. Ma\u0301rcalo como visitado3. Elije una de las aristas conectadas a e\u0301ste, y si el otro ve\u0301rtice v que conecta no esta\u0301 visitado, llamar recursivamente a la DFS con el nodo v. El maestro les da ejemplos sobre co\u0301mo podri\u0301a este algoritmo visitar los ve\u0301rtices, anotando una secuencia de nu\u0301meros ( los i\u0301ndices de los ve\u0301rtices) para representar el camino. Pero Pepito es muy inteligente y se da cuenta que algunos ejemplos esta\u0301n equivocados. Ayuda a Pepito a comprobar que sea posible visitar los ve\u0301rtices en el orden de la secuencia dada a partir de una DFS recursiva.",
    "input": "En la primer li\u0301nea dos enteros 2\u2264 n \u2264 1000, 1\u2264 m \u2264 5e5. Luego siguen m li\u0301neas cada una con un par de enteros 1\u2264 u_ i, v_ i \u2264 n, u_ i v_ i, indicando que existe una arista entre estos dos ve\u0301rtices. Sigue un entero 1\u2264 q \u2264 n el taman\u0303o de la secuencia. Por u\u0301ltimo una li\u0301nea con q enteros, donde 1\u2264 a_ i \u2264 n, la secuencia a comprobar.",
    "output": "Imrpime \" Si\" sin comillas, si es posible visitar los ve\u0301rtices en el orden de la secuencia dada a partir de una DFS.",
    "note": "",
    "topics": [
      "dfs and similar"
    ],
    "id": 11925
  },
  {
    "title": "Pies de hobbits",
    "url": "https://omegaup.com/arena/problem/Pies-de-hobbits",
    "history": "< br/ > Un di\u0301a la sagaz aventurera Vero\u0301nica esta en una travesi\u0301a por la Comarca, en la cual vivi\u0301a varios tipos de hobbits. < br/ > Como todos saben los hobbits tienen muchos tipos de pies, pero en este solo hay 3 tipos de pies diferentes que tienen los hobbits. < br/ > Unos eran pequen\u0303os, perteneci\u0301an a hobbits pequen\u0303os, a diferencia de los otros el pelo que teni\u0301an en sus pies era un poco ondulado, algo delgado y de colores claros. Esto servia porque caminaban en lugares tranquilos. < br/ > Otros eran pies medianos, estos teni\u0301an pelo muy rizado y acolchonado, era de colores cafe\u0301s y servi\u0301an para tener mucho volumen. Los resguardaba del frio\u0301 de esas zonas y se enorgulleci\u0301an de cuidarlo. Casi nunca se lo cortaban. < br/ > Otros eran pies grandes, de los cuales el vello en sus pies era muy fuerte, muy duro. Pareciera que trai\u0301an botas al estar descalzos, de color negro y muy poco cuidado. Estos servia para los peligros en el suelo, como serpientes, espinas, rocas. Nunca eran cuidados porque no habi\u0301a tal cepillo que permitiera peinar, o tijeras que cortar. < br/ > Esta aventurara conoci\u0301a todos estos * innecesarios* detalles, y no queri\u0301a delatar su presencia dejando huella de humana. Por lo cual decidio\u0301 comprar zapatos que hiciera que dejara huellas igual a ciertos hobbits, ella sabia que si comprara 3 pares de zapatos no importa que terreno estuviera, pudiera cambia\u0301rselo y dejar huellas correspondiente al terreno. Sin embargo comprar 3 pares de zapatos es caro y quiere comprar la menor cantidad de pares de zapatos. < br/ > Vero\u0301nica siempre inicia en la casilla hasta arriba y hasta la izquierda de la comarca, y quiere llegar a la casilla que esta hasta la derecha y hasta abajo, sin embargo ella solo puede hacer movimientos en horizontal y vertical. No se puede mover en diagonal o a una posicio\u0301n fuera de la Comarca. < br/ > Ayuda a Vero\u0301nica a saber cual es la menor cantidad de zapatos que tiene que comprar para hacer el recorrido. # Ejempo< br/ > ! [ Ejemplo de caminos] ( Ejemplo. jpg) < br/ > En el siguiente ejemplo se ven los casos de 1 zapato, dos zapatos, y tres zapatos. Como se puede apreciar los caminos no son necesariamente u\u0301nicos.",
    "input": "Dos enteros, n y m que representan el nu\u0301mero de filas y de columnas respectivamente de la Comarca. Seguido vendra\u0301 un tablero de n x m. Donde la posicio\u0301n a_ nm representa que tipo de hobbit habita esa celda.",
    "output": "< br/ > La cantidad mi\u0301nima de zapatos y cuales tipos son.",
    "note": "",
    "topics": [
      "dfs and similar",
      "math",
      "matrices",
      "implementation"
    ],
    "id": 10855
  },
  {
    "title": "cignuz(); y las palabras chidas",
    "url": "https://omegaup.com/arena/problem/cignuz-y-las-palabras-chidas",
    "history": "cignuz( ) ; es una empresa de software, tu\u0301 como buen estudiante a punto de graduarte quieres impresionarlos para que te contraten, ellos consideran a ciertas palabras muy chidas, y a las personas que las utilizan al hablar como muy chidos, por lo que si las usas en presencia de ellos los convencera\u0301s ma\u0301s de que te contraten. Sin embargo, como en todo, hay un problema, tu no sueles usar esas palabras al hablar ( No eres chido) . El dinero mueve al mundo y contigo no es la excepcio\u0301n por lo que has decidido hacer que tu vocabulario sea como el de ellos ( usar las palabras chidas) , asi\u0301 que quieres aprender lo ma\u0301s ra\u0301pido posible, es decir, no quieres aprender desde 0 las palabras. Mientras te preparas para graduarte de la universidad has investigado cuales son las palabras ma\u0301s chidas que ellos dicen, y ya hiciste una lista con la misma cantidad de palabras de tu vocabulario cotidiano, cada una de estas quieres convertirla en una palabra chida y asi\u0301 ser lo suficientemente chido para trabajar en cignuz( ) ; Ejemplo: \" chilaquiles\" es una palabra chida, mientras que \" chicharo\" es una palabra de cotidiana; para aprender desde \" chicharo\" la palabra \" chilaquiles\" solo debes de cambiar \" charo\" por \" laquiles\" de tu vocabulario, esto ya que conoces \" chi\" y ambas palabras la contienen. Para cada palabra de tu lista debes de decir que\u0301 palabra chida es la que vas a aprender, en caso de que puedas aprender varias debes escoger la que haya aparecido antes en la entrada en la lista de las palabras chidas. ! [ enter image description here] [ 1] Como Marin siempre dice: \" Creo que eso te da la idea para poderlo sacarlo\" .",
    "input": "La primera linea contendra\u0301 una cantidad ` N` de palabras chidas. Las siguientes ` N` palabras pertenecen a las palabras chidas que dicen en cignuz( ) ; Las siguientes ` N` palabras pertenecen a la lista que tu\u0301 has hecho.",
    "output": "` N` lineas, cada una indicando una palabra de tu lista en el orden que fueron dadas y la palabra chida que aprendiste. | | input1chilaquileschicharo| | output1 1| | end| | input2juanjosemaringraciasportodo| | output1 12 2| | end| | input6clubalgoritmiaalgocuceicualescualesalgodoncucocuandocuatrocuidadosoalga| | output1 22 43 54 65 16 3| | end# Li\u0301mites- 1 < = N < = 100, 000- 1 < = | chida[ i] | < = 600- 1 < = | lista[ i] | < = 600- 1 < = \u2211_ i = 1 ^ N | chida[ i] | + \u2211_ i = 1 ^ N | lista[ i] | < = 1, 000, 000",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "strings",
      "dp",
      "string suffix structures"
    ],
    "id": 9122
  },
  {
    "title": "Display Led",
    "url": "https://omegaup.com/arena/problem/Display-Led",
    "history": "! [ enter image description here] [ 1] Las pantallas de led se conforman de una gran cantidad de puntos individuales que al encenderse y apagarse pueden mostrar ima\u0301genes de alta calidad. Los leds tienden a fallar, por lo que existe un dispositivo capaz de tomar una lectura de datos que indica los leds que ya no funcionan. Realizar un programa que lea la informacio\u0301n del estatus de la pantalla led e indique cual es el taman\u0303o del a\u0301rea ma\u0301s grande de las que fallan y cua\u0301l es el taman\u0303o de a\u0301rea ma\u0301s pequen\u0303a. Es posible que todos los leds fallen pero tambie\u0301n es posible que no exista ningu\u0301n led descompuesto. Este tipo de pantallas siempre genera fallas en taman\u0303os rectangulares y adema\u0301s esas a\u0301rea de fallas son perfectamente distinguibles, nunca se tocan unas con otras de manera vertical ni horizontal ( en diagonal si podri\u0301an llegar a tocarse) . El siguiente ejemplo muestra una lectura de una pantalla led. Las \u201cX\u201d indican un led que falla, los \u201c0\u201d ( cero) indican un led que funciona correctamente. ! [ enter image description here] [ 2] Esta pantalla tiene un grupo de leds con fallas en la posicio\u0301n 2, 6 de un taman\u0303o 4 ( 2x2) . En la posicio\u0301n 4, 2 hay un led que no funciona y en la posicio\u0301n 4, 5 tambie\u0301n hay un led descompuesto. Desarrolla un programa que muestre el taman\u0303o del a\u0301rea ma\u0301s grande de leds descompuestos y el taman\u0303o del a\u0301rea ma\u0301s pequen\u0303a de leds descompuestos.",
    "input": "En la primera li\u0301nea aparecera\u0301 el nu\u0301mero de renglones * R* y el nu\u0301mero de columnas * C* de la pantalla led separados por un espacio en blanco donde * * * 1< = R< = 300* * * y * * 1< = C< = 300* * . A continuacio\u0301n, aparecera\u0301n R li\u0301neas de C caracteres cada una de ellas representando con la pantalla led. Este grupo de caracteres solo incluye la * * X* * o el * * 0* * donde la * * X* * representa un led descompuesto y el * * 0* * representa un led que funciona correctamente.",
    "output": "En la primera li\u0301nea debe aparecer un entero indicando el taman\u0303o del a\u0301rea ma\u0301s grande de leds descompuestos. La segunda li\u0301nea, un entero que representa el taman\u0303o del a\u0301rea ma\u0301s pequen\u0303a de leds descompuestos. Puede que no existan leds descompuestos, en cuyo caso, tanto el a\u0301rea ma\u0301s grande como el a\u0301rea ma\u0301s pequen\u0303a sera\u0301 0 ( cero) .",
    "note": "",
    "topics": [
      "math",
      "shortest paths",
      "dp",
      "dfs and similar",
      "matrices",
      "implementation"
    ],
    "id": 8415
  },
  {
    "title": "Derrame de Petr\u00f3leo",
    "url": "https://omegaup.com/arena/problem/COMI-Derrame-de-Petroleo",
    "history": "Ha habido un derrame de petroleo en el golfo y una organizacio\u0301n ecologista internacional te ha contratado para escribir un programa que los ayude a calcular la gravedad del impacto ambiental. Te van a dar una cuadri\u0301cula de R filas y C columnas, que representan el entorno que rodea la plataforma petrolera. El derrame se origino\u0301 en la plataforma, que se marcara\u0301 en su mapa con un ' ' . Las casillas de tierra se marcara\u0301n con un ' # ' y las casillas del mar se marcara\u0301n con un ' . ' . Cada di\u0301a que pasa despue\u0301s de la explosio\u0301n inicial, cada cuadrado de mar adyacente ( norte, este, sur u oeste) a la plataforma petrolera o a una plaza mari\u0301tima, previamente cubierta de petro\u0301leo, queda cubierto por el petro\u0301leo. Las plazas terrestres nunca son cubiertas por petro\u0301leo. # ProblemaTu programa debe simular la propagacio\u0301n del derrame de petro\u0301leo duranteKdi\u0301as, luego imprime un mapa del entorno circundante con cuadrados marinos cubiertos de petro\u0301leo representados por ' * ' .",
    "input": "Tu programa debe leer de teclado tres enteros separados por un espacio R, C y K. Las siguientes R li\u0301neas contendra\u0301n cada una C caracteres, cada uno de los cuales sera\u0301 ' # ' o ' . ' representando cuadrados terrestres y mari\u0301timos, respectivamente. Exactamente so\u0301lo habra\u0301 un so\u0301lo ' ' , que representa la plataforma petrolera en el mar.",
    "output": "Tu programa debe mostrar R li\u0301neas, cada una con C caracteres. Cada cara\u0301cter en esta cuadri\u0301cula debe ser el mismo que el cara\u0301cter correspondiente en la cuadri\u0301cula de entrada, a excepcio\u0301n de las casillas marinas que han sido cubiertas por petro\u0301leo despue\u0301s de K di\u0301as. Estos deberi\u0301an estar representados por caracteres ' * ' . | | examplefilesample| | examplefilesample2| | end# Li\u0301mites# Restricciones* 1 \u2264 R, C \u2264 2000 , donde R y C son el nu\u0301mero de filas y columnas de la cuadri\u0301cula, respectivamente. * 0 \u2264 K \u2264 10 000 000, donde K es el nu\u0301mero de di\u0301as para los cuales debe simular el derrame de petro\u0301leo. * Para el 75",
    "note": "",
    "topics": [
      "shortest paths",
      "dfs and similar"
    ],
    "id": 6131
  },
  {
    "title": "A Lot of Games",
    "url": "https://omegaup.com/arena/problem/A-Lot-of-Games",
    "history": "Andrew, Fedor and Alex are inventive guys. Now they invent the game with strings for two players. Given a group of n non- empty strings. During the game two players build the word together, initially the word is empty. The players move in turns. On his step player must add a single letter in the end of the word, the resulting word must be prefix of at least one string from the group. A player loses if he cannot move. Andrew and Alex decided to play this game k times. The player who is the loser of the i- th game makes the first move in the ( i + 1) - th game. Guys decided that the winner of all games is the player who wins the last ( k- th) game. Andrew and Alex already started the game. Fedor wants to know who wins the game if both players will play optimally. Help him.",
    "input": "The first line contains two integers, n and k ( 1 \u2264 n \u2264 10 ^ 5; 1 \u2264 k \u2264 10 ^ 9 ) Each of the next n lines contains a single non- empty string from the given group. The total length of all strings from the group doesn' t exceed 10^ 5. Each string of the group consists only of lowercase English letters.",
    "output": "If the player who moves first wins, print \" First\" , otherwise print \" Second\" ( without the quotes) .",
    "note": "",
    "topics": [
      "strings",
      "string suffix structures",
      "dfs and similar",
      "data structures",
      "dp"
    ],
    "id": 5557
  },
  {
    "title": "Dos Tres Multiplos",
    "url": "https://omegaup.com/arena/problem/Dos-Tres-Multiplos",
    "history": "Se tiene un nu\u0301mero entero compuesto x de la forma x= 2^ m* 3^ ncon m y n nu\u0301meros enteros. A este nu\u0301mero se le aplicara\u0301n y operaciones. Cada operacio\u0301n consiste en multiplicar por 2 o por 3, o dividir entre 2 o entre 3. De los resultados mostrados, decidir cua\u0301les son posibles despue\u0301s de aplicarlas y operaciones.",
    "input": "La primera fila contiene dos nu\u0301meros separados por espacio. El primero es el nu\u0301mero x querepresenta el nu\u0301mero al que se le aplicara\u0301n las operaciones. El segundo es el nu\u0301mero y que representa cua\u0301ntas operaciones se habra\u0301nde realizar. La segunda fila contiene una lista de Z nu\u0301meros, separadas por espacio, cada n[ umero z= 2^ r* 3^ s para dos potencias r y s enteraspositivas, que representan cada uno un probable resultado.",
    "output": "De los probables resultados, mostrar so\u0301lo los resultados a los que es posiblellegar despue\u0301s de aplicar y operaciones, como una lista separada porespacios, ordenada de menor a mayor. Si no hay ninguna solucio\u0301n, imprimir \" 0\" ( cero) .",
    "note": "",
    "topics": [
      "sortings",
      "dfs and similar"
    ],
    "id": 5428
  },
  {
    "title": "Agentes pat\u00f3genos",
    "url": "https://omegaup.com/arena/problem/Agentes-patogenos",
    "history": "# DescripcionEn los u\u0301ltimos di\u0301as los climas han estado cambiando mucho en el estado de Sonora, incluso se han detectado nuevos casos de brotes de influenza en diferentes a\u0301reas, preocupados por no enfermarse previo al nacional, nuestros queridos alumnos decidieron hacerse a la tarea de crear un algoritmo que les ayudase a descifrar si existi\u0301a algu\u0301n agente pato\u0301geno que les provocara enfermarse# ProblemaDado la muestra del producto decir cuantos agentes pato\u0301genos se encuentran dentro de la la muestra y al igual de decir si es seguro tomar esa bebida o no",
    "input": "En la primera linea dos nu\u0301meros N y M En las siguientes N x M lineas un porta objetos donde se encuentran las parti\u0301culas de la muestra tomada, que al ingresarla al codigo maquina los agentes estan representados con 1 mientras que la superficie del porta objetos con 0",
    "output": "Un u\u0301nico numero representando la cantidad de agentes pato\u0301genos encontrados en la muestra, en caso contrario mostrar en pantalla \" es seguro consumir este producto\" .",
    "note": "",
    "topics": [
      "shortest paths",
      "dfs and similar",
      "matrices",
      "math"
    ],
    "id": 5302
  },
  {
    "title": "Calcular Altura de un arbol",
    "url": "https://omegaup.com/arena/problem/Calcular-Altura-de-un-arbol",
    "history": "Dada la descripcio\u0301n de un a\u0301rbol con rai\u0301z. tu tarea consiste en computar e imprimir su altura. Recuerda que la altura de un a\u0301rbol ( con rai\u0301z) es la ma\u0301xima profundidad de un nodo, o la ma\u0301xima cantidad de nodos que hay que recorrer para ir de una hoja a la rai\u0301z. Te dan un a\u0301rbol arbitrario, no necesariamente un a\u0301rbol binario",
    "input": "La primera linea contiene el numero de ve\u0301rtices N. La segunda linea contiene N nu\u0301meros enteros desde - 1 hasta N - 1 que significa el padre del ve\u0301rtice i. Si el i- esimo es - 1 significa que el ve\u0301rtice i es la rai\u0301z. Se garantiza que solo hay una rai\u0301z.",
    "output": "imprima la altura del a\u0301rbol",
    "note": "",
    "topics": [
      "dfs and similar"
    ],
    "id": 4321
  },
  {
    "title": "Dora the Explorer B",
    "url": "https://omegaup.com/arena/problem/dora-la-Exploradora-B",
    "history": "# Dora la Exploradora 2Dora se encuentra en el pai\u0301s de UPlandia, un reino formado por n renglones y m columnas. Dora ha perdido a su amigo Botas en algu\u0301n lugar del reino, pero para la fortuna de Dora, ella cuenta con un GPS que le permite saber su ubicacio\u0301n y la de Botas dentro de UPlandia. Escribe un programa que dado el mapa de UPlandia, y las ubicaciones de Dora y Botas, encuentre el mi\u0301nimo nu\u0301mero de pasos que Dora tiene que dar para llegar hasta donse de encuentra Botas. Ten en cuenta que Dora da un paso para moverse de una casilla a otra, y so\u0301lo puede moverse de manera vertical y horizontal, NO en diagonal, y no puede atravesar paredes.",
    "input": "La primera li\u0301nea contiene 2 nu\u0301meros, n y m, ( 3 \u2264 n\u2264 50) , ( 3 \u2264 m \u2264 50) , indicando el nu\u0301mero renglones y columnas en UPlandia. Le siguen n li\u0301neas, cada una con m caracteres. Un casilla marcada con el si\u0301mbolo \" . \" significa que es un espacio libre, el si\u0301mbolo \" * \" indica una pared, el si\u0301mbolo \" S\" indica la posicio\u0301n de Dora, y el si\u0301mbolo \" E\" indica la posicio\u0301n de Botas.",
    "output": "El mi\u0301nimo nu\u0301mero de pasos que le toma a Dora llegar hasta donde se encuentra su amigo Botas. En caso de que no sea posible, imprime - 1. Escribe| | input5 5* * * * * * S* . * * . * * * * . . E* * * * * * | | output4| | end",
    "note": "",
    "topics": [
      "dfs and similar",
      "shortest paths"
    ],
    "id": 3998
  },
  {
    "title": "Dora the Explorer A",
    "url": "https://omegaup.com/arena/problem/Dora-la-Exploradora-A",
    "history": "# Dora la ExploradoraDora se encuentra en el pai\u0301s de UPlandia, un reino formado por n renglones y m columnas y esta fascinada con toda la naturaleza que hay a su alrededor. Ella quiere explorar lo ma\u0301s posible el reino. Escribe un programa que muestre el a\u0301rea que Dora puede explorar. Ten en cuenta que Dora so\u0301lo puede moverse de manera vertical y horizontal, NO en diagonal, y no puede atravesar paredes.",
    "input": "La primera li\u0301nea contiene 2 nu\u0301meros, n y m, ( 3 \u2264 n\u2264 51) , ( 3 \u2264 m \u2264 51) , indicando el nu\u0301mero renglones y columnas en UPlandia. Le siguen n li\u0301neas, cada una con m caracteres. Un casilla marcada con el si\u0301mbolo \" . \" significa que es un espacio libre, el si\u0301mbolo \" * \" indica una pared, y el si\u0301mbolo \" # \" indica la posicio\u0301n de Dora.",
    "output": "El mapa de UPlandia, donde cada casilla que Dora puede visita es marcada con el si\u0301mbolo \" # \" . Ver el ejemplo. | | input5 5* * * * * * # * . * * . * * * * . . . * * * * * * | | output* * * * * * # * . * * # * * * * # # # * * * * * * | | input10 7* * * * * * * * . . * . . * * . . * . . * * . . . . . * * . . * * * * * # . * . . * * * * * . . * * . . . . . * * . . . . . * * * * * * * * | | output* * * * * * * * # # * # # * * # # * # # * * # # # # # * * # # * * * * * # # * . . * * * * * . . * * . . . . . * * . . . . . * * * * * * * * | | end",
    "note": "",
    "topics": [
      "dfs and similar",
      "shortest paths"
    ],
    "id": 3997
  },
  {
    "title": "Colores",
    "url": "https://omegaup.com/arena/problem/Colores",
    "history": "# ColoresTodos conocemos esos libros de colorear en donde se marca con un mismo nu\u0301mero o una misma figura todas las regiones de un dibujo que deben ser coloreadas con un mismo colora. En estos libros es muy fa\u0301cil saber cuantos colores diferentes se necesitan para poder colorear todo el dibujo dadas las indicaciones. Sin embargo, hoy, tu feliz tarde de coloreo se ha visto amenazada por un nuevo tipo de dibujo en el libro de colorear. El dibujo es una matriz cuadrada de lado N y Las instrucciones de coloreo, si bien son similares a las descritas anteriormente tiene una restriccio\u0301n ma\u0301s a considerar: Se colorean del mismo color aquellas casillas que siendo vecinas ( comparten un lado) tienen un nu\u0301mero tal que el residuo al dividirlas por N es el mismoVeamos un ejemplo de un dibujo ya coloreado. 2( g) 5( g) 3( c) 2( g) 3( m) 2( a) 1( v) 1( v) 1( v) Como se puede observar se requirieron 5 colores para poder colorear el dibujo en base a las restricciones. Esto es por lo siguiente: * Los tres cuadros en color gris tienen el mismo residuo al dividirse por 3 ( lo que mide el lado del cuadro) y como cada uno son vecinos entonces pueden tener el mismo* Lo mismo occure con los tres cuadros en color verde. * Incluso cuando los cuadros de color gris y el color azul tienen el mismo residuo al dividirse por 3, no comparten un lado y por lo tanto no pueden tener el mismo color. * Lo mismo pasa con los cuadros de color cyan y magentaTu tarea consiste en escribir un programa que encuentre la cantidad de colores que se necesitan para colorear el dibujo con las restricciones mencionadas.",
    "input": "La primer li\u0301nea; un nu\u0301mero entero N. Seguida de N li\u0301neas cada una con N nu\u0301meros enteros con valor entre 0 y 1000 representando los nu\u0301meros que tiene el dibujo.",
    "output": "Una sola li\u0301nea con un u\u0301nico nu\u0301mero entero: La cantidad de colores necesaria para colorear el dibujo",
    "note": "",
    "topics": [
      "shortest paths",
      "dfs and similar"
    ],
    "id": 3694
  },
  {
    "title": "IOI 1994 - El Castillo",
    "url": "https://omegaup.com/arena/problem/IOI-1994---El-Castillo",
    "history": "< center> ! [ Logo IOI 1994] ( logo94. png) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# El CastilloDada la descripcio\u0301n del mapa de un castillo ( como el mostrado abajo) se te pedira\u0301 que encuentres: * \u00bfCua\u0301ntos cuartos diferentes existen en el castillo? * \u00bfCu\u0301al es el taman\u0303o del cuarto ma\u0301s grande en el castillo? * \u00bfQue\u0301 pared se debe destruir para que un cuarto se extienda lo ma\u0301s posible? < center> ! [ Castillo] ( castle. png) < / center> Como vera\u0301s, el castillo esta\u0301 dividido en r \u00d7 c mo\u0301dulos cuadrados que forman diversos cuartos. Un cuarto se define como un conjunto de mo\u0301dulos tales que, para cada par de mo\u0301dulos en el conjunto, es posible llegar de uno al otro caminando a trave\u0301s de mo\u0301dulos horizontal o verticalmente contiguos. Se dice que dos mo\u0301dulos son contiguos si son adyacentes y adema\u0301s no existe una pared entre ellos.",
    "input": "La entrada empieza con una li\u0301nea con dos enteros r y c: el nu\u0301mero de filas en el mapa del castillo y el nu\u0301mero de mo\u0301dulos que hay en cada fila respectivamente ( 1 \u2264 r, c \u2264 50) . Cada una de las siguientes r li\u0301neas contienen c enteros; cada uno de estos enteros describe las paredes que rodean un mo\u0301dulo del castillo. Dicho entero tendra\u0301 un valor entre 0 y 15. Cada pared presente suma un valor a cada mo\u0301dulo: la pared de la izquierda suma 1, la pared de arriba suma 2, la pared de la derecha suma 4 y finalmente la pared de abajo suma 8. Se asegura que si una pared esta\u0301 presente entre dos mo\u0301dulos, dicha pared * * se sumara\u0301 a los valores de ambos mo\u0301dulos* * .",
    "output": "En la primer li\u0301nea de salida, imprime dos enteros: el primero representando el nu\u0301mero de cuartos en el castillo y el segundo siendo el taman\u0303o ( en nu\u0301mero de mo\u0301dulos) del cuarto ma\u0301s grande que hay. En la segunda li\u0301nea de entrada, imprime la coordenada del mo\u0301dulo y la direccio\u0301n de la pared que, de ser destruida, maximizari\u0301a el taman\u0303o del cuarto ma\u0301s grande en el castillo. Las posibles direcciones son \u201cW\u201c para la pared izquierda, \u201cN\u201c para la pared de arriba, \u201cE\u201c para la pared derecha y \u201cS\u201c para la pared de abajo. En caso de que existan mu\u0301ltiples soluciones, cualquiera de ellas sera\u0301 aceptada. | | input4 711 6 11 6 3 10 67 9 6 13 5 15 51 10 12 7 13 7 513 11 10 8 10 12 13| | output5 94 1 E| | end",
    "note": "",
    "topics": [
      "shortest paths",
      "dfs and similar"
    ],
    "id": 3299
  },
  {
    "title": "Charcos de lodo",
    "url": "https://omegaup.com/arena/problem/Charcos-de-lodo",
    "history": "Silvia ha salido de su casa temprano a las 6 AM para recoger los diplomas de la olimpiada de informa\u0301tica. Sin embargo, en la tarde anterior ella vio una fuerte lluvia, y las calles esta\u0301n algo enlodadas. Silvia simpre comienza en el punto ( 0, 0) en el plano de coordenadas y se dirige hacia la imprenta quien esta\u0301 ubicada en el punto ( X, Y) ( - 500 < = X < = 500; - 500 < = Y < = 500) . Ella puede ver N charcos de lodo, ubicados en los puntos ( A_ i, B_ i) ( - 500 < = A_ i < = 500; - 500 < = B_ i < = 500) del campo. Cada charco ocupa solo el punto en el que esta\u0301. Habiendo comprado recientemente botas nuevas, Silvia no quiere absolutamente ensuciarlas para\u0301ndose sobre lodo, pero quierellegar a la imprenta tan ra\u0301pido como sea posible. A ella ya se le hizo tarde debido a que ella tuvo que contar todos los charcos. SiSilvia puede viajar u\u0301nicamente paralelo a los ejes y girar en puntos con coordenadas enteras ( multiplosde 90 grados) , \u00bfcua\u0301l es la distancia ma\u0301s corta que ella debe viajar para llegar a la imprente y mantener limpias sus botas? Siempre existira\u0301 un camino sin lodo que Silvia pueda tomar para llegar la imprenta.",
    "input": "* Li\u0301nea 1: Tres enteros separados por espacio: X, Y, y N. * Li\u0301neas 2. . N+ 1: la li\u0301nea i+ 1 contiene dos enteros separados por espacio",
    "output": "* Li\u0301nea 1: La distancia mi\u0301nima que Silvia debe viajar para llegar a donde esta\u0301 la imprenta sin parase en el lodo.",
    "note": "",
    "topics": [
      "shortest paths",
      "dfs and similar"
    ],
    "id": 2679
  },
  {
    "title": "IOI 2000 - Bloques",
    "url": "https://omegaup.com/arena/problem/IOI-2000---Bloques",
    "history": "< center> ! [ Logo IOI 2000] ( logo00. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2014- # Construyendo con BloquesUn cubo unitario es un cubo de taman\u0303o 1\u00d71\u00d71, cuyas esquinas tienen coordenadas x, y, z enteras. Dos cubos unitarios esta\u0301n conectados cuando comparten una cara. Un objeto so\u0301lido tridimensional ( que llamaremos simplemente so\u0301lido en adelante) es un conjunto no vaci\u0301o de cubos unitarios conectados. ( Ve la Figura 1) . El volumen de un so\u0301lido es el nu\u0301mero de cubos unitarios que contiene. Un bloque es un so\u0301lido con volumen a lo ma\u0301s 4. Dos bloques son del mismo tipo cuando es posible obtener uno a partir del otro despue\u0301s de una serie de rotaciones ( no reflexiones) . Existen exactamente 12 tipos de bloques ( Ve la figura 2) . Los colores en la figura ayudan a clarificar la estructura del so\u0301lido, no tienen ningu\u0301n otro significadoUn conjunto D de bloques es una descomposicio\u0301n de un so\u0301lido S si existe una manera de unir todos los bloques en D y obtener el so\u0301lido S, y no hay dos bloques distintos en D que tienen un cubo unitario en comu\u0301n. Debera\u0301s escribir un programa que, dada la descripcio\u0301n de los tipos de bloques y un so\u0301lido S, determine el taman\u0303o del conjunto ma\u0301s pequen\u0303o de bloques en el cual se puede descomponer S.",
    "input": "En la entrada identificaremos a los cubos unitarios con una li\u0301nea conteniendo tres enteros x, y, z. La primera parte de la entrada sera\u0301 igual para todos los casos de prueba, se te proporcionara\u0301 la descripcio\u0301n de los 12 diferentes tipos de bloques mostrados en la figura 2 ordenados por su tipo. Cada tipo de bloque es descrito mediante un grupo consecutivo de li\u0301neas. La primera de ellas contendra\u0301 el volumen del bloque V, 1 \u2264 V \u2264 4. Las siguientes V li\u0301neas contienen cada una 3 enteros x, y, z, que representan las coordenadas de uno de los cubos unitarios que forman el bloque. ( 1\u2264 x, y, z\u22644) Despue\u0301s de esto vienen un grupo de li\u0301neas describiendo el so\u0301lido S, la primera de estas li\u0301neas contiene el volumen del so\u0301lido V, 1\u2264 V \u2264 50. Las siguientes V li\u0301neas contienen cada una 3 enteros x, y, z, que representan las coordenadas de uno de los cubos unitarios que forman el so\u0301lido. ( 1\u2264 x, y, z\u22647)",
    "output": "La salida estara\u0301 compuesta por una u\u0301nica li\u0301nea conteniendo un entero: el taman\u0303o del conjunto ma\u0301s pequen\u0303o de bloques en el cual se puede descomponer el so\u0301lido S.",
    "note": "",
    "topics": [
      "implementation",
      "dfs and similar"
    ],
    "id": 2284
  },
  {
    "title": "Nebulosas",
    "url": "https://omegaup.com/arena/problem/Nebulosos",
    "history": "Uno de los grandes misterios de nuestro universo, son las nebulosas de estrellas, que emergen como polvo estelar cuando una su\u0301per nova estalla. Los astro\u0301nomos las observan cotidianamente, y asi\u0301 tambie\u0301n, las fotografi\u0301an. Si se observa la fotografi\u0301a de una nebulosa como un arreglo de dos dimensiones, cada posicio\u0301n en e\u0301ste, representa la brillantez de ese punto. Los cienti\u0301ficos pueden identificar que hay una nebulosa porque hay un punto ( y so\u0301lo uno) con el valor mayor, el cual representa la ma\u0301xima brillantez de la nebulosa, y a partir de ahi\u0301, la brillantez comienza a disminuir. Sin embargo, los cienti\u0301ficos siempre se encuentran con el problema de que en las orillas de la nebulosa, e\u0301sta se difumina y no saben do\u0301nde termina. Afortunadamente, saben que cuando la diferencia de brillantez entre un cuadro ( dentro de la nebulosa) y otro es mayor a K, la nebulosa ha terminado. # ProblemaDada la fotografi\u0301a de la nebulosa y el valor de K, determina el taman\u0303o de la nebulosa.",
    "input": "En la primera li\u0301nea, tres nu\u0301meros separados por un espacio: N, M y K, que representan las dimensiones de la fotografi\u0301a y el valor K, respectivamente. En las siguientes N li\u0301neas, M nu\u0301meros separados por un espacio, que representan la brillantez de la foto en ese punto.",
    "output": "Una sola li\u0301nea con un entero, que representa en taman\u0303o de la nebulosa.",
    "note": "",
    "topics": [
      "shortest paths",
      "dfs and similar"
    ],
    "id": 2099
  },
  {
    "title": "Regreso de la influenza",
    "url": "https://omegaup.com/arena/problem/Regreso-de-la-influenza",
    "history": "Despue\u0301s de que la epidemia surgio\u0301 en la ciudad de Me\u0301xico se propago\u0301 por las islas de Karelotitlan ( si Karelotitlan tiene islas) , pero no so\u0301lo eso paso\u0301, el virus muto\u0301 en las islas y este nuevo virus es extremadamente contagioso por lo tanto los gobernantes de Karelotitlan decidieron destruir todos los puentes existentes para controlar la epidemia. Para poder salvar a la mayor cantidad de personas se ha decidido construir puentes solamente entre las islas no infectadas para que se puedan comunicar y no se infecten, una isla se considera como infectada si tan solo un reporte de infeccio\u0301n se ha dado en la isla. Se considera que dos secciones de tierra esta\u0301n en la misma isla si se unen ya sea al norte, sur, este u oeste. # ProblemaDado el mapa de las islas, decir cua\u0301l es el mi\u0301nimo numero de puentes que se deben construir para unir todas las islas que no esta\u0301n infectadas.",
    "input": "En la primera li\u0301nea dos nu\u0301meros enteros 1 < = F, C < = 1, 000, en las siguientes F li\u0301neas cada una con C caracteres con espacios entre cada uno. \u2018. \u2019 ( Punto) En caso de que se trate de una seccio\u0301n con agua, \u2018x\u2019 ( equis minu\u0301scula) en caso de que se haya reportado una infeccio\u0301n en ese lugar, y \u2018l\u2019 ( ele minu\u0301scula) en caso de que ese lugar se encuentre limpio de la epidemia. Tanto \u2018l\u2019 como \u2018x\u2019 son porciones de tierra de alguna isla.",
    "output": "El nu\u0301mero mi\u0301nimo de puentes que se deben construir para unir todas las islas que no tienen epidemia. Se considera que dos islas esta\u0301n unidas si existe alguna manera de llegar de una a otra pasando por cualquier numero de puentes e islas sin tocar el agua.",
    "note": "",
    "topics": [
      "shortest paths",
      "dfs and similar"
    ],
    "id": 2097
  },
  {
    "title": "Bajo el Volcan",
    "url": "https://omegaup.com/arena/problem/Bajo-el-Volcan",
    "history": "Se desea simular el desplazamiento de la lava de un volca\u0301n a lo largo de la ladera del mismo. Representamos la ladera por una superficie rectangular cuadriculada. Para cada casilla de esa superficie conoceremos su altura respecto el nivel del mar. El comportamiento de la lava se rige por las siguientes reglas: 1. La lava fluye desde la casilla en la que esta\u0301 situada el cra\u0301ter del volca\u0301n. 2. Dado un punto alcanzado por la lava, e\u0301sta fluye a todos los puntos adyacentes al mismo ( los 8 vecinos que este\u0301n dentro de los li\u0301mites de la superficie) que se encuentren a una altura estrictamente menor. # Objetivo: Se pide confeccionar un mapa de la ladera del volca\u0301n que identifique los puntos alcanzados por la lava.",
    "input": "Los datos de entrada se leen desde la entrada standard, con una secuencia de li\u0301neas que tendra\u0301 el siguiente formato: La primera li\u0301nea contiene dos nu\u0301meros enteros separados por un espacio en blanco, el nu\u0301mero de filas ( m) y columnas ( n) de la ladera. Pode\u0301is suponer que se cumple 1 < = m < 100 y 1 < = n < 100. La segunda li\u0301nea contiene la coordenada ( i, j) del cra\u0301ter, 1 < = i < = m y 1 < = j < = n. Las m li\u0301neas siguientes ( de la 3 a la m+ 2) contienen, cada una, una fila de la ladera. Cada punto de esa fila contiene un nu\u0301mero positivo entre 0 y 9, que representa la altura de ese punto. Los nu\u0301meros esta\u0301n separados por un u\u0301nico blanco.",
    "output": "Los datos de salida se escribira\u0301n en la salida esta\u0301ndar. Con una secuencia de m li\u0301neas que contienen, cada una, una fila de la ladera, cuyo valor para cada punto sera\u0301: la letra ' X' , si el punto ha sido alcanzado por la lava; el mismo valor que en la entrada, si el punto no ha sido alcanzado por la lava. Para facilitar la legibilidad se dejara\u0301 un espacio entre cada cara\u0301cter, tal como se ve en el siguiente ejemplo",
    "note": "",
    "topics": [
      "dfs and similar",
      "shortest paths"
    ],
    "id": 2095
  },
  {
    "title": "Volcan",
    "url": "https://omegaup.com/arena/problem/Volcan",
    "history": "Se desea simular el desplazamiento de la lava de un volca\u0301n a lo largo de la ladera del mismo. Representamos la ladera por una superficie rectangular cuadriculada. Para cada casilla de esa superficie conoceremos su altura respecto el nivel del mar. El comportamiento de la lava se rige por las siguientes reglas: 1. La lava fluye desde la casilla en la que esta\u0301 situada el cra\u0301ter del volca\u0301n. 2. Dado un punto alcanzado por la lava, e\u0301sta fluye a todos los puntos adyacentes al mismo ( los 8 vecinos que este\u0301n dentro de los li\u0301mites de la superficie) que se encuentren a una altura estrictamente menor. Objetivo: se pide confeccionar un mapa de la ladera del volca\u0301n que identifique los puntos alcanzados por la lava.",
    "input": "La primera li\u0301nea contiene dos nu\u0301meros enteros separados por un espacio en blanco, el nu\u0301mero de filas ( m) y columnas ( n) de la ladera. Pode\u0301is suponer que se cumple 1 < = m < 100 y 1 < = n < 100. La segunda li\u0301nea contiene la coordenada ( i, j) del cra\u0301ter, 1 < = i < = m y 1 < = j < = n. Las m li\u0301neas siguientes ( de la 3 a la m+ 2) contienen, cada una, una fila de la ladera. Cada punto de esa fila contiene un nu\u0301mero positivo entre 0 y 9, que representa la altura de ese punto. Los nu\u0301meros esta\u0301n separados por un u\u0301nico blanco.",
    "output": "una secuencia de m li\u0301neas que contienen, cada una, una fila de la ladera, cuyo valor para cada punto sera\u0301: la letra ' X' , si el punto ha sido alcanzado por la lava; el mismo valor que en la entrada, si el punto no ha sido alcanzado por la lava. Para facilitar la legibilidad se dejara\u0301 un espacio entre cada cara\u0301cter",
    "note": "",
    "topics": [
      "shortest paths",
      "math",
      "dfs and similar",
      "implementation",
      "matrices"
    ],
    "id": 1131
  },
  {
    "title": "L-OMI Super Agente",
    "url": "https://omegaup.com/arena/problem/L-OMI-Super-Agente",
    "history": "En su u\u0301ltima misio\u0301n, el su\u0301per agente Jaime Papel Blanco, debe hackear una red mientras se encuentra dentro de un edificio enemigo. El edificio esta\u0301 lleno de guardias y para poder hackear la red, Jaime Papel Blanco necesita esconderse y pasar desapercibido. Ahora debe encontrar el lugar o\u0301ptimo para esconderse. Jaime Papel Blanco tiene un mapa de la planta del edificio, el cual esta\u0301 representado como una cuadri\u0301cula de MxN que tiene tres tipos de cuadros: pared, por la que nadie puede pasar, representado por un ' # ' ; pasillo, representado por ' . ' ; y guardia, representado por ' G' . El edificio no tiene cuartos cerrados, es decir, desde cualquier cuadro se puede llegar a cualquier otro. Jaime Papel Blanco sabe que los guardias solo lo detectaron si se encuentran en el mismo cuadro del mapa que e\u0301l. Los guardias solo pueden moverse hacia arriba, abajo, izquierda o derecha. Para lograr su misio\u0301n, debe encontrar un cuadro cuya distancia al guardia ma\u0301s cercano sea la ma\u0301xima posible. Con distancia, el agente Jaime Papel Blanco, se refiere al mi\u0301nimo de cuadros que tendra\u0301 que recorrer un guardia para llegar a e\u0301l. # Problema# Escribe un programa que dado un mapa, encuentra un cuadro o\u0301ptimo para el escondite de Jaime Papel Blanco, es decir, aquel que maximice la distancia al guardia ma\u0301s cercano y debera\u0301s reportar esa distancia.",
    "input": "Tu programa debe leer del teclado la siguiente informacio\u0301n: - En la primer li\u0301nea los nu\u0301meros M y N, las dimensiones del mapa. - Las siguientes M li\u0301neas contendra\u0301n N caracteres del tipo ' # ' , ' . ' o ' G' indicando si en ese cuadro del mapa hay una pared, un pasillo o un guardia, respectivamente.",
    "output": "Tu programa debe escribir en la pantalla un u\u0301nico entero D seguido de un salto de li\u0301nea, representando la distancia ma\u0301xima al guardia ma\u0301s cercano a Jaime Papel Blanco.",
    "note": "",
    "topics": [
      "dfs and similar",
      "shortest paths"
    ],
    "id": 1100
  },
  {
    "title": "Super Nieves Bros",
    "url": "https://omegaup.com/arena/problem/super-nieves-bros",
    "history": "El malvado Dr. Lira ha logrado encerrar al menor de Los Nieves Bros. en un juego de arcade y necesitan de tu ayuda para salir de e\u0301l. < br> < br> El juego es una cuadri\u0301cula de NxM. Algunas celdas de la cuadri\u0301cula tienen una plataforma en la cual Plasma Nieves se puede parar. Todas las celdas del renglo\u0301n del fondo del mapa siempre tienen una plataforma. Los renglones del mapa esta\u0301n numerados del 1 al N empezando desde arriba y las columnas esta\u0301n numeradas del 1 al M empezando desde la izquierda. < br> < br> Exactamente una de las celdas contiene una puerta y Plasma Nieves necesita llegar ahi\u0301. < br> < br> Inicialmente, nuestro he\u0301roe se encuentra posicionado en el piso ( el renglo\u0301n de ma\u0301s abajo) . Plasma Nieves se puede mover horizontalmente hacia los 2 lados adyacentes si ambos contienen una plataforma. Plasma Nieves tambie\u0301n cuenta con una escalera que puede usar para subir o bajar de renglo\u0301n. Si la escalera es de longitud L, Plasma Nieves puede moverse entre dos celdas ( i_ 1, j) y ( i_ 2, j) si ambas contienen una plataforma y | i_ 1 - i_ 2| \u2264 L ( el valor absoluto de la diferencia entre las alturas es menor o igual a la longitud de la escalera) . Plasma Nieves es muy fuerte y ha\u0301bil, asi\u0301 que puede cargar la escalera a donde vaya y usarla mu\u0301ltiples veces. < br> < br> Debido a que la escalera es muy costosa de obtener, Plasma Nieves necesita que le ayudes a determinar cua\u0301l es el taman\u0303o mi\u0301nimo de escalera L que necesita tal que puede llegar del piso a la puerta. < br> < br> Por razones que no podemos comprender, Plasma Nieves no puede brincar haci\u0301a abajo, forzosamente tiene que usar la escalera.",
    "input": "En la primer li\u0301nea habra\u0301 dos enteros N y M, representando el nu\u0301mero de renglones y columnas. En la segunda li\u0301nea habra\u0301 dos enteros R y C, indicando el renglo\u0301n y la columna donde se encuentra la puerta. Despue\u0301s habra\u0301 N li\u0301neas con M caracteres cada uno. Las ' X' representan las plataformas y los ' . ' espacios vaci\u0301os.",
    "output": "El taman\u0303o mi\u0301nimo de la escalera que se necesita para llegar del piso a la puerta. Escribe 0 si se puede solucionar sin escalera.",
    "note": "",
    "topics": [
      "binary search",
      "shortest paths",
      "dfs and similar"
    ],
    "id": 258
  },
  {
    "title": "L-OMI98-El explorador",
    "url": "https://omegaup.com/arena/problem/OIEG2013SSC",
    "history": "Un explorador tiene que decidir donde construir un camino para llegar de un punto A a un punto B. Para auxiliarse el explorador ha hecho un mapa con los obsta\u0301culos que existen. Cuadriculo\u0301 su mapa y quiere un camino que pase por el menor nu\u0301mero de cuadros. El camino so\u0301lo puede ir de un cuadro a otro si tienen un lado en comu\u0301n, es decir, no puede avanzar en diagonal, y no puede pasar por un cuadro que contenga un obsta\u0301culo. Cada cuadro del mapa se identifica por sus coordenadas, primero la fila y despue\u0301s la columna. Las filas esta\u0301n numerados de arriba hacia abajo iniciando con el 0. Las columnas esta\u0301n numeradas de izquierda a derecha iniciando con el 0. Escribe un programa que dado un mapa con obsta\u0301culos encuentre el menor nu\u0301mero de cuadros por los que debe pasar un camino que vaya del punto A al punto B, incluyendo a los cuadros que contienen a A y a B.",
    "input": "En la primera linea los enteros N y M, el nu\u0301mero de filas y columnas del mapa. En cada una de las siguientes N lineas hay M nu\u0301meros que pueden ser 0 o\u0301 1, 0 si no hay obsta\u0301culo en el cuadro correspondiente y 1 si lo hay. En la siguiente linea ( la penu\u0301ltima) la fila y columna del punto A. En la u\u0301ltima linea la fila y columna del punto B.",
    "output": "En la primera linea el nu\u0301mero de cuadros por los que pasa un camino mi\u0301nimo entre A y B.",
    "note": "",
    "topics": [
      "dfs and similar",
      "shortest paths"
    ],
    "id": 193
  },
  {
    "title": "L-OMI98-Submarino",
    "url": "https://omegaup.com/arena/problem/OIEG2013SSB",
    "history": "Un submarino tiene N secciones numeradas del 1 al N. De estas secciones, algunas se encuentran interconectadas entre si\u0301. Adema\u0301s se sabe que hay un total de E interconexiones y que la seccio\u0301n N es la salida de emergencia. Si hubiera un marinero en cada seccio\u0301n, excepto la de salida, y si e\u0301ste tardara una unidad de tiempo en llegar a una seccio\u0301n adyacente, determina cua\u0301ntos marineros llegari\u0301an a la salida de emergencia en menos de T unidades de tiempo. < img src= \" http: / / www. cimat. mx/ omar/ omegaup/ submarino. jpg\" width= 300> < / img>",
    "input": "En la primera linea los enteros N, E y T. Las siguientes E li\u0301neas contienen, cada una, los nu\u0301meros de dos secciones interconectadas entre si\u0301.",
    "output": "En la primera li\u0301nea el nu\u0301mero de marineros que pueden llegar a la salida de emergencia en menos de T unidades de tiempo.",
    "note": "",
    "topics": [
      "shortest paths",
      "dfs and similar"
    ],
    "id": 192
  },
  {
    "title": "Maletas",
    "url": "https://omegaup.com/arena/problem/Maletas",
    "history": "Uamito va a salir de vacaciones y tiene 3 maletas que quiere llevar en un vuelo. Pesan A, B y C kg respectivamente. Quiere documentar exactamente dos de estas maletas y llevar la maleta restante con e\u0301l. Las restricciones de la aeroli\u0301nea dicen que la suma total de los pesos de las maletas que se documentan no puede exceder los D kg y el peso de la maleta que se lleva abordo no puede exceder los E kg. Averigua si Uamito puede llevar las tres maletas en el vuelo.",
    "input": "Cada caso de prueba contiene una sola li\u0301nea de entrada, cinco enteros separados por espacios A, B, C, D, E.",
    "output": "Para cada caso de prueba, la salida en una sola li\u0301nea responde \" SI\" si Uamito puede llevar las tres bolsas con e\u0301l o \" NO\" si no puede.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 15738
  },
  {
    "title": "Caracteres iguales mediante inversiones",
    "url": "https://omegaup.com/arena/problem/Caracteres-iguales-mediante-inve",
    "history": "Cuentas con una cadena S formada por las letras ` a` , ` b` , ` c` y deseas modificarla para que todas las apariciones de la misma letra aparezcan juntas ( aunque el orden entre letras distintas no te importa: da lo mismo si la cadena resultante es ` aabbcc` o ` ccbbaa` o ` bbccaa` , etce\u0301tera) . Para volver ma\u0301s interesante el desafi\u0301o, la u\u0301nica operacio\u0301n que podra\u0301s aplicar sera\u0301 la de tomar alguna subcadena de S e invertirla. Por ejemplo, si S = ` caccb` entonces conviene invertir la subcadena de longitud 3 que comienza en el segundo caracter ( es decir, la subcadena ` acc` ) para asi\u0301 obtener S' = ` cccab` . Escribe un programa que calcule la menor cantidad de veces que necesitara\u0301s aplicar la operacio\u0301n descrita para obtener una cadena que te satisfaga.",
    "input": "Una cadena S formada por las letras ` a` , ` b` , ` c` con al menos una aparicio\u0301n de cada letra y con una longitud no mayor a 15 caracteres.",
    "output": "Un entero que sea la menor cantidad de operaciones que necesitas aplicar.",
    "note": "",
    "topics": [
      "strings",
      "shortest paths"
    ],
    "id": 14601
  },
  {
    "title": "ANIEI 2021 - D",
    "url": "https://omegaup.com/arena/problem/ANIEI-2021---D",
    "history": "El caballo es una pieza del juego del ajedrez que usualmente se representa con la cabeza y el cuello de un caballo ( aunque en la India, generalmente se representa mostrando el cuerpo completo del caballo) . Comparado con otras piezas del ajedrez, el movimiento del caballo es u\u0301nico: se puede mover dos celdas a lo vertical y una a lo horizontal, o dos celdas a lo horizontal y una a lo vertical ( teniendo ambos movimientos una forma de L) . Un caballo puede saltar por encima de las dema\u0301s piezas pero no puede salir del tablero. La siguiente figura muestra los movimientos disponibles que tiene un caballo durante su turno. ! [ Knight] [ 1] Juan ha inventado una nueva pieza de ajedrez: el D- caballo. Un D- caballo puede realizar un ma\u0301ximo de D movimientos de un caballo en un mismo turno. Por ejemplo, un 2- caballo puede alcanzar en un u\u0301nico turno cualquier celda que un 1- caballo ( o un caballo normal) pueda alcanzar en dos turnos. Juan acaba de colocar algunas de estas piezas en un tablero de F \u00d7 C celdas y desea conocer, suponiendo que se pudieran acomodar ma\u0301s de una pieza por celda, cua\u0301l seri\u0301a la minima cantidad de turnos necesarios para que todas las piezas lleguen a la misma celda. Juan so\u0301lo puede mover una pieza por turno.",
    "input": "La primera li\u0301nea contiene los tres enteros F, C, N. Cada una de las siguientes N li\u0301neas contiene tres enteros f_ i, c_ i, D_ i separados por espacios que denotan que en la fila f_ i y columna c_ i se coloco\u0301 un D_ i- caballo. Puedes suponer que 1 \u2264 r_ i \u2264 R, 1 \u2264 c_ i \u2264 C y 1 \u2264 D_ i \u2264 9 para 1 \u2264 i \u2264 N.",
    "output": "Una li\u0301nea con un u\u0301nico entero que denote la mi\u0301nima cantidad de turnos que Juan necesita para llevar todas las piezas a la misma celda del tablero. Imprime - 1 si lograr lo anterior es imposible.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 14236
  },
  {
    "title": "Menor secuencia lexicogr\u00e1fica",
    "url": "https://omegaup.com/arena/problem/Menor-secuencia-lexicografica",
    "history": "Dada una matriz de enteros a de n \u00d7 m, encuentra la mi\u0301nima secuencia lexicogra\u0301fica que se puede generar mediante un camino desde la celda ( 1, 1) hasta la celda ( n, m) considerando que solo puedes moverte desde la celda ( x, y) a: - ( x + 1, y) si 1 \u2264 x + 1 \u2264 n. - ( x, y + 1) si 1 \u2264 y + 1 \u2264 m. Y que la secuencia generada por un camino p_ 1 = [ ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , . . . , ( x_ k, y_ k) ] es: S( p_ 1) = ( a_ x_ 1, y_ 1, a_ x_ 2, y_ 2, . . . , a_ x_ k, y_ k) * * Nota: * * Una secuencia x es menor lexicogra\u0301ficamente que una secuencia y si: - x es un prefijo de y y | x| < | y| . Es decir, x coincide con los primeros | x| elementos de y. - Sea i \u2264min | x| , | y| la primera posicio\u0301n tal que x_ i= \u0338 y_ i, entonces x_ i < y_ i. Donde | x| es la cantidad de elementos en la secuencia x. Por ejemplo, para la matriz< img src= \" https: / / i. imgur. com/ MkCCuJv. png\" / > Si tomamos el camino p = [ ( 1, 1) , ( 2, 1) , ( 2, 2) , ( 2, 3) , ( 3, 3) ] , su secuencia sera\u0301: S( p) = ( 1, 3, 4, 2, 2) Para este ejemplo lo o\u0301ptimo seri\u0301a tomar el camino p_ 2 = [ ( 1, 1) , ( 1, 2) , ( 2, 2) , ( 2, 3) , ( 3, 3) ] , con la secuencia: S( p_ 2) = ( 1, 2, 4, 2, 2)",
    "input": "La primera linea de entrada contiene dos enteros n y m, la cantidad de filas y columnas de la matriz, respectivamente. Las siguientes n li\u0301neas de entrada contienen m enteros a_ i, j, el j- e\u0301simo entero de la i- e\u0301sima li\u0301nea es el valor de la celda ( i, j) .",
    "output": "Imprima n + m - 1 enteros, los elementos de la mi\u0301nima secuencia lexicogra\u0301fica desde la celda ( 1, 1) a la ( n, m) .",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 14132
  },
  {
    "title": "Chika y el Laberinto-Portal",
    "url": "https://omegaup.com/arena/problem/Chika-y-el-Laberinto-Portal",
    "history": "# La historia. . . A Chika Fujiwara le encantan los juegos de mesa, en especial si tienen laberintos. Por ello se emociono cuando encontro\u0301 una versio\u0301n del famoso juego Portal en juego de mesa. El juego consiste en un laberinto, un tablero de n x m casillas, en el cual el jugador quiere llegar desde la casilla superior izquierda ( 1, 1) hasta la casilla inferior derecha ( n, m) . En el tablero se encuentran 3 tipos de casillas: * * * Pasillos: * * Identificados por ' . ' , el jugador puede cruzar por ellos. * * * Muros: * * Identificados por ' # ' , el jugador no puede cruzar por ellos. * * * Portales: * * Identificados por una letra entre la ' a' y la ' z' , los portales son dos casillas conectadas entre si en el tablero entre las que el jugador puede teletransportarse al instante. Siempre esta\u0301n compuestos por dos casillas y se identifican con la misma letra. Para moverse en el tablero, Chika solo puede tomar las direcciones * * arriba, abajo, izquierda o derecha* * , siempre y cuando la direccio\u0301n no este bloqueada y la casilla se encuentre dentro del tablero. Chika se fascino\u0301 tanto por el juego que empezo\u0301 a buscar una solucio\u0301n, pero debido a su trabajo como secretaria quiere acabarlo lo mas ra\u0301pido posible, asi\u0301 que te pidio\u0301 ayuda a ti como eminencia en la programacio\u0301n para que busques el camino mas corto que solucione el laberinto. ! [ ] ( fujiwara_ smile. gif)",
    "input": "Tres enteros, n, m y p, el nu\u0301mero de filas, nu\u0301mero de columnas, y nu\u0301mero de portales respectivamente, seguidos de n li\u0301neas con m caracteres indicando el estado del tablero.",
    "output": "Imprime el nu\u0301mero mi\u0301nimo de pasos que necesita Fujiwara para llegar a la meta. Si es imposible llegar, imprime - 1.",
    "note": "Teletransportarse no cuenta como un paso. En el primer ejemplo, Chika sigue los pasos * * abajo - > derecha* * y llega a un portal, se teletransporta, avanza * * derecha - > derecha* * y llega a la meta, en total 4 pasos. En el segundo ejemplo los pasos son * * derecha - > derecha* * , teletransporte, * * izquierda - > izquierda* * , teletransporte, * * derecha* * , en total 5 pasos. # Li\u0301mites* 4 \u2264 n, m \u2264 10^ 3* 1 \u2264 p \u2264 26",
    "topics": [
      "shortest paths"
    ],
    "id": 13560
  },
  {
    "title": "Pancho Saltarin",
    "url": "https://omegaup.com/arena/problem/Pancho-Saltarin",
    "history": "Pancho se metio\u0301 al gimnasio para fortalecer sus piernas, y lo logro, ahora puede saltar por mayor tiempo, pero las moscas al darse cuenta de esto, decidieron esconderse en una parte del pantano. # ProblemaPancho no sabe donde termino la mosca, pero sabe donde estaba antes de esconderse, el pantano de representa como una cuadricula de n * m, a la mosca le toma una unidad de tiempo cambiar de casilla, la mosca solo puede moverse hacia arriba, hacia abajo, hacia la izquierda o hacia la derecha, ayuda a Pancho a mostrarle un mapa del pantano en donde casa casilla tenga la cantidad de unidades de tiempo que le toma a la mosca llegar ahi\u0301.",
    "input": "En la primera linea 2 enteros n y m, en la segunda linea 2 enteros, x y y, la posicio\u0301n inicial de la mosca.",
    "output": "El mapa del pantano requerido.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 13257
  },
  {
    "title": "Recorridos de Sapos",
    "url": "https://omegaup.com/arena/problem/Recorridos-de-Sapos",
    "history": "Hoy las cosas sera\u0301n un poco diferentes, Pancho a creado una banda de sapos dedicada a cazar moscas, dicen los rumores que cazan 1000000 de moscas diarias, si esto continua las moscas se extinguira\u0301n y Pancho y su banda ya no tendra\u0301n que comer, asi\u0301 que ahora te toca ayudar a las moscas. # ProblemaPancho y su banda esta\u0301n en un pantano de n filas x m columnas, en donde hay: * \" # \" Rocas. * \" . \" Nenu\u0301fares libres. * \" S\" Un miembro de la banda de Pancho. Los secuaces de Pancho solo se pueden mover hacia arriba, abajo, izquierda o derecha. Tu tarea es decir cual es la mayor distancia que se puede alejar la mosca de un miembro de la banda de Pancho.",
    "input": "En la primera linea 2 enteros n y m, en las siguientes n lineas, m caracteres de los antes mencionados.",
    "output": "Un u\u0301nico entero, la ma\u0301xima distancia que se puede conseguir alejar la mosca de un miembro de la banda de Pancho.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 13254
  },
  {
    "title": "Pancho en el Pantano",
    "url": "https://omegaup.com/arena/problem/Pancho-en-el-Pantano",
    "history": "Pancho se ah perdido en un pantano y ademas esta hambriento. # ProblemaPancho se encuentra en un pantano representado con una cuadricula de n * m, en donde hay: - * * * * * que representan un obsta\u0301culo por el que Pancho no puede pasar. - * * P* * que representa la posicio\u0301n actual de Pancho. - * * S* * que representa la salida del pantano. - * * c* * que representan que hay una unidad de comida que Pancho puede comer. - * * . * * que representan que esa esta libre. Pancho tiene * * MUCHA* * prisa, por lo que quiere saber cual es el menor numero de pasos que debe hacer para poder salir y la cantidad de comida que puede comer en ese camino. # NotaPancho solo se puede hacia en los 4 puntos cardinales. y siempre buscara moverse en el siguiente orden* * Derecha* * * * Izquierda* * * * Abajo* * * * Arriba* *",
    "input": "En la primera linea los enteros n y m. En las siguientes n lineas, m caracteres de los antes mencionados.",
    "output": "El menor numero de pasos que Pancho debe dar para salir seguido de la cantidad de comida que puede comer, en caso de no poder llegar a la salida deberas imprimir \" Ahora quien salvara a Pancho? \" .",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 13087
  },
  {
    "title": "Camino a caballo",
    "url": "https://omegaup.com/arena/problem/Caballos-en-un-tablero",
    "history": "Esta\u0301s atrapado en un suen\u0303o del cua\u0301l te cuesta despertar. En este suen\u0303o tan bizarro, te encuentras en un tablero de ajedrez de 1000 \u00d7 1000. Lo curioso es que esta\u0301s subido encima de la pieza del caballo en la casilla ( x_ 1, y_ 1) . Por algu\u0301n motivo, existe una casilla especial ( x_ 2, y_ 2) donde se encuentra la pieza del rey contrincante. Tu\u0301 sabes que esa pieza no se puede mover y tu meta es apoderarte de esa casilla llegando a ella para derrocar al rey contrincante. Es la u\u0301nica forma que puedes despertar de esta pesadilla. Dicho esto, ahora te preguntas cu\u0301al sera\u0301 el mi\u0301nimo nu\u0301mero de pasos que tu\u0301 y tu caballo deben dar para llegar hacia la pieza del rey contrincante.",
    "input": "2 li\u0301neas con 2 nu\u0301meros enteros cada uno. La primera li\u0301nea tiene dos nu\u0301meros enteros ( x_ 1, y_ 1) , separados por un espacio, que representan la casilla donde empiezas. La segunda li\u0301nea tiene dos nu\u0301meros enteros ( x_ 2, y_ 2) , separados por un espacio, que representa la casilla del rey contrincante.",
    "output": "Un solo nu\u0301mero, que representa la mi\u0301nima cantidad de movimientos que deben dar tu\u0301 y tu caballo para llegar desde la casilla del inicio hasta la del rey contrincante.",
    "note": "- Las posiciones comienzan en 0, es decir, ( 0, 0) representa la esquina inferior izquierda del tablero. - El caballo de ajedrez se mueve en forma de L, es decir, desde una casilla con posicio\u0301n ( x, y) puede moverse a 8 posibles casillas, con coordenadas ( x \u00b1 1, y \u00b1 2) o ( x \u00b1 2, y \u00b1 1) ( siempre y cuando la casilla este\u0301 dentro del tablero) .",
    "topics": [
      "shortest paths"
    ],
    "id": 12975
  },
  {
    "title": "Twister",
    "url": "https://omegaup.com/arena/problem/twister",
    "history": "Has sido contratado por la red social Twister para desarrollar una nueva funcionalidad para conectar a personas en la vida real. Tu\u0301 tienes un mapa que describe una ciudad. Dicho mapa es una cuadricula de taman\u0303o M por N y cada celda esta\u0301 bloqueada o libre. Una celda puede ser transitada por las personas so\u0301lo si esta libre. Las personas se mueven en cuatro direcciones sobre la cuadricula: arriba, abajo, izquierda y derecha. Las personas pueden dar pasos de distintos taman\u0303os, siempre que se sigan estas reglas: * El primer paso que dan las personas siempre es de taman\u0303o 1. * Para el segundo paso, la persona ya trae la aceleracio\u0301n y puede dar un paso de taman\u0303o 2, o bien puede frenarse y volver a dar un paso de taman\u0303o 1. * En general para los pasos siguientes, la persona puede aprovechar la aceleracio\u0301n que trae del paso anterior y dar un paso del doble de taman\u0303o que el anterior, siempre y cuando toda la distancia recorrida en dicho paso sea en la * misma direccio\u0301n* y no \" choque\" contra ninguna * celda bloqueada* ni ninguna * orilla del mapa* . Si la persona no quiere o no puede dar un paso tan grande, puede frenar y dar un paso de taman\u0303o 1. * La persona tambie\u0301n puede decidir frenar y quedarse esperando ahi\u0301 a que la otra persona lo alcance. Se te dara\u0301n las coordenadas de la ubicacio\u0301n de dos personas y tu debera\u0301s de contestar \u00bfCua\u0301l es la mi\u0301nima cantidad de minutos que tardara\u0301 la pareja para encontrarse en alguna celda? . Cada paso que da cada persona toma 1 minuto en darse, independientemente del taman\u0303o del paso. Las dos personas pueden moverse al mismo tiempo para encontrarse ma\u0301s ra\u0301pido en un punto intermedio.",
    "input": "* En la primera li\u0301nea, dos enteros M y N que describen el taman\u0303o de la matriz. M es el nu\u0301mero de columnas y N el nu\u0301mero de filas. * En la segunda li\u0301nea dos enteros describiendo las coordenadas de la primera persona. Primero la columna y luego la fila. * En la tercera li\u0301nea dos enteros describiendo las coordenadas de la segunda persona. Primero la columna y luego la fila. * En la cuarta li\u0301nea, un entero B que es el nu\u0301mero de celdas bloqueadas en la cuadri\u0301cula. * En las siguientes B li\u0301neas: parejas de coordenadas C_ i, R_ i describiendo la columna y fila de la celda bloqueada respectivamente.",
    "output": "El tiempo mi\u0301nimo que tomara\u0301 a las personas encontrarse en alguna celda. Si es imposible que las dos personas se encuentren en una misma celda, imprime - 1.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 12147
  },
  {
    "title": "\u00c1rbol Geneal\u00f3gico",
    "url": "https://omegaup.com/arena/problem/Arbol-Genealogico",
    "history": "Iva\u0301n tiene una gran familia, y recientemente encontro\u0301 en un cajo\u0301n oculto en su casa un documento con una parte del a\u0301rbol genealo\u0301gico de su familia. Teniendo esta informacio\u0301n, a e\u0301l le interesa saber con cual familiar suyo tiene el menor parentesco posible. Por ejemplo entre padre e hijo existe un grado de consanguinidad, entre hermanos 2 grados, tio y sobrino 3 grados etc. Cada persona dentro de este arbol puede tener a lo ma\u0301s 2 padres ( puede que 0 o 1) . No hay 2 personas con el mismo nombre. No existen ciclos de ningun tipo en e\u0301ste a\u0301rbol genealo\u0301gico.",
    "input": "En la primer li\u0301nea un entero 1\u2264 n \u2264 1e5, la cantidad de relaciones que existen entre familiares. Luego siguen n li\u0301neas cada una con dos cadenas distintas s_ 1, s_ 2 compuestas solamente de letras minusculas del alfabeto ingles, indicando que s_ 1 es el padre o la madre de s_ 2. Todos los nombres tienen longitud entre 1 y 15. El nombre \" ivan\" siempre estara\u0301 presente mi\u0301nimo una vez.",
    "output": "Un entero, el grado de parentesco ma\u0301s grande que puede existir entre Iva\u0301n y cualquier otra persona en su familia.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 12134
  },
  {
    "title": "Camino a la OMI",
    "url": "https://omegaup.com/arena/problem/Camino-a-la-OMI",
    "history": "La seleccio\u0301n de Quintana Roo esta lista para ir a la OMI Zacatecas 2020, pero por el dan\u0303o econo\u0301mico que dejo el CODEVID- 10011 en el estado se quedo sin presupuesto para pagar el transporte en avio\u0301n, por tanto, la seleccio\u0301n tendra\u0301 que ir caminando a Zacatecas, definamos este estado con la letra Z, el punto de partida sera\u0301 el estado de Quintana Roo definida por la letra Q. El virus no ha sido erradicado con totalidad en el pai\u0301s, por tanto, el delegado ha conseguido un mapa de N\u00d7M el cual esta\u0301 representado por un \" . \" aquellos estados que esta\u0301n libres del virus y una X los estados que au\u0301n siguen infectados por el virus. Adema\u0301s de este mapa logro conseguir una vacuna temporal que permite pasar a la seleccio\u0301n por un estado sin ser contagiados por el virus, es decir, el efecto de la vacuna solo funciona en el transcurso de pasar por un estado, despue\u0301s de realizar dicho movimiento la seleccio\u0301n seguira\u0301 siendo vulnerable a ser contagiada por el virus. # ProblemaTu tarea sera\u0301 encontrar el camino ma\u0301s corto de Q a Z, evitando pasar por los estados que au\u0301n siguen infectados haciendo movimientos por el mapa ( i, j+ 1) , ( i+ 1, j) , ( i, j- 1) , ( i- 1, j) , siendo i las filas del mapa y j las columnas de este, con la posibilidad de usar la vacuna en cualquier estado del mapa, una vez que se haya utilizado ya no se podra\u0301 volver a utilizar puesto que solo tienen una.",
    "input": "La primera li\u0301nea dos enteros N y M que son las filas y columnas del mapa. Seguido de N filas con M enteros cada una con caracteres tales como Q, Z, X, \" . \" , explicado en la descripcio\u0301n del problema.",
    "output": "Un u\u0301nico entero que representa la distancia mi\u0301nima de Q a Z, si no existe camino posible para llegar a Z imprime * * - 1* * . | | input5 5Q. . X. . . . X. . . . . . XX. X. . . . . Z| | output8| | input5 5Q. . X. XX. X. . . . X. XXXX. Z. . . . | | output8| | input5 5QX. . . XX. . . . . . . . . . . XX. . . XZ| | output- 1| | end# Li\u0301mites* * Para el 1/ 3 de los casos* * - 2 \u2264 N, M \u2264 100- No existen estados infectados* * Para otro 1/ 3 de los casos* * - 2 \u2264 N, M \u2264 100- Existen estados infectados* * Para otro 1/ 3 de los casos* * - 2 \u2264 N, M \u2264 1000- Existen estados infectados",
    "note": "",
    "topics": [
      "math",
      "matrices",
      "shortest paths"
    ],
    "id": 10868
  },
  {
    "title": "Saltando entre lava",
    "url": "https://omegaup.com/arena/problem/1er-ccp-lava",
    "history": "Un malvado hechicero te acaba de encerrar en un peligroso volca\u0301n y debes escapar cuanto antes para poder llegar a tiempo a la * 1er Copa Centroamericana de Programacio\u0301n* . Dentro del volca\u0301n hay plataformas de piedra que tienen distintas alturas, lo cual no es un problema para ti ya que eres un excelente saltador. Sin embargo, la lava del volca\u0301n cambia constantemente su nivel y si la lava sube cuando esta\u0301s en una plataforma baja, morira\u0301s. Si esta\u0301s parado en una plataforma de altura H y la lava esta\u0301 a altura L, estara\u0301s a salvo si L \u2264 H. Afortunadamente, el comportamiento de la lava es perio\u0301dico: L comienza valiendo 0 y aumenta en 1 cada segundo hasta llegar a 5, despue\u0301s baja en 1 cada segundo hasta llegar a 0 y el ciclo se repite. A ti tambie\u0301n te toma un segundo saltar a una plataforma contigua ( hacia arriba, abajo, izquierda o derecha) y puedes quedarte en donde esta\u0301s si eso te conviene. El volca\u0301n puede describirse mediante una matriz de enteros que denotan las alturas de las plataformas. Tu\u0301 comienzas en la esquina superior izquierda con coordenadas ( 0, 0) y la salida esta\u0301 en la coordenada ( N- 1, N- 1) . Escribe un programa que calcule la menor cantidad de segundos que te tomara\u0301 escapar o si es imposible hacerlo.",
    "input": "* Un entero N, indicando la dimensio\u0301n de la matriz. * Una matriz de N \u00d7 N enteros que representan la altura de las plataformas. Todas las alturas esta\u0301n en el rango de 0 a 5. * 1 \u2264 N \u2264 500",
    "output": "Un entero que sea la menor cantidad de segundos que te tomara\u0301 escapar o - 1 si es imposible hacerlo.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 10795
  },
  {
    "title": "Ana la Rana",
    "url": "https://omegaup.com/arena/problem/Ana-la-Rana",
    "history": "Ana la rana anciana vive en cierto nenu\u0301far en el lago de Chapala. Ella quiere visitar a su amigo Paco el sapo guapo para tomar el te\u0301 y comer bizcochos. Para ello Ana saltara\u0301 de nenu\u0301far en nenu\u0301far. Ella es una rana un poco extran\u0303a, y solo sabe saltar hacia el norte, sur, este y oeste. Adema\u0301s so\u0301lo puede saltar cierta distancia ma\u0301xima. Ana quiere saber si puede llegar con su amigo, y de ser posible, cua\u0301l es el nu\u0301mero mi\u0301nimo de saltos que debera\u0301 realizar.",
    "input": "La primera li\u0301nea contiene dos enteros 2 \u2264 n \u2264 20, 000, 1 \u2264 d \u2264 1000 la cantidad de nenu\u0301fares en el lago y la distancia ma\u0301xima que Ana puede saltar. La siguiente li\u0301nea contiene 2 enteros 1 \u2264 a, b \u2264 n el nenu\u0301far donde vive Ana y donde vive Paco respectivamente. Luego siguen n li\u0301neas compuestas de 2 enteros 0 \u2264 x_ i, y_ i \u2264 1000, las coordenadas donde se encuentra el nenu\u0301far i.",
    "output": "Imprime 1 entero, la cantidad mi\u0301nima de saltos para que Ana llegue a su destino, o - 1 si no le es posible.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 10741
  },
  {
    "title": "La Red Social",
    "url": "https://omegaup.com/arena/problem/La-Red-Social",
    "history": "Anastacio esta\u0301 creando la siguiente red social que dominara\u0301 al internet. Para ello quiere escribir un algoritmo que recomiende usuarios para agregar a la lista de amigos de cualquier persona. Dentro del sistema existen n personas distintas denotadas por enteros entre 1 y n. La pa\u0301gina representa relaciones de amistad mediante un par de enteros a_ i a_ j donde 1\u2264 * i* , * j* \u2264n, y * i* = \u0338 * j* lo cual significa que el usuario a_ i tiene como amigo al usuario a_ j. * * Estas relaciones de amistad no son necesariamente reci\u0301procas* * , y el usuario a_ j puede o no tener como amigo al usuario a_ i. En otras palabras, 1 puede ser amigo de 2 sin que 2 sea amigo de 1. Para que el algoritmo recomiende cierto usuario a_ j al usuario a_ i debe existir una \" cadena\" de amistades desde a_ i hasta a_ j. Por ejemplo, si el sistema tiene las siguientes amistades: 1 22 33 4Entonces el usuario 3 y 4 le seri\u0301an recomendados al usuario 1 ( el 2 no, porque ya son amigos) . Anastacio pronto se dio cuenta de que este algoritmo podri\u0301a darle una cantidad gigantesca de recomendaciones a los usuarios; por lo que decidio\u0301 ponerle una limitante, la pa\u0301gina no le recomendara\u0301 usuarios a otro si\u0301 entre ellos existen ma\u0301s de d amigos entre ellos.",
    "input": "La primera li\u0301nea se compone de 3 enteros n, m y d donde n es la cantidad de usuarios en el sistema, m es la cantidad de amistades ya registradas y d es el ma\u0301ximo de usuarios que pueden existir entre 2 personas para que\u0301 e\u0301stos sean recomendados. Las siguientes m li\u0301neas se componen de 2 enteros a_ i y a_ j, simbolizando las relaciones de amistad ya existentes. Recuerda que este par nos quiere decir que a_ i tiene en su lista de amigos a a_ j ( y no necesariamente a_ i esta\u0301 en la lista de amigos de a_ j) La u\u0301ltima li\u0301nea tiene un entero x, el usuario de quien nos interesa conocer sus recomendados",
    "output": "Imprime un solo entero, la cantidad de usuarios recomendados al usuario x. Tomando en cuenta que, si un usuario ya es amigo de otro, este no aparece en su lista de recomendados.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 10548
  },
  {
    "title": "Calculadora primitiva",
    "url": "https://omegaup.com/arena/problem/Calculadora-primitiva",
    "history": "Tenemos a disposicio\u0301n una calculadora que so\u0301lo puede realizar las siguientes 3 operaciones dado un nu\u0301mero n: multiplicar por 2, multiplicar por 3, o sumar 1. Dado un entero positivo n, debemos encontrar el nu\u0301mero mi\u0301nimo de operaciones necesarias para obtener el nu\u0301mero n a partir del nu\u0301mero 1.",
    "input": "Un nu\u0301mero 1 \u2264 n \u2264 500.",
    "output": "El nu\u0301mero mi\u0301nimo de operaciones necesarias para obtener el nu\u0301mero n a partir del nu\u0301mero 1| | input1| | output0| | descriptionNo es necesaria ninguna operacio\u0301n para obtener 1. | | input6| | output2| | descriptionSe aplican 2 operaciones: 6 \u00f7 3 = 2 y despue\u0301s 2 \u00f7 2 = 1. | | end",
    "note": "",
    "topics": [
      "divide and conquer",
      "shortest paths",
      "dp",
      "trees",
      "graphs"
    ],
    "id": 10219
  },
  {
    "title": "Reducci\u00f3n n\u00famerica",
    "url": "https://omegaup.com/arena/problem/Buscando-Cuadrados",
    "history": "# ProblemaEn este problema debes indicar la cantidad mi\u0301nima de di\u0301gitos que deben eliminarse a partir de un entero n para volverlo un cuadrado perfecto, siempre tomando en cuenta que no se puede eliminar un di\u0301gito si al numero resultante le quedan ceros a la izquierda. ( Por ejemplo, eliminar el digito \u201c1\u201d del numero 104 no seria valido) . \u2014\u2014\u2014-",
    "input": "En la primera y u\u0301nica linea, un nu\u0301mero entero n ( 1 \u2a7d n \u2a7d 10^ 9) - el numero cuyos digitos queremos eliminar. Se garantiza que al comienzo n jamas tendra\u0301 ceros a la izquierda.",
    "output": "Un unico entero - la cantidad mi\u0301nima de di\u0301gitos que deben eliminarse a partir de n para obtener un numero que cumpla con las condiciones especificadas anteriormente. En caso de no ser posible obtener dicho nu\u0301mero, se debe imprimir < kbd> - 1< / kbd> . \u2014\u2014\u2014- # Ejemplo: | | input86541| | output2| | description( 8 6 5 4 1) \u2192 841 y 29^ 2= 841. | | end\u2014\u2014\u2014- # NotaEn el primer y unico caso de ejemplo, podemos eliminar los digitos \u201c6\u201d y \u201c5\u201d para obtener el numero 841 y debido a que este es el cuadrado perfecto de 29, la respuesta seri\u0301a 2. Toma en cuenta que tambien podri\u0301amos eliminar todos los digitos a excepcio\u0301n del \u201c1\u201d para obtener un cuadrado perfecto, sin embargo, esta no seria la manera mas o\u0301ptima de hacerlo ya que deberi\u0301amos eliminar 4 digitos. \u2014\u2014\u2014- # Subtasks- Para un 13. 77% de los puntos, todos los digitos en n sera\u0301n iguales. - Para un 86. 23% de los puntos, no hay consideraciones adicionales. \u2014\u2014\u2014- < details> < summary> Reto Adicional< / summary> Con base en los envios de la comunidad, aparentemente existen * * multiples* * soluciones para este problema. \u00bfSerias capaz de obtener una respuesta cuyo tiempo total sea \u2a7d 0. 10s? < / details>",
    "note": "",
    "topics": [
      "implementation",
      "number theory",
      "shortest paths"
    ],
    "id": 10197
  },
  {
    "title": "Q*bert",
    "url": "https://omegaup.com/arena/problem/Qbert",
    "history": "* Q # 42; bert* es un popular videojuego de los 80' s en el que tu personaje se encuentra en una pira\u0301mide de bloques y su objetivo es cambiar el color de los bloques aterrizando sobre ellos tras un salto. En este problema, los colores se representan por enteros y cada vez que Q # 42; bert aterriza sobre un bloque de color C, su color cambia a C- 1 ( excepto si C = 0, en cuyo caso el bloque se queda como esta\u0301) . Q # 42; bert so\u0301lo puede dar saltos en diagonal a celdas contiguas y su color favorito es el 0. \u00bfCua\u0301l es la menor cantidad de saltos que Q # 42; bert necesita dar para pintar toda la pira\u0301mide de 0? Q # 42; bert siempre comienza en la cima de la pira\u0301mide, pero su aparicio\u0301n inicial no cuenta como aterrizaje. ! [ qbert] [ 1]",
    "input": "Un entero N seguido de N filas, donde la i- e\u0301sima fila tiene i enteros que denotan los colores de los bloques de la fila. Puedes suponer que 2 \u2264 N \u2264 5, que todos los colores esta\u0301n entre 0 y 3 y que la suma de los colores de la piramide es menor a 25.",
    "output": "Un entero que sea la menor cantidad de saltos que Q # 42; bert necesita dar para pintar toda la pira\u0301mide de color 0.",
    "note": "",
    "topics": [
      "implementation",
      "shortest paths"
    ],
    "id": 10159
  },
  {
    "title": "Exponenciaci\u00f3n con multiplicaciones y divisiones",
    "url": "https://omegaup.com/arena/problem/Exponenciacion-con-multiplicacio",
    "history": "Escribe un programa que calcule en cua\u0301ntos pasos puedes calcular la potencia entera A^ B, si comienzas en X = 1 y so\u0301lo tienes disponibles las siguientes tres operaciones: multiplicar X por A, dividir X entre A y elevar X al cuadrado. En los tres casos, el antiguo valor de X se pierde y so\u0301lo puede usarse el nuevo valor.",
    "input": "Un entero B. Puedes suponer que 0 \u2264 B \u2264 20.",
    "output": "La menor cantidad de pasos que necesitas para calcular A^ B segu\u0301n lo descrito.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 8524
  },
  {
    "title": "El precio de cruzar",
    "url": "https://omegaup.com/arena/problem/El-precio-de-cruzar",
    "history": "En el programa de televisio\u0301n \" El precio de cruzar\" se tiene una cuadri\u0301cula en la que los participantes pueden brincar un cuadro a la izquierda, a la derecha, hacia arriba o hacia abajo. En cada cuadro de la cuadri\u0301cula hay escrito un nu\u0301mero del 0 al 9 que representa el precio de pisar el cuadro, como se muestra en la figura. El objetivo es determinar el costo mi\u0301nimo que se puede obtener de atravesar la cuadri\u0301cula desde el cuadro superior izquierdo hasta el inferior derecho de un laberinto de N\u00d7 M cuadros, donde 1\u2264 N, M \u2264 999. * ( Nota: La solucio\u0301n del dibujo es 24) * ! [ enter image description here] [ 1]",
    "input": "La entrada consiste en una li\u0301nea conteniendo el nu\u0301mero de filas N, otra li\u0301nea conteniendo el nu\u0301mero de columnas M, y N li\u0301neas, una por fila del laberinto, conteniendo los M valores de los cuadro de esa fila, separados por espacios.",
    "output": "Una linea que contenga el valor mi\u0301nimo para atravesar la cuadri\u0301cula.",
    "note": "",
    "topics": [
      "shortest paths",
      "trees"
    ],
    "id": 8428
  },
  {
    "title": "Escuela normal",
    "url": "https://omegaup.com/arena/problem/Escuela-normal",
    "history": "Santy y Joel se cansaron de inventar problemas de cosas ficticias e inexistentes, se dieron cuenta que es ma\u0301s fa\u0301cil crear problemas con cosas de la vida cotidiana. Asi\u0301 que un di\u0301a * normal* , Santy andaba en su escuela * normal* ; y como toda persona solicitada * normal* Santy necesita ir a varias partes de su escuela. La escuela se representa como una matriz de N \u00d7 M. Dentro de la escuela existen paredes * normales* y como toda persona * normal* Santy no puede pasar por medio de la paredes. Asi\u0301 que Santy se puede mover desde la posicio\u0301n en la que esta hacia arriba, abajo, derecha o izquierda siempre y cuando no haya paredes, como cualquier persona. Sin embargo, como en toda escuela, hay portales * normales* por toda la escuela. Cada portal tiene un color y solo existen a lo ma\u0301s 2 portales del mismo color. Santy puede entrar a cualquier portal y sale por otro del mismo color ( si existe) . El mapa esta compuesto de N\u00d7 M nu\u0301meros en donde: * Las paredes se representan de nu\u0301meros - 1* Cada color se representa como un nu\u0301mero entero positivo A_ ij en el mapa. Santy empieza en la esquina superior izquierda. Y requiere ir a Q lugares. Cada vez que va algu\u0301n lugar, este regresa a su posicio\u0301n inicial y desde alli\u0301 va al siguiente lugar. El quiere saber el mi\u0301nimo nu\u0301mero de pasos que requiere para llegar a cada lugar que le pidan. ( Teletransportanse cuenta como un paso)",
    "input": "Dos enteros positivos N, M representando las dimensiones del mapa. En las siguientes N lineas, M enteros representando el mapa antes descrito. Un entero positivo Q representando el nu\u0301mero de lugares que Santy quiere visitar. Q pares de nu\u0301meros Y_ i, X_ i representando las coordenadas del lugar que requiere ir.",
    "output": "Q nu\u0301meros que dicen el mi\u0301nimo nu\u0301mero de pasos para llegar a la coordenada Q_ yx. Si no se puede llegar a dicha coordenada imprime \" - 1\" .",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 8399
  },
  {
    "title": "La guardia \u00f1o\u00f1Ovi",
    "url": "https://omegaup.com/arena/problem/La-guardia-nonOvi",
    "history": "Cuenta una leyenda que en una ciudad ma\u0301gica llamada Zurcarev, existen frutos sagrados con poderes especiales que te hacen muy inteligente, tambie\u0301n existe una red de monolitos con la capacidad de teletransportar personas desde un monolito a otro. En esta ciudad solo pueden entrar personas con habilidades especiales, se les conoce como la guardia n\u0303on\u0303Ovi y a la fecha la integran solo 4 miembros: Juli\u0301n, Suto, Chema y Jimmy, ellos necesitan consumir los frutos sagrados para mantenersu inteligencia, de otro modo la pierden y son expulsados de la guardia. Se sabe que Zurcarev es una ciudad rectangular de M filas por N columnas con varios monolitos distribuidos a trave\u0301s de ella. Aunque la guardia es muy poderosa no puede permanecer mucho tiempo dentro de la ciudadporque si lo hacen se convierten en monolitos, por lo tanto, para tomar un fruto sagrado deben entrar a la ciudad desde cualquier monolito y, moverse lo ma\u0301s ra\u0301pido posible usando la red de monolitos teletransportadoreshasta encontrar uno que este\u0301 lo ma\u0301s cercano posible a un fruto, despue\u0301s, deben caminar desde ese monolito hasta la ubicacio\u0301n del fruto. # ProblemaDado el mapa de Zurcarev, la guardia n\u0303on\u0303Ovi requiere tu ayuda para saber cua\u0301l es la mi\u0301nima cantidad de pasos que uno de sus integrantes debe caminar para tomar un fruto sagrado. Considera que: - Un monolito es una piedra ma\u0301gica capaz de teletransportarte a cualquier otro monolito sin costo alguno- Un integrante de la guardia puede ingresar a la ciudad desde la posicio\u0301n de cualquier monolito- Cuando un n\u0303on\u0303Ovi camina se puede desplazar hacia el norte, sur, este u oeste a partir de su ubicacio\u0301n- Dentro de la ciudad existen obsta\u0301culos infranqueables y se representan con un < strong> \" # \" < / strong> - Los monolitos teletransportadores se representan con una letra \" G\" - Los frutos se representan con un \" * \" - Las casillas por donde la guardia puede caminar se representa con un < strong> \" . \" < / strong> # Subtareas- Para un total de 50",
    "input": "En la primera li\u0301nea los enteros M, N separados por un espacio que denotan las filas y columnas de la ciudad, respectivamente. En cada una de las siguientes M filas, N caracteres \" . \" , \" * \" , \" # \" o \" G\" .",
    "output": "Un u\u0301nico entero que denota la cantidad mi\u0301nima de pasos que un integrante de la guardia debe caminar para llegar a un fruto sagrado. En caso de que no sea posible imprimir el mensaje < em> The guard is dead< / em> . # Ejemplos| | input4 4# . . * . . * * . # . . # # G. | | output nbsp; 2| | input5 6G. . . . # . . # . # # . . G. # G. . # . # # # . # * | | output nbsp; 3| | end# Li\u0301mites1\u2264 M, N \u2264 500",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 8118
  },
  {
    "title": "en el panteon",
    "url": "https://omegaup.com/arena/problem/en-el-panteon",
    "history": "# descripcionEs una tarde comun en Yanga y el conocido Atreuh bagaba como siempre por las calles cuando depronto recibio un fuerte golpe en la cabeza, sin darse cuenta de quien lo hizo cayo desmayado al suelo. Al pasar de unas horas Atreuh desperto en el panteon lleno de sangre y sin un rin\u0303on, el asustado y como ya era de noche trato de salir de alli logrando darse cuena que se encontraba en la justo en esquina superior izquierda del panteon y sabiendo que la salida esta ubicada en la esquina inferior derecha, e\u0301l decidio caminar hasta la salida recordando que en algunos lugares hay tumbas abiertas o lugares bloqueados por los que e\u0301l no podra pasar y como tu eres un buen amigo le diras el numero de tumbas que tiene el camino minimo desde su lugar hasta la salida. # problemaAyuda al buen Atreuh a salir vivo del panteon de Yanga, teniendo en cuenta que algunas veces el panteon estara bloquedo y de esta manera e\u0301l no tendra la suerte de salir.",
    "input": "Se te dara N y M que sera el taman\u0303o del panteonEn las siguientes N lineas habra M caracteres donde ' . ' seran los lugares por los que se pueden pasar y ' * ' las tumbas bloqueadas.",
    "output": "El numero total de pasos que tiene el camino mas corto para llegar a la salida. En caso de no poder salir del panteon debes imprimir \" D. E. P. : ( \" sin comillas. | | input5 5. . . . . . . * . . * . * . . * * * . . * * * * . | | output8| | end| | input5 5. . . * * . . . * * * * . * * . . * . . . . . . . | | outputD. E. P. : ( | | end# limitesTU MISMO TE PONES TUS LIMITES, SUPERATE.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 6994
  },
  {
    "title": "MrK07. TEORIA DE N\u00daMEROS vs BUBBLESORT PARA TODOS",
    "url": "https://omegaup.com/arena/problem/MrKrista-vs-Teoria-de-Numeros",
    "history": "# DescripcionExiste un viejo dicho que dicta que existe una fo\u0301rmula y una manera iterativa para solucionar un problema. Hoy el problema dicta de la siguiente manera: \" Debes encontrar el camino ma\u0301s corto para llegar de un nu\u0301mero x a un nu\u0301mero y, tomando en cuenta que las u\u0301nicas modificaciones a los nu\u0301meros es sumar un nu\u0301mero primo, llame\u0301mosle a que sea menoro iguala un para\u0301metro n, en resumen: \" n: So\u0301lo puedes utilizar los nu\u0301meros primos menores- iguales a n ( nombremoslo \" a\" ) . ( Siempre y cuando a es primo y a< = n) . x: Nu\u0301mero inicial. y: Nu\u0301mero al cual se desea llegarNOTA: Esto es un concurso de velocidad, por lo tanto, debes escribir la manera mas cortade llegar de x a y. # ProblemaDados tres nu\u0301meros: n, x y y, determina lo siguiente: Si se puede llegar del nu\u0301mero x al nu\u0301mero y con las sumas permitidas: Imprime \" Bubblesort para todos : D\" , seguido de un salto de li\u0301nea. Tras esto, imprime el nu\u0301mero de sumas que realizaste, luego otro salto de li\u0301neay por u\u0301ltimo, los nu\u0301meros por los cuales pasaste para llegar de x a y. Si no se puede resolver el problema, imprime la famosa frase de MrKrista: \" Matematicamente tenemos oportunidad Sr Alemova\" .",
    "input": "Tres nu\u0301meros: n, x, y.",
    "output": "Las especificaciones anteriormente mencionadas. | | input10 2 8| | outputBubblesort para todos : D22 5 8| | end| | input10 2 3| | outputMatematicamente tenemos oportunidad Sr Alemova| | end# Limites10< = n< = 10000002< = x, y< = 3000000",
    "note": "",
    "topics": [
      "shortest paths",
      "number theory"
    ],
    "id": 6985
  },
  {
    "title": "El examen \u00f3ptimo",
    "url": "https://omegaup.com/arena/problem/itp18-examen",
    "history": "Has entrenado tanto para el * * 1er Concurso de Programacio\u0301n del Instituto Tecnolo\u0301gico de Pachuca* * que al ver cualquier problema nuevo puedes estimar exa\u0301ctamente los minutos que te tomara\u0301 resolverlo. El concurso empieza y: - Lees los problemas- Estimas el tiempo que te tomara\u0301 resolver cada problema- Ves cuantos puntos vale cada problemaCon esta informacio\u0301n y sabiendo que quedan * * 3 horas* * de concurso escribe un programa que te diga la ma\u0301xima cantidad de puntos que puedes obtener.",
    "input": "- Un entero, N, indicando la cantidad de problemas- N renglones con datos sobre los problemas del concurso. Cada renglo\u0301n seguira\u0301 el formato ` M P` donde: - M cantidad de minutos que te tomara\u0301 resolver el problema- P cantidad de puntos que obtienes por resolver el problema",
    "output": "Imprime la ma\u0301xima cantidad de puntos que puedes obtener si utilizas las 3 horas de forma o\u0301ptima. # Ejemplos| | input4180 25060 10060 10060 100| | output300| | descriptionTe conviene resolver los tres problemas de una hora a pesar de que den individualmente menos puntos ( 100 puntos cada uno) que resolver el problema que te toma 180 minutos que vale ma\u0301s ( 250 puntos) | | input3181 1000182 1000183 1000| | output0| | descriptionNo tienes tiempo suficiente para resolver ningu\u0301n problema, tu puntaje quedara\u0301 en 0| | end",
    "note": "- 1 \u2264 N \u2264 16- 1 \u2264 M, P \u2264 1000",
    "topics": [
      "dfs and similar",
      "shortest paths",
      "dp"
    ],
    "id": 6862
  },
  {
    "title": "La llave :)",
    "url": "https://omegaup.com/arena/problem/ninguno",
    "history": "A un alumno del CECyTE 05 se le perdio la llave en algun lugar del hotel en el que se quedan a dormir para poder asistir a los entrenamientos de la OMI, el esta muy preocupado de que sus compan\u0303eros se molesten con el, por lo que te pidio que le ayudaras a encontrar la llave de la forma en la que pudieras. El es muy especial y tambien te pidio que le dijeras la suma del camino minimo de su posicion a la llave y a todas las posibles llaves ( incluso la llave) . NOTA: con la suma de caminos se refiere a la suma de la posicion del alumno a todas las posibles llaves no importa las veces que pase por el mismo lugar.",
    "input": "resiviras un mapa del hotel de taman\u0303o NxM donde ' # ' representa una pared, ' y' la posicion donde se encuentra el alumno del CECyTE, ' L' donde esta la llave, ' * ' donde esta una posible llave y ' . ' que significa pasillo libre.",
    "output": "En caso de que pueda encontrar la llave: Imprime \" SI\" sin comillas, despue\u0301s un salto de linea e imprime la distancia mi\u0301nima de la posicio\u0301n del alumno hasta la llave, despue\u0301s un espacio en blanco y la suma a todas las posibles llaves como se explico arriba. En caso de que no pueda encontrar la llave solo imprime \" NO\" sin comillas.",
    "note": "",
    "topics": [
      "implementation",
      "shortest paths"
    ],
    "id": 6653
  },
  {
    "title": "Vaciar vasos de precipitados",
    "url": "https://omegaup.com/arena/problem/Vaciar-vasos-de-precipitados",
    "history": "Tenemos tres vasos de precipitados, todos ellos con el mismo volumen V y con cierta cantidad N de marcas indicando el volumen que se puede medir desde el fondo del vaso hasta la marca. Al principio, el vaso 0 esta\u0301 lleno de un li\u0301quido muy valioso y los vasos 1 y 2 esta\u0301n vaci\u0301os. Se desea saber el mi\u0301nimo nu\u0301mero P de pasos necesarios para separar W unidades de este li\u0301quido en cualquiera de los tres vasos. La operacio\u0301n permitida a cada paso es la de vertir el li\u0301quido de un vaso a otro hasta que el nivel del li\u0301quido coincida con una marca en cualquiera de los dos vasos o hasta que cualquiera de los dos vasos quede vaci\u0301o o lleno. Como el li\u0301quido es muy valioso, no se permite perderlo en el proceso.",
    "input": "Tres enteros V, W y N seguidos de una secuencia de N enteros que denotan las posiciones de las marcas. Puedes suponer que 0 < W < V \u2264 1000, que 0 \u2264 N \u2264 V - 1 y que las marcas esta\u0301n en posiciones distintas en el rango de 1 a V - 1.",
    "output": "Cuando existe solucio\u0301n, imprimir el entero P seguido de una secuencia de P tripletas de enteros A, B y C donde A es el vaso de donde se vierte li\u0301quido al vaso B y C es la cantidad de li\u0301quido que se transfiere en ese paso. Si hay varias secuencias va\u0301lidas, puede imprimirse cualquiera de ellas. Cuando no existe solucio\u0301n, imprimir el entero - 1.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 6638
  },
  {
    "title": "Oirotator el planeta",
    "url": "https://omegaup.com/arena/problem/Oirotator-el-planeta",
    "history": "Oirotator es un planeta muy muy peculiar. Ya que si una extensio\u0301n de terreno se representa como una cuadricula de N por M, cada casilla de la cuadricula tendra\u0301 de 1 a 4 flechas que apuntaran ya sea al Norte, Sur, Este u Oeste. Esto es asi\u0301, ya que desde cualquier casilla del terreno solo podra\u0301s trasladarte a una de sus cuatro casillas adyacentes si y solo si existe una flecha donde estas que este apuntando a la casilla que deseas ir. Sin embargo, al moverte de una casilla a otra, todas las casillas rotaran sus flechas 90 grados en sentido de las manecillas del reloj. * * ( Ver caso de ejemplo) * * # ProblemaDada una extensio\u0301n de terreno de Oirotator tu tarea sera\u0301 calcular la menor cantidad de movimientos que son necesarios para llegar de la esquina superior izquierda de la cuadricula a la esquina inferior derecha, o bien, determinar si esto es imposible.",
    "input": "En la primera li\u0301nea dos entero N y M, el numero de filas y columnas de la cuadricula respectivamente. En las siguientes ( N* M) - 1 li\u0301neas la descripcio\u0301n de las flechas que tiene cada casilla. La descripcio\u0301n consta de 1 a 4 letras sin espacios en blanco; una N significa que hay una flecha apuntando al norte, una S significa que hay una flecha apuntando al sur, una E significa que hay una flecha apuntando al este y una W significa que hay una flecha apuntando al oeste. El orden de la descripcio\u0301n de las casillas es el siguiente: ( 1, 1) , ( 1, 2) , ( 1, 3) , . . . , ( 1, M) , ( 2, 1) , . . . , ( N, M- 1) Nota que la configuracio\u0301n de la casilla ( N, M) no se da ya que esta es el final del recorrido.",
    "output": "En caso de ser posible ir de la casilla superior izquierda a la inferior derecha un u\u0301nico entero representando la menor cantidad de movimientos para lograrlo, de lo contrario imprimir * * \" # OirotatorSinFlechas\" * * sin las comillas.",
    "note": "",
    "topics": [
      "shortest paths",
      "dp"
    ],
    "id": 5838
  },
  {
    "title": "Fernando y el Almacen III",
    "url": "https://omegaup.com/arena/problem/Fernando-y-el-Almacen-III",
    "history": "Fernando sigue trabajando en el almacen. Esta vez le pidieron K piezas. Desgraciadamente no hay una caja con K piezas. Sola hay N cajas con C_ i piezas. Determina si es posible traer exactamente K piezas si tomas varias cajas",
    "input": "Un entero N seguido de K. En la sigueinte linea, N enteros representando C_ i.",
    "output": "Imprime un entero representando la cantidad de cajas necesarias seguidas por el indice de cada caja. Si hay varias cualquier solucio\u0301n sera\u0301 valida. Si no se puede imprime - 1.",
    "note": "",
    "topics": [
      "brute force",
      "dp",
      "shortest paths"
    ],
    "id": 5414
  },
  {
    "title": "El rat\u00f3n que salta chueco",
    "url": "https://omegaup.com/arena/problem/El-raton-que-salta-chueco",
    "history": "Un rato\u0301n tiene lastimada su patita izquierda pero debe llegar a su madriguera lo ma\u0301s ra\u0301pido posible antes de que el gato aparezca. La casa en la que viven los ratones y el gato es de dimensiones M \u00d7 N, el rato\u0301n se encuentra actualmente en la posicio\u0301n ( R_ i, R_ j) y la madriguera esta\u0301 en la posicio\u0301n ( H_ i, H_ j) . Como al rato\u0301n le cuesta trabajo caminar, so\u0301lo puede ejecutar cierto tipo de salto que lo desplaza simulta\u0301neamente F unidades al frente y D unidades a la derecha. El rato\u0301n debe evitar chocar contra las paredes de la casa pero puede orientarse en cualquiera de las cuatro direcciones cardinales antes de dar cada salto. Escribe un programa que calcule cua\u0301l es la cantidad mi\u0301nima de saltos que el rato\u0301n necesita para llegar a la madriguera.",
    "input": "Los ocho enteros M, N, F, D, R_ i, R_ j, H_ i, H_ j. Puedes suponer que 1 \u2264 M, N, F, D \u2264 1000, 0 \u2264 R_ i, H_ i < M y 0 \u2264 R_ j, H_ j < N.",
    "output": "Un entero que sea la mi\u0301nimo nu\u0301mero de saltos que necesita dar el rato\u0301n para llegar a la madriguera o el entero - 1 si no existe solucio\u0301n.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 5287
  },
  {
    "title": "m -> n",
    "url": "https://omegaup.com/arena/problem/m---n",
    "history": "Nieves esta\u0301 jugando un juego. Primero escribe un nu\u0301mero n en elpizarro\u0301n. Si k esta\u0301 escrito en el pizarro\u0301n, puede borrarlo y escribirk- 1 o escribir 2k. Nieves quiere llegar a m empezando desde n, pero quiere borrar elmenor numero de veces el pizarro\u0301n. Ayudalo.",
    "input": "Primera linea: m, n ( 1\u2264 m, n \u2264 10^ 4)",
    "output": "En la primera linea el menor nu\u0301mero de pasos.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 5001
  },
  {
    "title": "Dungeon Lvl.1",
    "url": "https://omegaup.com/arena/problem/Dungeon-Lvl1",
    "history": "Acabas de adquirir un nuevo videojuego, se llama Dungeon. En la trama un hechicero te encerro\u0301 en un calabozo por coquetear con su hija en la fiesta de la aldea. Ahora debes escapar para volver con tu amada ( aunque so\u0301lo la hayas conocido por 10 minutos) . Emocionado por comenzar tu nueva aventura, insertas el disquete en la computadora y te dispones a jugar. Como en todo juego, comienzas en el nivel uno ( pues en los juegos para machos no hay tutoriales) . Tu personaje aparece en el primer nivel de calabozo, una cuadri\u0301cula de NxM sobre la que puedes moverte solo hacia las casillas adyacentes ( arriba, abajo, derecha, izquierda) , para pasar al siguiente nivel debes encontrar la puerta que te llevara\u0301 a la siguiente sala. Despue\u0301s de unos minutos de juego consigues encontrar la puerta, so\u0301lo para enterarte que necesitas una llave para abrirla. Dada la configuracio\u0301n del calabozo, la localizacio\u0301n de la llave y la localizacio\u0301n de la puerta. Debes imprimir el menor nu\u0301mero de pasos que debes moverte para superar el nivel.",
    "input": "La primera linea consiste en dos nu\u0301meros N y M. Las siguientes N lineas contendra\u0301n M caracteres, cada uno correspondiente a una casilla del calabozo. Los caracteres pueden ser: Un punto \u2018. \u2019 : Representa que la casilla esta\u0301 libre y puedes pasar. Un asterisco \u2018* \u2019 : Representa que hay una pared bloqueando el camino. Una P minu\u0301scula \u2018p\u2019 : Representa la puerta. Una L minu\u0301scula \u2018l\u2019 : Representa la llave. Una C minu\u0301scula \u2018c\u2019 : Representa la posicio\u0301n inicial de tu personaje.",
    "output": "Un nu\u0301mero con la cantidad de movimientos mi\u0301nimos necesarios para superar el nivel. En caso de no ser posible, imprimir - 1",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 4991
  },
  {
    "title": "Arboles Binarios Ineficientes",
    "url": "https://omegaup.com/arena/problem/Arboles-Binarios-Ineficientes",
    "history": "Todo buen programador sabe que una de las formas ma\u0301s ineficientes de implementar un a\u0301rbol binario es utilizando un array indexado a 1, donde el dato en la posicio\u0301n n es el padre de los datos en las posicio\u0301nes 2* n el izquierdo y ( 2* n) + 1 el derecho. Por ejemlo, el siguiente a\u0301rbol binario corresponde a el arreglo [ 1, 2, 3, 4, 5, 6, 7] 1/ 3/ / 5 6 7",
    "input": "La primera linea contiene un entero T que sera\u0301 la cantidad de nodos en el a\u0301rbol. En la segunda linea se dara\u0301 un a\u0301rbol binario en forma de array con T nodosEn la tercera linea un nu\u0301mero k\u2264 T",
    "output": "Debes imprimir, en forma de arreglo, el sub- a\u0301rbol cuya rai\u0301z es el nodo con valor k del a\u0301rbol",
    "note": "",
    "topics": [
      "shortest paths",
      "data structures"
    ],
    "id": 4958
  },
  {
    "title": "Golf",
    "url": "https://omegaup.com/arena/problem/Preselectivo01",
    "history": "Roberta la robot juega un juego perfecto del golf. Cuando golpea la pelota de golf que siempre va directamente hacia el agujero en el green, y ella siempre golpea exactamente la distancia que se especifica para cada palo. Cada una de estas acciones se conoce como un stroke, y el objetivo del golf es golpear la pelota desde el tee del hoyo en el menor nu\u0301mero de golpes. Roberta necesita un programa para seleccionar la mejor combinacio\u0301n de los palos que debe ocupar para llegar al agujero en el menor nu\u0301mero de golpes. Ella tambie\u0301n tiene que decidir si la tarea es imposible, en cuyo caso ella gentilmente reconoce la pe\u0301rdida. Roberta puede transportar hasta 100 palos, y la distancia total desde el tee hasta el agujero no excedera\u0301 1, 000, 000 metros.",
    "input": "La primera li\u0301nea de entrada da la distancia desde el tee hasta el agujero ( un nu\u0301mero entero de metros entre 1 y 1, 000, 000) seguido de un nu\u0301mero que indica el nu\u0301mero de palos que puede llevar ( un nu\u0301mero entre 1 y 100) . Para cada palo, una li\u0301nea que indica la distancia en metros que avanza la bola si se golpea con el i- e\u0301simo palo ( un nu\u0301mero entero entre 1 y 100) . No hay dos palos que cubran la misma distancia.",
    "output": "Si Roberta puede llegar al agujero sin pasarse imprime la mi\u0301nima cantidad de golpes necesarios para llegar. En caso de no poder imprimir \" imposible\" . | | input100 333661| | output3| | end",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 3468
  },
  {
    "title": "Laberinto salvajemente peligroso",
    "url": "https://omegaup.com/arena/problem/lsp",
    "history": "Seguramente ya sabes co\u0301mo encontrar el camino ma\u0301s corto para escapar de un laberinto, pero lamentablemente esta vez tu misio\u0301n es mucho ma\u0301s peligrosa pues ciertos lugares de e\u0301ste esta\u0301nocupados por lobos que intentara\u0301n comerte. Como esta\u0301s en forma, crees poder enfrentarte con L lobos pero probablemente el lobo L + 1 ya sea demasiado para ti. Tu labor sera\u0301 encontrar la ruta ma\u0301s corta para escapar del laberinto evitando enfrentarte con ma\u0301s de L lobos durante tu recorrido.",
    "input": "El valor del entero L seguido de un entero N y de un tablero de N \u00d7 N caracteres. Una E y una S representan la entrada y la salida del laberinto respectivamente mientras que un # representa un muro, un * representa un lobo y un . la ausencia de obsta\u0301culos. Puedes suponer que L ge; 0, 2 le; N le; 100 y que existira\u0301n exactamente una entrada y una salida.",
    "output": "Un entero P que sea el menor nu\u0301mero de pasos usados para salir del laberinto sin enfrentar ma\u0301s de L lobos o - 1 si no existe solucio\u0301n.",
    "note": "",
    "topics": [
      "strings",
      "shortest paths"
    ],
    "id": 2816
  },
  {
    "title": "La Celestina",
    "url": "https://omegaup.com/arena/problem/La-Celestina",
    "history": "El pescador Luis sale de su casa a las 6 de la man\u0303ana para limpiar su lancha La Celestina antes de salir a pescar. Sin embargo, la tarde anterior hubo una lluvia muy fuerte, y el camino hacia la lancha esta\u0301 muy enlodado ( al igual que la lancha) . El pescador Luis inicia en el punto ( 0, 0) en el plano y se dirige hacia su lancha ubicada en la casilla ( X, Y) ( - 500 < = X < = 500; - 500 < = Y < = 500) . E\u0301l puede ver todas los N ( 1 < = N < = 10, 000) charcos de lodo, localizados en los puntos ( A_ i, B_ i) ( - 500 < = A_ i < = 500; - 500 < = B_ i < = 500) del campo. Cada charco ocupa so\u0301lo el punto donde esta\u0301. El pescador Luis acaba de comprar un nuevo par de botas y no quiere ensuciarlas pisando un charco, pero tambie\u0301n quiere llegar a La Celestina lo ma\u0301s ra\u0301pido posible. El esta\u0301 retrasado, porque tuvo que contar todos los charcos. Si el pescador Luis so\u0301lo puede moverse paralelo hacia los lados y girar en puntos con coordenadas enteras \u00bfCua\u0301l es la distancia ma\u0301s corta que debe viajar para llegar a La Celestina? Siempre habra\u0301 al menos un camino sin lodo por el cual el pescador Luis puede llegar a La Celestina.",
    "input": "- Li\u0301nea 1: Tres enteros separados por un espacio X, Y, y N. - Li\u0301nea 2. . N+ 1: Li\u0301nea i+ 1 contiene dos enteros separados por un espacio: A_ i y B_ i",
    "output": "La distancia mi\u0301nima que debe viajar el pescador Luis para llegar a La Celestina sin pisar lodo.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 2631
  },
  {
    "title": "Colosus (Laberinto)",
    "url": "https://omegaup.com/arena/problem/colosus-Laberinto",
    "history": "En este problema tu tomas el papel de el gran he\u0301roe Colossus tiene la misio\u0301n de rescatar a la princesa omitilda de un laberinto, pero el maligno pachus quiere matar a la princesa. Lo u\u0301nico con lo que cuentas es con el mapa del laberinto y el tiempo en el que pachus va a llegar a la princesa, por lo que tu tienes que llegar en el menor tiempo posible a ella. El mapa consta de una cuadricula la cual tiene una ' X' en el lugar donde no puedes pasar Una ' C' donde tu\u0301 te encuentras al principio, y una ' O' donde se encuentra la hermosa omitilda y una ' L' en aquellos lugares donde el campo este libre y puedas pasar. # ProblemaTu tarea consiste en escribir un programa que determine el menor tiempo en el que puedes llegar a rescatar a tu princesa tomando en cuenta que tu te mueves a una velocidad de un cuadro por seg. En caso de que no puedas llegar a salvarla escribira\u0301s en la pantalla un - 1 en el caso contrario escribira\u0301s el tiempo en el que llegaste a ella. en caso de llegar al mismo tiempo considera que la princesa se salva.",
    "input": "Tu programa debera\u0301 leer del teclado los siguientes datos: En la primera li\u0301nea los nu\u0301meros M, N y T separados por un espacio donde los primeros dos son las dimensiones del laberinto y T el tiempo en que pachus llegara con la princesa. Las siguientes M li\u0301neas contendra\u0301n N caracteres que representaran el mapa. Donde 3 < = M, N < = 1000.",
    "output": "Tu programa debera\u0301 escribir un solo nu\u0301mero que represente el tiempo en que llegaste o\u0301 - 1 en caso de que no hayas llegado. # Ejemplos| | input5 5 8XXXXXXCLLXXXXLXXOLLXXXXXX| | output6| | descriptionCaso # 1| | end# ConsideracionesTu programa debera\u0301 ejecutarse en un tiempo ma\u0301ximo de 1 segundo.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 2553
  },
  {
    "title": "La audiencia en el sal\u00f3n marciano",
    "url": "https://omegaup.com/arena/problem/audencia_salon_marciano",
    "history": "Dejah Toris fue capturada y tendra\u0301 su audiencia frente a Lorquas Ptomel. John Carter no confi\u0301a en la justicia de los marcianos verdes, por lo que quiere ir a defender a Dejah Toris en caso de ser necesario. La audiencia se realiza en un salo\u0301n rectangular de dimensiones M \u00d7 N y John Carter se encuentra en la esquina del salo\u0301n con coordenadas ( 1, 1) ; Dejah Toris se encuentra en el otro extremo del salo\u0301n, en la posicio\u0301n ( M, N) . Desafortunadamente John au\u0301n tiene problemas para caminar bajo la gravedad marciana, por lo que so\u0301lo puede dar saltos cortos de C unidades de distancia y saltos largos de L unidades de distancia. Dado que John so\u0301lo dara\u0301 saltos que sean paralelos a los lados del salo\u0301n, no puede salirse de e\u0301l y tampoco quiere chocar contra las paredes del mismo, ayuda a John a determinar el mi\u0301nimo nu\u0301mero de saltos necesarios para llegar a la posicio\u0301n de Dejah Toris.",
    "input": "Los cuatro enteros M, N, C, L. Puedes suponer que 1 le; M, N le; 1000 y 1 le; C lt; L le; min( M, N) .",
    "output": "Un entero que sea el mi\u0301nimo nu\u0301mero de saltos necesarios para llegar de ( 1, 1) a ( M, N) o - 1 si no es posible.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 2533
  },
  {
    "title": "Saltando hacia la pared",
    "url": "https://omegaup.com/arena/problem/Saltando-hacia-la-pared",
    "history": "Al abrir los ojos, John Carter se dio\u0301 cuenta de que estaba en Marte. A cierta distancia vio\u0301 la pared de una extran\u0303a construccio\u0301n y decidio\u0301 dirigirse hacia ella. Para su sorpresa, descubrio\u0301 que en la baja gravedad de Marte no podi\u0301a caminar, sino que al ma\u0301s mi\u0301nimo esfuerzo daba un salto. Pronto logro\u0301 dominar dos saltos: uno corto y uno largo. Ayu\u0301dale a encontrar la cantidad mi\u0301nima de saltos con los que puede llegar a la pared. Considera que John Carter puede dar los saltos para adelante o para atra\u0301s, pero que no quiere retroceder del punto donde inicio\u0301 ( pues no sabe a que\u0301 peligro podri\u0301a enfrentarse) ni tampoco puede dar un salto que lo lleve ma\u0301s alla\u0301 de la pared ( pues no quiere estrellarse contra la misma) .",
    "input": "Tres enteros C, L, D que representan las longitudes de los saltos corto y largo y la distancia a la pared desde el punto inicial, respectivamente. Puedes suponer que 1 le; C lt; L lt; D le; 10000 y que se puede recorrer exactamente la distancia pedida.",
    "output": "Un entero M que sea la mi\u0301nima cantidad de saltos requeridos seguidos de M enteros que describen el orden en que se deben dar los saltos.",
    "note": "",
    "topics": [
      "shortest paths",
      "implementation"
    ],
    "id": 2397
  },
  {
    "title": "Recorrido de un caballo",
    "url": "https://omegaup.com/arena/problem/Recorrido-de-un-caballo",
    "history": "Un amigo que esta haciendo un estudio sobre el recorrido de un caballo, quiere encontrar el numero minimo de movimientos para ir de una casilla A a una casilla B sobre un tablero de ajedrez. Te has ofrecido a ayudarle escribiendo un programa que dadas las coordenadas de las casillas origen y destino, encuentre el minimo numero de movimientos para llegar desde A hasta B. El caballo puede hacer ocho movimientos a partir de una casilla, de tal manera que se puede desplazar p casillas horizontales o veticales y q casillas de la misma forma. # Problema# Escribe un programa que dadas las dimensiones del tablero, las coordenadas de las casillas origen y destino, y los enteros p y q, encuentre el nu\u0301mero mi\u0301nimo de movimientos que debe hacer el caballo para llegar desde la casilla A hasta la casilla B.",
    "input": "4 51 1 5 32 1| | output",
    "output": "2| | end! [ tablero] ( e. png) Las filas se numeran desde 1 hasta M de arriba hacia abajo y las columnas de 1 a N de izquierda a derecha. # Limites# 1< = M, N< = 100",
    "note": "",
    "topics": [
      "shortest paths",
      "trees",
      "graphs"
    ],
    "id": 2319
  },
  {
    "title": "Reparaciones",
    "url": "https://omegaup.com/arena/problem/Reparaciones",
    "history": "El centro de la ciudad de Puebla, en Me\u0301xico, es un lugar muy sencillo de ubicarte. Contando u\u0301nicamente con el nombre de la calle, puedes saber que\u0301 sentido tiene la calle, y que\u0301 tan lejos esta\u0301s de tu destino. Esto es gracias a que las calles del centro forman una cuadri\u0301cula, y las calles esta\u0301n nombradas con nu\u0301meros y el sentido del tra\u0301fico. Asi\u0301, podemos encontrar nombres como Calle 6 Oriente. Tu amigo Jose\u0301 se va a mudar al centro de Puebla para trabajar en Innovacio\u0301n Tecnolo\u0301gica y Computacio\u0301n ( ITC) , y est \u0301 encantado con la idea de los nombres de las calles. Como lleva apenas dos semanas trabajando, au\u0301n no tiene recursos para comprar un automo\u0301vil, asi\u0301 que se desplaza a pie. El problema es que, debido a las recientes lluvias, algunos segmentos de calles tuvieron que ser cerrados por reparacio\u0301n. Afortunadamente, el ayuntamiento de Puebla publico\u0301 mapas con las calles cerradas por reparacio\u0301n. Jose\u0301 quiere saber cua\u0301nto ti\u0301empo le tomari\u0301a llegar desde su casa a su trabajo, buscando obviamente que utilice la ruta ma\u0301s corta para ello ( tiende a llegar tarde a veces, y su jefe amenazo\u0301 con despedirlo si volvi\u0301a a llegar tarde) . Asumiremos que Jose\u0301 camina a 50 m/ minuto y cada cuadra mide 50 metros.",
    "input": "La entrada consiste en un nu\u0301mero entero k ( 1 < = 20 < = k) que nos indican el nu\u0301mero de casos de prueba. La primera li\u0301nea de cada caso de prueba consta de seis nu\u0301meros enteros, separados por un espacio. El primer par de enteros nos indica las coordenadas x, y de la casa de tu amigo Jose\u0301, el segundo par de enteros las coordenadas de su trabajo, y el tercer par nos indican las dimensiones ( ancho y alto, 1 < = ancho, alto < = 100) del mapa proporcionado por el municipio de Puebla. Las siguientes alto li\u0301neas tienen ancho di\u0301gitos. Cada di\u0301gito representa una cuadra de la ciudad. Si el di\u0301gito es 1, la calle esta\u0301 siendo reparada. Si el di\u0301gito es 0, la calle esta\u0301 disponible para caminar sobre ella. La esquina superior izquierda se designa como el origen, y tiene coordenadas ( 0, 0) . Asume que siempre existe por lo menos un camino para llegar, y que tanto la casa como el trabajo de Jose\u0301 esta\u0301n en calles que no esta\u0301n siendo reparadas.",
    "output": "Para caso de prueba, debes desplegar la frase \" Caso k: m minutos. \" donde m es el tiempo en minutos que Jose\u0301 debe caminar para llegar de su casa al trabajo y k corresponde el nu\u0301mero de caso de prueba ( esta\u0301n numerados secuencialmente, empezando por 1) . | | input10 0 3 4 4 501000000100001100000| | outputCaso 1: 8 minutos. | | end",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 2177
  },
  {
    "title": "IOI 1994 - Los Relojes",
    "url": "https://omegaup.com/arena/problem/relojes",
    "history": "< center> ! [ Logo IOI 1994] ( logo94. png) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Los RelojesHay nueve relojes dispuestos en un arreglo de 3 \u00d7 3 ( ve\u0301ase la imagen de abajo) , etiquetados con letras de la A a la I. El objetivo de este problema es regresar las manecillas de todos los relojes para que marquen las 12 en punto en el menor nu\u0301mero de movimientos posibles. < center> ! [ Relojes] ( clocks. png) < / center> Hay nueve diferentes movimientos permitidos para modificar las manecillas de los relojes. Cada movimiento permitido es identificado por un nu\u0301mero del 1 al 9. Un movimiento afecta u\u0301nicamente a un determinado conjunto de relojes; cada reloj afectado mueve su manecilla 90\u00b0 ( grados) en sentido horario. A continuacio\u0301n se encuentra la descripcio\u0301n de los relojes afectados por los nueve movimientos: < center> ! [ Movimientos] ( moves. png) < / center> La siguiente figura muestra una posible solucio\u0301n para el caso presentado en la imagen de arriba, descrita por los nu\u0301meros de movimiento 5, 8, 4 y 9. Nota que esta no es la u\u0301nica solucio\u0301n para el caso de ejemplo. < center> ! [ Solucio\u0301n] ( solution. png) < / center>",
    "input": "Tres li\u0301neas con tres enteros cada una; cada entero representa la hora inicial de cada reloj, en el orden A, B, C, . . . , H, I. Los enteros tendra\u0301n un valor 3, 6, 9 o 12, representando la hora que marca un reloj.",
    "output": "Imprime en salida esta\u0301ndar una sola li\u0301nea con una lista de enteros separados por espacios: la secuencia de movimientos ma\u0301s corta que pone todos los relojes marcando las 12 en punto. En caso de que existan mu\u0301ltiples secuencias va\u0301lidas con longitud mi\u0301nima, cualquiera de ellas sera\u0301 aceptada. | | input9 9 126 6 66 3 6| | output5 8 4 9| | end",
    "note": "",
    "topics": [
      "shortest paths",
      "brute force"
    ],
    "id": 1580
  },
  {
    "title": "IOI 1996 - Cuadrados M\u00e1gicos",
    "url": "https://omegaup.com/arena/problem/Cuadrados-Magicos",
    "history": "< center> ! [ Logo IOI 1996] ( logo96. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Cuadrados Ma\u0301gicosDespue\u0301s del gran e\u0301xito del cubo ma\u0301gico, el Sr. Rubik ha inventado la versio\u0301n bidimensional del ya famoso juego, lo llamo\u0301 * cuadrado ma\u0301gico* . Este juego esta\u0301 compuesto por una cuadri\u0301cula de 8 cuadros de colores del mismo taman\u0303o, numerados del 1 al 8. A continuacio\u0301n se muestra la configuracio\u0301n inicial del * cuadrado ma\u0301gico* : < center> ! [ Cuadrado Ma\u0301gico] ( initial. png) < / center> Una configuracio\u0301n del * cuadrado ma\u0301gico* se denota por la secuencia de sus nu\u0301meros en orden de las manecillas del reloj, empezando por la esquina superior izquierda. Por ejemplo, la configuracio\u0301n inicial mostrada anteriormente se denotari\u0301a como 1 2 3 4 5 6 7 8. Es posible realizar tres movimientos en el * cuadrado ma\u0301gico* : * * * * Movimiento A* * * . Intercambiar la fila superior y la inferior. * * * * Movimiento B* * * . Recorrer circularmente las columnas a la derecha. * * * * Movimiento C* * * . Rotar los cuadros centrales en sentido de las manecillas del reloj. La siguiente figura muestra como funcionan estos movimientos partiendo de la configuracio\u0301n inicial: < center> ! [ Movimientos] ( transformations. png) < / center> El Sr. Rubik aseguro\u0301 que es posible alcanzar cualquier configuracio\u0301n desde la inicial usando los movimientos anteriores. Ayuda al Sr. Rubik a encontrar una secuencia mi\u0301nima de movimientos para llevar el * cuadrado ma\u0301gico* de la configuracio\u0301n inicial hasta alguna determinada configuracio\u0301n objetivo.",
    "input": "La u\u0301nica li\u0301nea de entrada contiene 8 enteros positivos, la descripcio\u0301n de la configuracio\u0301n objetivo.",
    "output": "En la primer li\u0301nea imprime un entero L, representando la longitud de la secuencia. Las siguientes L li\u0301neas debera\u0301n contener una secuencia mi\u0301nima de movimientos A, B o C que describan los pasos para alcanzar la configuracio\u0301n objetivo. Si existe ma\u0301s de una solucio\u0301n, cualquiera sera\u0301 aceptada. | | input8 7 6 5 4 3 2 1| | output1A| | end",
    "note": "",
    "topics": [
      "shortest paths",
      "implementation"
    ],
    "id": 1366
  },
  {
    "title": "Cool Editor",
    "url": "https://omegaup.com/arena/problem/Cool-Editor",
    "history": "# Cool EditorYou have just discovered a new text editor even better than Vim! This new editor is called Cool EDITor ( or simply shortened * cedit* ) and the thing that makes it so cool is the * base word* feature. The * base word* is a user defined word such that every time the user starts a new token in the text, * cedit* automatically writes the base word! This is pretty useful when you write long codes. For example, if you set the * base word* as * \u201cin\u201d* you can type the words * \u201cint\u201d* , * \u201cinclude\u201d* and * \u201cinline\u201d* faster only adding some other letters at the end of the token. Your typing skills are pretty bad and you only know how to use the backspace key ( to delete a letter) and all the English letters keys ( uppercase included) . So in the previous example, if you want to type the word * \u201cusing\u201d* you should delete all letters and start over again. Let\u2019s say that if you have two words W and V, the * edition distance* between them is the number of types you must do in order to transform word W into word V ( or viceversa) . For example, the * edition distance* between * \u201cusing\u201d* and * \u201cin\u201d* is 7, since you have to delete all the word and start over, but the distance between words * \u201cquery\u201d* and * \u201cqueue\u201d* is just 4 as follows: * \u201cquery\u201d* > * \u201cquer\u201d* > * \u201cque\u201d* > * \u201cqueu\u201d* > * \u201cqueue\u201d* . Since you want to type faster, you want to determine the best * base word* such that the * maximum edition distance* from the * base word* to any word you use to code is as small as possible. Note that the * base word* may not be in the given list of words you know.",
    "input": "The first line of input contains an integer n ( 1 \u2264 n \u2264 1, 000) , the number of words you use to code. Each of the following n lines contains a string with at most 1, 000 characters, representing a word you use to code. Each character is a lowercase or uppercase letter from the English alphabet.",
    "output": "Print an integer representing the * maximum edition distance* you got choosing the best * base word* possible. # Sample| | input3setqueryqueue| | output4| | end< br> In the sample input the best * base word* is * \u201cq\u201d* and the * edition distance* to each of the words is exactly 4.",
    "note": "",
    "topics": [
      "shortest paths",
      "dp",
      "string suffix structures",
      "data structures",
      "strings"
    ],
    "id": 1267
  },
  {
    "title": "Ranas",
    "url": "https://omegaup.com/arena/problem/Ranas",
    "history": "Un conocido juego de habilidad mental, consiste en un conjunto de N hojas ( nenu\u0301fares) distribuidos linealmente. En cada nenufar puede haber o no una rana. El juego consiste en hacer saltar una rana por encima de su vecina izquierda o derecha y caer en el nenufar que se encuentra inmediatamente despue\u0301s de la rana sobre la que se salta. Este movimiento se puede realizar siempre que el nenufar destino no este\u0301 ocupado por otra rana y elimina del juego a la rana sobre la que saltas. Una regla importante del juego dicta que una rana solo puede saltar a lo ma\u0301s a otra rana, es decir no puede hacerse un salto sobre dos ranas o ma\u0301s. Como las ranas son muy peresozas, no hacen saltos innecesarios, es decir, solo saltan cuando pueden eleminar a otra. Observa que en la imagen inicialmente se tienes tres ranas y un nenufar vaci\u0301o. En el primer movimiento la rana que esta\u0301 en la posicio\u0301n ma\u0301s a la izquierda, salta sobre su vecina de la derecha y la elimina del juego. En el segundo movimiento, la rana que esta\u0301 ma\u0301s a la derecha salta sobre su vecina izquierda y tambie\u0301n la elimina, quedando solo una rana. ! [ ejemplo] ( ranas. png) # Problema# Dada la descripcio\u0301n de los nenu\u0301fares que tienen o no una rana sobre ellos, desarrolla un programa que encuentre la menor cantidad de movimientos que deben hacerse para quedarte con el menor nu\u0301mero de ranas posible.",
    "input": "41 1 0 1| | output",
    "output": "1 2| | end# Li\u0301mites# 1 < = N < = 20",
    "note": "",
    "topics": [
      "shortest paths",
      "implementation"
    ],
    "id": 1096
  },
  {
    "title": "Acomodando una pila de hotcakes",
    "url": "https://omegaup.com/arena/problem/aph",
    "history": "Jose\u0301 es muy buen cocinero, pero es un poco desordenado. Por ejemplo, cuando hace hotcakes todos le quedan de taman\u0303os distintos. Como al final debe darle una buena presentacio\u0301n a todo lo que sirve, con frecuencia tiene que volver a acomodar el platillo que ha preparado. En el caso de los hotcakes e\u0301l desea que queden apilados de modo que los ma\u0301s pequen\u0303os queden encima de los ma\u0301s grandes. Como no va a usar las manos para acomodarlos ( uno imaginari\u0301a que las tiene limpias. . . seguro es porque los hotcakes esta\u0301n calientes) decide usar una pala de la siguiente manera: mete la pala abajo de cierta cantidad de hotcakes y de un solo movimiento los voltea de modo que quedan exactamente en el orden inverso de como estaban. Por ejemplo, si preparo\u0301 n = 7 hotcakes y sus taman\u0303os respectivos son 3, 1, 4, 2, 5, 7 y 6 ( de arriba hacia abajo en la pila) entonces puede meter la pala bajo los primeros 4 hotcakes y voltearlos, de modo que ahora quedan en el orden 2, 4, 1, 3, 5, 7 y 6. Escribe un programa que le ayude a Jose\u0301 a acomodar sus hotcakes en tan pocos movimientos m como sea posible. En caso de existir varias soluciones con la menor cantidad de movimientos, imprima la que sea de orden lexicogra\u0301fico menor.",
    "input": "Un nu\u0301mero entero n con 1 \u2264 n \u2264 10 seguido de n nu\u0301meros enteros distintos a_ 1, a_ 2, . . . , a_ n separados por espacios y en el intervalo de 1 a 100.",
    "output": "Un nu\u0301mero entero m \u2264 2n seguido de m enteros b_ 1, b_ 2, . . . , b_ m separados por espacios, indicando bajo cua\u0301ntos hotcakes se metio\u0301 la pala en cada movimiento.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 1014
  },
  {
    "title": "Intersecciones",
    "url": "https://omegaup.com/arena/problem/Intersecciones",
    "history": "Existe cierta ciudad donde el flujo del tra\u0301nsito es muy controlado, sobre todo en las intersecciones de calles y avenidas. Algunas intersecciones esta\u0301n prohibidas, otras solo te permiten moverte de norte o sur, otras al este u oeste y algunas te permiten ir en cualquier direccio\u0301n ( N, S, E, O) . Afortunadamente, cuentas con un mapa que indica a trave\u0301s de si\u0301mbolos, como puedes moverte. Especi\u0301ficamente existen 4 si\u0301mbolos. - * * + * * indica que te puedes mover en cualquier direccio\u0301n- * * - * * indica que te puedes mover u\u0301nicamente al este u oeste a partir de tu ubicacio\u0301n. - * * | * * indica que solo puedes moverte al norte o sur. - ' * ' indica que esta\u0301 prohibido pasar por esa interseccio\u0301n. # Problema# Tu tarea consiste en determinar el nu\u0301mero mi\u0301nimo de intersecciones por las que debes pasar para moverte desde la esquina noroeste de la ciudad, hasta la esquina sureste.",
    "input": "En las primeras dos li\u0301neas los nu\u0301meros R, C que denotan el numero de filas y columnas del mapa, respectivamente. En las siguientes R li\u0301neas, C caracteres que describen las intersecciones de la ciudad.",
    "output": "Una li\u0301nea con un nu\u0301mero que denota el mi\u0301nimo nu\u0301mero de intersecciones por las que tienes que pasar para llegar a la esquina inferior derecha de la ciudad desde la esquina superior izquierda. Imprime - 1 en caso de que no sea posible.",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 969
  },
  {
    "title": "Cubi-laberinto",
    "url": "https://omegaup.com/arena/problem/cubi-laberinto",
    "history": "# Cubi- laberintoEl agente Solid Nieves se encuentra atrapado en el laberinto tridimensional del malvado Dr Lira. El laberinto consiste de N x N x N cuartos. Para salir del laberinto, Solid Nieves tiene que encontrar el portal ma\u0301gico de salida. Sin embargo, tiene que hacerlo antes de que el Dr. Lira colapse el laberinto dentro de K segundos. Cada cuarto dentro del laberinto se puede conectar con otros cuartos en 6 direcciones diferentes ( arriba, abajo, norte, sur, este y oeste) . Es posible que las puertas del laberinto sean solamente de entrada o de salida, es decir, puede ser que no pueda regresar por una puerta por la que acabo de pasar. El agente Solid Nieves es muy a\u0301gil y puede moverse * * dos* * cuartos por segundo. # ProblemaEscribe un programa que le diga al agente Solid Nieves si podra\u0301 o no escapar a tiempo del laberinto. Y en caso de que pueda escapar, el tiempo que le tomari\u0301a.",
    "input": "La primera linea tendra\u0301 dos enteros N y K, que indican el taman\u0303o del laberinto y los segundos que tiene Solid Nieves para escapar. La segunda li\u0301nea tendra\u0301 una tercia x, y, z que indicara\u0301 la posicio\u0301n del portal de salida. El agente Solid Nieves * * siempre* * comienza en la casilla ( 0, 0, 0) , la cual es el cuarto ubicado * * en la esquina inferior izquierda* * del primer piso. Las siguientes n^ 3 li\u0301neas tendra\u0301n una cadena de caracteres que indica los cuartos hacia las que se puede mover Solid Nieves en el cuarto correspondiente. < ol> < li> N - > Norte ( direccio\u0301n + y) < / li> < li> O - > Oeste ( direccio\u0301n - x) < / li> < li> S - > Sur ( direccio\u0301n - y) < / li> < li> E - > Este ( direccio\u0301n + x) < / li> < li> U - > Arriba ( direccio\u0301n + z) < / li> < li> D - > Abajo ( direccio\u0301n - z) < / li> < / ol> Estos caracteres siempre sera\u0301n letras mayu\u0301sculas. El orden de los cuartos en la entrada incrementara\u0301 primero en el eje z, luego en y y por u\u0301ltimo en x. Para mayor claridad, si N es igual a 2, el orden de los cuartos en la entrada es el siguiente: ( 0, 0, 0) ( 0, 0, 1) ( 0, 1, 0) ( 0, 1, 1) ( 1, 0, 0) ( 1, 0, 1) ( 1, 1, 0) ( 1, 1, 1)",
    "output": "En caso de poder escapar, escribe el tiempo en el que el agente Solid Nieves puede escapar ( Si el nu\u0301mero es un entero, tienes que imprimir el nu\u0301mero sin puntos ( es decir si el resultado es 3. 000000 tienes que imprimir 3, en cambio si el resultado es 6. 500000 tienes que imprimir 6. 5) ) en caso de que no pueda hacerlo, escribe * * Impossibru* * .",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 265
  },
  {
    "title": "L-OMI98-Calculos",
    "url": "https://omegaup.com/arena/problem/OIEG2013SSA",
    "history": "Tienes una calculadora de 4 di\u0301gitos decimales que so\u0301lo puede realizar 2 operaciones: multiplicar por A y dividir entre B. Si el resultado de multiplicar un nu\u0301mero por A es un nu\u0301mero de ma\u0301s de 4 di\u0301gitos la calculadora da como resultado 1. Si el resultado de dividir entre B no es un nu\u0301mero entero, entonces la calculadora trunca el resultado entregando u\u0301nicamente la parte entera. Por ejemplo, si A = 2 y B = 3 entonces 20\u00d7 A = 40 y 20/ B = 6 mientras que 6, 000\u00d7 A = 1 y 6, 000/ B = 2, 000. La calculadora siempre comienza con el nu\u0301mero 1 y almacena el u\u0301ltimo resultado obtenido para utilizarlo en la siguiente operacio\u0301n. Escribe un programa que dados A y B encuentre el nu\u0301mero mi\u0301nimo de pasos que se tienen que realizar con la calculadora para obtener un nu\u0301mero N comenzando en el 1 y utilizando u\u0301nicamente las dos operaciones va\u0301lidas.",
    "input": "En la primera linea los enteros A, B y N.",
    "output": "En la primera linea la cantidad mi\u0301nima de pasos para obtener N.",
    "note": "",
    "topics": [
      "shortest paths",
      "implementation"
    ],
    "id": 191
  },
  {
    "title": "Curiosity",
    "url": "https://omegaup.com/arena/problem/curiosity",
    "history": "El robot de exploracio\u0301n Curiosity ha llegado por fin a Marte, la NASA te ha pedido que le ayudes a resolver un problema con su sistema de navegacio\u0301n. El lugar donde se encuentra Curiosity se representa como una cuadri\u0301cula de N x M NASA quiere mover su robot de la posicio\u0301n inicial X_ i, Y_ i a una posicio\u0301n final X_ f, Y_ fCuriosity solo tiene programados K diferentes tipos de movimientos los cuales esta\u0301n representados en una matriz de K elementos [ X_ 1, Y_ 1] . . . [ X_ k, Y_ k] donde cada par [ X, Y] representan el nu\u0301mero de cuadros que se mueve en cada uno de los ejes. En cada paso Curiosity puede ejecutar cualquiera de estos movimientos siempre y cuando no se salga de la cuadri\u0301cula. Tu tarea consiste en dada la posicio\u0301n inicial de Curiosity determinar cua\u0301l es el nu\u0301mero mi\u0301nimo de pasos que necesita ejecutar para llegar a su posicio\u0301n final.",
    "input": "En la primer li\u0301nea tendra\u0301s los nu\u0301meros N M y KEn la siguiente li\u0301nea tendra\u0301s dos enteros que representan la posicio\u0301n inicial de curiosity ( las coordenadas van desde 1, 1 hasta n, m) En la tercer li\u0301nea dos enteros que representan la posicio\u0301n final deseadaLas siguientes K li\u0301neas contienen un par de enteros que indican cada movimiento posible.",
    "output": "Un solo entero representando el nu\u0301mero mi\u0301nimo de pasos para llegar a la posicio\u0301n final, en caso de que no sea posible llegar debes imprimir - 1",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 116
  },
  {
    "title": "Llegando",
    "url": "https://omegaup.com/arena/problem/llegando",
    "history": "# Llegando en K movimientosEl COMI acaba de inventar un nuevo juego. El objetivo del juego es hacer llegar una ficha de la posicio\u0301n de salida a una posicio\u0301n destino en exactamente k movimientos. En total hay N posiciones numeradas del 1 al N. Adema\u0301s hay M caminos que unen, cada uno, un par de posiciones. El juego inicia siempre con la ficha en la posicio\u0301n 1. En cada turno, si la ficha esta\u0301 en la posicio\u0301n i y hay un camino entre la posicio\u0301n i y la j es posible mover la ficha de la posicio\u0301n i a la j. Si hay un camino entre la posicio\u0301n i y la j, ese camino puede usarse para moverse tanto de i a j como de j a i. Durante el juego, esta\u0301 permitido que la ficha pase por la misma posicio\u0301n cualquier cantidad de veces. Es obligatorio mover la ficha en cada turno. # ProblemaEscribe un programa que recibiendo el nu\u0301mero N de posiciones y la lista de M caminos en el juego pueda contestar preguntas del tipo: \u201c\u00bfEs posible llegar, desde la posicio\u0301n 1 a la posicio\u0301n d en k movimientos? \u201d",
    "input": "Tu programa debe leer del teclado la siguiente informacio\u0301n: * En la primer li\u0301nea los nu\u0301meros N y M, el nu\u0301mero de posiciones y de caminos, respectivamente. * En las siguientes M li\u0301neas hay dos nu\u0301meros enteros separados por un espacio que representan las casillas que une ese camino. * En la siguiente li\u0301nea, el nu\u0301mero P que representa la cantidad de preguntas que se le hara\u0301n a tu programa. * En las u\u0301ltimas P li\u0301neas hay dos enteros separados por un espacio que representan la posicio\u0301n destino di a la que se quiere llegar y el nu\u0301mero k< sub> i< / sub> de movimientos que se deben utilizar.",
    "output": "Tu programa debe escribir en pantalla P li\u0301neas con un nu\u0301mero cada una. La i- e\u0301sima li\u0301nea debe contener 1 si es posible llegar desde la posicio\u0301n de salida ( posicio\u0301n 1) a la posicio\u0301n destino d< sub> i< / sub> en exactamente k< sub> i< / sub> movimientos, en caso contrario debe contener 0 como respuesta. # Restricciones< pre> 1 < N < = 5, 000 Nu\u0301mero de posiciones. 1 < = M < = 500, 000 Nu\u0301mero de caminos en el juego. 1 < = P < = 5, 000 Nu\u0301mero de preguntas que tu programa debe contestar. 1 < = K < = 1, 000, 000, 000 Ma\u0301ximo de movimientos. < / pre>",
    "note": "",
    "topics": [
      "shortest paths"
    ],
    "id": 85
  }
]