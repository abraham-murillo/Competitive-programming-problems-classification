[
  {
    "title": "Descifrando la pila",
    "url": "https://omegaup.com/arena/problem/Decifrando-la-pila",
    "history": "Considera una pila de enteros que tiene dos operaciones: mete( a) introduce el entero a en la pila y saca( a) elimina los a enteros en el tope de la pila ( suponiendo que hay suficientes) . Entonces, debera\u0301s trabajar con un entero n y un arreglo v con n enteros positivos v_ 1, v_ 2, . . . , v_ n. Escribe un programa que comience con una pila vaci\u0301a y que procese uno por uno los elementos de v ( comenzando con v_ 1) de la siguiente forma: * Si al procesar el elemento v_ i la pila tiene menos de v_ i elementos entonces ejecutas a mete( v_ i) , de lo contrario ejecutas a saca( v_ i) que saca los v_ i elementos. Por ejemplo, si dentro de saca, tienes un 4, debera\u0301s quitar los 4 u\u0301ltimos elementos de la pila. Adema\u0301s, tu programa debe encontrar la cantidad p de elementos que quedan en la pila y el orden en el que e\u0301stos saldri\u0301an si los elimina\u0301ramos",
    "input": "Un nu\u0301mero entero n seguido de un renglo\u0301n con n nu\u0301meros enteros positivos v_ 1, v_ 2, . . . , v_ n separados por espacios.",
    "output": "Un nu\u0301mero entero p seguido de un renglo\u0301n con p nu\u0301meros enteros e elementos que quedan en la pila y el orden en el que e\u0301stos saldri\u0301an si los elimina\u0301ramos uno por uno.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16558
  },
  {
    "title": "Las politicas del comedor",
    "url": "https://omegaup.com/arena/problem/Las-politicas-del-comedor",
    "history": "Debido a que hay ma\u0301s alumnos en la UAM, la cafeteri\u0301a implemento\u0301 un nuevo sistema para formar a los alumnos y los trabajadores. Por lo tanto, a partir de ahora hay dos filas: la de los alumnos y la de los trabajadores. Cuando es el turno de atender a la siguiente persona, la poli\u0301tica de la cafeteri\u0301a es darle preferencia a las personas formadas en la fila de los trabajadores. Por lo tanto, de la fila de los alumnos, solo sera\u0301n atendidos si no hay trabajadores formados. Tu misio\u0301n es ayudar al encargado de la cafeteri\u0301a con un programa que describa como deben ser atendidos los alumnos y los trabajadores1. - FORMA ALUMNO v: Llego\u0301 el alumno de la persona de nombre v a formarse a la fila de los alumnos. 2. - FORMA TRABAJADOR v: Llego\u0301 el trabajador de nombre v a la fila de los trabajadores. 3. - ATIENDE: Se debe atender a la siguiente persona ( alumno o trabajador) , imprimiendo su nombre.",
    "input": "Un entero N seguido de los N eventos. Puedes suponer que nunca ocurre un evento de atencio\u0301n cuando las dos filas esta\u0301n vaci\u0301as.",
    "output": "Los nombres de las personas atendidas en el orden en el que esto ocurrio\u0301 ( cuando se llama a ATIENDE) .",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16557
  },
  {
    "title": "La comida de fin de a\u00f1o",
    "url": "https://omegaup.com/arena/problem/La-comida-de-fin-de-anio",
    "history": "La UAM- C decidio\u0301 realizar una fiesta de fin de an\u0303o para sus estudiantes y, con el objetivo de que todos pudieran comer, les repartio\u0301 boletitos convenientemente numerados del 0 al 999. La mayor atraccio\u0301n de la fiesta de fin de an\u0303o son los taquitos de don chon. Por lo tanto, los alumnos invitados a la fiesta deben formarse en la fila y al llegar su turno, don chon les dara\u0301 una orden de tacos. Como los taquitos esta\u0301n deliciosos, muchos alumnos vuelven a formarse en la fila. Sin embargo, don chon so\u0301lo tiene permitido darle una orden a cada alumno ( por cuestiones de presupuesto y para evitar que alguien se quede sin el suyo) . Escribe un programa que ayude a don chon a identificar a que\u0301 alumnos si\u0301 debe entregales una orden de taquitos cuando llegue su turno.",
    "input": "Un entero N seguido de la descripcio\u0301n de los N eventos. Los eventos pueden ser de dos tipos: 1. - FORMA v: se formo\u0301 el invitado con nu\u0301mero v. 2. - ATIENDE: don chon debe atender al alumno al frente de la fila. .",
    "output": "Para cada evento del tipo ATIENDE, imprime el mensaje SI TAQUITOS o NO TAQUITOS seguido del nu\u0301mero del invitado, dependiendo si don chon le debe entregar o no una orden de taquitos.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16503
  },
  {
    "title": "Pila-cola indecisa",
    "url": "https://omegaup.com/arena/problem/Pila-cola-indecisa",
    "history": "En tu curso de EDL aprendiste lo que es una estructura de datos pila y una estrutura de datos cola. Como eres muy inteligente creaste una estructura de datos llamada la pila- cola indecisa, la cual comienza comporta\u0301ndose como una cola, pero que puede cambiar su comportamiento al de una pila. Para presenta\u0301rsela a tu profe de EDL, escribes un programa que procesa los eventos sobre una pila- cola indecisa: 1. - AGREGA v: Agrega el entero v a la pila- cola ( de izquierda a derecha) . 2. - QUITA: Saca un elemento de la pila- cola e imprime su valor. 3. - CAMBIA: Cambia el comportamiento de la pila- cola ( si se comportaba como pila ahora sera\u0301 una cola, y viceversa) . Los elementos insertados permanecen como esta\u0301n; el cambio so\u0301lo afecta lo que ocurra en eventos posteriores.",
    "input": "La entrada estara\u0301 conformada por un nu\u0301mero arbitrario de li\u0301neas. Puedes suponer que los valores de los elementos a insertar esta\u0301n en el rango de - 1000 a 1000. Adema\u0301s, no debera\u0301s quitar elementos si la pila- cola esta\u0301 vaci\u0301a. # Observacio\u0301nDebes suponer que siempre tu pila- cola al principio se comporta como una cola.",
    "output": "Para cada evento QUITA, el valor del elemento extrai\u0301do.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16496
  },
  {
    "title": "El comedor de la UAM-C",
    "url": "https://omegaup.com/arena/problem/El-comedor-de-la-UAM-C",
    "history": "Debido a que se han presentado problemas en el comedor de la UAM- C, se ha decidido realizar la divisio\u0301n de los alumnos en dos filas que operan bajo poli\u0301ticas diferentes: 1. - La primera es para atender a los alumnos que si levantan sus charolas al terminar de comer y opera bajo la poli\u0301tica de que el primer alumno en llegar es el primero en ser atendido. 2. - La segunda fila esta\u0301 destinada para alumnos \u201cmal educados\u201d y opera bajo la poli\u0301tica de que el u\u0301ltimo alumno en llegar es el primero en ser atendido. Cuando un alumno llega al comedor, el encargado le dice en que\u0301 fila debe formarse y lo anota en una bita\u0301cora. Por otro lado, tambie\u0301n esta\u0301 atento en el orden que se atienden a los alumnos. Cansado de estar \u201ctrabajando tanto\u201d, decide que es hora de pedirle a los alumnos de EDL escribir un programa que determine en que\u0301 orden fueron atendidos los alumnos dependiendo de la fila a la que los enviaron.",
    "input": "Un entero N seguido de la secuencia de los N eventos de la bita\u0301cora. Un evento en el que llega un alumno se describe con la letra seguido del nu\u0301mero de fila en la que debe formarse y de su nombre. * Nota: 1. - Un evento de llegada del alumno se describe con la letra E seguido del nu\u0301mero de fila en que debe formarse y de su nombre. 2. - Por otro lado, un evento de atencio\u0301n al alumno se describe con la letra A seguido de un nu\u0301mero de fila que se atiende. Puedes suponer que los nu\u0301meros de fila son solo 1 o 2 y que los nombres de todos los alumnos tienen una longitud de a lo mucho 10 letras minu\u0301sculas y que no existen eventos de atencio\u0301n para filas vaci\u0301as.",
    "output": "Para cada evento de atencio\u0301n a alumno, el nombre del alumno atendido.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16446
  },
  {
    "title": "Juzgando Numeros",
    "url": "https://omegaup.com/arena/problem/Juzgando-Numeros",
    "history": "Las Mesas Directivas del decanato de Ingenieri\u0301as han decidido que quieren juzgar si un nu\u0301mero representa a su carrera, dependiendo de si el nu\u0301mero es divisible entre cierto nu\u0301mero. Sin embargo, no se pueden poner de acuerdo acerca sobre este nu\u0301mero, asi\u0301 que deciden que entre todos agregaran y removera\u0301n di\u0301gitos arbitrarios a una pila y finalmente cada mesa juzgara\u0301 si el nu\u0301mero generado por la concatenacio\u0301n de estos di\u0301gitos, es representativo de su carrera. Los criterios que toma en cuenta cada Mesa Directiva son los siguientes: - Quimica Industrial : Divisible entre 2- Civil : Divisible entre 3- Software y Sistemas : Divisible entre 6- Industrial y Automotriz : Divisible entre 8- Aeroespacial, Bionica, Mecatronica y Electronica : Divisible entre 9",
    "input": "La primera li\u0301nea esta\u0301 compuesta por un nu\u0301mero entero N de instrucciones. Las siguientes N se componenen de la instruccio\u0301n seguido de un digito D.",
    "output": "Mostrar en pantalla las carreras las cuales el nu\u0301mero generado les representa.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16431
  },
  {
    "title": "Int\u00e9rprete de un lenguaje de bajo nivel",
    "url": "https://omegaup.com/arena/problem/Interprete-de-un-lenguaje-de-baj",
    "history": "Escribe un inte\u0301rprete que ejecute instrucciones escritas en el lenguaje de ensamblado de una ma\u0301quina virtual que se describe a continuacio\u0301n. La ma\u0301quina virtual tiene diez registros r_ 0, r_ 1, r_ 2, . . . , r_ 9 que guardan enteros de 32 bits con signo. La ma\u0301quina virtual tambie\u0301n cuenta con una memoria principal de 2^ 24 bytes direccionables e indizados a partir de 0. Tanto los registros como los bytes de la memoria comienzan valiendo 0. Las instrucciones de un programa esta\u0301n numeradas impli\u0301citamente de arriba hacia abajo a partir de 0. El contador de programa * IP* es un registro que no se puede manipular arbitrariamente y que contiene el nu\u0301mero de la siguiente instruccio\u0301n a ejecutar ( en principio, la instruccio\u0301n que aparece abajo) . . La ma\u0301quina virtual cuenta con una pila de taman\u0303o arbitrario para contadores de programa y so\u0301lo se puede interactuar con ella mediante las instrucciones CALL y RET. A su vez, la ma\u0301quina virtual cuenta con una pila de taman\u0303o arbitrario para datos y so\u0301lo se puede interactuar con ella mediante las instrucciones PUSH y POP. Ambas pilas esta\u0301n fuera de la memoria principal. La ejecucio\u0301n del programa comienza en la primera instruccio\u0301n y cualquier accio\u0301n inva\u0301lida ( divisio\u0301n entre cero, acceder a una direccio\u0301n en memoria inva\u0301lida, hacer un RET cuando la pila de contadores de programa esta\u0301 vaci\u0301a, hacer un POP cuando la pila de datos esta\u0301 vaci\u0301a, salirse de la lista de instrucciones del programa) resulta en comportamiento indefinido. En el lenguaje de ensamblado, cada instruccio\u0301n debe aparecer en su propia li\u0301nea. Las li\u0301neas vaci\u0301as se ignoran. Los comentarios de li\u0301nea comienzan con # y no hay comentarios de bloque. Una etiqueta se declara con la notacio\u0301n * etiqueta: * como prefijo de una instruccio\u0301n. Un identificador de etiqueta puede contener letras, di\u0301gitos y guiones bajos, excepto que no puede comenzar con di\u0301gito. Los si\u0301mbolos de puntuacio\u0301n pueden estar rodeados de espacios en blanco. Los espacios entre nemo\u0301nicos o especificadores de ancho de memoria pueden aparecer en exceso. La diferencia entre mayu\u0301sculas y minu\u0301sculas se ignoran, incluso en etiquetas. Las instrucciones que toman etiquetas no pueden tomar enteros y las instrucciones que toman enteros no pueden tomar etiquetas. A continuacio\u0301n se listan las instrucciones del lenguaje de ensamblado y su sema\u0301ntica en C. Cuando un entero se use en contexto de direccio\u0301n, se hace referencia a la memoria principal de la ma\u0301quina virtual. | * * Instruccio\u0301n* * | * * Sema\u0301ntica* * | | \u2014| \u2014| | NOP | ; | | END | exit( 0) ; | | MOV r_ i, * entero* | r_ i = * entero* ; | | MOV r_ i, r_ j | r_ i = r_ j; | | GET r_ i, BYTE [ * entero* ] | r_ i = ( char) * entero* ; | | GET r_ i, WORD [ * entero* ] | r_ i = ( int) * entero* ; | | GET r_ i, BYTE [ r_ j] | r_ i = ( char) r_ j; | | GET r_ i, WORD [ r_ j] | r_ i = ( int) r_ j; | | PUT r_ i, BYTE [ * entero* ] | ( char) * entero* = r_ i; | | PUT r_ i, WORD [ * entero* ] | ( int) * entero* = r_ i; | | PUT r_ i, BYTE [ r_ j] | ( char) r_ j = r_ i; | | PUT r_ i, WORD [ r_ j] | ( int) r_ j = r_ i; | | ADD r_ i, r_ j, r_ k | r_ i = r_ j + r_ k; | | SUB r_ i, r_ j, r_ k | r_ i = r_ j - r_ k; | | MUL r_ i, r_ j, r_ k | r_ i = r_ j r_ k; | | DIV r_ i, r_ j, r_ k | r_ i = r_ j / r_ k; | | MOD r_ i, r_ j, r_ k | r_ i = r_ j",
    "input": "Una secuencia de li\u0301neas que debera\u0301n procesarse hasta el fin de la entrada y que denotan co\u0301digo de un programa escrito en lenguaje de ensamblado para la ma\u0301quina virtual descrita. Puedes suponer que el co\u0301digo es va\u0301lido y que la ejecucio\u0301n del programa denotado por el co\u0301digo cumple lo siguiente: - No provoca comportamiento indefinido. - No alcanza ninguna instruccio\u0301n ASK. - Procesara\u0301 a lo mucho 10^ 4 instrucciones.",
    "output": "La salida producida por las instrucciones SHOW ejecutadas durante el programa.",
    "note": "",
    "topics": [
      "implementation",
      "strings",
      "data structures"
    ],
    "id": 16360
  },
  {
    "title": "Backspacing",
    "url": "https://omegaup.com/arena/problem/Backspacing",
    "history": "La funcio\u0301n del teclado de tu computadora es agregar caracteres al final de una cadena de texto al momento de presionar cualquiera de sus teclas. Sin embargo, la tecla * * backspace* * no tiene la misma funcio\u0301n. Esta tecla elimina el u\u0301ltimo caracter que se encuentra en la cadena. De este modo, si presionas N veces la tecla backspace, se borrara\u0301n N caracteres de la cadena o toda la cadena si su longitud es menor a N. Simulemos la funcio\u0301n de la tecla backspace mediante un programa de computadora.",
    "input": "* Una li\u0301nea con una cadena de texto con una longitud de de entre 1 y 10^ 9 caracteres. * Otra li\u0301nea con un nu\u0301mero N ( 0 \u2264 N \u2264 10 ^ 9) .",
    "output": "La cadena resultante despue\u0301s de presionar N veces la tecla backspace.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 16185
  },
  {
    "title": "Pila de platos",
    "url": "https://omegaup.com/arena/problem/Pila-de-platos",
    "history": "Linguini es un magni\u0301fico chef que tiene conmovida a toda la ciudad. Lo que muchos no saben es que toda gran persona tuvo que empezar de algu\u0301n lugar. Linguini antes se dedicaba a lavar platos en un restaurante. Los platos en los fregaderos se van apilando conforme van llegando. Es decir, el ultimo plato que se pone queda hasta arriba de la pila de platos sucios. ! [ ] ( PilaPlatos. jpg) El restaurante donde trabajaba teni\u0301a platos de colores muy llamativos. # ProblemaEl problema consiste en llevar un control de la pila de platos sucios. Cada plato tiene un color que identificaremos con un numero v_ i. Se te dara\u0301n varias instrucciones de situaciones que van sucediendo dentro del restaurante. Cada instruccio\u0301n se identificara\u0301 con un numero de la siguiente forma: - 1 v : Si se te da esta instruccio\u0301n significa que un plato con color v fue agregado a la pila de platos sucios. - 2 : Esta instruccio\u0301n indica que el plato que estaba hasta arriba fue lavado. - 3 : Si te dan esta instruccio\u0301n debera\u0301s imprimir cuantos platos sucios quedan. - 4 : Si te dan esta instruccio\u0301n debera\u0301s decir de que\u0301 color es el plato de hasta arriba ( OJO solo debes decir su color, pero todavi\u0301a no se lava) .",
    "input": "Se te dara\u0301 un numero M que indica la cantidad de instrucciones que debes procesar. Despue\u0301s se te dara\u0301n M li\u0301neas con las instrucciones descritas en el problema.",
    "output": "Para cada una de las instrucciones del tipo 3 y 4 debera\u0301s imprimir la respuesta correspondiente.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15341
  },
  {
    "title": "Balanceando agrupadores",
    "url": "https://omegaup.com/arena/problem/Balanceando-agrupadores",
    "history": "Se entiende que una expresio\u0301n tiene un correcto balanceo de agrupadores cuando cada uno de los pare\u0301ntesis, corchetes o llaves de apertura tiene su pare\u0301ntesis, corchete o llave de cierre correspondiente. Por ejemplo, la expresio\u0301n 3 - [ 2 ( a - b] = 0) no esta\u0301 correctamente balanceada, pues el par ma\u0301s interno de agrupadores no coincide entre si\u0301 ( observa que tampoco coincide el par ma\u0301s externo) . Considerando lo anterior, si procedemos a insertar el pare\u0301ntesis de cierre despue\u0301s de b; recorriendo el resto de la expresio\u0301n a la derecha y, finalmente, eliminando el pare\u0301ntesis de cierre que sobra al final, obtenemos la expresio\u0301n balanceada: 3 - [ 2 ( a - b) ] = 0. Siguiendo la estrategia descrita en el pa\u0301rrafo anterior, haz un programa que determine si una expresio\u0301n esta\u0301 balanceada y balance\u0301ala si no lo esta\u0301.",
    "input": "Una cadena E de longitud L que contiene una expresio\u0301n con agrupadores.",
    "output": "La palabra BALANCEADA o la palabra CORREGIDA, seguida de la nueva expresio\u0301n balanceada, segu\u0301n sea el caso.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 15278
  },
  {
    "title": "Editor",
    "url": "https://omegaup.com/arena/problem/Editor",
    "history": "Los editores de textos siempre permiten usar un cara\u0301cter ( por ejemplo, * back_ space* ) como * cara\u0301cter de borrado* que cancela el cara\u0301cter anteriorno cancelado. Por ejemplo, si ` # ` es el cara\u0301cter de borrado, la cadena` abc# d# # e` es en realidad la cadena ` ae` . El primer ` # ` cancela la ` c` , el segundo la ` d` y el tercero la ` b` . Los editores de texto tambie\u0301n tienen un * cara\u0301cter de eliminacio\u0301n de li\u0301nea* , que cancela todos los caracteres anteriores de la li\u0301nea actual. Por ejemplo, si ` @ ` es el cara\u0301cter de eliminacio\u0301n de li\u0301nea, la cadena ` abc@ de# f` es en realidadla cadena ` df` . El ` @ ` cancela la li\u0301nea ` abc` y el cara\u0301cter ` # ` elimina ` e` .",
    "input": "La entrada consta de una cadena de N caracteres ( 1 \u2264 N \u2264 100) formada por letras, di\u0301gitos, espacios y simbolos de puntuacio\u0301n, adema\u0301s de los caracteres especiales ` # ` y ` @ ` que representan el cara\u0301cter de borrado y eliminacio\u0301n de li\u0301nea respectivamente.",
    "output": "La salida es la misma cadena de entrada sin incluir los caracteresespeciales ni los caracteres que fueron borrados. # Ejemplos# # Ejemplo 1| | inputabc# d# # e| | outputae| | end# # Ejemplo 2| | inputabc@ de# f| | outputdf| | end",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15277
  },
  {
    "title": "3. Procesar entradas pila_Evaluaci\u00f3nListasPilasColas",
    "url": "https://omegaup.com/arena/problem/3-Procesar-entradas-pila-no_Eval",
    "history": "Procesar una secuencia de caracteres con una pila, inicialmente vaci\u0301a, tal que una letra significa push y un asterisco significa pop. Devolver la secuencia de valores retornada por las operaciones pop.",
    "input": "El programa recibe: nc_ 1 c_ 2 \u22ef c_ ndonde n es un entero que indica el nu\u0301mero de caracteres, y c_ i son caracteres que pueden ser letras o asteriscos. Nota: Una opcio\u0301n sencilla para leer caracteres consiste en: antoponer un espacio en blanco al",
    "output": "Devolvera\u0301 en pantalla la secuencia de caracteres que retorna cada operacio\u0301n pop.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15149
  },
  {
    "title": "2. Concatenar sensores_Evaluaci\u00f3nListasPilasColas",
    "url": "https://omegaup.com/arena/problem/2-Concatenar-sensores_Evaluacion",
    "history": "Ustedes esta\u0301n controlando un dispositivo que tiene n sensores, pero solo tienen un puerto de comunicacio\u0301n. Los sensores devuelven nu\u0301mero reales con un solo decimal. Una alternativa de solucio\u0301n consiste en que cada medicio\u0301n ( nu\u0301mero flotante) venga acompan\u0303ado del identificador del sensor, el cual sera\u0301 un nu\u0301mero entero positivo.",
    "input": "n m1 s_ 12 s_ 2\u22efi s_ i\u22efm s_ m1 s_ 12 s_ 2\u22efdonde n es el nu\u0301mero total de mediciones, m el nu\u0301mero de sensores, s_ i\u2208R es el valor del sensor i- e\u0301simo.",
    "output": "Retornar a pantalla todas las mediciones recibidas de cada sensor, los valores deben mantener el orden de llegada. Nota: Los valores de los sensores deben visualizarse exactamente con un decimal.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15148
  },
  {
    "title": "1. Revisar parentesis_Evaluaci\u00f3nListasPilasColas",
    "url": "https://omegaup.com/arena/problem/1-Revisar-parentesis_EvaluacionF",
    "history": "Elaborar un programa que reciba una cadena de caracteres que incluyenpare\u0301ntesis, corchetes y llaves. El programa debe devolver VERDADERO si los pare\u0301ntesis, corchetes y llaves esta\u0301n balanceadosy FALSO en caso contrario. Por ejemplo: ( 12+ 10) \u2013 [ ( 2+ 3) / ( 4+ 5) ] * 2+ 1 VERDADERO( 12+ 10) \u2013 [ ( 2+ 3) / ( 4+ 5] ) * 2+ 1 FALSOEl segundo ejemplo es falso porque se cierra un corchete antes que el pare\u0301ntesis.",
    "input": "El programa recibe: nc_ 1, c_ 2, \u22ef, c_ ndonde n es un entero que indica el nu\u0301mero de caracteres, y c_ i son caracteres que pueden incluir nu\u0301meros 0, 1, 2, . . . , 9, operadores + , - , * , / , pare\u0301ntesis ( ) , llaves y corchetes [ ] . * Nota: * Algunos sistemas operativos aumentan un caracter de retroceso de carro despue\u0301s de cada salto de li\u0301nea. El comando scanf puede ignorar caracteres que no sean imprimibles aumentando un espacio en blanco antes del",
    "output": "Devolver en pantalla VERDADERO si los pare\u0301ntesis, corchetes y llaves esta\u0301n balanceados. Devolver FALSO en caso contrario. * Nota: * Revisar que si se abre una pare\u0301ntesis, corchete o llave debe cerrarse.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15147
  },
  {
    "title": "4. Listas comandos b\u00e1sicos-no_TareasListasPilasColas",
    "url": "https://omegaup.com/arena/problem/4-Listas-comandos-basicos-no_Tar",
    "history": "Elaborar un programa que permita ejecutar los comandos ba\u0301sicos de una lista doblemente enlazada. Los comandos que se deben reconocer son: 1. insertar ( clave y valor) al final. 2. insertar ( clave y valor) al inicio. 3. insertar ( clave y valor) antes de la posicio\u0301n p. 4. eliminar el nodo con clave x. 5. imprimir lista. El programa recibira\u0301 n comandos y debera\u0301 devolver las salidas de imprimir, cuando se ejecute este comando. Nota: Imprimir devuelve en pantalla la pareja ( clave, valor) , separadas por un espacio en blanco.",
    "input": "nc_ 1c_ 2\u22eec_ ndonde n es el nu\u0301mero de elementos y cada comando c_ i vendra\u0301 acompan\u0303ado de sus para\u0301metros respectivos. 1 clave valor2 clave valor3 clave valor p4 x5 sin para\u0301metros",
    "output": "El programa devolvera\u0301 la salida del comando imprimir, cuando este se ejecute.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15146
  },
  {
    "title": "3. Lista centinela comando_TareaListasPilasColas",
    "url": "https://omegaup.com/arena/problem/3-Lista-centinela-comando_TareaL",
    "history": "Elaborar un programa que permita ejecutar los comandos de listas doblemente enlazadas; preferiblemente implementada utilizando un centinela. El programa asumira\u0301 que existen dos listas 1 y 2. Los comandos que se deben reconocer son: 1. insertar ( clave y valor) al final. 2. insertar ( clave y valor) al inicio. 3. insertar ( clave y valor) antes de la posicio\u0301n p. 4. eliminar el nodo con clave x. 5. imprimir lista. 6. combinar listas. 7. dividir lista. El programa recibira\u0301 n comandos y debera\u0301 devolver las salidas de imprimir lista, cuando se ejecute este comando. Nota: Imprimir devuelve en pantalla la pareja ( clave, valor) , separadas por un espacio en blanco.",
    "input": "nc_ 1c_ 2\u22eec_ ndado n que es el nu\u0301mero de comando y cada uno c_ i vendra\u0301 acompan\u0303ado de sus para\u0301metros respectivos. 1 id clave valor2 id clave valor3 id clave valor p4 id x5 id6 id_ destino id_ origen7 id_ origen p id_ destinodonde id es el identificador de la lista que puede ser 1 o 2, x es la clave, y p la posicio\u0301n.",
    "output": "El programa devolvera\u0301 la salida del comando imprimir lista id, cuando este se ejecute.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15145
  },
  {
    "title": "2. Remover duplicados_TareaListasPilasColas",
    "url": "https://omegaup.com/arena/problem/2-Remover-duplicados_TareaListas",
    "history": "Elaborar un programa que reciba dos listas de tripletas de nu\u0301meros y que elimine los elementos de la primera lista que aparecen en la segunda lista.",
    "input": "n mA^ p_ 1 B^ p_ 1 C^ p_ 1A^ p_ 2 B^ p_ 2 C^ p_ 2. . . A^ p_ n B^ p_ n C^ p_ nA^ q_ 1 B^ q_ 1 C^ q_ 1A^ q_ 2 B^ q_ 2 C^ q_ 2. . . A^ q_ m B^ q_ m C^ q_ mdonde n es el nu\u0301mero de elementos de la primera lista p y m es el nu\u0301mero de elementos de la segunda lista q. Cada tripleta sigue el formato: A B C.",
    "output": "La segunda lista sin los elementos de la primera.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15144
  },
  {
    "title": "1. Contar duplicados_TareaListasPilasColas",
    "url": "https://omegaup.com/arena/problem/1-Contar-duplicados_TareaListasP",
    "history": "Elaborar un programa que reciba dos listas de tripletas de nu\u0301meros y cuente cua\u0301ntas veces se repite cada tripleta de la primera lista en la segunda lista.",
    "input": "n mA^ p_ 1 B^ p_ 1 C^ p_ 1A^ p_ 2 B^ p_ 2 C^ p_ 2. . . A^ p_ n B^ p_ n C^ p_ nA^ q_ 1 B^ q_ 1 C^ q_ 1A^ q_ 2 B^ q_ 2 C^ q_ 2. . . A^ q_ n B^ q_ n C^ q_ mdonde n es el nu\u0301mero de elementos de la primera lista p y m es el nu\u0301mero de elementos de la segunda lista q. Cada tripleta sigue el formato: A B C.",
    "output": "Elementos de la primera lista y el nu\u0301mero de veces que se repiten.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15143
  },
  {
    "title": "La pila invertible",
    "url": "https://omegaup.com/arena/problem/La-pila-invertible",
    "history": "En tu curso de programacio\u0301n aprendiste que una pila es una estructura de datos que permite agregar y quitar elementos por el mismo extremo ( la \" cima de la pila\" ) . Como siempre has sido muy creativo, acabas de inventar la * pila invertible* , la cual es una estructura de datos que se comporta como una pila al agregar o quitar elementos, pero que tambie\u0301n soporta eficientemente la operacio\u0301n de inversio\u0301n. Para presenta\u0301rsela a tus amigos, deseas escribir un programa que procese una secuencia de N eventos sobre una * pila invertible* : Los eventos que procesara\u0301s pueden ser de tres tipos: - ` AGREGA` v: Agrega el entero v a la * pila invertible* . - ` QUITA` : Quita un elemento de la * pila invertible* e imprime su valor. - ` INVIERTE` : Invierte la * pila invertible* . Por ejemplo, si la * pila invertible* guarda los valores ( 1, 2, 3, 4) donde el 4 esta\u0301 en la cima, despue\u0301s de una inversio\u0301n e\u0301sta quedara\u0301 como ( 4, 3, 2, 1) .",
    "input": "Un entero N seguido de N eventos. Puedes suponer que 1 \u2264 N \u2264 3 \u00d7 10^ 5 y que los valores de los elementos a insertar esta\u0301n en el rango de - 100 a + 100. Adema\u0301s, no se te pedira\u0301 quitar elementos si la estructura esta\u0301 vaci\u0301a.",
    "output": "Para cada evento ` QUITA` , el valor del elemento extrai\u0301do.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 14596
  },
  {
    "title": "La alcanc\u00eda de Mayin",
    "url": "https://omegaup.com/arena/problem/LAX",
    "history": "# Descripcio\u0301n - ! [ Badge] [ 1] El di\u0301a de hoy como es de costumbre tu, regresando de la escuela te habla tu hermanito el cual en busca de convivir y aprender algo nuevo contigo te pide ayuda para saber cuanto ha estado ahorrando en su alcanci\u0301a cili\u0301ndrica, el te explica que lleva un registro de como ha manejado sus ahorros, sin embargo no es muy bueno haciendo cuentas asi\u0301 que te pide ayuda. Su registro se presenta de la siguiente manera: Se te dara\u0301 una instruccio\u0301n t esta denota una accio\u0301n: - Si la instruccio\u0301n que recibes es * * ` M` * * , se te dara\u0301 un nu\u0301mero k que significa que Mayin puso una moneda de esa cantidad en la parte superior de su alcanci\u0301a. - Si la instruccio\u0301n que recibes es * * ` Q` * * , significa que Mayin quiere saber cuanto lleva en ese momento ahorrado y cual fue la u\u0301ltima moneda que puso en su alcanci\u0301a. Solo imprimiras si * * tiene* * al menos una moneda en su alcanci\u0301a, de lo contrario no imprimira\u0301s nada. - Si la instruccion que recibes es * * ` R` * * , significa que Mayin quito la u\u0301ltima moneda que puso en la parte superior, si es que esta tiene.",
    "input": "En la primera linea, un nu\u0301mero entero n ( 1 \u2a7d n \u2a7d 10^ 5) - la cantidad de instrucciones que te dara\u0301 Mayin. Las siguientes n li\u0301neas contendra\u0301n instrucciones tipo t. Si alguna de las instrucciones lo requiere entonces recibira\u0301s un numero k ( 1 \u2a7d k \u2a7d 10^ 10) - siendo esta la moneda que ingreso Mayin.",
    "output": "Al * * final* * del registro, deberas imprimir con cuanto dinero termino la alcanci\u0301a de Mayin despue\u0301s de todos los movimientos que realizo. En caso de no tener monedas imprime < kbd> 0< / kbd>",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 14517
  },
  {
    "title": "Xander's Cube",
    "url": "https://omegaup.com/arena/problem/Xanders-Cube",
    "history": "Un di\u0301a mientras te encontrabas en la sala de tu casa, entra tu hermanito Xander Jr. e insiste en que juegues y ganes el juego que el mismo creo con sus cubos de madera. El juego consiste en recibir n cubos con vocales mayu\u0301sculas. Al igual que cubos con vocales tambie\u0301n se tiene cubos de madera con nu\u0301meros enteros cuyo uso dependera de la vocal que recibas. Ganaras el juego si logras completar todos los movimientos que indique tu hermano de la manera correcta. * * Las reglas que te puso tu hermano son: * * - Si la vocal que recibas es * * ` A` * * , te daran un cubo con el nu\u0301mero k. Deberas colocar dicho cubo por encima de los otros. - Si la vocal que recibas es * * ` E` * * , deberas de quitar el cubo que se encuentre por encima de todos los demas. Si a la torre le faltan cubos, no se debera realizar ningu\u0301n movimiento. - Si la vocal que recibas es * * ` I` * * , te daran un cubo con el nu\u0301mero k. A continuacio\u0301n deberas quitar todos los cubos mayores a k, ubicados en la cima de la torre. - Si la vocal que recibas es * * ` O` * * , te daran un cubo con el nu\u0301mero k. A continuacio\u0301n deberas quitar todos los cubos menores a k, ubicados en la cima de la torre. - Si la vocal que recibas es * * ` U` * * , * * unicamente* * deberas de imprimir el nu\u0301mero de cubos que se encuentran actualmente en la torre. Este movimiento tambien aplica si no quedan cubos que contar en la torre.",
    "input": "En la primera linea, un nu\u0301mero entero n ( 1 \u2a7d n \u2a7d 1000 - la cantidad de vocales que te dara tu hermano. Las siguientes n li\u0301neas contendran una vocal. Si alguna de las vocales lo requiere, tambien recibiras un numero k ( 1 \u2a7d k \u2a7d 10^ 6 - un cubo aleatorio que te dara tu hermano.",
    "output": "Al * * final* * del juego, deberas imprimir cada uno de los cubos sobrantes en la torre. En caso de que la torre se haya quedado sin cubos ( despues de acabar el juego) , unicamente deberas imprimir la frase < kbd> Me quede sin cubos : ( < / kbd> . # Ejemplo: | | input10EA 30A 42I 37A 29A 56O 30A 42EU| | output356 29 30| | description| | end",
    "note": "Explicacio\u0301n para el caso de ejemplo: - En la segunda linea de entrada, se pide quitar el cubo en la cima de la torre, sin embargo, como faltan cubos no se realiza ninguna accio\u0301n. - En la tercera linea se agrega el nu\u0301mero a la cima de la torre. - En la cuarta linea se agrega el nu\u0301mero a la cima de la torre. - En la quinta linea se quita el nu\u0301mero de la cima ( ya que ) , despue\u0301s de esto ya no queda otro nu\u0301mero mayor que en la cima. - En la sexta linea se agrega el nu\u0301mero , a la cima de la torre. - En la septima linea se agrega el nu\u0301mero , a la cima de la torre. - En la octava linea se solicita remover los numeros que sean menores a de la cima, sin embargo, como no quedan numeros que cumplan dicha condicio\u0301n, no se realiza ningu\u0301n movimiento. - En la novena linea se agrega el nu\u0301mero , a la cima de la torre. - En la decima linea, unicamente se elimina el nu\u0301mero ubicado en la cima de la torre ( ) . - En la onceava y ultima linea se solicita imprimir la cantidad de cubos que tiene actualmente la torre. - Una vez que se llevo\u0301 a cabo los movimientos que se indican en la primera linea, se muestran cuantos y cuales son los cubos que permaneciero\u0301n en la torre despues de concluir el juego. # Subtareas- Para un conjunto de casos con un valor de puntos solo habra\u0301 operaciones con la vocal * * ` A` * * . - Para un conjunto de casos con un valor de puntos solo habra\u0301 operaciones con las vocales * * ` A` * * y * * ` U` * * . - Para un conjunto de casos con un valor de puntos solo habra\u0301 operaciones con las vocales * * ` A` * * , * * ` U` * * y * * ` E` * * . - Para un conjunto de casos con un valor de puntos solo habra\u0301 operaciones con las vocales * * ` A` * * , * * ` U` * * , * * ` E` * * , * * ` I` * * y * * ` O` * * .",
    "topics": [
      "data structures"
    ],
    "id": 14290
  },
  {
    "title": "La cueva en la cornisa",
    "url": "https://omegaup.com/arena/problem/La-cueva-en-la-cornisa",
    "history": "En algu\u0301n lugar de la cornisa por la que John Carter intentaba escapar de los indios, John descubrio\u0301 una cueva en la que decidio\u0301 esconderse. La cueva resulto\u0301 ser muy estrecha, oscura y profunda, asi\u0301 que John Carter estaba seguro de que los indios no lo encontrari\u0301an. Poco despue\u0301s, los indios encontraron la misma cueva y decidieron entrar a explorarla. Los indios entraron uno por uno, pero a veces el jefe indio ( que permaneci\u0301a afuera de la cueva) pedi\u0301a que saliera cierto indio y diera su reporte. Por lo limitado de la movilidad dentro de la cueva, los indios que estaban ma\u0301s cerca de la entrada teni\u0301an que salir para permitir que el indio llamado tambie\u0301n pudiera salir. Ocasionalmente el jefe se equivocaba y llamaba a un indio que no estaba dentro de la cueva, pero los indios se percataban del error hasta que todos habi\u0301an salido y el indio llamado no estaba. Escribe un programa que determine en que\u0301 orden salieron los indios de la cueva cada vez que el jefe indio llamaba a alguien.",
    "input": "Un entero N seguido de N eventos. Cada evento contendra\u0301 una letra ` E` o ` B` seguida del nombre de un indio: si la letra es ` E` entonces el indio entro\u0301, mientras que si la letra es ` B` entonces el indio fue llamado por el jefe. Puedes suponer que 0 \u2264 N \u2264 10^ 5, que los nombres de los indios consisten de entre 3 y 10 letras, que el jefe no llamo\u0301 a nadie si no habi\u0301a indios dentro de la cueva y que no hay indios con nombres repetidos.",
    "output": "Por cada evento del tipo ` B` , un renglo\u0301n que contenga los nombres de los indios en el orden en el que salieron.",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": 13768
  },
  {
    "title": "El puerto de Manzanillo",
    "url": "https://omegaup.com/arena/problem/El-puerto-de-Manzanillo",
    "history": "Una cierta terminal del puerto de Manzanillo recibe contenedores que debe acomodar en los barcos que saldra\u0301n. Todos los contenedores se van apilando a medida que van llegando a la terminal, de donde son despue\u0301s trasladados al barco correspondiente. La terminal necesita un plan para acomodar los contenedores a medida que van llegando, para no estar movie\u0301ndolos cuando un barco deba ser cargado, ya que la gru\u0301a que los mueve so\u0301lo puede tomar el contenedor que esta\u0301 hasta arriba de una pila. Sin embargo el espacio para apilar los contenedores es limitado, asi\u0301 que se quiere minimizar la cantidad de pilas utilizadas. En este problema se conoce el orden en el que los barcos necesitan ser cargados y el orden en el que llegan los contenedores a la terminal. Cada barco estara\u0301 representado por una letra mayu\u0301scula de la A a la Z. Los barcos sera\u0301n cargados en orden alfabe\u0301tico. Supongamos que una pila de contenedores puede ser tan alta como sea necesaria.",
    "input": "Se presentan mu\u0301ltiples casos. Cada caso en una li\u0301nea. Cada caso consiste en una cantidad entre 1 y 1000 letras mayu\u0301sculas que representan el orden en que los contenedores llegan a la terminal. Por ejemplo, la li\u0301nea ABCAB significa que primero llega un contenedor que ira\u0301 al barco A, luego uno a B, despue\u0301s uno a C, despua\u0301s a A y finalmente a B. Cuando todos los contenedores hayan llegado, se cargara\u0301n en los barcos que les tocan, primero todos los del barco A, luego los del barco B y finalmente los de C. Los casos se terminan si se recibe la palabra \" fin\" como entrada.",
    "output": "Para cada caso de entrada, imprimir el nu\u0301mero de caso ( iniciando en 1) y la cantidad mi\u0301nima de pilas de contenedores que se necesitan para almacenar todos de manera que se puedan cargar todos los contenedores del primer barco sin mover los del segundo, los del segundo sin mover los del tercero, y asi\u0301 sucesivamente. El formato de la salida debe seguir el patro\u0301n del mostrado en el ejemplo.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13701
  },
  {
    "title": "Notaci\u00f3n posfija",
    "url": "https://omegaup.com/arena/problem/notacion-posfija-edx",
    "history": "En la notacio\u0301n posfija ( tambie\u0301n llamada notacio\u0301n polaca inversa) , una operacio\u0301n es escrita inmediatamente despue\u0301s de sus operandos. Por ejemplo, la suma de dos nu\u0301meros ` A + B` es escrita como ` A B + ` . La expresio\u0301n ` B C + D * ` es equivalente a ` ( B + C) * D` y ` A B C + D * + ` es equivalente a ` A + ( B + C) * D` ( Considere que el si\u0301mbolo de la multiplicacio\u0301n es ` * ` ) . Una ventaja de esta notacio\u0301n es que no requiere de pare\u0301ntesis o reglas de prioridad en los operadores. Dada una expresio\u0301n en notacio\u0301n posfija, evalu\u0301e el resultado de ella.",
    "input": "La primera li\u0301nea de entrada contiene un entero n, la cantidad de elementos que tendra\u0301 la expresio\u0301n. La segunda li\u0301nea de entrada contiene n cadenas de caracteres, la i- e\u0301sima cadena es el i- e\u0301simo elemento de la expresio\u0301n. Un elemento puede ser un entero o un operador, el cual sera\u0301 uno de los siguientes cuatro caracteres: ` + , - , * , / ` . Se garantiza que el resultado final y los valores intermedios en la evaluacio\u0301n tendra\u0301n valor absoluto menor que 2^ 31 y que cuando tengamos un operador del tipo ` / ` el resultado sera\u0301 entero.",
    "output": "Imprime una sola li\u0301nea \u2014 El resultado de la expresio\u0301n.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13626
  },
  {
    "title": "Los globos de la fiesta",
    "url": "https://omegaup.com/arena/problem/Los-globos-de-la-fiesta",
    "history": "La OMI CDMX EDOMEX ha organizado una fiesta para conmemorar el fin de la pandemia de COVID- 19 a nivel mundial ( Faltan algunos meses a partir del di\u0301a de hoy : ( ) . Para ello, han contratado un salo\u0301n de fiestas. Dicho salo\u0301n de fiestas contaba con todo lo necesario para hacer el pachango\u0301n, con mesas, restaurante; incluso una pista de baile rectangular, la cual esta\u0301 rodeada por paredes trasnparentes ( como una pecera) y tiene un largo B. Como la OMI decidio\u0301 mostrar un acercamiento cultural a sus alumnos, decidieron pedir una escultura de arte moderno. Esta consta de varios cilindros de variadas circunferencias, que atraviesan todo el ancho de la pista de baile ( como los tubos de un pasamanos) , y que tienen los centros de los mismos ubicados a la misma altura, de tal manera que si la pista de baile es vista desde afuera a trave\u0301s de la pared larga, es posible ver los cilindros como ci\u0301rculos en un plano que no se intersecan entre si\u0301. Todo corri\u0301a de acuerdo al plan original, hasta que recordaron que previamente habi\u0301an colocado algunos cuantos globos en la pista de baile tambie\u0301n, * los cuales al estar a diferentes profundidades de la misma, por ma\u0301s que se mueva un globo a la derecha o a la izquierda este nunca chocara\u0301 con otro. * ! [ globo] ( globo2. jpg) > * * * Nota: Para simplificar el problema, tomaremos el globo como una esfera perfecta, la cual esta\u0301 atada a un hilo con longitud L desde su circunferencia. * * * Como no quieren que esto se vea un poco antinatural, decidieron camuflar los globos con la escultura de arte moderno, de esta forma un globo se camufla si esta\u0301 equilibrado con la escultura. * * Un globo esta\u0301 equilibrado con la escultura si se cumplen dos condiciones: * * 1. El globo esta\u0301 tocando la escultura2. El centro del globo esta\u0301 a una altura menor o igual al centro del cilindro. ! [ Caso_ Maximo] ( globo_ maximo. jpg) Conforme ma\u0301s largo sea la cuerda del globo una vez que toca un cilindro, el globo se movera\u0301 ma\u0301s a la izquierda o a la derecha, dependiendo de su centro ( Si esta\u0301 a la izquierda del centro del cilindro se va a la izquierda y viceversa) , hasta llegar a la segunda condicio\u0301n de equilibro, donde luego se elevara\u0301 sobre el cilindro tocando a este u\u0301nicamente la cuerda del globo. Como la escultura es una obra gigantesca, todos los globos tienen un radio menor o igual al de cualquier cilindro de laescultura. Al mismo tiempo los cilindros tienen carga esta\u0301tica por lo que el globo puede subir sin problemas mientras no haya otro objeto que interrumpa su camino, en este caso este se detendra\u0301 en esa posicio\u0301n, siempre y cuando tenga la cuerda necesaria para quedarse ahi\u0301. > * Nota: es posible que el espacio entre dos globos no permita que un globo pueda estar ma\u0301s arriba que la escultura, lo cual hari\u0301a que se detenga en el punto ma\u0301ximo de elevacio\u0301n. Ver caso 3 para ma\u0301s detalles* # ProblemaComo mover muchos globos da un poco de flojera, se decidio\u0301 mejor decidir a que altura colocar la escultura para tener la mayor cantidad de globos equilibrados posible. * * La escultura u\u0301nicamente se puede mover una altura entera, y la escultura no debe atravesar el suelo. * * Los globos son muy maleables por lo que no importa si son totalmente aplastados por los cilindros. La pista de baile consta de B unidades de largo, la escultura cuenta con N cilindros, los cuales se conoce la distancia de su centro con relacio\u0301n a la pared izquierda de la pista x_ c, adema\u0301s del radio de cada uno r_ c. Y se conoce tambie\u0301n que hay M globos dentro de la pista, los cuales se conoce la distancia de su centro ( Donde fue atado al suelo) a partir de la izquierda x_ g, su radio r_ g y la longitud de su cuerda l_ g.",
    "input": "Un entero B, el largo de la pista de baile. dos nu\u0301meros enteros N, M. Seguido de N li\u0301neas que contienen dos enteros: x_ c y r_ c respectivamente. M li\u0301neas le siguen con tres enteros cada una: x_ g, r_ g y l_ g",
    "output": "Un u\u0301nico nu\u0301mero entero que representa la cantidad ma\u0301xima de globos equilibrados que pueden ser obtenidos al mover la escultura a una altura entera. # Ejemplos: | | input10115 35 1 1| | output1| | descriptionEl globo se alza el largo de su cuerda+ dos veces su radio, por lo que esta\u0301 a 3 unidades de altura, por lo que si ponemos la escultura a una altura h= 6, el cilindro tocara\u0301 al globo, por lo que la respuesta es 1. | | input30021100 50200 50150 10 1| | output0| | descriptionAunque si ponemos los cilindros a una altura muy baja estos pueden tocar al globo, esto implica que la estructura debera\u0301 atravesar el suelo, por lo que esta no puede ser adquirida, por lo tanto no se puede equilibrar ni un solo globo. | | input25022100 50200 50170 10 5000100 3 4| | output2| | descriptionaunque el primer globo este\u0301 extremadamente arriba y necesite que la estructura este\u0301 ma\u0301s arriba que 5000 unidades, como el espacio entre los dos cilindros es de 0 unidades que es menor al diametro del globo, este no puede sobresalir de los mismos, por lo que este puede equilibrarse incluso a una altura tan baja como para equilibrar el segundo globo a una altura h= 60. | | end# Li\u0301mitesB \u2264 4 \u00d7 10^ 9N, M \u2264 10^ 5x_ c , x_ g \u2264 br_ c \u2264 br_ g \u2264 bl_ g \u2264 2 \u00d7 10^ 9",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13541
  },
  {
    "title": "La pila-cola",
    "url": "https://omegaup.com/arena/problem/La-pila-cola",
    "history": "En tu curso de programacio\u0301n aprendiste que una pila es una estructura de datos que permite agregar y quitar elementos por el mismo extremo ( en este caso, agregar o quitar elementos por atra\u0301s) y que una cola es una estructura de datos que permite agregar elementos por atra\u0301s y quitarlos por el frente. Como siempre has sido muy creativo, acabas de inventar la * pila- cola* , la cual es una estructura de datos que comienza comporta\u0301ndose como una pila, pero que puede cambiar su comportamiento al de una cola. Para presenta\u0301rsela a tus amigos, deseas escribir un programa que procese una secuencia de N eventos sobre una * pila- cola* : Los eventos que procesara\u0301s pueden ser de tres tipos: - ` AGREGA` v: Agrega el entero v a la * pila- cola* . - ` QUITA` : Saca un elemento de la * pila- cola* e imprime su valor. - ` CAMBIA` : Cambia el comportamiento de la * pila- cola* ( si se comportaba como pila ahora sera\u0301 una cola, y viceversa) . Los elementos insertados permanecen como esta\u0301n; el cambio so\u0301lo afecta lo que ocurra en eventos posteriores.",
    "input": "Un entero N seguido de N eventos. Puedes suponer que 1 \u2264 N \u2264 10^ 5 y que los valores de los elementos a insertar esta\u0301n en el rango de - 1000 a + 1000. Adema\u0301s, no se te pedira\u0301 quitar elementos si la * pila- cola* esta\u0301 vaci\u0301a.",
    "output": "Para cada evento ` QUITA` , el valor del elemento extrai\u0301do.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13387
  },
  {
    "title": "Pancho en Cholywood",
    "url": "https://omegaup.com/arena/problem/Pancho-en-Cholywood",
    "history": "Pancho se a graduado de preescolar y decidio\u0301 dar el salto a la preparatoria, asi\u0301 que viajo hasta Soledad De Doblado para estudiar en la mejor preparatoria posible, ( o eso dice el) , pero pancho tiene un problema, como Soledad De Doblado es una gran ciudad, hay muchos edificio de diferentes alturas, y como Pancho es muy curioso, decidio\u0301 ver cuantos edificio podi\u0301a ver si se paraba en un lugar en especifico. # ProblemaPancho se pondra\u0301 en el extremo derecho de una fila de n edificios como se muestra en la imagen! [ enter image description here] [ 1] Ayuda a Pancho a saber cuantos edificios puede ver desde donde esta parado.",
    "input": "En la primera linea un entero n que representa la cantidad de edificios en la fila. En la siguiente linea n enteros representando la altura de cada edificio.",
    "output": "Un u\u0301nico entero con la cantidad de edificios que Pancho puede ver.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12915
  },
  {
    "title": "Listas enlazadas y dobles colas",
    "url": "https://omegaup.com/arena/problem/Listas-enlazadas-y-dobles-colas",
    "history": "Dado un entero N, cuentas con una lista enlazada que inicialmente guarda los enteros del 0 al N- 1 y con una doble cola que guarda apuntadores a los nodos de la lista. Al comenzar, el i- e\u0301simo elemento de la doble cola apunta al nodo con valor i de la lista. Debera\u0301s escribir un programa que procese una lista de M instrucciones, donde algunas so\u0301lo afectan a los apuntadores guardados en la doble cola y otras si\u0301 afectan a la lista enlazada. Cada instruccio\u0301n puede ser una de las siguientes: - ` INTERCAMBIA` i j: Intercambia los apuntadores guardados en las posiciones i y j de la doble cola. - ` INCREMENTA` i: Sigue el i- e\u0301simo apuntador de la doble cola e incrementa el valor del nodo. - ` ROTA_ IZQ` : El apuntador guardado en la posicio\u0301n i de la doble cola pasa a guardarse en la posicio\u0301n i- 1. Esto ocurre para cada i. El apuntador de la posicio\u0301n 0 pasa a guardarse en la posicio\u0301n n- 1. - ` ROTA_ DER` : El apuntador guardado en la posicio\u0301n i de la doble cola pasa a guardarse en la posicio\u0301n i+ 1. Esto ocurre para cada i. El apuntador de la posicio\u0301n n- 1 pasa a guardarse en la posicio\u0301n 0. - ` QUITA_ IZQ` : Elimina el primer apuntador de la doble cola y tambie\u0301n elimina el nodo de la lista enlazada al que apuntaba e\u0301ste. - ` QUITA_ DER` : Elimina el u\u0301ltimo apuntador de la doble cola y tambie\u0301n elimina el nodo de la lista enlazada al que apuntaba e\u0301ste. - ` AGREGA_ IZQ` v: Crea un nodo con valor v atra\u0301s del nodo apuntado por el primer apuntador de la doble cola. Agrega el apuntador al nuevo nodo al inicio de la doble cola. - ` AGREGA_ DER` v: Crea un nodo con valor v adelante del nodo apuntado por el u\u0301ltimo apuntador de la doble cola. Agrega el apuntador al nuevo nodo al final de la doble cola. ! [ enter image description here] [ 1]",
    "input": "Dos enteros N y M. Posteriormente, una secuencia de las M instrucciones a ejecutar secuencialmente. Puedes suponer que 1 \u2264 N \u2264 10^ 6, que todas las instrucciones siempre se pueden ejecutar correctamente y que todos los valores a agregar esta\u0301n en el rango de - 10^ 9 a + 10^ 9.",
    "output": "El contenido final de la lista enlazada.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12806
  },
  {
    "title": "Don Panchito y los helados",
    "url": "https://omegaup.com/arena/problem/Don-Panchito",
    "history": "# DescripcionDon Panchito es un popular sen\u0303or que vende helados de la Esc. Sec. Fed. n\u00b02 Jaime Torres Bodet. El felizmente atiende a todos y cada uno de los alumnos a que quieran un helado para aliviar la calor que se vive. Sin embargo Don Panchito no puede atender a todos por igual por la manera en la que esta\u0301n ordenados sus helado. Don Panchito tiene ordenados los helado uno sobre otro, asi que si saca uno que no sea el de la cima los de arriba se pueden caer y maltratar lo que impediria a los alumnos disfrutar de su helado como se debe. Don Panchito te dice que lo que el hace es saber de que helado quiere el alumno, si no esta en la cima le pide que espere y si el siguiente pide el helado que esta en la cima y el siguiente helado es del sabor que quiere el primer alumno que llego entonces sera atendido primero. Ayuda a don panchito a llevar un control de su metodo, ya que el no pude hacer tantas cosas al mismo tiempo.",
    "input": "Un numero N que seran la cantidad de alumnosLa siguiente eatra dada por N caracteres separados por un espacio los cuales representaran los sabores que los alumnos quieren. En la tercera linea un entero M que representa la cantidad de helados que Don Panchito tieneEn la ultima linea los M caracteres que del sabor que don panchito tiene",
    "output": "Un entero que represente la cantidad de alumnos que fueron atendidosun Salto de linea y despues dos enteros uno que represente la cantidad de alumnos que no fueron atendidos y la otra con la cantidad de helados que le quedaron a Don PanchitoPor ultimo otro salto de linea seguido de un mensaje que sea \" Exelente Dia\" si todos los alumnos se fueron con su helado y no le quedaron helados, \" Casi lo Logramos\" si almenos un helado se le quedo o si un alumno no pudo ser atendido, o \" IMPOSIBLE! ! ! \" si no pudo atender a ningun alumno. # Ejemplos| | input6F F F V C A5F C F F V| | output51 0Casi lo Logramos| | descriptionEl primer alumno quiere un helado de sabor F y es el que Don Panchito tiene en la cima asi que se lo da, el segundo quiere uno de sabor F asi que lo hace a un lado, al igual que al tercero y al cuarto, pero al quinto ya lo puede atender, y como los helados que tiene despues corresponden al sabor que querian los que llegaron antes, se los da, el ultimo alumno no recibe nada por que ya no quedan helados. | | end# Limites1< = N < = 1001< = M < = 100Solo caracteres en mayusculas",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12327
  },
  {
    "title": "Figura que se relaciona con el n\u00famero do5",
    "url": "https://omegaup.com/arena/problem/Figura-N-2",
    "history": "Calcula la superficie de la siguiente figura. ! [ Ejemplo] ( Figura2. png)",
    "input": "La entrada consiste en siete nu\u0301meros enteros: a, b, c, d, e, f y g que son las medidas de los lados.",
    "output": "El texto Superficie: y la superficie de la figura.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12257
  },
  {
    "title": "Pilas y colas",
    "url": "https://omegaup.com/arena/problem/Pilas-y-colas",
    "history": "Una pila es una estructura de datos en la que los elementos se agregan y eliminan en el mismo extremo. Una cola es una estructura de datos en la que los elementos se agregan por atra\u0301s y se eliminan por el frente. Escribe un programa que simule una secuencia de N eventos sobre una de las estructuras de datos anteriores. Cada evento dado puede ser de uno de los siguientes tipos: - * PUSH* V: Agregar el entero V a la estructura de datos. - * POP* : Eliminar un elemento de la estructura de datos ( imprimiendo su valor) .",
    "input": "Inicialmente, un entero N y un caracter C. Si C = * P* entonces la simulacio\u0301n debe llevarse a cabo sobre una pila; si C = * C* entonces la simulacio\u0301n debe llevarse a cabo sobre una cola. Posteriormente, los N eventos a procesar.",
    "output": "Una secuencia de enteros provenientes de los eventos * POP* .",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12247
  },
  {
    "title": "Los erizos de la pr\u00e1ctica de croquet",
    "url": "https://omegaup.com/arena/problem/Los-erizos-de-la-practica-de-cro",
    "history": "La Reina Roja le ordeno\u0301 a Alicia jugar croquet con ella. Alicia sabi\u0301a lo que era el croquet, pero se confundio\u0301 al ver aparecer un flamenco y N erizos. El Conejo Blanco le explico\u0301 a Alicia que el juego consisti\u0301a en golpear con la cabeza del flamenco a los erizos enroscados para que pasaran por debajo del arco formado por un soldado. Mientras los dema\u0301s jugadores se preparaban, el Conejo Blanco formo\u0301 a los N erizos en una fila, los numero\u0301 del 1 al N de izquierda a derecha y coloco\u0301 un arco justo entre los erizos M y M+ 1. Entonces, el Conejo Blanco le indico\u0301 a Alicia que golpeara a los erizos para que pasaran por debajo del arco de un lado al otro. Si el Conejo Blanco gritaba \u00a1golpe izquierdo! Alicia debi\u0301a golpear un erizo del lado izquierdo para que pasara al lado derecho y, viceversa, si el Conejo Blanco gritaba \u00a1golpe derecho! Alicia debi\u0301a golpear un erizo del lado derecho para que pasara al lado izquierdo. En cualquier caso, siempre debi\u0301a golpear al erizo del lado indicado que estuviera ma\u0301s cerca del arco. De vez en cuando, uno de los erizos que estaba cerca del arco lograba escapar antes de ser golpeado. En este caso, el Conejo Blanco gritaba \u00a1escapo\u0301 el erizo izquierdo! o \u00a1escapo\u0301 el erizo derecho! segu\u0301n correspondiera. \u00bfCo\u0301mo quedaron formados los erizos al final del juego?",
    "input": "En el primer renglo\u0301n, dos enteros N y M. Posteriormente, un entero K seguido de los K eventos que sucedieron durante el juego. Cada evento esta\u0301 descrito por dos caracteres A y L indicando el tipo de la accio\u0301n ( * G* para golpe y * E* para escape) y el lado en el que ocurre ( * I* para izquierda y * D* para derecha) . Puedes suponer que jama\u0301s ocurre un evento de golpe o escape en un lado que no tiene erizos.",
    "output": "Un entero F_ I seguido de los F_ I erizos que quedaron formados del lado izquierdo del arco. Posteriormente, un entero F_ D seguido de los F_ D erizos que quedaron formados del lado derecho del arco. # RangosPuedes suponer que 0 \u2264 N, M, K \u2264 10^ 5 y que M \u2264 N.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12125
  },
  {
    "title": "Ca\u00f1on 20000",
    "url": "https://omegaup.com/arena/problem/Canon_maya",
    "history": "Despue\u0301s de recuperar todos sus puntos de vida, los programadores mayas decidieron realizar su ataque al malvado robot OMI, puesto que por alguna extran\u0303a razo\u0301n el malvado robot ahora vuela, necesitan un ataque aereo para poder causarle dan\u0303o. Gracias a su buena creatividad, disen\u0303aron el * * Can\u0303on 20000* * . El can\u0303on funciona cargando en e\u0301l las * piedras ma\u0301gicas* , cuando se carga una piedra y luego otra, esta u\u0301ltima queda encima de la anterior, cuando se dispara el can\u0303on, se dispara primero la piedra que este en la cima, por lo tanto, sigue la lo\u0301gica tal que, la primera piedra en entrar es la u\u0301ltima en salir. Cada piedra tiene un peso, este peso ayuda a los programadores mayas a saber que tanto dan\u0303o le haran al malvado robot, puesto que estan en una batalla, perdieron la nocio\u0301n de como cargaron las piedras, quieren saber cual es el menor peso de las piedras contenidas en el can\u0303on al momento de hacerse la pregunta, esto los ayudara\u0301 a poner algo extra a la piedra y que haga ma\u0301s dan\u0303o. Los programadores ya estan agotados, entonces, te pidieron tu ayuda. # ProblemaDado N acciones ellos te daran un numero k tal que si este es igual a: - 1: Tienes que cargar una piedra ma\u0301gica al can\u0303on de peso p. - 2: Tienes que disparar la piedra que esta\u0301 en la cima del can\u0303on al malvado robot y decir cual es el peso de la misma. - 3: Tienes que decir cual es el peso mi\u0301nimo de las piedras contenidas en el can\u0303on al momento de realizar la pregunta.",
    "input": "Un entero N, el cual es el numero de acciones que tienes que realizar, seguido de N li\u0301neas, con un entero k_ i cada una, con un valor de 1, 2 o 3 que indica la accio\u0301n a realizar en la i- e\u0301sima accio\u0301n, si k_ i = 1, se te dara\u0301 un entero p el cual es el peso de la piedra que se cargara\u0301 en el can\u0303on.",
    "output": "Cuando k_ i = 2 o k_ i = 3 imprime el correspondiente nu\u0301mero entero con un salto de linea. | | input81 51 31 43231 23| | output3432| | input101 31 21 132321 532| | output112235| | end# Li\u0301mites- 1 \u2264 N \u2264 10^ 6 \u00b7 2* * Para 25pts de los casos* * - 1 \u2264 N \u2264 10^ 3* * Para 56. 25pts de los casos* * - 1 \u2264 N \u2264 10^ 5* * Para 100pts de los casos* * - No hay restricciones",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 11969
  },
  {
    "title": "Las bit\u00e1coras de la sana distancia",
    "url": "https://omegaup.com/arena/problem/Las-bitacoras-de-la-sana-distanc",
    "history": "Para informar a la poblacio\u0301n acerca de la sana distancia, Susana Distancia cuenta con una gran cantidad de telefonistas. El di\u0301a ti\u0301pico de una telefonista es algo mono\u0301tono: exactamente cada minuto, un asistente coloca un papelito en el escritorio de la telefonista, el cual tiene anotado un tele\u0301fono al que debe llamar. Los papelitos lentamente se van acumulando, ya que el asistente coloca cada papelito encima de los que ya este\u0301n ahi\u0301. Cuando la telefonista esta\u0301 lista para realizar la siguiente llamada, ella quita el papelito que este\u0301 hasta arriba y llama al tele\u0301fono anotado, lo cual puede tomarle varios minutos. La telefonista anoto\u0301 en su bita\u0301cora la duracio\u0301n de cada llamada que hizo, pero no anoto\u0301 a que\u0301 tele\u0301fono corresponde cada duracio\u0301n. Por su parte, el asistente anoto\u0301 en su bita\u0301cora el orden en el que fue colocando los papelitos en el escritorio. Lo que Susana Distancia desea saber es \u00bfen que\u0301 orden se llamo\u0301 a los tele\u0301fonos?",
    "input": "El primer renglo\u0301n contiene un entero positivo N. El segundo renglo\u0301n contiene N enteros D_ 1, D_ 2, . . . , D_ N separados por espacios, que son las duraciones en minutos de las N llamadas. Los siguientes N renglones contienen los N enteros P_ 1, P_ 2, . . . , P_ N que son los tele\u0301fonos anotados en los papelitos, en el orden en el que fueron colocados en el escritorio.",
    "output": "Una secuencia de N renglones que contengan los tele\u0301fonos en el orden en el que se llamaron. # Li\u0301mites1 \u2264 N \u2264 10^ 51 \u2264 D_ i \u2264 60 para cada 1 \u2264 i \u2264 N10^ 8 \u2264 P_ i < 10^ 9 para cada 1 \u2264 i \u2264 N",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 11354
  },
  {
    "title": "Quitando plantas",
    "url": "https://omegaup.com/arena/problem/Quitando-plantas",
    "history": "Felipe logro comprar el rancho aunque sin saber muy bien cuantos toros hay. Lo que no se dio cuenta al momento de comprarla ( por andar contando a mano los toros) , es que el rancho veni\u0301a con un huerto con una capacidad de k plantas. Cada di\u0301a a felipe le envi\u0301an una planta del tipo a_ i, si ya hay una planta de ese tipo en el huerto entonces desecha la nueva que le dieron ( es decir, no pone la nueva se queda con la que ya esta\u0301) . Si en cambio, la planta aun no esta, hay dos posibilidades. Si el huerto todavi\u0301a no esta lleno entonces plantamos la nueva planta en un lugar vacio, luego si el huerto esta lleno entonces quitamos a la planta ma\u0301s vieja ( la que tenga ma\u0301s di\u0301as en el huerto) y la remplazamos con la nueva. # ProblemaFelipe sabe el tipo de plantas ( a_ i) le van a llegar los proximos n di\u0301as, entonces quiere saber cuantas plantas nuevas pondra\u0301 en el huerto de taman\u0303o k ( para comprar los suficientes materiales) . Es decir, imaginemos que plantar algo en el huerto tiene de costo 1, entonces quiere saber cuanto gastara al final de los n di\u0301as. Consideramos que el huerto inicia vacio.",
    "input": "Dos nu\u0301mero n y k que representan los di\u0301as buscados y el taman\u0303o del huerto. En la siguiente linea se te daran n nu\u0301meros que representan el tipo de planta que le dan a Felipe en cada di\u0301a.",
    "output": "Un unico entero representando cuantas plantas pondra\u0301 en esos n di\u0301as.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 11107
  },
  {
    "title": "Recogiendo letras en la torre",
    "url": "https://omegaup.com/arena/problem/Recogiendo-letras-en-la-torre",
    "history": "Despue\u0301s de lo molesto que quedo Jorge al no encontrar alguien que tome bien las fotos y mucho menos alguien que las recorte de forma decente, el equipo entro en el castillo de Santy. En este lugar teni\u0301an la opcio\u0301n de reunir a un aliado con ellos. Para poder reunirse con un aliado, el equipo de Jorge debe encontrar las letras que hacen su nombre; es decir, si quieren a \" bob\" como aliado deben encontrar las letras b - o - b en el castillo. Actualmente, ellos se encuentran en una habitacio\u0301n del castillo y delante de ellos hay una cantidad de puertas, una vez el equipo pasa por una puerta ya no pueden irse atra\u0301s. Adema\u0301s, cada habitacio\u0301n tiene una letra ( excepto en la que ellos esta\u0301n actualmente) . Un aliado es ma\u0301s fuerte entre ma\u0301s largo es su nombre ( tiene sentido porque impone ma\u0301s \" Sir lord el destrona huesos\" a alguien llamado \" bob\" ) . Como es de esperarse el equipo quiere al aliado ma\u0301s fuerte, pero no saben muy bien como conseguirlo. Por suerte, el fiel compan\u0303ero de Jorge logro obtener el mapa en donde describe como estan las puertas del castillo y las letras que hay en cada habitacio\u0301n. El mapa esta cifrado de una forma muy especial, es un texto ( una cadena de caracteres) . Imaginemos que tenemos un mapa como el siguiente! [ Mapa] ( Mapa. png) Entonces, en el texto se veri\u0301a algo como una palabra: ` B. O. . B. ID. RE` . En donde el punto quiere decir despue\u0301s de cuantas puertas esta\u0301 esa palabra. Adema\u0301s, se encuentran en el orden tal forma que si una letra esta\u0301 despue\u0301s de n puntos, entonces la anterior letra que tenga n- 1 puntos sera\u0301 la letra que habi\u0301a en la puerta antes de esa. En el ejemplo, notamos que tenemos \" . I\" y la letra ma\u0301s atra\u0301s que no tienen ningu\u0301n punto es la \" B\" , entonces quiere decir que para pasar a esa \" I\" tienes que ir por la puerta \" B\" . Que es lo que esta\u0301 en el dibujo. Como Jorge no esta\u0301 de humor por sus fotos, el quiere saber cua\u0301l seri\u0301a el nombre del Aliado ma\u0301s fuerte antes de perder su tiempo en buscarlo. # ProblemaDada una cadena llena de caracteres que representa el mapa descrito anteriormente. Se debe decir el nombre del aliado ma\u0301s fuerte ( el nombre ma\u0301s largo que se puede formar) teniendo en cuenta que una vez que pasas por una puerta ya no puedes regresar. En caso de haber varios aliados con el mismo poder ( misma cantidad de caracteres) , decir el que tenga el menor nombre lexicograficamente.",
    "input": "Una unica cadena de caracteres descrita anteriormente ( El mapa) .",
    "output": "El nombre del aliado ma\u0301s fuerte y menor lexicograficamente.",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": 11102
  },
  {
    "title": "Pilas basic",
    "url": "https://omegaup.com/arena/problem/Pilas-basic",
    "history": "Este es un problema de pilas basico, leeras un nu\u0301mero N que son la cantidad de instrucciones las cuales pueden ser de 3 tipos: * Meter un nu\u0301mero x a la pila* Sacar un nu\u0301mero de la pila* Obtener el taman\u0303o de la pila",
    "input": "Un nu\u0301mero N seguido de N lineas con un nu\u0301mero indicando el tipo de instruccio\u0301n ( 1 - > meter, 2 - > sacar y 3 - > obtener el taman\u0303o) , en el caso de que la instruccio\u0301n sea meter estara el nu\u0301mero y a meter.",
    "output": "Un nu\u0301mero por cada instruccio\u0301n de sacar y/ o obtener taman\u0303o en el orden que fueron dadas.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 8867
  },
  {
    "title": "Pila de comida",
    "url": "https://omegaup.com/arena/problem/Pila-de-comida",
    "history": "Pedro y sus amigos van a un restaurante moderno con un concepto un poco extran\u0303o, despue\u0301s de ordenar su comida el mesero les comenta que pueden obtener un 50",
    "input": "La primera linea contendra\u0301 un entero t el numero de veces que fueron al restaurante. La segunda linea contendra\u0301 un entero n el numero de amigos que acompan\u0303aron a pedro al restaurante. La siguiente linea contiene los nu\u0301meros de las ordenes de cada uno, como se encuentran en la pila de platos de arriba a abajo. La persona i en pedir siempre tendra\u0301 la orden numero i.",
    "output": "Por cada ida al restaurante en una nueva linea un numero entero r igual al numero de movimientos de quitar un plato de una pila y moverlo a una nueva pila.",
    "note": "",
    "topics": [
      "brute force",
      "data structures"
    ],
    "id": 8749
  },
  {
    "title": "Balanceo de Par\u00e9ntesis",
    "url": "https://omegaup.com/arena/problem/Balanceo-de-Parentesis",
    "history": "Una expresio\u0301n matema\u0301tica tiene sus pare\u0301ntesis balanceados si cumple tres condiciones. 1. Cada pare\u0301ntesis que se abre, tiene su correspondiente pare\u0301ntesis de cierre. 2. Cada pare\u0301ntesis que cierra tiene su correspondiente pare\u0301ntesis de apertura. 3. Esta\u0301n anidados correctamente. Esto es, que si un pare\u0301ntesis abre dentro de otro par de pare\u0301ntesis, se tiene que cerrar antes que cierre su pareja contenedora. El objetivo de este ejercicio es revisar si una expresio\u0301n matema\u0301tica esta\u0301 balanceada, y si no, identificar do\u0301nde esta\u0301 el error.",
    "input": "Una li\u0301nea de texto conteniendo una expresio\u0301n matema\u0301tica formada por pare\u0301ntesis, letras y nu\u0301meros. Los pare\u0301ntesis pueden ser circulares * ( * y * ) * , cuadrados * [ * y * ] * , triangulares * < * y * > * o llaves * * y * * .",
    "output": "Si la expresio\u0301n esta\u0301 balanceada, imprimir el mensaje: * * \" Balanceada\" * * si no, imprimir * * \" Error en # \" * * donde el si\u0301mbolo * # * debe ser sustituido por la posicio\u0301n del caracter donde se encontro\u0301 el primer error. # Ejemplos| | input( [ ] ) ( ( [ ] ) ) | | outputBalanceada| | inputfoo( bar) | | outputBalanceada| | inputperro( gato| | outputError en 5| | input2+ 3- [ 4- 2+ x( x- 3] ) | | outputError en 14| | end",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 8742
  },
  {
    "title": "Sumando con pilas",
    "url": "https://omegaup.com/arena/problem/Sumando-con-pilas",
    "history": "Escribe un programa que comience con una pila P de enteros inicialmente vaci\u0301a y que ejecute una lista de las siguientes operaciones: - * AGREGA v* : Agregar v a P. Por ejemplo, si P = ( 3, 1, 4) y v = 5 entonces P = ( 3, 1, 4, 5) . - * CONSUME* : Quitar los dos u\u0301ltimos elementos de P, calcular su suma y agregarla a P. Por ejemplo, si P = ( 3, 1, 4) entonces P = ( 3, 5) . - * IMPRIME* : Imprimir el u\u0301ltimo elemento de P. Por ejemplo, si P = ( 3, 1, 4) entonces se debe imprimir 4.",
    "input": "Un entero N seguido de las N operaciones a realizar sobre P. Puedes suponer que 0 \u2264 N \u2264 10^ 5 y que nunca se pedira\u0301 consumir o imprimir un elemento que no existe.",
    "output": "Cada para operacio\u0301n de impresio\u0301n, el valor del entero correspondiente.",
    "note": "",
    "topics": [
      "implementation",
      "math",
      "data structures"
    ],
    "id": 8672
  },
  {
    "title": "Los Ultimos Seran Los Primeros",
    "url": "https://omegaup.com/arena/problem/Los-Ultimos-Seran-Los-Primeros",
    "history": "# Los U\u0301ltimos Sera\u0301n los PrimerosEn una carrera en el pueblo de Yahualica todos los participantes creen que el que llegue primero sera\u0301 el ganador, pero no, las reglas son diferentes en Yahualica, el ganador es el que llega al u\u0301ltimo. Escribe un programa que dados los nombres de los concursantes como van cruzando la meta, imprima dichos nombres en orden de acuerdo al lugar que consiguieron en la competencia ( El que llego al u\u0301ltimo obtiene el primer lugar, el penu\u0301ltimo el segundo lugar, y asi\u0301 sucesivamente) .",
    "input": "Varios nombres de concursantes como van cruzando la meta. La entrada termina con el string \" # \" .",
    "output": "Los nombres en orden al lugar que ocuparon en la competencia. | | inputPABLOVANESSAMARIANADANIELAIVAN# | | outputIVANDANIELAMARIANAVANESSAPABLO| | end",
    "note": "",
    "topics": [
      "strings",
      "data structures"
    ],
    "id": 6818
  },
  {
    "title": "Construcciones ",
    "url": "https://omegaup.com/arena/problem/Construcciones-",
    "history": "Un di\u0301a Amehc estaba aburrido en la gran ciudad, asi que salio\u0301 a dar un paseo y compro\u0301 una postal. En esta postal se podi\u0301an apreciar varias construcciones perfectamente rectangulares ( casas, edificios, etc) , pero como sabes es difi\u0301cil determinar que tan lejos esta\u0301 cada construccio\u0301n, ya que depende de la perspectiva. Confundido por esto ( y sin nada ma\u0301s que hacer) ma\u0301gicamente Amehc determino\u0301 para cada posicio\u0301n ( de izquierda a derecha) la construccio\u0301n ma\u0301s alta que ahi\u0301 habi\u0301a. Al final saco\u0301 la altura de N posiciones, las escribio\u0301 en un papel y ese papel se lo entrego\u0301 a R2D2 para que resolviera el siguiente problema: Si no se sabe que\u0301 edificios esta\u0301n \" ma\u0301s al frente\" y cua\u0301les \" ma\u0301s atra\u0301s\" , \u00bfCua\u0301l es la mi\u0301nima cantidad de construcciones que pueden existir? - * * Nota: * * Recuerda que las construcciones tienen que ser perfectamente rectangulares. Ver caso de ejemplo para aclarar dudas.",
    "input": "En la primera li\u0301nea un entero N, la cantidad de posiciones para las cuales Amehc determino\u0301 su altura. En las siguiente li\u0301nea N enteros separados por un espacio, las alturas de cada posicio\u0301n. Considera que si la altura es cero significa que en esa posicio\u0301n no habi\u0301a ninguna construccio\u0301n.",
    "output": "La mi\u0301nima cantidad de construcciones que pueden existir.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 6771
  },
  {
    "title": "EasyStack",
    "url": "https://omegaup.com/arena/problem/EasyStack",
    "history": "Tienes una pila vaci\u0301a de nu\u0301meros enteros y se te proporcionara\u0301n algunas instrucciones. Estas instrucciones son las operaciones ba\u0301sicas de una pila ( Pop, Push, Top) . Tu tarea es aplicar estas instrucciones de la mejor manera en una pila e imprimir lo que sea necesario.",
    "input": "En la primera li\u0301nea un entero T de instrucciones. En las siguientes T li\u0301neas, un nu\u0301mero p por li\u0301nea que representa la instruccio\u0301n. Este nu\u0301mero p puede ser: - p = 1. ( Push) Esta instruccio\u0301n estara\u0301 seguida de un entero n en la misma linea. Debera\u0301s insertar el entero n en la pila. - p = 2. ( Pop) Esta instruccio\u0301n te indica que debes eliminar el elemento que este\u0301 ma\u0301s arriba en la pila. Si la pila se encuentra vaci\u0301a, no hagas nada. - p = 3. ( Top) Imprime el entero que se encuentre ma\u0301s arriba en la pila. Si la pila esta\u0301 vaci\u0301a, imprime * * \" Empty! \" * * ( sin comillas) .",
    "output": "Por cada instruccio\u0301n de imprimir ( p= 3) , imprime el elemento que se encuentre ma\u0301s arriba en la pila, o bien imprime * * \" Empty! \" * * ( sin comillas) .",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 6333
  },
  {
    "title": "Pila Interactivo",
    "url": "https://omegaup.com/arena/problem/COMI-Pila-Interactivo",
    "history": "Esta funcio\u0301n debe regresar el objeto que este\u0301 hasta arriba de la pila y sacarla de ella, es decir si en este momento la pila tiene los datos 3, 6, 9 y se manda a llamar ` saca( ) ` la funcion debera regresar 9 y la pila debe quedar solo con los datos 3, 6. En caso de que la pila este vaci\u0301a imprime - 1. # Rutina de EjemploA continuacio\u0301n se muestran las primeras llamadas de una rutina de ejemplo. | | inputagrega( 3) | | output- | | descriptionAl principio la pila esta vaci\u0301a al llamar por primera vez la pila queda un solo elemanto [ 3] | | inputagrega( 6) | | output- | | descriptionSe agrega el elemento y la pila queda[ 3, 6] | | inputagrega( 9) | | output- | | descriptionSe agrega el elemento y la pila queda[ 3, 6, 9] | | inputsaca( ) | | output9| | descriptionSe devuelve 9 porque es el elemento de hasta arriba y la pida queda [ 3, 6] | | inputsaca( ) | | output6| | descriptionSe devuelve 6 porque es el elemento de hasta arriba y la pida queda [ 3] | | inputsaca( ) | | output3| | descriptionSe devuelve 3 porque es el elemento de hasta arriba y la pida queda vaci\u0301a [ ] | | inputsaca( ) | | output- 1| | descriptionSe devuelve - 1 porque ya no hay mas elementos en la pila| | end# Restricciones0 \u2264 n \u2264 100, 000# Consideraciones* Se asegura que la pila nunca tendra\u0301 mas de 10, 000 elementos. libinteractive: download",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 6142
  },
  {
    "title": "Un banco con clientes no preferentes",
    "url": "https://omegaup.com/arena/problem/banco-clientes-no-preferentes",
    "history": "La sucursal del banco \" Dinero+ + \" dispone de dos filas para atender a sus clientes y e\u0301stas operan bajo poli\u0301ticas diferentes. La primera fila esta\u0301 destinada para clientes en buen estatus y opera bajo la poli\u0301tica de que el primer cliente en llegar es el primero en ser atendido. La segunda fila esta\u0301 destinada para clientes morosos y opera bajo la poli\u0301tica de que el u\u0301ltimo cliente en llegar es el primero en ser atendido. Cuando un cliente llega a la sucursal, el sistema le dice en que\u0301 fila debe formarse. Cuentas con una bita\u0301cora de eventos que indica en que\u0301 momento llego\u0301 cada cliente y en que\u0301 fila se formo\u0301, asi\u0301 como en que\u0301 momento se atendio\u0301 al siguiente cliente y de que\u0301 fila provino. Escribe un programa que determine en que\u0301 orden fueron atendidos los clientes.",
    "input": "Un entero N seguido de la secuencia de N eventos de la bita\u0301cora. Un evento en el que llega un cliente se describe con la letra E seguido del nu\u0301mero de fila en la que debe formarse y de su nombre. Un evento de atencio\u0301n a cliente se describe con la letra A seguido del nu\u0301mero de fila que se atiende. Puedes suponer que 0 \u2264 N \u2264 10000, que el nu\u0301mero de fila es 1 o 2, que los nombres de todos los clientes tienen una longitud de a lo mucho 10 letras minu\u0301sculas y que no existen eventos de atencio\u0301n para filas vaci\u0301as.",
    "output": "Para cada evento de atencio\u0301n a cliente, el nombre del cliente atendido.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 5607
  },
  {
    "title": "()[]{}<>",
    "url": "https://omegaup.com/arena/problem/ParentesisExtravagantes",
    "history": "Considera una cadena S de caracteres, que esta conformada solo por 8 posibles caracteres, ' < ' , ' > ' , ' ( ' , ' ) ' , ' ' , ' ' , ' [ ' , ' ] ' . Como sabra\u0301s, estos caracteres regularmente se utilizan para agrupar distintas cosas, ya sean operaciones, oraciones, etc, sin embargo, cuando son usadas debe cuidarse que la agrupacio\u0301n tenga sentido, por ejemplo \" ) ( [ ] \" \" no tiene sentido\" porque los primeros dos caracteres no agrupan nada. Un ejemplo de cadena que \" tiene sentido\" es [ ( ) ] , ya que cada pareja de caracteres puede emparejarse con otra para darle sentido a la agrupacio\u0301n. Formalmente, la cadena de caracteres ' S' \" tiene sentido\" si se cumple cuando menos 1 de las siguientes condiciones: a) S= \" \" , es decir , es una cadena vaci\u0301a. b) S es una concatenacio\u0301n de cadenas mas pequen\u0303as que \" tienen sentido\" . c) S = \" ' < ' Q' > ' \" o S= \" Q\" o S= \" [ Q] \" o S= \" ( Q) \" , donde Q es una cadena que \" tiene sentido\" mas pequen\u0303a que \" S\" . Tu tarea es la siguiente, dada una cadena de caracteres S , que estara\u0301 conformada solo por algunos de los siguientes caracteres ' < ' , ' > ' , ' ( ' , ' ) ' , ' ' , ' ' , ' [ ' , ' ] ' , debes encontrar el mi\u0301nimo numero de \" reemplazos\" que conviertan a S en una cadena que \" tiene sentido\" . Donde caracteres de apertura ( ' < ' , ' ( ' , ' ' , ' [ ' ) solo pueden cambiarse por otros caracteres de apertura, y caracteres de cerradura ( ' > ' , ' ) ' , ' ' , ' ] ' ) , solo pueden cambiarse por caracteres de cerradura.",
    "input": "Una cadena de caracteres S, sin espacios entre ellos.",
    "output": "Un solo entero, la mi\u0301nima cantidad de \" reemplazos\" que se pueden hacer a S para que \" tenga sentido\" . Si es imposible lograr que S \" tenga sentido\" con ninguna cantidad de reemplazos, debes imprimir \" imposible\" .",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "implementation",
      "strings"
    ],
    "id": 5308
  },
  {
    "title": "Lluvia de dinero",
    "url": "https://omegaup.com/arena/problem/Lluvia-de-dinero",
    "history": "En una isla desconocida, un habitante llamado Flint Locochon desarrollo un aparato que hace llover cajas llenas de dinero. Curiosamente estas cajas solo caen en un lugar de la isla, por lo cual van cayendouna encima de la otra. Y como esta\u0301n llenas de dinero los habitantes van y toman todas las cajas que pueden ( de arriba) . Flint Locochon necesita de tu ayuda para saber cuanto dinero tiene la caja que estaen la parte superior ( convenientemente Flint Locochon hizo que las cajas estuvieran etiquetadas con la cantidad de dinero que guardan) pero esto puede variar por dos cosas: 1. Que lluevan mas cajas. 2. Que un habitante tome cajas.",
    "input": "En la primera linea un numero N. En las siguientes N lineas una instruccio\u0301n que pueden ser de la forma p k, b k, o q. 1. Si es de la forma p k, significa que acaba de caer del cielo una nueva caja que guarda una cantidad k de dinero. 2. Si es de la forma b k significa que una persona llego\u0301 y tomo las k cajas que estaban hasta arriba ( Si un habitante se quiere llevar mas cajas de las que hay solo se podra\u0301 llevar las cajas que quedan) . 3. Si es de la forma q, Flint Locochon te pide que le digas cuanto dinero guarda la caja de la parte superior.",
    "output": "Para cada instruccio\u0301n de tipo q, dar como respuesta el valor correcto seguido de un salto de linea( Si no hay cajas debes omitir esta accio\u0301n) .",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 4993
  },
  {
    "title": "Guardias",
    "url": "https://omegaup.com/arena/problem/probC",
    "history": "El ladro\u0301n Ramo y su banda de delincuentes planean robar todos los edificios del puerto. Los edificios cuentan con seguridad en las puertas las 24 horas, por lo cual han decidido entrar por la parte de arriba de cada edificio. Para asaltar un edificio ellos tiran un cable desde el edificio de mayor altura pero mas cercano a cada lado del edificio, despue\u0301s ellos entran al edificio. Dada la altura de cada edificio tu tarea consiste en decirle a Ramo, para cada edificio, cual es la altura del edificio mas pro\u0301ximo pero mas alto hacia su izquierda y hacia su derecha. En caso de no existir edificio mas alto le debera\u0301s decir - 1. < strong> Ejemplo< / strong> Dadas las alturas de 4 edificios1 6 4 3- Los edificios mas altos para el primer edificio son: A la izquierda del edificio no hay otro edificio por lo cual es - 1. A la derecha del edificio el mas pro\u0301ximo y alto que el es de altura 6. - Para el segundo edificio: A la izquierda del edificio no hay otro mas alto por lo cual es - 1. A la derecha del edificio no hay otro mas alto por lo cual es - 1. - Para el tercer edificioA la izquierda es 6. A la derecha es - 1. - Para el cuarto edificioA la izquierda es 4. A la derecha es - 1. < strong> Entrada< / strong> En la primera li\u0301nea un entero N que indica el nu\u0301mero de edificios. ( 1 < = N < = 1, 000, 000) En la segunda li\u0301nea N enteros h_ i que representan la altura de cada edificio. ( 1 < = h_ i < = 10^ 9) < strong> Salida< / strong> Dos lineas con N enteros cada una. La primera linea con la altura del edificio mas pro\u0301ximo y mas alto hacia su izquierda de cada edificio. La segunda linea con la altura del edificio mas pro\u0301ximo y mas alto hacia su derecha de cada edificio. | | input41 6 4 3| | output- 1 - 1 6 46 - 1 - 1 - 1| | input61 6 4 2 8 10| | output- 1 - 1 6 4 - 1 - 16 8 8 8 10 - 1| | end< strong> Subtarea 1 ( 16 puntos) < / strong> 1 < = N, h_ i < = 100< strong> Subtarea 2 ( 25 puntos) < / strong> 1 < = N, h_ i < = 1, 000< strong> Subtarea 3 ( 25 puntos) < / strong> 1 < = N, h_ i < = 100, 000< strong> Subtarea 2 ( 34 puntos) < / strong> 1 < = N < = 1, 000, 0001 < = h_ i < = 10^ 9",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 4937
  },
  {
    "title": "M\u00e1ximo Elemento en la Pila",
    "url": "https://omegaup.com/arena/problem/Maximo-Elemento-en-la-Pila",
    "history": "Tienes una secuencia vaci\u0301a y se te dan N preguntas. Cada pregunta puede ser de alguno de los siguientes tipos: * ` 1 x` - Agrega el elemento ` x` al tope de la pila. * ` 2` - Borra el elemento en el tope de la pila. * ` 3` - Imprime el ma\u0301ximo elemento en la pila.",
    "input": "La primera li\u0301nea contiene un entero N. Las siguientes N li\u0301neas cada una de ellas tendra\u0301 alguna pregunta del estilo mencionado anteriormente ( se garantiza que cada una de las preguntas son va\u0301lidas) .",
    "output": "Para cada pregunta de tipo ` 3` , imprimir el ma\u0301ximo elemento en la pila.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 4131
  },
  {
    "title": "Par\u00e9ntesis Balanceados",
    "url": "https://omegaup.com/arena/problem/Parentesis-Balanceados",
    "history": "Dada una secuencia consistente de pare\u0301ntesis, determina si la expresio\u0301n esta\u0301 balanceada. Una secuencia de pare\u0301ntesis esta\u0301 balanceada si cada pare\u0301ntesis abierto puede ser emparejado u\u0301nicamente con un pare\u0301ntesis de cierre. Tambie\u0301n el intervalo de elementos dentro de e\u0301l debe estar balanceado. Tu tendra\u0301s tres tipos de pare\u0301ntesis: ` ( ` , ` ` y ` [ ` . * ` [ ( ) ] ` - Este SI es un conjunto balanceado. * ` [ ( ] ) ` - Este NO es un conjunto balanceado.",
    "input": "La primera linea de la entrada contiene un nu\u0301mero T, que sera\u0301 el nu\u0301mero de casos. Las siguientes T li\u0301neas contienen una cadena S de pare\u0301ntesis.",
    "output": "Para cada caso, imprime en una nueva li\u0301nea \" SI\" si el conjunto de pare\u0301ntesis esta\u0301 balanceado, en caso contrario imprime \" NO\" .",
    "note": "",
    "topics": [
      "strings",
      "data structures"
    ],
    "id": 4100
  },
  {
    "title": "Conjunto",
    "url": "https://omegaup.com/arena/problem/Conjunto",
    "history": "Escribe un programa que decida si una cadena pertenece al conjunto S de cadenas formadas por los caracteres ' a' , ' b' , ' c' , ' d' , ' ( ' , ' ) ' y que tienen sus pare\u0301ntesis balanceados ( es decir, cada pare\u0301ntesis que abre tiene un pare\u0301ntesis de cierre, el cual aparece despue\u0301s) .",
    "input": "Una cadena de a lo ma\u0301s 100 caracteres.",
    "output": "Un 1 si la cadena de entrada pertenece a S, o un 0 en caso contrario.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 4086
  },
  {
    "title": "Par\u00e9ntesis Regulares",
    "url": "https://omegaup.com/arena/problem/Parentesis-Regulares",
    "history": "Tienes una cadena de caracteres con pare\u0301ntesis que abren y cierran. Decimos que una cadena de caracteres con parentesis es regular si cumple lo siguiente: - Una cadena vaci\u0301a \" \" se considera regular. - Si A y B son cadenas de pare\u0301ntesis regulares, entonces la cadena \" ( A) B\" es regular. Por ejemplo, las cadenas \" ( ( ) ) ( ) \" , \" ( ) \" y \" ( ( ) ( ( ) ) ) \" son regulares, mientras que \" ) ( \" , \" ( ( ) \" y \" ( ( ) ) ) ( \" no lo son. Dada una cadena de caracteres con pare\u0301ntesis, tienes que encontrar la subcadena ma\u0301s grande de tal forma que sea * * regular* * . De igual forma, tienes que encontrar la cantidad de subcadenas regulares que tengan la longitud ma\u0301s grande.",
    "input": "En la primera linea la cadena de caracteres de pare\u0301ntesis.",
    "output": "Dos enteros, la longitud de la subcadena regular ma\u0301s grande y la cantidad de subcadenas que tienen esta longitud. En caso de que no exista ninguna subcadena regular, tienes que imprimir \" 0 1\" .",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 3878
  },
  {
    "title": "Pociones y pastelillos",
    "url": "https://omegaup.com/arena/problem/Pociones-y-pastelillos",
    "history": "Como de costumbre, otra vez Alicia era ma\u0301s pequen\u0303a de lo que queri\u0301a. Sin embargo, esta vez estaba preparada pues trai\u0301a consigo algunas pociones y pastelillos. Cada pocio\u0301n la haci\u0301a crecer una altura particular y cada pastelillo deshaci\u0301a el efecto de la pocio\u0301n ma\u0301s reciente que siguiera activa. Por ejemplo, si Alicia tomaba dos pociones y luego comi\u0301a dos pastelillos, el primer pastelillo deshaci\u0301a el efecto de la segunda pocio\u0301n y el segundo pastelillo deshaci\u0301a el efecto de la primera pocio\u0301n. \u00bfCua\u0301nto crecio\u0301 Alicia despue\u0301s de beber algunas pociones y comer algunos pastelillos?",
    "input": "La altura inicial A de Alicia y la cantidad N de pociones y pastelillos que tomo\u0301. Posteriormente N renglones, cada ellos con una accio\u0301n de Alicia: una ' C' seguida de un entero H significa que Alicia bebio\u0301 una pocio\u0301n que la hace crecer H unidades, mientras que una ' D' significa que Alicia comio\u0301 un pastelillo que deshace el efecto de la u\u0301ltima pocio\u0301n activa. Puedes suponer que 1 le; N le; 1000000 y que 1 < = A, H < = 100. Tambie\u0301n puedes suponer que en ningu\u0301n momento Alicia ha comido ma\u0301s pastelillos que las pociones que haya tomado.",
    "output": "La altura final de Alicia.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 3647
  },
  {
    "title": "Ejercicio_STOCK",
    "url": "https://omegaup.com/arena/problem/Ejercicio_STOCK",
    "history": "Ejercicio el Stock Control. Una cadena comercial adquirio un equipo tecnologico llamado \" STOCK CONTROL\" el cual almacena mercancia y controla su venta al publico de acuerdo a sus fechas de caducidad. Para dicho control se aplica la teoria de PILAS ( Ultimo en entrar, Primero en salir) . PROBLEMA. Escribe un programa que muestre lista de \" N\" productos, almacenados en el STOCK; asi como la lista inversa de estos, para identificar el producto que debe ser comercializado inmediatamente. DATOS DE ENTRADA. Deberas ingresar un valor \" N\" que represente la cantidad de productos en el STOCK, asi como una lista \" P\" que representa los productos. DATOS DE SALIDA. Deberas mostrar la lista de productos, de acuerdo a la teoria de \" PILAS\" , en donde el primer producto representa el que se debe comercializar inmediatamente. EJEMPLO DATOS DE ENTRADA. 410897EJEMPLO DATOS DE SALIDA. 79810",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 2754
  },
  {
    "title": "En mi computadora si funciona!",
    "url": "https://omegaup.com/arena/problem/En-mi-computadora-si-funciona",
    "history": "* * Descripcio\u0301n* * El COOI suele divertirse mucho con los comentarios que hacen los oli\u0301mpicos con cada problema y uno de los cla\u0301sicos es: En mi computadora si funciona! Usualmente son errores sinta\u0301cticos, pero los oli\u0301mpicos son muy necios. Por eso te encargamos que nos ayudes a hacer un programa que ayude a los oli\u0301mpicos a corroborar que no tenga errores sinta\u0301cticos de los siguientes caracteres: ( ) [ ] Ya que usualmente olvidan cerrar sus sentencias. * * Entrada* * Un co\u0301digo de cualquier lenguaje de programacio\u0301n. * * Salida* * Una palabra: \u201ccorrecto\u201d si el co\u0301digo esta sinta\u0301cticamente bien e \u201cincorrecto\u201d si no lo esta\u0301 ( sin comillas) . * * Ejemplo: * * * * Entrada* * < pre> < code> int main( ) printf( \u201cHola Mundo\u201d) ; < / pre> < / code> * * Salida* * correcto* * Entrada* * < pre> < code> public class Test( ) public static void main( String . . . args) System. out. println( \u201cHola Mundo\u201d) ) ; < / pre> < / code> * * Salida* * incorrecto* * Limites* * Un co\u0301digo sorpresa",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": 2604
  },
  {
    "title": "Los beb\u00e9s marcianos",
    "url": "https://omegaup.com/arena/problem/Los-bebes-marcianos",
    "history": "Durante su estancia con los marcianos verdes, John Carter pudo ver co\u0301mo los bebe\u0301s marcianos recie\u0301n nacidos salen de sus incubadoras. Las mujeres marcianas, formadas en una fila, son las encargadas de recoger a los bebe\u0301s y evitar que escapen. Sin embargo y para permitir que los bebe\u0301s tengan la oportunidad de caminar un poco, el primer bebe\u0301 que sale es recogido por la u\u0301ltima mujer de la fila, la cual posteriormente sale de la fila con el bebe\u0301 en brazos. Este proceso se repite mientras sigan saliendo bebe\u0301s de la incubadora. Este an\u0303o los bebe\u0301s nacieron antes de tiempo y algunas mujeres apenas se esta\u0301n formando mientras los bebe\u0301s esta\u0301n saliendo. Afortunadamente, se sabe con certeza que siempre habra\u0301 una mujer formada cuando salga un bebe\u0301. Dado el orden en el que los bebe\u0301s salen y las mujeres se forman, ayuda a determinar que\u0301 mujer recogera\u0301 a que\u0301 bebe\u0301.",
    "input": "Un entero N seguido de N renglones, cada uno con un caracter E y una cadena S: si E = ' B' entonces acaba de salir un bebe\u0301 de nombre S; si E = ' F' entonces una mujer de nombre S acaba de formarse en la fila. Puedes suponer que 1 le; N le; 100000, que los nombres son distintos y de a lo mucho 10 letras, todas mayu\u0301sculas.",
    "output": "Para cada bebe\u0301 que sale cuando E = ' B' , el nombre del bebe\u0301 seguido del nombre de la mujer que lo recogera\u0301.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 2502
  },
  {
    "title": "Atestamiento del callej\u00f3n",
    "url": "https://omegaup.com/arena/problem/Atestamiento-del-Callejon",
    "history": "Los alumnos del Coding Rush fueron tantos que el estacionamiento del ITAM termino\u0301 lleno, por lo que los sen\u0303ores del valet parking decidieron usar el callejo\u0301n de Ri\u0301o Hondo para estacionar los autos. Como el callejo\u0301n tiene una sola entrada, el valet parking metio\u0301 los autos uno por uno conforme llegaron, por lo que el que llego\u0301 al u\u0301ltimo es el que esta\u0301 en la entrada. Tu tarea es, dado el orden en el que se metieron los autos, decirle a los del valet parking cua\u0301ntos autos deben sacar para sacar el auto que les solicitaron.",
    "input": "Leera\u0301s un nu\u0301mero N que representa la cantidad de autos que esta\u0301n estacionados en el callejo\u0301n. Cada una de las siguientes li\u0301neas contiene la placa de los autos en el orden en el que llegaron. La siguiente li\u0301nea es la placa del auto que fue solicitado.",
    "output": "Cua\u0301ntos autos tienen que sacar para entregar el que fue solicitado. Si el auto no esta\u0301 estacionado en el callejo\u0301n, debera\u0301s imprimir \" No existe el auto\" . | | input5256369720964012720| | output3| | descriptionHay que sacar los autos 012, 964 y 720 para poder sacar el 720. | | end# Restricciones* 0 \u2264 N \u2264 10, 000* Las placas no tienen ma\u0301s de 7 di\u0301gitos.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 1938
  },
  {
    "title": "Las corazas interminables de Humbaba",
    "url": "https://omegaup.com/arena/problem/corazas",
    "history": "Antes de enfrentarse a Humbaba, Gilgamesh tuvo un suen\u0303o favorable. En dicho suen\u0303o Shamash le revelo\u0301 que Humbaba podi\u0301a revestirse hasta con C corazas protectoras y que si en algu\u0301n momento no teni\u0301a ninguna puesta entonces seri\u0301a vulnerable. Mientras tanto, Humbaba decidi\u0301a que\u0301 corazas ponerse. Comenzando con ninguna coraza, Humbaba podri\u0301a decir el nombre de alguna y se la pondri\u0301a a menos que no pudiera ponerse ma\u0301s, o bien, podri\u0301a decidir quitarse la u\u0301ltima que se puso a menos que ya no tuviera alguna puesta. Escriba un programa que siga las instrucciones de Humbaba e informe a cada paso el resultado.",
    "input": "Dos enteros C y D que representan el nu\u0301mero ma\u0301ximo de corazas que Humbaba puede ponerse y la cantidad de instrucciones, seguidos de D li\u0301neas que corresponden a las instrucciones dadas por Humbaba. Cada li\u0301nea puede contener la palabra \" QUITA\" la cual indica que Humbaba debe quitarse una coraza, o bien la palabra \" PONTE\" , que ira\u0301 seguida del nombre de una coraza que Humbaba debera\u0301 ponerse si es que puede. Puede suponer que solo se utilizara\u0301n nombres de corazas de a lo mucho 10 letras mayu\u0301sculas del alfabeto ingle\u0301s. Adema\u0301s 1 \u2264 C, D \u2264 10, 000.",
    "output": "La salida sera\u0301n D li\u0301neas que corresponden a cada una de las instrucciones. Cuando la instruccio\u0301n pueda ser ejecutada por Humbaba debera\u0301 escribir el nombre de la coraza involucrada o en caso contrario debera\u0301 escribir la palabra \" IMPOSIBLE\" .",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 1840
  },
  {
    "title": "Nieves y el merge-sort",
    "url": "https://omegaup.com/arena/problem/Nieves-y-el-merge-sort",
    "history": "# Nieves ( el viejo) y el Merge- SortEl merge- sort es un algoritmo que ordena, ya sea creciente o decreciente, un arreglo. La idea viene de partir el arreglo a ordenar en 2 subarreglos del mismo taman\u0303o, ordenarlos y luego unir estos 2 subarreglos de tal forma que el arreglo unido siga ordenado. Para unir e\u0301stos dos subarreglos se mete cada uno en una cola( * ) , se va comparando cada elemento inicial de las 2 colas, se decide cual es el menor ( o mayor) y se agrega dicho elemento al arreglo ordenado ( y se elimina el elemento de la cola corespondiente) . Esto se hace hasta que no queden elementos en las colas. Para ordenar los subarreglos se puede usar, recursivamente, el merge- sort. La recursio\u0301n acaba cuando se llega a subarreglos triviales ( de taman\u0303o 1) . Un ejemplo: < br> ( 8 7 6 5 4 3 2 1) emsp; emsp; < - arreglo a ordenar< br> ( 8 7 6 5) \u2013 ( 4 3 2 1) emsp; < - subarreglos< br> ( 5 6 7 8) \u2013 ( 1 2 3 4) emsp; < - se ordenan ( recursion) y se meten a sus respectivas colas, donde los primero elementos a comparar sera\u0301n el ( 5) y el ( 1) , por lo tanto se va a escoger el elemento ( 1) ; luego el ( 5) con el ( 2) , luego el ( 5) con el ( 3) . . . quedando: < br> ( 1 2 3 4 5 6 7 8) Nieves ( el viejo) , despue\u0301s de tantos an\u0303os sin programar, decidio implementar e\u0301ste algoritmo para ordenar un arreglo de manera creciente. Sin embargo cometio\u0301 un error a la hora de meter los subarreglos ordenados a las colas: El subarreglo izquierdo si lo metio\u0301 a una cola, sin embargo el subarreglo derecho lo metio\u0301 a una pila( * * ) . El resto del algoritmo lo siguio\u0301 al pie de la letra. < br> < br> Usando el mismo ejemplo, a la hora de unir los subarreglos, se comparari\u0301a el elemento ( 5) con el elemento ( 4) ; luego el elemento ( 5) con el ( 3) , luego el ( 5) con el ( 2) . . . quedando: < br> ( 4 3 2 1 5 6 7 8) < br> Tu labor sera\u0301 imitar el co\u0301digo de Nieves para ayudarle en un futuro no muy lejano. < br> ( * * * * ) La cola es una estructura de datos llamada FIFO = First In First Out ( primero en llegar, primero en salir) . < br> ( * * * * * ) La pila es una estructura de datos llamada FILO = First In Last Out ( primero en llegar, u\u0301ltimo en salir) .",
    "input": "Primera li\u0301nea: n Cantidad de elementos a ordenar. Segunda li\u0301nea: x_ 1 x_ 2 . . . x_ n Los n elementos a ordenar separados por un espacio.",
    "output": "Los n nu\u0301mero separados por un espacio y ordenados segu\u0301n el algoritmo de Nieves.",
    "note": "",
    "topics": [
      "data structures",
      "sortings",
      "implementation"
    ],
    "id": 1342
  },
  {
    "title": "Dos Estructuras",
    "url": "https://omegaup.com/arena/problem/Dos-Estructuras",
    "history": "Despue\u0301s de la clase en el Coding Rush te intereso\u0301 comparar las nuevas estructuras de datos que aprendiste. Para ello, quieres ver que\u0301 pasari\u0301a si haces metes o sacas datos con una pila o una cola. Escribe un programa que utilice una pila y una cola e imprima el resultado de hacer pop/ remove a cada una.",
    "input": "Un entero N: la cantidad de operaciones a ejecutar. Despue\u0301s, N operaciones. Si la operacio\u0301n comienza con \" meter datos\" , vendra\u0301 a continuacio\u0301n otro entero que debes hacer push en la pila y offer en la cola. Si la li\u0301nea contiene un \" sacar datos\" , debes imprimir el resultado de hacer pop a la pila y remove a la cola.",
    "output": "Para cada \u201csacar datos\u201d, una li\u0301nea con el resultado de hacer pop a la pila y remove a la cola, separados por un espacio.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 1055
  },
  {
    "title": "A jugar 2048",
    "url": "https://omegaup.com/arena/problem/A-jugar-2048",
    "history": "De tanto jugar 2048 comenzaste a tener suen\u0303os raros. El suen\u0303o se parece mucho al juego: tienes una torre gigante donde comenzara\u0301n a caer bloques con nu\u0301meros que tienen potencias de dos ( 2, 4, 8, 16, 32 . . . ) . Cada que cae un bloque, ocurre lo siguiente: mientras los dos bloques que esta\u0301n hasta arriba de la torre sean iguales, ambos se combinan en un so\u0301lo bloque con valor igual a la suma de los bloques que se combinaron. Esto ocurre hasta que ya no haya bloques iguales juntos. En ese momento, cae el siguiente bloque. Escribe un programa que, dada la secuencia de bloques que caera\u0301n, diga co\u0301mo queda la torre de bloques al final.",
    "input": "Un entero N que es la cantidad de bloques que caera\u0301n, seguido de N li\u0301neas con los nu\u0301meros escritos en cada uno de esos bloques.",
    "output": "Un entero: el taman\u0303o de la torre al final, seguido de los valores de los bloques; uno por li\u0301nea y de arriba hacia abajo.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 1052
  },
  {
    "title": "Operaciones con una pila",
    "url": "https://omegaup.com/arena/problem/ocp",
    "history": "Considera una pila de enteros que tiene dos operaciones: ( a) introduce el entero a en la pila y ( a) elimina los a enteros en el tope de la pila ( suponiendo que hay suficientes) . Se tiene un entero n y un vector a con n enteros positivos a_ 1, a_ 2, . . . , a_ n. Escribe un programa que comience con una pila vaci\u0301a y que procese uno por uno los elementos de a ( comenzando con a_ 1) de la siguiente forma: si al procesar el elemento a_ i la pila tiene menos de a_ i elementos entonces ( a_ i) , de lo contrario ( a_ i) . Por ejemplo, si n = 7 y a = ( 2, 7, 1, 8, 2, 8, 2) entonces se realizan las operaciones ( 2) , ( 7) , ( 1) , ( 8) , ( 2) , ( 8) y ( 2) , quedando 2 y 8 en la pila. Tu programa debe encontrar la cantidad p de elementos que quedan en la pila y el orden en el que e\u0301stos saldri\u0301an si los elimina\u0301ramos uno por uno.",
    "input": "Un nu\u0301mero entero n seguido de un renglo\u0301n con n nu\u0301meros enteros a_ 1, a_ 2, . . . , a_ n separados por espacios. Puedes suponer que todos los enteros involucrados valen de 1 a 1000.",
    "output": "Un nu\u0301mero entero p seguido de un renglo\u0301n con p nu\u0301meros enteros.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 1019
  },
  {
    "title": "Documentos de marcado equilibrados",
    "url": "https://omegaup.com/arena/problem/dme",
    "history": "Como sabes, muy pocas pa\u0301ginas de internet se ven igual usando exploradores diferentes. Una herramienta muy importante paraprevenir incompatibilidades es la validacio\u0301n de co\u0301digo escrito en lenguajes de marcado y aunque para pa\u0301ginas web esto se puedecomplicar bastante, tu labor sera\u0301 ma\u0301s sencilla. Para nuestros fines, una etiqueta de apertura es un identificador compuesto por caracteres alfanume\u0301ricos y guiones bajos ( aunque porregla el primer cara\u0301cter del identificador no puede ser un nu\u0301mero) y su etiqueta de cierre sera\u0301 el mismo identificador precedido poruna / . Puede haber un nu\u0301mero arbitrario de espacios en blanco entre etiquetas. Las etiquetas tienen una posicio\u0301n numerada de formaconsecutiva a partir del 1. El documento tiene una profundidad inicial de 0, cada vez que se encuentra una etiqueta de apertura la profundidad aumenta en 1 ycada vez que se encuentra una de cierre la profundidad disminuye en 1. Un documento de marcado esta\u0301 mal formado si: 1. Tiene etiquetas inva\u0301lidas ( 123_ gato es inva\u0301lida pues inicia en nu\u0301mero) . 2. Alguna etiqueta de apertura no tiene su cierre o viceversa. 3. El cierre de una etiqueta externa ocurre antes del cierre de una etiqueta interna ( por ejemplo aa bb / bb / aa es correcto pero aabb / aa / bb no lo es) .",
    "input": "Una li\u0301nea de texto de no ma\u0301s de 10, 000 caracteres. Puedes suponer que la longitud de las etiquetas contenidasdentro del texto no superara\u0301 los 100 caracteres cada una.",
    "output": "Una letra mayu\u0301scula seguida de un nu\u0301mero entero. En el caso de que el documento este\u0301 bien formado entonces laletra debe ser V y el nu\u0301mero entero debe ser la profundidad ma\u0301xima. En el caso de que el documento este\u0301 mal formadoentonces la letra debe ser I y el nu\u0301mero entero debera\u0301 ser la posicio\u0301n de la primera etiqueta que provoque un error.",
    "note": "",
    "topics": [
      "strings",
      "data structures"
    ],
    "id": 1003
  },
  {
    "title": "Orden de las hojas",
    "url": "https://omegaup.com/arena/problem/Orden-de-las-hojas",
    "history": "Un amigo tuyo apellidado Roble es aficionado a los a\u0301rboles binarios y ha inventado un juego MUY divertido que consta de 4 sencillos pasos: 1. Inicialmente Roble dibuja un a\u0301rbol binario de bu\u0301squeda con n ve\u0301rtices numerados de 1 a n. Dado que es un a\u0301rbol binario de bu\u0301squeda, para cada ve\u0301rtice v, el hijo derecho de v ( si existe) es mayor que v, y el hijo izquierdo de v ( si existe) es menor que v. 2. Luego, Roble escribe en un papel, los nu\u0301meros de todas las hojas del a\u0301rbol en orden descendente. 3. Posteriormente Roble borra las hojas del a\u0301rbol que dibujo\u0301( quedando un nuevo a\u0301rbol dibujado) . 4. Si no ha borrado todos los ve\u0301rtices, regresa al paso 2. Por ejemplo, si Roble dibuja inicialmente el siguiente a\u0301rbol: ! [ Entrada] ( 1. jpg) E\u0301l escribira\u0301 en la hoja 8 6 4 1 7 3 2 5. Roble te reta a que le digas que\u0301 a\u0301rbol dibujo\u0301 inicialmente. # ProblemaDebes escribir un programa que dado el o\u0301rden en que Roble escribio\u0301 los nu\u0301meros que identifican a cada ve\u0301rtice, encuentre el recorrido en pre- o\u0301rden del a\u0301rbol binario de bu\u0301squeda que Roble dibujo\u0301.",
    "input": "Li\u0301nea 1: Solamente el nu\u0301mero entero nLi\u0301nea 2: n nu\u0301meros enteros separados por espacios, donde el i- e\u0301simo nu\u0301mero de esta li\u0301nea representa el i- e\u0301simo nu\u0301mero que Roble escribio\u0301.",
    "output": "Li\u0301nea 1: n nu\u0301meros representando el recorrido en preorden del a\u0301rbol binario. Donde el i- e\u0301simo nu\u0301mero debera\u0301 representar el i- e\u0301simo ve\u0301rtice que se visita durante el recorrido.",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "data structures"
    ],
    "id": 778
  },
  {
    "title": "Descarga en el puerto",
    "url": "https://omegaup.com/arena/problem/Descarga-en-el-puerto",
    "history": "A los grandes puertos llegan grandes contenedores. Cuando descargan los contenedores necesitan utilizar grandes gru\u0301as. La forma en la que descargan es la siguiente: el primer contenedor es tomado del barco y puesto en un apartado especial del muelle, el siguiente contenedor es tomado del barco y colocado encima del contenedor que ya estaba en el muelle. Es decir, los contenedores que descargan de los barcos son apilados en el muelle. Luego los contenedores son transportados a bodegas.",
    "input": "Leera\u0301s por filas hasta llegar al fin de archivo. Cada fila puede comenzar con las letras D, P o\u0301 L. Si comienza con la letra D, significa que se esta\u0301 descargando un contenedor y seguira\u0301 su nu\u0301mero de folio. Si la letra es P, sigue un nu\u0301mero de folio y significa que alguien pregunta cua\u0301ntos contenedores es necesario remover para obtener el contenedor con el folio proporcionado. Si la letra es T, significa que el contenedor de arriba es transportado a una bodega.",
    "output": "Por cada fila que comience con las letras P, debes imprimir el nu\u0301mero de contenedores necesarios para obtener el contenedor con el folio proporcionado.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 451
  },
  {
    "title": "Plantas Vs Plantas",
    "url": "https://omegaup.com/arena/problem/plantas-vs-plantas",
    "history": "# Plantas vs PlantasLas plantas carni\u0301voras se han vuelto locas y se convirtieron en plantas cani\u0301bales, es decir, ahora se comen entre ellas. Las plantas esta\u0301n numeradas de 1 a N de acuerdo a su taman\u0303o, siendo 1 la ma\u0301s pequen\u0303a. Las plantas han sido colocadas en una li\u0301nea, todas mirando hacia la derecha de tal manera que cada planta so\u0301lo puede comerse a la planta que esta\u0301 a su derecha, siempre y cuando sea ma\u0301s pequen\u0303a. Cada planta tarda un minuto en digerir a cualquier otra y no puede comerse a otra mientras esta\u0301 digiriendo, pero si\u0301 puede comerse a otra que este\u0301 digiriendo. A pesar de ser carni\u0301voras siguen siendo muy respetuosas, asi\u0301 que decidieron un orden para comer. Van tomando turnos, de la ma\u0301s pequen\u0303a a la ma\u0301s grande y al final esperan a que todas terminen de digerir para iniciar de nuevo. ! [ Planta carni\u0301vora] ( carni. png) Tu tarea es, dada la cantidad de plantas y su orden, decir cua\u0301nto tiempo se tardara\u0301n en llegar a un estado en el cual ninguna planta pueda comer a otra y todas hayan terminado de digerir.",
    "input": "Li\u0301nea 1: Un entero: N, el nu\u0301mero de plantas. Li\u0301nea 2: N enteros de 1 a N, el orden en el cual se encuentran las plantas.",
    "output": "El nu\u0301mero de minutos que tienen que transcurrir para que las plantas no se puedan comer entre ellas y todas las plantas que queden ya hayan terminado de digerir.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 252
  },
  {
    "title": "Destruyendo Edificios",
    "url": "https://omegaup.com/arena/problem/DesEdificios",
    "history": "# Destruyendo EdificiosComo el Agente Solid Nieves sigue atrapado elevando nu\u0301meros apotencias ridi\u0301culamente grandes, el malvado Dr. Lira aprovecho\u0301 paradeshacerse del A\u0301rea Limi\u0301trofe. Para ello, construyo\u0301 un rayo la\u0301serque le permite destruir edificios de la ciudad de Danville. La ciudad consiste de N edificios bidimensionales colocados enuna li\u0301nea. Adema\u0301s, todos los edificios tienen ancho 1. El rayo la\u0301ser so\u0301lo puede destruir una seccio\u0301n rectangular dela ciudad, y ocupa tanta energi\u0301a que so\u0301lo se puede disparar unavez. Como ocupa tanta energi\u0301a, disparar el rayo a una regio\u0301n queno consista completamente de edificios le saldri\u0301a demasiado caro. El Dr. Lira quiere maximizar el a\u0301rea destrui\u0301da por su rayo. Ayu\u0301daloa encontrar dicha a\u0301rea, considerando que no puede dispararle a unaseccio\u0301n que contenga espacios vaci\u0301os.",
    "input": "En la primer li\u0301nea, N, la cantidad de edificios. En la segundali\u0301nea, las alturas de los edificios en el orden en el que seencuentran.",
    "output": "El a\u0301rea ma\u0301xima del recta\u0301ngulo al que le puede disparar.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 245
  },
  {
    "title": "Las letras del \"BASTA\"",
    "url": "https://omegaup.com/arena/problem/Las-letras-del-BASTA",
    "history": "El profe acaba de lanzar un reto entre sus dos grupos de Programacio\u0301n. Se batira\u0301n en un duelo de \" Basta\" y el grupo que resulte ganador, se llevara\u0301 30 puntos en la u\u0301ltima unidad. Para el juego se tiene una ruleta con N letras del alfabeto. La ruleta se puede girar con una fuerza F en cualquiera de los dos sentidos. Un giro con fuerza F = 1 mueve la ruleta en una posicio\u0301n en sentido de las manecillas del reloj, mientras que un giro con fuerza F = - 1, la mueve en una posicio\u0301n en el sentido inverso. Tu\u0301 quieres tener una ventaja para tu grupo, y como buen programador, has decidido crear un programa que permita saber en que\u0301 letra caera\u0301 la ruleta antes de que esta termine de girar.",
    "input": "* Un entero N que determine la cantidad de letras que tendra\u0301 la ruleta. * En seguida una cantidad indefinida de giros representados por un entero F_ i. * Puedes asumir que al inicio del juego, la ruleta siempre esta\u0301 en la posicio\u0301n de la letra A. *",
    "output": "Por cada F_ i de entrada, una li\u0301nea con la letra en la que caera\u0301 la ruleta despue\u0301s de ese giro.",
    "note": "",
    "topics": [
      "math",
      "data structures"
    ],
    "id": 16327
  },
  {
    "title": "Navegador web",
    "url": "https://omegaup.com/arena/problem/Navegador-web",
    "history": "Los navegadores son herramientas que nos permiten visualizar pa\u0301ginas o sitios web. Entre sus funciones se incluye una que nos permite ir hacia atra\u0301s o hacia adelante de acuerdo a las pa\u0301ginas visitadas. En este ejercicio, simulara\u0301s esa funcionalidad mediante estructuras de datos.",
    "input": "Una cantidad indefinida de caracteres V ( visitar) , A ( anterior) , S ( siguiente) . La entrada V vendra\u0301 acompan\u0303ada de un string P que determinara\u0301 la pa\u0301gina a visitar. El programa finalizara\u0301 cuando se lea el caracter T.",
    "output": "- Cuando se lea V, la pa\u0301gina visita. - Cuando se lea A, la pa\u0301gina anterior ( si existe) . - Cuando se lea S, la pa\u0301gina siguiente ( si existe) .",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 16320
  },
  {
    "title": "Evitando vestir siempre igual",
    "url": "https://omegaup.com/arena/problem/Evitando-vestir-siempre-igual",
    "history": "En tu escuela son muy criticones y cuando alguien usa una vestimenta que hace poco tiempo uso\u0301, no tardan en hace\u0301rselo notar. Cuentas con una coleccio\u0301n de N vestimentas numeradas de 1 a N y sabes que tendra\u0301s que asistir M di\u0301as a la escuela. En tu escuela hay cinco grupos ( identificados por las letras * A* , * B* , * C* , * D* y * E* ) y sabes con que\u0301 grupos tomara\u0301s clase cada di\u0301a. Para cada di\u0301a, deseas elegir la vestimenta que hace ma\u0301s tiempo no te hayan visto usar tus compan\u0303eros de ese di\u0301a. Si varias vestimentas esta\u0301n empatadas con respecto a ese criterio, deseas usar la de menor nu\u0301mero porque es la que ma\u0301s te gusta. Inicialmente, ninguno de tus compan\u0303eros ha visto ninguna de tus vestimentas. Escribe un programa que determine que\u0301 vestimenta usar cada di\u0301a.",
    "input": "Dos enteros N y M seguidos de M cadenas formadas por un subconjunto no vaci\u0301o de las letras * A* , * B* , * C* , * D* y * E* , las cuales respetan dicho orden de aparicio\u0301n de las letras. Puedes suponer que 1 \u2264 N \u2264 10^ 4 y que 1 \u2264 M \u2264 10^ 6.",
    "output": "Para cada uno de los M di\u0301as, un entero que sea el nu\u0301mero de la vestimenta a usar ese di\u0301a.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15963
  },
  {
    "title": "La N-\u00e9sima IP",
    "url": "https://omegaup.com/arena/problem/La-N-esima-IP",
    "history": "La siguiente es una direccio\u0301n IPv4 privada de clase A: 10. 0. 0. 0. Sabemos que con esta direccio\u0301n podemos direccionar hasta 2^ 24- 2 dispositivos. Pero, \u00bfpodri\u0301as determinar cua\u0301l es la direccio\u0301n IP que le corresponde al N_ esimo dispositivo?",
    "input": "- Un entero T que indica el nu\u0301mero de direcciones a encontrar. - En seguida, T nu\u0301meros enteros que representan la N_ esima direccio\u0301n IP a encontrar.",
    "output": "T li\u0301neas indicando la N_ esima direccio\u0301n IP solicitada en la entrada.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15931
  },
  {
    "title": "Cifrado circular inverso con anclaje",
    "url": "https://omegaup.com/arena/problem/Cifrado-circular-inverso-con-anc",
    "history": "Marti\u0301n y Cuco de la clase de programacio\u0301n ba\u0301sica idearon un me\u0301todo para enviarse mensajes cifrados. A su me\u0301todo lo bautizaron como \" cifrado circular inverso con anclaje\" . Dados un mensaje sin cifrar S y un valor posicional de anclaje A, se procede a realizar lo siguiente: 1. El caracter ubicado en la posicio\u0301n de anclaje se convierte en el primer caracter de la cadena. 2. Los caracteres ubicados antes de la posicio\u0301n de anclaje, se colocan al final de la cadena. 3. Se invierte la cadena resultante. La idea les parece genial, pero no saben co\u0301mo programarlo y necesitan de tu ayuda para convertir su idea en una realidad.",
    "input": "* En le primer li\u0301nea recibira\u0301s una cadena de texto S. * En la segunda li\u0301nea recibira\u0301s la posicio\u0301n de anclaje A.",
    "output": "El mensaje cifrado.",
    "note": "",
    "topics": [
      "strings",
      "implementation",
      "data structures"
    ],
    "id": 15922
  },
  {
    "title": "Formados en la cafeter\u00eda",
    "url": "https://omegaup.com/arena/problem/Formados-en-la-cafeteria",
    "history": "En la cafeteri\u0301a de la UAM hay dos colas: la de los alumnos y la de los trabajadores. Cuando es el turno de atender a la siguiente persona, la poli\u0301tica de la cafeteri\u0301a es darle preferencia a la gente formada en la cola de los trabajadores; los alumnos son atendidos so\u0301lo si no hay trabajadores formados. Con esta informacio\u0301n, escribe un programa que procese una secuencia de N eventos de los siguientes tipos. - ` LLEGA ALUMNO` v: Llego\u0301 la persona de nombre v a formarse a la cola de los alumnos. - ` LLEGA TRABAJADOR` v: Llego\u0301 la persona de nombre v a formarse a la cola de los trabajadores. - ` ATIENDE` : Se debe atender a la siguiente persona, imprimiendo su nombre.",
    "input": "Un entero N seguido de los N eventos. Puedes suponer que 1 \u2264 N \u2264 2 \u00d7 10^ 5, que los nombres consisten de entre 5 y 10 letras minu\u0301sculas y que nunca ocurre un evento de atencio\u0301n cuando las dos colas esta\u0301n vaci\u0301as.",
    "output": "Los nombres de las personas atendidas en el orden en el que esto ocurrio\u0301.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15294
  },
  {
    "title": "Sumando segundos",
    "url": "https://omegaup.com/arena/problem/Sumando-segundos",
    "history": "Dado un di\u0301a de la semana y una hora en formato de 24 horas, calcula el di\u0301a y la hora despue\u0301s de N segundos.",
    "input": "En la primer li\u0301nea recibira\u0301s una cadena en la que se indicara\u0301 el di\u0301a de la semana y la hora inicial. Se garantiza que todas las entradas sera\u0301n en mayu\u0301sculas y sin acentos. En la segunda li\u0301nea recibira\u0301s la cantidad N de segundos transcurridos desde la hora inicial.",
    "output": "El di\u0301a de la semana y la hora final.",
    "note": "",
    "topics": [
      "math",
      "data structures"
    ],
    "id": 15274
  },
  {
    "title": "Las tareas de Progra",
    "url": "https://omegaup.com/arena/problem/Las-tareas-de-Progra",
    "history": "En clase de programacio\u0301n, el acomodo de las butacas es en forma de ci\u0301rculo. Al ingresar al salo\u0301n, el primer estudiante debe ocupar la primer butaca vaci\u0301a, el segundo estudiante debe ocupar la siguiente butaca vaci\u0301a y asi\u0301 sucesivamente hasta ocupar todas las butacas disponibles. No siempre llegan todos los alumnos, por lo que es probable que queden algunas butacas vaci\u0301as. Pero nunca quedara\u0301n estudiantes de pie. La revisio\u0301n de las tareas se hace de la siguiente manera: El profesor menciona un nu\u0301mero N y el estudiante sentado en la butaca nu\u0301mero N explica su programa al resto del grupo. Posteriormente continu\u0301a el alumno sentado en la butaca N- 1 y asi\u0301, sucesivamente, hasta que todos los estudiantes hayan explicado sus programas.",
    "input": "* Un entero X que representa la cantidad de estudiantes que entraron a la clase. * X cadenas de texto, representando los nombres de cada estudiante en el orden que ingresaron al salo\u0301n. Cada cadena se lee en una li\u0301nea independiente. * Un entero N que representa la butaca del primer alumno que expondra\u0301 su tarea.",
    "output": "X li\u0301neas con los nombres de los estudiantes en el orden que expusieron su tarea.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 15086
  },
  {
    "title": "ANIEI 2021 - H",
    "url": "https://omegaup.com/arena/problem/ANIEI-2021---H",
    "history": "Debido a la pandemia de COVID- 19, los centros de vacunacio\u0301n han tenido que servir a una considerable cantidad de la poblacio\u0301n y han categorizado a las personas segu\u0301n su nivel de riesgo para decidir a quie\u0301n atender primero. Sin embargo, algunas personas se han equivocado sobre la fecha en la que les tocaba vacunarse, o sobre su nivel de riesgo, o simplemente llegaron tarde a su cita de vacunacio\u0301n. A pesar de ello, la gui\u0301a oficial de salud es clara. Dadas dos personas registradas ( el sistema no puede manejar personas no registradas) , se debe vacunar primero a la persona con mayor nivel de riesgo. Escribe un programa que construya una planificacio\u0301n y que responda eficientemente quie\u0301n es la siguiente persona que debe ser llamada a vacunarse. Para este problema, consideraremos que cada persona so\u0301lo debe vacunarse una vez, aunque pueden existir varias personas con el mismo nombre. Si hubieran empates en prioridad, se debe atender primero a la persona que se registro\u0301 primero.",
    "input": "El caso de prueba consiste de a lo mucho 10^ 4 li\u0301neas, las cuales debera\u0301n leerse hasta el final de la entrada. Cada li\u0301nea puede ser de dos tipos: un registro o una llamada. Un registro de persona esta\u0301 formado por el nombre de una persona ( de a lo mucho 20 caracteres, todos letras minu\u0301sculas del alfabeto ingle\u0301s) seguido de un espacio y de un nu\u0301mero que denota su prioridad ( a mayor valor, mayor su prioridad) . Una llamada consiste en una letra mayu\u0301scula ` V` ( de vacuna) .",
    "output": "Para cada llamada de vacuna ` V` , una li\u0301nea con el nombre de la persona que debe vacunarse en esa llamada. Si no hay personas registradas que falten por atender en esa llamada, se debe imprimir una li\u0301nea en blanco. No debes imprimir los nombres de las personas que se queden sin vacuna.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 14266
  },
  {
    "title": "Spider-Ham y el restaurante",
    "url": "https://omegaup.com/arena/problem/Spider-Ham-y-el-restaurante-cpp",
    "history": "# DescriptionEl Spider- Verse se ha alterado, portales multidimensionales se abren y versiones de Spider- Man esta\u0301n entrando al universo de Miles Morales, Spider- Ham fue el primero en llegar, y tiene una preocupacio\u0301n muy grande, ya que en su universo de looney Tunees e\u0301l tiene un restaurante muy importante, y el portal absorbio\u0301 a Spider- Ham justo antes de abrir, E\u0301l necesita regresar a su restaurante, por desgracia, sabe que no sera\u0301 posible regresar ese di\u0301a, asi\u0301 que e\u0301l acepta la realidad de que su restaurante no se abrira\u0301 por todo un di\u0301a. ! [ Prueba de que Spider- ham come] ( SpiderComiendo. jpeg) Adolorido por la triste noticia, se acuerda que e\u0301l sabe con un di\u0301a de antelacio\u0301n, cuantos clientes llegaran al di\u0301a siguiente adema\u0301s de que por cada cliente, e\u0301l sabe su hora de llegada y su hora de salida, Asi\u0301 que decide calcular cua\u0301l es la ma\u0301xima cantidad de clientes que tendra\u0301 en su restaurante al mismo tiempo. Ayu\u0301dalo a saberlo, ya que e\u0301l esta\u0301 triste por ahora : ( . ! [ Peter sad] ( sad. png)",
    "input": "En la primera li\u0301nea recibira\u0301s un nu\u0301mero entero n ( 1 \u2264 n \u22642 \u00d7 10^ 5 ) que denota la cantidad de Clientes que Spidey tendra\u0301, en las siguientes n li\u0301neas recibira\u0301s 2 enteros a y b ( 1 \u2264 a < b \u2264 10^ 9) que denota la hora en el que el cliente entrara al restaurante y la hora en la cual saldra\u0301. * Nota* Se te garantiza que la hora de llegada y salida de cada cliente siempre sera diferente, en otras palabras, jamas llegaran 2 clientes al mismo tiempo, y tampoco se iran 2 clientes al mismo tiempo, ya sabes, por la pandemia y la Sana distancia : ) .",
    "output": "Un solo numero que denota la cantidad Maxima de clientes que Spider- Ham tendra en su restaurante al mismo tiempo| | input35 82 43 9| | output2| | descriptionpodemos observar que llegara un cliente a la hora 2 y se quedara hasta la hora 4, en la siguiente hora ( la hora 3 ) llegara el segundo cliente y se retirara a la hora 9, teniendo 2 clientes dentro del restaurante al mismo tiempo. Observa que el cliente que llega a la hora 5 ya no alcanzara a ver al cliente que llego en la hora 2, ya que este se fue a las 4 hrs. | | end",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13630
  },
  {
    "title": "Infiltrandose",
    "url": "https://omegaup.com/arena/problem/Infiltrandose-omichh-2021",
    "history": "Hola agente Q, tienes una nueva misio\u0301n. El malvado doctor Bueno esta\u0301 planeando algo y tienes que averiguar que es. Para poder ingresar a las oficinas del MalCorp tienes que buscar la manera de poder entrar igual que los agentes malvados entran al edificio. Cada agente entra en un vehi\u0301culo con una matri\u0301cula en especi\u0301fico, esta matri\u0301cula esta\u0301 representada por una serie de letras. Los porteros de la caseta de entrada tienen una serie de instrucciones que seguir de acuerdo al jefe de seguridad del edificio. Descubre la manera de entrar a las oficinas del MalCorp sin ser descubierto.",
    "input": "Leera\u0301s la entrada de la siguiente manera: - Primero leera\u0301s un nu\u0301mero N que tendra\u0301 un valor del 1 al 6. - Si N es igual a 1 se forma un nuevo vehi\u0301culo con una matri\u0301cula en especi\u0301fico. - Si N es igual a 2 el operador debe de reportar cuantos vehi\u0301culos hay formados en la entrada. - Si N es igual a 3 leera\u0301s una matri\u0301cula la cual hay que verificar cuantos vehi\u0301culos existen enfrente de ella, pon mucha atencio\u0301n ese vehi\u0301culo podri\u0301a ser la forma de entrar. - Si N es igual a 4 leera\u0301s la matri\u0301cula del auto que se retira de la fila y se marcha, ten cuidado que podri\u0301an observarte. - Si N es igual a 5 el operador debe reportar las matri\u0301culas de los vehi\u0301culos formados en el orden en el que se encuentran formados. - Si N es igual a 6 es momento de escapar del lugar porque que te encuentras en riesgo.",
    "output": "Responde a todas las preguntas requeridas para realizar el ana\u0301lisis completo y determinar el plan para poder ingresar a las oficinas del MalCorp.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13391
  },
  {
    "title": "El desfile de perritos (alternativo)",
    "url": "https://omegaup.com/arena/problem/El-desfile-de-perritos-alternati",
    "history": "Esta\u0301s por organizar el desfile anual de perritos y quieres que salga perfecto. Ya cuentas con los nombres de N perritos que desfilara\u0301n, pero desafortunadamente hay muchos perritos que se llaman igual y eso puede prestarse a confusiones, por lo que quieres evitar que dos perritos con el mismo nombre este\u0301n en el escenario al mismo tiempo. El escenario tiene espacio para E perritos y la idea es que los perritos desfilen de izquierda a derecha, de modo que cuando salga un perrito del escenario, vaya entrando el siguiente. Por ejemplo, si E= 3 entonces entrara\u0301n al escenario los perritos 1, 2, y 3; despue\u0301s saldra\u0301 el perrito 1 para que pueda entrar el 4, despue\u0301s saldra\u0301 el perrito 2 para que pueda entrar el 5, etce\u0301tera. Faltan pocas horas para el desfile y quisieras simularlo con la lista de nombres que ya tienes, para asi\u0301 saber si el orden actual cumplira\u0301 con tus expectativas o si ocurrira\u0301 en algu\u0301n momento lo que quieres evitar. Escribe un programa que te ayude a determinarlo. ! [ enter image description here] [ 1]",
    "input": "Dos enteros N y E seguidos de los nombres de los N perritos que desfilara\u0301n. Puedes suponer que E \u2264 N, que 1 \u2264 E \u2264 10^ 4 y que 1 \u2264 N \u2264 10^ 6.",
    "output": "Si dos perritos con el mismo nombre estara\u0301n en el escenario al mismo tiempo, tu programa debe imprimir el mensaje \" * * ` Habran dos perritos con el nombre ` * P* ` al mismo tiempo` * * \" , donde P es el nombre de los perritos involucrados. So\u0301lo debes imprimir ese mensaje la primera vez que ocurra esta situacio\u0301n. Si lo anterior no ocurrira\u0301, tu programa debe imprimir el mensaje \" * * ` El desfile de perritos estara bien hecho` * * \" .",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": 12856
  },
  {
    "title": "Formados para comer",
    "url": "https://omegaup.com/arena/problem/Formados-para-comer",
    "history": "En la fiesta de graduacio\u0301n organizaron una taquiza y ya esta\u0301 todo listo para atender a los invitados. Los responsables del evento organizaron dos filas: la fila donde te dan un taco y la fila donde te dan un refresco. Al llegar al evento, cada invitado debe formarse directamente en la fila de los tacos y, en cuanto lo atiendan, debe formarse directamente en la fila de los refrescos. Cuando al invitado lo atiendan en la segunda fila y le den su refresco, ya puede ir a comer. Hasta ahora han ocurrido N de los siguientes tipos de eventos: - ` LLEGA` V: El invitado con nombre V llego\u0301 al evento. - ` ATIENDE TACO` : Se atendio\u0301 al siguiente invitado de la fila de los tacos. - ` ATIENDE REFRESCO` : Se atendio\u0301 al siguiente invitado de la fila de los refrescos. Escribe un programa que determine los nombres de los invitados que au\u0301n esta\u0301n formados en cada fila.",
    "input": "El entero N seguido de la secuencia de N eventos en el orden en el que ocurrieron. Puedes suponer que 0 \u2264 N \u2264 10^ 5 y que los nombres esta\u0301n compuestos exclusivamente por letras minu\u0301sculas.",
    "output": "Dos li\u0301neas con los nombres de los invitados que au\u0301n esta\u0301n formados en la primera y en la segunda fila, respectivamente, impresos del frente al final de cada fila.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12850
  },
  {
    "title": "La se\u00f1ora de los tamales",
    "url": "https://omegaup.com/arena/problem/La-senora-de-los-tamales",
    "history": "Acabas de organizar una enorme fiesta con mil invitados ( convenientemente numerados del 0 al 999) y la mayor atraccio\u0301n de la fiesta son los deliciosos tamales. Los invitados a la fiesta deben formarse en la cola y al llegar su turno, la sen\u0303ora de los tamales les dara\u0301 un tamal. Como los tamales esta\u0301n verdaderamente ricos, muchos de los invitados vuelven a formarse en la cola. Sin embargo, la sen\u0303ora so\u0301lo tiene permitido darte un tamal a cada invitado ( por cuestiones de presupuesto y para evitar que alguien se quede sin el suyo) . Escribe un programa que ayude a la sen\u0303ora a identificar a que\u0301 invitados si\u0301 debe entregales un tamal cuando llegue su turno.",
    "input": "Un entero N seguido de la descripcio\u0301n de N eventos. Los eventos pueden ser de dos tipos: - ` FORMA ` K: se formo\u0301 el invitado con nu\u0301mero K. - ` ATIENDE` : la sen\u0303ora debe atender al invitado al frente de la cola. Puedes suponer que 0 \u2264 N \u2264 10^ 4, que el nu\u0301mero de cada invitado es va\u0301lido, que los invitados se formara\u0301n so\u0301lo si en ese momento no esta\u0301n en la cola y que so\u0301lo se atendera\u0301 a un invitado si la cola no esta\u0301 vaci\u0301a.",
    "output": "Para cada evento del tipo ` ATIENDE` , imprimir el mensaje ` SI TAMAL` o ` NO TAMAL` seguido del nu\u0301mero del invitado, dependiendo si la sen\u0303ora le debe entregar o no un tamal.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 12353
  },
  {
    "title": "Encuestando a la gente de la cola",
    "url": "https://omegaup.com/arena/problem/Encuestando-a-la-gente-de-la-col",
    "history": "Acaba de estrenarse la consola de videjuegos de moda y hay mucha gente formada para comprarla en la venta nocturna. Los encargados de la tienda aprovechara\u0301n la gran afluencia para hacer una encuenta y saber cua\u0301ntas personas de la cola se llaman igual. Ayu\u0301dalos a escribir un programa que contesta a esta pregunta. Tu programa debera\u0301 procesar una secuencia de N eventos de los siguientes tipos: - ` E ` C: se formo\u0301 un cliente con nombre C en la cola. - ` P` C: se desea conocer cua\u0301ntas personas actualmente formadas en la cola tienen C por nombre. - ` S` : se atendio\u0301 al siguiente cliente de la cola.",
    "input": "Un entero N seguido de los N eventos a procesar. Puedes suponer que 0 \u2264 N \u2264 500000, que todos los nombres esta\u0301n formados exclusivamente por entre 4 y 8 letras mayu\u0301sculas y que so\u0301lo se atienden clientes cuando hay gente formada.",
    "output": "Para cada evento del tipo ` P` , la cantidad de personas formadas con el nombre dado.",
    "note": "",
    "topics": [
      "strings",
      "trees",
      "hashing",
      "data structures"
    ],
    "id": 12351
  },
  {
    "title": "Dobles colas",
    "url": "https://omegaup.com/arena/problem/Dobles-colas",
    "history": "Escribe un programa que comience con una secuencia A de enteros inicialmente vaci\u0301a y que imprima el contenido final de A tras ejecutar una lista de las siguientes operaciones: - * AGREGA_ IZQ v* : Agregar v a la izquierda de A. Por ejemplo, si A = ( 3) y v = 5 entonces A = ( 5, 3) . - * AGREGA_ DER v* : Agregar v a la derecha de A. Por ejemplo, si A = ( 3) y v = 5 entonces A = ( 3, 5) . - * QUITA_ IZQ* : Quitar un elemento a la izquierda de A. Por ejemplo, si A = ( 3, 1, 4) entonces A = ( 1, 4) . - * QUITA_ DER* : Quitar un elemento a la derecha de A. Por ejemplo, A = ( 3, 1, 4) entonces A = ( 3, 1) . - * ROTA_ IZQ* : Rotar A una posicio\u0301n a la izquierda. Por ejemplo, si A = ( 3, 1, 4) entonces A = ( 1, 4, 3) . - * ROTA_ DER* : Rotar A una posicio\u0301n a la derecha. Por ejemplo, si A = ( 3, 1, 4) entonces A = ( 4, 3, 1) .",
    "input": "Un entero N seguido de las N operaciones a realizar sobre A. Puedes suponer que 0 \u2264 N \u2264 10^ 5.",
    "output": "Los enteros del contenido final de A separados por espacios.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 8576
  },
  {
    "title": "Gasolineras",
    "url": "https://omegaup.com/arena/problem/Gasolineras",
    "history": "En un ci\u0301rculo hay N gasolineras. Las gasolineras esta\u0301n numeradas de 0 a ( N- 1) inclusive. Tienes la siguiente informacio\u0301n respecto a las gasolineras: * La cantidad de gasolina que esa gasolinera en particular da, y* La distancia de esa gasolinera a la siguiente gasolinera en kilometros. Inicialmente, tienes un carro con un tanque de capacidad infinita y sin gasolina. Quieres hacer un recorrido que pase por todas las gasolineras. Debes empezar el recorrido en cualquiera de las gasolineras. Calcula la gasolinera con menor numeracio\u0301n donde la camioneta podra\u0301 completar el ci\u0301rculo. Considera que la camioneta se detendra\u0301 en cada gasolinera y tomara\u0301 toda la gasolina que tenga. La camioneta se movera\u0301 un kilo\u0301metro por cada litro de gasolina.",
    "input": "En la primera li\u0301nea un entero, N. Las siguientes N li\u0301neas contienen un par de enteros cada una, la cantidad de gasolinera que ofrece esa gasolinera y la distancia entre esa gasolinera y la siguiente.",
    "output": "Un solo entero, un entero que sera\u0301 el mi\u0301nimo i\u0301ndice en el cual se puede empezar el recorrido.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 6881
  },
  {
    "title": "Cola Interactivo",
    "url": "https://omegaup.com/arena/problem/COMI-Cola-Interactivo",
    "history": "| | inputagrega( 15) | | output- | | descriptionAl principio la cola esta\u0301 vacia. Con esta llamada, la cola ahora es ` [ 15] ` . | | inputagrega( 6) | | output- | | descriptionSe agrega el elemento y la cola queda ` [ 15 , 6] ` . | | inputagrega( 9) | | output- | | descriptionSe agrega el elemento y la cola queda ` [ 15, 6, 9] ` . | | inputsaca( ) | | output15| | descriptionSe devuelve ` 15` porque es el primer elemento y la cola queda ` [ 6, 9] ` . | | inputsaca( ) | | output6| | descriptionSe devuelve ` 6` porque es el primer elemento y la cola queda ` [ 9] ` . | | inputsaca( ) | | output9| | descriptionSe devuelve ` 9` porque es el primer elemento y la cola queda vaci\u0301a ` [ ] ` . | | inputsaca( ) | | output- 1| | descriptionSe devuelve ` - 1` porque ya no hay ma\u0301s elementos en la cola. | | end# Restricciones0 \u2264 n \u2264 10, 000# Consideraciones* Se asegura que la cola nunca tendra\u0301 mas de 10, 000 elementos. # EvaluadorEl evaluador toma el caso de ejemplo en el siguiente formato. En la primera li\u0301nea un entero, el nu\u0301mero de operaciones a realizarse. Por cada operacio\u0301n, una li\u0301nea con el siguiente formato: * ` a x` : Agrega a ` x` a la cola. * ` s` : Saca el primer elemento de la cola. libinteractive: download",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 6153
  },
  {
    "title": "Round Robin",
    "url": "https://omegaup.com/arena/problem/COMI-Round-Robin",
    "history": "Cierta computadora tiene un procesador que puede atender un proceso a la vez por K unidades de tiempo. Si el proceso necesita ma\u0301s de K unidades para terminar, el procesador lo atiende exactamente K unidades y deja pendientes las unidades excedentes. Cuando un proceso es atendido y no finaliza, se forma al final de la lista de procesos pendientes. # ProblemaEscribe un programa que lea el nu\u0301mero de procesos, K, los IDs y el tiempo de ejecucio\u0301n de cada uno de los N procesos y determine el orden en que los procesos finalizara\u0301n.",
    "input": "En la primera li\u0301nea dos enteros, N y K. En cada una de las siguientes N li\u0301neas, dos enteros X, Y, separados por un espacio. Que denotan el ID del proceso y el tiempo de ejecucio\u0301n que necesita para concluir.",
    "output": "N li\u0301neas con los ID de los procesos en el orden que concluyeron. Considera que los procesos de la entrada ya se encuentran en la lista de espera.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 6134
  },
  {
    "title": "Taquitos",
    "url": "https://omegaup.com/arena/problem/COMI-taquitos",
    "history": "Eres el duen\u0303o de un puesto de tacos. Sin embargo, en estas u\u0301ltimas semanas tus tacos se han vuelto realmente famosos dentro de la ciudad gracias a su sabor u\u0301nico e inigualable. Es por ello que todos los di\u0301as se forman largas filas de espera. Debido a esto, te gustari\u0301a llevar un control del negocio. Para hacer la tarea ma\u0301s fa\u0301cil, has decidido crear un programa que te ayude en esta tarea.",
    "input": "En la primera li\u0301nea recibira\u0301s un entero N, el nu\u0301mero de operaciones a realizar. En las siguientes N li\u0301neas recibira\u0301s un entero representando la operacio\u0301n a realizar: - Si el entero es un 1, significa que un nuevo cliente se forma en la fila, por lo que debera\u0301s leer un entero t representando el nu\u0301mero de tacos que desea ordenar. - Si el entero es un 2, significa que el cliente que se encuentra al frente de la fila sera\u0301 atendido. - Si el entero es un 3, significa que quieres saber el nu\u0301mero de clientes que se encuentran formados actualmente en la fila. - Si el entero es un 4, significa que quieres saber el nu\u0301mero de tacos que has vendido hasta ahora.",
    "output": "Por cada una de las entradas del tipo 3 y 4, debera\u0301s imprimir un entero por li\u0301nea representando la respuesta a la pregunta correspondiente.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 6116
  },
  {
    "title": "Queue Merger",
    "url": "https://omegaup.com/arena/problem/Queue-Merger",
    "history": "Write a function takes two ` Queue< int> ` s with the same lengthand returns one ` Queue< int> ` , merging the elements of the originaltwo one by one. # Samples| | inputA = [ 1, 2, 3] B = [ - 1, - 2, - 3] | | output[ 1, - 1, 2, - 2, 3, - 3] | | inputA = [ 1, 2, 3] B = [ 3, 2, 1] | | output[ 1, 3, 2, 2, 3, 1] | | end# Templateusing System; using System. Collections. Generic; class Programstatic void Main( string[ ] args) int N = Int32. Parse( Console. ReadLine( ) ) ; Queue< int> A = new Queue< int> ( ) ; Queue< int> B = new Queue< int> ( ) ; for ( int i = 0; i < N; i+ + ) A. Enqueue( Int32. Parse( Console. ReadLine( ) ) ) ; for ( int i = 0; i < N; i+ + ) B. Enqueue( Int32. Parse( Console. ReadLine( ) ) ) ; Queue< int> answer = merge( A, B) ; foreach ( int elem in answer) Console. WriteLine( elem) ; / / write merge here",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 5691
  },
  {
    "title": "Sumas Geom\u00e9tricas",
    "url": "https://omegaup.com/arena/problem/OMI-2017-Sumas-Geometricas",
    "history": "# HistoriaMientras paseabas por el Mercadito Queretano durante la OMI 2017, te encontraste con Ulises, uno de los mi\u0301ticos matema\u0301gicos timadores. A pesar de ser mundialmente conocido por ser el ma\u0301s estafador, no pudiste contener la emocio\u0301n y le pediste que te mostrara un truco de matemagia. Ulises selecciono\u0301 un grupo de nu\u0301meros sin que tu\u0301 los vieras y los descompuso gritando \" _ Deffindo semibinarius_ \" . Cada nu\u0301mero x lo descompuso en la forma x = 1 + 2 + 4 + . . . + 2^ k- 1 + r , donde k \u2265 0, 0 \u2264 r < 2^ k. Como buen oli\u0301mpico, te diste cuenta que cualquier entero positivo se puede descomponer de esta manera de forma u\u0301nica. Por ejemplo, si el matema\u0301gico selecciono\u0301 los nu\u0301meros 12, 17, 7 y 1, sus descomposiciones seri\u0301an: < center> 12 = 1 + 2 + 4 + 5< / center> < center> 17 = 1 + 2 + 4 + 8 + 2< / center> < center> 7 = 1 + 2 + 4< / center> < center> 1 = 1< / center> Despue\u0301s, Ulises grito\u0301 el hechizo \" _ Exposimise Ordenadus_ \" y junto\u0301 todas las descomposiciones de sus nu\u0301meros en una lista ordenada. Por ejemplo, los nu\u0301meros 12, 17, 7 y 1 generari\u0301an la lista 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 5, 8. Todo se vei\u0301a impresionante hasta que notaste que te robo\u0301 tu cartera mientras gritaba los hechizos. Para devolverte la cartera, te pide que le digas la cantidad de nu\u0301meros que selecciono\u0301 originalmente. Gracias a todo tu entrenamiento detectaste otra estafa: puede existir ma\u0301s de una solucio\u0301n. Para recuperar tu cartera, debes decirle al matema\u0301gico timador todas las opciones posibles. # ProblemaEscribe un programa que te ayude a encontrar todas las posibles cantidades de nu\u0301meros que selecciono\u0301 el matema\u0301gico originalmente y las escriba de forma ordenada creciente.",
    "input": "La primera li\u0301nea contiene el entero n, la cantidad de nu\u0301meros que tiene la lista final. La siguiente li\u0301nea tiene los n enteros ordenados de la lista que te da el matema\u0301gico.",
    "output": "Imprime en una li\u0301nea, ordenados de forma creciente, todos los posibles taman\u0303os de la lista original de nu\u0301meros. Si hubiera dos posibles listas con el mismo taman\u0303o, debes escribir dicho taman\u0303o solo una vez. Por ejemplo si hay dos listas posibles distintas, ambas de taman\u0303o 2, tu salida debe contener el 2 solo una vez. Si no existe una solucio\u0301n, imprime - 1.",
    "note": "",
    "topics": [
      "binary search",
      "implementation",
      "data structures"
    ],
    "id": 5545
  },
  {
    "title": "Arboles Binarios Ineficientes",
    "url": "https://omegaup.com/arena/problem/Arboles-Binarios-Ineficientes",
    "history": "Todo buen programador sabe que una de las formas ma\u0301s ineficientes de implementar un a\u0301rbol binario es utilizando un array indexado a 1, donde el dato en la posicio\u0301n n es el padre de los datos en las posicio\u0301nes 2* n el izquierdo y ( 2* n) + 1 el derecho. Por ejemlo, el siguiente a\u0301rbol binario corresponde a el arreglo [ 1, 2, 3, 4, 5, 6, 7] 1/ 3/ / 5 6 7",
    "input": "La primera linea contiene un entero T que sera\u0301 la cantidad de nodos en el a\u0301rbol. En la segunda linea se dara\u0301 un a\u0301rbol binario en forma de array con T nodosEn la tercera linea un nu\u0301mero k\u2264 T",
    "output": "Debes imprimir, en forma de arreglo, el sub- a\u0301rbol cuya rai\u0301z es el nodo con valor k del a\u0301rbol",
    "note": "",
    "topics": [
      "data structures",
      "shortest paths"
    ],
    "id": 4958
  },
  {
    "title": "Buscando una Estrella",
    "url": "https://omegaup.com/arena/problem/Buscando-una-estrella",
    "history": "En cierta competencia de talentos se requiere organizar los puntajes, la dina\u0301mica de evaluacio\u0301n esta\u0301 determinada por el criterio del jurado de acuerdo a las siguientes especificaciones: - R x : Los jueces te esta\u0301n dando el puntaje x de un nu\u0301mero arti\u0301stico, el cual debes registrar. - S : Los jueces quieren saber cua\u0301les son los peores 3 puntajes de la competencia hasta el momento, los cuales sera\u0301n los posibles sentenciados a salir de ella y debes contestarlo en orden creciente. - B : Si hay puntajes, los jueces eliminara\u0301n el puntaje ma\u0301s bajo del concurso hasta el momento. Al final, los jueces quieren saber cua\u0301l fue el puntaje ma\u0301s alto. Escribe un programa que te ayude a realizar esta labor.",
    "input": "En la primera li\u0301nea el nu\u0301mero N, que representa el nu\u0301mero de instrucciones que te dan los jueces. En cada una de las siguientes N li\u0301neas, un caracter R, S o B que denota la instruccio\u0301n que se quiere realizar. En caso de que el caracter en alguna li\u0301nea sea R, estara\u0301 seguido de un entero x que denota el puntaje que se quiere registrar.",
    "output": "Para cada operacio\u0301n S debes imprimir en una li\u0301nea los tres peores puntajes separados por un espacio. En el caso que no haya puntajes suficientes para contestar S, se debe de imprimir \" NO HAY SUFICIENTES PUNTAJES\" ( sin las comillas) y un salto de li\u0301nea. En al u\u0301ltima li\u0301nea debes imprimir \" EL PUNTAJE MAS ALTO FUE y\" ( sin las comillas) , donde y fue el puntaje ma\u0301s alto al finalizar las instrucciones de los jueces. Si no hay puntajes, debes imprimir \" NO HUBO GANADOR\" ( sin las comillas) y un salto de li\u0301nea.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 4949
  },
  {
    "title": "List Game",
    "url": "https://omegaup.com/arena/problem/List-Game",
    "history": "AJ y Paget acaban de resolver todos los problemas del examen y esta\u0301n muy felices. Mariola, al ver sus resultados, se alegro\u0301 y las invito\u0301 a jugar \" List Game\" . Cada chica trabaja con una lista de nu\u0301meros, las cuales inicialmente esta\u0301n vaci\u0301as. El juego consiste en que Mariola les pedira\u0301 a las chicas realizar alguna de las siguientes instrucciones: - I x : Significa que Paget y AJ deben colocar el nu\u0301mero x en sus respectivas listas. Paget debe colocarlo a final de la lista. - Q : Significa que Paget y AJ deben contestar cua\u0301l es el valor absoluto de la diferencia entre el primer elemento de la lista de Paget y el ma\u0301ximo elemento de la lista de AJ, despue\u0301s cada chica debe eliminar su elemento correspondiente de su lista. Mariola gana si las chicas se equivocan en alguna de las preguntas, de lo contrario, AJ y Paget ganan. Ayuda a Paget y a AJ a ganar el juego.",
    "input": "En la primera li\u0301nea el nu\u0301mero N. En cada una de las siguientes N li\u0301neas, un caracter Q o I que denota la instruccio\u0301n que se quiere realizar. En caso de que el caracter en alguna li\u0301nea sea I, estara\u0301 seguido de un entero x que denota el nu\u0301mero que se quiere colocar en las listas.",
    "output": "Para cada operacio\u0301n Q debes de imprimir la respuesta correcta. Debera\u0301s separarlas por saltos de li\u0301nea. En el caso que no haya algu\u0301n elemento en las listas, se debe de imprimir \" MARIOLA NO! \" ( sin las comillas) y un salto de li\u0301nea.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 4945
  },
  {
    "title": "RoundRobin",
    "url": "https://omegaup.com/arena/problem/RoundRobin",
    "history": "Cierta computadora tiene un procesador que puede atender un proceso a la vez por K unidades de tiempo. Si el proceso necesita ma\u0301s de K unidades para terminar, el procesador lo atiende exactamente k unidades dejando pendientes las unidades excedentes. Cuando un proceso es atendido y no finaliza, se forma al final de la listan de procesos. Escribe un programa que lea N, K, los ids y el tiempo de ejecucio\u0301n de los N procesos y determine el orden en que los procesos finalizan.",
    "input": "En la primera li\u0301nea los enteros N y K. En cada una de las siguientes N li\u0301neas, los enteros < strong> X, Y, < / strong> separados por un espacio. < strong> Que denotan el id del proceso y el tiempo de ejecucio\u0301n.",
    "output": "La lista de los ids de los procesos, segu\u0301n el orden en el que terminan. Considera que inicialmente los procesos se van atendiendo en el orden de llegada. # Li\u0301mites# 1< = N< = 10001< = K< = 1001< = t< sub> i< / sub> < = 1000",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 4848
  },
  {
    "title": "#[Safari]",
    "url": "https://omegaup.com/arena/problem/Safari",
    "history": "Tu amigo A\u0301ngel ha decidido empezar a trabajar en un Safari, el es encargado de ver los nuevos animales que llegan, y como este Safari se preocupa por los animales los deja libres despues de cierto tiempo, por ello tambien administra los que se van y el alimento de los animales. Bien A\u0301ngel es algo flojo, por lo que te ha pedido que hagas un programa que te ayude con lo siguiente",
    "input": "Recibira\u0301s una letra, la cual puede ser N, S, C, A, F. Donde* * * N= Recibira\u0301s un nuevo animal por lo que seguido de N Recibira\u0301s el nombre del animal. * * * * * S= El animal que tiene mas tiempo que llego se ira por lo que debera\u0301s imprimir que animal es. * * * * * C= Que has recibido alimento, por lo que seguido de C recibira\u0301s una variable X que es igual a la cantidad de alimento que recibira\u0301s. * * * * * A= Que debes alimentar a todos los animales con la cantidad de alimento que tienes acumulado de forma que todos los animales coman lo mismo, por lo que debes imprimir cuanto le corresponde a cada animal. * * > Presta Atencio\u0301n Aqui\u0301, si en alguna momento, no tienes alimento. Debera\u0301s liberar a todos los animales empezando por el ultimo animal que entro y terminar tu programa. * * * F= Debera\u0301s imprimir la cantidad de animales que quedaron en el Safari. * *",
    "output": "Dependiendo de que letra recibas debera\u0301s imprimir lo que se te pida.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 4838
  },
  {
    "title": "nombres1",
    "url": "https://omegaup.com/arena/problem/nombres1",
    "history": "Menganito tiene muy mala memoria, siempre que le presentan a una persona olvida facilmente los nombres, por lo que necesita crear un programa que sea capaz de recordar los nombres y los apellidos de cada persona que le presentan. A menganito quiere aprenderse primero los nombres y luego los apellidos de las personas, por lo que necesita una lista de nombres primero y luego una de apellidos.",
    "input": "Un entero n que representa cuantas personas le van apresentar a Menganito, seguido de n li\u0301neas con los nombres de las personas. Cada persona solo tiene un nombre y un apellido y estos aparecen separados por un espacio. No se aceptan letras acentuadas ni caracteres especiales.",
    "output": "la lista de los nombres en n li\u0301neas, seguida por la lista de los apellidos tambie\u0301n en n li\u0301neas",
    "note": "",
    "topics": [
      "data structures",
      "strings",
      "implementation"
    ],
    "id": 4587
  },
  {
    "title": "Reordenamiento Lexicografico",
    "url": "https://omegaup.com/arena/problem/Reordenamiento-Lexicografico",
    "history": "Considera una secuencia de N letras ( puede haber letras repetidas) , a partir de la cual queremos formar una palabra siguiendo estas 2 operaciones: - Tomar la primera letra de la secuencia original, borrarla, y colocarla al final de la palabra que estamos formando. - Tomar la ultima letra de la secuencia original, borrarla, y colocarla al final de la palabra que estamos formando. # ProblemaEscribe un programa que dada la secuencia de letras, determine la menor palabra lexicograficamente que se puede obtener con esas 2 operaciones.",
    "input": "En la primera li\u0301nea un entero N. Cada una de las siguientes N li\u0301neas contendra\u0301 un solo caracter indicando la i- e\u0301sima letra de la secuencia.",
    "output": "La menor palabra que se puede generar, adema\u0301s, * * debes imprimir un salto de li\u0301nea cada 80 caracteres. * *",
    "note": "",
    "topics": [
      "strings",
      "implementation",
      "data structures",
      "sortings"
    ],
    "id": 3892
  },
  {
    "title": "La loca mesa del t\u00e9",
    "url": "https://omegaup.com/arena/problem/La-loca-mesa-del-te",
    "history": "La hora del te\u0301 en la casa de la Liebre siempre es diferente. Esta vez, los animales fueron llegando uno por uno: el primero se sento\u0301 en el centro de la mesa y cada uno de los siguientes se sentaba a la izquierda o a la derecha de los ya presentes. Desafortunadamente, los animales se sentaron muy apretados y los de enmedio quedaron atrapados: so\u0301lo los animales de los extremos podi\u0301an retirarse. Alicia se diverti\u0301a viendo la situacio\u0301n y penso\u0301 que le gustari\u0301a saber el orden en el que los animales se retiran de la mesa. Ayuda a Alicia a responder su pregunta.",
    "input": "Un entero N seguido de la descripcio\u0301n de los N eventos que ocurren en la mesa. La descripcio\u0301n de cada evento inicia con dos caracteres T y L. * Si T = ` E` entonces un animal llego\u0301 a la mesa. * Si T = ` S` entonces un animal se fue de la mesa. * Si L = ` I` entonces el evento ocurrio\u0301 por la izquierda. * Si L = ` D` entonces el evento ocurrio\u0301 por la derecha. Cuando T = ` E` la descripcio\u0301n del evento termina con una cadena A que es el nombre del animal que llego\u0301. Puedes suponer que 0 \u2264 N \u2264 10^ 6 y que los nombres son de 1 a 10 letras minu\u0301sculas",
    "output": "Para cada evento de salida, el nombre del animal que se fue.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 3782
  },
  {
    "title": "Chemandria",
    "url": "https://omegaup.com/arena/problem/Chemandria",
    "history": "La estructura de datos chemandria almacena un conjunto de datos permitiendo operaciones sobre el conjunto: A) push( x) Inserta x al finalB) pop_ front( ) Elimina e imprime el elemento al frente del conjuntoC) pop_ back( ) Elimina e imprime el elemento al final del conjuntoD) query( ) Imprime el conjunto de datos en orden creciente ( sin perder el orden original) E) size( ) Imprime cuantos elementos quedan en el conjunto. # Problema# Tu tarea consiste en implementar una chemandria que permita hacer las operaciones descritas.",
    "input": "En la primera li\u0301nea un entero N que denota el nu\u0301mero de operaciones que se requiere hacer sobre la chemandria. En cada una de las siguientes N li\u0301neas, un caracter < em> A , B, C, D, E < / em> que denota la operacio\u0301n que se requiere realizar. En caso de que el caracter en alguna li\u0301nea sea ' A' , estara\u0301 seguido de un entero X que denotael nu\u0301mero que se quiere insertar.",
    "output": "Una li\u0301nea por cada operacio\u0301n de tipo < em> B, C, D, E< / em> . Si el resultado de la operacio\u0301n consta de ma\u0301s de un dato, debera\u0301s separarlos por espacios.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 2422
  },
  {
    "title": "Los soldados reclutados por Gilgamesh",
    "url": "https://omegaup.com/arena/problem/soldados",
    "history": "En un intento por derrotar al toro celeste de la diosa Ishtar, Gilgamesh comenzo\u0301 a reclutar soldados para enviarlos a combatir contra el toro. Mientras los hombres de Uruk son reclutados uno por uno, Gilgamesh decide en que\u0301 momento mandar a un soldado pelear contra el toro. Cada soldado sera\u0301 enviado en el orden en que fue reclutado. Ayude a Gilgamesh a determinar quie\u0301n es el siguiente soldado que ira\u0301 peleando contra el poderoso toro.",
    "input": "La entrada estara\u0301 conformada por un nu\u0301mero arbitrario de li\u0301neas. Cada li\u0301nea correspondera\u0301 a una de dos acciones: reclutar un hombre, que sera\u0301 denotado con la palabra \" LLAMA\" y el nombre del soldado, o mandar pelear a un hombre, que sera\u0301 denotado con la palabra \" MANDA\" . Puede suponer que cada nombre estara\u0301 conformado por a lo mucho 10 letras mayu\u0301sculas.",
    "output": "Por cada accio\u0301n imprima el nombre del soldado involucrado. En caso de que no haya soldados para enviar debera\u0301 escribir la palabra \" IMPOSIBLE\" .",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 1839
  },
  {
    "title": "Los grupos reclutados por Gilgamesh",
    "url": "https://omegaup.com/arena/problem/grupos",
    "history": "En un intento por derrotar al toro celeste de la diosa Ishtar, Gilgamesh comenzo\u0301 a formar grupos de soldados para enviarlos a combatir contra el toro. Mientras los hombres de Uruk son reclutados uno por uno, Gilgamesh decide en que\u0301 momento mandar a un grupo de S soldados a pelear contra el toro. Cada grupo de soldados estara\u0301 conformado por los hombres que tengan ma\u0301s tiempo de haber sido reclutados y que au\u0301n no han sido enviados a pelear. Ayude a Gilgamesh a conformar a los grupos de soldados que ira\u0301n peleando contra el poderoso toro.",
    "input": "La entrada estara\u0301 conformada por un nu\u0301mero arbitrario de li\u0301neas. Cada li\u0301nea correspondera\u0301 a una de dos acciones: reclutar un hombre, que sera\u0301 denotado con la letra ' R' y el nombre del soldado, o mandar a un grupo de S soldados a pelear, que sera\u0301 denotado con la letra ' P' y un entero S. Puede suponer que 1 \u2264 S \u2264 10, 000 y que cada nombre estara\u0301 conformado por a lo mucho 10 letras mayu\u0301sculas.",
    "output": "Por cada accio\u0301n ' P' capturada en la entrada, debera\u0301 escribir una li\u0301nea con el nombre de los S soldados que deben ir a pelear contra el toro en el orden en que fueron reclutados y separados por un espacio, o bien la palabra \" IMPOSIBLE\" en caso de que no queden suficientes soldados.",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": 1838
  },
  {
    "title": "Final Combo",
    "url": "https://omegaup.com/arena/problem/Final-Combo",
    "history": "Como buen aficionado de los videojuegos de peleas, sabes que cuando conectas varios golpes en sucesio\u0301n el juego multiplica tus puntos dependiendo de que\u0301 tan largo es tu combo. Ahora que sabes programar, te gustari\u0301a saber cua\u0301les de tus combos favoritos te dan los mejores multiplicadores. Este juego es muy peculiar. Cada que conectas un golpe, el multiplicador de puntaje crece dependiendo del golpe en cuestio\u0301n. Adema\u0301s, los golpes ma\u0301s viejos eventualmente ya no cuentan para el multiplicador. Escribe un programa que dado los golpes y cua\u0301nto influyen en el multiplicador, asi\u0301 como los avisos del sistema de que el golpe ma\u0301s antiguo ya no cuenta para el multiplicador, conteste cua\u0301nto vale e\u0301ste en cada paso.",
    "input": "Un entero N que es la cantidad de golpes y anuncios del sistema. Despue\u0301s, N golpes y avisos del sistema. Las li\u0301neas que comienzan con un \u201cgolpe\u201d representan un golpe y vendra\u0301n seguidas de un entero: cua\u0301nto crece el multiplicador por ese golpe. Las li\u0301neas que comienzan con un \u201celimina\u201d representan un aviso del sistema anunciando que el golpe ma\u0301s antiguo que au\u0301n estaba en efecto ya no influye para el multiplicador.",
    "output": "Para cada evento, imprime co\u0301mo queda el multiplicador despue\u0301s del golpe o despue\u0301s del aviso del sistema.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 1057
  },
  {
    "title": "Coleccion Maxima",
    "url": "https://omegaup.com/arena/problem/Coleccion-Maxima",
    "history": "Haz un programa que mantenga una coleccio\u0301n de nu\u0301meros enteros, posiblemente repetidos, y que realice una secuencia de operaciones sobre la coleccio\u0301n. - G x: Guarda en la coleccio\u0301n una copia del nu\u0301mero x. - C: Consulta el nu\u0301mero ma\u0301s grande de la coleccio\u0301n- E: Elimina el nu\u0301mero ma\u0301s grande de la coleccio\u0301n- I x: Incrementa el nu\u0301mero ma\u0301s grande de la coleccio\u0301n ( Uno de ellos si esta\u0301 repetido) - D x: Decrementa el nu\u0301mero ma\u0301s grande de la coleccio\u0301n ( Uno de ellos si esta\u0301 repetido) en x unidades- T: Terminar simulacio\u0301n.",
    "input": "CEG 10CG - 7CG 20CI 3CD 15ECT| | output",
    "output": "ERRORERROR101020238| | end# Li\u0301mites# La lista\u0301 de operaciones tendra\u0301 al menos una operacio\u0301n y no ma\u0301s de 1, 000, 000.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 1022
  },
  {
    "title": "Cola bancaria de la suerte",
    "url": "https://omegaup.com/arena/problem/cbs",
    "history": "Eres cuentahabiente del banco ma\u0301s popular de la regio\u0301n y por lo general la cola del banco es extremadamente larga. Adema\u0301s, cada cuentahabiente tiene una prioridad entera P y la poli\u0301tica es que los clientes con prioridad ma\u0301s alta seanatendidos primero ( aunque hayan llegado a la cola despue\u0301s) , lo que puede ocasionar que algunos cuentahabientes conprioridad baja no sean atendidos. Para solucionar esto y volver menos mono\u0301tona la espera en la cola, el banco ha decidido realizar sorteos para que algunosclientes avancen ma\u0301s ra\u0301pido. Durante el sorteo se extrae una letra y un entero I de la to\u0301mbola: a los clientes que este\u0301nformados en ese momento y cuyos nombres inicien con esa letra se les sumara\u0301n I puntos a su prioridad. En caso de que dos cuentahabientes tengan la misma prioridad, se atendera\u0301 al que haya llegado primero. Los eventos que suceden en la cola se representan de la siguiente forma: - ` C` N P: llega un cuentahabiente de nombre N con prioridad inicial P. - ` S` L I: se realizo\u0301 un sorteo y se extrajo la letra L y el entero I. - ` A` : se atendio\u0301 al cuentahabiente de mayor prioridad de la cola. Escribe un programa que determine el nombre del cliente que fue atendido en cada evento de atencio\u0301n.",
    "input": "Un entero E seguido de E eventos. Puedes suponer 1 \u2264 E \u2264 50000, que no se atendera\u0301 a nadie mientras la colaeste\u0301 vaci\u0301a, que la prioridad de los cuentahabientes esta\u0301 en el intervalo de - 1000000 a 1000000 y que tanto losnombres como las letras del sorteo consisten de letras mayu\u0301sculas.",
    "output": "Los nombres de los cuentahabientes atendidos en el orden en el que se atendieron.",
    "note": "",
    "topics": [
      "trees",
      "data structures",
      "graphs"
    ],
    "id": 995
  },
  {
    "title": "CR File downloading",
    "url": "https://omegaup.com/arena/problem/CR-File-downloading",
    "history": "HistoriaEsta\u0301s navegando en Internet y en la pa\u0301gina de Facebook de un amigo te encuentras con las fotos de tu graduacio\u0301n. Has decidido descargar todas las fotos, pero tu conexio\u0301n a Internet so\u0301lo soporta una descarga a la vez. Como ya sabes aplicar tus conocimientos de programacio\u0301n decides crear un programa que lo haga por ti. Lo primero que vas a programar es la seccio\u0301n que interprete los eventos. Tu programa recibira\u0301 instrucciones de Descarga e informacio\u0301n cuando se Termina una descarga, las descargas se realizan en el mismo orden que son solicitadas. Tambie\u0301n recibira\u0301 Consultas sobre cua\u0301ntas descargas faltan y tambie\u0301n puede recibir una pe\u0301rdida de coneXio\u0301n.",
    "input": "| | output",
    "output": "| | inputD foto1. jpgD foto2. jpgCD foto3. jpgTD foto4. jpgTTXD foto1. jpgD foto2. jpgCD foto3. jpgTD foto4. jpgTTX| | outputokokfaltan 2 descarga( s) okdescargada foto1. jpgokdescargada foto2. jpgdescargada foto3. jpg1 descarga( s) abortadas| | endRestriccionesNunca te dara\u0301n una notificacio\u0301n de descarga terminada si no habi\u0301a nada en descarga.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 460
  },
  {
    "title": "Fila Bancaria",
    "url": "https://omegaup.com/arena/problem/Fila-Bancaria",
    "history": "A nadie le agrada esperar en los bancos cuando hay una cola muy grande. Vas a escribir un programa que simule el comportamiento de dos tipos de personas, los que esperan y los que no tanto. Para ello leera\u0301s una lista de eventos.",
    "input": "Leera\u0301s un nu\u0301mero * * N* * . Posteriormente, leera\u0301s * * N* * lineas, en cada fila pueden estar tres letras: E, N, F. Si la letra es E, significa que ha llegado al banco una persona que si\u0301 va a esperar. Si la letra es N, significa que ha llegado una persona muy impaciente y no va a formarse si en la cola hay ma\u0301s de 4 personas. Si la letra que lees es F, significa que una persona termino\u0301 de ser atendida. Las personas son atendidas en el mismo orden en el que llegan.",
    "output": "Por cada fila que comienza con la letra N, debes decir si la persona poco paciente decidio\u0301 esperar o no espera.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 450
  },
  {
    "title": "Canguros",
    "url": "https://omegaup.com/arena/problem/Canguros",
    "history": "En su viaje por Australia, < b> Solid Nieves< / b> visito un lugar lleno de canguros. Emocionado al tener de cerca por primera vez a estos animales, quiso darles de comer. Los canguros son animales muy ordenados y formaron una fila para que < b> Solid Nieves< / b> les diera de comer. Sin embargo, < b> Solid Nieves< / b> quedo sorprendido al ver que adentro de la bolsa de cada canguro i, habi\u0301a una cantidad M_ i de canguros ma\u0301s pequen\u0303os ( si, las bolsas de los canguros son muy amplias) . < br> Cada canguro ( sin importar su taman\u0303o) , consume exactamente una unidad de \" comida para canguro\" . Es decir, que cada vez que < b> Solid Nieves< / b> atienda a un < i> canguro grande< / i> , debera\u0301 de darle comida a este y a todos los < i> canguros pequen\u0303os< / i> que este\u0301n en su bolsa. < b> Solid Nieves< / b> tiene inicialmente un recipiente con una cantidad C de unidades de comida. Una vez que le da a un < i> canguro grande< / i> su comida y la de los < i> canguros pequen\u0303os< / i> de su bolsa, el < i> canguro grande< / i> se ira saltado muy feliz con sus < i> canguros pequen\u0303os< / i> . # ProblemaAyuda a < b> Solid Nieves< / b> a atender a los canguros, a saber cua\u0301ntos < i> canguros grandes< / i> hay formados y a llevar un control de la \" comida para canguro\" que resta en el recipiente.",
    "input": "Li\u0301nea 1: < br> Recibira\u0301s dos enteros separados por espacios: C ( la cantidad de comida) y N el nu\u0301mero de acciones que hara\u0301 < b> Solid Nieves< / b> para atender a los canguros. < br> < br> Siguientes N li\u0301neas: < br> Recibira\u0301s un caracter que indica la accio\u0301n que realizara < b> Solid Nieves< / b> , de acuerdo a lo siguiente: < br> < br> - Si el caracter es ' N' , significa que un nuevo < i> canguro grande< / i> se formara al final de la fila. Despues debera\u0301s leer un entero M_ i que indica la cantidad de < i> canguros pequen\u0303os< / i> que tiene la bolsa de ese canguro. < br> < br> - Si el caracter es ' A' , significa que < b> Solid Nieves< / b> atiende al < i> canguro grande< / i> que esta al inicio de la fila y a todos los < i> canguros pequen\u0303os< / i> que este tenga en su bolsa. < br> < br> - Si el caracter es ' C' , significa que < b> Solid Nieves< / b> quiere contar el taman\u0303o de la fila de < i> canguros grandes< / i> que hay en ese momento, por lo que tu programa debera\u0301 imprimir una sola li\u0301nea con un nu\u0301mero entero, que represente la cantidad de < i> canguros grandes< / i> que esten formados en ese momento. < br> < br> - Si el caracter es ' R' , significa que < b> Solid Nieves< / b> quiere saber la cantidad restante de \" comida para canguro\" que hay en el recipiente, por lo que tu programa debera\u0301 imprimir una sola li\u0301nea con un nu\u0301mero entero, que represente la cantidad de comida que resta en ese momento. < br> < br> Se te asegura que la comida siempre alcanzara para dar de comer a todos los canguros y que < b> Solid Nieves< / b> nunca querra\u0301 dar de comer a una fila sin canguros. < br> < CENTER> < img src= \" http: / / www. theclinic. cl/ wp- content/ uploads/ 2009/ 10/ canguro. jpg\" width= \" 207\" height= \" 282\" > < / CENTER>",
    "output": "",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 244
  },
  {
    "title": "El tablero de Bety",
    "url": "https://omegaup.com/arena/problem/EltableroBety",
    "history": "Bety compro un tablero electronico muy poco comu\u0301n. Este tablero tiene forma de cuadricula con n filas y m columnas. El tablero electronico cuenta con 4 operaciones, \" Up\" , \" Down\" , \" Left, \" Right\" . \" Up\" toma la primera fila, y la pone al abajo de la ultima fila. \" Down\" toma la ultima fila, y la pone arriba de la primera fila. \" Left\" toma la primera columna, y la pone despues de la ultima columna\" \" Right\" toma la ultima columna, y la pone antes de la primer columna. Antes de empezar a jugar con el tablero, Bety quiere saber como quedara despues de aplicar k operaciones.",
    "input": "En la primera fila estaran los enteros n, m y k. Las siguientes k lineas, tendran un entero representando las operaciones que se aplicaran al tablero. \" Up\" sera representado con el entero 1, \" Down\" con el entero 2, \" Left\" con el entero 3 y \" Right\" con el entero 4. Las siguientes n lineas tendran m enteros, las cuales representaran la configuracio\u0301n inicial del tablero.",
    "output": "Una matriz de taman\u0303o n* m la cual representara la configuracio\u0301n final del tablero.",
    "note": "",
    "topics": [
      "data structures",
      "matrices",
      "constructive algorithms",
      "math",
      "implementation"
    ],
    "id": 240
  },
  {
    "title": "Roto",
    "url": "https://omegaup.com/arena/problem/roto",
    "history": "Te encuentras escribiendo un texto largo con un teclado roto. Bueno, no esta\u0301 tan roto. El u\u0301nico problema con el teclado es que a veces la tecla \" Inicio\" o la tecla \" Fin\" se presionan automa\u0301ticamente ( de manera interna) . No consciente de este problema, porque esta\u0301s muy concentrado en el texto y no volteas a ver el monitor, terminas de escribir. Depue\u0301s de escribir miras el monitor y te das cuenta de lo sucedido y tienes que comenzar de nuevo, pero ahora tomando las debidas precauciones. Dado el historial de teclas oprimidas, tu tarea consiste en escribir el texto que se despliega en el monitor al momento en el que volteas a verlo.",
    "input": "Una sola li\u0301nea que contiene al menos uno y hasta 100, 000 caracteres. Los caracteres sera\u0301n u\u0301nicamente letras minu\u0301sculas del alfabeto gringo, espacios y dos caracteres especiales: ' [ ' y ' ] ' . ' [ ' Significa que la tecla \" Inicio\" fue presionada internamente, y ' ] ' significa que \" Fin\" se presiono\u0301 internamente.",
    "output": "Lo que tienes que escribir es el texto que se despliega en el monitor al momento en el que volteas a verlo.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 91
  },
  {
    "title": "M\u00e1xima Ganancia",
    "url": "https://omegaup.com/arena/problem/Maxima-Ganancia",
    "history": "Trabajas en una empresa que administra opciones de acciones en la bolsa de valores. Un di\u0301a te llegan q reportes, cada de uno de alguno de los dos siguientes tipos: - 1 d_ i p_ i: Son registradas d_ i opciones de * * venta* * con precio p_ i. Si d_ i < 0, esto quiere decir que | d_ i| opciones de venta de dicho precio han sido eliminadas. - 2 d_ i p_ i: Son registradas d_ i opciones de * * compra* * con precio p_ i. Si d_ i < 0, esto quiere decir que | d_ i| opciones de compra de dicho precio han sido eliminadas. La dina\u0301mica con estas opciones no es la tradicional: Si una empresa toma una opcio\u0301n de compra, entonces hay un cliente que le comprara\u0301 un bien al precio de la opcio\u0301n, mientras que si toma una opcio\u0301n de venta, entonces hay un proveedor que le vendera\u0301 un bien al precio de la misma. Tu jefe te pide que, para cada i = 1, 2, . . . , q, calcules la ma\u0301xima ganancia que podri\u0301a tener una empresa si tuviera disponibles las opciones resultantes de ejecutar los primeros i reportes registrados.",
    "input": "La primera li\u0301nea de entrada contiene un entero q, la cantidad de reportes. Las siguientes q li\u0301neas contienen la descripcio\u0301n de q reportes. La i- e\u0301sima li\u0301nea contiene tres enteros t_ i d_ i p_ i, donde t_ i puede ser 1 para opcio\u0301n de venta o 2 para opcio\u0301n de compra. Se garantiza que cuando las opciones registradas son eliminadas hay suficientes opciones correspondientes con dicho precio.",
    "output": "Imprime q li\u0301neas, la i- e\u0301sima li\u0301nea debe contener la ma\u0301xima ganancia de alguna empresa si se dispone de las opciones registradas en los primeros i reportes.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16381
  },
  {
    "title": "Alimentando cuyitos",
    "url": "https://omegaup.com/arena/problem/alimentando-cuyitos",
    "history": "Diana ama a los cuyes. Por eso, cuida a muchos de ellos. Ella sabe que cada uno de sus cuyitos tiene una personalidad diferente y no a todos ellos les gusta lo mismo. En particular, no todos aceptan la misma comida. Cuando se trata de cuyitos, Diana es muy organizada. Por eso, ella ha distribuido las casas de sus cuyitos en una fila, dejando juntos a los cuyes que aceptan las mismas comidas. Adema\u0301s, tiene una lista con los tipos de comida que les puede dar. Cada uno de estos tipos de comida puede ser representado con 3 nu\u0301meros enteros l_ i, r_ i y c_ i que quieren decir que con el i- e\u0301simo tipo de comida puede alimentar a todos los cuyitos que esta\u0301n en el rango [ l_ i, r_ i] de la fila pagando c_ i soles. Diana quiere saber la forma ma\u0301s barata de comprar comida para sus cuyes y poder alimentarlos a todos. Sin embargo, tiene tantos de ellos que se le hace muy difi\u0301cil calcular esto a mano. Por eso, requiere de tus habilidades de programacio\u0301n para saber el mi\u0301nimo costo para poder alimentar a todos sus cuyitos. Cada cuyito puede ser alimentado con por lo menos un tipo de comida por lo que siempre hay una solucio\u0301n posible.",
    "input": "La primera li\u0301nea de entrada contiene dos enteros n, q, el nu\u0301mero de cuyes en la fila y la cantidad de tipos de comida para cuyes, respectivamente. Las siguientes q li\u0301neas contienen un tipo de comida para cuyes cada una, representado por 3 enteros l_ i, r_ i, c_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n) como explicado en el enunciado. Garantizamos que siempre existe al menos una forma de alimentar a todos los cuyitos.",
    "output": "Imprima un u\u0301nico entero: el mi\u0301nimo costo para alimentar a todos los cuyitos.",
    "note": "",
    "topics": [
      "data structures",
      "dp"
    ],
    "id": 16349
  },
  {
    "title": "Caracteres distintos con modificaciones",
    "url": "https://omegaup.com/arena/problem/Caracteres-distintos-con-modific",
    "history": "Dada una cadena S de caracteres alfanume\u0301ricos ( letras mayu\u0301sculas, letras minu\u0301sculas y di\u0301gitos) , escribe un programa que procese una secuencia de N comandos de los siguientes tipos: - ` C` i c: Reemplaza el i- e\u0301simo cara\u0301cter de S con el caracter c. - ` Q` i f: Cuenta cua\u0301ntos caracteres distintos existen en S de las posiciones i a f, sin incluir esta u\u0301ltima.",
    "input": "La cadena S seguida del entero N y de la secuencia de N comandos. Puedes suponer que tanto N como el taman\u0303o T de S esta\u0301n entre 1 y 10^ 6, que todos los caracteres involucrados son alfanume\u0301ricos y que 0 \u2264 i \u2264 f \u2264 T.",
    "output": "Para cada comando de tipo ` Q` , un entero con la respuesta respectiva.",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": 15966
  },
  {
    "title": "Armando el ejercito",
    "url": "https://omegaup.com/arena/problem/Armando-el-ejercito",
    "history": "El gran Imperio OMI ( Otomanos Muy Inteligentes) esta\u0301 planeando un ataque para expandir su territorio, el secreto de todas sus victorias es que son un imperio muy organizado y les gusta realizar todo de forma calculada, requieren de tu ayuda para prepararse. El Imperio esta\u0301 formado por distintos territorios, conectados entre si\u0301 por caminos, especi\u0301ficamente, existen N territorios y N- 1 caminos. Cada camino conecta dos territorios, y estos caminos * * NUNCA* * forman intersecciones. Los caminos esta\u0301n hechos de forma que desde cualquier territorio se puede llegar hacia cualquier otro territorio. Cada territorio cuenta con soldados, los cuales a su vez tienen un rango. A los OMIs no les gusta que los rangos queden separados, asi\u0301 que cada ciudad tiene dos nu\u0301meros l y r, los cuales indican el rango ma\u0301s bajo y el rango ma\u0301s alto, de forma que todos los rangos i tal que l \u2264 i \u2264 r existen. Como no les gusta tener eje\u0301rcitos disparejos, cada territorio tambie\u0301n tiene un nu\u0301mero x, el cual significa que todos los rangos del territorio tienen x soldados en cada rango. # ProblemaPara realizar el ataque definitivo, los OMIs deben reunir un eje\u0301rcito que cumpla con sus requisitos, asi\u0301 que te van a preguntar por varios posibles acomodos. El Imperio quiere formar un eje\u0301rcito u\u0301nicamente con ciertos rangos. El imperio define dos nu\u0301meros a y b, para que un soldado de rango k sea va\u0301lido para apuntarse, debe cumplir a \u2264 k \u2264 b. El imperio va a comenzar en un territorio u y terminar en un territorio v, de tal forma que en cada territorio en el camino de u a v ( inclusivo) , van a llevarse a todos los soldados cuyo rango k cumpla a \u2264 k \u2264 b. Quieren saber con cua\u0301ntos soldados contara\u0301n en cada acomodo. ( No\u0301tese que entre cualquier par de territorios u y v, solo existe un camino)",
    "input": "Dos enteros N y Q: La cantidad de territorios y la cantidad de preguntas. En las siguientes N li\u0301neas: Tres enteros l_ i, r_ i x_ i, significando que el territorio i, todo rango j tal que l \u2264 j \u2264 r tiene x soldados. En las siguientes N- 1 li\u0301neas: dos enteros u v, indicando que existe un camino entre los territorios u y v. En las siguientes Q li\u0301neas: cuatro enteros u v a b, significando que se quiere saber un posible acomodo que empieza en el territorio u y termina en el territorio v, y que se llevari\u0301a a todos los soldados cuyo rango k cumpla a \u2264 k \u2264 b.",
    "output": "Para cada posible acomodo, imprime la cantidad de soldados que formara\u0301n parte del eje\u0301rcito.",
    "note": "",
    "topics": [
      "trees",
      "data structures",
      "graphs"
    ],
    "id": 15567
  },
  {
    "title": "cowpic",
    "url": "https://omegaup.com/arena/problem/cowpic",
    "history": "El Granjero Juan ( GJ) ha tomado una fotografi\u0301a de todo su reban\u0303o de N( 1\u2264N\u2264100000) vacas convenientemente numeradas 1. . . \u2062N de tal manera que e\u0301l puede mostrarla a sus amigos. El di\u0301a de la foto, las vacas corren para formar una sola fila en algu\u0301n orden arbitrario con la posicio\u0301n i conteniendo a la vaca c[ i] ( 1\u2264c[ i] \u2264N) ( 1\u2264c[ i] \u2264N) . El Granjero Juan tiene sus propias ideas de co\u0301mo deberi\u0301an alinearse las vacas. GJ piensa que la vaca ii deberi\u0301a estar u\u0301nicamente a la izquierda de la vaca i+ 1 ( para todo i, 1\u2264i\u2264N\u22121) y que la vaca NN puede estar solo a la izquierda de la vaca 11. Por supuesto, ninguna vaca estara\u0301 a la izquierda de la primera ( ma\u0301s a la izquierda) vaca en la fila. Las vacas tienen muchas ganas de comer la cena post- foto prometida, por lo tanto el Granjero Juan quiere tomar la fotografi\u0301a tan pronto como sea posible. Las vacas no son buenas siguiendo instrucciones, por lo tanto e\u0301l u\u0301nicamente elige un par de vacas adyacentes y hace que intercambien posiciones una vez por minuto. \u00bfCua\u0301n ra\u0301pido puede el Granjero Juan ser capaz de ponerlas en algu\u0301n orden aceptable? Considere un conjunto de 5 vacas cuya alineacio\u0301n inicial se ve de la siguiente manera: Izquierda Derecha3 5 4 2 1E\u0301l puede intercambiar primero el segundo par de vacas: 3 4 5 2 1Y luego intercambiar el par ma\u0301s a la derecha: 3 4 5 1 2Para producir un alineamiento aceptable que requirio\u0301 dos minutos de intercambios de vacas.",
    "input": "\u2022 Li\u0301nea 1: Un solo entero, NN. \u2022 Li\u0301neas 2. . . N+ 1: La li\u0301nea i+ 1 contiene el nu\u0301mero de la vaca i- e\u0301sima en la fila, c[ i] .",
    "output": "\u2022 Li\u0301nea 1: La mi\u0301nima cantidad de tiempo, en minutos, que le toma al Granjero Juan para tener a las vacas en algu\u0301n orden apropiado.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15528
  },
  {
    "title": "Metrobus Reloaded",
    "url": "https://omegaup.com/arena/problem/pes-2022-metrobus-reloaded",
    "history": "# ProblemaWarel, el transportista tramposo, debe mover paquetes entre los aeropuertos de Algoritmolandia. Algoritmolandia tiene N aeropuertos etiquetados del 1 al N. Estos estan conectados por N- 1 vuelos bidireccionales, de forma de que entre cualquier par de aeropuertos exista una ruta para enviar paquetes entre ellos. Por leyes comerciales, cada aeropuerto tiene un li\u0301mite de W_ i kilogramos por paquete, si en algu\u0301n momento el aeropuerto tiene en sus manos un paquete de peso mayor que W_ i kilogramos, el trampostista encargado sera\u0301 despedido, en este caso Warel seri\u0301a el despedido. Sin embargo, Warel es un tramposo y sabe que los presidentes de los aeropuertos son corruptos, a un presidente le puedes pagar 1 peso y el no revisara\u0301 el peso de tu paquete. Por lo que si pagas sobornos puedes enviar paquetes ma\u0301s pesados que los de una persona que siga la ley. Warel cada que recibe un contrato para enviar un paquete del aeropuerto a al aeropuerto b con c pesos de precio, debe ver cua\u0301l es el peso ma\u0301ximo del paquete a enviar. No olvides que Warel no trabaja de gratis, por lo que de los c pesos, Warel siempre se queda con un peso como tarifa. Adema\u0301s, Warel nunca tendra\u0301 suficiente dinero para sobornar a todos los aeropuertos en la ruta de a hacia b.",
    "input": "Dos enteros, N y Q, indicando cuentos aeropuertos hay en Algoritmolandia y cuantos contratos Warel evaluara\u0301. En la siguiente li\u0301nea vienen N enteros separados por espacios, el iesimo entero indican el li\u0301mite del aeropuerto i. En las siguientes N- 1 li\u0301neas vienen dos enteros u y v, mostrando que hay un vuelo entre el aeropuerto u y el aeropuerto v. Finamente, en las siguientes Q li\u0301neas vienen los contratos de Warel, cada contrato constara\u0301 de tres enteros a, b y c, indicando un contrato para enviar un paquete del aeropuerto a hacia b con precio c.",
    "output": "Imprime Q enteros separados por nuevas li\u0301neas, los pesos ma\u0301ximos de los paquetes para cada contrato, debes imprimirlos en el mismo orden que vienen en la entrada. # Ejemplos| | input4 64 2 6 72 14 21 31 2 22 3 31 3 11 4 32 4 13 4 3| | output464726| | end# Li\u0301mites- 1 \u2264 N, Q \u2264 10^ 5- 1 \u2264 W_ i \u2264 10^ 9# Subtareas- 1 \u2264 N, Q \u2264 1, 000 ( 20 puntos) - Se asegura que W_ u \u2264 W_ v para todo u y v tal que u esta\u0301 en el camino desde v hacia el nodo 1 ( 30 puntos) - Sin restricciones adicionales ( 50 puntos)",
    "note": "",
    "topics": [
      "trees",
      "graphs",
      "binary search",
      "data structures"
    ],
    "id": 15337
  },
  {
    "title": "Campo inestable",
    "url": "https://omegaup.com/arena/problem/Campo-inestable",
    "history": "El legendario doctor Foca ha conseguido controlar una serie de a\u0301tomos para poder estudiar sus propiedades cua\u0301nticas, pero ocurrio\u0301 un accidente! Su perro entro\u0301 al laboratorio y rompio\u0301 una ma\u0301quina estabilizadora, asi\u0301 que ahora el campo cua\u0301ntico que manteni\u0301a todo bajo control ya no existe, y los a\u0301tomos se han vuelto locos! El doctor Foca necesita tu ayuda para poder observar el comportamiento de los a\u0301tomos con precisio\u0301n para poder estudiar los a\u0301tomos en este estado. Los a\u0301tomos locos pueden cambian de un nivel de energi\u0301a a otro, e incluso pueden viajar por el tiempo! Asi\u0301 que debes ser muy cuidadoso cuando los manejes. # ProblemaLos a\u0301tomos se encuentran en una li\u0301nea recta, comenzando del a\u0301tomo 1 hasta el a\u0301tomo N, todos los a\u0301tomos tienen un nivel de energi\u0301a inicial a_ i. Hay tres tipos de eventos que el doctor quiere estudiar: * * * U* * : Significa Uranizacio\u0301n, esto quiere decir que una serie de a\u0301tomos van a cambiar de nivel de energi\u0301a, la forma en la que lo hacen es que el cambio comienza en un a\u0301tomo l y termina en un a\u0301tomo r ( inclusivo) , de tal forma de que todos los a\u0301tomos i tal que l \u2264 i \u2264 r cambiara\u0301n hacia el estado de energi\u0301a x. * * * Q* * : Significa Quimicacio\u0301n, esto es una operacio\u0301n relizada por el doctor Foca, te dara\u0301 dos nu\u0301meros enteros l y r, y el doctor quiere saber \u00bfCua\u0301l es la suma de todos los niveles de energi\u0301a desde el a\u0301tomo l hasta el a\u0301tomo r? * * * T* * : Tetraposicio\u0301n. Esto significa que los a\u0301tomos van a realizar un viaje en el tiempo, los a\u0301tomos locos tienen una nocio\u0301n distinta del tiempo, por lo que para ellos una unidad de tiempo pasa cada vez que ocurre una Uranizacio\u0301n. Cuando ocurre una Tetraposicio\u0301n, todos los a\u0301tomos pasara\u0301n a tener el nivel de energi\u0301a que teni\u0301an en la Uranizacio\u0301n nu\u0301mero x ( puedes asumir que el nivel de energi\u0301a inicial ocurre en la uranizacio\u0301n 0) .",
    "input": "Dos enteros N y K: la cantidad de a\u0301tomos, y la cantidad de eventos que van a ocurrir. En la siguiente li\u0301nea, N enteros, indicando el nivel de energi\u0301a inicial de los a\u0301tomos. En las pro\u0301ximas K li\u0301neas, primero un caracter C, indicando el tipo de evento. Para un evento tipo * * U* * siguen tres enteros, l y r, indicando el inicio y el final de el efecto de la Uranizacio\u0301n, y un entero x indicando el nivel de energi\u0301a que tomara\u0301n los a\u0301tomos afectados. Para un evento de tipo * * Q* * , dos enteros l y r, indicando el inicio y el final del proceso de Quimicacio\u0301n. Para un evento de tipo * * T* * , un solo entero x, indicando la Uranizacio\u0301n a la cual van a cambiar los a\u0301tomos.",
    "output": "Para cada operacio\u0301n de Quimicacio\u0301n, imprime la suma de los niveles de energi\u0301a de los a\u0301tomos desde l hasta r.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15331
  },
  {
    "title": "Hipsters de moda",
    "url": "https://omegaup.com/arena/problem/pes-2022-hipsters",
    "history": "Hace ya unos an\u0303os, los hipsters de algoritmolandia se juntaban en un parque. Para los que no saben, ser hipster es una moda de no seguir la moda, aunque hace unos an\u0303os ser hipster se convirtio\u0301 en lo que esta de moda. Evidentemente, no puedes ser hipster si ser hipster esta de moda, por lo que surgieron variantes del hipsterismo para alejarse del hipster tradicional y famoso. A ti te interesan todas las subculturas urbanas, por lo que te decidiste a investigar el parque, despue\u0301s de un an\u0303o de investigacio\u0301n descubriste como funciona un di\u0301a en este lugar. Los hipsters se sientan en una banca larga del parque a tomar cafe\u0301, una vez sentados, ya no se moveran de lugar. Por lo que los enumeraste de 1 a N de izquierda a derecha. Luego, observaste a los hipsters y determinaste un nu\u0301mero h_ i para cada hipster que representa a que\u0301 variante pertenece, dos personas son de la misma variante si y so\u0301lo si tienen el mismo nu\u0301mero. Durante el di\u0301a pasan dos cosas: - * * Rumor( i, j, x) * * : Se esparse un rumor entre los hipsters en la posicio\u0301n i a la j de que la variante x esta\u0301 cool y fuera de moda, por lo que todos en ese segmento se convierten a la variante x. - * * Foto( i, j, x) * * : Un miembro del COMI ( Comite Orga\u0301nico de Modas Increi\u0301bles) toma una foto a las personas en el rango [ i, j] para juzgar la variante x, se le da una puntuacio\u0301n a la foto Hipster. La puntuacio\u0301n funciona de la siguiente forma: - Si no hay hipsters de la variante x, el puntaje sera\u0301 0. - Caso contrario, el puntaje sera\u0301 la cantidad de personas que no pertenecen a la variante x que esta\u0301n entre el primer y u\u0301ltimo hipster de la variante x que aparezcan en la foto. Tristemente a los del COMI se les cayo\u0301 cafe\u0301 en sus notas, asi\u0301 que ayu\u0301dales a saber el puntaje de las fotos que tomaron con tu programa.",
    "input": "Dos enteros N y Q la cantidad de hipsters en la banca y la cantidad de eventos que pasaron durante el di\u0301a. En la siguiente li\u0301nea habra\u0301 N enteros, representando la variente de los hipsters al inicio del di\u0301a. En las siguientes Q li\u0301neas vendra\u0301n tus notas de lo que fue pasando: Cada evento tendra\u0301 cuatro enteros: t, i, j, p, siendo t= 0 si lo que anotaste fue un rumor y 1 si fue una foto. Finalmente, el valor de x dependera\u0301 de la siguiente formula: x= ( m+ p) % 1, 000, 000, 000+ 1, donde m es el puntaje de la foto anterior, si no hubo foto anterior, considera m= 0",
    "output": "Imprime por cada foto su puntaje en el mismo orden de entrada, cada puntaje en una li\u0301nea.",
    "note": "",
    "topics": [
      "trees",
      "data structures"
    ],
    "id": 15245
  },
  {
    "title": "Jaime's Room",
    "url": "https://omegaup.com/arena/problem/Jaimes-Room",
    "history": "# DescriptionJaime has a very messy room with N objects, in the past, Jaime used to be verycareful with his belongings that is why each object has a label that uniquely identifiesit with the numbers from 1 to N. Jaime has been very busy training for thenext programming contest, and his mother, seeing how busy he is, decided toclean the room with the only condition that it will be cleaned in the way shefinds it best, using boxes and throwing some things to the thrash, to notbe bothered with his training Jaime agreed to his mother' s terms. Jaime' s mother has C boxes labeled with the numbers from 1 to C that she willuse to clean Jaime' s room, each day she decides to move some objects to a box, to makeher work easier ( and harder) she takes the box with label k and picks two numbers iand j then she proceeds to move all objects identified with the numbers i, i+ 1, . . . jto the box, regardless if they are already in another box. Since Jaime has a lot of items, sometimes Jaime' s mother decides to throw a box to the thrash with all the objects inside ofit. Once the box have been thrown to the trash neither Jaime nor his mother will be able tofind the objects that were in it, this means the object remains in the trash forever. With all the changes Jaime' s mother is doing in his room, Jaime is unable to find objects. He decided to create a program to help him find them using the informationhis mother gives him regarding what objects have been moved to what box and what boxes have been thrownto the thrash. Help Jaime write this program to answer what box has a given item and if given two itemsthey are on the same place ( same box, room, or thrash) .",
    "input": "The first line of input contains two integer numbers N ( 1 \u2264 N \u2264 10^ 5) andC ( 1 \u2264 C \u2264 10^ 7) separated by a space, representing the number of objectsin Jaime' s room, and the number of boxes his mother has available. The next line containsa single integer Q ( 1 \u2264 Q \u2264 10^ 5) representing the number of actions to performin the program. Each of the next Q lines describe an action to be performed in the program, the actions can be one of the following: - m i j k : Move all the objects with labels i to j ( inclusive) to box k. If an object with label l with i \u2264 l \u2264 j is in the trash, such object remains in the trash. It' s guaranteed thi box k is not in the trash, yet. - b k : Throw box k to the thrash with all its contents. It' s guaranteed this box has not been thrown to the thrash previously. - d i : Answer the label of the box that contains the item with index i- s i j: Answer if the object with index i and object with index j are in the same place ( same box, room i. e. no box assigned, or thrash) It is guaranteed that for any action: 1 \u2264 i, j \u2264 N and 1 \u2264 k \u2264 C.",
    "output": "For each action that starts with ' d' print a single line with an integer representing the boxthat contains the object, if the object is in the thrash print the string \" para que quieres saber eso\" , if the objectis in the room but not inside a box print the string \" si lo encuentro que te hago\" . For each action that startswith ' s' print a single line containing the string \" si\" if the two objects are in the same place ( if two boxes werethrown to the trash, all their combined content is considered to be in the same place, the trash, even if they were in differentboxes before) , or the string \" no\" otherwise. Answer to the actions should be in the same order as the actions appear in the input. # Example| | input10 55m 1 4 2m 3 5 1s 4 5b 2d 1| | outputsipara que quieres saber eso| | end",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 14807
  },
  {
    "title": "Suma de intervalos en una matriz",
    "url": "https://omegaup.com/arena/problem/Suma-de-intervalos-en-una-matriz",
    "history": "Tienes una matriz de NxN enteros . Tu tarea es realizar un programa que resuelva M operaciones en orden. Cada operacio\u0301n M_ i esta descrita de la siguiente manera. - Q * x_ 1 y_ 1 x_ 2 y_ 2* : Imprimir la suma de los valores de la coordenada ( x_ 1, y_ 1) a la coordenada ( x_ 2, y_ 2) . - U x y v: reemplaza el valor en la coordenada ( x, y) por el valor de v. Puedes asumir que ( x_ 1, y_ 1) es siempre la esquina superior izquierda y ( x_ 2, y_ 2) la esquina inferior derecha. Ver imagen para entender mejor. ! [ enter image description here] [ 1] En el ejemplo ( x_ 1, y_ 1) = ( 1, 1) y ( x_ 2, y_ 2) = ( 2, 2)",
    "input": "Un entero N seguido de NxN enteros, luego otro entero M seguido de M operaciones.",
    "output": "Para cada operacio\u0301n Q imprimir la suma en el intervalo dado.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 14765
  },
  {
    "title": "Artefacto Sheikah",
    "url": "https://omegaup.com/arena/problem/CDMX-EDOMEX-Rectangulos",
    "history": "El castillo de Hyrule esta\u0301 a punto de ser atacado por la malicia de Ganon. El frente del castillo puede visualizarse como un conjunto de torres de vigilancia. Cada torre tiene una altura h y se encuentra a distancia d medida desde el extremo izquierdo. Para protegerse del ataque, los caballeros deben actuar lo antes posible, y afortunadamente cuentan con un artefacto de alta tecnologi\u0301a Sheikah. Dicho artefacto consiste en una vara extensible ( con suficiente longitud como para cubrir la distancia desde la primera hasta la u\u0301ltima torre) que al colocarse paralela al suelo a una altura cualquiera, crea una pantalla de luz impenetrable en toda el a\u0301rea encerrada debajo de ella. Los caballeros tienen solo un artefacto de este tipo para asegurar el castillo, por lo que desean cubrir la mayor a\u0301rea posible y asi\u0301 detener el ataque de Ganon. Para efectos de este problema, consideramos que las torres tienen un ancho insignificante. Adema\u0301s, las torres tienen un soporte horizontal cada unidad, donde se puede fijar un extremo del artefacto. En el ejemplo siguiente se muestran algunas posibles configuraciones va\u0301lidas para el artefacto, en 4 torres de alturas 1, 4, 3, 4, a distancias 1, 3, 4, 6, respectivamente. ! [ Ejemplo1] ( slide1. jpg) ! [ Ejemplo2] ( slide2. jpg) ! [ Ejemplo3] ( slide3. jpg) # TareaEscribe un programa que, dadas las alturas y posiciones de las torres, nos ayude a calcular la mayor a\u0301rea posible que se puede conseguir al fijar el artefacto horizontalmente, con ambos extremos en cualesquiera dos torres ( no necesariamente contiguas) .",
    "input": "En la primera li\u0301nea, un valor n entre 1 y 100, 000 indicando la cantidad de torres. En las siguientes n li\u0301neas se describen las torres con dos valores. El primero representa distancia d ( 1 \u2264 d \u2264 1, 000, 000, 000) en la que se encuentra la torre, el segundo representa su altura h ( 1 \u2264 h \u2264 1, 000, 000) . # Ejemplos| | input55 102 93 81 104 9| | output40| | descriptionSe coloca el artefacto entre las torres con altura de 10, y distancia de 1 y 5, como se ve en el dibujo. ! [ Ejemplo4] ( slide4. jpg) | | input41 12 103 84 9| | output18| | descriptionLa pantalla de luz se forma colocando el artefacto entre las torres de altura 9 y 10, como se ve en el dibujo. ! [ Ejemplo5] ( slide5. jpg) | | end# # Subtareas* Para un 40% de los casos, se cumple que 1 \u2264 n \u2264 5000. * Para un 20% de los casos, se asegura que si d_ i \u2264 d_ j entonces h_ i \u2264 h_ j. * Para el restante 40% , no hay consideraciones adicionales.",
    "output": "",
    "note": "",
    "topics": [
      "data structures",
      "two pointers"
    ],
    "id": 13452
  },
  {
    "title": "Scoreboard semanal",
    "url": "https://omegaup.com/arena/problem/pes-2021-may-scoreboard-semanal",
    "history": "Una de las cosas que ma\u0301s les gustan a los competidores del * pes* es competir, viene en su nombre. Con esto en mente, los competidores le han pedido al COMI que cree un scoreboard que refleje cuanto entrena cada uno. El comi decidio\u0301 implementar un scoreboard sencillo, en el que se muestra cuantos problemas han resuelto los competidores durante el transcurso de todo el * pes* . Como funciona es que cada semana los competidores ira\u0301n resolviendo problemas en sus sesiones de practica y al final de la semana se actualiza el scoreboard. Tambie\u0301n es posible que durante la semana, el comi le descuente problemas a un competidor, pues de vez en cuando revisan los problemas que fueron enviados y encuentran problemas que son demasiado sencillos o ide\u0301nticos a otros como para ser contados. Te has percatado de que cada semana, los competidores revisan el scoreboard y si ven a alguien que les esta ganando, se sienten presionados. En concreto, cada semana los competidores revisan el scoreboard y por cada persona que tenga ma\u0301s problemas resueltos se obtiene un punto de presio\u0301n. Durante todo el proceso los competidores ira\u0301n acumulando puntos de presio\u0301n y esto a ti te interesa. Por lo que querra\u0301s saber cuantos puntos de presio\u0301n tienen los competidores al final del * pes* . Notas: Al inicio todos tienen 0 problemas resueltos. # TareaDado los registros del * pes* , ( cuando los competidores registraban problemas resueltos y cuando se les descontaban) , determina los puntos de presio\u0301n que habra\u0301n acumulado los competidores al final.",
    "input": "Dos enteros, N y M, que representan la cantidad de competidores y la cantidad de semanas que dura el pes. Luego vendra cada semana descrita de la siguiente forma: Un entero P_ i indicando cuantos registros se dieron en la ie\u0301sima semana. En las siguientes P_ i li\u0301neas, vendra\u0301n los registros de la semana. Cada registro contiene dos enteros c, v. Que indican el concursante afectado por el registro y cuantos problemas se le agregaran ( o negativo si se le descuentan) .",
    "output": "Por cada estudiante imprime un entero que represente el acumulado de puntos de presio\u0301n que sintio\u0301 durante el * pes*",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13269
  },
  {
    "title": "Parcial2",
    "url": "https://omegaup.com/arena/problem/Parcial2",
    "history": "Solicitar el enunciado de este problema al profesor. No esta\u0301 publicado todavi\u0301a.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12520
  },
  {
    "title": "City Mercado",
    "url": "https://omegaup.com/arena/problem/city-mercado",
    "history": "Carlos desea vivir lo ma\u0301s cerca a su trabajo para poder ir a pie. Su trabajo queda al final de una cierta avenida asi\u0301 que decide buscar apartamentos en alquiler y lo ma\u0301s cerca que pudo encontrar fue un apartamento al inicio de la misma avenida. Ahora bien, debido a la pandemia, muchos negocios han surgido y otros han cambiado de rubro y ahora toda la avenida donde vive Carlos esta\u0301 llena de diferentes tipos de negocios. Como Carlos trabaja en mercadotecnia, a e\u0301l le gustari\u0301a saber cua\u0301ntos tipos de negocios hay desde la cuadra X hasta la cuadra Y en la avenida que va desde su casa hasta el trabajo. Para solucionar el problema, considerara\u0301s todos los nu\u0301meros de los inmuebles desde la cuadra 1 hasta la u\u0301ltima cuadra, habiendo en total N inmuebles ( ahora negocios) . Adema\u0301s, debes de construir un programa que realice las siguientes operaciones: 1 * * X Y* * - Que indique cua\u0301ntos negocios diferentes hay desde la posicio\u0301n X a Y en el camino. 2 * * N T* * - El N- e\u0301simo inmueble es ahora un negocio de tipo T. Debes asumir que no habra\u0301 ma\u0301s de 1 tipo de negocio en un mismo inmueble.",
    "input": "La primera li\u0301nea contiene tres nu\u0301meros enteros N, Q, M: * N, Q: 1 \u2264 N , Q \u2264 10^ 5 representan la cantidad de inmuebles que hay en la avenida y el nu\u0301mero de operaciones que Carlos quiere hacer, respectivamente. * M: ( 1 \u2264 M \u2264 50) representa la cantidad de tipos de negocios que pueden haber. En seguida, la segunda li\u0301nea contendra\u0301 N nu\u0301meros enteros x_ 1, x_ 2, . . . , x_ n representando el tipo de negocios que hay inicialmente en la posicio\u0301n x_ i. . nLas siguientes Q li\u0301neas contendra\u0301n las operaciones que Carlos desea hacer.",
    "output": "Imprimir las respuestas a las operaciones de tipo 1 ( consultas) en una sola li\u0301nea con un un solo nu\u0301mero. | | input5 6 51 2 1 4 51 1 51 1 32 3 31 1 31 1 21 1 1| | output42321| | end",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12194
  },
  {
    "title": "M\u00ednimo y m\u00e1ximo en un intervalo",
    "url": "https://omegaup.com/arena/problem/Minimo-y-Maximo-en-un-Intervalo",
    "history": "Se te dara\u0301n N enteros y M consultas. Las consultas trabajan sobre un arreglo S de N enteros y pueden ser: * * C* i j: Se te dara\u0301 el cara\u0301cter * C* y un intervalo. El intervalo estara\u0301 denotado por dos enteros i y j ( inclusivo) . Debera\u0301s imprimir el mi\u0301nimo y ma\u0301ximo elementos del arreglo en dicho intervalo. * * A* i v: Se te dara\u0301 el cara\u0301cter * A* seguido de un indice i y un valor v. Debera\u0301s sobreescribir el i- e\u0301simo elemento del arreglo S con el valor v.",
    "input": "Los enteros N y M separados por un espacio, seguidos por un salto de li\u0301nea. Posteriormente, los N enteros del arreglo separados por un espacio, seguido de un salto de li\u0301nea. Finalmente, las M consultas en el formato descrito anteriormente.",
    "output": "Para cada consulta del tipo * C* , se debera\u0301 imprimir el elemento mi\u0301nimo y el ma\u0301ximo elemento del arreglo en dicho intervalo, separados por un espacio.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 11672
  },
  {
    "title": "Plantas Extra\u00f1as",
    "url": "https://omegaup.com/arena/problem/Plantas-Extranas",
    "history": "Esta\u0301s en cuarentena y tu cerebro no esta\u0301 funcionando bien. Decides salir al jardi\u0301n a tomar el aire y resulta que tus plantas han crecido muchi\u0301simos metros ( creo que alguien si\u0301 se esta\u0301 volviendo loco) y te percatas que, conforme pasan los minutos, algunas crecen y disminuyen en taman\u0303o ra\u0301pidamente. Eres un apasionado por este feno\u0301meno y decides observarlas ( igual, no hay nada mejor que hacer) . Empiezas a delirar y por alguna extran\u0303a razo\u0301n anotas en tu cuaderno las diferencias entre las alturas de las plantas que son adyacentes entre si\u0301, y cada vez que estas cambian de taman\u0303o, lo vuelves a hacer, asegurandote de escribir el minuto exacto en el cual sucedio\u0301. Pero mientras hacias esto, en ciertos minutos, se te vino a la cabeza: \" \u00bfCua\u0301l sera\u0301 la suma de las diferencias de las plantas? \" , pero no te interesan todas las plantas; solo las que este\u0301n bonitas en ese instante. Que\u0301 flojera contar todas. # ProblemaEscribe un programa que reciba como entrada el nu\u0301mero de plantas en tu jardi\u0301n, los cambios de altura sucedidos en cierto minuto, y las preguntas donde tienes que responder cua\u0301l es la suma de la diferencia de las alturas dado un rango de plantas bonitas en un determinado minuto. Te puedes asegurar que conforme vayan avanzando las preguntas, los minutos vayan incrementando. Cabe recalcar que la diferencia de alturas de dos plantas esta\u0301 dada por la planta de mayor taman\u0303o menos la de menor taman\u0303o. Si una pregunta ocurre en el mismo minuto en el cual sucede el cambio, el cambio debe de considerarse primero antes de responder a dicha pregunta.",
    "input": "En la primera li\u0301nea habra\u0301 tres enteros n, u y q; que representan el nu\u0301mero de plantas, la cantidad de cambios en las alturas, y la cantidad de preguntas, respectivamente. En la segunda li\u0301nea habra\u0301 n enteros representando las alturas de las plantas en el minuto 0. En las siguientes u lineas habra\u0301 tres enteros i, h y m, que representan la planta, la altura que gano\u0301 o perdio\u0301 esa planta y el minuto\u0301 en el cual sucedio\u0301, respectivamente. Por u\u0301ltimo, en las siguientes q li\u0301neas habra\u0301 tres enteros r_ i, r_ j y t, los cuales representan el incio del rango de las plantas bonitas, el final del rango de las plantas bonitas y el minuto en el cual quieres saber la respuesta.",
    "output": "En las siguientes q li\u0301neas tendra\u0301s que imprimir un entero que represente la suma total del rango dado.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 10840
  },
  {
    "title": "Contando menores",
    "url": "https://omegaup.com/arena/problem/Contando-menores",
    "history": "# ProblemaSe te da un arreglo de N nu\u0301meros y por cada posicio\u0301n quieres saber cuantos nu\u0301meros hay a la derecha tal que sean menores al de la posicio\u0301n actual. Como el ultimo elemento no tiene nadie a la derecha, es 0 por default. Por ejemplo, si tenemos el arreglo [ 12, 3, 2, 5, 4, 0] el resultado debe ser 5, 2, 1, 2, 1, 0. Porque para el primer elemento que es 12 todos son menores que el, mientras para 3 hay 2 elementos que son menores a el, los cuales son 2 y 0. Asi\u0301 sucesivamente hasta obtener todas las respuestas.",
    "input": "Se te da el nu\u0301mero N que representa la cantidad de nu\u0301meros del arreglo. En la segunda li\u0301nea se te dan n nu\u0301meros que son los elementos de arreglo.",
    "output": "n nu\u0301meros que representan lo descrito en el problema",
    "note": "",
    "topics": [
      "data structures",
      "binary search",
      "graphs",
      "trees"
    ],
    "id": 10497
  },
  {
    "title": "Paisajes de la ciudad",
    "url": "https://omegaup.com/arena/problem/Paisajes-de-la-ciudad",
    "history": "Disfrutas de subirte a la azotea de tu edificio para ver el paisaje y los dema\u0301s edificios. En particular, te da curiosidad saber si otras personas tambie\u0301n se suben a sus azoteas a realizar la misma actividad que tu\u0301. Tienes muy buena vista y desde tu azotea puedes ver ( adema\u0301s de tu propia azotea) las azoteas de edificios ma\u0301s chicos que el tuyo, siempre y cuando los edificios altos que el tuyo no te tapen la vista. Te gustari\u0301a saber exactamente cua\u0301ntas azoteas podri\u0301as ver si te mudaras a cada uno de los N edificios de tu ciudad. ! [ edificios] [ 1]",
    "input": "Un entero N seguido de las N alturas de los edificios. Puedes suponer que 0 \u2264 N \u2264 10^ 5 y que las alturas de los edificios son distintas y en el rango de 1 a 10^ 9.",
    "output": "Para cada edificio, la cantidad de azoteas que puedes ver desde ahi\u0301.",
    "note": "",
    "topics": [
      "divide and conquer",
      "data structures"
    ],
    "id": 10149
  },
  {
    "title": "Y^3 + X^5 = N^7",
    "url": "https://omegaup.com/arena/problem/Y3--X5--N7",
    "history": "# HistoriaUn dia, Sebas estaba leyendo un Tzaloa de la OMM, y se encontro un problema muy dificil: \" Dado un entero N, determina si se cumple la igualdad Y^ 3 + X^ 5 = N^ 7 para algun X, Y entero. \" , cuya solucion no encontro. Tu como buen programador que eres, escribe un codigo que resuelva dicho problema.",
    "input": "Un entero N.",
    "output": "Imprime 1 o - 1 si existen o no dichos enteros respectivamente.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "greedy",
      "trees",
      "dp",
      "combinatorics",
      "meet-in-the-middle",
      "implementation",
      "binary search",
      "shortest paths",
      "number theory",
      "geometry",
      "data structures",
      "sortings",
      "strings",
      "string suffix structures",
      "constructive algorithms",
      "games",
      "math",
      "matrices",
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": 9724
  },
  {
    "title": "Sumita cuadrada",
    "url": "https://omegaup.com/arena/problem/Sumita-cuadrada",
    "history": "Sebas esta\u0301 en un entrenamiento de matematicas, y le presentaron un problema: \" Demuestra que para toda N existe una suma de N nu\u0301meros tal que su suma sea un cuadrado perfecto. \" , Sebas esta muy ocupado para resolver ese problema, y tu\u0301 como buen programador que eres, te ha pedido que demuestres el problema con \" casitos\" .",
    "input": "Un entero N",
    "output": "Los N nu\u0301meros distintos entre si\u0301 separados por un espacio y ordenados en orden creciente tal que su suma sea un cuadrado perfecto",
    "note": "",
    "topics": [
      "implementation",
      "strings",
      "constructive algorithms",
      "string suffix structures",
      "math",
      "dfs and similar",
      "sortings",
      "number theory",
      "brute force",
      "meet-in-the-middle",
      "trees",
      "games",
      "data structures",
      "graphs",
      "flows",
      "geometry",
      "shortest paths",
      "greedy",
      "dp",
      "matrices",
      "graph matchings",
      "binary search",
      "combinatorics"
    ],
    "id": 9723
  },
  {
    "title": "Suma de intervalos con modificaciones",
    "url": "https://omegaup.com/arena/problem/Suma-de-intervalos-con-modificac",
    "history": "Cuentas con un arreglo de N enteros. Escribe un programa que realice M operaciones en orden, las cuales pueden ser de los siguientes tipos: - * C* I V: reemplazar el valor del I- e\u0301simo elemento del arreglo por V. - * P* I F: imprimir la suma de los elementos del arreglo que esta\u0301n de la posicio\u0301n I a la posicio\u0301n F, sin incluir esta u\u0301ltima.",
    "input": "Un entero N seguido de una secuencia de los N enteros iniciales del arreglo. Posteriormente, un entero M seguido de la descripcio\u0301n de las M operaciones. Puedes suponer que 0 \u2264 N, M \u2264 10^ 5, que 0 \u2264 I \u2264 F \u2264 N y que todos los valores y sus sumas caben en un * int* .",
    "output": "Para cada operacio\u0301n de impresio\u0301n, la suma del intervalo dado en ese momento.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 9579
  },
  {
    "title": "Incrementando intervalos con consultas",
    "url": "https://omegaup.com/arena/problem/Incrementando-intervalos-con-con",
    "history": "Cuentas con un arreglo de N enteros que valen 0 inicialmente. Escribe un programa que realice M operaciones en orden, las cuales pueden ser de los siguientes tipos: - * C* I F: incrementar los elementos del arreglo que esta\u0301n de la posicio\u0301n I a la posicio\u0301n F, sin incluir esta u\u0301ltima. - * P* I: imprimir el valor actual del I- e\u0301simo elemento del arreglo.",
    "input": "Dos enteros N, M seguido de la descripcio\u0301n de las M operaciones. Puedes suponer que 0 \u2264 N, M \u2264 10^ 5 y que 0 \u2264 I \u2264 F \u2264 N.",
    "output": "Para cada operacio\u0301n de impresio\u0301n, el valor que tiene el elemento del arreglo en ese momento.",
    "note": "",
    "topics": [
      "graphs",
      "data structures",
      "trees"
    ],
    "id": 9578
  },
  {
    "title": "Contando Estudiantes",
    "url": "https://omegaup.com/arena/problem/Contando-Estudiantes",
    "history": "Para el concurso * \" Coding Cup TECNM\" * se han inscrito una cantidad impresionante de estudiantes. Han llegado muchas peticiones de personas que quieren participar en este gran concurso y es muy difi\u0301cil llevar estadi\u0301sticas del evento. Es por ello que el profesor German Gutie\u0301rrez necesita tu ayuda para resolver este problema. Faltan m minutos para que comience el concurso. Por cada minuto que pasa pueden pasar dos acciones: Un estudiante puede registrarse para participar en el concurso o el profesor German querra\u0301 saber cua\u0301ntas personas registradas en el evento tienen una edad menor o igual a un nu\u0301mero dado x. Es por esto que se te ha dado esta tarea para poder ayudar al profesor German y dejarlo libre para que pueda ocupar ese tiempo en otras actividades y asi\u0301 poder ofrecerte un evento de mejor calidad.",
    "input": "La primera li\u0301nea de entrada contiene un nu\u0301mero entero m ( 2 \u2264 m \u2264 10^ 5) - el nu\u0301mero de minutos que faltan para que el concurso comience. Las siguientes m li\u0301neas contienen 2 enteros cada una p y x ( 1 \u2264 p \u2264 2, 1 \u2264 x \u2264 10^ 6) . Si p = 1, es una pregunta de tipo 1 y significa que un nuevo estudiante con edad x se ha registrado para participar en el concurso. Si p = 2, es una pregunta de tipo 2 y significa que el profesor German quiere saber cua\u0301ntos estudiantes registrados tienen edad menor o igual que x. Nota que puede haber varios estudiantes con la misma edad en el concurso. Y si, los estudiantes para este concurso pueden vivir muchi\u0301simos an\u0303os.",
    "output": "Para cada pregunta del tipo 2 tienes que imprimir en una sola li\u0301nea cuantas personas registradas para el concurso tienen edad menor o igual que x. # Ejemplos| | input101 12 51 22 51 32 51 42 51 52 5| | output12345| | input51 1001 2001 3002 202 250| | output02| | end",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 8940
  },
  {
    "title": "Rango de Bits",
    "url": "https://omegaup.com/arena/problem/Rango-de-Bits",
    "history": "Los bits de tu computadora se esta\u0301n escapando, asi que tu ocupas crear un programa para calcule cuantos bits activados esta\u0301n dentro de un rango de nu\u0301meros# EntradasUn nu\u0301mero * * N* * , seguido por * * N* * casos. Cada caso tiene dos enteros, un valor mi\u0301nimo * * A* * ( exclusivo) y un valor ma\u0301ximo * * B* * ( inclusivo) . # SalidasLa suma del nu\u0301mero de bits prendidos entre todos los nu\u0301meros del rango * * ( A, B] * * , es decir A + 1, A + 2, A + 3 . . . B.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "data structures",
      "math",
      "implementation",
      "combinatorics",
      "number theory",
      "dp"
    ],
    "id": 8626
  },
  {
    "title": "Agust\u00edn y su resentimiento",
    "url": "https://omegaup.com/arena/problem/Agustin-y-su-resentimiento",
    "history": "\u00a1Ayuda! En el burgo enemigo el rey Osman esta\u0301 aprendiendo a programar D: Como todos en el reino sabra\u0301n, el rey Agusti\u0301n y el rey Osman fueron amigos en sus di\u0301as de infancia hasta que por razones que ninguno de los dos han querido explicar se volvieron enemigos mortales. Aqui\u0301 en el burgo del rey Agusti\u0301n guardamos un profundo resentimiento hacia todos nuestros enemigos, es por eso que al enterarnos que el rey Osman estaba empezando a programar mandamos nuestros mejores espi\u0301as hacia el burgo enemigo y encontramos el siguiente co\u0301digo escrito en C+ + : \u201c` [ C+ + ] int input[ MAX_ N] , toSort[ MAX_ N] ; long long quickSort ( int lft, int rgt, int lev ) if ( lft > = rgt ) return 0LL; int piv = lft + input[ lev]",
    "input": "Un entero N seguido de N nu\u0301meros, A_ 0, A_ 1, . . . , A_ n- 1, que corresponden al arreglo input. Se garantiza que 0 \u2264 A_ i \u2264 n- 1 para todo i, 0 \u2264 i \u2264 n- 1.",
    "output": "N nu\u0301meros, B_ 0, B_ 1, . . . , B_ n- 1 que corresponden al arreglo toSort. Todos los nu\u0301meros de esta funcio\u0301n tienen que ser diferentes y ademas todos tienen que estar entre 1 y n, o sea, para todo x en el arreglo toSort, se tiene que 1 \u2264 x \u2264 n.",
    "note": "",
    "topics": [
      "sortings",
      "implementation",
      "data structures",
      "constructive algorithms"
    ],
    "id": 8572
  },
  {
    "title": "Subarreglos e Intervalos",
    "url": "https://omegaup.com/arena/problem/Subarreglos-e-Intervalos",
    "history": "Tienes un arreglo V de taman\u0303o N cuyos elementos son enteros positivos menores a M. Hay Q consultas. Una consulta esta\u0301 caracterizada por los enteros L, R, A y B. En cada consulta debes responder cua\u0301ntos V_ i existen, tales que L \u2264 i \u2264 R y A \u2264 V_ i\u2264 B, donde V_ i es el i- e\u0301simo elemento del arreglo. * * Atencio\u0301n con el formato de la entrada* *",
    "input": "La primera li\u0301nea contiene tres enteros N, M y Q. La segunda li\u0301nea contiene N enteros V_ 1, V_ 2, . . . , V_ N. Las siguientes Q lineas contienen cuatro enteros: L' , R' , A' y B' . Debera\u0301s obtener los valores de L, R, A y B de la siguiente forma: * L = ( L' + last) % N+ 1* R = ( R' + last) % N+ 1* A = ( A' + last) % M+ 1* B = ( B' + last) % M+ 1* * Si despue\u0301s de calcular estos valores, resulta que L > R, entonces intercambia los valores de L y R. De igual manera, intercambia los valores de A y B, si A > B* * last es la respuesta a la u\u0301ltima consulta hecha. Inicialmente last es igual a 0.",
    "output": "Imprime N li\u0301neas, respondiendo a cada consulta en el mismo orden de la entrada. # Ejemplos| | input3 3 22 1 31 2 1 22 1 2 1| | output13| | descriptionEn la primera consulta L= 2, R= 3, A= 2, B= 3. En la segunda consulta L= 1, R= 3, A= 1, B= 3| | input6 5 61 4 5 3 2 31 4 2 33 5 1 32 4 1 21 6 6 62 5 4 61 6 1 6| | output241040| | descriptionLos valores para L, R, A y B en las 6 consultas son, respectivamente: 2 5 3 42 6 1 41 3 1 22 3 3 33 6 2 55 6 1 1| | end# Li\u0301mites* 1 \u2264 N, M, Q \u2264 3* 10^ 5* 1 \u2264 V_ i, A' , B' \u2264 M* 1 \u2264 L' , R' \u2264 N",
    "note": "",
    "topics": [
      "data structures",
      "trees",
      "graphs",
      "binary search"
    ],
    "id": 7674
  },
  {
    "title": "Incrementando las ocurrencias del m\u00e1ximo de un intervalo",
    "url": "https://omegaup.com/arena/problem/Incrementando-las-ocurrencias-de",
    "history": "Dado uno arreglo de N enteros A = A_ 0, A_ 1, . . . , A_ N- 1 y una secuencia de M intervalos semiabiertos con extremos I y F, escribe un programa que para cada intervalo, calcule el ma\u0301ximo valor de A_ I, A_ I+ 1, . . . , A_ F- 1 e incremente todas las ocurrencias de dicho valor en el mismo intervalo. Tu programa debera\u0301 imprimir el estado final del arreglo despue\u0301s de procesar los M intervalos.",
    "input": "Un entero N seguido de los N enteros del arreglo. Posteriormente un entero M seguido de M parejas de enteros I y F. Puedes suponer que 0 \u2264 N \u2264 10^ 6, 0 \u2264 M \u2264 10^ 5, A_ i \u2265 0 y 0 \u2264 I \u2264 F \u2264 N.",
    "output": "Los N enteros del arreglo despue\u0301s de procesar los M intervalos. # NotaEste problema se puede resolver con los temas vistos en * Taller de Ana\u0301lisis y Disen\u0303o de Algoritmos* de la UAM Azcapotzalco.",
    "note": "",
    "topics": [
      "implementation",
      "trees",
      "data structures",
      "graphs",
      "divide and conquer"
    ],
    "id": 7637
  },
  {
    "title": "Cesped",
    "url": "https://omegaup.com/arena/problem/Cesped",
    "history": "Fernando se encontraba feliz, cuidando del parque central de algoritmolandia, Fer riega una seccio\u0301n contigua de e\u0301l o corta otra seccio\u0301n. Un di\u0301a cualquiera, un inspector llego\u0301 a revisar el estado del ce\u0301sped, sin embargo culpo\u0301 a Fer de haberlo cortado mal, pues este tenia que cortar y regar segu\u0301n las instrucciones del * Gran K* . Fer sabe que lo hizo de la manera correcta, por esto debe repetir las instrucciones de * Gran K* para mostrar que el ce\u0301sped queda como e\u0301l lo dejo, sin embargo como el ce\u0301sped ya esta cortado te pidio\u0301 que hagas un co\u0301digo que muestre como deberi\u0301a quedar el cesped despues de seguir las instrucciones del * Gran K* . Para esto Fer te explico\u0301 como se comporta el ce\u0301sped. El cesped puede ser visto como un arreglo A de enteros donde cada A_ i representa la altura de la iesima hoja de ce\u0301sped. Fer tiene una serie de instrucciones, que debe seguir en orden. Hay dos tipos de instrucciones: La instruccio\u0301n de tipo 1 recibe tres enteros i, j, x. Esta representa poner la tijera a una altura X y cortar todas las hojas en el rango [ i, j] . La instruccio\u0301n de tipo 2 recibo tres enteros i, j, x, que representa regar las hojas en el rango [ i, j] con x * ml* de agua, cada hoja crecera\u0301 x centi\u0301metros en altura.",
    "input": "Dos nu\u0301meros N y Q que representa el taman\u0303o del arreglo del ce\u0301sped y la cantidad de instrucciones de * Gran K* . En la siguiente linea hay N enteros representando el estado inicial del ce\u0301sped. En las siguientes lineas Q habra\u0301 cuatro enteros I_ i, l_ i, r_ i, x_ i. Representando el tipo de instruccio\u0301n y los datos de cada operacio\u0301n.",
    "output": "N enteros que representan el estado final del ce\u0301sped",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 7097
  },
  {
    "title": "Contar Palindromos",
    "url": "https://omegaup.com/arena/problem/Contar-Palindromos",
    "history": "Una cadena s de longitud | s| es palindroma si se lee igual de derecha a izquierda que de izquierda a derecha. Formalmente, es palindroma si y solo si s_ 1 s_ 2. . . s_ | s| - 1s_ | s| = s_ | s| s_ | s| - 1. . . s_ 2s_ 1. Mario te ha regalado una cadena T de longitud | T| por ganar la OCC. Pero ahora quieres responder q preguntas de la forma: Dados l y r, \u00bfCuantas parejas de indices ( i, j) hay tales que l \u2264 i \u2264 j \u2264 r y T_ iT_ i+ 1. . . T_ j es palindromo?",
    "input": "Li\u0301nea 1: La cadena T, la cadena consta solo de letras en ingle\u0301s en minu\u0301scula. Li\u0301nea 2: El entero q. Li\u0301neas 3 . . . 2+ q: Cada una describe una pregunta con 2 enteros ( l y r) separados por un espacio.",
    "output": "Imprima q li\u0301neas con las respuestas a cada una de las q preguntas.",
    "note": "",
    "topics": [
      "data structures",
      "strings"
    ],
    "id": 7030
  },
  {
    "title": "Transformaciones de una String",
    "url": "https://omegaup.com/arena/problem/Transformaciones-de-una-String",
    "history": "En este problema se te dara\u0301 una string S de longitud N. Tu tarea es hacer Q transformaciones en S. Una transformacio\u0301n se hace en un intervalo [ l, r] de S y existen dos tipos: * Instruccio\u0301n tipo 1: Ordena la substring del rango [ l, r] de manera no- decreciente. * Instruccio\u0301n tipo 2: Ordena la substring del rango [ l, r] de manera no- creciente. Al terminar todas las transformaciones debes dar como salida como se ve la string S.",
    "input": "En la primera li\u0301nea dos enteros N y Q, la longitud de S y la cantidad de transformaciones que debes realizar. En la segunda li\u0301nea una string de longitud N conformada solamente por letras minu\u0301sculas del alfabeto ingles. En las siguientes Q li\u0301neas tres enteros t, l y r. El tipo de transformacio\u0301n y el rango donde se debe aplicar.",
    "output": "La string S despue\u0301s de hacerle las Q transformaciones.",
    "note": "",
    "topics": [
      "implementation",
      "data structures",
      "strings"
    ],
    "id": 7028
  },
  {
    "title": "Compras Veraniegas",
    "url": "https://omegaup.com/arena/problem/Compras-Veraniegas",
    "history": "El su\u0301per Mercado COMI esta\u0301 ofreciendo la liquidacio\u0301n de verano. El Mercado ha colocado N mercanci\u0301as en una fila. La i- e\u0301sima mercanci\u0301a, tiene un precio de a_ i. Hay infinitas cantidades de mercanci\u0301as. El Mercado del COMI se ha estado preparando, dado que saben que van a venir exactamente Q clientes. El i- e\u0301simo cliente tiene d_ i pesos y va a empezar a ver mercanci\u0301as a partir de la posicio\u0301n l_ i y terminara\u0301 de ver en la posicio\u0301n r_ i. Cada que el i- e\u0301simo cliente encuentra una mercanci\u0301a, el va a comprar todas las que pueda con sus d_ i pesos. Ahora el Mercado del COMI se pregunta cuanto dinero le sobrara\u0301 a cada cliente despue\u0301s de realizar cada uno sus compras.",
    "input": "La primera li\u0301nea contiene dos enteros. N y Q respectivamente. La segunda li\u0301nea contiene N enteros a_ i separados por un espacio. Cada una de las siguientes Q li\u0301neas contiene exactamente tres enteros separados por un espacio, d_ i, l_ i y r_ i respectivamente.",
    "output": "Para cada uno de los Q clientes, debera\u0301s imprimir en una sola li\u0301nea, un entero indicando la cantidad restante de dinero que le sobro al cliente despue\u0301s de terminar sus compras.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 5272
  },
  {
    "title": "Above the Median",
    "url": "https://omegaup.com/arena/problem/Above-the-Median",
    "history": "El Granjero Juan ha alineado sus * N* ( 1\u2264 N \u2264 100, 000) vacas en una fila para medir sus alturas, la vaca i tiene altura H_ i ( 1 < = H_ i < = 1, 000, 000, 000) nanometros \u2013 \u00a1GJ cree en las mediciones precisas! El quiere tomaruna fotografi\u0301a de una subsecuencia contigua de vacas para enviarla a una competencia de fotografi\u0301a bovina en la feria del condado. La feria tiene una regla muy extran\u0303a con respecto a las fotos enviadas: se acepta una fotografi\u0301a si las altura del grupo de vacas en ella tiene una mediana que sea al menos de un li\u0301mite X ( 1 < = X < = 1, 000, 000, 000) . Para propo\u0301sitos de este problema, definimos la mediana de un arreglo A[ * 0. . . K* ] como A[ techo( * K/ 2* ) ] despue\u0301s que A este\u0301 ordenado, donde techo( * K/ 2* ) da * K/ 2* redondeado al entero ma\u0301s cercano por encima ( o K/ 2 mismo, si K/ 2 es unentero) . Por ejemplo, la mediana de 7, 3, 2, 6 es 6, y la mediana de 5, 4, 8 es 5. Por favor, ayude a GJ a contar el nu\u0301mero de subsecuencias contiguas diferentes de sus vacas que e\u0301l podri\u0301a enviar potencialmente al concurso de fotografi\u0301a.",
    "input": "* Li\u0301nea 1: Dos enteros separados por espacio: N y X. * Li\u0301neas 2. . N+ 1: La li\u0301nea i+ 1 contiene un solo entero H_ i.",
    "output": "* Li\u0301nea 1: El nu\u0301mero de subsecuencias de las vacas de GJ que tienen mediana de al menos X. * * * Note que esto puede no entrar en un entero de 32 bits. * * *",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 2916
  },
  {
    "title": "IOI 2014 - Muro",
    "url": "https://omegaup.com/arena/problem/Muro",
    "history": "< center> ! [ Logo IOI 2014] ( logo14. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# MuroJian- Jia esta\u0301 construyendo un muro apilando ladrillos del mismo taman\u0303o. Este muro consiste en n columnas de ladrillos, numeradas de 0 a n - 1 de izquierda a derecha. Las columnas pueden tener distintas alturas. La altura de una columna esta\u0301 determinada por el nu\u0301mero de ladrillos en ella. Inicialmente no hay ladrillos en ninguna columna. Para construir el muro, Jian- Jia realiza k fases de * * * agregar* * * o * * * quitar* * * ladrillos. El proceso de construccio\u0301n termina cuando las k fases son completadas. En cada fase, Jian- Jia determina un rango de columnas contiguas y una altura h, con lo que realiza el siguiente proceso: * En una fase de * * * agregar* * * . Jian- Jia agrega ladrillos a aquellas columnas del rango con menos de h ladrillos, de modo que queden con h ladrillos. E\u0301l * * no* * agrega ladrillos a las columnas que tienen h o ma\u0301s ladrillos. * En una fase de * * * quitar* * * , Jian- Jia quita ladrillos de aquellas columnas del rango con ma\u0301s de h ladrillos, de modo que queden con h ladrillos. E\u0301l * * no* * quita ladrillos de las columnas que tienen h o menos ladrillos. Por ejemplo, supo\u0301n que hay 10 columnas de ladrillos y 6 fases de construccio\u0301n. Todos los rangos de la siguiente tabla son intervalos cerrados. Los diagramas del muro despue\u0301s de cada fase se muestran debajo. < center> ! [ Tabla] ( tabla. png) < / center> Al inicio todas las columnas esta\u0301n vaci\u0301as. Despue\u0301s de la fase 0, cada una de las columnas de la 1 a la 8 tiene 4 ladrillos, las columnas 0 y 9 permanecen vaci\u0301as. En la fase 1 se quitan ladrillos de las columnas 4 a la 8 hasta que cada una de ellas tenga 1 ladrillo, la columna 9 permanece vaci\u0301a y las columnas de la 0 a la 3 quedan sin cambios. La fase 2 no cambia el muro dado que las columnas de la 3 a la 6 no tienen ma\u0301s de 5 ladrillos. Despue\u0301s de la fase 3, el nu\u0301mero de ladrillos en las columnas 0, 4 y 5 se incrementa a 3. Al finalizar la fase 4 hay 5 ladrillos en la columna 2. La fase 5 quita todos los ladrillos de las columnas 6 y 7. < center> ! [ Ejemplo] ( ejemplo. png) < / center> En este problema, tu tarea es determinar la forma final que tendra\u0301 el muro.",
    "input": "La primer li\u0301nea de entrada consistira\u0301 en dos enteros n y k. Las siguientes k li\u0301neas contendra\u0301n la descripcio\u0301n de cada fase de construccio\u0301n que Jian- Jia realiza. Cada li\u0301nea constara\u0301 de 4 enteros: tipo_ i, a_ i, b_ i y h_ i, representando el tipo de fase de construccio\u0301n ( 1 para fases de * * * agregar* * * y 2 para fases de * * * quitar* * * ) , el inicio y fin del rango de columnas y la altura de la i- e\u0301sima fase.",
    "output": "La salida debera\u0301 contener n li\u0301neas con un entero cada una. La j- e\u0301sima li\u0301nea representa el nu\u0301mero de ladrillos apilados en la columna j una vez que finalizan todas las fases de construccio\u0301n. | | input10 61 1 8 42 4 9 12 3 6 51 0 5 31 2 2 52 6 7 0| | output3454330010| | end# Li\u0301mites* 0 \u2264 a_ i \u2264 b_ i < n* 0 \u2264 h_ i \u2264 100, 000# Subtarea 1 [ 8 puntos] * 1 \u2264 k \u2264 5, 000* 1 \u2264 n \u2264 10, 000# Subtarea 2 [ 24 puntos] * 1 \u2264 k \u2264 500, 000* 1 \u2264 n \u2264 100, 000* Las fases de * * * agregar* * * ira\u0301n antes de las fases de * * * quitar* * * . # Subtarea 3 [ 29 puntos] * 1 \u2264 k \u2264 500, 000* 1 \u2264 n \u2264 100, 000# Subtarea 4 [ 39 puntos] * 1 \u2264 k \u2264 500, 000* 1 \u2264 n \u2264 2, 000, 000",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "data structures"
    ],
    "id": 2123
  },
  {
    "title": "IOI 2005 - Monta\u00f1as",
    "url": "https://omegaup.com/arena/problem/Montana",
    "history": "< center> ! [ Logo IOI 2005] ( logo05. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Montan\u0303asEl * Parque de Atracciones Mountain* ha abierto un nuevo simulador de montan\u0303a rusa. La pista simulada consiste en n rieles pegados uno tras otro, siendo el inicio del primer riel fijo a una elevacio\u0301n de 0. Byteman, el operador, puede reconfigurar la pista a placer ajustando la elevacio\u0301n de un conjunto consecutivo de rieles. La elevacio\u0301n de otros rieles en la pista no se ve afectada. Cada vez que un riel es ajustado, los siguientes rieles son elevados o rebajados para que puedan conectarse adecuadamente al fin del riel anterior, manteniendo la elevacio\u0301n del inicio en 0. Ma\u0301s adelante se ilustran algunas configuraciones posibles para la pista. Cada paseo en la montan\u0303a rusa es inicializado lanzando un carrito con suficiente energia para alcanzar una altura h. Esto es, el carrito continuara\u0301 moviendose mientras la elevacio\u0301n de la pista no exceda h y au\u0301n no se haya alcanzado el final de la pista. Conociendo el historial de los paseos y reconfiguraciones de todo el di\u0301a, quieres calcular para cada paseo el nu\u0301mero de rieles que el carrito pudo atravesar antes de parar. Internamente, el simulador representa la pista como una secuencia de n cambios de elevacio\u0301n, una por cada riel. El i- e\u0301simo nu\u0301mero d_ i representa el cambio de elevacio\u0301n ( en centi\u0301metros) para el i- e\u0301simo riel. Supongase que despue\u0301s de atravesar i - 1 rieles un carrito ha alcanzado una elevacio\u0301n de k centi\u0301metros. Una vez que el carrito atraviese el riel i se encontrara\u0301 a una elevacio\u0301n de k + d_ i centi\u0301metros. De inicio, todos los rieles se encuentran horizontales; esto es, d_ i = 0 para toda i. Los paseos y las reconfiguraciones se llevan a cabo de manera intercalada durante todo el di\u0301a: * * * * Reconfiguracio\u0301n* * * . Cada reconfiguracio\u0301n esta\u0301 especificada por tres nu\u0301meros: a, b y D. Esto significa, se ajustara\u0301 la elevacio\u0301n de todos los rieles desde a hasta b ( inclusive) a D centi\u0301metros. * * * * Paseo* * * . Cada paseo estara\u0301 especificado por un nu\u0301mero h, la ma\u0301xima altura que puede alcanzar el carrito. Escribe un programa que lea de entrada esta\u0301ndar una secuencia de reconfiguraciones y paseos y, para cada paseo en la entrada, escriba en salida esta\u0301ndar el nu\u0301mero de rieles que el carrito pudo atravesar.",
    "input": "La primer li\u0301nea contiene un entero n, el nu\u0301mero de rieles. Las siguientes li\u0301neas contienen reconfiguraciones y paseos, seguidos por un marcador de fin. Cada li\u0301nea sigue uno de los siguientes formatos: * Las * reconfiguraciones* contendra\u0301n una letra ` ' I' ` seguida de tres enteros a, b y D. * Los * paseos* contendra\u0301n una letra ` ' Q' ` y un entero h. * Una letra ` ' E' ` simboliza el marcador de fin con el que termina la entrada.",
    "output": "Por cada paseo ( ` ' Q' ` ) en la entrada debera\u0301s imprimir el nu\u0301mero de rieles que el carrito pudo atravesar. | | input4Q 1I 1 4 2Q 3Q 1I 2 2 - 1Q 3E| | output4103| | end< br / > A continuacio\u0301n se ilustra la pista de la montan\u0303a rusa antes y despue\u0301s de cada reconfiguracio\u0301n. El eje x denota el nu\u0301mero de cada riel, mientras que el eje y y los nu\u0301meros sobre cada punto muestran la elevacio\u0301n en cada extremo de los rieles. Los nu\u0301meros sobre las li\u0301neas denotan la elevacio\u0301n del respectivo riel. < center> ! [ Ejemplos] ( ejemplos. png) < / center> # Li\u0301mites* 1 \u2264 a \u2264 b \u2264 n* - 1, 000, 000, 000 \u2264 D \u2264 1, 000, 000, 000* En todo momento, la elevacio\u0301n de cualquier punto en la pista estara\u0301 en el rango de [ 0, 10^ 9] centi\u0301metros. # Subtarea 1 [ 50 puntos] * 1 \u2264 n \u2264 20, 000* No habra\u0301 ma\u0301s de 1, 000 li\u0301neas de entrada. # Subtarea 2 [ 50 puntos] * 1 \u2264 n \u2264 1, 000, 000, 000* No habra\u0301 ma\u0301s de 100, 000 li\u0301neas de entrada.",
    "note": "",
    "topics": [
      "data structures",
      "binary search"
    ],
    "id": 2122
  },
  {
    "title": "Consultando el m\u00e1ximo en un intervalo",
    "url": "https://omegaup.com/arena/problem/cmiuam",
    "history": "Un problema muy comu\u0301n en estadi\u0301stica consiste en encontrar el valor ma\u0301ximo de una lista de nu\u0301meros. Sin embargo, es frecuente querer encontrar el valor ma\u0301ximo considerando so\u0301lo intervalos de la lista. Escribe un programa que, dada una lista L de N enteros, calcule el valor ma\u0301ximo de cada uno de los M intervalos solicitados. Cada intervalo con elementos L_ I, L_ I+ 1, . . . , L_ J estara\u0301 especificado por la pareja de enteros I y J. Dados cuatro enteros a, b, c, d, los elementos del arreglo L debera\u0301 generarlos bajo la siguiente funcio\u0301n: L_ 1 = d; L_ i = ( a\u00d7L_ i- 1^ 2+ b\u00d7 L_ i- 1+ c) 1000000) para 2 \u2264 i \u2264 N.",
    "input": "Un entero N seguido de los valores a, b, c, d, seguidos del entero M y las M parejas de enteros I y J que denotan un intervalo de la lista cada una. Puedes suponer que 0 \u2264 a, b, c, d < 100, 1 \u2264 N \u2264 1000000, 1 \u2264 M \u2264 100000 y que 1 \u2264 I \u2264 J \u2264 N.",
    "output": "M enteros, uno por li\u0301nea, que correspondan con el valor ma\u0301ximo de cada uno de los M intervalos respectivamente.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 1001
  },
  {
    "title": "Androides",
    "url": "https://omegaup.com/arena/problem/androides",
    "history": "Solid Nieves ha logrado infiltrarse en la central ma\u0301gica de drogas del male\u0301fico Doctor Lira, pero esta vez le ha tendido una trampa. Lira ha creado N androides MSC para atacar a Nieves y los dispuso en una fila ofensiva, los androides se encuentran numerados de izquierda a derecha del 1 al N. < br> < br> Cada androide tiene un poderoso can\u0303o\u0301n MCS ( asi es, el can\u0303o\u0301n MSC esta\u0301 de vuelta) , al inicio de la e\u0301pica batalla entre Solid Nieves y el Doctor Lira, todos los androides apuntan a Nieves, pero no te preocupes, nuestro amigo es un gran hacker y ha conseguido acceder al sistema de control de los androides. Alterando las instrucciones que reciben los androides, Nieves puede defenderse del Doctor Lira. < br> < br> Durante la batalla sucedieron M eventos, los cuales pueden clasificarse en dos tipos especiales de evento: < br> < br> Reconfiguracio\u0301n. Solid Nieves o el Doctor Lira reconfigura a un grupo de androides, para que esto se lleve a cabo, se elige un rango [ A, B] y todos los androides cuyo nu\u0301mero este\u0301 en ese intervalo cambian su direccio\u0301n de disparo, si antes le apuntaba a Nieves entonces cambia y le apunta a Lira, si le apuntaba a Lira entonces cambiara\u0301 su objetivo por Nieves. < br> < br> Fuego. Se envi\u0301a la sen\u0303al de fuego al intervalo [ A, B] , en este momento todos los androides dentro del rango [ A, B] disparan su can\u0303o\u0301n MSC en la direccio\u0301n en la que se encuentren mirando. < br> < br> Para cada ocasio\u0301n en que se envi\u0301e la sen\u0303al de fuego al sistema, debes ayudar a Solid Nieves a saber cuantos androides le disparara\u0301n al Doctor Lira. Recuerda que en la entrada los eventos ocurren en el mismo orden en el que se leen.",
    "input": "Li\u0301nea 1: Dos enteros N y M. < br> Siguientes M li\u0301neas: Tres enteros K, A y B, representando un evento de la batalla, donde K es 0 si fue un evento de tipo Reconfiguracio\u0301n y 1 si fue un evento de tipo Fuego.",
    "output": "Por cada evento de tipo Fuego se debe imprimir una li\u0301nea con la cantidad de androides MSC que le disparara\u0301n a Lira.",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "data structures"
    ],
    "id": 223
  },
  {
    "title": "Secuencias Contiguas",
    "url": "https://omegaup.com/arena/problem/SecuenciasContiguas",
    "history": "Se tiene una lista desordenada de los nu\u0301meros entre 1 y N. Llamaremos secuencia contigua a un conjunto de elementos de la lista tales que cumplan con las siguientes restricciones: * Se elige un i\u0301ndice i, un i\u0301ndice j tal que j > i y todos los elementos entre i y j pertenecen al conjunto. Es decir, todos los elementos del conjunto este\u0301n contiguos en la lista. * Cuando se ordenan los elementos del conjunto si el nu\u0301mero menor en el conjunto es x y el nu\u0301mero mayor en el conjunto es y entonces todos los nu\u0301meros enteros z tales que x < z < y tambie\u0301n esta\u0301n en el conjunto. ( Te recomendamos leer la explicacio\u0301n del ejemplo para que estas restricciones sean ma\u0301s claras) El largo de una secuencia contigua se define como el nu\u0301mero de elementos en el conjunto. Llamaremos pareja de secuencias contiguas a dos secuencias contiguas con el mismo largo y que adema\u0301s este\u0301n consecutivas en la lista, es decir, entre la primera secuencia contigua A y la segunda B no existe ningu\u0301n elemento. El largo de una pareja de secuencias contiguas es el doble del largo de cualquiera de las secuencias contiguas que la componen. # ProblemaEscribe un programa que dada la lista desordenada de los nu\u0301meros entre 1 y N encuentre el largo de la pareja de secuencias contiguas ma\u0301s larga en la lista.",
    "input": "Tu programa debe leer del teclado los siguientes datos: * La primera li\u0301nea contiene el entero N, la cantidad de elementos en la lista. * La siguiente li\u0301nea contiene N nu\u0301meros enteros separados por un espacio, la lista.",
    "output": "Tu programa debe escribir en la pantalla un u\u0301nico entero que indique el largo de la pareja de secuencias contiguas ma\u0301s larga en la lista. # Restricciones1 < N \u2264 50, 000",
    "note": "",
    "topics": [
      "data structures",
      "probabilities",
      "divide and conquer"
    ],
    "id": 221
  },
  {
    "title": "Cartas en la compa\u00f1\u00eda",
    "url": "https://omegaup.com/arena/problem/pes-2022-compania",
    "history": "El COMI ( Compan\u0303ia Organizada Muy Ineficientemente) quiere hacer algo respecto a su comuniacio\u0301n, pues actualmente mandar mensajes toma mucho dinero. La compan\u0303i\u0301a tiene N empleados numerados del 0 al N- 1. actualmente esta estructurada de forma de que cada quien tiene un supervisor directo, excepto por el presidente de la compan\u0303ia, quien no tiene supervisor. Se dice que i supervisa a j si: i es el supervisor directo de j, o si i supervisa a alguie\u0301n que supervisa a j. Se garantiza\u0301 que el presidente supervisa a todos los empleados. Durante el trabajo, el empleado a y b necesitara\u0301n formar un equipo para resolver una tarea, pero para esto deben pedirle permiso a alguien que sea supervisor de ambos. Pero se considera irrespetuoso preguntarle a alguien que supervisa a otro empleado que pudo dar el permiso. Es decir, deben pedirle permiso a alguien que los supervise a ambos, pero no supervise a un empleado que tambie\u0301n sea supervisor de a y b. Si uno es supervisor del otro, por ejemplo a sea supervisor de b, basta con que b pida permiso de a. Pero, para pedir permiso, ambos deben escribir una carta y estas dos cartas deben llegar a la persona que ha de ceder el permiso. Actualmente, en la compan\u0303i\u0301a un empleado solo puede enviar o reenviar cartas a su supervisor directo. Cada que se reenvi\u0301a una carta, se paga $ 1 al servicio postal. Como formar un equipo cuesta mucho dinero en envi\u0301os, pidieron tu ayuda para mejorar la comunicacio\u0301n en la empresa. A todo empleado le dara\u0301s exactamente un contacto, de forma de que el empleado pueda enviar cartas a su supervisor o a su contacto. ( Nota que i tenga de contacto j NO implica que j tenga de contacto a i) . Tu trabajo como consultor de comunicaciones es decidir el contacto de cada empleado buscando que el costo ma\u0301ximo de formar un equipo dada la estructura de la empresa sea minimizado. Adema\u0301s, como parte de tu asesori\u0301a debera\u0301s entrenarlos haciendo el ruteo de las cartas de algunos equipos. # Implementacio\u0301nDebes enviar un archivo que implemente el procedimiento ` contactos` que llamara\u0301 a la funcio\u0301n ` estableceContactos` . Tambie\u0301n debera\u0301s implementar el procedimiento ` permiso` , que llamara\u0301 a la funcio\u0301n ` rutasCartas` . Estos procedimientos y funciones son descritos a continuacio\u0301n: # # contactos- C+ + : ` void contactos( int N, int Q, int[ ] supervisor) ` Recibe dos enteros N y Q representando cuantos empleados hay y cuantos equipos tendra\u0301s que obtener permiso. Tambie\u0301n recibe un vector indicando que el supervisor de i es ` supervisor[ i] ` . El presidente tendra\u0301 - 1 como supervisorDebe llamar una vez a ` estableceContactos( int N, int lista[ ] ) ` donde pasa N y la lista de contacto, indicando que i tiene de contacto a ` lista[ i] ` - # # establecerContactos- C+ + : ` void establecerContactos( int N, int lista[ ] ) ` Esta funcio\u0301n esta implementada por el evaluador. Se comporta de la siguiente forma: Recibe la lista que indica los contactos. ` lista[ i] ` indica el contacto del empleado i. Si no se llama desde contactos( ) , o se llama dos veces o ma\u0301s. Recibira\u0301s 0 pts. # # permiso- C+ + : ` void permiso( int a, int b) ` Debe obtener el permiso para formar el equipo con el empleado a y b. Para esto debe llamar a rutaCartas para que la carta de a y b lleguen a un empleado que pueda darles permiso. Una vez las cartas esten alli\u0301, debe terminar. # # rutaCartas- C+ + : ` void rutaCartas( int L, int movimientos[ ] ) ` Esta funcio\u0301n esta implementada por el evaluador. Se comporta de la siguiente forma: * * movimientos* * indica los movimientos que se haran para mover las cartas hasta el supervisor correcto. Funciona de la siguiente forma, se tomara el ` movimiento[ 0] ` como el primero y el ` movimiento[ L- 1] ` como el u\u0301ltimo: - ` movimiento[ i] = 0` indica que la carta a fue enviada al supervisor de quien la teni\u0301a. - ` movimiento[ i] = 1` indica que la carta a fue enviada al contacto de quien la teni\u0301a. - ` movimiento[ i] = 2` indica que la carta b fue enviada al supervisor de quien la teni\u0301a. - ` movimiento[ i] = 3` indica que la carta b fue enviada al contacto de quien la teni\u0301a. Si llamas a rutaCartas con argumentos inva\u0301lidos o ma\u0301s de una vez por llamada a permiso( ) , recibira\u0301s 0 puntos.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "trees",
      "data structures",
      "graphs"
    ],
    "id": 15325
  },
  {
    "title": "Cuenta de valores menores en intervalos",
    "url": "https://omegaup.com/arena/problem/Cuenta-de-valores-menores-en-int",
    "history": "Dado un arreglo de enteros A y una secuencia de tripletas I, F, V, escribe un programa que calcule cua\u0301ntos enteros del subarreglo A_ I, A_ I+ 1, . . . , A_ F- 1 son menores que V.",
    "input": "Un entero N seguido de los N enteros del arreglo. Posteriormente un entero M seguido de M tripletas de enteros I, F, V. Puedes suponer que 0 \u2264 N, M \u2264 10^ 5, 0 \u2264 I \u2264 F \u2264 N y 0 \u2264 A_ i, V \u2264 10^ 3.",
    "output": "Una secuencia de M enteros que sean los valores calculados para cada tripleta dada.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 9577
  },
  {
    "title": "Agustin y sus amigos",
    "url": "https://omegaup.com/arena/problem/Agustin-y-sus-amigos",
    "history": "En el lejano pueblo en el que vive Agusti\u0301n ( llamado Bogota\u0301) la gente normalmente es muy amistosa. Tienen esta regla de que el amigo de mi amigo es mi amigo, o sea, si digamos Juan es amigo de Pedro y Pedro es amigo de Se\u0301rvulo, entonces Juan se volveri\u0301a amigo de Se\u0301rvulo. Y no solo eso, tambie\u0301n se aseguran que su amistad sea compartida, o sea, si Juan es amigo de Pedro tiene que pasar que Pedro sea amigo de Juan ( en otros pueblos no pasa esto y la verdad es bastante triste) . Tambie\u0301n pasa que cada persona es amiga de si\u0301 misma, cosa que no es tan remarcable como las dos anteriores. Estas condiciones hacen que en Bogota\u0301 se generen grupos de amigos donde, en el grupo, todos son amigos con todos. Agusti\u0301n, que algu\u0301n di\u0301a quiere ser alcalde, estaba muy preocupado por el estado de felicidad de los habitantes de su pueblo y llego a una conclusio\u0301n despue\u0301s de mucho pensarlo; si alguien esta triste sus amigos que esta\u0301n ma\u0301s felices le pueden contagiar un poco de su felicidad, asi\u0301 que genero una medida de felicidad que se trata de: dado un grupo de amigos, su i\u0301ndice de felicidad es el menor i\u0301ndice de felicidad entre todas las personas del grupos sumado con el mayor i\u0301ndice de felicidad entre todas las personas del grupo; esto es, si por ejemplo Juan, Pedro, y Gustavo son un grupo de amigos tal que Juan tiene un i\u0301ndice de felicidad 10, Pedro tiene uno de 9 y Gustavo tiene uno de 8, el i\u0301ndice de felicidad del grupo seri\u0301a 8+ 10= 18. Ahora, te preguntara\u0301s, \u00bfCo\u0301mo hallar el i\u0301ndice de felicidad de cada persona? No importa, eso lo ha venido hallando el gobierno de la ciudad de Bogota\u0301 con me\u0301todos que tampoco tienen sentido. Ese i\u0301ndice de cada ciudadano lo cambian de vez en cuando cuando hallan nuevos datos que los haga evaluar su decisio\u0301n. Agusti\u0301n, que algu\u0301n di\u0301a planea lanzarse de alcalde, te pidio\u0301 que hicieras un co\u0301digo que pudiera resolver una serie de queries, en concreto tres: * * Query 0: * Entran dos datos, A y B, que significa que el ciudadano con el nu\u0301mero A y el ciudadano con el nu\u0301mero B se acaban de volver amigos. * * Query 1: * Entra un dato, K, y tiene que imprimir la cantidad de grupos que tienen un i\u0301ndice de felicidad menor o igual a K* * Query 2: * Entra dos datos, A y I, que significa que el i\u0301ndice de felicidad del ciudadano con el nu\u0301mero A acaba de cambiar a IEn Bogota\u0301 hay N ciudadanos, y a cada uno se le asigna un nu\u0301mero del 1 hasta el N. Igual, el programa empieza con los i\u0301ndices de felicidad iniciales de cada ciudadano ( V_ 1, V_ 2, V_ 3, . . . , V_ n) correspondientes a los i\u0301ndices de felicidad iniciales de las personas ( 1, 2, 3, . . . , n) . Por favor, \u00bfPuedes ayudar a los ciudadanos del pueblo de Agusti\u0301n a estar a gusti\u0301n? : )",
    "input": "En la primera li\u0301nea un entero N, en la segunda li\u0301nea N enteros que representan V_ 1, V_ 2, V_ 3, . . . , V_ n correspondientes a los i\u0301ndices de felicidad iniciales de las personas 1, 2, 3, . . . , n respectivamente. En la tercera li\u0301nea un entero Q correspondiente a la cantidad de queries. En las siguientes Q li\u0301neas, cada una empieza con el nu\u0301mero del tipo de query y luego con los datos correspondientes a cada query.",
    "output": "Para cada query de tipo 1, imprimir la solucio\u0301n de esa query.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "trees"
    ],
    "id": 8604
  },
  {
    "title": "Ordenando n\u00fameros con pilas",
    "url": "https://omegaup.com/arena/problem/Ordenando-numeros-con-pilas",
    "history": "Como todos sabemos, 1 < 2 < 3 < 4 < 5 < . . . pero a veces se nos olvida y debemos practicar. Tu profesor de matema\u0301ticas es muy atento y te recomendo\u0301 un juego muy divertido para repasar la leccio\u0301n. Tienes N fichas numeradas de 1 a N y las fichas esta\u0301n revueltas en dos pilas llamadas A y B. El objetivo del juego es sacar las fichas en el orden 1, 2, 3, . . . , N, pero si la ficha que quieres sacar esta\u0301 debajo de otras con nu\u0301meros ma\u0301s grandes, tendra\u0301s que mover e\u0301stas u\u0301ltimas a la otra pila para que la que te interesa quede en la cima de su pila y la puedas sacar. El juego termina cuando logras sacar todas las fichas en el orden deseado y ambas pilas quedan vaci\u0301as. Escribe un programa que determine la secuencia de operaciones ma\u0301s corta que debes realizar para completar el juego.",
    "input": "Dos enteros N_ A, N_ B que denotan el nu\u0301mero de fichas que esta\u0301n inicialmente en la pilas A y B respectivamente. Posteriormente una secuencia de N_ A enteros que denotan las fichas que esta\u0301n en la pila A de la base a la cima, seguida de una secuencia de N_ B enteros que denotan las fichas que esta\u0301n en la pila B de la base a la cima. Puedes suponer que los nu\u0301meros de todas las fichas son distintos y en el rango de 1 a N = N_ A + N_ B y que 1 \u2264 N_ A, N_ B, N \u2264 100, 000.",
    "output": "La secuencia de operaciones ma\u0301s corta que debes realizar para completar el juego, donde cada operacio\u0301n puede ser una de las siguientes: un entero positivo K indica que moviste K fichas de la pila A a la B, un entero negativo - K indica que moviste K fichas de la pila B a la A, y un caracter ` A` o ` B` indica que sacaste una ficha de la pila correspondiente.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 5779
  },
  {
    "title": "COCI VUDU",
    "url": "https://omegaup.com/arena/problem/Vudu",
    "history": "El joven Mirko ha estado u\u0301ltimamente comprando mun\u0303ecos vudu\u0301. Teniendo en cuenta que e\u0301l esta\u0301 interesado en la compra ma\u0301s econo\u0301mica posible, e\u0301l ha estado rastreando los precios de los mun\u0303ecos vudu\u0301 cada di\u0301a. Su lista de precios consiste de los precios de los mun\u0303ecos vudu\u0301 en los u\u0301ltimos N di\u0301as, done el precio de mun\u0303eco a_ i representa el precio de un mun\u0303eco hace i di\u0301as. Mirko piensa que ha notado una conexio\u0301n entre el precio promedio de mun\u0303ecos en una secuencia de di\u0301as _ _ consecutivos_ _ y el precio del siguiente di\u0301a. El quiere verificar su corazonada y esta\u0301 intrigado por una pregunta muy interesante \u0093Para un P dado, \u00bfcua\u0301ntas secuencias consecutivas diferentes en los u\u0301ltimos N di\u0301as hay cuando el precio _ _ promedio_ _ era mayor o igual que P? \u0094 Se considera que dos subsecuencias consecutivas son diferentes si sus principio o final son diferentes.",
    "input": "La primera li\u0301nea de la entrada contiene el entero N, la longitud de la secuencia. La segunda li\u0301nea de la entrada contiene N precios a_ i. La tercera li\u0301nea de la entrada contiene un nu\u0301mero P.",
    "output": "La primera y u\u0301nica li\u0301nea de la salida contiene la respuesta a la pregunta de Mirko para un P dado.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 3208
  },
  {
    "title": "IOI 2001 - Tel\u00e9fonos M\u00f3viles",
    "url": "https://omegaup.com/arena/problem/Telefonos-Moviles",
    "history": "< center> ! [ Logo IOI 2001] ( logo01. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Tele\u0301fonos Mo\u0301vilesSupo\u0301n que las estaciones base de la cuarta generacio\u0301n de tele\u0301fonos mo\u0301viles en el a\u0301rea de Tampere, Finlandia opera de la siguiente manera. El a\u0301rea es dividida en celdas cuadradas. Las celdas forman una matriz de S \u00d7 S con las filas y columnas numeradas de 0 a n - 1. Cada celda contiene una estacio\u0301n base. El nu\u0301mero de tele\u0301fonos mo\u0301viles activos dentro de una celda puede cambiar debido a que un tele\u0301fono se mueve de una celda a otra, o bien, porque un tele\u0301fono es encendido o apagado. A veces, cada estacio\u0301n base reporta el cambio en el nu\u0301mero de tele\u0301fonos activos, junto con su respectiva fila y columna, a la estacio\u0301n central. Escribe un programa que reciba los reportes que las estaciones base hagan y responda consultas acerca del nu\u0301mero total de tele\u0301fonos mo\u0301viles activos dentro de una determinada a\u0301rea rectangular.",
    "input": "Cada li\u0301nea en la entrada contendra\u0301 un comando con sus respectivos para\u0301metros. El primer entero de la li\u0301nea representa el tipo de comando que debes procesar. Los tipos de comando, con la especificacio\u0301n de su funcionamiento y sus para\u0301metros, se presentan a continuacio\u0301n: * * * * Inicializacio\u0301n* * * . Comando: 0. Para\u0301metros: S. Este sera\u0301 siempre el primer comando en la entrada. Inicializa la matriz a un taman\u0303o de S \u00d7 S con todas las celdas conteniendo 0 tele\u0301fonos activos. * * * * Actualizacio\u0301n* * * . Comando: 1. Para\u0301metros: X, Y, A. Agrega A tele\u0301fonos activos a la celda ( X, Y) . Si A es positivo, entonces se activaron A tele\u0301fonos, si es negativo, se desconectaron A tele\u0301fonos. * * * * Consulta* * * . Comando: 2. Para\u0301metros: L, B, R, T. Consulta cual es la suma total de tele\u0301fonos activos que hay en todas las celdas ( X, Y) tal que cumplan L \u2264 X \u2264 R y B \u2264 Y \u2264 T. * * * * Terminacio\u0301n* * * . Comando: 3. Para\u0301metros: Ninguno. Este comando vendra\u0301 al u\u0301ltimo y terminara\u0301 la entrada. Se asegura que las actualizaciones sera\u0301n correctas; ninguna celda tendra\u0301 menos de 0 tele\u0301fonos activos.",
    "output": "Por cada comando de * * * Consulta* * * en la entrada, tu programa debera\u0301 imprimir la respuesta a dicha consulta. | | input0 41 1 2 32 0 0 2 21 1 1 21 1 2 - 12 1 1 2 33| | output34| | end# Li\u0301mites* 1 \u2264 S \u2264 1, 024* 0 \u2264 X, Y \u2264 S - 1* 0 \u2264 L \u2264 R \u2264 S - 1* 0 \u2264 B \u2264 T \u2264 S - 1* - 2^ 15\u2264 A \u2264 2^ 15 - 1* El nu\u0301mero de tele\u0301fonos activos en una celda sera\u0301 \u2264 2^ 15 - 1. * El nu\u0301mero de tele\u0301fonos activos en toda la matriz sera\u0301 \u2264 2^ 30. * El nu\u0301mero de comandos en la entrada sera\u0301 \u2264 60, 002.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 2146
  },
  {
    "title": "Is Cheap Enough?",
    "url": "https://omegaup.com/arena/problem/Is-Cheap-Enough",
    "history": "# Is Cheap Enough? One big problem as a car salesman is helping clients choose a car within a budget limit. This is mainly because the people wants to buy exotic and powerful cars ( everyone does) and keeps asking * \u201cIs this car cheap enough? \u201d* again and again, even if their budget is really poor. As a good salesman, you want to sell many cars, so the price of a car can be negotiated with the client. Every car has a lowest and highest price, such that the agency wants to sell that car of at least the lowest price and the client will not pay more than the highest price. To avoid stressing situations, as an intelligent salesman you\u2019re looking for a software that tells you if there is any car that suits to the budget limit of a certain person. Given a catalog of n existing cars, each one with a model name, a lowest and highest price ( in dollars) , your task is to write a program that answer q queries as follows: If a person with a budget of p dollars wants to buy a car, is there a car that suits that budget? If the answer is no, the program should output * \u201cNONE\u201d* . If there are multiple cars that suits the budget print * \u201cMULTIPLE\u201d* . In case there is just one car that suits the budget, output that car\u2019s model name.",
    "input": "The first line of input contains an integer n ( 1 \u2264 n \u2264 100, 000) , the number of cars in the catalog. Each of the next n lines contains an uppercase string ( of at most 20 characters of the English alphabet) and two integers L and H ( 1 \u2264 L, H \u2264 10^ 9) . The name, lowest and highest price of the i- th car in the catalog. Next, a single line with an integer q ( 1 \u2264 q \u2264 100, 000) , the number of queries. The last q lines contains a single integer p ( 1 \u2264 p \u2264 10^ 9) , the budget for the j- th query.",
    "output": "For every query in the input, you should answer it as the description above explains. # Example| | input4SPARK 10000 45000CIVIC 12000 44000CAMARO 30000 75900MUSTANG 7000 370004600001000075005000| | outputCAMAROMULTIPLEMUSTANGNONE| | end",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": 1269
  },
  {
    "title": "Freddy y la Mariahuana",
    "url": "https://omegaup.com/arena/problem/Freddy-Mariahuana",
    "history": "* Las Mono\u0301tonas Aventuras de Freddy* # Capi\u0301tulo III. Mariahuana\u2014Como probablemente sabes, Freddy es un fana\u0301tico de la mariahuana. E\u0301l tiene un calendario con n di\u0301as planeados para fumarla. En el i- e\u0301simo di\u0301a, Freddy planea fumar g_ i gramos de mariahuana. Ethan y Marcel esta\u0301n muy preocupados por el alto consumo de Freddy durante los u\u0301ltimos meses. Por ello han decidido echar un vistazo al calendario de Freddy en busca de * temporadas pachecas* . Una * temporada pacheca* es un intervalo de di\u0301as en los que la mediana estadi\u0301stica de los gramos que Freddy consume por di\u0301a es por lo menos k. Ethan y Marcel son muy flojos y no quieren contar, por ello te han delegado la responsabilidad de encontrar el total de * temporadas pachecas* dentro del calendario de Freddy. Nota: Para este problema en especi\u0301fico, consideramos que la mediana de un arreglo de taman\u0303o a se define como el valor en la posicio\u0301n \u230aa/ 2\u230b ( indexada desde cero) cuando se ordenan, incluso si a es par. \u2014",
    "input": "Li\u0301nea 1: Dos enteros n y k. Siguientes n li\u0301neas: Los gramos g_ i de mariahuana que Freddy planea fumar en el i- e\u0301simo di\u0301a. \u2014",
    "output": "Una u\u0301nica li\u0301nea con un entero representando el total de * temporadas pachecas* que tiene el calendario. \u2014",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 1128
  },
  {
    "title": "Attack on COMI",
    "url": "https://omegaup.com/arena/problem/Attack-on-COMI",
    "history": "Sebastian y Hector son miembros del COMI ( Comite Organizado de la Muralla e Infanteria) quienes se encargan de defender al muralla y a toda la humanidad de los titanes. Los titanes siempre atacan por oleadas que avanzan en linea recta, como todos saben, la peligrosidad de un titan depende totalmente de su altura, asi que para describir una oleada de N titanes se usa un arreglo de taman\u0303o N donde el valor a_ i representa la altura del titan i. Sebastian y Hector han disen\u0303ado un dispositivo de escape que permite a un soldado saltar de la cabeza del titan i a la cabeza del titan j siempre que se cumplan las siguiente condiciones* j < i* a_ j> a_ i* no existe k entero con j < k < i tal que a_ k > a_ iAdema\u0301s le permite a un soldado saltar hasta la muralla desde la cabeza del titan i si se cumple que* no existe k entero con 0 < k < i tal que a_ k > a_ iComo se preocupan por sus soldados, quieren hacer un co\u0301digo que les permita saber en que situaciones un soldado logari\u0301a llegar a la muralla, pero como estan muy ocupados te han pedido ayuda a ti para hacerlo.",
    "input": "En la primera linea se dara el numero 1\u2264 N \u2264 10^ 6 la cantidad de titanes, en la siguiente linea habra N numeros 1\u2264 a_ i\u2264 10^ 6En la tercera linea se dara 1\u2264 Q\u2264 10^ 6 la cantidad de preguntas que se deben resolver y en las siguientes Q lineas dos nu\u0301meros 1\u2264 h_ i\u2264 N, 0\u2264 k_ i\u2264 N- 1. que representan la pregunta\" Si el soldado empieza en el titan h_ i tiene ( ( k_ i+ m_ i- 1) % N ) + 1 saltos, lograra llegar a la muralla? y si no, cual es el titan mas hasta la izquierda al que alcanzaria a llegar? \" donde m_ i es la respuesta de la pregunta anterior( Considera m_ 0= 0 y considera que si el soldado puede llegar a la muralla m_ i = - 1) .",
    "output": "Deberas imprimir Q lineas donde la i- esima linea responde la i- esima pregunta. Si es posible que llegue a la muralla imprime - 1 en otro caso, imprime el titan mas a la izquierda al que alcanza a llegar.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15192
  },
  {
    "title": "Descifrando C\u00f3digos ",
    "url": "https://omegaup.com/arena/problem/Descifrando-Codigos-cpp",
    "history": "# DescripionInspirado en Alan Turing, has construido N ma\u0301quinas para descifrar M co\u0301digos. Sin embargo, el generador ele\u0301ctrico de la cochera en donde trabajas tiene energi\u0301a E limitada ( 1 \u2264 N, M \u2264 10^ 6) ( 1 \u2264 E \u2264 10^ 9) . Cada ma\u0301quina tiene un poder p_ i ( 1 \u2264 p_ i \u2264 10^ 9) , y puede resolver todos los co\u0301digos con complejidad c si y so\u0301lo si la complejidad del c es menor o igual al poder p_ i. Cada ma\u0301quina consume una cantidad e_ i de energi\u0301a ( 1 \u2264 e_ i \u2264 10^ 9 ) y requiere un di\u0301a entero para descifrar un codigo. Cuando una ma\u0301quina es encendida, resolvera\u0301 todos los co\u0301digos que pueda y so\u0301lo consumira\u0301 e_ i de energi\u0301a, sin importar cua\u0301ntos di\u0301as trabaje. Como eres desesperado, quieres minimizar los di\u0301as que tardas en resolver todos los co\u0301digos, adema\u0301s como te gusta ahorrar quieres usar la mi\u0301nima cantidad de energi\u0301a ( priorizando primero minimizar los di\u0301as) . Las ma\u0301quinas pueden trabajar simulta\u0301neamente y procesar los co\u0301digos en cualquier orden.",
    "input": "En la primera li\u0301nea, 3 enteros N, M, E. El nu\u0301mero de ma\u0301quinas, el nu\u0301mero de co\u0301digos y la cantidad de energi\u0301a, respectivamente. En la segunda li\u0301nea recibira\u0301s N enteros p_ i que denotan el poder de la i- e\u0301sima ma\u0301quina. En la tercera li\u0301nea recibira\u0301s N enteros e_ i que denotan cua\u0301nta energi\u0301a usa la i- e\u0301sima ma\u0301quina, una vez accionada. En la cuarta y u\u0301ltima li\u0301nea recibira\u0301s M enteros c_ i que denotan la complejidad del i- e\u0301simo co\u0301digo",
    "output": "Si es posible descifrar todos los co\u0301digos con la energi\u0301a disponible, imprime M enteros i que denotan que el j- e\u0301simo co\u0301digo lo resolvio\u0301 la i- e\u0301sima ma\u0301quina. Recuerda que debes minimizar los di\u0301as y la minimizar la energi\u0301a usada priorizando primero minimizar los di\u0301as. Si Hay ma\u0301s de una solucion optima, imprime cualquiera de ellas. En caso de no ser posible, imprime \" Imposible\" | | input3 4 92 1 34 3 61 3 1 2| | output2 3 2 3| | descriptionte caso, la solucio\u0301n, es para el co\u0301digo numero 1 y 3 ( con complejidad 1 ) lo o\u0301ptimo es resolverlos con la ma\u0301quina nu\u0301mero 2 ( con poder 1 ) la cual puede resolver 2 co\u0301digos en 2 di\u0301as. Para los co\u0301digos 2 y 3 ( con complejidad 3 y 2 respectivamente ) lo o\u0301ptimo es solucionarlos con la ma\u0301quina 3 con poder 3, la cual resolvera\u0301 2 co\u0301digos en 2 di\u0301as trabajando en paralelo con la ma\u0301quina nu\u0301mero 2 ocupando asi\u0301 9 unidades de energi\u0301a totales, en 2 di\u0301as de operacio\u0301n. | | input3 4 92 1 35 3 41 3 4 2| | outputImposible| | end- Para un conjunto de casos no agrupados con valor de 5 pts, E sera menor a la suma del consumo de todas las maquinas. - Para el resto de los casos 1 \u2264 N, M \u2264 10^ 6, 1 \u2264 E, p_ i, e_ i, c_ i \u2264 10^ 9.",
    "note": "",
    "topics": [
      "binary search",
      "data structures"
    ],
    "id": 13351
  },
  {
    "title": "Compranonimas",
    "url": "https://omegaup.com/arena/problem/Compranonimas",
    "history": "Llama ano\u0301nima fue al supermercado y decidio\u0301 comprar varios paquetes de galletas. Al llegar a casa decidio\u0301 guardarlas en frascos, asi\u0301 que puso todo en una mesa ( frascos y galletas) convenientemente en una fila de taman\u0303o n. Los paquetes de galletas tienen cierta cantidad prima de piezas g dentro de ellos, mientras que los frascos, tienen una capacidad para guardar galletas f, la cual * * nunca* * sera\u0301 un nu\u0301mero primo. Teniendo todos estos objetos en la mesa m, ella guarda las galletas de una forma particular, comienza de izquierda a derecha, cuando encuentra un paquete de galletas, vaci\u0301a todas las que pueda en el frasco ma\u0301s cercano a la izquierda que encuentre, si au\u0301n le quedan galletas por guardar, vuelve a repetir este paso, hasta que las guarde todas o se acaben los frascos. Este ciclo se repite hasta llegar a el m_ n objeto.",
    "input": "Un entero n, el cual representa el nu\u0301mero de cosas en la mesa, seguido de n enteros, los cuales son los frascos f ( 1 < = f_ i < n) y/ o paquetes de galletas g ( 1 < = g_ i < n) .",
    "output": "Una li\u0301nea, la cual contiene el nu\u0301mero de galletas en cada frasco, seguido de li\u0301neas con dos enteros p y r las cuales nos indican la posicio\u0301n y las galletas que faltan para llenar el frasco p. En el caso de que un frasco este lleno, no debe especificarse su posicio\u0301n, ni cuantas galletas le faltan para llenarse. Como llama ano\u0301nima es muy distrai\u0301da pudo haber olvidado poner frascos o incluso comprar galletas. Asi\u0301 que en caso de no tener frascos debera\u0301s imprimir < kbd> Ahora donde las guardaras? < / kbd> y en caso de que no haya comprado galletas debera\u0301s imprimir < kbd> Olvidaste comprar las galletas! D: < / kbd> . \u2014\u2014\u2014-",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13218
  },
  {
    "title": "X \u00c6 A-12 Musk",
    "url": "https://omegaup.com/arena/problem/X-AE-A-12-Musk",
    "history": "# Descripcionllego el dia el joven X \u00c6 A- 12 Musk hijo, ha llegado a la escuela, en el cual su nombre es u\u0301nico y al ser hijo de un magnate programador y empresario e hijo de una cantante y artista hace que sus compan\u0303eros le quieran poner pruebas para desafiar a sus genes un dia Juan llego con un problema interezante y X \u00c6 A- 12 Musk no se nego\u0301 a resolverlo. tu con curiosidad llegas a competir contra X \u00c6 A- 12 Musk, el problema consiste en: Dado un arreglo de N numeros para cada elemento N_ i encuentra el valor del elemento ma\u0301s cercano a la derecha que tenga una frecuencia mayor que la del elemento actual. Si no existe una respuesta para una posicio\u0301n, solo imprime - 1como quieres demostrar que eres un programador mucho mejor X \u00c6 A- 12 Musk pondras todo tu esfuerzo en resolver este problema c:",
    "input": "Recibiras un entero T que denoten el numero de casos de prueba con los cuales competira\u0301n tu y X \u00c6 A- 12 Musk, en las siguientes T lineas recibiras un numero N que denota el taman\u0303o del arreglo seguido de N_ i enteros",
    "output": "Para cada caso de prueba, imprime N nu\u0301meros separados por espacios que denota el valor del elemento ma\u0301s cercano a la derecha que tenga una frecuencia mayor que la del elemento actual, si no hay valor alguno que cumpla esta premisa, imprime - 1| | input2101 3 7 2 5 1 4 2 1 561 1 2 2 2 3| | output- 1 2 2 1 1 - 1 2 1 - 1 - 12 2 - 1 - 1 - 1 - 1| | end# Limites1 < = T < = 10^ 4. 1 < = N < = 10^ 5. 1 < = N_ i < = 10^ 5.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 11136
  },
  {
    "title": "Robando cuadritos de chocolate",
    "url": "https://omegaup.com/arena/problem/Robando-cuadritos-de-chocolate",
    "history": "Te gustan mucho las barras de chocolate y tienes un refrigerador con N de ellas. Cada barra de chocolate esta\u0301 dividida en cuadritos, de modo que es fa\u0301cil partir un pedazo. Tu sobrinito tambie\u0301n es un fan del chocolate y siempre que visita tu casa toma algunos cuadritos de chocolate sin que nadie se percate. Para hacerlo, tu sobrinito elige la barra ma\u0301s grande ( en caso de haber varias igual de grandes, la de ma\u0301s a la izquierda) y toma 5 cuadritos, pero si la barra tiene 5 cuadritos o menos, entonces agarra todos sus cuadritos excepto el u\u0301ltimo, porque no quiere acabarse la barra y que noten su ausencia. Dadas las longitudes iniciales de las N barras de chocolate, \u00bfcua\u0301ntos cuadritos le quedara\u0301n a cada barra despue\u0301s de que tu sobrinito visite K veces tu casa?",
    "input": "Un entero N seguido de N enteros que denotan las longitudes de las N barras. Puedes suponer que 1 \u2264 N \u2264 2 \u00d7 10^ 5, que 0 \u2264 K \u2264 10^ 9 y que las longitudes de las barras esta\u0301n entre 1 y 10^ 4",
    "output": "Una secuencia de N enteros que denoten las longitudes de las barras despue\u0301s de que ocurrieron las K visitas.",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "data structures"
    ],
    "id": 15545
  },
  {
    "title": "La antigua jerarqu\u00eda de soldados marcianos",
    "url": "https://omegaup.com/arena/problem/La-antigua-jerarquia-de-soldados",
    "history": "Los N marcianos verdes siempre fueron grandes combatientes, pero no siempre tuvieron una jerarqui\u0301a bien establecida. Cuando finalmente se decidieron a establecerla, el jefe marciano ordeno\u0301 a los soldados que se formaran en una li\u0301nea recta y luego le ordeno\u0301 al marciano de la posicio\u0301n I que combatiera con los marcianos que hubiera en las posiciones 2I+ 1 y 2I+ 2: si el marciano de la posicio\u0301n I resultaba ser ma\u0301s fuerte que dichos marcianos, se quedaba en su lugar original y su combate terminaba. En caso contrario, el marciano de la posicio\u0301n I intercambiaba su lugar con el ma\u0301s fuerte de dichos marcianos ( que estaba en la posicio\u0301n J) y continuaba su combate, ahora con los marcianos que hubiera en las posiciones 2J+ 1 y 2J+ 2, repitiendo lo anterior hasta terminar la ronda de combates. Como el jefe marciano vio que lo anterior resultaba u\u0301til para establecer una jerarqui\u0301a razonable, e\u0301ste decidio\u0301 llevar a cabo dicho proceso un total de M veces. Cuentas con una lista de las M posiciones que el jefe marciano uso\u0301 para iniciar las M rondas de combates y deseas conocer por cua\u0301les posiciones paso\u0301 el soldado que recibio\u0301 la orden inicial de cada ronda.",
    "input": "Un entero N seguido de un renglo\u0301n con N enteros F_ 0, F_ 1, . . . , F_ N- 1 que representan las fuerzas de los N marcianos verdes en sus posiciones originales. Posteriormente, un entero M seguido de un renglo\u0301n con M enteros que son las posiciones que el jefe marciano uso\u0301 para iniciar cada una de las M rondas de combates. Puedes suponer que 1 \u2264 N, M \u2264 10^ 5, que 0 \u2264 F_ 0, F_ 1, . . . , F_ N- 1\u2264 10^ 9, que todas las fuerzas son distintas y que todas las posiciones esta\u0301n en el rango de 0 a N- 1.",
    "output": "Para cada una de las M rondas, un renglo\u0301n que contenga la secuencia de posiciones por las que paso\u0301 el marciano que recibio\u0301 la orden de iniciar dicha ronda.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13890
  },
  {
    "title": "Black Hole",
    "url": "https://omegaup.com/arena/problem/Agujero-Negro",
    "history": "# Agujero Negro! [ ] ( blackHole. png) El universo de Lufillo se puede representar como un plano cartesiano, hay n planetas representados por coordenadas ( x, y) en el plano. Todo era felicidad en el universo de Lufillo, hasta que aparecio\u0301 un agujero negro justo en el origen ( 0, 0) y esta devorando todo a su alrededor, los primeros planetas en ser devorados por el agujero negro son los que esta\u0301n ma\u0301s cercanos a el, mientras que los u\u0301ltimos en ser devorados son los ma\u0301s lejanos a el. La distancia entre el agujero negro y un planeta se obtiene mediante su distancia Euclideana. Escribe un programa que encuentre los primeros k planetas que sera\u0301n consumidos por el agujero negro.",
    "input": "Dos nu\u0301meros n ( 10^ 3 < n < 10^ 6) y k ( 0 < k < n ) . Le siguen n li\u0301neas, cada una con dos nu\u0301meros reales que representan las coordenadas x, y de un planeta, ( - 10^ 3 < x, y < 10^ 3) .",
    "output": "Las coordenadas x, y ( con 2 decimales) de los primeros k planetas en ser devorados en orden descendente de acuerdo a su distancia con el agujero negro, si dos planetas esta\u0301n a una misma distancia del agujero negro, se imprimen de acuerdo a como aparecieron en la entrada ( ver ejemplo) .",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13526
  },
  {
    "title": "Premiando a los consumidores",
    "url": "https://omegaup.com/arena/problem/Premiando-a-los-consumidores",
    "history": "Es el an\u0303o 2150 y por fin termino\u0301 la pandemia. La industria privada busca reactivar la economi\u0301a y las plazas comerciales comenzaron a organizar sorteos para recompensar a los clientes que compren ma\u0301s en la plaza. Durante el transcurso del di\u0301a, cada vez que un cliente realice una compra, la informacio\u0301n de su nombre y del monto de la compra se registrara\u0301n en un sistema. De vez en vez se realizara\u0301 un sorteo en el centro de la plaza y, tomando en cuenta todas las compras que se han realizado hasta el momento, se premiara\u0301 al cliente que haya realizado la compra con el mayor monto y que au\u0301n no haya sido premiado ( esto es asi\u0301 para evitar que se premie a alguien ma\u0301s de una vez) . Las compras del mismo cliente participan individualmente sin sumarse. Escribe el programa que tome la informacio\u0301n de las compras realizadas y que calcule a los ganadores de cada sorteo.",
    "input": "Un entero N seguido de N eventos de los siguientes tipos: - ` COMPRA` A M: La persona de nombre A realizo\u0301 una compra de monto M. - ` SORTEO` : Se realizo\u0301 un sorteo. Puedes suponer que 0 \u2264 N \u2264 10^ 5, que todos los nombres esta\u0301n formados u\u0301nicamente por letras minu\u0301sculas y tienen una longitud ma\u0301xima de 10, adema\u0301s de que todos los montos de compra son distintos y esta\u0301n en el rango de 1 a 10^ 9.",
    "output": "Para cada sorteo, la leyenda ` PREMIAR` A donde A es el nombre de la persona premiada, o la leyenda ` SIN PREMIO` si nadie debe salir premiado.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13390
  },
  {
    "title": "El censo de Matrizlandia",
    "url": "https://omegaup.com/arena/problem/Selectivo3-OIEC-2021-P4",
    "history": "Matrizlandia es una ciudad de n calles horizontales y n calles verticales, muy parecida a una matriz de n \u00d7 n. Cada calle, horizontal o vertical, cuenta con exactamente n casas. La direccio\u0301n de cada casa corresponde al par de nu\u0301meros de la calle horizontal y ve\u0301rtical donde se encuentra. Por ejemplo, la casa de la esquina superior izquierda tiene como direccio\u0301n el par de nu\u0301meros ( 0, 0) y la de la esquina inferior derecha tiene como direccio\u0301n el par ( n- 1, n- 1) . Adema\u0301s de la direccio\u0301n, cada casa tiene un taman\u0303o en metros cuadrados, que puede ser representado por un entero positivo. Los ciudadanos son tan ordenados, que construyeron la ciudad de tal forma en cada calle horizontal, las casas esta\u0301n ordenadas de forma ascendente en base a su taman\u0303o. Lo mismo sucede con las calles verticales, las casas tambie\u0301n esta\u0301n ordenadas ascendentemente por su taman\u0303o. Como parte del equipo del municipio de Matrizlandia, te asignan la tarea de censar la k- e\u0301sima casa ma\u0301s pequen\u0303a. En caso de que existan mu\u0301ltiples casas con ese taman\u0303o, te tocara\u0301 censar todas. Para darte una idea previa al censo, agarras el mapa de la ciudad y decides que seri\u0301a u\u0301til saber de que\u0301 taman\u0303o es la k- e\u0301sima casa ma\u0301s pequen\u0303a.",
    "input": "En la primera li\u0301nea el valor de n. En la segunda li\u0301nea el valor de k. Luego seguira\u0301n n li\u0301neas con n valores enteros separados por un espacio. Cada li\u0301nea contiene los taman\u0303os de las casas en orden.",
    "output": "Una sola li\u0301nea, con el taman\u0303o de la k- e\u0301sima casa ma\u0301s pequen\u0303a.",
    "note": "Por conveniencia, numeramos las calles desde el 0 hasta n- 1.",
    "topics": [
      "data structures"
    ],
    "id": 12981
  },
  {
    "title": "El ataque de las cartas",
    "url": "https://omegaup.com/arena/problem/El-ataque-de-las-cartas",
    "history": "Al final del juicio, la Reina de Corazones se enojo\u0301 tanto que les ordeno\u0301 a las N cartas que atacaran a Alicia. Pero para ese momento, Alicia ya habi\u0301a regresado a su taman\u0303o normal, asi\u0301 que lo u\u0301nico que pudieron hacer fue volar por el aire para intentar caerle encima. Cada carta I teni\u0301a una energi\u0301a inicial C_ I y las cartas se organizaron para que, en cada intento de ataque, la carta de mayor energi\u0301a volara por el aire. En cada ocasio\u0301n, Alicia simplemente se la quitaba de encima con un manazo, disminuyendo la energi\u0301a de la carta a la mitad entera y regresa\u0301ndola al suelo, desde donde podri\u0301a volver a intentar atacar. El ataque continuo\u0301 hasta que, despue\u0301s de M manazos, Alicia desperto\u0301 en la banca de un parque.",
    "input": "En el primer renglo\u0301n, dos enteros N y M. En el segundo renglo\u0301n, N enteros C_ 1, C_ 2, . . . , C_ N. Puedes suponer que 1 \u2264 N, M \u2264 10^ 5, que 1 \u2264 C_ I \u2264 10^ 9 para cada 1 \u2264 I \u2264 N y que siempre hay al menos una carta con energi\u0301a en cada ataque.",
    "output": "Las energi\u0301as E_ 1, E_ 2, . . . , E_ M de las cartas que intentaron atacar a Alicia, en el orden en el que ocurrieron los ataques.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12794
  },
  {
    "title": "La hu\u00edda de los jardineros responsables",
    "url": "https://omegaup.com/arena/problem/La-huida-de-los-jardineros-respo",
    "history": "Cada man\u0303ana, los jardineros numerados que cuidan el jardi\u0301n de la Reina Roja llegan uno por uno a comenzar su arduo di\u0301a de trabajo. Desafortunadamente los jardineros viven en pa\u0301nico, pues la Reina Roja siempre esta\u0301 inconforme con algo y ordena cortarle la cabeza al jardinero responsable, que siempre es aque\u0301l que en ese momento tenga el nu\u0301mero ma\u0301s alto. La Reina Roja visita el jardi\u0301n varias veces al di\u0301a, pero su comitiva hace tanto ruido que siempre hay tiempo para que el jardinero responsable huya mientras los dema\u0301s se quedan y le hacen reverencia. Ayuda a los jardineros responsables a conservar la cabeza.",
    "input": "Un entero N seguido de N enteros E_ 1, E_ 2, . . . , E_ N. Si E_ k > 0, entonces llega a trabajar el jardinero con el nu\u0301mero E_ k. Por el contrario, si E_ k = 0, quien llega es la Reina. Puedes suponer que siempre hay al menos un jardinero trabajando cuando llega la Reina.",
    "output": "Cada vez que llegue la Reina, el nu\u0301mero del jardinero que debe huir. # RangosPuedes suponer que 1 \u2264 N \u2264 150 000, que 0 \u2264 E_ k \u2264 10^ 9 y que todos los jardineros tienen nu\u0301meros distintos.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 11979
  },
  {
    "title": "Camino m\u00e1s corto con cupones",
    "url": "https://omegaup.com/arena/problem/Camino-mas-corto-con-cupones",
    "history": "Tu pai\u0301s tiene N ciudades y definitivamente la ciudad ma\u0301s cao\u0301tica es la 0 ( donde tu\u0301 vives) . Como necesitas vacaciones urgentemente, esta\u0301s planeando ir el pro\u0301ximo verano a la ciudad N - 1 que es famosa por ser un parai\u0301so tropical. Por otra parte, las carreteras que conectan las distintas ciudades del pai\u0301s cobran ciertas cuotas y no quisieras gastar demasiado dinero tan so\u0301lo en llegar a tu destino. Afortunadamente, cuentas con un cupo\u0301n que podra\u0301s usar en la carretera de tu eleccio\u0301n para omitir el pago de su cuota. \u00bfCua\u0301l es el costo mi\u0301nimo total al que podra\u0301s viajar de la ciudad 0 a la N - 1?",
    "input": "Dos enteros N, M seguidos de M tripletas de enteros A, B, C que denotan la existencia de una carretera que conecta las ciudades A y B con cuota C. Puedes suponer que 1 \u2264 N \u2264 10^ 4, que 0 \u2264 M \u2264 10^ 5, que 0 \u2264 A, B < N y que 1 \u2264 C \u2264 100.",
    "output": "Un entero que es el costo mi\u0301nimo para viajar de la ciudad 0 a la ciudad N - 1 o el entero - 1 si es imposible.",
    "note": "",
    "topics": [
      "data structures",
      "shortest paths",
      "implementation",
      "graphs"
    ],
    "id": 10150
  },
  {
    "title": "Simulando Age of Empires",
    "url": "https://omegaup.com/arena/problem/Simulando-Age-of-Empires",
    "history": "En * Age of Empires* y otros juegos de estrategia, el jugador construye edificios donde puede entrenar unidades para avanzar en el juego. Cada unidad tiene un tiempo de entrenamiento, el cual es el tiempo que debe transcurrir desde que el jugador ordeno\u0301 crearla hasta que e\u0301sta realmente aparece en el mapa. Como esto puede resultar engorroso, los juegos de estrategia permiten que el jugador indique en un solo comando cua\u0301ntas unidades del mismo tipo quiere crear: una vez creada una unidad, el tiempo de entrenamiento de la siguiente unidad del mismo tipo iniciara\u0301 automa\u0301ticamente sin intervencio\u0301n del jugador. En * Age of Empires* , tres de las principales unidades son el aldeano, el ballestero y el caballero, con tiempos de entrenamiento de 25, 27 y 30 segundos respectivamente. Como dichas unidades se crean en edificios distintos, el jugador puede crear aldeanos, ballesteros y caballeros en paralelo, pero las unidades encoladas en el mismo edificio deben crearse secuencialmente. Describiremos un comando del jugador con la tripleta T, U, M donde T es el segundo en el que se dio la orden, U es el tipo de la unidad a crear ( * A* para aldeano, * B* para ballestero, * C* para caballero) y M es la cantidad de unidades a crear de ese tipo. Dada una secuencia de N comandos, escribe un programa que calcule en que\u0301 segundo se creara\u0301 cada unidad y de que\u0301 tipo sera\u0301. Para este mismo problema existen dos versiones: una en la que el jugador tiene u\u0301nicamente un edificio para crear cada tipo de unidad y otra en la que el jugador tiene una infinidad de edificios de cada tipo y cada comando se asigna a un edificio desocupado ( las unidades del mismo comando siguen estando encoladas secuencialmente) . Tu programa puede calcular la respuesta para cualquiera de las dos versiones.",
    "input": "Un entero N seguido de N comandos T, U, M. Puedes suponer que 0 \u2264 N \u2264 10^ 4, 0 \u2264 T \u2264 10^ 5, 1 \u2264 M \u2264 10^ 3, que la lista de los N comandos aparece ordenada por tiempo y que no existen comandos en el mismo segundo.",
    "output": "Para cada unidad creada, dos parejas de enteros T, U separadas por espacios que denoten el tiempo en el que fue creada la unidad de tipo U. La lista anterior debe imprimirse en el orden en que las unidades se crean; en caso de que dos unidades se creen al mismo tiempo, debe imprimirse primero la unidad que fue creada por el comando ma\u0301s antigu\u0308o.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 8647
  },
  {
    "title": "La playera de Pablo",
    "url": "https://omegaup.com/arena/problem/La-playera-de-Pablo",
    "history": "A Pablo le han dicho que le regalaran cualquier playera que e\u0301l desee de una tienda. Para no verse tan avaricioso, e\u0301l ha decidido llevarse la tercera playera ma\u0301s costosa de la tienda. Ayuda a Pablo a encontrar el precio de la playera que se llevara\u0301.",
    "input": "La entrada consistira\u0301 de dos li\u0301neas. < br> En la primera habra\u0301 un entero n, la cantidad de playeras que hay en la tienda. < br> En la segunda, n nu\u0301meros x_ i separados por espacio, cada uno representando el precio de cada playera de la tienda.",
    "output": "Un solo entero indicando el valor de la playera que eligio.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 6797
  },
  {
    "title": "Tapia, el oso poderoso",
    "url": "https://omegaup.com/arena/problem/Elecciones-Oso",
    "history": "Tapia es un oso grizzly que esta deseoso de poder y adoracio\u0301n. E\u0301l busca ganar las proximas elecciones y gobernar sobre Alumina. Hay n candidatos, incluyendo a Tapia. Nosotros sabemos cuantos ciudadanos van a votar por cada candidato. Por ahora, el i- e\u0301simo candidato tiene a_ i votos. Tapia es el candidato nu\u0301mero 1. Para ganar las elecciones, e\u0301l debe tener una cantidad estrictamente mayor a la de los dema\u0301s candidatos. La victoria es ma\u0301s importante que cualquier otra cosa, por lo que Tapia decidio\u0301 hacer trampa. E\u0301l robara\u0301 los votos de sus oponentes por medio del soborno a algunos ciudadanos. Para sobornar a un ciudadano, Tapia le dara\u0301 un dulce a e\u0301l o ella ( los ciudadanos son osos, y a los osos les gustan los dulces) . Tapia no tiene muchos dulces, \u00bfCua\u0301ntos ciudadanos tiene que sobornar?",
    "input": "La primera li\u0301nea contiene un entero n ( 2\u2264 n\u2264 100) - El nu\u0301mero de candidatos. La segunda li\u0301nea contiene n enteros separados por un espacio a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i \u2264 1000) - numeros de votos para cada participante. Tapia es el candidato nu\u0301mero 1. Nota que despue\u0301s de los sobornar, es posible que la cantidad de votos para algunos candidatos sea cero o mayor a 1000.",
    "output": "Imprimir el mi\u0301nimo nu\u0301mero de ciudadanos que Tapia debe de sobornar para tener una cantidad estrictamente mayor de votos que cualquier otro candidato.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 6627
  },
  {
    "title": "Ordenando archivos",
    "url": "https://omegaup.com/arena/problem/Ordenando-archivos-v2",
    "history": "Dada una secuencia de N enteros positivos distintos, imprime dicha secuencia ordenada.",
    "input": "El entero N en formato de texto seguido de un espacio en blanco. Posteriormente la secuencia de N enteros, los cuales debera\u0301n leerse con rutinas de lectura sin formato ( por ejemplo, * fread* ) . Cada entero de la secuencia estara\u0301 representado con sizeof( int32 _ t) = 4 bytes. Puedes suponer que 0 \u2264 N \u2264 2^ 21 y que todos los bytes que conforman la secuencia son caracteres ASCII gra\u0301ficos.",
    "output": "La secuencia ordenada, la cual debera\u0301 imprimirse con rutinas de escritura sin formato ( por ejemplo, * fwrite* ) . Cada entero debera\u0301 representarse con sizeof( int32 _ t) = 4 bytes. # NotaYa que OmegaUp vincula la entrada esta\u0301ndar a un archivo, un programa podra\u0301 leer la entrada ma\u0301s de una vez utilizando rutinas de posicionamiento en archivos ( por ejemplo, * fseek* o * rewind* ) sobre * stdin* o equivalente.",
    "note": "",
    "topics": [
      "expression parsing",
      "data structures",
      "implementation",
      "*special",
      "sortings"
    ],
    "id": 6556
  },
  {
    "title": "Trampas",
    "url": "https://omegaup.com/arena/problem/trampas",
    "history": "El aventurero Ah Balam se perdio\u0301 accidentalmente en un laberinto lleno de trampas. Por fortuna, en su intento por salir, Ah Balam encontro\u0301 un mapa del laberinto. El mapa del laberinto consta de una cuadricula de N filas por M columnas. Las filas estan numeradas de 1 a N de arriba hacia abajo( norte a sur) , las columnas estan numeradas de 1 a M de izquierda a derecha( oeste a este) . Cada casilla de la cuadricula contiene solo uno de estos 4 caracteres: ' S' , ' . ' , ' x' y ' # ' , que representan la salida, suelo sin trampa, suelo con trampa y pared. Ah Balam, como todo mortal, no puede caminar a trave\u0301s de las paredes, y solo puede moverse hacia 4 direcciones( norte, sur, este y oeste) , NO se puede mover en diagonal. Por ejemplo, si en el siguiente laberinto Ah Balam se encuentra inicialmente en la fila 2 columna 6, tendri\u0301a que pasar por al menos 2 trampas para llegar a la salida: # # # # # # # # # . S. # . . # # xxx# . # # # . . . x. # # # . . . # x# # # . . . x. # # # # # # # # # # Ah Balam ha solicitado tu ayuda. # ProblemaEscribe un programa que dada la posicio\u0301n inicial de Ah Balam y el mapa del laberinto, determine cual es el minimo nu\u0301mero de trampas por las que Ah Balam tiene que pasar para llegar a la salida.",
    "input": "Li\u0301nea 1: 2 enteros separados por un espacio que representan a N y M respectivamenteLi\u0301nea 2: La fila y la columna donde se encuentra inicialmente Ah Balam. Siguientes N li\u0301neas: M caracteres en cada una donde el j- e\u0301simo caracter de la i+ 2- e\u0301sima li\u0301nea representa la celda j de la fila i. * * Ejemplo: * * 7 82 6# # # # # # # # # . S. # . . # # xxx# . # # # . . . x. # # # . . . # x# # # . . . x. # # # # # # # # # # Nota: Ah Balam nunca se encontrara\u0301 inicialmente dentro de una pared.",
    "output": "Li\u0301nea 1: \u0002Un solo entero: el mi\u0301nimo de trampas por las que Ah Balam tiene que pasar para llegar a la salida. * * Ejemplo: * * 2# Li\u0301mitesPuedes asumir que 0 \u2264 N, M \u2264 300",
    "note": "",
    "topics": [
      "matrices",
      "data structures",
      "math",
      "shortest paths",
      "graphs"
    ],
    "id": 1623
  },
  {
    "title": "Strange queries",
    "url": "https://omegaup.com/arena/problem/Strange-queries",
    "history": "Cansado de resolver tantos problemas de * queries* sobre arreglos, te encontraste con el siguiente problema: Tienes n nu\u0301meros enteros no negativos a_ 0, a_ 1, . . . , a_ n- 1, y tendra\u0301s que resolver q preguntas inusuales, las cuales son de la forma: * \u00bfcua\u0301l es la suma de los elementos a_ l, . . . , a_ r tales que a_ i \u2264 k para toda i tal que l \u2264 i \u2264 r? * . Ma\u0301s formalmente, tienes que hallar: \u2211_ i= l a_ i \u2264 k^ r a_ i",
    "input": "* Primera li\u0301nea: el valor de n. * Segunda li\u0301nea: n enteros no negativos a_ 0, a_ 1, . . . , a_ n- 1 separados por espacios. * Tercera li\u0301nea: el valor de q. * Siguientes q li\u0301neas: cada una contendra\u0301 los valores de l, r y k separados por espacios. Cada una de estas li\u0301neas representa una pregunta.",
    "output": "Imprime q li\u0301neas, cada una con la respuesta de las preguntas, en el mismo orden en el que se te dan.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 7894
  },
  {
    "title": "Listas mentirosas",
    "url": "https://omegaup.com/arena/problem/Listas-mentirosas",
    "history": "El profe de EDL te pidio\u0301 que hicieras la insercio\u0301n \u201cmanual\u201d de elementos en una lista doblemente ligada. Sin embargo, sabes que existe std: : list y decides aplicar un truco. Escribe un programa que que cumpla con la siguiente consigna: La funcion debe recibir un nu\u0301mero N que es el taman\u0303o de una lista enlazada de enteros positivos. Por lo tanto, debera\u0301s insertar los N nu\u0301meros ( nodos) lei\u0301dos desde el teclado, an\u0303adiendo un nodo con valor ' - 1' antes de cada nodo con un nu\u0301mero impar. Por lo tanto, debera\u0301s retornar la cantidad de nodos con valor - 1 insertados, asi\u0301 como la lista con el formato: NULL< - 1< - > IMPAR< - > PAR< - > PAR< - > - 1< - > IMPAR< - > - 1< - > IMPAR< - > - 1< - > IMPAR- > NULL",
    "input": "Un entero N seguido de los valores nume\u0301ricos de cada posicio\u0301n.",
    "output": "Un entero que sea el valor del nu\u0301mero de nodos con valor - 1 insertado, seguido de la lista en el formato pedido.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16399
  },
  {
    "title": "Copiando listas",
    "url": "https://omegaup.com/arena/problem/Copiando-listas",
    "history": "Tienes N listas de nu\u0301meros enteros e inicialmente la primera lista guarda un 1, la segunda lista guarda dos 2s, la tercera guarda tres 3s, etc. Por otro lado, realizara\u0301s M operaciones sobre las listas: cada operacio\u0301n consiste en transladar a la lista i todos los enteros almacenados en la lista J, de modo que los elementos trasladados se agregan al final de la lista I en el orden en el que apareci\u0301an en la lista J y esta u\u0301ltima queda vaci\u0301a. Escribe un programa que muestre el contenido final de todas las listas.",
    "input": "En la primera li\u0301nea: un entero NEn la segunda li\u0301nea: un entero MEn las lineas 2+ M parejas de enteros I, J separados por un espacio.",
    "output": "Para cada lista ( de la primera a la u\u0301ltima) , una li\u0301nea con los enteros almacenados despue\u0301s de realizar todas las operaciones. # Li\u0301mitesPuedes suponer que 1\u2264 N, M\u2264 1, 000 y que 1\u2264 I = \u0338 J \u2264 N.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16343
  },
  {
    "title": "Reacomodando el men\u00fa",
    "url": "https://omegaup.com/arena/problem/Reacomodando-el-menu",
    "history": "El di\u0301a previo al examen, vinieron los chicos de prepa al evento llamado la UAM es tu casa. Por lo tanto, debido a que el comedor estuvo bastante lleno, quisimos ir a la barra fri\u0301a de la UAM a probar las opciones que existen. El menu\u0301 que ofrecen esta\u0301 dado por una serie de tarjetas con identificadores nume\u0301ricos en dos partes: 1. - De los nu\u0301meros del 1 al n los platillos disponibles. 2. - De los nu\u0301meros n+ 1 al m las bebidas disponibles. Sin embargo, por alguna razo\u0301n el profesor Edwin tiro\u0301 todas las tarjetas de identificadores, quedando revueltas en el orden de: una bebida y un platillo, pero. . . ma\u0301gicamente quedaron en orden. Es decir, bebida_ 1, platillo_ 1, bebida_ 2, platillo_ 2, . . . , bebida_ n, bebida_ m con m y n iguales. # ProblemaLa \" idea accidental\" le gusto\u0301 a la seccio\u0301n de barra fri\u0301a y ahora quieren implementar un menu\u0301 ligado entre bebida- platillo. Por lo tanto, debera\u0301s realizar un programa que \" simule\" esta accio\u0301n. Sin embargo, debes considerar que, en el caso de que haya ma\u0301s platillos que bebidas o ma\u0301s bebidas que platillos, las sobrantes quedara\u0301n sin pareja al final del menu\u0301.",
    "input": "Tu programa debe leer del teclado la siguiente informacio\u0301n: Los nu\u0301meros m y n las dimensiones de los dos menu\u0301s.",
    "output": "Una lista de los n+ m elementos de los dos menu\u0301s, revueltos en el orden bebida- platillo ( revisar los ejemplos) . # RestriccionesDebera\u0301s utilizar std: : vector o utilizar listas doblemente ligadas. Sin embargo, por una calificacio\u0301n ma\u0301xima de 8. 5 en el programa. . . puedes usar arreglos.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 16331
  },
  {
    "title": "Borrando n\u00fameros (listas)",
    "url": "https://omegaup.com/arena/problem/Borrando-numeros-listas",
    "history": "Implementa un programa que reciba una lista de enteros L y un nu\u0301mero entero n de forma que modifique la lista mediante el borrado de todos los elementos de la lista que tengan este valor.",
    "input": "Una lista de enteros L y un nu\u0301mero entero n",
    "output": "La lista L sin las repeticiones del elemento n",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 16183
  },
  {
    "title": "Formados en la cafeter\u00eda (reloaded)",
    "url": "https://omegaup.com/arena/problem/Formados-en-la-cafeteria-reloade",
    "history": "En la cafeteri\u0301a de la UAM, la cola suele ser larga y algunas personas abusivas se meten en ella cuando ven que hay un amigo formado. Escribe un programa que procese una secuencia de N eventos de los siguientes tipos. - ` LLEGA ` V: Llego\u0301 la persona de nombre V a formarse al final de la cola. - ` METE` V A: Llego\u0301 la persona de nombre V y se metio\u0301 en la cola inmediatamente atra\u0301s de su amigo de nombre A, quien ya estaba formado. - ` ATIENDE` : Se debe atender a la siguiente persona de la cola, imprimiendo su nombre.",
    "input": "Un entero N seguido de los N eventos. Puedes suponer que 1 \u2264 N \u2264 2 \u00d7 10^ 5, que los nombres consisten de entre 5 y 10 letras minu\u0301sculas, que nunca ocurre un evento de atencio\u0301n cuando la cola esta\u0301 vaci\u0301a y que no hay personas formadas con nombres repetidos.",
    "output": "Los nombres de las personas atendidas en el orden en el que esto ocurrio\u0301.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 15298
  },
  {
    "title": "Atenci\u00f3n de clientes",
    "url": "https://omegaup.com/arena/problem/Atencion-de-clientes",
    "history": "Realiza un programa que permita atender a una serie de personas de acuerdo a su rango de edad, pero tambie\u0301n considerando su hora de llegada; de manera que, las personas tengan oportunidad de ser atendidas y no duren demasiado formados. La poli\u0301tica de atencio\u0301n dice que las personas de 50 an\u0303os en adelante tienen un menor tiempo de espera, puesto que por cada 3 que se atienden de 50 en adelante, se atienden 2 de la fila comu\u0301n. Realiza un programa que ayude a identificar el orden y momento de cada una de las personas que fueron llegando. Se asume que una vez que comienza el turno de atencio\u0301n de una de las filas no se suspende hasta terminar de atender al nu\u0301mero de personas correspondiente. Ejemplo: suponiendo que el servicio arranca a las 8: 00 y en la fila comu\u0301n hay 5 personas que llegaron a las 7: 59, en la fila de mayores llega una persona a las 8: 01. El servicio arranca atendiendo a 2 personas de la fila comu\u0301n, una a las 8: 00 y otra a las 08: 01, es decir, NO se debe suspender el turno de la fila comu\u0301n por el hecho de que haya llegado alguien a la fila de mayores. Nota: Toma en cuenta que si una persona se forma en una fila ( de mayores o la comu\u0301n) a la misma hora que otra, se formara\u0301 primero la persona cuyo nombre sea menor en orden lexicogra\u0301fico.",
    "input": "Un entero N que representa el nu\u0301mero de personas que llegaron a formarse, el tiempo de inicio de atencio\u0301n I dado por 2 enteros separados por \" : \" , es decir una hora y un minuto. Finalmente, se leera\u0301n N_ i li\u0301neas que contienen una cadena P que representa el nombre de la persona seguida de un \" - \" , posteriormente un entero E que representa la edad de la persona, seguido de un \" - \" y el momento M en el que la persona llego\u0301 a formarse ( por 2 enteros separados por \" : \" ) .",
    "output": "N_ i li\u0301neas que estara\u0301n formadas por el nombre de la persona n seguida por un espacio y finalmente, el momento m en el comenzo\u0301 a ser atendido. NOTA: puedes suponer que cada persona tarda un minuto en ser atendida.",
    "note": "",
    "topics": [
      "sortings",
      "data structures"
    ],
    "id": 15114
  },
  {
    "title": "Listas enlazadas",
    "url": "https://omegaup.com/arena/problem/Operaciones-de-listas",
    "history": "Dada una lista de enteros A inicialmente vaci\u0301a, imprimir el contenidode A despue\u0301s de realizar N de las siguientes operaciones: | Operacio\u0301n | Explicacio\u0301n | | \u2014\u2014\u2014\u2014\u2014\u2013| \u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2013| | ` push_ front` v | Agrega v al inicio de A | | ` pop_ front` | Elimina el primer elemento de A | | ` push_ back` v | Agrega v al final de A | | ` pop_ back` | Elimina el u\u0301ltimo elemento de A | | ` erase` v | Elimina el primer elemento de A con valor igual a v | | ` clear` | Elimina todos los elementos de A | # Requerimientos mi\u0301nimos* * * Liberar toda la memoria dina\u0301mica* * antes de salir del programa. * Declarar * * prototipos* * para cada una de las funciones. * Definir todas las funciones * * despue\u0301s* * del main.",
    "input": "La primer li\u0301nea contiene un entero N ( 1 \u2264 N \u2264 100) , el nu\u0301mero de operaciones a realizar. Las siguientes N li\u0301neas contienen las operaciones a realizar.",
    "output": "Una sola linea con el contenido final de A, cada elemento separadopor un espacio. # Ejemplo 1| | input6push_ back 3push_ front 7clearpush_ front 5erase 2push_ front 9| | output9 5| | end# Ejemplo 2| | input9push_ front 1push_ back 2push_ back 5push_ back 1push_ front 2erase 1push_ front 6push_ back 3erase 2| | output6 2 5 1 3| | end",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 14867
  },
  {
    "title": "Premio escondido (Versi\u00f3n F\u00e1cil)",
    "url": "https://omegaup.com/arena/problem/Premio-escondido-Easy",
    "history": "# HistoriaEl padre de Alicia fallecio\u0301 hace poco. En su testamente le dejo un gran tesoro a ella. El tesoro se encuentra escondido en un lugar ma\u0301gico con muchas puertas Mounstros, Inc ( derechos de autores no dejaron poner el verdadero) . Todas las puertas en este lugar esta\u0301n numeradas del 1 hasta N. En el testamento se menciona que el tesoro * * se encuentra escondido en la puerta nu\u0301mero 0* * . Sin embargo, alicia se le da la llave de la puerta k. Detra\u0301s de cada puerta existe una habitacio\u0301n que alberga la llave a otra. Es decir, puede ser que detra\u0301s de la puerta 3 este\u0301 la llave de la puerta 1 y de la 1 la 2 y asi\u0301. Su padre le dijo que siguiera el camino de las puertas y * * asegura que encontrara la llave a la puerta 0* * . Como Alicia le cuesta mucho abrir puertas te pidio\u0301 que calcules cuantas puertas va tener que abrir * * antes de encontrar la llave 0* * . # ProblemaSe te dara\u0301 un arreglo de taman\u0303o N, la posicio\u0301n i representa la llave que hay en la puerta i ( indexado en 1) . Adema\u0301s se te dara\u0301 el nu\u0301mero k que representa la llave inicial que tienes. Tu tarea es decir cuantas puertas tiene que abrir Alicia para encontrar la llave 0.",
    "input": "Un nu\u0301mero N representando la cantidad de puerta\u0301s. Seguido se te dara\u0301n A_ i nu\u0301mero que es la llave en la puerta i. Al final se te dara\u0301 el entero k que es la llave que tienes.",
    "output": "Un u\u0301nico entero representando la cantidad de puertas que debes abrir antes de encontrar la puerta 0. # Ejemplos| | input32 3 01| | output3| | descriptionTienes la llave a la puerta 1, la abres y encuentras la llave a la puerta 2. Seguido, abres la puerta 2 y encuentras la llave de la puerta 3. Finalmente abres la puerta 3 y encuentras la llave 0. Abriste 3 puertas en total ( 1, 2, 3) antes de encontrar la llave 0. | | input92 8 2 1 9 3 9 7 04| | output6| | descriptionSe puede ver que la secuencia de puertas que se siguen es 4 - > 1 - > 2 - > 8 - > 7 - > 9. | | end# Limites- 1 \u2264 A_ i, k \u2264 N* * Para un 50",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 13203
  },
  {
    "title": "Operando con Lista",
    "url": "https://omegaup.com/arena/problem/Operando-con-Lista",
    "history": "Para este problema debes realizar tres operaciones ba\u0301sicas que se pueden hacer en una lista dina\u0301mica. El nu\u0301mero corresponde a la operacio\u0301n solicitada. # # Agregar# # \u2014\u2014\u2014- 1 X : Agrega un dato x al inicio de la lista. 2 X : Agrega un dato x al final de la lista. # # Eliminar # # \u2014\u2014\u2014- 3 : Elimina el primer dato de la lista. 4 : Elimina el u\u0301ltimo dato de la lista.",
    "input": "Un entero t que representa el nu\u0301mero de casos de prueba, cada caso de prueba recibe un nu\u0301mero de operaciones n , siguen n li\u0301neas cada una con dos enteros x y o\u0301 solo x, dependiendo del tipo de operacio\u0301n.",
    "output": "Cada caso empieza con \" Caso ti: \" do\u0301nde ti representa el caso que se esta\u0301 evaluando. Por cada operacio\u0301n mostrar la lista o \" Lista vacia\" , si no hay elementos.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 12974
  },
  {
    "title": "Alianza de villanos",
    "url": "https://omegaup.com/arena/problem/Alianza-de-villanos",
    "history": "Hay un nuevo superhe\u0301roe en la ciudad, Santiago! Este he\u0301roe a derrotado a mucho villanos y estos tienen miedo. La gente sabe que Santiago esta aqui\u0301 solo porque Eli\u0301as no ha hecho bien su trabajo u\u0301ltimamente. Entonces, enterado de la noticia Eli\u0301as decide ponerse manos a la obra y hacer algo por el pueblo. Tras la llegada de Santiago lo villanos deciden unirse. Pero sus alianzas son especiales, la forma en la que se unen los villanos es mediante una cadena de mandos. Es decir, un villano decide aliarse a otro como su subordinado, si el villano X quiere aliarse al villano Y, entonces Y va a trabajar para X, donde X queda como el jefe de Y. Pero como en toda alianza siempre hay disputas, se rompen lazos y muchas cosas ma\u0301s. Entonces, es difi\u0301cil llevar la cuenta de como esta\u0301n aliados los villanos. Eli\u0301as se la pasa vigilando a los villanos y llego a que estos hacen sus alianzas de forma sencilla. Puedes ver a los enemigos como nu\u0301meros; esto es que esta\u0301n los enemigos nu\u0301mero 1, 2, 3, . . . . Antes de que viniera Santy nadie estaba aliado con nadie. Luego, se empezaron hacer alianzas y ahora supongamos que tenemos el enemigo X y Y. Vamos a llamar X_ ant y Y_ ant como los jefes de X y Y respectivamente, y X_ sig y Y_ sig como los subordinados de X y Y respectivamente. Si Y quiere empezar a trabajar para X, entonces pasan varias cosas ( en caso de que no existan los jefes o subordinados se omiten los pasos correspondientes) - El subordinado de Y_ ant ahora es Y_ sig. Que es lo mismo que el jefe de Y_ sig pasa a ser Y_ ant. - El subordinado de X pasa a ser Y. - El subordinado de Y pasa a ser X_ sig. Con este procedimiento se sabe que siempre hay un jefe de todos en cierto grupo ( el que esta\u0301 ma\u0301s alto en el rango) . El problema es que con los cambios es difi\u0301cil saber como esta\u0301n la cadena de ciertos mandos y quien se ali\u0301a con quien. Por ejemplo, supongamos que tenemos a los enemigos 1, 2, 3, 4. Entonces, al inicio cada quien es el jefe de cada uno de sus grupos ( porque esta\u0301n solos) . Ahora imaginemos que conectamos 1 - > 2, 1 - > 3, 4- > 1. Aplicando lo anterior nos quedan las cadenas de mando: 4 - > 1 3 - > 2 Entonces, si queremos saber el jefe del 2 seri\u0301a 3. Mientras que el del 1 seri\u0301a el 4. # ProblemaDado N el nu\u0301mero de villanos, se hara\u0301n Q operaciones. Las operaciones son de la forma- 1: * * x y* * . Significa que el villano y trabajara para x ( se unen) . - 2: * * x* * Debera\u0301s decir el jefe ma\u0301ximo del grupo al que pertenece x en ese punto. Al inicio todos esta\u0301n solos.",
    "input": "Se te dara\u0301 el nu\u0301mero N, representando el nu\u0301mero de villanos. El nu\u0301mero Q representando el nu\u0301mero de preguntas. Las siguientes Q li\u0301neas se dara\u0301n caracteres que indican la operacio\u0301n hacer- * * U* * , seguido de este cara\u0301cter se te dara\u0301n dos nu\u0301meros con el cua\u0301l se hara\u0301 la operacio\u0301n 1. - * * J* * , seguido de este cara\u0301cter se te dara\u0301 el numero con el cua\u0301l se hara\u0301 la operacio\u0301n 2.",
    "output": "Se debera\u0301 dar una respuesta a todas las operaciones del tipo 2, en el orden que se te fueron dadas.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 11122
  },
  {
    "title": "Calificaciones de un grupo",
    "url": "https://omegaup.com/arena/problem/Calificaciones-de-un-grupo",
    "history": "El profesor Oswaldo es una persona avanzada de edad por lo tanto tarda muchos di\u0301as elaborando su informe de calificaciones de los grupos a los cuales imparte clase, tu\u0301 como buen estudiante de informa\u0301tica le comentaste que puede optimizar mucho tiempo si genera su reporte de calificaciones de manera automatizada y ofreciste tu ayuda para realizar un programa. El profesor te comento\u0301 que si hay dos alumnos con calificacio\u0301n ma\u0301s alta debes de considerar ordenarlos de manera alfabe\u0301tica, pero solo mostrando a un so\u0301lo alumno, esta misma regla se aplica la persona con menor calificacio\u0301n, de igual manera te recordo\u0301 que las calificaciones se ponen en escala del * * * 1 al 100* * * , en donde los alumnos que obtienen un promedio mayor o igual a 60 son los que aprueban al curso, en el caso de los alumnos que tienen una calificacio\u0301n menor que 60 son los que se consideran como reprobados. Debido a que es muy comu\u0301n tener errores al momento de tipear debera\u0301s validar que la calificacio\u0301n ingresada no sea mayor a * * * 100* * * o menor a * * * 0* * * ya que si no se considera esto el reporte de calificaciones puede salir incorrecto, en caso de que se ingrese una calificacio\u0301n debera\u0301s de advertir esta situacio\u0301n no valida mostrando el siguiente mensaje \" * * UPS, ERROR! , DIGITE DE NUEVO LA CALIFICACION* * \" y posteriormente debera\u0301s solicitar de nuevo la calificacio\u0301n.",
    "input": "En la primera linea un entero * * * N* * * la cual representa el nu\u0301mero de alumnos a capturar, en las siguientes lineas 2 x * * * N* * * los nombres junto con el primer apellido y el la calificacio\u0301n de los * * * N* * * alumnos.",
    "output": "- Promedio total del grupo, en caso de tener decimales solo se deben de mostrar dos en caso contrario no mostrar ninguno. - Cantidad de alumnos aprobados- Cantidad de alumnos reprobados- La calificacio\u0301n mayor y el alumno que la obtuvo- La calificacio\u0301n menor y el alumno que la obtuvo",
    "note": "",
    "topics": [
      "strings",
      "data structures",
      "implementation",
      "math",
      "sortings",
      "matrices"
    ],
    "id": 10794
  },
  {
    "title": "Baker",
    "url": "https://omegaup.com/arena/problem/Baker",
    "history": "Baker e Iris son muy buenas amigas. El mes pasado, Iris se mudo\u0301 de la ciudad y ahora su u\u0301nica forma de comunicarse es usando cartas. Como tanto Baker como Iris son gatos, cada una de sus letras contiene una cadena de * * * N* * * caracteres. Para crear una forma ma\u0301s segura de comunicacio\u0301n, Iris decidio\u0301 que cifrara\u0301 los mensajes que envi\u0301a a Baker mediante el siguiente procedimiento: Primero agregue el cara\u0301cter * * * * al final de la cadena, luego creara\u0301 todas las rotaciones de la cadena en orden lexicogra\u0301fico. Considere que el cara\u0301cter * * * * es el ma\u0301s bajo lexicogra\u0301ficamente. La cadena encriptada se realiza tomando el u\u0301ltimo cara\u0301cter de cada rotacio\u0301n. ! [ enter image description here] [ 1] Su tarea es ayudar a Baker a descifrar la carta que Iris ha enviado.",
    "input": "La entrada consta de varios casos de prueba. Cada caso de prueba consiste en una li\u0301nea con una cadena * * * S* * * que contiene solo caracteres en minu\u0301scula y el si\u0301mbolo * * * * * * .",
    "output": "Para cada caso de prueba, imprima en una li\u0301nea el mensaje descifrado.",
    "note": "",
    "topics": [
      "implementation",
      "data structures",
      "math",
      "dfs and similar",
      "matrices",
      "strings",
      "dp"
    ],
    "id": 10710
  },
  {
    "title": "Visitando una lista con modificaciones",
    "url": "https://omegaup.com/arena/problem/Visitando-una-lista-con-modifica",
    "history": "Tienes una lista enlazada de N elementos con los nu\u0301meros 0, 1, 2, . . . , N- 1 y actualmente te encuentras parado en el nodo inicial. Escribe un programa que imprima la lista que resultade ejecutar M instrucciones de los siguientes tipos: - * AVANZA* K: Avanza K nodos con respecto a tu posicio\u0301n actual. El valor de K puede ser negativo, lo cual implica retroceder. - * INSERTA_ ATRAS* V: Inserta un nodo con el valor V atra\u0301s de tu posicio\u0301n actual. - * ELIMINA_ ATRAS* : Elimina el nodo detra\u0301s de tu posicio\u0301n actual.",
    "input": "Dos enteros N, M seguido de las M instrucciones a procesar. Puedes suponer que 0 \u2264 N, M \u2264 10^ 5, que - 10 \u2264 K \u2264 + 10 con K va\u0301lido y que 0 \u2264 V \u2264 10^ 6.",
    "output": "Tres li\u0301neas de texto, cada una con 0 o ma\u0301s enteros. La primera li\u0301nea debera\u0301 corresponder con la sublista atra\u0301s de tu posicio\u0301n, la segunda li\u0301nea debera corresponder con el valor del nodo en tu posicio\u0301n y la tercera li\u0301nea debera\u0301 corresponder con la sublista adelante de tu posicio\u0301n.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 10512
  },
  {
    "title": "Teclas Pegadas",
    "url": "https://omegaup.com/arena/problem/Teclas-Pegadas",
    "history": "Esta\u0301s teclando un texto en un viejo teclado al que le empiezan a fallar las teclas * inicio* y * fin* , que se presionan automa\u0301ticamente de manera aleatoria. No te das cuenta de esto, pues esta\u0301s completamente concentrado en leer y transcribir el texto y se te olvida voltear a ver la pantalla. Una vez que terminas de teclear, \u00a1Horror! ves que todo tu texto esta\u0301 revuelto. El objetivo del problema es calcular este texto revuelto.",
    "input": "Una li\u0301nea de texto que contiene entre 1 y 100, 000 letras, guiones bajos y dos caracteres especiales: * * [ * * y * * ] * * . * * [ * * significa que la tecla * inicio* se presiono\u0301 y * * ] * * significa que la tecla * fin* se presiono\u0301.",
    "output": "Imprime el texto resultante.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 8729
  },
  {
    "title": "Nodos alcanzables",
    "url": "https://omegaup.com/arena/problem/Nodos-alcanzables",
    "history": "Dados N nodos numerados del 0 al N - 1 donde cada uno tiene un enlace a su siguiente nodo, escribe un programa que determine si existe una forma de llegar del nodo 0 al nodo N - 1.",
    "input": "Dos enteros N, M seguidos de M parejas de enteros X, Y que denotan un enlace del nodo X al Y. Pueden existir nodos que no tengan un nodo siguiente. Puedes suponer que 1 \u2264 M \u2264 N \u2264 100.",
    "output": "El valor 1 si existe una forma de llegar del nodo 0 al N- 1 y el valor 0 en otro caso.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 8673
  },
  {
    "title": "Fallas de Whatsapp",
    "url": "https://omegaup.com/arena/problem/Fallas-de-Whatsapp",
    "history": "Whatsapp empezo\u0301 a fallar hace unas horas junto con otras pa\u0301ginas web y te han pedido tu ayuda para reparar los dan\u0303os devastadores antes de que todas las plataformas se consumen. Todos los chats de grupo se han borrado y lo unico que queda son listas de dos amigos que fueron parte de esos grupos. Puedes reconstruir los grupos uniendo todos los amigos que son mutuos. Por ejemplo, si Edgar y Marvin son amigos y Edgar y Miguel ta\u0301mbien son amigos, se puede formar un grupo con estas tres personas.",
    "input": "Un nu\u0301mero * * N* * de amistades, cada amistad tendra dos strings con los nombres de cada persona. Se puede asegurar que un par de personas nunca se repite.",
    "output": "* * M* * li\u0301neas con cada grupo de personas. Se debe ordenar cada miembro de un grupo alfabeticamente por nombre y los grupos deben estar ordenados alfabeticamente entre ellos mismos. # Ejemplos| | input5Pablo JamesEfrain JamesPablo JoseMarvin EdgarEdgar Miguel| | outputEdgar Marvin MiguelEfrain James Jose Pablo| | endAqui\u0301, se imprimio\u0301 el grupo de Edgar, Marvin y Miguel primero porque Edgar viene antes que Efrai\u0301n alfabeticamente. Una gra\u0301fica de los grupos puede ser visto aqui: \u2014\u2014\u2014- ! [ Grupos] [ 1] \u2014\u2014\u2014- # Li\u0301mites1 \u2264 M \u2264 N \u2264 10000",
    "note": "",
    "topics": [
      "graphs",
      "string suffix structures",
      "sortings",
      "data structures",
      "strings"
    ],
    "id": 8636
  },
  {
    "title": "D\u00edas de Felicidad",
    "url": "https://omegaup.com/arena/problem/Dias-de-Felicidad",
    "history": "Domene tiene un me\u0301todo muy peculiar para calificar que\u0301 tan felices fueron sus di\u0301as en el Tec. Entre ma\u0301s feliz es, lo califica con un nu\u0301mero ma\u0301s alto, y entre menos feliz, con uno ma\u0301s bajo. Su preocupacio\u0301n u\u0301ltimamente ha sido por tener una racha de di\u0301as donde la felicidad no baje. Esto es un problema porque si tiene un dia muy muy feliz, lo tendra\u0301 que calificar muy alto, y el siguiente di\u0301a podri\u0301a no ser tan feliz ( aun y siendo feliz) . Ayuda a Domene a calcular cual es la racha ma\u0301s larga de di\u0301as consecutivos sin que la felicidad bajara. # Entradas* * N* * , El nu\u0301mero de di\u0301as en la lista de Domene seguido por otra li\u0301nea con * * N* * di\u0301as con felicidad * * M* * . # SalidasLa racha ma\u0301s larga de di\u0301as sin que la felicidad bajara.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "implementation",
      "combinatorics",
      "data structures"
    ],
    "id": 8632
  },
  {
    "title": "Listas enlazadas",
    "url": "https://omegaup.com/arena/problem/Listas-enlazadas",
    "history": "Escribe un programa que comience con una secuencia A de enteros inicialmente vaci\u0301a y que imprima el contenido final de A tras ejecutar una lista de las siguientes operaciones: - * AGREGA_ IZQ v* : Agregar v a la izquierda de A. Por ejemplo, si A = ( 3, 1, 4) y v = 5 entonces A = ( 5, 3, 1, 4) . - * AGREGA_ DER v* : Agregar v a la derecha de A. Por ejemplo, si A = ( 3, 1, 4) y v = 5 entonces A = ( 3, 1, 4, 5) . - * QUITA_ PRIMER v* : Quitar la primera aparicio\u0301n de v en A. Por ejemplo, si A = ( 3, 1, 4, 1, 3) y v = 1 entonces A = ( 3, 4, 1, 3) . - * QUITA_ ULTIMO v* : Quitar la u\u0301ltima aparicio\u0301n de v en A. Por ejemplo, si A = ( 3, 1, 4, 1, 3) y v = 1 entonces A = ( 3, 1, 4, 3) .",
    "input": "Un entero N seguido de las N operaciones a realizar sobre A. Puedes suponer que 0 \u2264 N \u2264 10^ 6, que todos los enteros de A esta\u0301n en un rango de 0 a 9 y que nunca se pedira\u0301 quitar un elemento que no existe.",
    "output": "Los enteros del contenido final de A separados por espacios.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 8621
  },
  {
    "title": "El camino de Edison (D\u00edficil)",
    "url": "https://omegaup.com/arena/problem/El-camino-de-Edison-Dificil",
    "history": "Todos sabemos que una de las actividades favoritas de nuestro buen amigo Edison es cortar mazorca en su rancho en Ecuador. Como Edison es muy curioso, en una de sus expediciones para cortar lo que aqui\u0301 llamamos elotes, decidio\u0301 contar cua\u0301ntos caminos diferentes podri\u0301a tomar para llegar desde la esquina superior izquierda hasta la esquina inferior derecha de su rancho ( considerando que su rancho es una cuadri\u0301cula de n x m cuadros) . Su buena amiga Blanca, que siempre esta\u0301 intentando hablar de filosofi\u0301a y cosas raras, siempre le dice que no hay que voltear hacia atra\u0301s, siempre hacia adelante. Por lo que Edison decide que solamente va a hacer movimientos hacia la derecha y hacia abajo en su rancho, para asi\u0301 nunca volver al inicio y siempre dirigirse hacia la esquina inferior derecha porque ahi\u0301 esta\u0301 espera\u0301ndolo Blanca. Como Blanca ya esta\u0301 desesperada porque Edison se esta\u0301 tardando mucho contando todos los caminos, tu tarea es hacer un programa que dado * * N* * y * * M* * ( las longitudes del rancho de Edison) , calcule cua\u0301ntos caminos son posibles para recorrer todo el rancho dada la lo\u0301gica de Edison. ! [ Ejemplo] [ 1]",
    "input": "Dos nu\u0301meros enteros * * N* * : 1 \u2264 N \u2264 34 y * * M* * : 1 \u2264 M \u2264 34 las dimensiones del rancho",
    "output": "La cantidad de caminos posibles para llegar desde la esquina superior izquierda a la esquina inferior derecha.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "number theory",
      "implementation",
      "dfs and similar",
      "dp",
      "data structures",
      "math",
      "combinatorics",
      "matrices"
    ],
    "id": 8588
  },
  {
    "title": "El camino de Edison (F\u00e1cil)",
    "url": "https://omegaup.com/arena/problem/El-camino-de-Edison-Facil",
    "history": "Todos sabemos que una de las actividades favoritas de nuestro buen amigo Edison es cortar mazorca en su rancho en Ecuador. Como Edison es muy curioso, en una de sus expediciones para cortar lo que aqui\u0301 llamamos elotes, decidio\u0301 contar cua\u0301ntos caminos diferentes podri\u0301a tomar para llegar desde la esquina superior izquierda hasta la esquina inferior derecha de su rancho ( considerando que su rancho es una cuadri\u0301cula de n x m cuadros) . Su buena amiga Blanca, que siempre esta\u0301 intentando hablar de filosofi\u0301a y cosas raras, siempre le dice que no hay que voltear hacia atra\u0301s, siempre hacia adelante. Por lo que Edison decide que solamente va a hacer movimientos hacia la derecha y hacia abajo en su rancho, para asi\u0301 nunca volver al inicio y siempre dirigirse hacia la esquina inferior derecha porque ahi\u0301 esta\u0301 espera\u0301ndolo Blanca. Como Blanca ya esta\u0301 desesperada porque Edison se esta\u0301 tardando mucho contando todos los caminos, tu tarea es hacer un programa que dado * * N* * y * * M* * ( las longitudes del rancho de Edison) , calcule cua\u0301ntos caminos son posibles para recorrer todo el rancho dada la lo\u0301gica de Edison. ! [ Ejemplo] [ 1]",
    "input": "Dos nu\u0301meros enteros * * N* * : 1 \u2264 N \u2264 34 y * * M* * : 1 \u2264 M \u2264 34 las dimensiones del rancho",
    "output": "La cantidad de caminos posibles para llegar desde la esquina superior izquierda a la esquina inferior derecha.",
    "note": "",
    "topics": [
      "implementation",
      "number theory",
      "math",
      "constructive algorithms",
      "dp",
      "data structures",
      "matrices",
      "dfs and similar"
    ],
    "id": 8587
  },
  {
    "title": "Uniendo globos",
    "url": "https://omegaup.com/arena/problem/Uniendo-globos",
    "history": "Cuentas con N globos numerados de 0 a N - 1 y te gustari\u0301a formar una hilera con ellos. Los globos se encuentran en el piso pero temes que al tocarlos se revienten, por lo que u\u0301nicamente dibujara\u0301s flechas en el suelo para simular tu hilera. Trazara\u0301s en el suelo N - 1 flechas, donde cada flecha parte de un globo hacia el siguiente globo de la hilera. Posteriormente te dirigira\u0301s hacia el globo 0 ( el cual no necesariamente es el primero de la hilera) y seguira\u0301s las flechas hasta terminar. \u00bfQue\u0301 globos visitara\u0301s y en que\u0301 orden?",
    "input": "Un entero N seguido de N - 1 parejas de enteros X, Y que denotan el origen y el destino de una de las flechas. Puedes suponer que 1 \u2264 N \u2264 100, 000.",
    "output": "Una secuencia de enteros que denote los globos visitados.",
    "note": "",
    "topics": [
      "data structures",
      "implementation"
    ],
    "id": 7763
  },
  {
    "title": "Reubicando elementos de una lista",
    "url": "https://omegaup.com/arena/problem/Reubicando-elementos-de-una-list",
    "history": "Tienes una secuencia de N enteros con valores iniciales 0, 1, 2, . . . , N- 1 y deseas modificarla. Existen dos tipos de operaciones que realizara\u0301s sobre ella: la operacio\u0301n v * A* x quitara\u0301 el entero v de su posicio\u0301n actual y lo colocara\u0301 justo atra\u0301s de x, mientras que la operacio\u0301n v * D* x quitara\u0301 el entero v de su posicio\u0301n actual y lo colocara\u0301 justo despue\u0301s de x. Escribe un programa que procese M modificaciones en sucesio\u0301n e imprima la secuencia final resultante.",
    "input": "Dos enteros N, M seguidos de M tripletas v C x donde C puede ser * A* o * D* . Puedes suponer que 2 \u2264 N, M \u2264 10^ 5 y que 0 \u2264 v = \u0338 x < N.",
    "output": "Los N enteros de la secuencia final resultante.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 7658
  },
  {
    "title": "Premiacion desordenada",
    "url": "https://omegaup.com/arena/problem/itp18-premiacion",
    "history": "\u00a1Acaba de terminar el * * 1er Concurso de Programacio\u0301n del Instituto Tecnolo\u0301gico de Pachuca* * y los resultados ya esta\u0301n listos! Sin embargo por ser la primer vez que se hace el concurso los resultados salieron en desorden. En vez de salir los nombres del primer lugar al u\u0301ltimo lugar, los resultados salieron revueltos. \u00a1Afortunadamente tu\u0301 nos puedes ayudar! Lee la entrada, reconstruye la tabla de posiciones e impri\u0301mela en orden.",
    "input": "- Un entero, N, indicando el nu\u0301mero de concursantes- N renglones. Cada renglo\u0301n seguira\u0301 el formato ` C P` donde: - C representa el nombre del concursante ( una sola palabra) - P el nombre de quien quedo\u0301 * * un lugar arriba* * en la tabla de posiciones, o ` null` si el concursante quedo\u0301 en primer lugar",
    "output": "Los nombres de los N concursantes del primer lugar al u\u0301ltimo separados por espacios. # Ejemplos| | input3Luis PacoHugo nullPaco Hugo| | outputHugo Paco Luis| | descriptionHugo quedo\u0301 en primer lugar por el renglo\u0301n ` Hugo null` . Paco va despue\u0301s por el renglo\u0301n ` Paco Hugo` . Luis va al final por el renglo\u0301n ` Luis Paco` | | input3Burbuja nullBombon BellotaBellota Burbuja| | outputBurbuja Bellota Bombon| | descriptionBurbuja quedo\u0301 en primer lugar por el renglo\u0301n ` Burbuja null` . Bellota va despue\u0301s por el renglo\u0301n ` Bellota Burbuja` . Bombon va al final por el renglo\u0301n ` Bombon Bellota` | | end",
    "note": "- 1 \u2264 N \u2264 100- No hay concursantes con nombres repetidos- La entrada siempre generara\u0301 una lista va\u0301lida, no hay necesidad de validar la entrada",
    "topics": [
      "strings",
      "data structures",
      "constructive algorithms",
      "implementation",
      "sortings"
    ],
    "id": 6851
  },
  {
    "title": "De una lista a otra",
    "url": "https://omegaup.com/arena/problem/De-una-lista-a-otra",
    "history": "Tienes N listas de enteros e inicialmente la primera lista guarda un 1, la segunda lista guarda un 2, etc. Realizara\u0301s M operaciones sobre las listas: cada operacio\u0301n consiste en transladar a la lista I todos los enteros almacenados en la lista J, de modo que los elementos trasladados se agregan al final de la lista I en el orden en el que apareci\u0301an en la lista J y esta u\u0301ltima queda vaci\u0301a. Escribe un programa que muestre el contenido final de todas las listas.",
    "input": "Dos enteros N, M seguidos de M parejas de enteros I, J separados por un espacio. Puedes suponer que 1 \u2264 N, M \u2264 100, 000 y que 1 \u2264 I = \u0338 J \u2264 N.",
    "output": "Para cada lista ( de la primera a la u\u0301ltima) , una li\u0301nea con los enteros almacenados despue\u0301s de realizar todas las operaciones.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 5629
  },
  {
    "title": "Relevos",
    "url": "https://omegaup.com/arena/problem/A-Relevos",
    "history": "El personal del CIC ha decidido participar en una carrera de relevos la cual consiste de que la primera persona le pase la estafeta a la siguiente persona y e\u0301sta a su vez a otra, la u\u0301ltima persona, como ya no tiene a quien mandar, queda marcada con un valor de - 1. El equipo de los alumnos inicia con la primera persona. El siguiente arreglo nos ilustra esta situacio\u0301n. El primer renglo\u0301n indica la forma en que se pasan la estafeta y el segundo renglo\u0301n muestra el i\u0301ndice del arreglo. 1 2 - 1 4 - 1 - 10 1 2 3 4 5La persona 0 ( equipo de alumnos) pasa la estafeta a la persona 1 y la persona 1 la persona 2 y esta es la u\u0301ltima de la lista. Desgraciadamente el valor de una entrada se ha reemplazado, perdido o cambiado y se desconoce en que\u0301 posicio\u0301n. Si tratamos de cambiar un solo valor en el arreglo podemos obtener los siguientes taman\u0303os de cambios de estafetas para el equipo de los alumnos que inician en la posicio\u0301n cero del arreglo. arreglo[ 2] = 3 el nu\u0301mero de personas de cambio de estafetas seri\u0301a de 5. arreglo[ 2] = 5 el nu\u0301mero de personas de cambio de estafetas seri\u0301a de 4. # ProblemaDada la descripcio\u0301n de cambios de estafetas construya un programa que para el equipo de los alumnos ( posicio\u0301n cero en el arreglo) obtenga el mayor nu\u0301mero de personas que pueden realizar un cambio de estafeta si pudie\u0301ramos o no reemplazar 1 valor en el arreglo. En donde la u\u0301ltima persona debe ser el fin de la lista ( tener valor - 1) .",
    "input": "Tu programa debera\u0301 leer de la entrada esta\u0301ndar, 2 li\u0301neas en la primera li\u0301nea el valor \u201cN\u201d que indica la cantidad de personas involucradas en el cambio de estafeta donde 1< = N< = 20, 000en la segunda li\u0301nea \u201cN\u201d valores \u201cV\u201d donde - 1< = V< = N, separados por un espacio indicando la relacio\u0301n de cambios de estafeta, el primer valor representa la posicio\u0301n cero del arreglo. # Ejemplos| | input40 0 0 0| | output1| | descriptiona[ 0] = - 1 - > 1 persona| | input61 2 - 1 4 - 1 - 1| | output5| | descriptiona[ 2] = 3 - > 5 personas| | input102 5 4 4 0 1 - 1 3 0 8| | output4| | descriptiona[ 4] = 6 - > 4 personas| | end",
    "output": "",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 2005
  },
  {
    "title": "La fila de guerreros de Uruk",
    "url": "https://omegaup.com/arena/problem/fila",
    "history": "El toro celeste esta\u0301 por derrotar al eje\u0301rcito de Uruk, por lo que la u\u0301ltima esperanza es que los soldados de reserva tambie\u0301n peleen. Por lo confuso de la situacio\u0301n, los R soldados de reserva se fueron metiendo en desorden en la fila original de G guerreros, en lugar de formarse al final. Los escribanos, que teni\u0301an prohibido pelear, quedaron encargados de llevar el registro de co\u0301mo se iba formando la fila. Afortunadamente para los escribanos, cada hombre de Uruk teni\u0301a un identificador distinto, por lo que el registro era sencillo de llevar. Escribeun programa que, dada la fila inicial y la informacio\u0301n de co\u0301mo se fueron metiendo los soldados de reserva e\u0301sta, calcule el estado final de la fila.",
    "input": "Un entero G seguido de G enteros que son los identificadores de los hombres en el orden de la fila original. Luego un entero R seguido de R parejas de enteros A_ i, B_ i que significan que el hombre con identificador A_ i se metio\u0301 en la fila justo atra\u0301s del hombre con identificador B_ i. Puedes suponer que G, R y todos los identificadores esta\u0301n en el rango de 1 a 100000. Adema\u0301s, cada identificador sera\u0301 u\u0301nico.",
    "output": "Los G+ R identificadores de los hombres en el orden final de la fila.",
    "note": "",
    "topics": [
      "data structures"
    ],
    "id": 1744
  },
  {
    "title": "B\u00fasqueda de cadenas por prefijos",
    "url": "https://omegaup.com/arena/problem/Busqueda-de-cadenas-por-prefijos",
    "history": "Escribe un programa que lea N cadenas y luego M prefijos. Tu programa debe imprimir cua\u0301les de las N cadenas empiezan con cada prefijo dado.",
    "input": "El entero N seguido de N cadenas no vaci\u0301as. Posteriormente el entero M seguido de M prefijos no vaci\u0301os. Puedes suponer que 1 \u2264 N, M \u2264 10^ 5, que tanto las cadenas como los prefijos so\u0301lo contienen letras minu\u0301sculas y que tienen una longitud de a lo mucho 10 caracteres. Las cadenas esta\u0301n numeradas impli\u0301citamente a partir de 1. No habra\u0301 cadenas repetidas, aunque puede haber prefijos repetidos.",
    "output": "Para cada prefijo dado, una li\u0301nea que comience con un entero que denote el nu\u0301mero de cadenas que inician con ese prefijo, seguido de una lista ascendente de enteros separados por espacios de denoten los identificadores de las cadenas que empiezan con dicho prefijo. Si dicha lista incluye ma\u0301s de diez identificadores, so\u0301lo debes imprimir los primeros diez, aunque la cuenta del nu\u0301mero de total de cadenas siempre debe calcularse bien.",
    "note": "",
    "topics": [
      "string suffix structures",
      "strings",
      "implementation",
      "data structures"
    ],
    "id": 16573
  },
  {
    "title": "Autocompletado",
    "url": "https://omegaup.com/arena/problem/Autocompletado",
    "history": "Lalo acaba de comprar un celular nuevo, pero el display venia defectuoso, se dio cuenta de eso debido a que cuando chatea con sus amigos por las redes sociales e\u0301l presiona una letra y se pone en la pantalla una que no quiere, por lo que sus mensajes no se entienden del todo y sus amigos piensan que tiene dislexia. Pero como Lalo es muy buen programador decidio\u0301 hacer un programa que con tan solo teclear el prefijo de una palabra el programa le recomiende la mas usada.",
    "input": "Un entero W que indica el numero de palabras que tiene el diccionario, por cada palabra W_ i un entero F que representa la frecuencia con la que la suele usar Lalo, tal que ( 1 \u2264 N \u2264 1000, 1 \u2264 F \u2264 1000000) , seguido de un entero P que representa la cantidad de prefijos 1 \u2264 P \u2264 M. Puedes asumir que cada palabra W_ i no excede los 15 caracteres y que el alfabeto solo esta compuesto por letras minu\u0301sculas en el rango de a - z y que la frecuencia de ninguna palabra se repite.",
    "output": "Por cada prefijo P_ i, imprimir la palabra mas usada o en caso de que ninguna palabra en el diccionario tenga como prefijo P_ i, imprimir - 1.",
    "note": "",
    "topics": [
      "strings",
      "string suffix structures",
      "data structures"
    ],
    "id": 14725
  },
  {
    "title": "Brayan y su diccionario",
    "url": "https://omegaup.com/arena/problem/Brayan-y-su-diccionario",
    "history": "Brayan adquirio\u0301 un diccionario virtual que cambia constantemente las palabras que contiene en el por lo que decide hacer un programa que busque si una dicha pablara esta en el diccionario o no adema\u0301s de cuantas palabras coinciden en un patro\u0301n dado y un di\u0301a decide prestarte dicho diccionario pero como le gusta verte sufrir no te pasa el co\u0301digo por lo que decides hacer el tuyo agrega\u0301ndole la funcio\u0301n de buscar una palabra por el i\u0301ndice del diccionario.",
    "input": "Dos enteros n y m que representan la cantidad de palabras del diccionario que te presto Brayan y la cantidad de instrucciones que hara\u0301s en el diccionario con tu programa. * bus busca en el diccionario la cadena s que consta de nu\u0301meros , si\u0301mbolos, y letras ( mayu\u0301sculas y minu\u0301sculas) adema\u0301s de que dichas palabras no superan los 25 caracteres. * pre buscar cuantas palabras del diccionario cumplen que son prefijo de t con la u\u0301nica condicio\u0301n de que el prefijo y la palabra sean distintos en taman\u0303o de longitud . * ejemplo pre cadena [ cadena , cadenas] solo contara como prefijo valido cadenas pero cadena no ya que coinciden en taman\u0303o* indi buscar en el diccionario que palabra esta asociada a ese i\u0301ndice.",
    "output": "La respuesta de cada instruccio\u0301n hecha. * * bus* Si la palabra esta\u0301, imprimir ` Si esta es la cadena # ` i donde i es la posicio\u0301n que ocupo\u0301 dicha palabra cuando se te dio el diccionario como entrada, empezando por 0. Si la palabra no esta\u0301, existen dos situaciones. La primera situacio\u0301n ocurre cuando la palabra buscada no tiene un prefijo en comu\u0301n con ninguna palabra del diccionario o cuando la palabra es un prefijo de alguna palabra del diccionario; en este caso debes ` No esta la cadena = ( ` . La segunda situacio\u0301n ocurre cuando la palabra buscada tiene un prefijo comu\u0301n con cualquier palabra del diccionario; en este caso debes imprimir el prefijo comu\u0301n ma\u0301s grande. * pre el numero de prefijos que cumplen la condicion* indi en caso de que dicho i\u0301ndice este asociado a una cadena imprimir la cadena en caso contrario imprimir No esta",
    "note": "",
    "topics": [
      "trees",
      "strings",
      "data structures",
      "graphs",
      "string suffix structures"
    ],
    "id": 14723
  },
  {
    "title": "UP Diccionario",
    "url": "https://omegaup.com/arena/problem/UP-Diccionario",
    "history": "# UP- Diccionario! [ ] ( homerWord. jpg) Dado un diccionario de n palabaras, escribe un programa que reciba varias palabras e identifique si estan en en el diccionario o no.",
    "input": "Dos numeros n ( 1 \u2264 n \u2264 1000) , y m ( 1 \u2264 m \u2264 10000) indicando la cantidad de palabras en el diccionario, y la cantidad de preguntas a contestar. Le siguen n li\u0301neas, cada una con una palabra, que conforman el diccionario. Ninguna palabra tendra\u0301 ma\u0301s de 30 caracteres. Le siguen m li\u0301neas, cada una con una palabra para buscar en el diccionario.",
    "output": "m li\u0301neas, por cada palabra imprime \" YES\" , si la palabra correspondiente esta\u0301 en el diccionario, en caso contrario imprime \" NO\" .",
    "note": "",
    "topics": [
      "strings",
      "data structures",
      "string suffix structures"
    ],
    "id": 12936
  },
  {
    "title": "Las invitaciones al juego de croquet",
    "url": "https://omegaup.com/arena/problem/Las-invitaciones-al-juego-de-cro",
    "history": "Alicia caminaba por el bosque, cuando de pronto vio pasar al Pez Criado de la Reina. El Pez Criado estaba muy apurado, pues cargaba M invitaciones al juego de croquet de la Reina, las cuales debi\u0301a entregar en algunas de las N casas dispersas en el bosque. Alicia le pregunto\u0301 al Pez Criado si podi\u0301a ayudarle, pero e\u0301ste no le hizo ningu\u0301n caso y siguio\u0301 entregando las invitaciones. Sin embargo, Alicia se dio cuenta de que algo raro estaba pasando: el Pez Criado vei\u0301a la direccio\u0301n de la casa con un ojo y la direccio\u0301n de la invitacio\u0301n con el otro y simplemente dejaba la invitacio\u0301n alli\u0301 cuando la direccio\u0301n de la casa era un prefijo de la direccio\u0301n de la invitacio\u0301n. \u00bfEn cua\u0301ntas casas distintas pudo haber dejado el Pez Criado cada invitacio\u0301n?",
    "input": "Un entero N seguido de las N direcciones C_ 1, C_ 2, . . . , C_ N de las casas. Posteriormente, un entero M seguido de las M direcciones V_ 1, V_ 2, . . . , V_ M de las invitaciones.",
    "output": "Una secuencia de M enteros K_ 1, K_ 2, . . . , K_ M tales que el Pez Criado pudo haber dejado la invitacio\u0301n V_ I en K_ I casas distintas. # RangosPuedes suponer que 1 \u2264 N, M \u2264 10^ 5 y que todas las direcciones son enteros positivos menores que 10^ 9.",
    "note": "",
    "topics": [
      "data structures",
      "string suffix structures",
      "strings",
      "binary search"
    ],
    "id": 12609
  },
  {
    "title": "El hechicero",
    "url": "https://omegaup.com/arena/problem/El-hechicero",
    "history": "< br/ > El hechicero con sus poderes, sus grandes poderes. < br/ > < br/ > Bajo el conjuro de este nigromante ha decidido convocar la mayor cantidad de hechizos de su grimorio con un solo ca\u0301ntico. Cuando conjura un hechizo, si hay algu\u0301n otro hechizo que sea prefijo de este, tambie\u0301n se invocara\u0301. < br/ > < br/ > Un ejemplo seri\u0301a si el hechicero dice \" ExoriIco\" y tiene el hechizo de \" Exori\" se casteara\u0301n ambos a la vez, sin embargo si dice \" AbraKadabra\" y tiene el hechizo de \" Kadabra\" solo se casteara\u0301 \" AbraKadabra\" . < br/ > < br/ > Dado N hechizos en su grimorio imprime el hechizo que hara\u0301 que salgan la mayor cantidad de magias, junto con la cantidad de magias. En caso de que haya un empate escribir el ma\u0301s pequen\u0303o lexicogra\u0301ficamente. < br/ > < br/ > < i> ( La suma de todos los caracteres en los hechizos no excedera\u0301 1e6) < / i>",
    "input": "Un entero N que indica la cantidad de hechizos en el libro. < br/ > < br/ > En las siguientes N lineas habra\u0301 un hechizo, que consta de una palabra sin espacios de solo letras minu\u0301sculas.",
    "output": "< br/ > El hechizo con el que castea la mayor cantidad de magias seguido de las magias que castea.",
    "note": "",
    "topics": [
      "data structures",
      "string suffix structures",
      "strings"
    ],
    "id": 11444
  },
  {
    "title": "cignuz(); y las palabras chidas",
    "url": "https://omegaup.com/arena/problem/cignuz-y-las-palabras-chidas",
    "history": "cignuz( ) ; es una empresa de software, tu\u0301 como buen estudiante a punto de graduarte quieres impresionarlos para que te contraten, ellos consideran a ciertas palabras muy chidas, y a las personas que las utilizan al hablar como muy chidos, por lo que si las usas en presencia de ellos los convencera\u0301s ma\u0301s de que te contraten. Sin embargo, como en todo, hay un problema, tu no sueles usar esas palabras al hablar ( No eres chido) . El dinero mueve al mundo y contigo no es la excepcio\u0301n por lo que has decidido hacer que tu vocabulario sea como el de ellos ( usar las palabras chidas) , asi\u0301 que quieres aprender lo ma\u0301s ra\u0301pido posible, es decir, no quieres aprender desde 0 las palabras. Mientras te preparas para graduarte de la universidad has investigado cuales son las palabras ma\u0301s chidas que ellos dicen, y ya hiciste una lista con la misma cantidad de palabras de tu vocabulario cotidiano, cada una de estas quieres convertirla en una palabra chida y asi\u0301 ser lo suficientemente chido para trabajar en cignuz( ) ; Ejemplo: \" chilaquiles\" es una palabra chida, mientras que \" chicharo\" es una palabra de cotidiana; para aprender desde \" chicharo\" la palabra \" chilaquiles\" solo debes de cambiar \" charo\" por \" laquiles\" de tu vocabulario, esto ya que conoces \" chi\" y ambas palabras la contienen. Para cada palabra de tu lista debes de decir que\u0301 palabra chida es la que vas a aprender, en caso de que puedas aprender varias debes escoger la que haya aparecido antes en la entrada en la lista de las palabras chidas. ! [ enter image description here] [ 1] Como Marin siempre dice: \" Creo que eso te da la idea para poderlo sacarlo\" .",
    "input": "La primera linea contendra\u0301 una cantidad ` N` de palabras chidas. Las siguientes ` N` palabras pertenecen a las palabras chidas que dicen en cignuz( ) ; Las siguientes ` N` palabras pertenecen a la lista que tu\u0301 has hecho.",
    "output": "` N` lineas, cada una indicando una palabra de tu lista en el orden que fueron dadas y la palabra chida que aprendiste. | | input1chilaquileschicharo| | output1 1| | end| | input2juanjosemaringraciasportodo| | output1 12 2| | end| | input6clubalgoritmiaalgocuceicualescualesalgodoncucocuandocuatrocuidadosoalga| | output1 22 43 54 65 16 3| | end# Li\u0301mites- 1 < = N < = 100, 000- 1 < = | chida[ i] | < = 600- 1 < = | lista[ i] | < = 600- 1 < = \u2211_ i = 1 ^ N | chida[ i] | + \u2211_ i = 1 ^ N | lista[ i] | < = 1, 000, 000",
    "note": "",
    "topics": [
      "dfs and similar",
      "data structures",
      "dp",
      "string suffix structures",
      "strings"
    ],
    "id": 9122
  },
  {
    "title": "Max XOR par",
    "url": "https://omegaup.com/arena/problem/Max-XOR-par",
    "history": "Dados N nu\u0301meros, encuentra el par cuyo XOR es el ma\u0301ximo de entre todas los pares posibles. Imprime el XOR entre esos dos nu\u0301meros.",
    "input": "La primera li\u0301nea tiene a N ( 2 < = N < = 10^ 5) . En la siguiente li\u0301nea tendremos N nu\u0301meros ( 0 < = N_ i < 2 ^ 14 )",
    "output": "El resultado de hacer XOR con el mejor par de nu\u0301meros.",
    "note": "",
    "topics": [
      "math",
      "data structures",
      "string suffix structures",
      "strings"
    ],
    "id": 5558
  },
  {
    "title": "A Lot of Games",
    "url": "https://omegaup.com/arena/problem/A-Lot-of-Games",
    "history": "Andrew, Fedor and Alex are inventive guys. Now they invent the game with strings for two players. Given a group of n non- empty strings. During the game two players build the word together, initially the word is empty. The players move in turns. On his step player must add a single letter in the end of the word, the resulting word must be prefix of at least one string from the group. A player loses if he cannot move. Andrew and Alex decided to play this game k times. The player who is the loser of the i- th game makes the first move in the ( i + 1) - th game. Guys decided that the winner of all games is the player who wins the last ( k- th) game. Andrew and Alex already started the game. Fedor wants to know who wins the game if both players will play optimally. Help him.",
    "input": "The first line contains two integers, n and k ( 1 \u2264 n \u2264 10 ^ 5; 1 \u2264 k \u2264 10 ^ 9 ) Each of the next n lines contains a single non- empty string from the given group. The total length of all strings from the group doesn' t exceed 10^ 5. Each string of the group consists only of lowercase English letters.",
    "output": "If the player who moves first wins, print \" First\" , otherwise print \" Second\" ( without the quotes) .",
    "note": "",
    "topics": [
      "dfs and similar",
      "string suffix structures",
      "strings",
      "data structures",
      "dp"
    ],
    "id": 5557
  },
  {
    "title": "Cuenta de prefijos",
    "url": "https://omegaup.com/arena/problem/Cuenta-de-prefijos",
    "history": "Escribe un programa que lea N cadenas y luego M prefijos. Tu programa debe imprimir cua\u0301ntas de las N cadenas empiezan con cada prefijo dado.",
    "input": "El entero N seguido de N cadenas no vaci\u0301as. Posteriormente el entero M seguido de M prefijos no vaci\u0301os. Puedes suponer que 1 \u2264 N, M \u2264 100000, que tanto las cadenas como los prefijos so\u0301lo contienen letras minu\u0301sculas y que tienen una longitud de a lo mucho 10 caracteres. No habra\u0301 cadenas repetidas ( aunque puede haber prefijos repetidos) .",
    "output": "Para cada prefijo dado, un entero que sea el nu\u0301mero de cadenas que inician con ese prefijo.",
    "note": "",
    "topics": [
      "trees",
      "strings",
      "graphs",
      "data structures",
      "string suffix structures"
    ],
    "id": 2874
  },
  {
    "title": "IOI 2012 - Cangrejo Escribano",
    "url": "https://omegaup.com/arena/problem/Cangrejo-Escribano",
    "history": "< center> ! [ Logo IOI 2012] ( logo12. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Cangrejo EscribanoAlgunas personas dicen que Leonardo da Vinci fue un gran admirador de Johannes Gutenberg, el herrero alema\u0301n que invento\u0301 la impresio\u0301n de tipos mo\u0301viles, y que le rindio\u0301 homenaje disen\u0303ando una maquina llamada \" el cangrejo escribano\" \u0097 * il gambero scrivano* \u0097 el cual era un dispositivo de escritura bastante simple. Dicho dispositivo era muy similar a una maquina de escribir moderna y aceptaba dos comandos: uno para escribir el siguiente caracter y otro para deshacer los comandos ma\u0301s recientes. La caracteri\u0301stica ma\u0301s notable del cangrejo escribano es que su comando para deshacer es extremadamente poderoso, dado que al ser e\u0301l mismo considerado como un comando, puede ser deshecho. Tu tarea consiste en implementar una versio\u0301n en software del cangrejo escribano: debe iniciar con un texto vaci\u0301o, aceptar una secuencia de comandos ingresados por el usuario y responder preguntas para conocer posiciones especificas sobre la versio\u0301n actual del texto, como se muestra a continuacio\u0301n. * ` EscribirLetra( L) ` . Agrega al final del texto la letra L ( ` ' a' ` \u2264 L \u2264 ` ' z' ` ) . * ` DeshacerComandos( U) ` . Deshace los u\u0301ltimos U comandos realizados, para un entero positivo U. * ` ObtenerLetra( P) ` . Imprime la letra en la posicio\u0301n P del texto, para un i\u0301ndice no negativo P ( indexado desde 0) . Esta pregunta * * no* * es un comando, por lo tanto es ignorada por el comando deshacer. Dichas funciones sera\u0301n llamadas n veces en cualquier orden. Se garantiza que el valor de U no excedera\u0301 la cantidad de comandos previamente recibidos y el i\u0301ndice P sera\u0301 menor que la longitud del texto actual. ` DeshacerComandos( U) ` deshace los U previos comandos en * reversa* ; esto es, si el comando a ser deshecho es ` EscribirLetra( L) ` , entonces quita L del final del texto actual. En cambio, si el comando a ser deshecho es ` DeshacerComandos( V) ` , entonces rehace los V comandos previos en su orden * original* . Considera la siguiente secuencia de comandos como ejemplo: < center> ! [ Ejemplo] ( ejemplo. png) < / center>",
    "input": "La primer li\u0301nea contiene el nu\u0301mero total de comandos n. Las siguientes n li\u0301neas pueden ser: * Una letra ` ' T' ` seguida de un caracter L. Representando un comando ` EscribirLetra( L) ` . * Una letra ` ' U' ` seguida de un entero U. Representando un comando ` DeshacerComandos( U) ` . * Una letra ` ' P' ` seguida de un i\u0301ndice P. Representando un comando ` ObtenerLetra( P) ` .",
    "output": "Por cada comando ` ObtenerLetra( P) ` en la entrada, debera\u0301s imprimir una li\u0301nea con el caracter que estaba en la posicio\u0301n P del texto en el momento en que se realizo\u0301 la pregunta. | | input14T aT bP 1T dU 2U 1P 2T eU 1U 5T cP 2U 2P 2| | outputbdcd| | end# Li\u0301mites# Subtarea 1 [ 5 puntos] * 1 \u2264 n \u2264 100* No habra\u0301 comandos ` DeshacerComandos` . # Subtarea 2 [ 7 puntos] * 1 \u2264 n \u2264 100* No se deshara\u0301n comandos ` DeshacerComandos` . # Subtarea 3 [ 22 puntos] * 1 \u2264 n \u2264 5, 000* No hay restricciones en los comandos. # Subtarea 4 [ 26 puntos] * 1 \u2264 n \u2264 1, 000, 000* Todas los comandos ` ObtenerLetra` ira\u0301n al final. # Subtarea 5 [ 40 puntos] * 1 \u2264 n \u2264 1, 000, 000* No hay restricciones en los comandos.",
    "note": "",
    "topics": [
      "strings",
      "data structures",
      "string suffix structures",
      "trees",
      "math",
      "matrices",
      "graphs"
    ],
    "id": 2130
  },
  {
    "title": "IOI 2008 - Impresora de Tipos",
    "url": "https://omegaup.com/arena/problem/Impresora-Tipos",
    "history": "< center> ! [ Logo IOI 2008] ( logo08. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Impresora de TiposNecesitas imprimir N palabras en una impresora de tipos mo\u0301viles. Las impresoras de tipos mo\u0301viles son esas viejas impresoras en las que se necesita colocar pequen\u0303as piezas de metal ( cada una con una sola letra) de manera que se formen palabras. Una pieza de papel es entonces presionada contra las piezas para imprimir la palabra. La impresora con la que cuentas permite realizar cualquiera de las siguientes operaciones: * Agregar una letra al final de la palabra colocada en la impresora. * Quitar la u\u0301ltima letra del final de la palabra que esta\u0301 actualmente en la impresora. Solo es posible realizar esta operacio\u0301n si existe al menos una pieza meta\u0301lica colocada en la impresora. * Imprimir la palabra que se encuentre actualmente en la impresora. Inicialmente la impresora esta\u0301 vacia; no contiene ninguna pieza de metal. Al final de la impresio\u0301n, es posible dejar algunas letras en la impresora. Adema\u0301s, puedes imprimir las palabras en el orden que tu quieras. Como cada operacio\u0301n cuesta tiempo, quieres minimizar el nu\u0301mero total de operaciones que realizas. Dadas las N palabras que deseas imprimir, encuentra el mi\u0301nimo nu\u0301mero de operaciones necesarias para imprimir todas las palabras en cualquier orden e imprime cualquier secuencia mi\u0301nima para lograrlo.",
    "input": "Tu programa debe leer de entrada esta\u0301ndar la siguiente informacio\u0301n: * La primer li\u0301nea contiene un entero N, el nu\u0301mero de palabras que quieres imprimir. * Cada una de las siguientes N li\u0301neas contiene una palabra. Cada palabra consiste en u\u0301nicamente letras minu\u0301sculas de la a a la z y tiene una longitud entre 1 y 20 caracteres. Todas las palabras sera\u0301n distintas.",
    "output": "Tu programa debe escribir en salida esta\u0301ndar la siguiente informacio\u0301n: * La primer li\u0301nea debe contener un entero M, el mi\u0301nimo nu\u0301mero de operaciones requeridas. * Cada una de las siguientes M debe contener un caracter. Los caracteres describen la secuencia de operaciones realizadas. Cada operacio\u0301n se describe a continuacio\u0301n: * Agregar una letra esta\u0301 representado por el caracter de la misma letra agregada. * Imprimir la palabra actual esta\u0301 representado por el caracter ` ' P' ` ( mayu\u0301scula) . * Quitar la u\u0301ltima letra esta\u0301 representado por el caracter ` ' - ' ` ( menos) . | | input3printthepoem| | output20theP\u2014poemP\u2014rintP| | end# Li\u0301mites# Subtarea 1 [ 40 puntos] 1 \u2264 N \u2264 18# Subtarea 2 [ 60 puntos] 1 \u2264 N \u2264 25, 000",
    "note": "",
    "topics": [
      "string suffix structures",
      "strings",
      "data structures",
      "greedy"
    ],
    "id": 2121
  },
  {
    "title": "IOI 1996 - Prefijo m\u00e1s Largo",
    "url": "https://omegaup.com/arena/problem/Prefijo-Largo",
    "history": "< center> ! [ Logo IOI 1996] ( logo96. jpg) < / center> \u2014\u2014\u2014\u2014\u2014\u2013# Prefijo ma\u0301s LargoLa estructura de algunos objetos biolo\u0301gicos esta\u0301 representada por una sequencia de mole\u0301culas constituyentes. Estas mole\u0301culas constituyentes esta\u0301n denotadas por letras mayu\u0301sculas de la A a la Z. Los bio\u0301logos esta\u0301n interesados en descomponer una larga secuencia en otras ma\u0301s pequen\u0303as. Estas pequen\u0303as secuencias son conocidas como mole\u0301culas primitivas. Decimos que una secuencia S puede ser compuesta desde un determinado conjunto de mole\u0301culas primitivas P si existen n primitivas p_ 1, p_ 2, . . . p_ n en P tales que su concatenacio\u0301n ( en el o\u0301rden denotado) es igual a S. Una misma primitiva puede ocurrir ma\u0301s de una vez en la concatenacio\u0301n y no es necesario que todas las primitivas aparezcan en la secuencia. Por ejemplo, el objeto biolo\u0301gico con secuencia ABABACABAAB puede ser compuesto a partir del conjunto de mole\u0301culas primitivas P = A, AB, BA, CA, BBC. Despue\u0301s de muchos an\u0303os, los bio\u0301logos no han logrado descomponer la secuencia Q y quieren saber \u00bfcua\u0301l es la longitud del prefijo ma\u0301s grande de Q tal que es posible componerlo con primitivas del conjunto P?",
    "input": "La primer li\u0301nea de entrada contiene un entero n ( 1 \u2264 n \u2264 10, 000) , la cantidad de primitivas en P. Cada una de las siguientes n li\u0301neas contendra\u0301 una cadena p_ i, representando la i- e\u0301sima primitiva del conjunto P. La longitud de cada primitiva sera\u0301 de al menos un caracter y de ma\u0301ximo 50 caracteres. Finalmente habra\u0301 una sola li\u0301nea con la cadena Q, la secuencia que los bio\u0301logos esta\u0301n analizando. La longitud de la secuencia sera\u0301 mayor a 1 y de a lo ma\u0301s 500, 000 caracteres.",
    "output": "Un entero representando la longitud del prefijo ma\u0301s largo de Q compuesto u\u0301nicamente por primitivas de P. | | input5AABBBCCABAABABACABAABCB| | output11| | end",
    "note": "",
    "topics": [
      "data structures",
      "strings",
      "implementation",
      "dp",
      "string suffix structures",
      "binary search"
    ],
    "id": 2044
  },
  {
    "title": "Cojuntos de Hyper-prefijos",
    "url": "https://omegaup.com/arena/problem/hprefix",
    "history": "Llamemos prefixicidad a que tan bueno es un conjunto en terminos de prefijos. La prefixidad la mediremos como la longitud del prefijo comun mas largo * numero de cadenas en el conjunto. Por ejemplo la prefixidad del conjunto 000, 001, 0011 es 6. # ProblemaDado un conjunto de cadenas binarias. Encuentra la mayor prefixidad entre todos los subconjuntos de estas cadenas binarias",
    "input": "N el numero de elementos en el conjunto. Seguido de N lineas conteniendo cadenas binarias* * Ejemplo: * * 40000000110101010",
    "output": "El valor de prefixidad mas grande entre todas los posibles subconjuntos binarios. * * Ejemplo: * * 6# Li\u0301mitesN \u2264 50000Cada cadena binaria tendra\u0301 entre 1 y 200 caracteres",
    "note": "",
    "topics": [
      "string suffix structures",
      "data structures",
      "strings"
    ],
    "id": 1496
  },
  {
    "title": "Cool Editor",
    "url": "https://omegaup.com/arena/problem/Cool-Editor",
    "history": "# Cool EditorYou have just discovered a new text editor even better than Vim! This new editor is called Cool EDITor ( or simply shortened * cedit* ) and the thing that makes it so cool is the * base word* feature. The * base word* is a user defined word such that every time the user starts a new token in the text, * cedit* automatically writes the base word! This is pretty useful when you write long codes. For example, if you set the * base word* as * \u201cin\u201d* you can type the words * \u201cint\u201d* , * \u201cinclude\u201d* and * \u201cinline\u201d* faster only adding some other letters at the end of the token. Your typing skills are pretty bad and you only know how to use the backspace key ( to delete a letter) and all the English letters keys ( uppercase included) . So in the previous example, if you want to type the word * \u201cusing\u201d* you should delete all letters and start over again. Let\u2019s say that if you have two words W and V, the * edition distance* between them is the number of types you must do in order to transform word W into word V ( or viceversa) . For example, the * edition distance* between * \u201cusing\u201d* and * \u201cin\u201d* is 7, since you have to delete all the word and start over, but the distance between words * \u201cquery\u201d* and * \u201cqueue\u201d* is just 4 as follows: * \u201cquery\u201d* > * \u201cquer\u201d* > * \u201cque\u201d* > * \u201cqueu\u201d* > * \u201cqueue\u201d* . Since you want to type faster, you want to determine the best * base word* such that the * maximum edition distance* from the * base word* to any word you use to code is as small as possible. Note that the * base word* may not be in the given list of words you know.",
    "input": "The first line of input contains an integer n ( 1 \u2264 n \u2264 1, 000) , the number of words you use to code. Each of the following n lines contains a string with at most 1, 000 characters, representing a word you use to code. Each character is a lowercase or uppercase letter from the English alphabet.",
    "output": "Print an integer representing the * maximum edition distance* you got choosing the best * base word* possible. # Sample| | input3setqueryqueue| | output4| | end< br> In the sample input the best * base word* is * \u201cq\u201d* and the * edition distance* to each of the words is exactly 4.",
    "note": "",
    "topics": [
      "strings",
      "data structures",
      "dp",
      "string suffix structures",
      "shortest paths"
    ],
    "id": 1267
  },
  {
    "title": "Prefijos de palabras de diccionarios",
    "url": "https://omegaup.com/arena/problem/ppd",
    "history": "Desde pequen\u0303o te han gustado mucho los diccionarios y con frecuencia te preguntas cua\u0301ntas palabras existen queempiecen con determinadas letras. Ya que finalmente aprendiste programacio\u0301n crees poder contestar estas preguntasra\u0301pida y fa\u0301cilmente.",
    "input": "Un entero N seguido de un diccionario de N palabras y despue\u0301s un entero M seguido de M prefijos. Puedessuponer que 0 \u2264 N \u2264 10, 000 y 0 \u2264 M \u2264 10, 000. Tanto las palabras del diccionario como los prefijos so\u0301lo contendra\u0301n letrasminu\u0301sculas y no superara\u0301n los 15 caracteres de longitud.",
    "output": "Para cada uno de los M prefijos, un entero que sea el nu\u0301mero de palabras del diccionario que comienzan con dichoprefijo.",
    "note": "",
    "topics": [
      "data structures",
      "implementation",
      "graphs",
      "string suffix structures",
      "trees",
      "strings"
    ],
    "id": 1002
  },
  {
    "title": "Suma de intervalos con poca memoria",
    "url": "https://omegaup.com/arena/problem/Suma-de-intervalos-con-poca-memo",
    "history": "Dados M intervalos semiabiertos con extremos I, F y un arreglo de N enteros A = A_ 0, A_ 1, . . . , A_ N- 1, escribe un programa que calcule la suma A_ I + A_ I+ 1 + . . . + A_ F- 1 para cada intervalo dado.",
    "input": "Un entero M seguido de M parejas de enteros I y F. Posteriormente un entero N seguido de los N enteros del arreglo. Puedes suponer que 0 \u2264 M \u2264 1, 000, 0 \u2264 N \u2264 1, 000, 000, - 1000 \u2264 A_ i \u2264 + 1000 y 0 \u2264 I \u2264 F \u2264 N.",
    "output": "Una secuencia de M enteros que sean las sumas calculadas para cada uno de los M intervalos. # SugerenciaDados los li\u0301\u00admites de memoria del problema, no se recomienda el uso de Java ni de la biblioteca de flujos * iostream* de C+ + .",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "divide and conquer",
      "implementation"
    ],
    "id": 7609
  },
  {
    "title": "El chairo y la mayor suma",
    "url": "https://omegaup.com/arena/problem/El-chairo-y-la-mayor-suma",
    "history": "Ulises el chairo tiene un arreglo a_ 1, a_ 2, . . . , a_ n de n ( 1\u2264 n \u2264 2\u00b7 10^ 5) elementos. Planea hacer q operaciones, cada una definida por l_ i, r_ i. Una operacion definida por l_ i, r_ i consiste en sumar los numeros en las posiciones l_ i, l_ i+ 1, . . . , r_ i ( es decir a_ l_ i, . . . , a_ r_ i) . Sin embargo, despues de hacer esto, decidio reordenar los elementos de tal manera que la suma de los resultados de las operaciones se maximice.",
    "input": "Primera LI\u0300nea: n, q ( 1 \u2264 n, q \u2264 2\u00b7 10^ 5) Segunda Linea: los n numeros a_ 1, a_ 2, . . . , a_ nSiguientes m lineas: l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n)",
    "output": "La maxima suma de las operaciones posible al permutar los a_ i' s'",
    "note": "",
    "topics": [
      "implementation",
      "data structures",
      "sortings"
    ],
    "id": 4007
  },
  {
    "title": "Poder del subarreglo",
    "url": "https://omegaup.com/arena/problem/Poder-del-subarreglo",
    "history": "Un arreglo de enteros positivos a_ 1, a_ 2, . . . , a_ n es dado. Consideremos un subarreglo a_ l, a_ l+ 1, . . . , a_ r tal que 1\u2264 l \u2264 r \u2264 n. Para todo entero positivo s, denotamos K_ s como el nu\u0301mero de ocurrencias de s en el subarreglo. Llamamos el poder del subarreglo como la suma de los productos K_ s\u00b7 K_ s\u00b7 s para todo s entero positivo en el subarreglo. Dado que el arreglo a_ i es finito, entonces el poder del subarreglo sera\u0301 la suma de una cantidad finita de elementos. Dado el arreglo a_ i, tu tarea es calcular el poder de varios subarreglos de a_ i.",
    "input": "La primera linea contiene n y t, el taman\u0303o de arreglo y la cantidad de subarreglos que tienes que calcular su poder. La segunda linea contiene los n enteros a_ i. Las siguientes t lineas contienen cada una dos enteros l y r que indican el inicio y el final inclusive de cada uno de los subarreglos.",
    "output": "Debes imprimir t lineas, en cada una un entero que indica el poder de cada uno de los subarreglos especificados.",
    "note": "",
    "topics": [
      "implementation",
      "sortings",
      "data structures",
      "two pointers"
    ],
    "id": 3889
  },
  {
    "title": "Brazos robot de Sho",
    "url": "https://omegaup.com/arena/problem/pes-2022-brazos",
    "history": "Sho fue encargado de ordenar un arreglo de N enteros. Para esto Sho dispone de dos brazos robot. Un brazo robot puede agarrar dos elementos contiguos e intercambiarlos, como Sho tiene dos brazos va a hacer dos de estos movimientos al mismo tiempo ( un elemento no puede ser girado por ambos brazos al mismo tiempo) . Como Sho esta obsesionado con la simetri\u0301a, el jama\u0301s activara\u0301 solo un brazo robot en una operacio\u0301n. Sin embargo, como coordinador de Sho, no puedes dejar que haga esto ya que no todos los arreglos son ordenables bajo las reglas de Sho, por esto tienes que saber si Sho puede ordenar un arreglo o no. Pero, en lo que esperabas a que Sho llegara, varias personas van llegando y cambian un elemento del arreglo. Como no sabes cuando Sho vaya a llegar, necesitaras saber despue\u0301s de cada cambio si el arreglo es ordenable por Sho.",
    "input": "Dos enetros N y Q representando el taman\u0303o del arreglo y los Q cambios. La siguiente li\u0301nea tiene N enteros representando el arreglo inicial. Las siguiente Q li\u0301neas tendra\u0301n los cambios, representados por dos enteros p y v, representando que A[ p] \u2190 v.",
    "output": "Imprimiras Q li\u0301neas, una por cada cambio, diciendo si al final el arreglo quedo ordenable o no.",
    "note": "",
    "topics": [],
    "id": 15282
  },
  {
    "title": "Lowest Risk Factor",
    "url": "https://omegaup.com/arena/problem/Lowest-Risk-Factor",
    "history": "# DescriptionFor testing a new cryptographic algorithm, engineers working for a large investment bank need tocompute a value they named the Risk Factor of the algorithm. Informally, the Risk Factor is the amountof numbers less than or equal to a certain value N, that aren\u2019t multiples of prime numbers greaterthan a certain value K. More formally, given the values N and K, the Risk Factor is the number of elements of the following set: x such that 2 \u2264 x \u2264 N and for every prime divisor p of x, p \u2264 KThe engineers need to compute the Risk Factor for different values ofN and K and have prepared a set of queries for you to answer. Canyou help them?",
    "input": "The first line contains an integerQ ( 1\u2264 Q \u2264 5 \u00d7 10^ 4) representing the number of queries that the engineersprepared for you. Each of the following Q lines describes a querywith two integers N and K ( 2 \u2264 N, K \u2264 10^ 5) .",
    "output": "Output Q lines, each line with an integer indicating the Risk Factorfor the corresponding query of the input. # Example| | input410 310 415 35 20| | output6674| | end",
    "note": "",
    "topics": [],
    "id": 14800
  },
  {
    "title": "Eventos sencillos sobre arreglos completos",
    "url": "https://omegaup.com/arena/problem/Eventos-sencillos-sobre-arreglos",
    "history": "Dado un arreglo de N enteros con valores iniciales, deseamos ejecutar sobre e\u0301l una secuencia de M eventos de los siguientes tipos: - Evento de tipo ` 0` : asignarle 0 a todos los elementos del arreglo. - Evento de tipo ` 1` : incrementar todos los elementos del arreglo. Escribe un programa que calcule cua\u0301l seri\u0301a el estado final del arreglo.",
    "input": "El entero N seguido de los N enteros del arreglo. Posteriormente, el entero M seguido de los M eventos que se desean ejecutar. Puedes suponer que 1 \u2264 N, M \u2264 2 \u00d7 10^ 5 y que los valores iniciales de los elementos del arreglo esta\u0301n entre 0 y 1000.",
    "output": "Una secuencia de N enteros que denote el estado final del arreglo.",
    "note": "",
    "topics": [
      "implementation",
      "data structures"
    ],
    "id": 14203
  },
  {
    "title": "Sumas sobre arreglos completos",
    "url": "https://omegaup.com/arena/problem/Sumas-sobre-arreglos-completos",
    "history": "Escribe un programa que lea un arreglo A de N enteros y una secuencia de M enteros. Cada entero de la secuencia debera\u0301s suma\u0301rselo a todos los elementos de A. Finalmente, debera\u0301s imprimir el valor final de A.",
    "input": "Inicialmente, dos enteros N y M. Posteriormente, los N enteros del arreglo A. Finalmente, la secuencia de M enteros. Puedes suponer que 0 \u2264 N, M \u2264 10^ 5 y que los enteros del arreglo y la secuencia esta\u0301n en el rango de - 100 a + 100.",
    "output": "El valor final de los N enteros de A.",
    "note": "",
    "topics": [
      "implementation",
      "data structures",
      "math"
    ],
    "id": 12610
  },
  {
    "title": "Arboles Chistosos",
    "url": "https://omegaup.com/arena/problem/Arboles-Chistosos",
    "history": "A Fili le gustan mucho los a\u0301rboles. Recientemente el descubrio\u0301 un nuevo tipo de a\u0301rboles al que el llamo\u0301 * * a\u0301rbol chistoso* * . El a\u0301rbol consiste de N nodos numerados desde 1 hasta n, enraizado en el nodo 1, donde cada nodo i tiene un valor inicial A_ i. El a\u0301rbol tiene una propiedad especial: Cuando un valor * * val* * es an\u0303adido a el valor de un nodo * * i* * , el valor * * - val* * es an\u0303adido a todos los hijos de * * i* * . Nota que cuando an\u0303ades un valor * * - val* * a los hijos de un nodo i, tu tambie\u0301n tienes que sumar * * - ( - val) * * a los hijos de los hijos de * * i* * y asi\u0301 sucesivamente. Ve\u0301 los ejemplos para un mejor entendimiento. El a\u0301rbol soporta las siguientes operaciones: - * * 1 x val* * - > * * val* * es an\u0303adido al nodo * * x* * - * * 2 x* * - > Imprimir el valor actual del nodo xPara ayudar a Fili a entender mejor el funcionamiento del a\u0301rbol, tu tienes que responder M preguntas.",
    "input": "La primera linea contiene dos enteros N y M. La segunda linea contiene N enteros A_ i. Cada una de las siguientes N- 1 lineas contienen dos enteros u y v describiendo una arista entre el nodo u y el nodo v. Las siguientes M lineas describen las preguntas en el formato descrito anteriormente.",
    "output": "Para cada pregunta del tipo 2 imprimir el valor requerido.",
    "note": "",
    "topics": [
      "graphs",
      "trees",
      "dfs and similar",
      "shortest paths",
      "data structures"
    ],
    "id": 4050
  },
  {
    "title": "Primos",
    "url": "https://omegaup.com/arena/problem/conacup_primos",
    "history": "# # PrimosHay problemas que ni son complicados, ni necesitan explicaciones complejas. Digamos que en uno de esos momentos de ocio en los que la gente se pone a pensar en la inmortalidad del cangrejo a los programadores nos da por resolver el siguiente tipo de problemas por el puro gusto de hacerlo: alguien nos da una lista de N nu\u0301meros y pregunta cua\u0301ntos nu\u0301meros primos hay entre 1 y cada nu\u0301mero de dicho listado. Claro que lo menos que podemos hacer es escribir un programa que responda dicha pregunta en todos los casos. # Problema: En la primera li\u0301nea un numero 1 < = N < = 5, 000 a continuacio\u0301n N li\u0301neas con un numero 1 < = K < = 50, 000, 000 en cada li\u0301nea. Debes regresar N li\u0301neas en cada una un nu\u0301mero indicando cua\u0301ntos nu\u0301meros primos positivos hay menores a K. En el 20",
    "input": "21020",
    "output": "48# Nota: En matema\u0301ticas, un nu\u0301mero primo es un nu\u0301mero natural mayor que 1 que tiene u\u0301nicamente dos divisores distintos: e\u0301l mismo y el 1.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "math",
      "implementation",
      "number theory"
    ],
    "id": 619
  }
]