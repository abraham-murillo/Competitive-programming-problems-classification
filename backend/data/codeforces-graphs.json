[
  {
    "title": "Double Sort II",
    "url": "https://codeforces.com/problemset/problem/1783/F",
    "history": "You are given two permutations a and b , both of size n . A permutation of size n is an array of n elements, where each integer from 1 to n appears exactly once. The elements in each permutation are indexed from 1 to n . You can perform the following operation any number of times: choose an integer i from 1 to n ; let x be the integer such that a_ x = i . Swap a_ i with a_ x ; let y be the integer such that b_ y = i . Swap b_ i with b_ y . Your goal is to make both permutations sorted in ascending order ( i. e. the conditions a_ 1 < a_ 2 < . . . < a_ n and b_ 1 < b_ 2 < . . . < b_ n must be satisfied) using minimum number of operations. Note that both permutations must be sorted after you perform the sequence of operations you have chosen.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 3000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ; all a_ i are distinct) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ; all b_ i are distinct) .",
    "output": "First, print one integer k ( 0 \u2264 k \u2264 2n ) \u2014 the minimum number of operations required to sort both permutations. Note that it can be shown that 2n operations are always enough. Then, print k integers op_ 1, op_ 2, . . . , op_ k ( 1 \u2264 op_ j \u2264 n ) , where op_ j is the value of i you choose during the j - th operation. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": "1783F"
  },
  {
    "title": "The Game of the Century",
    "url": "https://codeforces.com/problemset/problem/1779/G",
    "history": "The time has finally come, MKnez and Baltic are to host The Game of the Century. For that purpose, they built a village to lodge its participants. The village has the shape of an equilateral triangle delimited by three roads of length n . It is cut into n^ 2 smaller equilateral triangles, of side length 1 , by 3n- 3 additional roads which run parallel to the sides. See the figure for n= 3 . Each of the 3n roads is made of multiple ( possibly 1 ) road segments of length 1 which connect adjacent intersections. The direction has already been chosen for each of the 3n roads ( so, for each road, the same direction is assigned to all its road segments) . Traffic can only go in the specified directions ( i. e. the roads are monodirectional) . You are tasked with making adjustments to the traffic plan so that from each intersection it is possible to reach every other intersection. Specifically, you can invert the traffic direction of any number of road segments of length 1 . What is the minimal number of road segments for which you need to invert the traffic direction?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . The description of the test cases follows. The first line of each test case contains a positive integer n ( 1\u2264 n\u2264 10^ 5 ) \u2014 the size of the triangular village' s sides. Three lines follow, each containing a binary string of length n which describes the traffic directions of the roads. The i - th of the following three lines contains a binary string s_ i of length n representing the direction of each road parallel to the road segment denoted by i in the picture above. In particular, the j - th character of s_ i is \" 1\" if the j - th shortest road ( parallel to the road segment denoted by i in the picture) has the same direction of the road segment denoted by i in the picture, while it is \" 0\" if it has the opposite direction. So the first character of s_ i describes the direction of the road containing only 1 road segment, while the last character describes the direction of the road containing n road segments. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print the minimum number of road segments for which you need to invert the traffic direction.",
    "note": "The first example corresponds to the picture in the statement. There exist multiple solutions that invert the traffic direction of exactly 2 road segments, but inverting only 1 road segment never makes it possible to reach every intersection from any other. One of the possible solutions is shown in the picture below in which the inverted road segments are highlighted in blue. In the second example, the answer is 0 since it is already possible to reach every intersection from any other.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "shortest paths"
    ],
    "id": "1779G"
  },
  {
    "title": "Anya's Simultaneous Exhibition",
    "url": "https://codeforces.com/problemset/problem/1779/E",
    "history": "This is an interactive problem. Anya has gathered n chess experts numbered from 1 to n for which the following properties hold: For any pair of players one of the players wins every game against the other ( and no draws ever occur) ; Transitivity does not necessarily hold \u2014 it might happen that A always beats B , B always beats C and C always beats A . Anya does not know, for each pair, who is the player who beats the other. To organize a tournament, Anya hosts n- 1 games. In each game, she chooses two players. One of them wins and stays, while the other one is disqualified. After all the games are hosted only one player will remain. A player is said to be a candidate master if they can win a tournament ( notice that the winner of a tournament may depend on the players selected by Anya in the n- 1 games) . Since Anya is a curious girl, she is interested in finding the candidate masters. Unfortunately, she does not have much time. To speed up the process, she will organize up to 2n simuls ( short for \" simultaneous exhibition\" , in which one player plays against many) . In one simul, Anya chooses exactly one player who will play against some ( at least one) of the other players. The chosen player wins all games they would win in a regular game, and the same holds for losses. After the simul finishes, Anya is only told the total number of games won by the chosen player ( but not which ones) . Nobody is disqualified during a simul. Can you help Anya host simuls and determine the candidate masters? The winning players in each pair could be changed between the simuls, but only in a way that preserves the results of all previous simuls. These changes may depend on your queries. InteractionFirstly, the jury sends one integer n ( 3 \u2264 n \u2264 250 ) which should be read \u2014 the number of players. After that, your program may ask queries or report an answer. To ask a query, print \" ? i s_ 1 s_ 2 . . . s_ n \" ( without quotes) , where i is the index of the player who will play against some of the other players in the simul. s is a binary string that denotes the players they play against. i plays against every player j for which s_ j = 1 holds ( and s_ j = 1 should hold for at least one 1 \u2264 j \u2264 n ) . Please note that s_ i = 0 must hold since a player cannot play against themselves, otherwise, the query is considered to be incorrect. After this, you should read an integer \u2014 the number of games player i has won. When you have identified the answer, you must print \" ! c_ 1 c_ 2 . . . c_ n \" ( without quotes) and terminate your program. c is a binary string which represents the candidate masters. Player i is a candidate master if c_ i= 1 holds, otherwise, they are not. If you ask more than 2n queries or if one of the queries is malformed, the interaction terminates immediately and your program receives verdict Wrong Answer. After printing a query do not forget to output the end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. Hacks are disabled in this problem.",
    "input": "",
    "output": "",
    "note": "In the first example, the first query describes a simul in which player 1 plays against player 2 ( and no one else) . The answer to the query is 1 , meaning that player 1 won the only game they played. We can conclude that 1 beats 2 . Similarly, the second query tells us that 2 beats 3 and the third query tells us that 3 beats 1 . All players are candidate masters in this case as Player 1 can win the tournament if 2 and 3 play first. 3 loses and leaves, while 2 stays. 1 then plays against 2 and wins; Other players can win in the same fashion. In the second example, the third query describes a simul in which player 1 plays against every other player. The answer to the query is 4 , meaning that they won every game they played. It can be concluded that player 1 also beats every other player. They can never lose, hence they are the only player who can remain at the end of every possible tournament, and the only possible candidate master.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ],
    "id": "1779E"
  },
  {
    "title": "Friendly Spiders",
    "url": "https://codeforces.com/problemset/problem/1775/D",
    "history": "Mars is home to an unusual species of spiders \u2014 Binary spiders. Right now, Martian scientists are observing a colony of n spiders, the i - th of which has a_ i legs. Some of the spiders are friends with each other. Namely, the i - th and j - th spiders are friends if ( a_ i, a_ j) 1 , i. e. , there is some integer k \u2265 2 such that a_ i and a_ j are simultaneously divided by k without a remainder. Here ( x, y) denotes the greatest common divisor ( GCD) of integers x and y . Scientists have discovered that spiders can send messages. If two spiders are friends, then they can transmit a message directly in one second. Otherwise, the spider must pass the message to his friend, who in turn must pass the message to his friend, and so on until the message reaches the recipient. Let' s look at an example. Suppose a spider with eight legs wants to send a message to a spider with 15 legs. He can' t do it directly, because ( 8, 15) = 1 . But he can send a message through the spider with six legs because ( 8, 6) = 2 and ( 6, 15) = 3 . Thus, the message will arrive in two seconds. Right now, scientists are observing how the s - th spider wants to send a message to the t - th spider. The researchers have a hypothesis that spiders always transmit messages optimally. For this reason, scientists would need a program that could calculate the minimum time to send a message and also deduce one of the optimal routes.",
    "input": "The first line of input contains an integer n ( 2 \u2264 n \u2264 3\u00b710^ 5 ) \u2014 the number of spiders in the colony. The second line of input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 3\u00b710^ 5 ) \u2014 the number of legs the spiders have. The third line of input contains two integers s and t ( 1 \u2264 s, t \u2264 n ) \u2014the spiders between which the message must be sent.",
    "output": "If it is impossible to transmit a message between the given pair of spiders, print - 1 . Otherwise, in the first line of the output print the integer t ( t \u2265 1 ) \u2014 the number of spiders that participate in the message transmission ( i. e. the minimum time of message delivery in seconds plus one) . In the second line, print t different integers b_ 1, b_ 2, . . . , b_ t ( 1 \u2264 b_ i \u2264 n ) \u2014 the ids of the spiders through which the message should follow, in order from sender to receiver. If there are several optimal routes for the message, output any of them.",
    "note": "The first example is shown above. It shows that the message from the 5 - th spider ( with eight legs) to the 6 - th spider ( with 15 legs) is optimal to pass through the 4 - th spider ( with six legs) . In the second example, the spider number 7 ( with 11 legs) is not friends with anyone, so it is impossible to send him a message.",
    "topics": [
      "dfs and similar",
      "graphs",
      "math",
      "number theory",
      "shortest paths"
    ],
    "id": "1775D"
  },
  {
    "title": "Copy of a Copy of a Copy",
    "url": "https://codeforces.com/problemset/problem/1772/F",
    "history": "It all started with a black- and- white picture, that can be represented as an n \u00d7 m matrix such that all its elements are either 0 or 1 . The rows are numbered from 1 to n , the columns are numbered from 1 to m . Several operations were performed on the picture ( possibly, zero) , each of one of the two kinds: choose a cell such that it' s not on the border ( neither row 1 or n , nor column 1 or m ) and it' s surrounded by four cells of the opposite color ( four zeros if it' s a one and vice versa) and paint it the opposite color itself; make a copy of the current picture. Note that the order of operations could be arbitrary, they were not necessarily alternating. You are presented with the outcome: all k copies that were made. Additionally, you are given the initial picture. However, all k+ 1 pictures are shuffled. Restore the sequence of the operations. If there are multiple answers, print any of them. The tests are constructed from the real sequence of operations, i. e. at least one answer always exists.",
    "input": "The first line contains three integers n, m and k ( 3 \u2264 n, m \u2264 30 ; 0 \u2264 k \u2264 100 ) \u2014 the number of rows and columns of the pictures and the number of copies made, respectively. Then k+ 1 pictures follow \u2014 k copies and the initial picture. Their order is arbitrary. Each picture consists of n lines, each consisting of m characters, each character is either 0 or 1 . There is an empty line before each picture.",
    "output": "In the first line, print a single integer \u2014 the index of the initial picture. The pictures are numbered from 1 to k+ 1 in the order they appear in the input. In the second line, print a single integer q \u2014 the number of operations. Each of the next q lines should contain an operation. The operations should be listed in order they were applied. Each operation is one of two types: 1 x y \u2014 recolor a cell ( x, y) ( the y - th cell in the x - th row, it should not be on the border and it should be surrounded by four cells of opposite color to itself) ; 2 i \u2014 make a copy of the current picture and assign it index i ( picture with index the i should be equal to the current picture) . Each index from 1 to k+ 1 should appear in the output exactly once \u2014 one of them is the index of the initial picture, the remaining k are arguments of the operations of the second kind. If there are multiple answers, print any of them. The tests are constructed from the real sequence of operations, i. e. at least one answer always exists.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "implementation",
      "sortings"
    ],
    "id": "1772F"
  },
  {
    "title": "Koxia and Game",
    "url": "https://codeforces.com/problemset/problem/1770/D",
    "history": "Koxia and Mahiru are playing a game with three arrays a , b , and c of length n . Each element of a , b and c is an integer between 1 and n inclusive. The game consists of n rounds. In the i - th round, they perform the following moves: Let S be the multiset { a_ i, b_ i, c_ i} . Koxia removes one element from the multiset S by her choice. Mahiru chooses one integer from the two remaining in the multiset S . Let d_ i be the integer Mahiru chose in the i - th round. If d is a permutation ^ \u2020 , Koxia wins. Otherwise, Mahiru wins. Currently, only the arrays a and b have been chosen. As an avid supporter of Koxia, you want to choose an array c such that Koxia will win. Count the number of such c , modulo 998 244 353 . Note that Koxia and Mahiru both play optimally. ^ \u2020 A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) , and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u226410^ 5 ) \u2014 the size of the arrays. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "Output a single integer \u2014 the number of c makes Koxia win, modulo 998 244 353 .",
    "note": "In the first test case, there are 6 possible arrays c that make Koxia win \u2014 [ 1, 2, 3] , [ 1, 3, 2] , [ 2, 2, 3] , [ 2, 3, 2] , [ 3, 2, 3] , [ 3, 3, 2] . In the second test case, it can be proved that no array c makes Koxia win.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dsu",
      "flows",
      "games",
      "graph matchings",
      "graphs",
      "implementation"
    ],
    "id": "1770D"
  },
  {
    "title": "Lucky Permutation",
    "url": "https://codeforces.com/problemset/problem/1768/D",
    "history": "You are given a permutation ^ \u2020 p of length n . In one operation, you can choose two indices 1 \u2264 i < j \u2264 n and swap p_ i with p_ j . Find the minimum number of operations needed to have exactly one inversion ^ in the permutation. ^ \u2020 A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) , and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . ^ The number of inversions of a permutation p is the number of pairs of indices ( i, j) such that 1 \u2264 i < j \u2264 n and p_ i > p_ j .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that p is a permutation. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimum number of operations needed to have exactly one inversion in the permutation. It can be proven that an answer always exists.",
    "note": "In the first test case, the permutation already satisfies the condition. In the second test case, you can perform the operation with ( i, j) = ( 1, 2) , after that the permutation will be [ 2, 1] which has exactly one inversion. In the third test case, it is not possible to satisfy the condition with less than 3 operations. However, if we perform 3 operations with ( i, j) being ( 1, 3) , ( 2, 4) , and ( 3, 4) in that order, the final permutation will be [ 1, 2, 4, 3] which has exactly one inversion. In the fourth test case, you can perform the operation with ( i, j) = ( 2, 4) , after that the permutation will be [ 2, 1, 3, 4] which has exactly one inversion.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1768D"
  },
  {
    "title": "Algebra Flash",
    "url": "https://codeforces.com/problemset/problem/1767/E",
    "history": "Algebra Flash 2. 2 has just been released! Changelog: New gamemode! Thank you for the continued support of the game! Huh, is that it? Slightly disappointed, you boot up the game and click on the new gamemode. It says \" Colored platforms\" . There are n platforms, numbered from 1 to n , placed one after another. There are m colors available in the game, numbered from 1 to m . The i - th platform is colored c_ i . You start on the platform 1 and want to reach platform n . In one move, you can jump from some platform i to platforms i + 1 or i + 2 . All platforms are initially deactivated ( including platforms 1 and n ) . For each color j , you can pay x_ j coins to activate all platforms of that color. You want to activate some platforms so that you could start on an activated platform 1 , jump through some activated platforms and reach an activated platform n . What' s the smallest amount of coins you can spend to achieve that?",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ; 1 \u2264 m \u2264 40 ) \u2014 the number of platforms and the number of colors, respectively. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 m ) \u2014 the colors of the platforms. The third line contains m integers x_ 1, x_ 2, . . . , x_ m ( 1 \u2264 x_ i \u2264 10^ 7 ) \u2014 the cost of activating all platforms of each color.",
    "output": "Print the smallest amount of coins you can spend to activate some platforms so that you could start on an activated platform 1 , jump through some activated platforms and reach an activated platform n .",
    "note": "",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "graphs",
      "math",
      "meet-in-the-middle",
      "trees"
    ],
    "id": "1767E"
  },
  {
    "title": "Hospital Queue",
    "url": "https://codeforces.com/problemset/problem/1765/H",
    "history": "There are n people ( numbered from 1 to n ) signed up for a doctor' s appointment. The doctor has to choose in which order he will appoint these people. The i - th patient should be appointed among the first p_ i people. There are also m restrictions of the following format: the i - th restriction is denoted by two integers ( a_ i, b_ i) and means that the patient with the index a_ i should be appointed earlier than the patient with the index b_ i . For example, if n = 4 , p = [ 2, 3, 2, 4] , m = 1 , a = [ 3] and b = [ 1] , then the only order of appointment of patients that does not violate the restrictions is [ 3, 1, 2, 4] . For n = 3 , p = [ 3, 3, 3] , m = 0 , a = [ ] and b = [ ] , any order of appointment is valid. For each patient, calculate the minimum position in the order that they can have among all possible orderings that don' t violate the restrictions.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 2000 ; 0 \u2264 m \u2264 2000 ) . The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . Then m lines follow. The i - th of them contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ; a_ i b_ i ) . All pairs of ( a_ i, b_ i) are distinct ( i. e. if i j , then either a_ i a_ j , b_ i b_ j , or both) . Additional constraint on the input: there is at least one valid order of patients.",
    "output": "Print n integers, where i - th integer is equal to the minimum position of i - th patient in the order, among all valid orders. Positions in the order are numbered from 1 to n .",
    "note": "In the first example, [ 3, 1, 2, 4] the only one valid order, so the minimum position of each patient is equal to their position in this order. In the second example, any order is valid, so any patient can be appointed first. In the third example, there are three valid orders: [ 4, 2, 3, 1, 5] , [ 3, 4, 2, 1, 5] and [ 4, 3, 2, 1, 5] .",
    "topics": [
      "binary search",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1765H"
  },
  {
    "title": "Doremy's City Construction",
    "url": "https://codeforces.com/problemset/problem/1764/C",
    "history": "Doremy' s new city is under construction! The city can be regarded as a simple undirected graph with n vertices. The i - th vertex has altitude a_ i . Now Doremy is deciding which pairs of vertices should be connected with edges. Due to economic reasons, there should be no self- loops or multiple edges in the graph. Due to safety reasons, there should not be pairwise distinct vertices u , v , and w such that a_ u \u2264 a_ v \u2264 a_ w and the edges ( u, v) and ( v, w) exist. Under these constraints, Doremy would like to know the maximum possible number of edges in the graph. Can you help her? Note that the constructed graph is allowed to be disconnected.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the number of vertices. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 10^ 6 ) \u2014 the altitudes of each vertex. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the maximum possible number of edges in the graph.",
    "note": "In the first test case, there can only be at most 3 edges in the graph. A possible construction is to connect ( 1, 3) , ( 2, 3) , ( 3, 4) . In the picture below the red number above node i is a_ i . The following list shows all such u , v , w that the edges ( u, v) and ( v, w) exist. u= 1 , v= 3 , w= 2 ; u= 1 , v= 3 , w= 4 ; u= 2 , v= 3 , w= 1 ; u= 2 , v= 3 , w= 4 ; u= 4 , v= 3 , w= 1 ; u= 4 , v= 3 , w= 2 . Another possible construction is to connect ( 1, 4) , ( 2, 4) , ( 3, 4) . An unacceptable construction is to connect ( 1, 3) , ( 2, 3) , ( 2, 4) , ( 3, 4) . Because when u= 4 , v= 2 , w= 3 , a_ u\u2264 a_ v \u2264 a_ w holds, and the respective edges exist.",
    "topics": [
      "graphs",
      "greedy"
    ],
    "id": "1764C"
  },
  {
    "title": "Edge Queries",
    "url": "https://codeforces.com/problemset/problem/1763/F",
    "history": "You are given an undirected, connected graph of n nodes and m edges. All nodes u of the graph satisfy the following: Let S_ u be the set of vertices in the longest simple cycle starting and ending at u . Let C_ u be the union of the sets of vertices in any simple cycle starting and ending at u . S_ u = C_ u . You need to answer q queries. For each query, you will be given node a and node b . Out of all the edges that belong to any simple path from a to b , count the number of edges such that if you remove that edge, a and b are reachable from each other.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264min ( 2 \u00b7 10^ 5 , ( n \u00b7 ( n- 1) ) / 2 ) ) \u2014 the total number of nodes and edges in the graph, respectively. The next m lines contain two integers u and v ( 1 \u2264 u , v \u2264 n , u = \u0338 v ) \u2014 describing an edge, implying that nodes u and v are connected to each other. It is guaranteed that there is at most one edge between any pair of vertices in the graph and the given graph is connected. The next line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, each representing a query. Each query contains two integers a and b ( 1 \u2264 a , b \u2264 n ) .",
    "output": "For each query, output a single integer \u2014 answer to the query.",
    "note": "The graph in the first sample is : The first query is ( 1, 4) . There are 5 total edges that belong to any simple path from 1 to 4 . Edges ( 3, 4) , ( 4, 5) , ( 5, 3) will be counted in the answer to the query. The fourth query is ( 2, 8) . There is only one simple path from 2 to 8 , thus none of the edges will be counted in the answer to the query. The fifth query is ( 7, 10) . There are 4 total edges that belong to any simple path from 7 to 10 , all of them will be counted in the answer to the query.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1763F"
  },
  {
    "title": "Node Pairs",
    "url": "https://codeforces.com/problemset/problem/1763/E",
    "history": "Let' s call an ordered pair of nodes ( u, v) in a directed graph unidirectional if u = \u0338 v , there exists a path from u to v , and there are no paths from v to u . A directed graph is called p - reachable if it contains exactly p ordered pairs of nodes ( u, v) such that u < v and u and v are reachable from each other. Find the minimum number of nodes required to create a p - reachable directed graph. Also, among all such p - reachable directed graphs with the minimum number of nodes, let G denote a graph which maximizes the number of unidirectional pairs of nodes. Find this number.",
    "input": "The first and only line contains a single integer p ( 0 \u2264 p \u2264 2 \u00b7 10^ 5 ) \u2014 the number of ordered pairs of nodes.",
    "output": "Print a single line containing two integers \u2014 the minimum number of nodes required to create a p - reachable directed graph, and the maximum number of unidirectional pairs of nodes among all such p - reachable directed graphs with the minimum number of nodes.",
    "note": "In the first test case, the minimum number of nodes required to create a 3 - reachable directed graph is 3 . Among all 3 - reachable directed graphs with 3 nodes, the following graph G is one of the graphs with the maximum number of unidirectional pairs of nodes, which is 0 .",
    "topics": [
      "dp",
      "graphs",
      "math",
      "number theory"
    ],
    "id": "1763E"
  },
  {
    "title": "Make It Connected",
    "url": "https://codeforces.com/problemset/problem/1761/E",
    "history": "You are given a simple undirected graph consisting of n vertices. The graph doesn' t contain self- loops, there is at most one edge between each pair of vertices. Your task is simple: make the graph connected. You can do the following operation any number of times ( possibly zero) : Choose a vertex u arbitrarily. For each vertex v satisfying v u in the graph individually, if v is adjacent to u , remove the edge between u and v , otherwise add an edge between u and v . Find the minimum number of operations required to make the graph connected. Also, find any sequence of operations with the minimum length that makes the graph connected.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 800 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 2\u2264 n\u2264 4000 ) \u2014 the number of vertices in the graph. Then n lines follow. The i - th row contains a binary string s_ i of length n , where s_ i, j is ' 1' if there is an edge between vertex i and j initially, otherwise s_ i, j is ' 0' . It is guaranteed that s_ i, i is always ' 0' and s_ i, j= s_ j, i for 1\u2264 i, j\u2264 n . It is guaranteed that the sum of n over all test cases does not exceed 4000 .",
    "output": "For each test case, in the first line, output an integer m \u2014 the minimum number of operations required. If m is greater than zero, then print an extra line consisting of m integers \u2014 the vertices chosen in the operations in your solution. If there are multiple solutions with the minimum number of operations, print any.",
    "note": "In the first test case, the graph is connected at the beginning, so the answer is 0 . In the second test case, if we do the operation with vertex 1 , we will get the following graph represented by an adjacency matrix: [ 0 1 1; 1 0 1; 1 1 0 ] It' s obvious that the graph above is connected. In the third test case, if we do the operation with vertex 3 and 4 , we will get the following graph represented by an adjacency matrix: [ 0 1 1 1; 1 0 1 1; 1 1 0 1; 1 1 1 0 ] It' s obvious that the graph above is connected, and it can be proven that we can' t perform less than 2 operations to make the graph connected.",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "matrices",
      "trees",
      "two pointers"
    ],
    "id": "1761E"
  },
  {
    "title": "Set Construction",
    "url": "https://codeforces.com/problemset/problem/1761/C",
    "history": "You are given a binary matrix b ( all elements of the matrix are 0 or 1 ) of n rows and n columns. You need to construct a n sets A_ 1, A_ 2, . . . , A_ n , for which the following conditions are satisfied: Each set is nonempty and consists of distinct integers between 1 and n inclusive. All sets are distinct. For all pairs ( i, j) satisfying 1\u2264 i, j\u2264 n , b_ i, j= 1 if and only if A_ i\u228a A_ j . In other words, b_ i, j is 1 if A_ i is a proper subset of A_ j and 0 otherwise. Set X is a proper subset of set Y , if X is a nonempty subset of Y , and X = \u0338 Y . It' s guaranteed that for all test cases in this problem, such n sets exist. Note that it doesn' t mean that such n sets exist for all possible inputs. If there are multiple solutions, you can output any of them.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line contains a single integer n ( 1\u2264 n\u2264 100 ) . The following n lines contain a binary matrix b , the j - th character of i - th line denotes b_ i, j . It is guaranteed that the sum of n over all test cases does not exceed 1000 . It' s guaranteed that for all test cases in this problem, such n sets exist.",
    "output": "For each test case, output n lines. For the i - th line, first output s_ i ( 1 \u2264 s_ i \u2264 n) \u2014 the size of the set A_ i . Then, output s_ i distinct integers from 1 to n \u2014 the elements of the set A_ i . If there are multiple solutions, you can output any of them. It' s guaranteed that for all test cases in this problem, such n sets exist.",
    "note": "In the first test case, we have A_ 1 = { 1, 2, 3} , A_ 2 = { 1, 3} , A_ 3 = { 2, 4} , A_ 4 = { 1, 2, 3, 4} . Sets A_ 1, A_ 2, A_ 3 are proper subsets of A_ 4 , and also set A_ 2 is a proper subset of A_ 1 . No other set is a proper subset of any other set. In the second test case, we have A_ 1 = { 1} , A_ 2 = { 1, 2} , A_ 3 = { 1, 2, 3} . A_ 1 is a proper subset of A_ 2 and A_ 3 , and A_ 2 is a proper subset of A_ 3 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1761C"
  },
  {
    "title": "SlavicG's Favorite Problem",
    "url": "https://codeforces.com/problemset/problem/1760/G",
    "history": "You are given a weighted tree with n vertices. Recall that a tree is a connected graph without any cycles. A weighted tree is a tree in which each edge has a certain weight. The tree is undirected, it doesn' t have a root. Since trees bore you, you decided to challenge yourself and play a game on the given tree. In a move, you can travel from a node to one of its neighbors ( another node it has a direct edge with) . You start with a variable x which is initially equal to 0 . When you pass through edge i , x changes its value to x XOR w_ i ( where w_ i is the weight of the i - th edge) . Your task is to go from vertex a to vertex b , but you are allowed to enter node b if and only if after traveling to it, the value of x will become 0 . In other words, you can travel to node b only by using an edge i such that x XOR w_ i = 0 . Once you enter node b the game ends and you win. Additionally, you can teleport at most once at any point in time to any vertex except vertex b . You can teleport from any vertex, even from a . Answer with \" YES\" if you can reach vertex b from a , and \" NO\" otherwise. Note that XOR represents the bitwise XOR operation.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , a , and b ( 2 \u2264 n \u2264 10^ 5 ) , ( 1 \u2264 a, b \u2264 n; a b ) \u2014 the number of vertices, and the starting and desired ending node respectively. Each of the next n- 1 lines denotes an edge of the tree. Edge i is denoted by three integers u_ i , v_ i and w_ i \u2014 the labels of vertices it connects ( 1 \u2264 u_ i, v_ i \u2264 n; u_ i v_ i; 1 \u2264 w_ i \u2264 10^ 9 ) and the weight of the respective edge. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output \" YES\" if you can reach vertex b , and \" NO\" otherwise.",
    "note": "For the first test case, we can travel from node 1 to node 3 , x changing from 0 to 1 , then we travel from node 3 to node 2 , x becoming equal to 3 . Now, we can teleport to node 3 and travel from node 3 to node 4 , reaching node b , since x became equal to 0 in the end, so we should answer \" YES\" . For the second test case, we have no moves, since we can' t teleport to node b and the only move we have is to travel to node 2 which is impossible since x wouldn' t be equal to 0 when reaching it, so we should answer \" NO\" .",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "graphs"
    ],
    "id": "1760G"
  },
  {
    "title": "Tick, Tock",
    "url": "https://codeforces.com/problemset/problem/1758/E",
    "history": "Tannhaus, the clockmaker in the town of Winden, makes mysterious clocks that measure time in h hours numbered from 0 to h- 1 . One day, he decided to make a puzzle with these clocks. The puzzle consists of an n \u00d7 m grid of clocks, and each clock always displays some hour exactly ( that is, it doesn' t lie between two hours) . In one move, he can choose any row or column and shift all clocks in that row or column one hour forward ^ \u2020 . The grid of clocks is called solvable if it is possible to make all the clocks display the same time. While building his puzzle, Tannhaus suddenly got worried that it might not be possible to make the grid solvable. Some cells of the grid have clocks already displaying a certain initial time, while the rest of the cells are empty. Given the partially completed grid of clocks, find the number of ways ^ to assign clocks in the empty cells so that the grid is solvable. The answer can be enormous, so compute it modulo 10^ 9 + 7 . ^ \u2020 If a clock currently displays hour t and is shifted one hour forward, then the clock will instead display hour ( t+ 1) h . ^ Two assignments are different if there exists some cell with a clock that displays a different time in both arrangements.",
    "input": "The first line of input contains t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. The first line of each test case consists of 3 integers n , m , and h ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ; 1 \u2264 h \u2264 10^ 9 ) \u2014 the number of rows in the grid, the number of columns in the grid, and the number of the hours in the day respectively. The next n lines each contain m integers, describing the clock grid. The integer x ( - 1 \u2264 x < h ) in the i - th row and the j - th column represents the initial hour of the corresponding clock, or if x = - 1 , an empty cell. It is guaranteed that the sum of n \u00b7 m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the number of ways to assign clocks in the empty cells so that the grid is solvable. The answer can be huge, so output it modulo 10^ 9 + 7 .",
    "note": "For the first sample, this is a possible configuration for the clocks: 103032This is solvable since we can: Move the middle column forward one hour. Move the third column forward one hour. Move the third column forward one hour. Move the second row forward one hour. After that all the clocks show one hour. For the second test case, it can be shown that there are no possible solvable clock configurations.",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1758E"
  },
  {
    "title": "The Beach",
    "url": "https://codeforces.com/problemset/problem/1753/D",
    "history": "Andrew loves the sea. That' s why, at the height of the summer season, he decided to go to the beach, taking a sunbed with him to sunbathe. The beach is a rectangular field with n rows and m columns. Some cells of the beach are free, some have roads, stones, shops and other non- movable objects. Some of two adjacent along the side cells can have sunbeds located either horizontally or vertically. Andrew hopes to put his sunbed somewhere, but that' s a bad luck, there may no longer be free places for him! That' s why Andrew asked you to help him to find a free place for his sunbed. Andrew' s sunbed also should be places on two adjacent cells. If there are no two adjacent free cells, then in order to free some place for a sunbed, you will have to disturb other tourists. You can do the following actions: Come to some sunbed and, after causing p units of discomfort to its owner, lift the sunbed by one of its sides and rotate it by 90 degrees. One half of the sunbed must remain in the same cell and another half of the sunbed must move to the free cell. At the same time, anything could be on the way of a sunbed during the rotation . Rotation of the sunbed by 90 degrees around cell ( 1, 2) . Come to some sunbed and, after causing q units of discomfort to its owner, shift the sunbed along its long side by one cell. One half of the sunbed must move to the place of another, and another \u2014 to the free cell. Shift of the sunbed by one cell to the right. In any moment each sunbed occupies two adjacent free cells. You cannot move more than one sunbed at a time. Help Andrew to free a space for his sunbed, causing the minimum possible number of units of discomfort to other tourists, or detect that it is impossible.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 300 000 , 1 \u2264 n \u00b7 m \u2264 300 000 ) \u2014 the number of rows and columns in rectangle. The second line contains two integers p and q ( 1 \u2264 p, q \u2264 10^ 9 ) \u2014 the number of units of discomfort caused by rotation and shift of a sunbed, respectively. Each of the following n lines contains m characters, describing cells of the rectangle. Each lines consists of characters \" L\" , \" R\" , \" D\" , \" U\" , \" . \" and \" # \" , denoting the type of the cell. Characters \" L\" , \" R\" , \" D\" and \" U\" denote a half of a sunbed placed in the cell \u2014 left, right, bottom and top half, respectively. Character \" . \" denotes a free cell and character \" # \" \u2014 a cell, occupied by some non- movable object.",
    "output": "Print one integer \u2014 the minimum possible number of units of discomfort, caused to other tourists, to free a space for a sunbed. If it is impossible to free a space for a sunbed, print - 1 .",
    "note": "In the first example we can shift upper sunbed to the left and lower sunbed \u2014 to the right. Andrew will be able to put his sunbed vertically in the middle of the beach. We well cause 2 + 2 = 4 units of discomfort. It is easy to prove that it is an optimal answer. Optimal strategy in the first example ( Andrew' s sunbed is colored white) . In the second example it is impossible to free a space for Andrew' s sunbed. All possible states of the beach after any rotates and shifts are illustrated in the problem statement.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1753D"
  },
  {
    "title": "Cactus Wall",
    "url": "https://codeforces.com/problemset/problem/1749/E",
    "history": "Monocarp is playing Minecraft and wants to build a wall of cacti. He wants to build it on a field of sand of the size of n \u00d7 m cells. Initially, there are cacti in some cells of the field. Note that, in Minecraft, cacti cannot grow on cells adjacent to each other by side \u2014 and the initial field meets this restriction. Monocarp can plant new cacti ( they must also fulfil the aforementioned condition) . He can' t chop down any of the cacti that are already growing on the field \u2014 he doesn' t have an axe, and the cacti are too prickly for his hands. Monocarp believes that the wall is complete if there is no path from the top row of the field to the bottom row, such that: each two consecutive cells in the path are adjacent by side; no cell belonging to the path contains a cactus. Your task is to plant the minimum number of cacti to build a wall ( or to report that this is impossible) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 number of test cases. The first line of each test case contains two integers n and m ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 5 ; n \u00d7 m \u2264 4 \u00b7 10^ 5 ) \u2014 the number of rows and columns, respectively. Then n rows follow, i - th row contains a string s_ i of length m , where s_ i, j is ' # ' , if a cactus grows at the intersection of the i - th row and the j - th column. Otherwise, s_ i, j is ' . ' . The sum of n \u00d7 m over all test cases does not exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case, print NO in the first line if it is impossible to build a cactus wall without breaking the rules. Otherwise, print YES in the first line, then print n lines of m characters each \u2014 the field itself, where the j - th character of the i - th line is equal to ' # ' , if there is a cactus on the intersection of the i - th row and the j - th column, otherwise it is ' . ' . If there are multiple optimal answers, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1749E"
  },
  {
    "title": "Kirill and Company",
    "url": "https://codeforces.com/problemset/problem/1741/G",
    "history": "Kirill lives on a connected undirected graph of n vertices and m edges at vertex 1 . One fine evening he gathered f friends, the i - th friend lives at the vertex h_ i . So all friends are now in the vertex 1 , the i - th friend must get to his home to the vertex h_ i . The evening is about to end and it is time to leave. It turned out that k ( k \u2264 6 ) of his friends have no cars, and they would have to walk if no one gives them a ride. One friend with a car can give a ride to any number of friends without cars, but only if he can give them a ride by driving along one of the shortest paths to his house. For example, in the graph below, a friend from vertex h_ i= 5 can give a ride to friends from the following sets of vertices: [ 2, 3] , [ 2, 4] , [ 2] , [ 3] , [ 4] , but can' t give a ride to friend from vertex 6 or a set [ 3, 4] . The vertices where friends without cars live are highlighted in green, and with cars \u2014 in red. Kirill wants as few friends as possible to have to walk. Help him find the minimum possible number.",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases in the test. The first line of the test case contains two integers n and m ( 2 \u2264 n \u2264 10^ 4 , n- 1 \u2264 m \u2264 min ( 10^ 4, n \u00b7 ( n - 1) / 2 ) ) \u2014 the number of vertices and edges, respectively. The next m lines of the test case contain a description of the edges, two integers each u and v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 indexes of vertices connected by an edge. It is guaranteed that there is at most one edge between any pair of vertices ( i. e. no multiple edges in the graph) . Then follows line containing the number f ( 1 \u2264 f \u2264 10^ 4 ) \u2014 the number of Kirill' s friends. The next line of the test case contains f integers: h_ 1, h_ 2, . . . , h_ f ( 2 \u2264 h_ i \u2264 n ) \u2014 the vertices in which they live. Some vertices may be repeated. The next line of the set contains the number k ( 1 \u2264 k \u2264 min( 6, f) ) \u2014 the number of friends without cars. The last line of each test case contains k integers: p_ 1, p_ 2, . . . , p_ k ( 1 \u2264 p_ i \u2264 f , p_ i < p_ i+ 1 ) \u2014 indexes of friends without cars. It is guaranteed that the sum of n over all cases does not exceed 10^ 4 , as well as the sums of m and f .",
    "output": "Output t lines, each of which contains the answer to the corresponding test case. As an answer, output a single integer \u2014 the minimum possible number of friends who will have to walk.",
    "note": "The first test case of the first example is explained in the statement. In the second test case of the first example, two friends with cars live at vertex 5 , one can give a ride to friends from vertices 2 and 3 , and the second from vertex 4 , only a friend from vertex 6 will have to walk.",
    "topics": [
      "bitmasks",
      "brute force",
      "dfs and similar",
      "dp",
      "flows",
      "graphs",
      "shortest paths"
    ],
    "id": "1741G"
  },
  {
    "title": "Masha and a Beautiful Tree",
    "url": "https://codeforces.com/problemset/problem/1741/D",
    "history": "The girl named Masha was walking in the forest and found a complete binary tree of height n and a permutation p of length m= 2^ n . A complete binary tree of height n is a rooted tree such that every vertex except the leaves has exactly two sons, and the length of the path from the root to any of the leaves is n . The picture below shows the complete binary tree for n= 2 . A permutation is an array consisting of n different integers from 1 to n . For example, [ 2, 3, 1, 5, 4 ] is a permutation, but [ 1, 2, 2 ] is not ( 2 occurs twice) , and [ 1, 3, 4 ] is also not a permutation ( n= 3 , but there is 4 in the array) . Let' s enumerate m leaves of this tree from left to right. The leaf with the number i contains the value p_ i ( 1 \u2264 i \u2264 m ) . For example, if n = 2 , p = [ 3, 1, 4, 2] , the tree will look like this: Masha considers a tree beautiful if the values in its leaves are ordered from left to right in increasing order. In one operation, Masha can choose any non- leaf vertex of the tree and swap its left and right sons ( along with their subtrees) . For example, if Masha applies this operation to the root of the tree discussed above, it will take the following form: Help Masha understand if she can make a tree beautiful in a certain number of operations. If she can, then output the minimum number of operations to make the tree beautiful.",
    "input": "The first line contains single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 number of test cases. In each test case, the first line contains an integer m ( 1 \u2264 m \u2264 262144 ) , which is a power of two \u2014 the size of the permutation p . The second line contains m integers: p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 m ) \u2014 the permutation p . It is guaranteed that the sum of m over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case in a separate line, print the minimum possible number of operations for which Masha will be able to make the tree beautiful or - 1, if this is not possible.",
    "note": "Consider the first test. In the first test case, you can act like this ( the vertex to which the operation is applied at the current step is highlighted in purple) : It can be shown that it is impossible to make a tree beautiful in fewer operations. In the second test case, it can be shown that it is impossible to make a tree beautiful. In the third test case, the tree is already beautiful.",
    "topics": [
      "dfs and similar",
      "divide and conquer",
      "graphs",
      "sortings",
      "trees"
    ],
    "id": "1741D"
  },
  {
    "title": "Arranging Crystal Balls",
    "url": "https://codeforces.com/problemset/problem/1740/I",
    "history": "In the world of Compfestnesia, Pak Chanek discovers a secret underground dungeon. Inside it, there is a treasure chest that is surrounded by n statues that are arranged in a circular manner. The statues are numbered from 0 to n- 1 with statue i being to the left of statue i+ 1 and statue n- 1 being to the left of statue 0 . Pak Chanek observes that each statue is holding a crystal ball with an integer between 0 and m- 1 inclusive. Let' s say the integer in the crystal ball of statue i is a_ i . The dungeon provides instructions that every integer in the crystal balls must be 0 in order to open the treasure chest. To achieve that, Pak Chanek is given an integer k , and he can do zero or more operations. In a single operation, Pak Chanek does the following: Choose exactly k consecutive statues. In other words, choose the statues p, ( p+ 1) n, ( p+ 2) n, ( p+ 3) n, . . . , ( p+ k- 1) n for some chosen index p . Do one of the following: For all chosen statues, change their values of a_ i into ( a_ i+ 1) m . For all chosen statues, change their values of a_ i into ( a_ i- 1) m . Help Pak Chanek find the minimum possible number of operations to open the treasure chest.",
    "input": "The first line contains three integers n , m , and k ( 2 \u2264 n, m \u2264 10^ 6 , nm \u2264 2 \u00b7 10^ 6 , 1 \u2264 k < n ) \u2014 the number of statues, the bound of the integers in the crystal balls, and the number of statues that can be operated in a single operation. The second line contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( 0 \u2264 a_ i < m ) \u2014 the integers in the crystal balls.",
    "output": "If it is possible to perform zero or more operations so that a_ 0= a_ 1= . . . = a_ n- 1= 0 , output the minimum number of operations required. Otherwise, output - 1 .",
    "note": "In the first example, Pak Chanek can do the following operations: Do the a_ i : = ( a_ i- 1) m operation 3 times for statues 1 , 2 , and 3 . Now a= [ 8, 7, 1, 2, 0] . Do the a_ i : = ( a_ i- 1) m operation 1 time for statues 3 , 4 , and 0 . Now a= [ 7, 7, 1, 1, 8] . Do the a_ i : = ( a_ i+ 1) m operation 2 times for statues 4 , 0 , and 1 . Now a= [ 0, 0, 1, 1, 1] . Do the a_ i : = ( a_ i- 1) m operation 1 time for statues 2 , 3 , and 4 . Now a= [ 0, 0, 0, 0, 0] .",
    "topics": [
      "data structures",
      "divide and conquer",
      "divide and conquer",
      "dp",
      "geometry",
      "graphs",
      "number theory"
    ],
    "id": "1740I"
  },
  {
    "title": "Reset K Edges",
    "url": "https://codeforces.com/problemset/problem/1739/D",
    "history": "You are given a rooted tree, consisting of n vertices. The vertices are numbered from 1 to n , the root is the vertex 1 . You can perform the following operation at most k times: choose an edge ( v, u) of the tree such that v is a parent of u ; remove the edge ( v, u) ; add an edge ( 1, u) ( i. e. make u with its subtree a child of the root) . The height of a tree is the maximum depth of its vertices, and the depth of a vertex is the number of edges on the path from the root to it. For example, the depth of vertex 1 is 0 , since it' s the root, and the depth of all its children is 1 . What' s the smallest height of the tree that can be achieved?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 0 \u2264 k \u2264 n - 1 ) \u2014 the number of vertices in the tree and the maximum number of operations you can perform. The second line contains n- 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) \u2014 the parent of the i - th vertex. Vertex 1 is the root. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the smallest height of the tree that can achieved by performing at most k operations.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1739D"
  },
  {
    "title": "Connectivity Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/F",
    "history": "This is an interactive problem. Given a simple undirected graph with n vertices numbered from 1 to n , your task is to color all the vertices such that for every color c , the following conditions hold: The set of vertices with color c is connected; s_ c \u2264 n_ c^ 2 , where n_ c is the number of vertices with color c , and s_ c is the sum of degrees of vertices with color c . It can be shown that there always exists a way to color all the vertices such that the above conditions hold. Initially, you are only given the number n of vertices and the degree of each vertex. In each query, you can choose a vertex u . As a response, you will be given the k - th edge incident to u , if this is the k - th query on vertex u . You are allowed to make at most n queries. An undirected graph is simple if it does not contain multiple edges or self- loops. The degree of a vertex is the number of edges incident to it. A set S of vertices is connected if for every two different vertices u, v \u2208 S , there is a path, which only passes through vertices in S , that connects u and v . That is, there is a sequence of edges ( u_ 1, v_ 1) , ( u_ 2, v_ 2) , . . . , ( u_ k, v_ k) with k \u2265 1 such that u_ 1 = u , v_ k = v , and v_ i = u_ i+ 1 for every 1 \u2264 i < k ; and u_ k \u2208 S and v_ k \u2208 S for every 1 \u2264 i \u2264 k . Especially, a set containing only one vertex is connected. InteractionEach test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The following lines contain the description and the interactive section of each test case. For each test case, you begin the interaction by reading an integer n ( 1\u2264 n \u2264 1000 ) in the first line, indicating the number of vertices in the graph. The second line contains n integers d_ 1, d_ 2, . . . , d_ n ( 0 \u2264 d_ i \u2264 n - 1 ) , where d_ i is the degree of vertex i . To make a query on vertex u ( 1 \u2264 u \u2264 n ) , you should output \" ? u \" in a separate line. If this is the k - th query on vertex u , vertex e_ u, k will be given in the next separate line, where ( u, e_ u, k) is the k - th edge incident to vertex u . In case of k > d_ u , define e_ u, k = - 1 . You should make no more than n \" ? \" queries. To give the answer, you should output \" ! c_ 1 c_ 2 . . . c_ n \" in a separate line, where c_ i ( 1 \u2264 c_ i \u2264 n ) is the color of vertex i . After that, your program should continue to the next test case, or terminate if this is the last test case. It is guaranteed that the graph is a simple undirected graph. It is guaranteed that the sum of n over all test cases does not exceed 1000 . In case your query format is invalid, or you have made more than n \" ? \" queries, you will receive Wrong Answer verdict. After printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Hack FormatThe first line of the hack contains an integer t ( 1 \u2264 t \u2264 1000 ) , indicating the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 1000 ) , indicating the number of vertices in the graph. Then n lines follow. The i - th line contains an integer d_ i ( 0 \u2264 d_ i \u2264 n - 1 ) , indicating the degree of vertex i , and then d_ i distinct integers e_ i, 1, e_ i, 2, . . . , e_ i, d_ i ( 1 \u2264 e_ i, j\u2264 n and e_ i, j= \u0338 i ) , where ( i, e_ i, j) is the j - th edge incident to vertex i . It should be guaranteed that the graph is a simple undirected graph. It should be guaranteed that the sum of n over all test cases does not exceed 1000 .",
    "input": "",
    "output": "",
    "note": "In the example, there is only one test case. In the test case, there are n = 5 vertices with vertices 1, 2, 3, 4 of degree 2 and vertex 5 of degree 0 . It is obvious that vertex 5 is isolated, i. e. , it does not connect to any other vertices. A possible interaction is shown in the sample input and output, where 4 \" ? \" queries are made on vertex 1 twice and vertex 3 twice. According to the responses to these queries, we know that each of vertex 1 and vertex 3 connects to two vertices 2 and 4 . A possible solution is shown in the sample output, where vertex 1 and vertex 2 are colored by 1 , vertex 3 and vertex 4 are colored by 2 , and vertex 5 is colored by 3 . It can be seen that this solution satisfies the required conditions as follows. For color c = 1 , vertex 1 and vertex 2 are connected. Moreover, n_ 1 = 2 and s_ 1 = d_ 1 + d_ 2 = 2 + 2 = 4 \u2264 n_ 1^ 2 = 2^ 2 = 4 ; For color c = 2 , vertex 3 and vertex 4 are connected. Moreover, n_ 2 = 2 and s_ 2 = d_ 3 + d_ 4 = 2 + 2 = 4 \u2264 n_ 2^ 2 = 2^ 2 = 4 ; For color c = 3 , there is only one vertex ( vertex 5 ) colored by 3 . Moreover, n_ 3 = 1 and s_ 3 = d_ 5 = 0 \u2264 n_ 3^ 2 = 1^ 2 = 1 .",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "interactive",
      "shortest paths",
      "trees"
    ],
    "id": "1738F"
  },
  {
    "title": "Permutation Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/D",
    "history": "Given a permutation a_ 1, a_ 2, . . . , a_ n of integers from 1 to n , and a threshold k with 0 \u2264 k \u2264 n , you compute a sequence b_ 1, b_ 2, . . . , b_ n as follows. For every 1 \u2264 i \u2264 n in increasing order, let x = a_ i . If x \u2264 k , set b_ x to the last element a_ j ( 1 \u2264 j < i ) that a_ j > k . If no such element a_ j exists, set b_ x = n+ 1 . If x > k , set b_ x to the last element a_ j ( 1 \u2264 j < i ) that a_ j \u2264 k . If no such element a_ j exists, set b_ x = 0 . Unfortunately, after the sequence b_ 1, b_ 2, . . . , b_ n has been completely computed, the permutation a_ 1, a_ 2, . . . , a_ n and the threshold k are discarded. Now you only have the sequence b_ 1, b_ 2, . . . , b_ n . Your task is to find any possible permutation a_ 1, a_ 2, . . . , a_ n and threshold k that produce the sequence b_ 1, b_ 2, . . . , b_ n . It is guaranteed that there exists at least one pair of permutation a_ 1, a_ 2, . . . , a_ n and threshold k that produce the sequence b_ 1, b_ 2, . . . , b_ n . A permutation of integers from 1 to n is a sequence of length n which contains all integers from 1 to n exactly once.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) , indicating the length of the permutation a . The second line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 n+ 1 ) , indicating the elements of the sequence b . It is guaranteed that there exists at least one pair of permutation a_ 1, a_ 2, . . . , a_ n and threshold k that produce the sequence b_ 1, b_ 2, . . . , b_ n . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output the threshold k ( 0 \u2264 k \u2264 n ) in the first line, and then output the permutation a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) in the second line such that the permutation a_ 1, a_ 2, . . . , a_ n and threshold k produce the sequence b_ 1, b_ 2, . . . , b_ n . If there are multiple solutions, you can output any of them.",
    "note": "For the first test case, permutation a = [ 1, 3, 2, 4] and threshold k = 2 will produce sequence b as follows. When i = 1 , x = a_ i = 1 \u2264 k , there is no a_ j ( 1 \u2264 j < i ) that a_ j > k . Therefore, b_ 1 = n + 1 = 5 . When i = 2 , x = a_ i = 3 > k , the last element a_ j that a_ j \u2264 k is a_ 1 . Therefore, b_ 3 = a_ 1 = 1 . When i = 3 , x = a_ i = 2 \u2264 k , the last element a_ j that a_ j > k is a_ 2 . Therefore, b_ 2 = a_ 2 = 3 . When i = 4 , x = a_ i = 4 > k , the last element a_ j that a_ j \u2264 k is a_ 3 . Therefore, b_ 4 = a_ 3 = 2 . Finally, we obtain sequence b = [ 5, 3, 1, 2] . For the second test case, permutation a = [ 1, 2, 3, 4, 5, 6] and threshold k = 3 will produce sequence b as follows. When i = 1, 2, 3 , a_ i \u2264 k , there is no a_ j ( 1 \u2264 j < i ) that a_ j > k . Therefore, b_ 1 = b_ 2 = b_ 3 = n + 1 = 7 . When i = 4, 5, 6 , a_ i > k , the last element a_ j that a_ j \u2264 k is a_ 3 . Therefore, b_ 4 = b_ 5 = b_ 6 = a_ 3 = 3 . Finally, we obtain sequence b = [ 7, 7, 7, 3, 3, 3] . For the third test case, permutation a = [ 6, 5, 4, 3, 2, 1] and threshold k = 3 will produce sequence b as follows. When i = 1, 2, 3 , a_ i > k , there is no a_ j ( 1 \u2264 j < i ) that a_ j \u2264 k . Therefore, b_ 4 = b_ 5 = b_ 6 = 0 . When i = 4, 5, 6 , a_ i \u2264 k , the last element a_ j that a_ j > k is a_ 3 . Therefore, b_ 1 = b_ 2 = b_ 3 = a_ 3 = 4 . Finally, we obtain sequence b = [ 4, 4, 4, 0, 0, 0] .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1738D"
  },
  {
    "title": "Ela and the Wiring Wizard",
    "url": "https://codeforces.com/problemset/problem/1737/D",
    "history": "Ela needs to send a large package from machine 1 to machine n through a network of machines. Currently, with the network condition, she complains that the network is too slow and the package can' t arrive in time. Luckily, a Wiring Wizard offered her a helping hand. The network can be represented as an undirected connected graph with n nodes, each node representing a machine. m wires are used to connect them. Wire i is used to connect machines u_ i and v_ i , and has a weight w_ i . The aforementioned large package, if going through wire i , will move from machine u_ i to machine v_ i ( or vice versa) in exactly w_ i microseconds. The Wiring Wizard can use his spell an arbitrary number of times. For each spell, he will choose the wire of index i , connecting machine u_ i and v_ i , and rewire it following these steps: Choose one machine that is connected by this wire. Without loss of generality, let' s choose v_ i . Choose a machine that is currently connecting to v_ i ( including u_ i ) , call it t_ i . Disconnect the wire indexed i from v_ i , then using it to connect u_ i and t_ i . The rewiring of wire i will takes w_ i microseconds, and the weight of the wire will not change after this operation. After a rewiring, a machine might have some wire connect it with itself. Also, the Wiring Wizard has warned Ela that rewiring might cause temporary disconnections between some machines, but Ela just ignores it anyway. Her mission is to send the large package from machine 1 to machine n as fast as possible. Note that the Wizard can use his spell on a wire zero, one, or many times. To make sure the network works seamlessly while transferring the large package, once the package starts transferring from machine 1 , the Wiring Wizard cannot use his spell to move wires around anymore. Ela wonders, with the help of the Wiring Wizard, what is the least amount of time needed to transfer the large package from machine 1 to n .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . The description of the test cases follows. The first line contains n and m ( 2 \u2264 n \u2264 500 , n - 1 \u2264 m \u2264 250 000 ) , the number of nodes and number of wires, respectively. For the next m lines, i - th line will contains u_ i , v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 9 ) - the indices 2 machines that are connected by the i - th edge and the weight of it. It is guaranteed that the sum of n over all test cases does not exceed 500 and the sum of m over all test cases does not exceed 250 000 . The graph in each test case is guaranteed to be connected, no self- loops, but it can contain multiple edges.",
    "output": "For each test case, output one integer denotes the least amount of time needed to transfer the large package from machine 1 to n .",
    "note": "Here is the graph in the first test case in the sample input: Ela can ask the Wiring Wizard to use his spell on wire with the index of 7 , which is connecting machines 2 and 3 . Then, since the machine 8 is connected to machine 3 , the Wiring Wizard can disconnect wire 7 from machine 3 and connect it to machine 8 in 3 microseconds ( weight of wire 3 ) . After that, the package can be sent from machine 1 to machine 8 in 6 microseconds. Therefore, the answer is 3 + 6 = 9 microseconds. Here is the graph in the third test case in the sample input:",
    "topics": [
      "brute force",
      "dp",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1737D"
  },
  {
    "title": "Phase Shift",
    "url": "https://codeforces.com/problemset/problem/1735/C",
    "history": "There was a string s which was supposed to be encrypted. For this reason, all 26 lowercase English letters were arranged in a circle in some order, afterwards, each letter in s was replaced with the one that follows in clockwise order, in that way the string t was obtained. You are given a string t . Determine the lexicographically smallest string s that could be a prototype of the given string t . A string a is lexicographically smaller than a string b of the same length if and only if: in the first position where a and b differ, the string a has a letter, that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the string t . The next line contains the string t of the length n , containing lowercase English letters. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing the lexicographically smallest string s which could be a prototype of t .",
    "note": "In the first test case, we couldn' t have the string \" a\" , since the letter a would transit to itself. Lexicographically the second string \" b\" is suitable as an answer. In the second test case, the string \" aa\" is not suitable, since a would transit to itself. \" ab\" is not suitable, since the circle would be closed with 2 letters, but it must contain all 26 . The next string \" ac\" is suitable. Below you can see the schemes for the first three test cases. The non- involved letters are skipped, they can be arbitrary placed in the gaps.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1735C"
  },
  {
    "title": "Edge Split",
    "url": "https://codeforces.com/problemset/problem/1726/D",
    "history": "You are given a connected, undirected and unweighted graph with n vertices and m edges. Notice the limit on the number of edges: m \u2264 n + 2 . Let' s say we color some of the edges red and the remaining edges blue. Now consider only the red edges and count the number of connected components in the graph. Let this value be c_ 1 . Similarly, consider only the blue edges and count the number of connected components in the graph. Let this value be c_ 2 . Find an assignment of colors to the edges such that the quantity c_ 1+ c_ 2 is minimised.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; n- 1 \u2264 m \u2264min( n+ 2, n \u00b7 ( n- 1) / 2) ) \u2014 the number of vertices and the number of edges respectively. m lines follow. The i - th line contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) denoting that the i - th edge goes between vertices u_ i and v_ i . The input is guaranteed to have no multiple edges or self loops. The graph is also guaranteed to be connected. It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 . It is guaranteed that the sum of m over all test cases does not exceed 2 \u00b7 10^ 6 .",
    "output": "For each test case, output a binary string of length m . The i - th character of the string should be 1 if the i - th edge should be colored red, and 0 if it should be colored blue. If there are multiple ways to assign colors to edges that give the minimum answer, you may output any.",
    "note": "The corresponding graph of the first test case is: c_ 1 + c_ 2 = 1 + 2 = 3 The corresponding graph of the second test case is: c_ 1 + c_ 2 = 2 + 2 = 4",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "probabilities",
      "trees"
    ],
    "id": "1726D"
  },
  {
    "title": "Jatayu's Balanced Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/1726/C",
    "history": "Last summer, Feluda gifted Lalmohan- Babu a balanced bracket sequence s of length 2 n . Topshe was bored during his summer vacations, and hence he decided to draw an undirected graph of 2 n vertices using the balanced bracket sequence s . For any two distinct vertices i and j ( 1 \u2264 i < j \u2264 2 n ) , Topshe draws an edge ( undirected and unweighted) between these two nodes if and only if the subsegment s[ i . . . j] forms a balanced bracket sequence. Determine the number of connected components in Topshe' s graph. See the Notes section for definitions of the underlined terms.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of opening brackets in string s . The second line of each test case contains a string s of length 2 n \u2014 a balanced bracket sequence consisting of n opening brackets \" ( \" , and n closing brackets \" ) \" . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of connected components in Topshe' s graph.",
    "note": "Sample explanation: In the first test case, the graph constructed from the bracket sequence ( ) , is just a graph containing nodes 1 and 2 connected by a single edge. In the second test case, the graph constructed from the bracket sequence ( ) ( ( ) ) would be the following ( containing two connected components) : Definition of Underlined Terms: A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters + and 1 . For example, sequences ( ( ) ) ( ) , ( ) , and ( ( ) ( ( ) ) ) are balanced, while ) ( , ( ( ) , and ( ( ) ) ) ( are not. The subsegment s[ l . . . r] denotes the sequence [ s_ l, s_ l + 1, . . . , s_ r] . A connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting these vertices, but adding any other vertex to X violates this rule.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1726C"
  },
  {
    "title": "Moving Both Hands",
    "url": "https://codeforces.com/problemset/problem/1725/M",
    "history": "Pak Chanek is playing one of his favourite board games. In the game, there is a directed graph with N vertices and M edges. In the graph, edge i connects two different vertices U_ i and V_ i with a length of W_ i . By using the i - th edge, something can move from U_ i to V_ i , but not from V_ i to U_ i . To play this game, initially Pak Chanek must place both of his hands onto two different vertices. In one move, he can move one of his hands to another vertex using an edge. To move a hand from vertex U_ i to vertex V_ i , Pak Chanek needs a time of W_ i seconds. Note that Pak Chanek can only move one hand at a time. This game ends when both of Pak Chanek' s hands are on the same vertex. Pak Chanek has several questions. For each p satisfying 2 \u2264 p \u2264 N , you need to find the minimum time in seconds needed for Pak Chanek to end the game if initially Pak Chanek' s left hand and right hand are placed on vertex 1 and vertex p , or report if it is impossible.",
    "input": "The first line contains two integers N and M ( 2 \u2264 N \u2264 10^ 5 , 0 \u2264 M \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and edges in the graph. The i - th of the next M lines contains three integers U_ i , V_ i , and W_ i ( 1 \u2264 U_ i, V_ i \u2264 N , U_ i = \u0338 V_ i , 1 \u2264 W_ i \u2264 10^ 9 ) \u2014 a directed edge that connects two different vertices U_ i and V_ i with a length of W_ i . There is no pair of different edges i and j such that U_ i = U_ j and V_ i = V_ j .",
    "output": "Output a line containing N- 1 integers. The j - th integer represents the minimum time in seconds needed by Pak Chanek to end the game if initially Pak Chanek' s left hand and right hand are placed on vertex 1 and vertex j+ 1 , or - 1 if it is impossible.",
    "note": "If initially Pak Chanek' s left hand is on vertex 1 and his right hand is on vertex 5 , Pak Chanek can do the following moves: Move his right hand to vertex 4 in 1 second. Move his left hand to vertex 2 in 2 seconds. Move his left hand to vertex 4 in 1 second. In total it needs 1+ 2+ 1= 4 seconds. It can be proven that there is no other way that is faster.",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "1725M"
  },
  {
    "title": "Matching Reduction",
    "url": "https://codeforces.com/problemset/problem/1721/F",
    "history": "You are given a bipartite graph with n_ 1 vertices in the first part, n_ 2 vertices in the second part, and m edges. The maximum matching in this graph is the maximum possible ( by size) subset of edges of this graph such that no vertex is incident to more than one chosen edge. You have to process two types of queries to this graph: 1 \u2014 remove the minimum possible number of vertices from this graph so that the size of the maximum matching gets reduced exactly by 1 , and print the vertices that you have removed. Then, find any maximum matching in this graph and print the sum of indices of edges belonging to this matching; 2 \u2014 query of this type will be asked only after a query of type 1 . As the answer to this query, you have to print the edges forming the maximum matching you have chosen in the previous query. Note that you should solve the problem in online mode. It means that you can' t read the whole input at once. You can read each query only after writing the answer for the last query. Use functions fflush in C+ + and BufferedWriter. flush in Java languages after each writing in your program.",
    "input": "The first line contains four integers n_ 1 , n_ 2 , m and q ( 1 \u2264 n_ 1, n_ 2 \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264min( n_ 1 \u00b7 n_ 2, 2 \u00b7 10^ 5) ; 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) . Then m lines follow. The i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n_ 1 ; 1 \u2264 y_ i \u2264 n_ 2 ) meaning that the i - th edge connects the vertex x_ i in the first part and the vertex y_ i in the second part. There are no pairs of vertices that are connected by more than one edge. Then q lines follow. The i - th of them contains one integer, 1 or 2 , denoting the i - th query. Additional constraints on queries: the number of queries of type 1 won' t exceed the size of the maximum matching in the initial graph; the number of queries of type 2 won' t exceed 3 ; each query of type 2 is preceded by a query of type 1 ; your solution is allowed to read the i - th query only after printing the answer for the ( i- 1) - th query and flushing the output.",
    "output": "For a query of type 1 , print the answer in three lines as follows: the first line should contain the number of vertices you remove; the second line should contain the indices of vertices you remove, as follows: if you remove the vertex x from the left part, print x ; if you remove the vertex y from the right part, print - y ( negative index) ; the third line should contain the sum of indices of edges in some maximum matching in the resulting graph. The edges are numbered from 1 to m . For a query of type 2 , print the answer in two lines as follows: the first line should contain the size of the maximum matching; the second line should contain the indices of the edges belonging to the maximum matching. Note that the sum of these indices should be equal to the number you printed at the end of the previous query of type 1 ; After printing the answer to a query, don' t forget to flush the output.",
    "note": "In this problem, you may receive the verdict \" Idleness Limit Exceeded\" since it is in online mode. If it happens, it means that either the output format is wrong, or you don' t meet some constraint of the problem. You may treat this verdict as \" Wrong Answer\" . For your convenience, the output for queries in the example is separated by the line = = = . Don' t print this line in your program, it is done only to make sure that it' s easy to distinguish between answers for different queries in the statement.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "flows",
      "graph matchings",
      "graphs",
      "interactive"
    ],
    "id": "1721F"
  },
  {
    "title": "Impressionism",
    "url": "https://codeforces.com/problemset/problem/1718/E",
    "history": "Burenka has two pictures a and b , which are tables of the same size n \u00d7 m . Each cell of each painting has a color \u2014 a number from 0 to 2 \u00b7 10^ 5 , and there are no repeating colors in any row or column of each of the two paintings, except color 0 . Burenka wants to get a picture b from the picture a . To achieve her goal, Burenka can perform one of 2 operations: swap any two rows of a or any two of its columns. Tell Burenka if she can fulfill what she wants, and if so, tell her the sequence of actions. The rows are numbered from 1 to n from top to bottom, the columns are numbered from 1 to m from left to right.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u00b7 m \u2264 2 \u00b7 10^ 5 ) \u2014 the sizes of the table. The i - th of the next n lines contains m integers a_ i, 1, a_ i, 2, . . . , a_ i, m ( 0 \u2264 a_ i, j\u2264 2 \u00b7 10^ 5 ) \u2014 the colors of the i - th row of picture a . It is guaranteed that there are no identical colors in the same row or column, except color 0 . The i - th of the following n lines contains m integers b_ i, 1, b_ i, 2, . . . , b_ i, m ( 0 \u2264 b_ i, j\u2264 2 \u00b7 10^ 5 ) \u2014 the colors of the i - th row of picture b . It is guaranteed that there are no identical colors in the same row or column, except color 0 .",
    "output": "In the first line print the number - 1 if it is impossible to achieve what Burenka wants, otherwise print the number of actions in your solution k ( 0 \u2264 k \u2264 2 \u00b7 10^ 5 ) . It can be proved that if a solution exists, then there exists a solution where k \u2264 2 \u00b7 10^ 5 . In the next k lines print the operations. First print the type of the operation ( 1 \u2014 swap rows, 2 \u2014 columns) , and then print the two indices of rows or columns to which the operation is applied. Note that you don' t have to minimize the number of operations.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "1718E"
  },
  {
    "title": "Madoka and The First Session",
    "url": "https://codeforces.com/problemset/problem/1717/F",
    "history": "Oh no, on the first exam Madoka got this hard problem: Given integer n and m pairs of integers ( v_ i, u_ i ) . Also there is an array b_ 1, b_ 2, . . . , b_ n , initially filled with zeros. Then for each index i , where 1 \u2264 i \u2264 m , perform either b_ v_ i : = b_ v_ i - 1 and b_ u_ i : = b_ u_ i + 1 , or b_ v_ i : = b_ v_ i + 1 and b_ u_ i : = b_ u_ i - 1 . Note that exactly one of these operations should be performed for every i . Also there is an array s of length n consisting of 0 and 1 . And there is an array a_ 1, a_ 2, . . . , a_ n , where it is guaranteed, that if s_ i = 0 holds, then a_ i = 0 . Help Madoka and determine whenever it is possible to perform operations in such way that for every i , where s_ i = 1 it holds that a_ i = b_ i . If it possible you should also provide Madoka with a way to perform operations.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 10000, 1 \u2264 m \u2264 10000 ) \u2014 the length of the array a and the number of pair of integers. The second line contains n integers s_ 1, s_ 2, . . . s_ n ( 0 \u2264 s_ i \u2264 1 ) \u2014 the elements of the array s . The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( | a_ i| \u2264 m ) \u2014 the elements of the array a . It is guaranteed that if s_ i = 0 holds, then a_ i = 0 . i - th of the following m lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 n, v_ i u_ i ) \u2014 the indexes of the elements of the array b to which the operation is performed. It is also guaranteed that there are no two indices i and j , where 1 \u2264 i < j \u2264 m , such that ( v_ i, u_ i) = ( v_ j, u_ j) or ( v_ i, u_ i) = ( u_ j, v_ j) .",
    "output": "In the first line print \" YES\" if it is possible to perform operations in the required way, and \" NO\" otherwise. You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as positive answer) . In case you printed \" YES\" , print m pairs of integers. If for pair ( v_ i, u_ i) we should perform b_ v_ i : = b_ v_ i - 1 and b_ u_ i : = b_ u_ i + 1 , print ( v_ i, u_ i) . Otherwise print ( u_ i, v_ i) . If there are multiple ways to get the correct answer, you can print any of them. You can print pairs in any order.",
    "note": "In the first example, the array b will change as follows: [ 0, 0, 0, 0, 0] \u2192 [ - 1, 0, 0, 1, 0] \u2192 [ - 2, 0, 0, 1, 1] \u2192 [ - 2, 0, 1, 0, 1] \u2192 [ - 2, 0, 2, 0, 0] \u2192 [ - 2, 0, 2, 1, - 1] . a_ i = b_ i for all indices i from 1 to 5 . In the second example, it is enough for us that b_ 2 = 1 at the end, since only s_ 2 = 1 . In the third example, the operations cannot be performed as required.",
    "topics": [
      "constructive algorithms",
      "flows",
      "graph matchings",
      "graphs",
      "implementation"
    ],
    "id": "1717F"
  },
  {
    "title": "Long Way Home",
    "url": "https://codeforces.com/problemset/problem/1715/E",
    "history": "Stanley lives in a country that consists of n cities ( he lives in city 1 ) . There are bidirectional roads between some of the cities, and you know how long it takes to ride through each of them. Additionally, there is a flight between each pair of cities, the flight between cities u and v takes ( u - v) ^ 2 time. Stanley is quite afraid of flying because of watching \" Sully: Miracle on the Hudson\" recently, so he can take at most k flights. Stanley wants to know the minimum time of a journey to each of the n cities from the city 1 .",
    "input": "In the first line of input there are three integers n , m , and k ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 10^ 5 , 1 \u2264 k \u2264 20 ) \u2014 the number of cities, the number of roads, and the maximal number of flights Stanley can take. The following m lines describe the roads. Each contains three integers u , v , w ( 1 \u2264 u, v \u2264 n , u = \u0338 v , 1 \u2264 w \u2264 10^ 9 ) \u2014 the cities the road connects and the time it takes to ride through. Note that some pairs of cities may be connected by more than one road.",
    "output": "Print n integers, i - th of which is equal to the minimum time of traveling to city i .",
    "note": "In the first sample, it takes no time to get to city 1; to get to city 2 it is possible to use a flight between 1 and 2, which will take 1 unit of time; to city 3 you can get via a road from city 1, which will take 1 unit of time. In the second sample, it also takes no time to get to city 1. To get to city 2 Stanley should use a flight between 1 and 2, which will take 1 unit of time. To get to city 3 Stanley can ride between cities 1 and 2, which will take 3 units of time, and then use a flight between 2 and 3. To get to city 4 Stanley should use a flight between 1 and 2, then take a ride from 2 to 4, which will take 5 units of time.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "geometry",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1715E"
  },
  {
    "title": "2+ doors",
    "url": "https://codeforces.com/problemset/problem/1715/D",
    "history": "The Narrator has an integer array a of length n , but he will only tell you the size n and q statements, each of them being three integers i, j, x , which means that a_ i | a_ j = x , where | denotes the bitwise OR operation. Find the lexicographically smallest array a that satisfies all the statements. An array a is lexicographically smaller than an array b of the same length if and only if the following holds: in the first position where a and b differ, the array a has a smaller element than the corresponding element in b .",
    "input": "In the first line you are given with two integers n and q ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 q \u2264 2 \u00b7 10^ 5 ) . In the next q lines you are given with three integers i , j , and x ( 1 \u2264 i, j \u2264 n , 0 \u2264 x < 2^ 30 ) \u2014 the statements. It is guaranteed that all q statements hold for at least one array.",
    "output": "On a single line print n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) \u2014 array a .",
    "note": "In the first sample, these are all the arrays satisfying the statements: [ 0, 3, 2, 2] , [ 2, 1, 0, 0] , [ 2, 1, 0, 2] , [ 2, 1, 2, 0] , [ 2, 1, 2, 2] , [ 2, 3, 0, 0] , [ 2, 3, 0, 2] , [ 2, 3, 2, 0] , [ 2, 3, 2, 2] .",
    "topics": [
      "2-sat",
      "bitmasks",
      "graphs",
      "greedy"
    ],
    "id": "1715D"
  },
  {
    "title": "Party",
    "url": "https://codeforces.com/problemset/problem/1711/B",
    "history": "A club plans to hold a party and will invite some of its n members. The n members are identified by the numbers 1, 2, . . . , n . If member i is not invited, the party will gain an unhappiness value of a_ i . There are m pairs of friends among the n members. As per tradition, if both people from a friend pair are invited, they will share a cake at the party. The total number of cakes eaten will be equal to the number of pairs of friends such that both members have been invited. However, the club' s oven can only cook two cakes at a time. So, the club demands that the total number of cakes eaten is an even number. What is the minimum possible total unhappiness value of the party, respecting the constraint that the total number of cakes eaten is even?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264min( 10^ 5, n( n- 1) / 2) ) \u2014 the number of club members and pairs of friends. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 4 ) \u2014 the unhappiness value array. Each of the next m lines contains two integers x and y ( 1 \u2264 x, y \u2264 n , x = \u0338 y ) indicating that x and y are friends. Each unordered pair ( x, y) appears at most once in each test case. It is guaranteed that both the sum of n and the sum of m over all test cases do not exceed 10^ 5 .",
    "output": "For each test case, print a line containing a single integer \u2013 the minimum possible unhappiness value of a valid party.",
    "note": "In the first test case, all members can be invited. So the unhappiness value is 0 . In the second test case, the following options are possible: invite 1 and 2 ( 0 cakes eaten, unhappiness value equal to 3 ) ; invite 2 and 3 ( 0 cakes eaten, unhappiness value equal to 2 ) ; invite only 1 ( 0 cakes eaten, unhappiness value equal to 4 ) ; invite only 2 ( 0 cakes eaten, unhappiness value equal to 5 ) ; invite only 3 ( 0 cakes eaten, unhappiness value equal to 3 ) ; invite nobody ( 0 cakes eaten, unhappiness value equal to 6 ) . The minimum unhappiness value is achieved by inviting 2 and 3 . In the third test case, inviting members 3, 4, 5 generates a valid party with the minimum possible unhappiness value.",
    "topics": [
      "brute force",
      "graphs"
    ],
    "id": "1711B"
  },
  {
    "title": "Multiset of Strings",
    "url": "https://codeforces.com/problemset/problem/1709/F",
    "history": "You are given three integers n , k and f . Consider all binary strings ( i. e. all strings consisting of characters 0 and/ or 1 ) of length from 1 to n . For every such string s , you need to choose an integer c_ s from 0 to k . A multiset of binary strings of length exactly n is considered beautiful if for every binary string s with length from 1 to n , the number of strings in the multiset such that s is their prefix is not exceeding c_ s . For example, let n = 2 , c_ 0 = 3 , c_ 00 = 1 , c_ 01 = 2 , c_ 1 = 1 , c_ 10 = 2 , and c_ 11 = 3 . The multiset of strings { 11, 01, 00, 01} is beautiful, since: for the string 0 , there are 3 strings in the multiset such that 0 is their prefix, and 3 \u2264 c_ 0 ; for the string 00 , there is one string in the multiset such that 00 is its prefix, and 1 \u2264 c_ 00 ; for the string 01 , there are 2 strings in the multiset such that 01 is their prefix, and 2 \u2264 c_ 01 ; for the string 1 , there is one string in the multiset such that 1 is its prefix, and 1 \u2264 c_ 1 ; for the string 10 , there are 0 strings in the multiset such that 10 is their prefix, and 0 \u2264 c_ 10 ; for the string 11 , there is one string in the multiset such that 11 is its prefix, and 1 \u2264 c_ 11 . Now, for the problem itself. You have to calculate the number of ways to choose the integer c_ s for every binary string s of length from 1 to n in such a way that the maximum possible size of a beautiful multiset is exactly f .",
    "input": "The only line of input contains three integers n , k and f ( 1 \u2264 n \u2264 15 ; 1 \u2264 k, f \u2264 2 \u00b7 10^ 5 ) .",
    "output": "Print one integer \u2014 the number of ways to choose the integer c_ s for every binary string s of length from 1 to n in such a way that the maximum possible size of a beautiful multiset is exactly f . Since it can be huge, print it modulo 998244353 .",
    "note": "In the first example, the three ways to choose the integers c_ s are: c_ 0 = 0 , c_ 1 = 2 , then the maximum beautiful multiset is { 1, 1} ; c_ 0 = 1 , c_ 1 = 1 , then the maximum beautiful multiset is { 0, 1} ; c_ 0 = 2 , c_ 1 = 0 , then the maximum beautiful multiset is { 0, 0} .",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "fft",
      "flows",
      "graphs",
      "math",
      "meet-in-the-middle",
      "trees"
    ],
    "id": "1709F"
  },
  {
    "title": "DFS Trees",
    "url": "https://codeforces.com/problemset/problem/1707/C",
    "history": "You are given a connected undirected graph consisting of n vertices and m edges. The weight of the i - th edge is i . Here is a wrong algorithm of finding a minimum spanning tree ( MST) of a graph: vis : = an array of length ns : = a set of edgesfunction dfs( u) : vis[ u] : = true iterate through each edge ( u, v) in the order from smallest to largest edge weight if vis[ v] = false add edge ( u, v) into the set ( s) dfs( v) function findMST( u) : reset all elements of ( vis) to false reset the edge set ( s) to empty dfs( u) return the edge set ( s) Each of the calls findMST( 1) , findMST( 2) , . . . , findMST( n) gives you a spanning tree of the graph. Determine which of these trees are minimum spanning trees.",
    "input": "The first line of the input contains two integers n , m ( 2\u2264 n\u2264 10^ 5 , n- 1\u2264 m\u2264 2\u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges in the graph. Each of the following m lines contains two integers u_ i and v_ i ( 1\u2264 u_ i, v_ i\u2264 n , u_ i v_ i ) , describing an undirected edge ( u_ i, v_ i) in the graph. The i - th edge in the input has weight i . It is guaranteed that the graph is connected and there is at most one edge between any pair of vertices.",
    "output": "You need to output a binary string s , where s_ i= 1 if findMST( i) creates an MST, and s_ i = 0 otherwise.",
    "note": "Here is the graph given in the first example. There is only one minimum spanning tree in this graph. A minimum spanning tree is ( 1, 2) , ( 3, 5) , ( 1, 3) , ( 2, 4) which has weight 1+ 2+ 3+ 5= 11 . Here is a part of the process of calling findMST( 1) : reset the array vis and the edge set s; calling dfs( 1) ; vis[ 1] : = true; iterate through each edge ( 1, 2) , ( 1, 3) ; add edge ( 1, 2) into the edge set s, calling dfs( 2) : vis[ 2] : = true iterate through each edge ( 2, 1) , ( 2, 3) , ( 2, 4) ; because vis[ 1] = true, ignore the edge ( 2, 1) ; add edge ( 2, 3) into the edge set s, calling dfs( 3) : . . . In the end, it will select edges ( 1, 2) , ( 2, 3) , ( 3, 5) , ( 2, 4) with total weight 1+ 4+ 2+ 5= 12> 11 , so findMST( 1) does not find a minimum spanning tree. It can be shown that the other trees are all MSTs, so the answer is 01111.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1707C"
  },
  {
    "title": "Count Seconds",
    "url": "https://codeforces.com/problemset/problem/1704/E",
    "history": "Cirno has a DAG ( Directed Acyclic Graph) with n nodes and m edges. The graph has exactly one node that has no out edges. The i - th node has an integer a_ i on it. Every second the following happens: Let S be the set of nodes x that have a_ x > 0 . For all x \u2208 S , 1 is subtracted from a_ x , and then for each node y , such that there is an edge from x to y , 1 is added to a_ y . Find the first moment of time when all a_ i become 0 . Since the answer can be very large, output it modulo 998 244 353 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Description of test cases follows. The first line of each test case contains two integers n, m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the number of vertices and edges in the graph. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the integer on vertices. Each line of the following m lines contains two integers x, y ( 1 \u2264 x, y \u2264 n ) , represent a directed edge from x to y . It is guaranteed that the graph is a DAG with no multi- edges, and there is exactly one node that has no out edges. It is guaranteed that both sum of n and sum of m over all test cases are less than or equal to 10 000 .",
    "output": "For each test case, print an integer in a separate line \u2014 the first moment of time when all a_ i become 0 , modulo 998 244 353 .",
    "note": "In the first test case: At time 0 , the values of the nodes are [ 1, 1, 1] . At time 1 , the values of the nodes are [ 0, 1, 1] . At time 2 , the values of the nodes are [ 0, 0, 1] . At time 3 , the values of the nodes are [ 0, 0, 0] . So the answer is 3 . In the second test case: At time 0 , the values of the nodes are [ 1, 0, 0, 0, 0] . At time 1 , the values of the nodes are [ 0, 1, 0, 0, 1] . At time 2 , the values of the nodes are [ 0, 0, 1, 0, 0] . At time 3 , the values of the nodes are [ 0, 0, 0, 1, 0] . At time 4 , the values of the nodes are [ 0, 0, 0, 0, 1] . At time 5 , the values of the nodes are [ 0, 0, 0, 0, 0] . So the answer is 5 . In the third test case: The first moment of time when all a_ i become 0 is 6\u00b7 998244353 + 4 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dp",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "1704E"
  },
  {
    "title": "Split Into Two Sets",
    "url": "https://codeforces.com/problemset/problem/1702/E",
    "history": "Polycarp was recently given a set of n ( number n \u2014 even) dominoes. Each domino contains two integers from 1 to n . Can he divide all the dominoes into two sets so that all the numbers on the dominoes of each set are different? Each domino must go into exactly one of the two sets. For example, if he has 4 dominoes: { 1, 4} , { 1, 3} , { 3, 2} and { 4, 2} , then Polycarp will be able to divide them into two sets in the required way. The first set can include the first and third dominoes ( { 1, 4} and { 3, 2} ) , and the second set \u2014 the second and fourth ones ( { 1, 3} and { 4, 2} ) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The descriptions of the test cases follow. The first line of each test case contains a single even integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of dominoes. The next n lines contain pairs of numbers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) describing the numbers on the i - th domino. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print: YES, if it is possible to divide n dominoes into two sets so that the numbers on the dominoes of each set are different; NO if this is not possible. You can print YES and NO in any case ( for example, the strings yEs, yes, Yes and YES will be recognized as a positive answer) .",
    "note": "In the first test case, the dominoes can be divided as follows: First set of dominoes: [ { 1, 2} , { 4, 3} ] Second set of dominoes: [ { 2, 1} , { 3, 4} ] In other words, in the first set we take dominoes with numbers 1 and 2 , and in the second set we take dominoes with numbers 3 and 4 . In the second test case, there' s no way to divide dominoes into 2 sets, at least one of them will contain repeated number.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1702E"
  },
  {
    "title": "Equal Reversal",
    "url": "https://codeforces.com/problemset/problem/1698/F",
    "history": "There is an array a of length n . You may perform the following operation on it: Choose two indices l and r where 1 \u2264 l \u2264 r \u2264 n and a_ l = a_ r . Then, reverse the subsegment from the l - th to the r - th element, i. e. set [ a_ l, a_ l + 1, . . . , a_ r - 1, a_ r] to [ a_ r, a_ r- 1, . . . , a_ l+ 1, a_ l] . You are also given another array b of length n which is a permutation of a . Find a sequence of at most n^ 2 operations that transforms array a into b , or report that no such sequence exists.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 500 ) \u2014 the length of array a and b . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array a . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 elements of the array b . It is guaranteed that b is a permutation of a . It is guaranteed that the sum of n over all test cases does not exceed 500 .",
    "output": "For each test case, output \" NO\" ( without quotes) if it is impossible to turn a into b using at most n^ 2 operations. Otherwise, output \" YES\" ( without quotes) . Then output an integer k ( 0 \u2264 k \u2264 n^ 2 ) denoting the number of operations you will perform. Note that you don' t have to minimize the number of operations. Afterwards, output k lines. The i - th line should contain two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the left and right indices for the i - th operation. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) . If there are multiple possible sequences of operations, you may output any of them.",
    "note": "In the first test case, we can perform the following operations: [ 1, 2, 4, 3, 1, 2, 1, 1] [ 1, 2, 4, 3, 1, 1, 2, 1] [ 1, 1, 3, 4, 2, 1, 2, 1] . In the second test case, we can perform the following operations: [ 1, 2, 3, 1, 3, 2, 3] [ 1, 3, 2, 1, 3, 2, 3] [ 1, 3, 2, 3, 1, 2, 3] . It can be proven that it is impossible to turn a into b in the third and fourth test cases.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "1698F"
  },
  {
    "title": "Too Many Constraints",
    "url": "https://codeforces.com/problemset/problem/1697/F",
    "history": "You are asked to build an array a , consisting of n integers, each element should be from 1 to k . The array should be non- decreasing ( a_ i \u2264 a_ i+ 1 for all i from 1 to n- 1 ) . You are also given additional constraints on it. Each constraint is of one of three following types: 1 i x : a_ i should not be equal to x ; 2 i j x : a_ i + a_ j should be less than or equal to x ; 3 i j x : a_ i + a_ j should be greater than or equal to x . Build any non- decreasing array that satisfies all constraints or report that no such array exists.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains three integers n, m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 4 ; 0 \u2264 m \u2264 2 \u00b7 10^ 4 ; 2 \u2264 k \u2264 10 ) . The i - th of the next m lines contains a description of a constraint. Each constraint is of one of three following types: 1 i x ( 1 \u2264 i \u2264 n ; 1 \u2264 x \u2264 k ) : a_ i should not be equal to x ; 2 i j x ( 1 \u2264 i < j \u2264 n ; 2 \u2264 x \u2264 2 \u00b7 k ) : a_ i + a_ j should be less than or equal to x ; 3 i j x ( 1 \u2264 i < j \u2264 n ; 2 \u2264 x \u2264 2 \u00b7 k ) : a_ i + a_ j should be greater than or equal to x . The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 4 . The sum of m over all testcases doesn' t exceed 2 \u00b7 10^ 4 .",
    "output": "For each testcase, determine if there exists a non- decreasing array that satisfies all conditions. If there is no such array, then print - 1. Otherwise, print any valid array \u2014 n integers from 1 to k .",
    "note": "",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "1697F"
  },
  {
    "title": "Coloring",
    "url": "https://codeforces.com/problemset/problem/1697/E",
    "history": "You are given n points on the plane, the coordinates of the i - th point are ( x_ i, y_ i) . No two points have the same coordinates. The distance between points i and j is defined as d( i, j) = | x_ i - x_ j| + | y_ i - y_ j| . For each point, you have to choose a color, represented by an integer from 1 to n . For every ordered triple of different points ( a, b, c) , the following constraints should be met: if a , b and c have the same color, then d( a, b) = d( a, c) = d( b, c) ; if a and b have the same color, and the color of c is different from the color of a , then d( a, b) < d( a, c) and d( a, b) < d( b, c) . Calculate the number of different ways to choose the colors that meet these constraints.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of points. Then n lines follow. The i - th of them contains two integers x_ i and y_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 8 ) . No two points have the same coordinates ( i. e. if i j , then either x_ i x_ j or y_ i y_ j ) .",
    "output": "Print one integer \u2014 the number of ways to choose the colors for the points. Since it can be large, print it modulo 998244353 .",
    "note": "In the first test, the following ways to choose the colors are suitable: [ 1, 1, 1] ; [ 2, 2, 2] ; [ 3, 3, 3] ; [ 1, 2, 3] ; [ 1, 3, 2] ; [ 2, 1, 3] ; [ 2, 3, 1] ; [ 3, 1, 2] ; [ 3, 2, 1] .",
    "topics": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "dp",
      "geometry",
      "graphs",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1697E"
  },
  {
    "title": "Tree Recovery",
    "url": "https://codeforces.com/problemset/problem/1696/F",
    "history": "Fishingprince loves trees. A tree is a connected undirected graph without cycles. Fishingprince has a tree of n vertices. The vertices are numbered 1 through n . Let d( x, y) denote the shortest distance on the tree from vertex x to vertex y , assuming that the length of each edge is 1 . However, the tree was lost in an accident. Fortunately, Fishingprince still remembers some information about the tree. More specifically, for every triple of integers x, y, z ( 1\u2264 x< y\u2264 n , 1\u2264 z\u2264 n ) he remembers whether d( x, z) = d( y, z) or not. Help him recover the structure of the tree, or report that no tree satisfying the constraints exists.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 200 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 2\u2264 n\u2264 100 ) \u2014 the number of vertices in the tree. Then n- 1 lines follow. The i - th line of these n- 1 lines contains n- i strings of length n consisting of 0 and 1. If the k - th character in the j - th string of the i - th line is 0, it means that d( i, k) d( i+ j, k) ; if the k - th character in the j - th string of the i - th line is 1, it means that d( i, k) = d( i+ j, k) . It is guaranteed that in one input file, there are at most 2 test cases that have n> 50 ; there are at most 5 test cases that have n> 20 .",
    "output": "For each test case: if no answer exists, output No; otherwise, on the first line output Yes. Then output n- 1 lines. Each line should contain two integers x, y ( 1\u2264 x, y\u2264 n ) , denoting an edge between vertices x and y of the tree. If there are multiple solutions, print any. When printing Yes and No, you can print each letter in any case ( upper or lower) .",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1696F"
  },
  {
    "title": "Ambiguous Dominoes",
    "url": "https://codeforces.com/problemset/problem/1695/E",
    "history": "Polycarp and Monocarp are both solving the same puzzle with dominoes. They are given the same set of n dominoes, the i - th of which contains two numbers x_ i and y_ i . They are also both given the same m by k grid of values a_ ij such that m\u00b7 k = 2n . The puzzle asks them to place the n dominoes on the grid in such a way that none of them overlap, and the values on each domino match the a_ ij values that domino covers. Dominoes can be rotated arbitrarily before being placed on the grid, so the domino ( x_ i, y_ i) is equivalent to the domino ( y_ i, x_ i) . They have both solved the puzzle, and compared their answers, but noticed that not only did their solutions not match, but none of the n dominoes were in the same location in both solutions! Formally, if two squares were covered by the same domino in Polycarp' s solution, they were covered by different dominoes in Monocarp' s solution. The diagram below shows one potential a grid, along with the two players' solutions. Polycarp and Monocarp remember the set of dominoes they started with, but they have lost the grid a . Help them reconstruct one possible grid a , along with both of their solutions, or determine that no such grid exists.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3\u00b7 10^ 5 ) . The i - th of the next n lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 2n ) .",
    "output": "If there is no solution, print a single integer - 1 . Otherwise, print m and k , the height and width of the puzzle grid, on the first line of output. These should satisfy m\u00b7 k = 2n . The i - th of the next m lines should contain k integers, the j - th of which is a_ ij . The next m lines describe Polycarp' s solution. Print m lines of k characters each. For each square, if it is covered by the upper half of a domino in Polycarp' s solution, it should contain a \" U\" . Similarly, if it is covered by the bottom, left, or right half of a domino, it should contain \" D\" , \" L\" , or \" R\" , respectively. The next m lines should describe Monocarp' s solution, in the same format as Polycarp' s solution. If there are multiple answers, print any.",
    "note": "Extra blank lines are added to the output for clarity, but are not required. The third sample case corresponds to the image from the statement.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "1695E"
  },
  {
    "title": "Zero Path",
    "url": "https://codeforces.com/problemset/problem/1695/C",
    "history": "You are given a grid with n rows and m columns. We denote the square on the i - th ( 1\u2264 i\u2264 n ) row and j - th ( 1\u2264 j\u2264 m ) column by ( i, j) and the number there by a_ ij . All numbers are equal to 1 or to - 1 . You start from the square ( 1, 1) and can move one square down or one square to the right at a time. In the end, you want to end up at the square ( n, m) . Is it possible to move in such a way so that the sum of the values written in all the visited cells ( including a_ 11 and a_ nm ) is 0 ?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the size of the grid. Each of the following n lines contains m integers. The j - th integer on the i - th line is a_ ij ( a_ ij = 1 or - 1 ) \u2014 the element in the cell ( i, j) . It is guaranteed that the sum of n\u00b7 m over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print \" YES\" if there exists a path from the top left to the bottom right that adds up to 0 , and \" NO\" otherwise. You can output each letter in any case.",
    "note": "One possible path for the fourth test case is given in the picture in the statement.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1695C"
  },
  {
    "title": "Keshi in Search of AmShZ",
    "url": "https://codeforces.com/problemset/problem/1693/C",
    "history": "AmShZ has traveled to Italy from Iran for the Thom Yorke concert. There are n cities in Italy indexed from 1 to n and m directed roads indexed from 1 to m . Initially, Keshi is located in the city 1 and wants to go to AmShZ' s house in the city n . Since Keshi doesn' t know the map of Italy, AmShZ helps him to see each other as soon as possible. In the beginning of each day, AmShZ can send one of the following two messages to Keshi: AmShZ sends the index of one road to Keshi as a blocked road. Then Keshi will understand that he should never use that road and he will remain in his current city for the day. AmShZ tells Keshi to move. Then, Keshi will randomly choose one of the cities reachable from his current city and move there. ( city B is reachable from city A if there' s an out- going road from city A to city B which hasn' t become blocked yet) . If there are no such cities, Keshi will remain in his current city. Note that AmShZ always knows Keshi' s current location. AmShZ and Keshi want to find the smallest possible integer d for which they can make sure that they will see each other after at most d days. Help them find d .",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 2 \u00b7 10^ 5) \u2014 the number of cities and roads correspondingly. The i - th line of the following m lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i , u_ i \u2264 n, v_ i = \u0338 u_ i) , denoting a directed road going from city v_ i to city u_ i . It is guaranteed that there is at least one route from city 1 to city n . Note that there may be more than one road between a pair of cities in each direction.",
    "output": "Output the smallest possible integer d to make sure that AmShZ and Keshi will see each other after at most d days.",
    "note": "In the first sample, it' s enough for AmShZ to send the second type of message. In the second sample, on the first day, AmShZ blocks the first road. So the only reachable city from city 1 will be city 4 . Hence on the second day, AmShZ can tell Keshi to move and Keshi will arrive at AmShZ' s house. It' s also possible for AmShZ to tell Keshi to move for two days.",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1693C"
  },
  {
    "title": "Number of Groups",
    "url": "https://codeforces.com/problemset/problem/1691/E",
    "history": "You are given n colored segments on the number line. Each segment is either colored red or blue. The i - th segment can be represented by a tuple ( c_ i, l_ i, r_ i) . The segment contains all the points in the range [ l_ i, r_ i] , inclusive, and its color denoted by c_ i : if c_ i = 0 , it is a red segment; if c_ i = 1 , it is a blue segment. We say that two segments of different colors are connected, if they share at least one common point. Two segments belong to the same group, if they are either connected directly, or through a sequence of directly connected segments. Find the number of groups of segments.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of segments. Each of the next n lines contains three integers c_ i, l_ i, r_ i ( 0 \u2264 c_ i \u2264 1, 0 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) , describing the i - th segment. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer k , the number of groups of segments.",
    "note": "In the first example there are 5 segments. The segments 1 and 2 are connected, because they are of different colors and share a point. Also, the segments 2 and 3 are connected, and so are segments 4 and 5 . Thus, there are two groups: one containing segments { 1, 2, 3} , and the other one containing segments { 4, 5} .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1691E"
  },
  {
    "title": "Shifting String",
    "url": "https://codeforces.com/problemset/problem/1690/F",
    "history": "Polycarp found the string s and the permutation p . Their lengths turned out to be the same and equal to n . A permutation of n elements \u2014 is an array of length n , in which every integer from 1 to n occurs exactly once. For example, [ 1, 2, 3] and [ 4, 3, 5, 1, 2] are permutations, but [ 1, 2, 4] , [ 4, 3, 2, 1, 2] and [ 0, 1, 2] are not. In one operation he can multiply s by p , so he replaces s with string new , in which for any i from 1 to n it is true that new_ i = s_ p_ i . For example, with s= wmbe and p = [ 3, 1, 4, 2] , after operation the string will turn to s= s_ 3 s_ 1 s_ 4 s_ 2= bwem . Polycarp wondered after how many operations the string would become equal to its initial value for the first time. Since it may take too long, he asks for your help in this matter. It can be proved that the required number of operations always exists. It can be very large, so use a 64- bit integer type.",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases in input. The first line of each case contains single integer n ( 1 \u2264 n \u2264 200 ) \u2014 the length of string and permutation. The second line of each case contains a string s of length n , containing lowercase Latin letters. The third line of each case contains n integers \u2014 permutation p ( 1 \u2264 p_ i \u2264 n ) , all p_ i are different.",
    "output": "Output t lines, each of which contains the answer to the corresponding test case of input. As an answer output single integer \u2014 the minimum number of operations, after which the string s will become the same as it was before operations.",
    "note": "In the first sample operation doesn' t change the string, so it will become the same as it was after 1 operations. In the second sample the string will change as follows: s = babaa s = abaab s = baaba s = abbaa s = baaab s = ababa",
    "topics": [
      "graphs",
      "math",
      "number theory",
      "strings"
    ],
    "id": "1690F"
  },
  {
    "title": "ANDfinity",
    "url": "https://codeforces.com/problemset/problem/1689/E",
    "history": "Bit Lightyear, to the ANDfinity and beyond! After graduating from computer sciences, Vlad has been awarded an array a_ 1, a_ 2, . . . , a_ n of n non- negative integers. As it is natural, he wanted to construct a graph consisting of n vertices, numbered 1, 2, . . . , n . He decided to add an edge between i and j if and only if a_ i & a_ j > 0 , where & denotes the bitwise AND operation. Vlad also wants the graph to be connected, which might not be the case initially. In order to satisfy that, he can do the following two types of operations on the array: Choose some element a_ i and increment it by 1 . Choose some element a_ i and decrement it by 1 ( possible only if a_ i > 0 ) . It can be proven that there exists a finite sequence of operations such that the graph will be connected. So, can you please help Vlad find the minimum possible number of operations to do that and also provide the way how to do that?",
    "input": "There are several test cases in the input data. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. This is followed by the test cases description. The first line of each test case contains an integer n ( 2\u2264 n \u2264 2000 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i < 2^ 30 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2000 .",
    "output": "For each test case, print a single integer m in the first line \u2014 the minimum number of operations. In the second line print the array after a valid sequence of operations that have been done such that the graph from the task becomes connected. If there are multiple solutions, output any.",
    "note": "In the first test case, the graph is already connected. In the second test case, we can increment 0 twice and end up with the array [ 2, 2] . Since 2 & 2 = 2 > 0 , the graph is connected. It can be shown that one operation is not enough. In the third test case, we can decrement 12 once and we end up with an array [ 3, 11] . 3 & 11 = 3 > 0 hence the graph is connected. One operation has to be done since the graph is not connected at the beginning.",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1689E"
  },
  {
    "title": "Railway System",
    "url": "https://codeforces.com/problemset/problem/1687/B",
    "history": "As for the technology in the outside world, it is really too advanced for Gensokyo to even look up to. \u2014Yasaka Kanako, Symposium of Post- mysticismThis is an interactive problem. Under the direct supervision of Kanako and the Moriya Shrine, the railway system of Gensokyo is finally finished. GSKR ( Gensokyo Railways) consists of n stations with m bidirectional tracks connecting them. The i - th track has length l_ i ( 1\u2264 l_ i\u2264 10^ 6 ) . Due to budget limits, the railway system may not be connected, though there may be more than one track between two stations. The value of a railway system is defined as the total length of its all tracks. The maximum ( or minimum) capacity of a railway system is defined as the maximum ( or minimum) value among all of the currently functional system' s full spanning forest. In brief, full spanning forest of a graph is a spanning forest with the same connectivity as the given graph. Kanako has a simulator only able to process no more than 2m queries. The input of the simulator is a string s of length m , consisting of characters 0 and/ or 1. The simulator will assume the i - th track functional if s_ i= 1. The device will then tell Kanako the maximum capacity of the system in the simulated state. Kanako wants to know the the minimum capacity of the system with all tracks functional with the help of the simulator. The structure of the railway system is fixed in advance. In other words, the interactor is not adaptive. InteractionBegin the interaction by reading n, m . To make a query, print \" ? s \" ( without quotes, s is a string of length m , consisting of characters 0 and/ or 1) . Then you should read our response from standard input \u2014 the maximum capacity of the system in the simulated state. If your program has made an invalid query or has run out of tries, the interactor will terminate immediately and your program will get a verdict Wrong answer. To give the final answer, print \" ! L \" ( without the quotes, L is the minimum capacity of the system with all tracks functional) . Note that giving this answer is not counted towards the limit of 2m queries. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. HacksThe first line of input must contain two integers n, m ( 2 \u2264 n \u2264 200 , 1\u2264 m \u2264 500 ) \u2014 the number of stations and tracks. The next m lines of input must contain exactly 3 space- separated integers u_ i , v_ i , l_ i ( 1\u2264 u_ i, v_ i \u2264 n , u_ i v_ i , 1 \u2264 l_ i \u2264 10^ 6 ) \u2014 the endpoints and the length of the i - th track.",
    "input": "The first and only line of input contains two integers n, m ( 2 \u2264 n \u2264 200 , 1\u2264 m \u2264 500 ) \u2014 the number of stations and tracks.",
    "output": "",
    "note": "Here is the graph of the example, satisfying l_ i= i .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ],
    "id": "1687B"
  },
  {
    "title": "MCMF?",
    "url": "https://codeforces.com/problemset/problem/1682/F",
    "history": "You are given two integer arrays a and b ( b_ i = \u0338 0 and | b_ i| \u2264 10^ 9 ) . Array a is sorted in non- decreasing order. The cost of a subarray a[ l: r] is defined as follows: If \u2211_ j = l^ r b_ j = \u0338 0 , then the cost is not defined. Otherwise: Construct a bipartite flow graph with r- l+ 1 vertices, labeled from l to r , with all vertices having b_ i 0 on the left and those with b_ i 0 on right. For each i, j such that l \u2264 i, j \u2264 r , b_ i< 0 and b_ j> 0 , draw an edge from i to j with infinite capacity and cost of unit flow as | a_ i- a_ j| . Add two more vertices: source S and sink T . For each i such that l \u2264 i \u2264 r and b_ i< 0 , add an edge from S to i with cost 0 and capacity | b_ i| . For each i such that l \u2264 i \u2264 r and b_ i> 0 , add an edge from i to T with cost 0 and capacity | b_ i| . The cost of the subarray is then defined as the minimum cost of maximum flow from S to T . You are given q queries in the form of two integers l and r . You have to compute the cost of subarray a[ l: r] for each query, modulo 10^ 9 + 7 . If you don' t know what the minimum cost of maximum flow means, read here.",
    "input": "The first line of input contains two integers n and q ( 2 \u2264 n \u2264 2\u00b7 10^ 5, 1 \u2264 q \u2264 2\u00b710^ 5) \u2014 length of arrays a , b and the number of queries. The next line contains n integers a_ 1, a_ 2 . . . a_ n ( 0 \u2264 a_ 1 \u2264 a_ 2 . . . \u2264 a_ n \u2264 10^ 9) \u2014 the array a . It is guaranteed that a is sorted in non- decreasing order. The next line contains n integers b_ 1, b_ 2 . . . b_ n ( - 10^ 9\u2264 b_ i \u2264 10^ 9, b_ i = \u0338 0) \u2014 the array b . The i - th of the next q lines contains two integers l_ i, r_ i ( 1\u2264 l_ i \u2264 r_ i \u2264 n) . It is guaranteed that \u2211_ j = l_ i^ r_ i b_ j = 0 .",
    "output": "For each query l_ i , r_ i \u2014 print the cost of subarray a[ l_ i: r_ i] modulo 10^ 9 + 7 .",
    "note": "In the first query, the maximum possible flow is 1 i. e one unit from source to 2 , then one unit from 2 to 3 , then one unit from 3 to sink. The cost of the flow is 0 \u00b7 1 + | 2 - 4| \u00b7 1 + 0 \u00b7 1 = 2 . In the second query, the maximum possible flow is again 1 i. e from source to 7 , 7 to 6 , and 6 to sink with a cost of 0 \u00b7 | 10 - 10| \u00b7 1 + 0 \u00b7 1 = 0 . In the third query, the flow network is shown on the left with capacity written over the edge and the cost written in bracket. The image on the right shows the flow through each edge in an optimal configuration. Maximum flow is 3 with a cost of 0 \u00b7 3 + 1 \u00b7 1 + 4 \u00b7 2 + 0 \u00b7 1 + 0 \u00b7 2 = 9 . In the fourth query, the flow network looks as \u2013 The minimum cost maximum flow is achieved in the configuration \u2013 The maximum flow in the above network is 4 and the minimum cost of such flow is 15.",
    "topics": [
      "data structures",
      "flows",
      "graphs",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1682F"
  },
  {
    "title": "Unordered Swaps",
    "url": "https://codeforces.com/problemset/problem/1682/E",
    "history": "Alice had a permutation p of numbers from 1 to n . Alice can swap a pair ( x, y) which means swapping elements at positions x and y in p ( i. e. swap p_ x and p_ y ) . Alice recently learned her first sorting algorithm, so she decided to sort her permutation in the minimum number of swaps possible. She wrote down all the swaps in the order in which she performed them to sort the permutation on a piece of paper. For example, [ ( 2, 3) , ( 1, 3) ] is a valid swap sequence by Alice for permutation p = [ 3, 1, 2] whereas [ ( 1, 3) , ( 2, 3) ] is not because it doesn' t sort the permutation. Note that we cannot sort the permutation in less than 2 swaps. [ ( 1, 2) , ( 2, 3) , ( 2, 4) , ( 2, 3) ] cannot be a sequence of swaps by Alice for p = [ 2, 1, 4, 3] even if it sorts the permutation because p can be sorted in 2 swaps, for example using the sequence [ ( 4, 3) , ( 1, 2) ] . Unfortunately, Bob shuffled the sequence of swaps written by Alice. You are given Alice' s permutation p and the swaps performed by Alice in arbitrary order. Can you restore the correct sequence of swaps that sorts the permutation p ? Since Alice wrote correct swaps before Bob shuffled them up, it is guaranteed that there exists some order of swaps that sorts the permutation.",
    "input": "The first line contains 2 integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 n - 1) \u2014 the size of permutation and the minimum number of swaps required to sort the permutation. The next line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct) \u2014 the elements of p . It is guaranteed that p forms a permutation. Then m lines follow. The i - th of the next m lines contains two integers x_ i and y_ i \u2014 the i - th swap ( x_ i, y_ i) . It is guaranteed that it is possible to sort p with these m swaps and that there is no way to sort p with less than m swaps.",
    "output": "Print a permutation of m integers \u2014 a valid order of swaps written by Alice that sorts the permutation p . See sample explanation for better understanding. In case of multiple possible answers, output any.",
    "note": "In the first example, p = [ 2, 3, 4, 1] , m = 3 and given swaps are [ ( 1, 4) , ( 2, 1) , ( 1, 3) ] . There is only one correct order of swaps i. e [ 2, 3, 1] . First we perform the swap 2 from the input i. e ( 2, 1) , p becomes [ 3, 2, 4, 1] . Then we perform the swap 3 from the input i. e ( 1, 3) , p becomes [ 4, 2, 3, 1] . Finally we perform the swap 1 from the input i. e ( 1, 4) and p becomes [ 1, 2, 3, 4] which is sorted. In the second example, p = [ 6, 5, 1, 3, 2, 4] , m = 4 and the given swaps are [ ( 3, 1) , ( 2, 5) , ( 6, 3) , ( 6, 4) ] . One possible correct order of swaps is [ 4, 2, 1, 3] . Perform the swap 4 from the input i. e ( 6, 4) , p becomes [ 6, 5, 1, 4, 2, 3] . Perform the swap 2 from the input i. e ( 2, 5) , p becomes [ 6, 2, 1, 4, 5, 3] . Perform the swap 1 from the input i. e ( 3, 1) , p becomes [ 1, 2, 6, 4, 5, 3] . Perform the swap 3 from the input i. e ( 6, 3) and p becomes [ 1, 2, 3, 4, 5, 6] which is sorted. There can be other possible answers such as [ 1, 2, 4, 3] .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1682E"
  },
  {
    "title": "Lenient Vertex Cover",
    "url": "https://codeforces.com/problemset/problem/1680/F",
    "history": "You are given a simple connected undirected graph, consisting of n vertices and m edges. The vertices are numbered from 1 to n . A vertex cover of a graph is a set of vertices such that each edge has at least one of its endpoints in the set. Let' s call a lenient vertex cover such a vertex cover that at most one edge in it has both endpoints in the set. Find a lenient vertex cover of a graph or report that there is none. If there are multiple answers, then print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains two integers n and m ( 2 \u2264 n \u2264 10^ 6 ; n - 1 \u2264 m \u2264min( 10^ 6, n \u00b7 ( n - 1) / 2) ) \u2014 the number of vertices and the number of edges of the graph. Each of the next m lines contains two integers v and u ( 1 \u2264 v, u \u2264 n ; v = \u0338 u ) \u2014 the descriptions of the edges. For each testcase, the graph is connected and doesn' t have multiple edges. The sum of n over all testcases doesn' t exceed 10^ 6 . The sum of m over all testcases doesn' t exceed 10^ 6 .",
    "output": "For each testcase, the first line should contain YES if a lenient vertex cover exists, and NO otherwise. If it exists, the second line should contain a binary string s of length n , where s_ i = 1 means that vertex i is in the vertex cover, and s_ i = 0 means that vertex i isn' t. If there are multiple answers, then print any of them.",
    "note": "Here are the graphs from the first example. The vertices in the lenient vertex covers are marked red.",
    "topics": [
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1680F"
  },
  {
    "title": "Toss a Coin to Your Graph...",
    "url": "https://codeforces.com/problemset/problem/1679/D",
    "history": "One day Masha was walking in the park and found a graph under a tree. . . Surprised? Did you think that this problem would have some logical and reasoned story? No way! So, the problem. . . Masha has an oriented graph which i - th vertex contains some positive integer a_ i . Initially Masha can put a coin at some vertex. In one operation she can move a coin placed in some vertex u to any other vertex v such that there is an oriented edge u \u2192 v in the graph. Each time when the coin is placed in some vertex i , Masha write down an integer a_ i in her notebook ( in particular, when Masha initially puts a coin at some vertex, she writes an integer written at this vertex in her notebook) . Masha wants to make exactly k - 1 operations in such way that the maximum number written in her notebook is as small as possible.",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 10^ 18 ) \u2014 the number of vertices and edges in the graph, and the number of operation that Masha should make. The second line contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the numbers written in graph vertices. Each of the following m lines contains two integers u and v ( 1 \u2264 u v \u2264 n ) \u2014 it means that there is an edge u \u2192 v in the graph. It' s guaranteed that graph doesn' t contain loops and multi- edges.",
    "output": "Print one integer \u2014 the minimum value of the maximum number that Masha wrote in her notebook during optimal coin movements. If Masha won' t be able to perform k - 1 operations, print - 1 .",
    "note": "Graph described in the first and the second examples is illustrated below. In the first example Masha can initially put a coin at vertex 1 . After that she can perform three operations: 1 \u2192 3 , 3 \u2192 4 and 4 \u2192 5 . Integers 1, 2, 3 and 4 will be written in the notepad. In the second example Masha can initially put a coin at vertex 2 . After that she can perform 99 operations: 2 \u2192 5 , 5 \u2192 6 , 6 \u2192 2 , 2 \u2192 5 , and so on. Integers 10, 4, 5, 10, 4, 5, . . . , 10, 4, 5, 10 will be written in the notepad. In the third example Masha won' t be able to perform 4 operations.",
    "topics": [
      "binary search",
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "1679D"
  },
  {
    "title": "Tokitsukaze and Two Colorful Tapes",
    "url": "https://codeforces.com/problemset/problem/1677/C",
    "history": "Tokitsukaze has two colorful tapes. There are n distinct colors, numbered 1 through n , and each color appears exactly once on each of the two tapes. Denote the color of the i - th position of the first tape as ca_ i , and the color of the i - th position of the second tape as cb_ i . Now Tokitsukaze wants to select each color an integer value from 1 to n , distinct for all the colors. After that she will put down the color values in each colored position on the tapes. Denote the number of the i - th position of the first tape as numa_ i , and the number of the i - th position of the second tape as numb_ i . For example, for the above picture, assuming that the color red has value x ( 1 \u2264 x \u2264 n ) , it appears at the 1 - st position of the first tape and the 3 - rd position of the second tape, so numa_ 1= numb_ 3= x . Note that each color i from 1 to n should have a distinct value, and the same color which appears in both tapes has the same value. After labeling each color, the beauty of the two tapes is calculated as \u2211_ i= 1^ n| numa_ i- numb_ i| . Please help Tokitsukaze to find the highest possible beauty.",
    "input": "The first contains a single positive integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. For each test case, the first line contains a single integer n ( 1\u2264 n \u2264 10^ 5 ) \u2014 the number of colors. The second line contains n integers ca_ 1, ca_ 2, . . . , ca_ n ( 1 \u2264 ca_ i \u2264 n ) \u2014 the color of each position of the first tape. It is guaranteed that ca is a permutation. The third line contains n integers cb_ 1, cb_ 2, . . . , cb_ n ( 1 \u2264 cb_ i \u2264 n ) \u2014 the color of each position of the second tape. It is guaranteed that cb is a permutation. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the highest possible beauty.",
    "note": "An optimal solution for the first test case is shown in the following figure: The beauty is | 4- 3 | + | 3- 5 | + | 2- 4 | + | 5- 2 | + | 1- 6 | + | 6- 1 | = 18 . An optimal solution for the second test case is shown in the following figure: The beauty is | 2- 2 | + | 1- 6 | + | 3- 3 | + | 6- 1 | + | 4- 4 | + | 5- 5 | = 10 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1677C"
  },
  {
    "title": "White-Black Balanced Subtrees",
    "url": "https://codeforces.com/problemset/problem/1676/G",
    "history": "You are given a rooted tree consisting of n vertices numbered from 1 to n . The root is vertex 1 . There is also a string s denoting the color of each vertex: if s_ i = , then vertex i is black, and if s_ i = , then vertex i is white. A subtree of the tree is called balanced if the number of white vertices equals the number of black vertices. Count the number of balanced subtrees. A tree is a connected undirected graph without cycles. A rooted tree is a tree with a selected vertex, which is called the root. In this problem, all trees have root 1 . The tree is specified by an array of parents a_ 2, . . . , a_ n containing n- 1 numbers: a_ i is the parent of the vertex with the number i for all i = 2, . . . , n . The parent of a vertex u is a vertex that is the next vertex on a simple path from u to the root. The subtree of a vertex u is the set of all vertices that pass through u on a simple path to the root. For example, in the picture below, 7 is in the subtree of 3 because the simple path 7 \u2192 5 \u2192 3 \u2192 1 passes through 3 . Note that a vertex is included in its subtree, and the subtree of the root is the entire tree. The picture shows the tree for n= 7 , a= [ 1, 1, 2, 3, 3, 5] , and s= . The subtree at the vertex 3 is balanced.",
    "input": "The first line of input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 4000 ) \u2014 the number of vertices in the tree. The second line of each test case contains n- 1 integers a_ 2, . . . , a_ n ( 1 \u2264 a_ i < i ) \u2014 the parents of the vertices 2, . . . , n . The third line of each test case contains a string s of length n consisting of the characters and \u2014 the coloring of the tree. It is guaranteed that the sum of the values n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of balanced subtrees.",
    "note": "The first test case is pictured in the statement. Only the subtrees at vertices 2 and 3 are balanced. In the second test case, only the subtree at vertex 1 is balanced. In the third test case, only the subtrees at vertices 1 , 3 , 5 , and 7 are balanced.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1676G"
  },
  {
    "title": "Vertical Paths",
    "url": "https://codeforces.com/problemset/problem/1675/D",
    "history": "You are given a rooted tree consisting of n vertices. Vertices are numbered from 1 to n . Any vertex can be the root of a tree. A tree is a connected undirected graph without cycles. A rooted tree is a tree with a selected vertex, which is called the root. The tree is specified by an array of parents p containing n numbers: p_ i is a parent of the vertex with the index i . The parent of a vertex u is a vertex that is the next vertex on the shortest path from u to the root. For example, on the simple path from 5 to 3 ( the root) , the next vertex would be 1 , so the parent of 5 is 1 . The root has no parent, so for it, the value of p_ i is i ( the root is the only vertex for which p_ i= i ) . Find such a set of paths that: each vertex belongs to exactly one path, each path can contain one or more vertices; in each path each next vertex \u2014 is a son of the current vertex ( that is, paths always lead down \u2014 from parent to son) ; number of paths is minimal. For example, if n= 5 and p= [ 3, 1, 3, 3, 1] , then the tree can be divided into three paths: 3 \u2192 1 \u2192 5 ( path of 3 vertices) , 4 ( path of 1 vertices) . 2 ( path of 1 vertices) . Example of splitting a root tree into three paths for n= 5 , the root of the tree \u2014 node 3 .",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Each test case consists of two lines. The first of them contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . It is the number of vertices in the tree. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that the p array encodes some rooted tree. It is guaranteed that the sum of the values n over all test cases in the test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case on the first line, output an integer m \u2014 the minimum number of non- intersecting leading down paths that can cover all vertices of the tree. Then print m pairs of lines containing path descriptions. In the first of them print the length of the path, in the second \u2014 the sequence of vertices specifying that path in the order from top to bottom. You can output the paths in any order. If there are several answers, output any of them.",
    "note": "",
    "topics": [
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "1675D"
  },
  {
    "title": "Remove Directed Edges",
    "url": "https://codeforces.com/problemset/problem/1674/G",
    "history": "You are given a directed acyclic graph, consisting of n vertices and m edges. The vertices are numbered from 1 to n . There are no multiple edges and self- loops. Let in_ v be the number of incoming edges ( indegree) and out_ v be the number of outgoing edges ( outdegree) of vertex v . You are asked to remove some edges from the graph. Let the new degrees be in' _ v and out' _ v . You are only allowed to remove the edges if the following conditions hold for every vertex v : in' _ v < in_ v or in' _ v = in_ v = 0 ; out' _ v < out_ v or out' _ v = out_ v = 0 . Let' s call a set of vertices S cute if for each pair of vertices v and u ( v = \u0338 u ) such that v \u2208 S and u \u2208 S , there exists a path either from v to u or from u to v over the non- removed edges. What is the maximum possible size of a cute set S after you remove some edges from the graph and both indegrees and outdegrees of all vertices either decrease or remain equal to 0 ?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges of the graph. Each of the next m lines contains two integers v and u ( 1 \u2264 v, u \u2264 n ; v = \u0338 u ) \u2014 the description of an edge. The given edges form a valid directed acyclic graph. There are no multiple edges.",
    "output": "Print a single integer \u2014 the maximum possible size of a cute set S after you remove some edges from the graph and both indegrees and outdegrees of all vertices either decrease or remain equal to 0 .",
    "note": "In the first example, you can remove edges ( 1, 2) and ( 2, 3) . in = [ 0, 1, 2] , out = [ 2, 1, 0] . in' = [ 0, 0, 1] , out' = [ 1, 0, 0] . You can see that for all v the conditions hold. The maximum cute set S is formed by vertices 1 and 3 . They are still connected directly by an edge, so there is a path between them. In the second example, there are no edges. Since all in_ v and out_ v are equal to 0 , leaving a graph with zero edges is allowed. There are 5 cute sets, each contains a single vertex. Thus, the maximum size is 1 . In the third example, you can remove edges ( 7, 1) , ( 2, 4) , ( 1, 3) and ( 6, 2) . The maximum cute set will be S = { 7, 3, 2} . You can remove edge ( 7, 3) as well, and the answer won' t change. Here is the picture of the graph from the third example:",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "1674G"
  },
  {
    "title": "Cross Xor",
    "url": "https://codeforces.com/problemset/problem/1672/G",
    "history": "There is a grid with r rows and c columns, where the square on the i - th row and j - th column has an integer a_ i, j written on it. Initially, all elements are set to 0 . We are allowed to do the following operation: Choose indices 1 \u2264 i \u2264 r and 1 \u2264 j \u2264 c , then replace all values on the same row or column as ( i, j) with the value xor 1 . In other words, for all a_ x, y where x= i or y= j or both, replace a_ x, y with a_ x, y xor 1 . You want to form grid b by doing the above operations a finite number of times. However, some elements of b are missing and are replaced with ' ? ' instead. Let k be the number of ' ? ' characters. Among all the 2^ k ways of filling up the grid b by replacing each ' ? ' with ' 0' or ' 1' , count the number of grids, that can be formed by doing the above operation a finite number of times, starting from the grid filled with 0 . As this number can be large, output it modulo 998244353 .",
    "input": "The first line contains two integers r and c ( 1 \u2264 r, c \u2264 2000 ) \u2014 the number of rows and columns of the grid respectively. The i - th of the next r lines contain c characters b_ i, 1, b_ i, 2, . . . , b_ i, c ( b_ i, j\u2208{ 0, 1, ? } ) .",
    "output": "Print a single integer representing the number of ways to fill up grid b modulo 998244353 .",
    "note": "In the first test case, the only way to fill in the s is to fill it in as such: 010111010 This can be accomplished by doing a single operation by choosing ( i, j) = ( 2, 2) . In the second test case, it can be shown that there is no sequence of operations that can produce that grid.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math",
      "matrices"
    ],
    "id": "1672G"
  },
  {
    "title": "Checker for Array Shuffling",
    "url": "https://codeforces.com/problemset/problem/1672/F2",
    "history": "oolimry has an array a of length n which he really likes. Today, you have changed his array to b , a permutation of a , to make him sad. Because oolimry is only a duck, he can only perform the following operation to restore his array: Choose two integers i, j such that 1 \u2264 i, j \u2264 n . Swap b_ i and b_ j . The sadness of the array b is the minimum number of operations needed to transform b into a . Given the arrays a and b , where b is a permutation of a , determine if b has the maximum sadness over all permutations of a .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array a . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 the elements of the array b . It is guaranteed that b is a permutation of a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print \" AC\" ( without quotes) if b has the maximum sadness over all permutations of a , and \" WA\" ( without quotes) otherwise.",
    "note": "In the first test case, the array [ 1, 2] has sadness 1 . We can transform [ 1, 2] into [ 2, 1] using one operation with ( i, j) = ( 1, 2) . In the second test case, the array [ 3, 3, 2, 1] has sadness 2 . We can transform [ 3, 3, 2, 1] into [ 1, 2, 3, 3] with two operations with ( i, j) = ( 1, 4) and ( i, j) = ( 2, 3) respectively. In the third test case, the array [ 2, 1] has sadness 0 . In the fourth test case, the array [ 3, 2, 3, 1] has sadness 1 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "1672F2"
  },
  {
    "title": "Array Shuffling",
    "url": "https://codeforces.com/problemset/problem/1672/F1",
    "history": "oolimry has an array a of length n which he really likes. Today, you have changed his array to b , a permutation of a , to make him sad. Because oolimry is only a duck, he can only perform the following operation to restore his array: Choose two integers i, j such that 1 \u2264 i, j \u2264 n . Swap b_ i and b_ j . The sadness of the array b is the minimum number of operations needed to transform b into a . Given the array a , find any array b which is a permutation of a that has the maximum sadness over all permutations of the array a .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print n integers b_ 1, b_ 2, . . . , b_ n \u2014 describing the array b . If there are multiple answers, you may print any.",
    "note": "In the first test case, the array [ 1, 2] has sadness 1 . We can transform [ 1, 2] into [ 2, 1] using one operation with ( i, j) = ( 1, 2) . In the second test case, the array [ 3, 3, 2, 1] has sadness 2 . We can transform [ 3, 3, 2, 1] into [ 1, 2, 3, 3] with two operations with ( i, j) = ( 1, 4) and ( i, j) = ( 2, 3) respectively.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "1672F1"
  },
  {
    "title": "Where is the Pizza?",
    "url": "https://codeforces.com/problemset/problem/1670/C",
    "history": "While searching for the pizza, baby Hosssam came across two permutations a and b of length n . Recall that a permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . Baby Hosssam forgot about the pizza and started playing around with the two permutations. While he was playing with them, some elements of the first permutation got mixed up with some elements of the second permutation, and to his surprise those elements also formed a permutation of size n . Specifically, he mixed up the permutations to form a new array c in the following way. For each i ( 1\u2264 i\u2264 n ) , he either made c_ i= a_ i or c_ i= b_ i . The array c is a permutation. You know permutations a , b , and values at some positions in c . Please count the number different permutations c that are consistent with the described process and the given values. Since the answer can be large, print it modulo 10^ 9+ 7 . It is guaranteed that there exists at least one permutation c that satisfies all the requirements.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 10^ 5 ) \u2014 the length of the permutations. The next line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 n ) \u2014 the first permutation. The next line contains n distinct integers b_ 1, b_ 2, . . . , b_ n ( 1\u2264 b_ i\u2264 n ) \u2014 the second permutation. The next line contains n distinct integers d_ 1, d_ 2, . . . , d_ n ( d_ i is either 0 , a_ i , or b_ i ) \u2014 the description of the known values of c . If d_ i= 0 , then there are no requirements on the value of c_ i . Otherwise, it is required that c_ i= d_ i . It is guaranteed that there exists at least one permutation c that satisfies all the requirements. It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of possible permutations c , modulo 10^ 9+ 7 .",
    "note": "In the first test case, there are 4 distinct permutation that can be made using the process: [ 2, 3, 1, 4, 5, 6, 7] , [ 2, 3, 1, 7, 6, 5, 4] , [ 2, 3, 1, 4, 6, 5, 7] , [ 2, 3, 1, 7, 5, 6, 4] . In the second test case, there is only one distinct permutation that can be made using the process: [ 1] . In the third test case, there are 2 distinct permutation that can be made using the process: [ 6, 5, 2, 1, 4, 3] , [ 6, 5, 3, 1, 4, 2] . In the fourth test case, there are 2 distinct permutation that can be made using the process: [ 1, 2, 8, 7, 4, 3, 6, 5] , [ 1, 6, 4, 7, 2, 3, 8, 5] . In the fifth test case, there is only one distinct permutation that can be made using the process: [ 1, 9, 2, 3, 4, 10, 8, 6, 7, 5] .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "1670C"
  },
  {
    "title": "Labyrinth",
    "url": "https://codeforces.com/problemset/problem/1666/L",
    "history": "Leslie and Leon entered a labyrinth. The labyrinth consists of n halls and m one- way passages between them. The halls are numbered from 1 to n . Leslie and Leon start their journey in the hall s . Right away, they quarrel and decide to explore the labyrinth separately. However, they want to meet again at the end of their journey. To help Leslie and Leon, your task is to find two different paths from the given hall s to some other hall t , such that these two paths do not share halls other than the staring hall s and the ending hall t . The hall t has not been determined yet, so you can choose any of the labyrinth' s halls as t except s . Leslie' s and Leon' s paths do not have to be the shortest ones, but their paths must be simple, visiting any hall at most once. Also, they cannot visit any common halls except s and t during their journey, even at different times.",
    "input": "The first line contains three integers n , m , and s , where n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) is the number of vertices, m ( 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) is the number of edges in the labyrinth, and s ( 1 \u2264 s \u2264 n ) is the starting hall. Then m lines with descriptions of passages follow. Each description contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i = \u0338 v_ i ) , denoting a passage from the hall u_ i to the hall v_ i . The passages are one- way. Each tuple ( u_ i, v_ i) is present in the input at most once. The labyrinth can contain cycles and is not necessarily connected in any way.",
    "output": "If it is possible to find the desired two paths, output \" Possible\" , otherwise output \" Impossible\" . If the answer exists, output two path descriptions. Each description occupies two lines. The first line of the description contains an integer h ( 2 \u2264 h \u2264 n ) \u2014 the number of halls in a path, and the second line contains distinct integers w_ 1, w_ 2, . . . , w_ h ( w_ 1 = s ; 1 \u2264 w_ j \u2264 n ; w_ h = t ) \u2014 the halls in the path in the order of passing. Both paths must end at the same vertex t . The paths must be different, and all intermediate halls in these paths must be distinct.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "1666L"
  },
  {
    "title": "Circular Maze",
    "url": "https://codeforces.com/problemset/problem/1662/O",
    "history": "You are given a circular maze such as the ones shown in the figures. Determine if it can be solved, i. e. , if there is a path which goes from the center to the outside of the maze which does not touch any wall. The maze is described by n walls. Each wall can be either circular or straight. Circular walls are described by a radius r , the distance from the center, and two angles \u03b8_ 1, \u03b8_ 2 describing the beginning and the end of the wall in the clockwise direction. Notice that swapping the two angles changes the wall. Straight walls are described by an angle \u03b8 , the direction of the wall, and two radii r_ 1 < r_ 2 describing the beginning and the end of the wall. Angles are measured in degrees; the angle 0 corresponds to the upward pointing direction; and angles increase clockwise ( hence the east direction corresponds to the angle 90 ) .",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1\u2264 t\u2264 20 ) \u2014 the number of test cases. The descriptions of the t test cases follow. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the number of walls. Each of the following n lines each contains a character ( C for circular, and S for straight) and three integers: either r, \u03b8_ 1, \u03b8_ 2 ( 1 \u2264 r \u2264 20 and 0 \u2264\u03b8_ 1, \u03b8_ 2 < 360 with \u03b8_ 1 = \u0338\u03b8_ 2 ) if the wall is circular, or r_ 1 , r_ 2 and \u03b8 ( 1 \u2264 r_ 1 < r_ 2 \u2264 20 and 0 \u2264\u03b8 < 360 ) if the wall is straight. It is guaranteed that circular walls do not overlap ( but two circular walls may intersect at one or two points) , and that straight walls do not overlap ( but two straight walls may intersect at one point) . However, circular and straight walls can intersect arbitrarily.",
    "output": "For each test case, print YES if the maze can be solved and NO otherwise.",
    "note": "The two sample test cases correspond to the two mazes in the picture.",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "1662O"
  },
  {
    "title": "Training Camp",
    "url": "https://codeforces.com/problemset/problem/1662/J",
    "history": "You are organizing a training camp to teach algorithms to young kids. There are n^ 2 kids, organized in an n by n grid. Each kid is between 1 and n years old ( inclusive) and any two kids who are in the same row or in the same column have different ages. You want to select exactly n kids for a programming competition, with exactly one kid from each row and one kid from each column. Moreover, kids who are not selected must be either older than both kids selected in their row and column, or younger than both kids selected in their row and column ( otherwise they will complain) . Notice that it is always possible to select n kids satisfying these requirements ( for example by selecting n kids who have the same age) . During the training camp, you observed that some kids are good at programming, and the others are not. What is the maximum number of kids good at programming that you can select while satisfying all the requirements?",
    "input": "The first line contains n ( 1 \u2264 n \u2264 128 ) \u2014 the size of the grid. The following n lines describe the ages of the kids. Specifically, the i - th line contains n integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 1 \u2264 a_ i, j\u2264 n ) \u2014 where a_ i, j is the age of the kid in the i - th row and j - th column. It is guaranteed that two kids on the same row or column have different ages, i. e. , a_ i, j a_ i, j' for any 1\u2264 i\u2264 n , 1\u2264 j < j' \u2264 n , and a_ i, j a_ i' , j for any 1\u2264 i < i' \u2264 n , 1\u2264 j\u2264 n . The following n lines describe the programming skills of the kids. Specifically, the i - th line contains n integers c_ i, 1, c_ i, 2, . . . , c_ i, n ( c_ i, j\u2208{ 0, 1} ) \u2014 where c_ i, j= 1 if the kid in the i - th row and j - th column is good at programming and c_ i, j= 0 otherwise.",
    "output": "Print the maximum number of kids good at programming that you can select while satisfying all the requirements.",
    "note": "In the first sample, it is not possible to select the two kids good at programming ( in row 1 and column 1 , and in row 2 and column 3 ) , because then you would have to select the kid in row 3 and column 2 , and in that case two kids would complain ( the one in row 1 and column 2 , and the one in row 3 and column 1 ) . A valid selection which contains 1 kid good at programming is achieved by choosing the 3 kids who are 1 year old. In the second sample, there are 10 valid choices of the n kids that satisfy the requirements, and each of them selects exactly 2 kids good at programming.",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1662J"
  },
  {
    "title": "Antennas",
    "url": "https://codeforces.com/problemset/problem/1662/F",
    "history": "There are n equidistant antennas on a line, numbered from 1 to n . Each antenna has a power rating, the power of the i - th antenna is p_ i . The i - th and the j - th antenna can communicate directly if and only if their distance is at most the minimum of their powers, i. e. , | i- j| \u2264min( p_ i, p_ j) . Sending a message directly between two such antennas takes 1 second. What is the minimum amount of time necessary to send a message from antenna a to antenna b , possibly using other antennas as relays?",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1\u2264 t\u2264 100 000 ) \u2014 the number of test cases. The descriptions of the t test cases follow. The first line of each test case contains three integers n , a , b ( 1 \u2264 a, b \u2264 n \u2264 200 000 ) \u2014 the number of antennas, and the origin and target antenna. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the powers of the antennas. The sum of the values of n over all test cases does not exceed 200 000 .",
    "output": "For each test case, print the number of seconds needed to trasmit a message from a to b . It can be shown that under the problem constraints, it is always possible to send such a message.",
    "note": "In the first test case, we must send a message from antenna 2 to antenna 9 . A sequence of communications requiring 4 seconds, which is the minimum possible amount of time, is the following: In 1 second we send the message from antenna 2 to antenna 1 . This is possible since | 2- 1| \u2264min( 1, 4) = min( p_ 2, p_ 1) . In 1 second we send the message from antenna 1 to antenna 5 . This is possible since | 1- 5| \u2264min( 4, 5) = min( p_ 1, p_ 5) . In 1 second we send the message from antenna 5 to antenna 10 . This is possible since | 5- 10| \u2264min( 5, 5) = min( p_ 5, p_ 10) . In 1 second we send the message from antenna 10 to antenna 9 . This is possible since | 10- 9| \u2264min( 5, 1) = min( p_ 10, p_ 9) .",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "graphs",
      "implementation",
      "implementation",
      "shortest paths",
      "shortest paths"
    ],
    "id": "1662F"
  },
  {
    "title": "European Trip",
    "url": "https://codeforces.com/problemset/problem/1662/C",
    "history": "The map of Europe can be represented by a set of n cities, numbered from 1 through n , which are connected by m bidirectional roads, each of which connects two distinct cities. A trip of length k is a sequence of k+ 1 cities v_ 1, v_ 2, . . . , v_ k+ 1 such that there is a road connecting each consecutive pair v_ i , v_ i+ 1 of cities, for all 1 \u2264 i \u2264 k . A special trip is a trip that does not use the same road twice in a row, i. e. , a sequence of k+ 1 cities v_ 1, v_ 2, . . . , v_ k+ 1 such that it forms a trip and v_ i = \u0338 v_ i + 2 , for all 1 \u2264 i \u2264 k - 1 . Given an integer k , compute the number of distinct special trips of length k which begin and end in the same city. Since the answer might be large, give the answer modulo 998 244 353 .",
    "input": "The first line contains three integers n , m and k ( 3 \u2264 n \u2264 100 , 1 \u2264 m \u2264 n( n - 1) / 2 , 1 \u2264 k \u2264 10^ 4 ) \u2014 the number of cities, the number of roads and the length of trips to consider. Each of the following m lines contains a pair of distinct integers a and b ( 1 \u2264 a, b \u2264 n ) \u2014 each pair represents a road connecting cities a and b . It is guaranteed that the roads are distinct ( i. e. , each pair of cities is connected by at most one road) .",
    "output": "Print the number of special trips of length k which begin and end in the same city, modulo 998 244 353 .",
    "note": "In the first sample, we are looking for special trips of length 2 , but since we cannot use the same road twice once we step away from a city we cannot go back, so the answer is 0 . In the second sample, we have the following 12 special trips of length 3 which begin and end in the same city: ( 1, 2, 4, 1) , ( 1, 3, 4, 1) , ( 1, 4, 2, 1) , ( 1, 4, 3, 1) , ( 2, 1, 4, 2) , ( 2, 4, 1, 2) , ( 3, 1, 4, 3) , ( 3, 4, 1, 3) , ( 4, 1, 3, 4) , ( 4, 3, 1, 4) , ( 4, 1, 2, 4) , and ( 4, 2, 1, 4) .",
    "topics": [
      "dp",
      "graphs",
      "math",
      "matrices"
    ],
    "id": "1662C"
  },
  {
    "title": "Getting Zero",
    "url": "https://codeforces.com/problemset/problem/1661/B",
    "history": "Suppose you have an integer v . In one operation, you can: either set v = ( v + 1) 32768 or set v = ( 2 \u00b7 v) 32768 . You are given n integers a_ 1, a_ 2, . . . , a_ n . What is the minimum number of operations you need to make each a_ i equal to 0 ?",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 32768 ) \u2014 the number of integers. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 32768 ) .",
    "output": "Print n integers. The i - th integer should be equal to the minimum number of operations required to make a_ i equal to 0 .",
    "note": "Let' s consider each a_ i : a_ 1 = 19 . You can, firstly, increase it by one to get 20 and then multiply it by two 13 times. You' ll get 0 in 1 + 13 = 14 steps. a_ 2 = 32764 . You can increase it by one 4 times: 32764 \u2192 32765 \u2192 32766 \u2192 32767 \u2192 0 . a_ 3 = 10240 . You can multiply it by two 4 times: 10240 \u2192 20480 \u2192 8192 \u2192 16384 \u2192 0 . a_ 4 = 49 . You can multiply it by two 15 times.",
    "topics": [
      "bitmasks",
      "brute force",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1661B"
  },
  {
    "title": "Tree and Permutation Game",
    "url": "https://codeforces.com/problemset/problem/1659/F",
    "history": "There is a tree of n vertices and a permutation p of size n . A token is present on vertex x of the tree. Alice and Bob are playing a game. Alice is in control of the permutation p , and Bob is in control of the token on the tree. In Alice' s turn, she must pick two distinct numbers u and v ( not positions; u = \u0338 v ) , such that the token is neither at vertex u nor vertex v on the tree, and swap their positions in the permutation p . In Bob' s turn, he must move the token to an adjacent vertex from the one it is currently on. Alice wants to sort the permutation in increasing order. Bob wants to prevent that. Alice wins if the permutation is sorted in increasing order at the beginning or end of her turn. Bob wins if he can make the game go on for an infinite number of moves ( which means that Alice is never able to get a sorted permutation) . Both players play optimally. Alice makes the first move. Given the tree, the permutation p , and the vertex x on which the token initially is, find the winner of the game.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of each test case follows. The first line of each test case has two integers n and x ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 x \u2264 n ) . Each of the next n- 1 lines contains two integers a and b ( 1 \u2264 a, b \u2264 n , a = \u0338 b ) indicating an undirected edge between vertex a and vertex b . It is guaranteed that the given edges form a tree. The next line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation p . The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one line containing Alice or Bob \u2014 the winner of the game. The output is case- sensitive.",
    "note": "Here is the explanation for the first example: In the first test case, there is a way for Alice to win. Here is a possible sequence of moves: Alice swaps 5 and 6 , resulting in [ 2, 1, 3, 5, 4, 6] . Bob moves the token to vertex 5 . Alice swaps 1 and 2 , resulting in [ 1, 2, 3, 5, 4, 6] . Bob moves the token to vertex 3 . Alice swaps 4 and 5 , resulting in [ 1, 2, 3, 4, 5, 6] , and wins. In the second test case, Alice cannot win since Bob can make the game go on forever. Here is the sequence of moves: Alice can only swap 1 and 3 , resulting in [ 3, 1, 2] . Bob moves the token to vertex 1 . Alice can only swap 2 and 3 , resulting in [ 2, 1, 3] . Bob moves the token to vertex 2 . Alice can only swap 1 and 3 , resulting in [ 2, 3, 1] . Bob moves the token to vertex 3 . Alice can only swap 1 and 2 , resulting in [ 1, 3, 2] . Bob moves the token to vertex 2 . And then the sequence repeats forever. In the third test case, Alice wins immediately since the permutation is already sorted.",
    "topics": [
      "dfs and similar",
      "games",
      "graphs",
      "trees"
    ],
    "id": "1659F"
  },
  {
    "title": "AND-MEX Walk",
    "url": "https://codeforces.com/problemset/problem/1659/E",
    "history": "There is an undirected, connected graph with n vertices and m weighted edges. A walk from vertex u to vertex v is defined as a sequence of vertices p_ 1, p_ 2, . . . , p_ k ( which are not necessarily distinct) starting with u and ending with v , such that p_ i and p_ i+ 1 are connected by an edge for 1 \u2264 i < k . We define the length of a walk as follows: take the ordered sequence of edges and write down the weights on each of them in an array. Now, write down the bitwise AND of every nonempty prefix of this array. The length of the walk is the MEX of all these values. More formally, let us have [ w_ 1, w_ 2, . . . , w_ k- 1] where w_ i is the weight of the edge between p_ i and p_ i+ 1 . Then the length of the walk is given by MEX( { w_ 1, w_ 1& w_ 2, . . . , w_ 1& w_ 2& . . . & w_ k- 1} ) , where & denotes the bitwise AND operation. Now you must process q queries of the form u v. For each query, find the minimum possible length of a walk from u to v . The MEX ( minimum excluded) of a set is the smallest non- negative integer that does not belong to the set. For instance: The MEX of { 2, 1} is 0 , because 0 does not belong to the set. The MEX of { 3, 1, 0} is 2 , because 0 and 1 belong to the set, but 2 does not. The MEX of { 0, 3, 1, 2} is 4 because 0 , 1 , 2 and 3 belong to the set, but 4 does not.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 10^ 5 ; n- 1 \u2264 m \u2264min( n( n- 1) / 2, 10^ 5) ) . Each of the next m lines contains three integers a , b , and w ( 1 \u2264 a, b \u2264 n , a = \u0338 b ; 0 \u2264 w < 2^ 30 ) indicating an undirected edge between vertex a and vertex b with weight w . The input will not contain self- loops or duplicate edges, and the provided graph will be connected. The next line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) . Each of the next q lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , the description of each query.",
    "output": "For each query, print one line containing a single integer \u2014 the answer to the query.",
    "note": "The following is an explanation of the first example. The graph in the first example. Here is one possible walk for the first query: 1 5\u2192 3 3\u2192 2 1\u2192 1 5\u2192 3 1\u2192 4 2\u2192 5. The array of weights is w= [ 5, 3, 1, 5, 1, 2] . Now if we take the bitwise AND of every prefix of this array, we get the set { 5, 1, 0} . The MEX of this set is 2 . We cannot get a walk with a smaller length ( as defined in the statement) .",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1659E"
  },
  {
    "title": "Words on Tree",
    "url": "https://codeforces.com/problemset/problem/1657/F",
    "history": "You are given a tree consisting of n vertices, and q triples ( x_ i, y_ i, s_ i) , where x_ i and y_ i are integers from 1 to n , and s_ i is a string with length equal to the number of vertices on the simple path from x_ i to y_ i . You want to write a lowercase Latin letter on each vertex in such a way that, for each of q given triples, at least one of the following conditions holds: if you write out the letters on the vertices on the simple path from x_ i to y_ i in the order they appear on this path, you get the string s_ i ; if you write out the letters on the vertices on the simple path from y_ i to x_ i in the order they appear on this path, you get the string s_ i . Find any possible way to write a letter on each vertex to meet these constraints, or report that it is impossible.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 4 \u00b7 10^ 5 ; 1 \u2264 q \u2264 4 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree and the number of triples, respectively. Then n - 1 lines follow; the i - th of them contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) \u2014 the endpoints of the i - th edge. These edges form a tree. Then q lines follow; the j - th of them contains two integers x_ j and y_ j , and a string s_ j consisting of lowercase Latin letters. The length of s_ j is equal to the number of vertices on the simple path between x_ j and y_ j . Additional constraint on the input: \u2211_ j= 1^ q | s_ j| \u2264 4 \u00b7 10^ 5 .",
    "output": "If there is no way to meet the conditions on all triples, print NO. Otherwise, print YES in the first line, and a string of n lowercase Latin letters in the second line; the i - th character of the string should be the letter you write on the i - th vertex. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "2-sat",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1657F"
  },
  {
    "title": "Neighbour Ordering",
    "url": "https://codeforces.com/problemset/problem/1656/I",
    "history": "Given an undirected graph G , we say that a neighbour ordering is an ordered list of all the neighbours of a vertex for each of the vertices of G . Consider a given neighbour ordering of G and three vertices u , v and w , such that v is a neighbor of u and w . We write u < _ v w if u comes after w in v ' s neighbor list. A neighbour ordering is said to be good if, for each simple cycle v_ 1, v_ 2, . . . , v_ c of the graph, one of the following is satisfied: v_ 1 < _ v_ 2 v_ 3, v_ 2 < _ v_ 3 v_ 4, . . . , v_ c- 2 < _ v_ c- 1 v_ c, v_ c- 1 < _ v_ c v_ 1, v_ c < _ v_ 1 v_ 2 . v_ 1 > _ v_ 2 v_ 3, v_ 2 > _ v_ 3 v_ 4, . . . , v_ c- 2 > _ v_ c- 1 v_ c, v_ c- 1 > _ v_ c v_ 1, v_ c > _ v_ 1 v_ 2 . Given a graph G , determine whether there exists a good neighbour ordering for it and construct one if it does.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 m \u2264 3 \u00b7 10^ 5 ) , the number of vertices and the number of edges of the graph. The next m lines each contain two integers u, v ( 0 \u2264 u, v < n ) , denoting that there is an edge connecting vertices u and v . It is guaranteed that the graph is connected and there are no loops or multiple edges between the same vertices. The sum of n and the sum of m for all test cases are at most 3 \u00b7 10^ 5 .",
    "output": "For each test case, output one line with YES if there is a good neighbour ordering, otherwise output one line with NO. You can print each letter in any case ( upper or lower) . If the answer is YES, additionally output n lines describing a good neighbour ordering. In the i - th line, output the neighbours of vertex i in order. If there are multiple good neigbour orderings, print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1656I"
  },
  {
    "title": "Cycle Palindrome",
    "url": "https://codeforces.com/problemset/problem/1656/G",
    "history": "We say that a sequence of n integers a_ 1, a_ 2, . . . , a_ n is a palindrome if for all 1 \u2264 i \u2264 n , a_ i = a_ n- i+ 1 . You are given a sequence of n integers a_ 1, a_ 2, . . . , a_ n and you have to find, if it exists, a cycle permutation \u03c3 so that the sequence a_ \u03c3( 1) , a_ \u03c3( 2) , . . . , a_ \u03c3( n) is a palindrome. A permutation of 1, 2, . . . , n is a bijective function from { 1, 2, . . . , n} to { 1, 2, . . . , n} . We say that a permutation \u03c3 is a cycle permutation if 1, \u03c3( 1) , \u03c3^ 2( 1) , . . . , \u03c3^ n- 1( 1) are pairwise different numbers. Here \u03c3^ m( 1) denotes \u03c3( \u03c3( . . . \u03c3_ m times( 1) . . . ) ) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the sequence. The second line of each test case contains n integers a_ 1, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . The sum of n for all test cases is at most 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one line with YES if a cycle permutation exists, otherwise output one line with NO. If the answer is YES, output one additional line with n integers \u03c3( 1) , \u03c3( 2) , . . . , \u03c3( n) , the permutation. If there is more than one permutation, you may print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math"
    ],
    "id": "1656G"
  },
  {
    "title": "Parametric MST",
    "url": "https://codeforces.com/problemset/problem/1656/F",
    "history": "You are given n integers a_ 1, a_ 2, . . . , a_ n . For any real number t , consider the complete weighted graph on n vertices K_ n( t) with weight of the edge between vertices i and j equal to w_ ij( t) = a_ i \u00b7 a_ j + t \u00b7 ( a_ i + a_ j) . Let f( t) be the cost of the minimum spanning tree of K_ n( t) . Determine whether f( t) is bounded above and, if so, output the maximum value it attains.",
    "input": "The input consists of multiple test cases. The first line contains a single integer T ( 1 \u2264 T \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices of the graph. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 6 \u2264 a_ i \u2264 10^ 6 ) . The sum of n for all test cases is at most 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line with the maximum value of f( t) ( it can be shown that it is an integer) , or INF if f( t) is not bounded above.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1656F"
  },
  {
    "title": "Snowy Mountain",
    "url": "https://codeforces.com/problemset/problem/1654/G",
    "history": "There are n locations on a snowy mountain range ( numbered from 1 to n ) , connected by n- 1 trails in the shape of a tree. Each trail has length 1 . Some of the locations are base lodges. The height h_ i of each location is equal to the distance to the nearest base lodge ( a base lodge has height 0 ) . There is a skier at each location, each skier has initial kinetic energy 0 . Each skier wants to ski along as many trails as possible. Suppose that the skier is skiing along a trail from location i to j . Skiers are not allowed to ski uphill ( i. e. , if h_ i < h_ j ) . It costs one unit of kinetic energy to ski along flat ground ( i. e. , if h_ i = h_ j ) , and a skier gains one unit of kinetic energy by skiing downhill ( i. e. , if h_ i > h_ j ) . For each location, compute the length of the longest sequence of trails that the skier starting at that location can ski along without their kinetic energy ever becoming negative. Skiers are allowed to visit the same location or trail multiple times.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers l_ 1, l_ 2, . . . , l_ n ( 0 \u2264 l_ i \u2264 1 ) . If l_ i = 1 , location i is a base lodge; if l_ i = 0 , location i is not a base lodge. It is guaranteed that there is at least 1 base lodge. Each of the next n- 1 lines contains two integers u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , meaning that there is a trail that connects the locations u and v . It is guaranteed that the given trails form a tree.",
    "output": "Print n integers: the i - th integer is equal to the length of the longest sequence of trails that the skier starting at location i can ski along without their kinetic energy ever becoming negative.",
    "note": "In the first test, h = [ 0, 0, 1, 1, 2, 3] . The skier starting from 6 can ski along at most 5 trails, in the path 6 \u2192 5 \u2192 4 \u2192 3 \u2192 4 \u2192 2 ( notice that a skier can ski multiple times along the same trail and can visit more than once the same location) : at the location 6 , the kinetic energy is 0 ; at the location 5 , the kinetic energy increases by 1 ( because h_ 5 < h_ 6 ) , so it becomes 1 ; at the location 4 , the kinetic energy increases by 1 ( because h_ 4 < h_ 5 ) , so it becomes 2 ; at the location 3 , the kinetic energy decreases by 1 ( because h_ 3 = h_ 4 ) , so it becomes 1 ; at the location 4 , the kinetic energy decreases by 1 ( because h_ 4 = h_ 3 ) , so it becomes 0 ; at the location 2 , the kinetic energy increases by 1 ( because h_ 2 < h_ 4 ) , so it becomes 1 . There isn' t any sequence of trails of length greater than 5 such that the kinetic energy is always non- negative. Moreover, the optimal path for the skier starting from 1 is 1 ( no trails) ; the optimal path for the skier starting from 2 is 2 ( no trails) ; the optimal path for the skier starting from 3 is 3 \u2192 1 ; the optimal path for the skier starting from 4 is 4 \u2192 2 ; the optimal path for the skier starting from 5 is 5 \u2192 4 \u2192 3 \u2192 1 . In the second test, h = [ 3, 2, 2, 1, 1, 1, 0, 0, 0] . The skier starting from 1 can ski along at most 5 trails, in the path 1 \u2192 3 \u2192 2 \u2192 5 \u2192 4 \u2192 7 . at the location 1 , the kinetic energy is 0 ; at the location 3 , the kinetic energy increases by 1 ( because h_ 3 < h_ 1 ) , so it becomes 1 ; at the location 2 , the kinetic energy decreases by 1 ( because h_ 2 = h_ 3 ) , so it becomes 0 ; at the location 5 , the kinetic energy increases by 1 ( because h_ 5 < h_ 2 ) , so it becomes 1 ; at the location 4 , the kinetic energy decreases by 1 ( because h_ 4 = h_ 5 ) , so it becomes 0 ; at the location 7 , the kinetic energy increases by 1 ( because h_ 7 < h_ 4 ) , so it becomes 1 . There isn' t any sequence of trails of length greater than 5 such that the kinetic energy is always non- negative. In the third test, for the skier starting from vertex 1 , the optimal path is 1 \u2192 2 \u2192 5 \u2192 4 \u2192 3 \u2192 6 \u2192 11 \u2192 10 \u2192 11 . Here are pictures of the first, second, and third test, with the base lodges shown in red:",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1654G"
  },
  {
    "title": "Arithmetic Operations",
    "url": "https://codeforces.com/problemset/problem/1654/E",
    "history": "You are given an array of integers a_ 1, a_ 2, . . . , a_ n . You can do the following operation any number of times ( possibly zero) : Choose any index i and set a_ i to any integer ( positive, negative or 0 ) . What is the minimum number of operations needed to turn a into an arithmetic progression? The array a is an arithmetic progression if a_ i+ 1- a_ i= a_ i- a_ i- 1 for any 2 \u2264 i \u2264 n- 1 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) .",
    "output": "Print a single integer: the minimum number of operations needed to turn a into an arithmetic progression.",
    "note": "In the first test, you can get the array a = [ 11, 10, 9, 8, 7, 6, 5, 4, 3] by performing 6 operations: Set a_ 3 to 9 : the array becomes [ 3, 2, 9, 8, 6, 9, 5, 4, 1] ; Set a_ 2 to 10 : the array becomes [ 3, 10, 9, 8, 6, 9, 5, 4, 1] ; Set a_ 6 to 6 : the array becomes [ 3, 10, 9, 8, 6, 6, 5, 4, 1] ; Set a_ 9 to 3 : the array becomes [ 3, 10, 9, 8, 6, 6, 5, 4, 3] ; Set a_ 5 to 7 : the array becomes [ 3, 10, 9, 8, 7, 6, 5, 4, 3] ; Set a_ 1 to 11 : the array becomes [ 11, 10, 9, 8, 7, 6, 5, 4, 3] . a is an arithmetic progression: in fact, a_ i+ 1- a_ i= a_ i- a_ i- 1= - 1 for any 2 \u2264 i \u2264 n- 1 . There is no sequence of less than 6 operations that makes a an arithmetic progression. In the second test, you can get the array a = [ - 1, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38] by performing 10 operations. In the third test, you can get the array a = [ 100000, 80000, 60000, 40000, 20000, 0, - 20000, - 40000, - 60000, - 80000] by performing 7 operations.",
    "topics": [
      "brute force",
      "data structures",
      "graphs",
      "math"
    ],
    "id": "1654E"
  },
  {
    "title": "Nearest Excluded Points",
    "url": "https://codeforces.com/problemset/problem/1651/D",
    "history": "You are given n distinct points on a plane. The coordinates of the i - th point are ( x_ i, y_ i) . For each point i , find the nearest ( in terms of Manhattan distance) point with integer coordinates that is not among the given n points. If there are multiple such points \u2014 you can choose any of them. The Manhattan distance between two points ( x_ 1, y_ 1) and ( x_ 2, y_ 2) is | x_ 1 - x_ 2| + | y_ 1 - y_ 2| .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points in the set. The next n lines describe points. The i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 2 \u00b7 10^ 5 ) \u2014 coordinates of the i - th point. It is guaranteed that all points in the input are distinct.",
    "output": "Print n lines. In the i - th line, print the point with integer coordinates that is not among the given n points and is the nearest ( in terms of Manhattan distance) to the i - th point from the input. Output coordinates should be in range [ - 10^ 6; 10^ 6] . It can be shown that any optimal answer meets these constraints. If there are several answers, you can print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1651D"
  },
  {
    "title": "Counting Shortcuts",
    "url": "https://codeforces.com/problemset/problem/1650/G",
    "history": "Given an undirected connected graph with n vertices and m edges. The graph contains no loops ( edges from a vertex to itself) and multiple edges ( i. e. no more than one edge between each pair of vertices) . The vertices of the graph are numbered from 1 to n . Find the number of paths from a vertex s to t whose length differs from the shortest path from s to t by no more than 1 . It is necessary to consider all suitable paths, even if they pass through the same vertex or edge more than once ( i. e. they are not simple) . Graph consisting of 6 of vertices and 8 of edges For example, let n = 6 , m = 8 , s = 6 and t = 1 , and let the graph look like the figure above. Then the length of the shortest path from s to t is 1 . Consider all paths whose length is at most 1 + 1 = 2 . 6 \u2192 1 . The length of the path is 1 . 6 \u2192 4 \u2192 1 . Path length is 2 . 6 \u2192 2 \u2192 1 . Path length is 2 . 6 \u2192 5 \u2192 1 . Path length is 2 . There is a total of 4 of matching paths.",
    "input": "The first line of test contains the number t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. Before each test case, there is a blank line. The first line of test case contains two numbers n, m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014the number of vertices and edges in the graph. The second line contains two numbers s and t ( 1 \u2264 s, t \u2264 n , s = \u0338 t ) \u2014the numbers of the start and end vertices of the path. The following m lines contain descriptions of edges: the i th line contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) \u2014 the numbers of vertices that connect the i th edge. It is guaranteed that the graph is connected and does not contain loops and multiple edges. It is guaranteed that the sum of values n on all test cases of input data does not exceed 2 \u00b7 10^ 5 . Similarly, it is guaranteed that the sum of values m on all test cases of input data does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single number \u2014 the number of paths from s to t such that their length differs from the length of the shortest path by no more than 1 . Since this number may be too large, output it modulo 10^ 9 + 7 .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "1650G"
  },
  {
    "title": "Two Avenues",
    "url": "https://codeforces.com/problemset/problem/1648/F",
    "history": "In order to make the capital of Berland a more attractive place for tourists, the great king came up with the following plan: choose two streets of the city and call them avenues. Certainly, these avenues will be proclaimed extremely important historical places, which should attract tourists from all over the world. The capital of Berland can be represented as a graph, the vertices of which are crossroads, and the edges are streets connecting two crossroads. In total, there are n vertices and m edges in the graph, you can move in both directions along any street, you can get from any crossroad to any other by moving only along the streets, each street connects two different crossroads, and no two streets connect the same pair of crossroads. In order to reduce the flow of ordinary citizens moving along the great avenues, it was decided to introduce a toll on each avenue in both directions. Now you need to pay 1 tugrik for one passage along the avenue. You don' t have to pay for the rest of the streets. Analysts have collected a sample of k citizens, i - th of them needs to go to work from the crossroad a_ i to the crossroad b_ i . After two avenues are chosen, each citizen will go to work along the path with minimal cost. In order to earn as much money as possible, it was decided to choose two streets as two avenues, so that the total number of tugriks paid by these k citizens is maximized. Help the king: according to the given scheme of the city and a sample of citizens, find out which two streets should be made avenues, and how many tugriks the citizens will pay according to this choice.",
    "input": "Each test consists of multiple test cases. The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 3 \u2264 n \u2264 500 000 , n - 1 \u2264 m \u2264 500 000 , m \u2264n ( n - 1) / 2 ) \u2014 the number of crossroads and streets, respectively. The next m lines contain the description of streets, i - th line contains two integers s_ i and f_ i ( 1 \u2264 s_ i, f_ i \u2264 n , s_ i = \u0338 f_ i ) \u2014 indexes of crossroads which are connected by i - th street. It is guaranteed that no two streets connect the same pair of crossroads, you can get from any crossroad to any other by moving only along the streets. The next line contains a single integer k ( 1 \u2264 k \u2264 500 000 ) \u2014 the amount of citizens in the sample. The next k lines contain the description of citizens, i - th line contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i = \u0338 b_ i ) \u2014 i - th citizen goes to work from crossroad a_ i to crossroad b_ i . Let M be the sum of m over all test cases and K be the sum of k over all test cases. It is guaranteed that M, K \u2264 500 000 .",
    "output": "For each test case print the answer to the problem. In the first line print the total amount of tugriks that will be paid by citizens. In the second line print two integers x_ 1 and y_ 1 \u2014 the numbers of crossroads that will be connected by the first avenue. In the third line print two integers x_ 2 and y_ 2 \u2014 the numbers of crossroads that will be connected by the second avenue. The numbers of crossroads connected by an avenue can be printed in any order, each of the printed streets should be among m streets of the city, chosen streets should be different.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs"
    ],
    "id": "1648F"
  },
  {
    "title": "Air Reform",
    "url": "https://codeforces.com/problemset/problem/1648/E",
    "history": "Berland is a large country with developed airlines. In total, there are n cities in the country that are historically served by the Berlaflot airline. The airline operates bi- directional flights between m pairs of cities, i - th of them connects cities with numbers a_ i and b_ i and has a price c_ i for a flight in both directions. It is known that Berlaflot flights can be used to get from any city to any other ( possibly with transfers) , and the cost of any route that consists of several consequent flights is equal to the cost of the most expensive of them. More formally, the cost of the route from a city t_ 1 to a city t_ k with ( k- 2) transfers using cities t_ 2, t_ 3, t_ 4, . . . , t_ k - 1 is equal to the maximum cost of flights from t_ 1 to t_ 2 , from t_ 2 to t_ 3 , from t_ 3 to t_ 4 and so on until the flight from t_ k - 1 to t_ k . Of course, all these flights must be operated by Berlaflot. A new airline, S8 Airlines, has recently started operating in Berland. This airline provides bi- directional flights between all pairs of cities that are not connected by Berlaflot direct flights. Thus, between each pair of cities there is a flight of either Berlaflot or S8 Airlines. The cost of S8 Airlines flights is calculated as follows: for each pair of cities x and y that is connected by a S8 Airlines flight, the cost of this flight is equal to the minimum cost of the route between the cities x and y at Berlaflot according to the pricing described earlier. It is known that with the help of S8 Airlines flights you can get from any city to any other with possible transfers, and, similarly to Berlaflot, the cost of a route between any two cities that consists of several S8 Airlines flights is equal to the cost of the most expensive flight. Due to the increased competition with S8 Airlines, Berlaflot decided to introduce an air reform and change the costs of its flights. Namely, for the i - th of its flight between the cities a_ i and b_ i , Berlaflot wants to make the cost of this flight equal to the minimum cost of the route between the cities a_ i and b_ i at S8 Airlines. Help Berlaflot managers calculate new flight costs.",
    "input": "Each test consists of multiple test cases. The first line contains one integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the amount of test cases. The first line of each test case contains two integers n and m ( 4 \u2264 n \u2264 200 000 , n - 1 \u2264 m \u2264 200 000 , m \u2264( n - 1) ( n - 2) / 2 ) \u2014 the amount of cities in Berland and the amount of Berlaflot flights. The next m lines contain the description of Berlaflot flights. The i - th line contains three integers a_ i , b_ i and c_ i ( 1 \u2264 a_ i, b_ i \u2264 n , 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the numbers of cities that are connected with i - th Berlaflot flight and the price of i - th Berlaflot flight. It is guaranteed that no flight connects a city with itself, no two flights connect the same pair of cities. It is guaranteed that by using Berlaflot flights it is possible to get from any city to any other and by using S8 Airlines flights it is possible to get from any city to any other. Let N be the sum of n over all test cases and M be the sum of m over all test cases. It is guaranteed that N, M \u2264 200 000 .",
    "output": "For each test case you should print m integers in a single line, i - th of them should be the price of i - th Berlaflot flight after the air reform.",
    "note": "In the first test case S8 Airlines will provide flights between these pairs of cities: ( 1, 3) , ( 1, 4) and ( 2, 4) . The cost of a flight between cities 1 and 3 will be equal to 2 , since the minimum cost of the Berlaflot route is 2 \u2014 the route consists of a flight between cities 1 and 2 costing 1 and a flight between cities 2 and 3 costing 2 , the maximum cost is 2 . The cost of a flight between cities 1 and 4 will be 3 , since the minimum cost of the Berlaflot route is 3 \u2014 the route consists of a flight between cities 1 and 2 costing 1 , a flight between cities 2 and 3 costing 2 and a flight between cities 3 and 4 costing 3 , the maximum cost is 3 . The cost of a flight between cities 2 and 4 will be 3 , since the minimum cost of the Berlaflot route is 3 \u2014 the route consists of a flight between cities 2 and 3 costing 2 and a flight between cities 3 and 4 costing 3 , the maximum cost is 3 . After the air reform, the cost of the Berlaflot flight between cities 1 and 2 will be 3 , since the minimum cost of the S8 Airlines route between these cities is 3 \u2014 the route consists of a flight between cities 1 and 4 costing 3 and a flight between cities 2 and 4 costing 3 , the maximum cost is 3 . The cost of the Berlaflot flight between cities 2 and 3 will be 3 , since the minimum cost of the S8 Airlines route between these cities is 3 \u2014 the route consists of a flight between cities 2 and 4 costing 3 , a flight between cities 1 and 4 costing 3 and a flight between 1 and 3 costing 2 , the maximum cost is 3 . The cost of the Berlaflot flight between cities 3 and 4 will be 3 , since the minimum cost of the S8 Airlines route between these cities is 3 \u2014 the route consists of a flight between cities 1 and 3 costing 2 and a flight between cities 1 and 4 costing 3 , the maximum cost is 3 . In the second test case S8 Airlines will have the following flights: between cities 1 and 4 costing 1 , between cities 2 and 3 costing 1 , between cities 2 and 5 costing 2 , between cities 3 and 4 costing 1 and between cities 3 and 5 costing 2 .",
    "topics": [
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "1648E"
  },
  {
    "title": "Madoka and the Elegant Gift",
    "url": "https://codeforces.com/problemset/problem/1647/B",
    "history": "Madoka' s father just reached 1 million subscribers on Mathub! So the website decided to send him a personalized award \u2014 The Mathhub' s Bit Button! The Bit Button is a rectangular table with n rows and m columns with 0 or 1 in each cell. After exploring the table Madoka found out that: A subrectangle A is contained in a subrectangle B if there' s no cell contained in A but not contained in B . Two subrectangles intersect if there is a cell contained in both of them. A subrectangle is called black if there' s no cell with value 0 inside it. A subrectangle is called nice if it' s black and it' s not contained in another black subrectangle. The table is called elegant if there are no two nice intersecting subrectangles. For example, in the first illustration the red subrectangle is nice, but in the second one it' s not, because it' s contained in the purple subrectangle. Help Madoka to determine whether the table is elegant.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two positive integers n, m ( 1 \u2264 n, m \u2264 100 ) . The next n lines contain strings of length m consisting of zeros and ones \u2014 the description of the table. It is guaranteed that the sum of the values of n and the sum of the values of m for all test cases do not exceed 777 .",
    "output": "For each test case print \" YES\" if its table is elegant or print \" NO\" otherwise. You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as positive answer) .",
    "note": "In the second test case the table is not elegant, because the red and the purple subrectangles are nice and intersect. In the fourth test case the table is not elegant, because the red and the purple subrectangles are nice and intersect.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "1647B"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/K",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639K"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/J",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639J"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/I",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639I"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/H",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639H"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/G",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639G"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/F",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639F"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/E",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639E"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/D",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639D"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/C",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639C"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/B",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639B"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/1639/A",
    "history": "All problems in this contest share the same statement, the only difference is the test your solution runs on. For further information on scoring please refer to \" Scoring\" section of the statement. This is an interactive problem. Imagine you are a treasure hunter, a very skillful one. One day you came across an ancient map which could help you to become rich. The map shows multiple forestry roads, and at each junction there is a treasure. So, you start your journey hoping to retrieve all the hidden treasures, but you don' t know yet that there is a wicked wizard standing against you and craving to tangle up these roads and impede your achievements. The treasure map is represented as an undirected graph in which vertices correspond to junctions and edges correspond to roads. Your path begins at a certain fixed vertex with a label known to you. Every time you come to a vertex that you have not been to before, you dig up a treasure chest and put a flag in this vertex. At the initial vertex you' ll find a treasure chest immediately and, consequently, you' ll put a flag there immediately as well. When you are standing at the junction you can see for each of the adjacent vertices its degree and if there is a flag there. There are no other things you can see from there. Besides, the power of the wicked wizard is so great that he is able to change the location of the roads and junctions on the map without changing the graph structure. Therefore, the sequence of the roads coming from the junction v might be different each time you come in the junction v . However, keep in mind that the set of adjacent crossroads does not change, and you are well aware of previously dug treasures at each adjacent to v vertex. Your goal is to collect treasures from all vertices of the graph as fast as you can. Good luck in hunting! InteractionOn the first line the interactor prints an integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of maps for which you need to solve the problem. Then for each of the t maps interactor firstly prints the graph description and after that interaction on this map starts. The map description is given in the following format. The first line contains four integers n, m, start, base_ move_ count ( 2 \u2264 n \u2264 300 , 1 \u2264 m \u2264 min( n( n- 1) / 2, 25n) , 1 \u2264 start \u2264 n , 1000 \u2264 base_ move_ count \u2264 30000 ) \u2014 the number of vertices and edges in the graph, the label of the vertex where you start the journey and some base move count, on which the score for the map depends. It' s guaranteed that the jury has a solution traversing the map using not more than base_ move_ count moves with high probability. The next m lines contain descriptions of the edges of the graph u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) . It is guaranteed that the graph is connected, does not contain multiple edges and the degrees of all vertices do not exceed 50. You can find map descriptions for all tests in the archive ' map_ descriptions. zip' which you can find in any of the archives ' problem- X- materials. zip' in the section \" Contest materials\" \u2014 they are all the same. After that the interaction begins. The interactor prints vertex descriptions in the following format: R d deg_ 1 flag_ 1 deg_ 2 flag_ 2 . . . deg_ d flag_ d, where d is the degree of the current vertex, deg_ i is the degree of the i - th vertex adjacent to the current one, and flag_ i ( 0 or 1) is an indicator if the i - th adjacent vertex contains a flag. The order of neighbors in the vertex description is chosen by the interactor uniformly at random independently each time. Please keep in mind that you are not given the actual labels of adajacent vertices. In response to the description of the vertex you should print a single integer i ( 1 \u2264 i \u2264 d ) , which means that you have chosen the vertex with description deg_ i flag_ i . Remember to use the flush operation after each output. If your output is invalid, you will get a \" Wrong Answer\" verdict. When you have visited all the vertices of the graph at least once, the interactor prints the string \" AC\" instead of the vertex description. If you use more than 2 \u00b7 base_ move_ count moves, the interactor prints the string \" F\" . In both cases, you have to either start reading the description of the next map, or terminate the program, if it has been the last map in the test. Below the example of interaction is presented. Note that the test from the example is not the same that your solution will be tested on. InteractorSolution13 3 1 10001 22 33 1R 2 2 0 2 01R 2 2 0 2 12R 2 2 0 2 11ACScoringAll problems of this contest share the same statement and differ only in the test. Each problem contains one test. Map descriptions for the test are available to look at in the archive. Each test consists of several maps. The solution score for the problem will be 0 in case your solution for some map failed to get an answer \" AC\" or \" F\" . If the solution correctly interacted with the interactor on all t maps, the score for the task will be equal to the sum of the scores for each of the maps. If you have successfully passed all vertices of a graph with n vertices using moves moves, the score for the map is calculated as follows. Denote base_ fraction= base_ move_ count + 1/ n, sol_ fraction= moves+ 1/ n, c= 90/ \u221a( base_ fraction - 1) . Then: if moves \u2264 base_ move_ count , you get 100- c \u221a( sol_ fraction - 1) points. if base_ move_ count < moves \u2264 2 \u00b7 base_ move_ count , you get 20 - 10\u00b7( moves + 1) / base_ move_ count + 1 points. If you use more than 2 \u00b7 base_ move_ count moves, you get 0 points for the map. For each problem the solution with the highest score is chosen. Please note that the maximum is chosen for the entire test as a whole, not for each separate map. The final result of the participant is the sum of points for each of the problems.",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1639A"
  },
  {
    "title": "Inversion Graph",
    "url": "https://codeforces.com/problemset/problem/1638/C",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n . Then, an undirected graph is constructed in the following way: add an edge between vertices i , j such that i < j if and only if p_ i > p_ j . Your task is to count the number of connected components in this graph. Two vertices u and v belong to the same connected component if and only if there is at least one path along edges connecting u and v . A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the permutation. The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the elements of the permutation. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer k \u2014 the number of connected components.",
    "note": "Each separate test case is depicted in the image below. The colored squares represent the elements of the permutation. For one permutation, each color represents some connected component. The number of distinct colors is the answer.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "math"
    ],
    "id": "1638C"
  },
  {
    "title": "Cars ",
    "url": "https://codeforces.com/problemset/problem/1635/E",
    "history": "There are n cars on a coordinate axis OX . Each car is located at an integer point initially and no two cars are located at the same point. Also, each car is oriented either left or right, and they can move at any constant positive speed in that direction at any moment. More formally, we can describe the i - th car with a letter and an integer: its orientation ori_ i and its location x_ i . If ori_ i = L , then x_ i is decreasing at a constant rate with respect to time. Similarly, if ori_ i = R , then x_ i is increasing at a constant rate with respect to time. We call two cars irrelevant if they never end up in the same point regardless of their speed. In other words, they won' t share the same coordinate at any moment. We call two cars destined if they always end up in the same point regardless of their speed. In other words, they must share the same coordinate at some moment. Unfortunately, we lost all information about our cars, but we do remember m relationships. There are two types of relationships: 1 i j \u2014 i - th car and j - th car are irrelevant. 2 i j \u2014 i - th car and j - th car are destined. Restore the orientations and the locations of the cars satisfying the relationships, or report that it is impossible. If there are multiple solutions, you can output any. Note that if two cars share the same coordinate, they will intersect, but at the same moment they will continue their movement in their directions.",
    "input": "The first line contains two integers, n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5; 1 \u2264 m \u2264 min( 2 \u00b7 10^ 5, n( n- 1) / 2) \u2014 the number of cars and the number of restrictions respectively. Each of the next m lines contains three integers, type , i , and j ( 1 \u2264 type \u2264 2; 1 \u2264 i, j \u2264 n; i= \u0338j) . If type = 1 , i - th car and j - th car are irrelevant. Otherwise, i - th car and j - th car are destined. It is guaranteed that for each pair of cars, there are at most 1 relationship between.",
    "output": "In the first line, print either \" YES\" or \" NO\" ( in any case) , whether it is possible to restore the orientations and the locations of the cars satisfying the relationships. If the answer is \" YES\" , print n lines each containing a symbol and an integer: ori_ i and x_ i ( ori_ i \u2208{ L, R} ; - 10^ 9 \u2264 x_ i \u2264 10^ 9) \u2014 representing the information of the i - th car. If the orientation is left, then ori_ i = L . Otherwise ori_ i = R . x_ i is the where the i - th car is located. Note that all x_ i should be distinct. We can prove that if there exists a solution, then there must be a solution satisfying the constraints on x_ i .",
    "note": "",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1635E"
  },
  {
    "title": "Fair Share",
    "url": "https://codeforces.com/problemset/problem/1634/E",
    "history": "Even a cat has things it can do that AI cannot. \u2014 Fei- Fei LiYou are given m arrays of positive integers. Each array is of even length. You need to split all these integers into two equal multisets L and R , that is, each element of each array should go into one of two multisets ( but not both) . Additionally, for each of the m arrays, exactly half of its elements should go into L , and the rest should go into R . Give an example of such a division or determine that no such division exists.",
    "input": "The first line contains an integer m ( 1 \u2264 m \u2264 10 ^ 5 ) \u2014 the number of arrays. The next 2 \u00b7 m lines contain descriptions of the arrays. For each array, the first line contains an even integer n ( 2 \u2264 n \u2264 2 \u00b7 10 ^ 5 ) \u2014 the length of the array. The second line consists of n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10 ^ 9 ) \u2014 array elements. It is guaranteed that the sum of n over all arrays does not exceed 2 \u00b7 10^ 5 .",
    "output": "If the answer exists, print \" YES\" , and then print m lines. On each line, for each element, print the letter \" L\" or \" R\" ( capitalized, without spaces) , depending on which multiset the element should go into. If there is no answer, print \" NO\" on the only line.",
    "note": "In the first array, we add the first element to R and the second to L . Now L = { 2} , and R = { 1} . In the second array, we add the first and third elements to L and the rest to R . Now L = { 1, 2, 3} and R = { 1, 2, 3} . In the third array, we add elements 2, 3, and 6 to L , and others \u2014 to R . As a result, L = R = { 1, 1, 2, 2, 3, 3} .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graph matchings",
      "graphs"
    ],
    "id": "1634E"
  },
  {
    "title": "Spanning Tree Queries",
    "url": "https://codeforces.com/problemset/problem/1633/E",
    "history": "You are given a connected weighted undirected graph, consisting of n vertices and m edges. You are asked k queries about it. Each query consists of a single integer x . For each query, you select a spanning tree in the graph. Let the weights of its edges be w_ 1, w_ 2, . . . , w_ n- 1 . The cost of a spanning tree is \u2211_ i= 1^ n- 1 | w_ i - x| ( the sum of absolute differences between the weights and x ) . The answer to a query is the lowest cost of a spanning tree. The queries are given in a compressed format. The first p ( 1 \u2264 p \u2264 k) queries q_ 1, q_ 2, . . . , q_ p are provided explicitly. For queries from p+ 1 to k , q_ j = ( q_ j- 1\u00b7 a + b) c . Print the xor of answers to all queries.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 50 ; n - 1 \u2264 m \u2264 300 ) \u2014 the number of vertices and the number of edges in the graph. Each of the next m lines contains a description of an undirected edge: three integers v , u and w ( 1 \u2264 v, u \u2264 n ; v = \u0338 u ; 0 \u2264 w \u2264 10^ 8 ) \u2014 the vertices the edge connects and its weight. Note that there might be multiple edges between a pair of vertices. The edges form a connected graph. The next line contains five integers p, k, a, b and c ( 1 \u2264 p \u2264 10^ 5 ; p \u2264 k \u2264 10^ 7 ; 0 \u2264 a, b \u2264 10^ 8 ; 1 \u2264 c \u2264 10^ 8 ) \u2014 the number of queries provided explicitly, the total number of queries and parameters to generate the queries. The next line contains p integers q_ 1, q_ 2, . . . , q_ p ( 0 \u2264 q_ j < c ) \u2014 the first p queries.",
    "output": "Print a single integer \u2014 the xor of answers to all queries.",
    "note": "The queries in the first example are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 . The answers are 11, 9, 7, 3, 1, 5, 8, 7, 5, 7, 11 . The queries in the second example are 3, 0, 2, 1, 6, 0, 3, 5, 4, 1 . The answers are 14, 19, 15, 16, 11, 19, 14, 12, 13, 16 . The queries in the third example are 75, 0, 0, . . . . The answers are 50, 150, 150, . . . .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1633E"
  },
  {
    "title": "Distance Tree (easy version)",
    "url": "https://codeforces.com/problemset/problem/1632/E1",
    "history": "This version of the problem differs from the next one only in the constraint on n . A tree is a connected undirected graph without cycles. A weighted tree has a weight assigned to each edge. The distance between two vertices is the minimum sum of weights on the path connecting them. You are given a weighted tree with n vertices, each edge has a weight of 1 . Denote d( v) as the distance between vertex 1 and vertex v . Let f( x) be the minimum possible value of max_ 1 \u2264 v \u2264 n d( v) if you can temporarily add an edge with weight x between any two vertices a and b ( 1 \u2264 a, b \u2264 n) . Note that after this operation, the graph is no longer a tree. For each integer x from 1 to n , find f( x) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 3000 ) . Each of the next n\u22121 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) indicating that there is an edge between vertices u and v . It is guaranteed that the given edges form a tree. It is guaranteed that the sum of n over all test cases doesn' t exceed 3000 .",
    "output": "For each test case, print n integers in a single line, x - th of which is equal to f( x) for all x from 1 to n .",
    "note": "In the first testcase: For x = 1 , we can an edge between vertices 1 and 3 , then d( 1) = 0 and d( 2) = d( 3) = d( 4) = 1 , so f( 1) = 1 . For x \u2265 2 , no matter which edge we add, d( 1) = 0 , d( 2) = d( 4) = 1 and d( 3) = 2 , so f( x) = 2 .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "1632E1"
  },
  {
    "title": "Making It Bipartite",
    "url": "https://codeforces.com/problemset/problem/1630/F",
    "history": "You are given an undirected graph of n vertices indexed from 1 to n , where vertex i has a value a_ i assigned to it and all values a_ i are different. There is an edge between two vertices u and v if either a_ u divides a_ v or a_ v divides a_ u . Find the minimum number of vertices to remove such that the remaining graph is bipartite, when you remove a vertex you remove all the edges incident to it.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5\u00b710^ 4 ) \u2014 the number of vertices in the graph. The second line of each test case contains n integers, the i - th of them is the value a_ i ( 1 \u2264 a_ i \u2264 5\u00b710^ 4 ) assigned to the i - th vertex, all values a_ i are different. It is guaranteed that the sum of n over all test cases does not exceed 5\u00b710^ 4 .",
    "output": "For each test case print a single integer \u2014 the minimum number of vertices to remove such that the remaining graph is bipartite.",
    "note": "In the first test case if we remove the vertices with values 1 and 2 we will obtain a bipartite graph, so the answer is 2 , it is impossible to remove less than 2 vertices and still obtain a bipartite graph. BeforeAfter test case # 1 In the second test case we do not have to remove any vertex because the graph is already bipartite, so the answer is 0 . BeforeAfter test case # 2 In the third test case we only have to remove the vertex with value 12 , so the answer is 1 . BeforeAfter test case # 3 In the fourth test case we remove the vertices with values 2 and 195 , so the answer is 2 . BeforeAfter test case # 4",
    "topics": [
      "flows",
      "graph matchings",
      "graphs",
      "number theory"
    ],
    "id": "1630F"
  },
  {
    "title": "Not Splitting",
    "url": "https://codeforces.com/problemset/problem/1627/F",
    "history": "There is a k \u00d7 k grid, where k is even. The square in row r and column c is denoted by ( r, c) . Two squares ( r_ 1, c_ 1) and ( r_ 2, c_ 2) are considered adjacent if | r_ 1 - r_ 2 | + | c_ 1 - c_ 2 | = 1 . An array of adjacent pairs of squares is called strong if it is possible to cut the grid along grid lines into two connected, congruent pieces so that each pair is part of the same piece. Two pieces are congruent if one can be matched with the other by translation, rotation, and reflection, or a combination of these. The picture above represents the first test case. Arrows indicate pairs of squares, and the thick black line represents the cut. You are given an array a of n pairs of adjacent squares. Find the size of the largest strong subsequence of a . An array p is a subsequence of an array q if p can be obtained from q by deletion of several ( possibly, zero or all) elements.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two space- separated integers n and k ( 1 \u2264 n \u2264 10^ 5 ; 2 \u2264 k \u2264 500 , k is even) \u2014 the length of a and the size of the grid, respectively. Then n lines follow. The i - th of these lines contains four space- separated integers r_ i, 1 , c_ i, 1 , r_ i, 2 , and c_ i, 2 ( 1 \u2264 r_ i, 1, c_ i, 1, r_ i, 2, c_ i, 2\u2264 k ) \u2014 the i - th element of a , represented by the row and column of the first square ( r_ i, 1, c_ i, 1) and the row and column of the second square ( r_ i, 2, c_ i, 2) . These squares are adjacent. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 , and the sum of k over all test cases does not exceed 500 .",
    "output": "For each test case, output a single integer \u2014 the size of the largest strong subsequence of a .",
    "note": "In the first test case, the array a is not good, but if we take the subsequence [ a_ 1, a_ 2, a_ 3, a_ 4, a_ 5, a_ 6, a_ 8] , then the square can be split as shown in the statement. In the second test case, we can take the subsequence consisting of the last four elements of a and cut the square with a horizontal line through its center.",
    "topics": [
      "geometry",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1627F"
  },
  {
    "title": "Cats on the Upgrade (hard version)",
    "url": "https://codeforces.com/problemset/problem/1625/E2",
    "history": "This is the hard version of the problem. The only difference between the easy and the hard versions are removal queries, they are present only in the hard version. \" Interplanetary Software, Inc. \" together with \" Robots of Cydonia, Ltd. \" has developed and released robot cats. These electronic pets can meow, catch mice and entertain the owner in various ways. The developers from \" Interplanetary Software, Inc. \" have recently decided to release a software update for these robots. After the update, the cats must solve the problems about bracket sequences. One of the problems is described below. First, we need to learn a bit of bracket sequence theory. Consider the strings that contain characters \" ( \" , \" ) \" and \" . \" . Call a string regular bracket sequence ( RBS) , if it can be transformed to an empty string by one or more operations of removing either single \" . \" characters, or a continuous substring \" ( ) \" . For instance, the string \" ( ( ) ( . ) ) \" is an RBS, as it can be transformed to an empty string with the following sequence of removals: \" ( ( ) ( . ) ) \" \u2192 \" ( ( ) ( ) ) \" \u2192 \" ( ( ) ) \" \u2192 \" ( ) \" \u2192 \" \" . We got an empty string, so the initial string was an RBS. At the same time, the string \" ) ( \" is not an RBS, as it is not possible to apply such removal operations to it. An RBS is simple if this RBS is not empty, doesn' t start with \" . \" , and doesn' t end with \" . \" . Denote the substring of the string s as its sequential subsegment. In particular, s[ l. . . r] = s_ ls_ l+ 1. . . s_ r , where s_ i is the i - th character of the string s . Now, move on to the problem statement itself. You are given a string s , initially consisting of characters \" ( \" and \" ) \" . You need to answer the following queries: Given two indices, l and r ( 1 \u2264 l < r \u2264 n ) . It' s guaranteed that the l - th character is equal to \" ( \" , the r - th character is equal to \" ) \" , and the characters between them are equal to \" . \" . Then the l - th and the r - th characters must be set to \" . \" . Given two indices, l and r ( 1 \u2264 l < r \u2264 n ) , and it' s guaranteed that the substring s[ l. . . r] is a simple RBS. You need to find the number of substrings in s[ l. . . r] such that they are simple RBS. In other words, find the number of index pairs i , j such that l \u2264 i < j \u2264 r and s[ i. . . j] is a simple RBS. You are an employee in \" Interplanetary Software, Inc. \" and you were given the task to teach the cats to solve the problem above, after the update.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 3\u00b710^ 5 , 1 \u2264 q \u2264 3\u00b710^ 5 ) , the length of the string, and the number of queries. The second line contains the string s , consisting of n characters \" ( \" and \" ) \" . Each of the following q lines contains three integers t , l and r ( t \u2208{ 1, 2} , 1 \u2264 l < r \u2264 n ) , the queries you need to answer. It is guaranteed that all the queries are valid and correspond to the problem statements.",
    "output": "For each query, print a single integer in a separate line, the number of substrings that are simple RBS. The answers must be printed in the same order as the queries are specified in the input.",
    "note": "Consider the example test case. The answer to the first query is 3 , as there are three suitable substrings: s[ 3. . . 6] , s[ 3. . . 4] and s[ 5. . . 6] . The answer to the second query is 4 . The substrings are s[ 3. . . 6] , s[ 3. . . 4] , s[ 5. . . 6] and s[ 2. . . 7] . After the third query, the string becomes \" ) ( . . ( ) ) ( ) \" . The answer to the fourth query is 2 . The substrings are s[ 5. . . 6] and s[ 2. . . 7] . Note that s[ 3. . . 6] is not a simple RBS anymore, as it starts with \" . \" . The answer to the fifth query is 4 . The substrings are s[ 5. . . 6] , s[ 2. . . 7] , s[ 8. . . 9] and s[ 2. . . 9] . After the sixth query, the string becomes \" ) ( . . . . ) ( ) \" . After the seventh query, the string becomes \" ) . . . . . . ( ) \" . The answer to the eighth query is 1 . The substring is s[ 8. . . 9] .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1625E2"
  },
  {
    "title": "Cats on the Upgrade (easy version)",
    "url": "https://codeforces.com/problemset/problem/1625/E1",
    "history": "This is the easy version of the problem. The only difference between the easy and the hard versions are removal queries, they are present only in the hard version. \" Interplanetary Software, Inc. \" together with \" Robots of Cydonia, Ltd. \" has developed and released robot cats. These electronic pets can meow, catch mice and entertain the owner in various ways. The developers from \" Interplanetary Software, Inc. \" have recently decided to release a software update for these robots. After the update, the cats must solve the problems about bracket sequences. One of the problems is described below. First, we need to learn a bit of bracket sequence theory. Consider the strings that contain characters \" ( \" , \" ) \" and \" . \" . Call a string regular bracket sequence ( RBS) , if it can be transformed to an empty string by one or more operations of removing either single \" . \" characters, or a continuous substring \" ( ) \" . For instance, the string \" ( ( ) ( . ) ) \" is an RBS, as it can be transformed to an empty string with the following sequence of removals: \" ( ( ) ( . ) ) \" \u2192 \" ( ( ) ( ) ) \" \u2192 \" ( ( ) ) \" \u2192 \" ( ) \" \u2192 \" \" . We got an empty string, so the initial string was an RBS. At the same time, the string \" ) ( \" is not an RBS, as it is not possible to apply such removal operations to it. An RBS is simple if this RBS is not empty, doesn' t start with \" . \" , and doesn' t end with \" . \" . Denote the substring of the string s as its sequential subsegment. In particular, s[ l. . . r] = s_ ls_ l+ 1. . . s_ r , where s_ i is the i - th character of the string s . Now, move on to the problem statement itself. You are given a string s , initially consisting of characters \" ( \" and \" ) \" . You need to answer the queries of the following kind. Given two indices, l and r ( 1 \u2264 l < r \u2264 n ) , and it' s guaranteed that the substring s[ l. . . r] is a simple RBS. You need to find the number of substrings in s[ l. . . r] such that they are simple RBS. In other words, find the number of index pairs i , j such that l \u2264 i < j \u2264 r and s[ i. . . j] is a simple RBS. You are an employee in \" Interplanetary Software, Inc. \" and you were given the task to teach the cats to solve the problem above, after the update. Note that the \" . \" character cannot appear in the string in this version of the problem. It is only needed for the hard version.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 3\u00b710^ 5 , 1 \u2264 q \u2264 3\u00b710^ 5 ) , the length of the string, and the number of queries. The second line contains the string s , consisting of n characters \" ( \" and \" ) \" . Each of the following q lines contains three integers t , l and r ( t = 2 , 1 \u2264 l < r \u2264 n ) , the queries you need to answer. It is guaranteed that all the queries are valid and correspond to the problem statements. Note that t is unused and always equal to two in this problem. It is required for the hard version of the problem.",
    "output": "For each query, print a single integer in a separate line, the number of substrings that are simple RBS. The answers must be printed in the same order as the queries are specified in the input.",
    "note": "Consider the example test case. The answer to the first query is 3 , as there are three suitable substrings: s[ 3. . . 6] , s[ 3. . . 4] and s[ 5. . . 6] . The answer to the second query is 4 . The substrings are s[ 3. . . 6] , s[ 3. . . 4] , s[ 5. . . 6] and s[ 2. . . 7] . The answer to the third query is 1 . The substring is s[ 8. . . 9] . The answer to the fourth query is 6 . The substrings are s[ 3. . . 6] , s[ 3. . . 4] , s[ 5. . . 6] , s[ 2. . . 7] , s[ 8. . . 9] and s[ 2. . . 9] .",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1625E1"
  },
  {
    "title": "MinOr Tree",
    "url": "https://codeforces.com/problemset/problem/1624/G",
    "history": "Recently, Vlad has been carried away by spanning trees, so his friends, without hesitation, gave him a connected weighted undirected graph of n vertices and m edges for his birthday. Vlad defined the ority of a spanning tree as the bitwise OR of all its weights, and now he is interested in what is the minimum possible ority that can be achieved by choosing a certain spanning tree. A spanning tree is a connected subgraph of a given graph that does not contain cycles. In other words, you want to keep n- 1 edges so that the graph remains connected and the bitwise OR weights of the edges are as small as possible. You have to find the minimum bitwise OR itself.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. An empty line is written in front of each test case. This is followed by two numbers n and m ( 3 \u2264 n \u2264 2 \u00b7 10^ 5, n - 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and edges of the graph, respectively. The next m lines contain the description of the edges. Line i contains three numbers v_ i , u_ i and w_ i ( 1 \u2264 v_ i, u_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 9 , v_ i = \u0338 u_ i ) \u2014 the vertices that the edge connects and its weight. It is guaranteed that the sum m and the sum n over all test cases does not exceed 2 \u00b7 10^ 5 and each test case contains a connected graph.",
    "output": "Print t lines, each of which contains the answer to the corresponding set of input data \u2014 the minimum possible spanning tree ority.",
    "note": "Graph from the first test case. Ority of this tree equals to 2 or 2 = 2 and it' s minimal. Without excluding edge with weight 1 ority is 1 or 2 = 3.",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1624G"
  },
  {
    "title": "Trains and Airplanes",
    "url": "https://codeforces.com/problemset/problem/1621/H",
    "history": "Railway network of one city consists of n stations connected by n- 1 roads. These stations and roads forms a tree. Station 1 is a city center. For each road you know the time trains spend to pass this road. You can assume that trains don' t spend time on stops. Let' s define dist( v) as the time that trains spend to get from the station v to the station 1 . This railway network is splitted into zones named by first k capital latin letters. The zone of the i - th station is z_ i . City center is in the zone A. For all other stations it is guaranteed that the first station on the road from this station to the city center is either in the same zone or in the zone with lexicographically smaller name. Any road is completely owned by the zone of the most distant end from the city center. Tourist will arrive at the airport soon and then he will go to the city center. Here' s how the trip from station v to station 1 happends: At the moment 0 , tourist enters the train that follows directly from the station v to the station 1 . The trip will last for dist( v) minutes. Tourist can buy tickets for any subset of zones at any moment. Ticket for zone i costs pass_ i euro. Every T minutes since the start of the trip ( that is, at the moments T, 2T, . . . ) the control system will scan tourist. If at the moment of scan tourist is in the zone i without zone i ticket, he should pay fine_ i euro. Formally, the zone of tourist is determined in the following way: If tourist is at the station 1 , then he already at the city center so he shouldn' t pay fine. If tourist is at the station u = \u0338 1 , then he is in the zone z_ u . If tourist is moving from the station x to the station y that are directly connected by road, then he is in the zone z_ x . Note, that tourist can pay fine multiple times in the same zone. Tourist always selects such way to buy tickets and pay fines that minimizes the total cost of trip. Let f( v) be such cost for station v . Unfortunately, tourist doesn' t know the current values of pass_ i and fine_ i for different zones and he has forgot the location of the airport. He will ask you queries of 3 types: 1 i c \u2014 the cost of ticket in zone i has changed. Now pass_ i is c . 2 i c \u2014 the cost of fine in zone i has changed. Now fine_ i is c . 3 u \u2014 solve the following problem for current values of pass and fine : You are given the station u . Consider all the stations v that satisfy the following conditions: z_ v = z_ u The station u is on the path from the station v to the station 1 . Find the value of min( f( v) ) over all such stations v with the following assumption: tourist has the ticket for the zone of station z_ u .",
    "input": "The first line contains the single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of stations. Each of the next n - 1 lines contains three integers v_ i , u_ i , t_ i ( 1 \u2264 v_ i, u_ i \u2264 n, 1 \u2264 t_ i \u2264 10^ 9 ) \u2014 the ends of the i - th road and the time it takes a train to pass this road. It is guaranteed that this roads forms a tree. The next line contains the single integer k ( 1 \u2264 k \u2264 26 ) \u2014 the number of zones. The next line contains n symbols z_ 1z_ 2 . . . z_ n \u2014 z_ i is the name of the zone of the i - th station. It is guaranteed that the conditions from the second paragraph are satisfied. The next line contains k integers pass_ 1 , pass_ 2 , . . . , pass_ k ( 1 \u2264 pass_ i \u2264 10^ 9 ) \u2014 initial costs of tickets. The next line contains k integers fine_ 1 , fine_ 2 , . . . , fine_ k ( 1 \u2264 fine_ i \u2264 10^ 9 ) \u2014 initial fines. The next line contains the single integer T ( 1 \u2264 T \u2264 10^ 9 ) \u2014 the time gap between scans of control system. The next line contains the single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Next q lines contains queries as described in the statement. It is guaranteed that in the queries of the first and the second type i is a correct name of the zone ( one of the first k capital latin letters) and 1 \u2264 c \u2264 10^ 9 , and in the queries of the third type 1 \u2264 u \u2264 n .",
    "output": "For each query of the third type print the answer to it.",
    "note": "Note, that the fine can be cheaper than the pass. The railway network from the example. Green color is used for stations and roads of zone A, blue color is used for zone B and red color is used for zone D. The integer near each road is time that trains spend to pass it. In the first query, the airport can be located near the station 2 or near the station 4 . During the trip, tourist will always stay in the zone A. He already has the pass for this zone so the answer is 0 . After the second query, the cost of the pass in the zone A has become 10 . In the third query, the airport can be located only near the station 3 . Optimal solution will be to buy the pass for zone A. During the first 3 seconds of trip tourist will be in the zone B. Then he will move to the zone A and will be scanned there on the 4 - th and the 8 - th second of his ride. Since he have a pass for this zone, he won' t pay fines. After the forth query, the fine in the zone A has become 3 . In the fifth query, the airport can be located only near the station 7 and f( 7) = 6 . In the sixth query, the airport can be located near the station 6 or near the station 8 . Since f( 6) = 9 and f( 8) = 6 the answer is 6 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "1621H"
  },
  {
    "title": "Christmas Chocolates",
    "url": "https://codeforces.com/problemset/problem/1617/E",
    "history": "Christmas is coming, Icy has just received a box of chocolates from her grandparents! The box contains n chocolates. The i - th chocolate has a non- negative integer type a_ i . Icy believes that good things come in pairs. Unfortunately, all types of chocolates are distinct ( all a_ i are distinct) . Icy wants to make at least one pair of chocolates the same type. As a result, she asks her grandparents to perform some chocolate exchanges. Before performing any chocolate exchanges, Icy chooses two chocolates with indices x and y ( 1 \u2264 x, y \u2264 n , x y ) . In a chocolate exchange, Icy' s grandparents choose a non- negative integer k , such that 2^ k \u2265 a_ x , and change the type of the chocolate x from a_ x to 2^ k - a_ x ( that is, perform a_ x : = 2^ k - a_ x ) . The chocolate exchanges will be stopped only when a_ x = a_ y . Note that other pairs of equal chocolate types do not stop the procedure. Icy' s grandparents are smart, so they would choose the sequence of chocolate exchanges that minimizes the number of exchanges needed. Since Icy likes causing trouble, she wants to maximize the minimum number of exchanges needed by choosing x and y appropriately. She wonders what is the optimal pair ( x, y) such that the minimum number of exchanges needed is maximized across all possible choices of ( x, y) . Since Icy is not good at math, she hopes that you can help her solve the problem.",
    "input": "The first line of the input contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of chocolates. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that all a_ i are distinct.",
    "output": "Output three integers x , y , and m . x and y are indices of the optimal chocolates to perform exchanges on. Your output must satisfy 1 \u2264 x, y \u2264 n , x y . m is the number of exchanges needed to obtain a_ x = a_ y . We can show that m \u2264 10^ 9 for any pair of chocolates. If there are multiple solutions, output any.",
    "note": "In the first test case, the minimum number of exchanges needed to exchange a chocolate of type 6 to a chocolate of type 9 is 5 . The sequence of exchanges is as follows: 6 \u2192 2 \u2192 0 \u2192 1 \u2192 7 \u2192 9 . In the second test case, the minimum number of exchanges needed to exchange a chocolate of type 4 to a chocolate of type 8 is 2 . The sequence of exchanges is as follows: 4 \u2192 0 \u2192 8 .",
    "topics": [
      "dfs and similar",
      "dp",
      "games",
      "graphs",
      "implementation",
      "math",
      "number theory",
      "shortest paths",
      "trees"
    ],
    "id": "1617E"
  },
  {
    "title": "Just Add an Edge",
    "url": "https://codeforces.com/problemset/problem/1616/G",
    "history": "You are given a directed acyclic graph with n vertices and m edges. For all edges a \u2192 b in the graph, a < b holds. You need to find the number of pairs of vertices x , y , such that x > y and after adding the edge x \u2192 y to the graph, it has a Hamiltonian path.",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 5 ) : the number of test cases. The next lines contains the descriptions of the test cases. In the first line you are given two integers n and m ( 1 \u2264 n \u2264 150 000 , 0 \u2264 m \u2264min( 150 000, n( n- 1) / 2) ) : the number of vertices and edges in the graph. Each of the next m lines contains two integers a , b ( 1 \u2264 a < b \u2264 n ) , specifying an edge a \u2192 b in the graph. No edge a \u2192 b appears more than once.",
    "output": "For each test case, print one integer: the number of pairs of vertices x , y , x > y , such that after adding the edge x \u2192 y to the graph, it has a Hamiltonian path.",
    "note": "In the first example, any edge x \u2192 y such that x > y is valid, because there already is a path 1 \u2192 2 \u2192 3 . In the second example only the edge 4 \u2192 1 is valid. There is a path 3 \u2192 4 \u2192 1 \u2192 2 if this edge is added. In the third example you can add edges 2 \u2192 1 , 3 \u2192 1 , 4 \u2192 1 , 4 \u2192 2 .",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "1616G"
  },
  {
    "title": "Tricolor Triangles",
    "url": "https://codeforces.com/problemset/problem/1616/F",
    "history": "You are given a simple undirected graph with n vertices and m edges. Edge i is colored in the color c_ i , which is either 1 , 2 , or 3 , or left uncolored ( in this case, c_ i = - 1 ) . You need to color all of the uncolored edges in such a way that for any three pairwise adjacent vertices 1 \u2264 a < b < c \u2264 n , the colors of the edges a \u2194 b , b \u2194 c , and a \u2194 c are either pairwise different, or all equal. In case no such coloring exists, you need to determine that.",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 10 ) : the number of test cases. The following lines contain the description of the test cases. In the first line you are given two integers n and m ( 3 \u2264 n \u2264 64 , 0 \u2264 m \u2264min( 256, n( n- 1) / 2) ) : the number of vertices and edges in the graph. Each of the next m lines contains three integers a_ i , b_ i , and c_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i b_ i , c_ i is either - 1 , 1 , 2 , or 3 ) , denoting an edge between a_ i and b_ i with color c_ i . It is guaranteed that no two edges share the same endpoints.",
    "output": "For each test case, print m integers d_ 1, d_ 2, . . . , d_ m , where d_ i is the color of the i - th edge in your final coloring. If there is no valid way to finish the coloring, print - 1 .",
    "note": "",
    "topics": [
      "brute force",
      "graphs",
      "math",
      "matrices"
    ],
    "id": "1616F"
  },
  {
    "title": "Reindeer Games",
    "url": "https://codeforces.com/problemset/problem/1615/H",
    "history": "There are n reindeer at the North Pole, all battling for the highest spot on the \" Top Reindeer\" leaderboard on the front page of CodeNorses ( a popular competitive reindeer gaming website) . Interestingly, the \" Top Reindeer\" title is just a measure of upvotes and has nothing to do with their skill level in the reindeer games, but they still give it the utmost importance. Currently, the i - th reindeer has a score of a_ i . You would like to influence the leaderboard with some operations. In an operation, you can choose a reindeer, and either increase or decrease his score by 1 unit. Negative scores are allowed. You have m requirements for the resulting scores. Each requirement is given by an ordered pair ( u, v) , meaning that after all operations, the score of reindeer u must be less than or equal to the score of reindeer v . Your task is to perform the minimum number of operations so that all requirements will be satisfied.",
    "input": "The first line contains two integers n and m ( 2\u2264 n\u2264 1000 ; 1\u2264 m\u2264 1000 ) \u2014 the number of reindeer and requirements, respectively. The second line contains n integers a_ 1, . . . , a_ n ( 1\u2264 a_ i\u2264 10^ 9 ) , where a_ i is the current score of reindeer i . The next m lines describe the requirements. The i - th of these lines contains two integers u_ i and v_ i ( 1\u2264 u_ i, v_ i\u2264 n ; u_ i v_ i ) \u2014 the two reindeer of the i - th requirement.",
    "output": "Print n integers b_ 1, . . . , b_ n ( - 10^ 15\u2264 b_ i\u2264 10^ 15 ) , where b_ i is the score of the i - th reindeer after all operations. If there are multiple solutions achieving the minimum number of operations, you may output any. We can prove that there is always an optimal solution such that | b_ i| \u2264 10^ 15 for all i .",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "flows",
      "graphs",
      "shortest paths"
    ],
    "id": "1615H"
  },
  {
    "title": "Purple Crayon",
    "url": "https://codeforces.com/problemset/problem/1615/E",
    "history": "Two players, Red and Blue, are at it again, and this time they' re playing with crayons! The mischievous duo is now vandalizing a rooted tree, by coloring the nodes while playing their favorite game. The game works as follows: there is a tree of size n , rooted at node 1 , where each node is initially white. Red and Blue get one turn each. Red goes first. In Red' s turn, he can do the following operation any number of times: Pick any subtree of the rooted tree, and color every node in the subtree red. However, to make the game fair, Red is only allowed to color k nodes of the tree. In other words, after Red' s turn, at most k of the nodes can be colored red. Then, it' s Blue' s turn. Blue can do the following operation any number of times: Pick any subtree of the rooted tree, and color every node in the subtree blue. However, he' s not allowed to choose a subtree that contains a node already colored red, as that would make the node purple and no one likes purple crayon. Note: there' s no restriction on the number of nodes Blue can color, as long as he doesn' t color a node that Red has already colored. After the two turns, the score of the game is determined as follows: let w be the number of white nodes, r be the number of red nodes, and b be the number of blue nodes. The score of the game is w \u00b7 ( r - b) . Red wants to maximize this score, and Blue wants to minimize it. If both players play optimally, what will the final score of the game be?",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ) \u2014 the number of vertices in the tree and the maximum number of red nodes. Next n - 1 lines contains description of edges. The i - th line contains two space separated integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i = \u0338 v_ i ) \u2014 the i - th edge of the tree. It' s guaranteed that given edges form a tree.",
    "output": "Print one integer \u2014 the resulting score if both Red and Blue play optimally.",
    "note": "In the first test case, the optimal strategy is as follows: Red chooses to color the subtrees of nodes 2 and 3 . Blue chooses to color the subtree of node 4 . At the end of this process, nodes 2 and 3 are red, node 4 is blue, and node 1 is white. The score of the game is 1 \u00b7 ( 2 - 1) = 1 . In the second test case, the optimal strategy is as follows: Red chooses to color the subtree of node 4 . This colors both nodes 4 and 5 . Blue does not have any options, so nothing is colored blue. At the end of this process, nodes 4 and 5 are red, and nodes 1 , 2 and 3 are white. The score of the game is 3 \u00b7 ( 2 - 0) = 6 . For the third test case: The score of the game is 4 \u00b7 ( 2 - 1) = 4 .",
    "topics": [
      "data structures",
      "dfs and similar",
      "games",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1615E"
  },
  {
    "title": "X(or)-mas Tree",
    "url": "https://codeforces.com/problemset/problem/1615/D",
    "history": "' Twas the night before Christmas, and Santa' s frantically setting up his new Christmas tree! There are n nodes in the tree, connected by n- 1 edges. On each edge of the tree, there' s a set of Christmas lights, which can be represented by an integer in binary representation. He has m elves come over and admire his tree. Each elf is assigned two nodes, a and b , and that elf looks at all lights on the simple path between the two nodes. After this, the elf' s favorite number becomes the bitwise XOR of the values of the lights on the edges in that path. However, the North Pole has been recovering from a nasty bout of flu. Because of this, Santa forgot some of the configurations of lights he had put on the tree, and he has already left the North Pole! Fortunately, the elves came to the rescue, and each one told Santa what pair of nodes he was assigned ( a_ i, b_ i) , as well as the parity of the number of set bits in his favorite number. In other words, he remembers whether the number of 1 ' s when his favorite number is written in binary is odd or even. Help Santa determine if it' s possible that the memories are consistent, and if it is, remember what his tree looked like, and maybe you' ll go down in history!",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t cases follow. The first line of each test case contains two integers, n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the size of tree and the number of elves respectively. The next n- 1 lines of each test case each contains three integers, x , y , and v ( 1 \u2264 x, y \u2264 n ; - 1 \u2264 v < 2^ 30 ) \u2014 meaning that there' s an edge between nodes x and y . If v = - 1 : Santa doesn' t remember what the set of lights were on for this edge. v \u2265 0 : The set of lights on the edge is v . The next m lines of each test case each contains three integers, a , b , and p ( 1 \u2264 a, b \u2264 n ; a = \u0338 b ; 0 \u2264 p \u2264 1 ) \u2014 the nodes that the elf was assigned to, and the parity of the number of set bits in the elf' s favorite number. It is guaranteed that the sum of all n and the sum of all m don' t exceed 2 \u00b7 10^ 5 each. It is guaranteed that the given edges form a tree.",
    "output": "For each test case, first print either YES or NO ( in any case) , whether there' s a tree consistent with Santa' s memory or not. If the answer is YES, print n- 1 lines each containing three integers: x , y , and v ( 1 \u2264 x, y \u2264 n ; 0 \u2264 v < 2^ 30 ) \u2014 the edge and the integer on that edge. The set of edges must be the same as in the input, and if the value of some edge was specified earlier, it can not change. You can print the edges in any order. If there are multiple answers, print any.",
    "note": "The first test case is the image in the statement. One possible answer is assigning the value of the edge ( 1, 2) to 5 , and the value of the edge ( 2, 5) to 3 . This is correct because: The first elf goes from node 2 to node 3 . This elf' s favorite number is 4 , so he remembers the value 1 ( as 4 has an odd number of 1 bits in its binary representation) . The second elf goes from node 2 to node 5 . This elf' s favorite number is 3 , so he remembers the value 0 ( as 3 has an even number of 1 bits in its binary representation) . The third elf goes from node 5 to node 6 . This elf' s favorite number is 7 , so he remembers the value 1 ( as 7 has an odd number of 1 bits in its binary representation) . The fourth elf goes from node 6 to node 1 . This elf' s favorite number is 1 , so he remembers the value 1 ( as 1 has an odd number of 1 bits in its binary representation) . The fifth elf goes from node 4 to node 5 . This elf' s favorite number is 4 , so he remembers the number 1 ( as 4 has an odd number of 1 bits in its binary representation) . Note that there are other possible answers.",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1615D"
  },
  {
    "title": "Menorah",
    "url": "https://codeforces.com/problemset/problem/1615/C",
    "history": "There are n candles on a Hanukkah menorah, and some of its candles are initially lit. We can describe which candles are lit with a binary string s , where the i - th candle is lit if and only if s_ i= 1 . Initially, the candle lights are described by a string a . In an operation, you select a candle that is currently lit. By doing so, the candle you selected will remain lit, and every other candle will change ( if it was lit, it will become unlit and if it was unlit, it will become lit) . You would like to make the candles look the same as string b . Your task is to determine if it is possible, and if it is, find the minimum number of operations required.",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. Then t cases follow. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 10^ 5 ) \u2014 the number of candles. The second line contains a string a of length n consisting of symbols 0 and 1 \u2014 the initial pattern of lights. The third line contains a string b of length n consisting of symbols 0 and 1 \u2014 the desired pattern of lights. It is guaranteed that the sum of n does not exceed 10^ 5 .",
    "output": "For each test case, output the minimum number of operations required to transform a to b , or - 1 if it' s impossible.",
    "note": "In the first test case, the two strings are already equal, so we don' t have to perform any operations. In the second test case, we can perform a single operation selecting the second candle to transform 01 into 11 . In the third test case, it' s impossible to perform any operations because there are no lit candles to select. In the fourth test case, we can perform the following operations to transform a into b : Select the 7 - th candle: 100010111\u2192 011101 100 . Select the 2 - nd candle: 0 11101100\u2192 1 10010011 . Select the 1 - st candle: 110010011\u2192101101100 . In the fifth test case, we can perform the following operations to transform a into b : Select the 6 - th candle: 001011011\u2192 110101100 Select the 2 - nd candle: 110101100\u2192 011010011 Select the 8 - th candle: 011010011\u2192 100101110 Select the 7 - th candle: 100101110\u2192 011010101",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1615C"
  },
  {
    "title": "Crazy Robot",
    "url": "https://codeforces.com/problemset/problem/1613/E",
    "history": "There is a grid, consisting of n rows and m columns. Each cell of the grid is either free or blocked. One of the free cells contains a lab. All the cells beyond the borders of the grid are also blocked. A crazy robot has escaped from this lab. It is currently in some free cell of the grid. You can send one of the following commands to the robot: \" move right\" , \" move down\" , \" move left\" or \" move up\" . Each command means moving to a neighbouring cell in the corresponding direction. However, as the robot is crazy, it will do anything except following the command. Upon receiving a command, it will choose a direction such that it differs from the one in command and the cell in that direction is not blocked. If there is such a direction, then it will move to a neighbouring cell in that direction. Otherwise, it will do nothing. We want to get the robot to the lab to get it fixed. For each free cell, determine if the robot can be forced to reach the lab starting in this cell. That is, after each step of the robot a command can be sent to a robot such that no matter what different directions the robot chooses, it will end up in a lab.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. The first line of each testcase contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 6 ; n \u00b7 m \u2264 10^ 6 ) \u2014 the number of rows and the number of columns in the grid. The i - th of the next n lines provides a description of the i - th row of the grid. It consists of m elements of one of three types: ' . ' \u2014 the cell is free; ' # ' \u2014 the cell is blocked; ' L' \u2014 the cell contains a lab. The grid contains exactly one lab. The sum of n \u00b7 m over all testcases doesn' t exceed 10^ 6 .",
    "output": "For each testcase find the free cells that the robot can be forced to reach the lab from. Given the grid, replace the free cells ( marked with a dot) with a plus sign ( ' + ' ) for the cells that the robot can be forced to reach the lab from. Print the resulting grid.",
    "note": "In the first testcase there is no free cell that the robot can be forced to reach the lab from. Consider a corner cell. Given any direction, it will move to a neighbouring border grid that' s not a corner. Now consider a non- corner free cell. No matter what direction you send to the robot, it can choose a different direction such that it ends up in a corner. In the last testcase, you can keep sending the command that is opposite to the direction to the lab and the robot will have no choice other than move towards the lab.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "1613E"
  },
  {
    "title": "Mashtali: a Space Oddysey",
    "url": "https://codeforces.com/problemset/problem/1610/F",
    "history": "Lee was planning to get closer to Mashtali' s heart to proceed with his evil plan( which we' re not aware of, yet) , so he decided to beautify Mashtali' s graph. But he made several rules for himself. And also he was too busy with his plans that he didn' t have time for such minor tasks, so he asked you for help. Mashtali' s graph is an undirected weighted graph with n vertices and m edges with weights equal to either 1 or 2 . Lee wants to direct the edges of Mashtali' s graph so that it will be as beautiful as possible. Lee thinks that the beauty of a directed weighted graph is equal to the number of its Oddysey vertices. A vertex v is an Oddysey vertex if | d^ + ( v) - d^ - ( v) | = 1 , where d^ + ( v) is the sum of weights of the outgoing from v edges, and d^ - ( v) is the sum of the weights of the incoming to v edges. Find the largest possible beauty of a graph that Lee can achieve by directing the edges of Mashtali' s graph. In addition, find any way to achieve it. Note that you have to orient each edge.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 5; 1 \u2264 m \u2264 10^ 5) \u2014 the numbers of vertices and edges in the graph. The i - th line of the following m lines contains three integers u_ i , v_ i and w_ i ( 1 \u2264 u_ i , v_ i \u2264 n; u_ i = \u0338 v_ i; w_ i \u2208{ 1, 2} ) \u2014 the endpoints of the i - th edge and its weight. Note that the graph doesn' t have to be connected, and it might contain multiple edges.",
    "output": "In the first line print a single integer \u2014 the maximum beauty of the graph Lee can achieve. In the second line print a string of length m consisting of 1 s and 2 s \u2014 directions of the edges. If you decide to direct the i - th edge from vertex u_ i to vertex v_ i , i - th character of the string should be 1 . Otherwise, it should be 2 .",
    "note": "Explanation for the first sample: vertices 2 and 5 are Oddyseys. Explanation for the third sample: vertices 1 and 6 are Oddyseys.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "1610F"
  },
  {
    "title": "Social Network",
    "url": "https://codeforces.com/problemset/problem/1609/D",
    "history": "William arrived at a conference dedicated to cryptocurrencies. Networking, meeting new people, and using friends' connections are essential to stay up to date with the latest news from the world of cryptocurrencies. The conference has n participants, who are initially unfamiliar with each other. William can introduce any two people, a and b , who were not familiar before, to each other. William has d conditions, i ' th of which requires person x_ i to have a connection to person y_ i . Formally, two people x and y have a connection if there is such a chain p_ 1= x, p_ 2, p_ 3, . . . , p_ k= y for which for all i from 1 to k - 1 it' s true that two people with numbers p_ i and p_ i + 1 know each other. For every i ( 1 \u2264 i \u2264 d ) William wants you to calculate the maximal number of acquaintances one person can have, assuming that William satisfied all conditions from 1 and up to and including i and performed exactly i introductions. The conditions are being checked after William performed i introductions. The answer for each i must be calculated independently. It means that when you compute an answer for i , you should assume that no two people have been introduced to each other yet.",
    "input": "The first line contains two integers n and d ( 2 \u2264 n \u2264 10^ 3, 1 \u2264 d \u2264 n - 1 ) , the number of people, and number of conditions, respectively. Each of the next d lines each contain two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n, x_ i = \u0338 y_ i ) , the numbers of people which must have a connection according to condition i .",
    "output": "Output d integers. i th number must equal the number of acquaintances the person with the maximal possible acquaintances will have, if William performed i introductions and satisfied the first i conditions.",
    "note": "The explanation for the first test case: In this explanation, the circles and the numbers in them denote a person with the corresponding number. The line denotes that William introduced two connected people. The person marked with red has the most acquaintances. These are not the only correct ways to introduce people.",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1609D"
  },
  {
    "title": "Dominoes",
    "url": "https://codeforces.com/problemset/problem/1608/D",
    "history": "You are given n dominoes. Each domino has a left and a right cell. Each cell can be colored either black or white. Some cells are already colored, while some aren' t yet. The coloring is said to be valid if and only if it is possible to rearrange the dominoes in some order such that for each 1 \u2264 i \u2264 n the color of the right cell of the i - th domino is different from the color of the left cell of the ( ( i n) + 1) - st domino. Note that you can' t rotate the dominoes, so the left cell always remains the left cell, and the right cell always remains the right cell. Count the number of valid ways to color the yet uncolored cells of dominoes. Two ways are considered different if there is a cell that is colored white in one way and black in the other. In particular, colorings BW WB and WB BW different ( and both invalid) . As this number can be very big, output it modulo 998 244 353 .",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of dominoes. The next n lines describe dominoes. Each line contains two characters which represent the left and the right cell. Character B means that the corresponding cell is black, character W means that the corresponding cell is white, and ? means that the cell is yet to be colored.",
    "output": "Print a single integer \u2014 the answer to the problem.",
    "note": "In the first test case, there is only one domino, and we need the color of its right cell to be different from the color of its left cell. There is only one way to achieve this. In the second test case, there are only 2 such colorings: BB WW and WB WB.",
    "topics": [
      "combinatorics",
      "fft",
      "graphs",
      "math",
      "number theory"
    ],
    "id": "1608D"
  },
  {
    "title": "Game Master",
    "url": "https://codeforces.com/problemset/problem/1608/C",
    "history": "n players are playing a game. There are two different maps in the game. For each player, we know his strength on each map. When two players fight on a specific map, the player with higher strength on that map always wins. No two players have the same strength on the same map. You are the game master and want to organize a tournament. There will be a total of n- 1 battles. While there is more than one player in the tournament, choose any map and any two remaining players to fight on it. The player who loses will be eliminated from the tournament. In the end, exactly one player will remain, and he is declared the winner of the tournament. For each player determine if he can win the tournament.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of players. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 , a_ i = \u0338 a_ j for i = \u0338 j ) , where a_ i is the strength of the i - th player on the first map. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 , b_ i = \u0338 b_ j for i = \u0338 j ) , where b_ i is the strength of the i - th player on the second map. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a string of length n . i - th character should be \" 1\" if the i - th player can win the tournament, or \" 0\" otherwise.",
    "note": "In the first test case, the 4 - th player will beat any other player on any game, so he will definitely win the tournament. In the second test case, everyone can be a winner. In the third test case, there is only one player. Clearly, he will win the tournament.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "two pointers"
    ],
    "id": "1608C"
  },
  {
    "title": "Robot on the Board 2",
    "url": "https://codeforces.com/problemset/problem/1607/F",
    "history": "The robot is located on a checkered rectangular board of size n \u00d7 m ( n rows, m columns) . The rows in the board are numbered from 1 to n from top to bottom, and the columns \u2014 from 1 to m from left to right. The robot is able to move from the current cell to one of the four cells adjacent by side. Each cell has one of the symbols ' L' , ' R' , ' D' or ' U' written on it, indicating the direction in which the robot will move when it gets in that cell \u2014 left, right, down or up, respectively. The robot can start its movement in any cell. He then moves to the adjacent square in the direction indicated on the current square in one move. If the robot moves beyond the edge of the board, it falls and breaks. If the robot appears in the cell it already visited before, it breaks ( it stops and doesn' t move anymore) . Robot can choose any cell as the starting cell. Its goal is to make the maximum number of steps before it breaks or stops. Determine from which square the robot should start its movement in order to execute as many commands as possible. A command is considered successfully completed if the robot has moved from the square on which that command was written ( it does not matter whether to another square or beyond the edge of the board) .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases in the test. Each test case' s description is preceded by a blank line. Next is a line that contains integers n and m ( 1 \u2264 n \u2264 2000 ; 1 \u2264 m \u2264 2000 ) \u2014 the height and width of the board. This line followed by n lines, the i - th of which describes the i - th line of the board. Each of them is exactly m letters long and consists of symbols ' L' , ' R' , ' D' and ' U' . It is guaranteed that the sum of sizes of all boards in the input does not exceed 4\u00b710^ 6 .",
    "output": "For each test case, output three integers r , c and d ( 1 \u2264 r \u2264 n ; 1 \u2264 c \u2264 m ; d \u2265 0 ) , which denote that the robot should start moving from cell ( r, c) to make the maximum number of moves d . If there are several answers, output any of them.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "1607F"
  },
  {
    "title": "Frog Traveler",
    "url": "https://codeforces.com/problemset/problem/1601/B",
    "history": "Frog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor jump, he fell into a well of n meters depth. Now Gorf is on the bottom of the well and has a long way up. The surface of the well' s walls vary in quality: somewhere they are slippery, but somewhere have convenient ledges. In other words, if Gorf is on x meters below ground level, then in one jump he can go up on any integer distance from 0 to a_ x meters inclusive. ( Note that Gorf can' t jump down, only up) . Unfortunately, Gorf has to take a break after each jump ( including jump on 0 meters) . And after jumping up to position x meters below ground level, he' ll slip exactly b_ x meters down while resting. Calculate the minimum number of jumps Gorf needs to reach ground level.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 300 000 ) \u2014 the depth of the well. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 i ) , where a_ i is the maximum height Gorf can jump from i meters below ground level. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 n - i ) , where b_ i is the distance Gorf will slip down if he takes a break on i meters below ground level.",
    "output": "If Gorf can' t reach ground level, print - 1 . Otherwise, firstly print integer k \u2014 the minimum possible number of jumps. Then print the sequence d_ 1, d_ 2, . . . , d_ k where d_ j is the depth Gorf' ll reach after the j - th jump, but before he' ll slip down during the break. Ground level is equal to 0 . If there are multiple answers, print any of them.",
    "note": "In the first example, Gorf is on the bottom of the well and jump to the height 1 meter below ground level. After that he slip down by meter and stays on height 2 meters below ground level. Now, from here, he can reach ground level in one jump. In the second example, Gorf can jump to one meter below ground level, but will slip down back to the bottom of the well. That' s why he can' t reach ground level. In the third example, Gorf can reach ground level only from the height 5 meters below the ground level. And Gorf can reach this height using a series of jumps 10 \u21d2 9 9 \u21d2 4 5 where \u21d2 is the jump and is slipping during breaks.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths",
      "two pointers"
    ],
    "id": "1601B"
  },
  {
    "title": "Desert",
    "url": "https://codeforces.com/problemset/problem/1599/I",
    "history": "You are given an undirected graph of N nodes and M edges, E_ 1, E_ 2, . . . E_ M . A connected graph is a cactus if each of it' s edges belogs to at most one simple cycle. A graph is a desert if each of it' s connected components is a cactus. Find the number of pairs ( L, R) , ( 1 \u2264 L \u2264 R \u2264 M ) such that, if we delete all the edges except for E_ L, E_ L+ 1, . . . E_ R , the graph is a desert.",
    "input": "The first line contains two integers N and M ( 2 \u2264 N \u2264 2. 5 \u00d7 10^ 5 , 1 \u2264 M \u2264 5 \u00d7 10^ 5 ) . Each of the next M lines contains two integers. The i - th line describes the i - th edge. It contains integers U_ i and V_ i , the nodes connected by the i - th edge ( E_ i= ( U_ i, V_ i) ) . It is guaranteed that 1 \u2264 U_ i, V_ i \u2264 N and U_ i = \u0338 V_ i .",
    "output": "The output contains one integer number \u2013 the answer.",
    "note": "In the second example: Graphs for pairs ( 1, 1) , ( 2, 2) and ( 3, 3) are deserts because they don' t have any cycles. Graphs for pairs ( 1, 2) and ( 2, 3) have one cycle of length 2 so they are deserts.",
    "topics": [
      "data structures",
      "graphs"
    ],
    "id": "1599I"
  },
  {
    "title": "The Number of Imposters",
    "url": "https://codeforces.com/problemset/problem/1594/D",
    "history": "Theofanis started playing the new online game called \" Among them\" . However, he always plays with Cypriot players, and they all have the same name: \" Andreas\" ( the most common name in Cyprus) . In each game, Theofanis plays with n other players. Since they all have the same name, they are numbered from 1 to n . The players write m comments in the chat. A comment has the structure of \" i j c \" where i and j are two distinct integers and c is a string ( 1 \u2264 i, j \u2264 n ; i = \u0338 j ; c is either imposter or crewmate) . The comment means that player i said that player j has the role c . An imposter always lies, and a crewmate always tells the truth. Help Theofanis find the maximum possible number of imposters among all the other Cypriot players, or determine that the comments contradict each other ( see the notes for further explanation) . Note that each player has exactly one role: either imposter or crewmate.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of each test case follows. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 0 \u2264 m \u2264 5 \u00b7 10^ 5 ) \u2014 the number of players except Theofanis and the number of comments. Each of the next m lines contains a comment made by the players of the structure \" i j c \" where i and j are two distinct integers and c is a string ( 1 \u2264 i, j \u2264 n ; i = \u0338 j ; c is either imposter or crewmate) . There can be multiple comments for the same pair of ( i, j) . It is guaranteed that the sum of all n does not exceed 2 \u00b7 10^ 5 and the sum of all m does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the maximum possible number of imposters. If the comments contradict each other, print - 1 .",
    "note": "In the first test case, imposters can be Andreas 2 and 3 . In the second test case, imposters can be Andreas 1 , 2 , 3 and 5 . In the third test case, comments contradict each other. This is because player 1 says that player 2 is an imposter, and player 2 says that player 1 is a crewmate. If player 1 is a crewmate, then he must be telling the truth, so player 2 must be an imposter. But if player 2 is an imposter then he must be lying, so player 1 can' t be a crewmate. Contradiction.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "dsu",
      "graphs"
    ],
    "id": "1594D"
  },
  {
    "title": "Bakry and Partitioning",
    "url": "https://codeforces.com/problemset/problem/1592/C",
    "history": "Bakry faced a problem, but since he' s lazy to solve it, he asks for your help. You are given a tree of n nodes, the i - th node has value a_ i assigned to it for each i from 1 to n . As a reminder, a tree on n nodes is a connected graph with n- 1 edges. You want to delete at least 1 , but at most k- 1 edges from the tree, so that the following condition would hold: For every connected component calculate the bitwise XOR of the values of the nodes in it. Then, these values have to be the same for all connected components. Is it possible to achieve this condition?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4) . Description of the test cases follows. The first line of each test case contains two integers n and k ( 2 \u2264 k \u2264 n \u2264 10^ 5) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) . The i - th of the next n- 1 lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i= \u0338 v_ i ) , which means that there' s an edge between nodes u_ i and v_ i . It is guaranteed that the given graph is a tree. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, you should output a single string. If you can delete the edges according to the conditions written above, output \" YES\" ( without quotes) . Otherwise, output \" NO\" ( without quotes) . You can print each letter of \" YES\" and \" NO\" in any case ( upper or lower) .",
    "note": "It can be shown that the objection is not achievable for first, third, and fifth test cases. In the second test case, you can just remove all the edges. There will be 5 connected components, each containing only one node with value 3 , so the bitwise XORs will be 3 for all of them. In the fourth test case, this is the tree: . You can remove an edge ( 4, 5) The bitwise XOR of the first component will be, a_ 1 \u2295 a_ 2 \u2295 a_ 3 \u2295 a_ 4 = 1 \u2295 6 \u2295 4 \u2295 1 = 2 ( where \u2295 denotes the bitwise XOR) . The bitwise XOR of the second component will be, a_ 5 = 2 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1592C"
  },
  {
    "title": "Jumping Through the Array",
    "url": "https://codeforces.com/problemset/problem/1588/F",
    "history": "You are given an array of integers a of size n and a permutation p of size n . There are q queries of three types coming to you: For given numbers l and r , calculate the sum in array a on the segment from l to r : \u2211_ i= l^ r a_ i . You are given two numbers v and x . Let' s build a directed graph from the permutation p : it has n vertices and n edges i \u2192 p_ i . Let C be the set of vertices that are reachable from v in this graph. You should add x to all a_ u such that u is in C . You are given indices i and j . You should swap p_ i and p_ j . The graph corresponding to the permutation [ 2, 3, 1, 5, 4] . Please, process all queries and print answers to queries of type 1 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array and permutation. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 8 \u2264 a_ i \u2264 10^ 8 ) . The third line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . The fourth line contains a single integer q \u2014 the number of queries ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) . Next q lines contain description of queries. The i - th of them starts with an integer t_ i ( 1 \u2264 t_ i \u2264 3 ) \u2014 the query type. If t_ i = 1 , then the i - th line also contains two integers l , r ( 1 \u2264 l \u2264 r \u2264 n ) . If t_ i = 2 , then the i - th line also contains two integers v , x ( 1 \u2264 v \u2264 n , - 10^ 8 \u2264 x \u2264 10^ 8 ) . If t_ i = 3 , then the i - th line also contains also two integers i , j ( 1 \u2264 i, j \u2264 n ) .",
    "output": "For every first type query, print a single integer \u2014 the answer to this query.",
    "note": "In the first example: The graph corresponding to the initial permutation. There are 6 queries. The sum on the segment from 1 to 5 is a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5 = 6 + 9 + ( - 5) + 3 + 0 = 13 . If we start from 1 , we can reach { 1, 2, 3} . After this query a is: [ 7, 10, - 4, 3, 0] . The sum on the segment from 1 to 5 is a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5 = 6 + 9 + ( - 5) + 3 + 0 = 16 . After this query p = [ 4, 3, 1, 5, 2] . The graph corresponding to the new permutation. If we start from 2 , we can reach { 1, 2, 3, 4, 5} . After this query a is: [ 6, 9, - 5, 2, - 1] . The sum on the segment from 1 to 5 is a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5 = 6 + 9 + ( - 5) + 2 + ( - 1) = 11 .",
    "topics": [
      "binary search",
      "data structures",
      "graphs",
      "two pointers"
    ],
    "id": "1588F"
  },
  {
    "title": "Poachers",
    "url": "https://codeforces.com/problemset/problem/1585/G",
    "history": "Alice and Bob are two poachers who cut trees in a forest. A forest is a set of zero or more trees. A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a node v is the next vertex on the shortest path from v to the root. Children of vertex v are all nodes for which v is the parent. A vertex is a leaf if it has no children. In this problem we define the depth of vertex as number of vertices on the simple path from this vertex to the root. The rank of a tree is the minimum depth among its leaves. Initially there is a forest of rooted trees. Alice and Bob play a game on this forest. They play alternating turns with Alice going first. At the beginning of their turn, the player chooses a tree from the forest. Then the player chooses a positive cutting depth, which should not exceed the rank of the chosen tree. Then the player removes all vertices of that tree whose depth is less that or equal to the cutting depth. All other vertices of the tree form a set of rooted trees with root being the vertex with the smallest depth before the cut. All these trees are included in the game forest and the game continues. A player loses if the forest is empty at the beginning of his move. You are to determine whether Alice wins the game if both players play optimally.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 5 \u00b7 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 total number of vertices in the initial forest. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i \u2264 n ) \u2014 description of the forest. If p_ i = 0 , then the i - th vertex is the root of a tree, otherwise p_ i is the parent of the vertex i . It' s guaranteed that p defines a correct forest of rooted trees. It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" ( without quotes) if Alice wins, otherwise print \" NO\" ( without quotes) . You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case Bob has a symmetric strategy, so Alice cannot win. In the second test case Alice can choose the second tree and cutting depth 1 to get a forest on which she has a symmetric strategy. In third test case the rank of the only tree is 2 and both possible moves for Alice result in a loss. Bob either can make the forest with a symmetric strategy for himself, or clear the forest. In the fourth test case all leafs have the same depth, so Alice can clear the forest in one move.",
    "topics": [
      "dp",
      "games",
      "graphs",
      "trees"
    ],
    "id": "1585G"
  },
  {
    "title": "Strange LCS",
    "url": "https://codeforces.com/problemset/problem/1584/F",
    "history": "You are given n strings s_ 1, s_ 2, . . . , s_ n , each consisting of lowercase and uppercase English letters. In addition, it' s guaranteed that each character occurs in each string at most twice. Find the longest common subsequence of these strings. A string t is a subsequence of a string s if t can be obtained from s by deletion of several ( possibly, zero or all) symbols.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10 ) \u2014 the number of strings. Each of the next n lines contains the corresponding string s_ i . Each s_ i is non- empty, consists only of uppercase and lowercase English letters, and no character appears more than twice in each string.",
    "output": "For each test case print the answer in two lines: In the first line print the length of the longest common subsequence. In the second line print the longest common subsequence. If there are multiple such subsequences, print any of them.",
    "note": "In the first test case, the longest common subsequence is \" A\" . There are no common subsequences of length 2 . In the second test case, sets of characters of strings don' t intersect, so any non- empty string can' t be a common subsequence.",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "greedy",
      "strings"
    ],
    "id": "1584F"
  },
  {
    "title": "Moment of Bloom",
    "url": "https://codeforces.com/problemset/problem/1583/E",
    "history": "She does her utmost to flawlessly carry out a person' s last rites and preserve the world' s balance of yin and yang. Hu Tao, being the little prankster she is, has tried to scare you with this graph problem! You are given a connected undirected graph of n nodes with m edges. You also have q queries. Each query consists of two nodes a and b . Initially, all edges in the graph have a weight of 0 . For each query, you must choose a simple path starting from a and ending at b . Then you add 1 to every edge along this path. Determine if it' s possible, after processing all q queries, for all edges in this graph to have an even weight. If so, output the choice of paths for each query. If it is not possible, determine the smallest number of extra queries you could add to make it possible. It can be shown that this number will not exceed 10^ 18 under the given constraints. A simple path is defined as any path that does not visit a node more than once. An edge is said to have an even weight if its value is divisible by 2 .",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , n- 1 \u2264 m \u2264min( n( n- 1) / 2, 3 \u00b7 10^ 5) ) . Each of the next m lines contains two integers x and y ( 1 \u2264 x, y \u2264 n , x= \u0338 y ) indicating an undirected edge between node x and y . The input will not contain self- loops or duplicate edges, and the provided graph will be connected. The next line contains a single integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) . Each of the next q lines contains two integers a and b ( 1 \u2264 a, b \u2264 n, a = \u0338 b ) , the description of each query. It is guaranteed that nq \u2264 3 \u00b7 10^ 5 .",
    "output": "If it is possible to force all edge weights to be even, print \" YES\" on the first line, followed by 2q lines indicating the choice of path for each query in the same order the queries are given. For each query, the first line should contain a single integer x : the number of nodes in the chosen path. The next line should then contain x spaced separated integers p_ i indicating the path you take ( p_ 1 = a, p_ x = b and all numbers should fall between 1 and n ) . This path cannot contain duplicate nodes and must be a valid simple path in the graph. If it is impossible to force all edge weights to be even, print \" NO\" on the first line and the minimum number of added queries on the second line.",
    "note": "Here is what the queries look like for the first test case ( red corresponds to the 1st query, blue 2nd query, and green 3rd query) : Notice that every edge in the graph is part of either 0 or 2 colored query edges. The graph in the second test case looks like this: There does not exist an assignment of paths that will force all edges to have even weights with the given queries. One must add at least 2 new queries to obtain a set of queries that can satisfy the condition.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graph matchings",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1583E"
  },
  {
    "title": "Diameter of Graph",
    "url": "https://codeforces.com/problemset/problem/1581/B",
    "history": "CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k- 1 . Also, CQXYM doesn' t want a graph that contains self- loops or multiple edges ( i. e. each edge connects two different vertices and between each pair of vertices there is at most one edge) . The diameter of a graph is the maximum distance between any two nodes. The distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes. CQXYM wonders whether it is possible to create such a graph.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. The description of the test cases follows. Only one line of each test case contains three integers n( 1 \u2264 n \u2264 10^ 9) , m , k ( 0 \u2264 m, k \u2264 10^ 9) .",
    "output": "For each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, the graph' s diameter equal to 0. In the second test case, the graph' s diameter can only be 2. In the third test case, the graph' s diameter can only be 1.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1581B"
  },
  {
    "title": "Railway Construction",
    "url": "https://codeforces.com/problemset/problem/1580/E",
    "history": "Because the railway system in Gensokyo is often congested, as an enthusiastic engineer, Kawasiro Nitori plans to construct more railway to ease the congestion. There are n stations numbered from 1 to n and m two- way railways in Gensokyo. Every two- way railway connects two different stations and has a positive integer length d . No two two- way railways connect the same two stations. Besides, it is possible to travel from any station to any other using those railways. Among these n stations, station 1 is the main station. You can get to any station from any other station using only two- way railways. Because of the technological limitation, Nitori can only construct one- way railways, whose length can be arbitrary positive integer. Constructing a one- way railway from station u will costs w_ u units of resources, no matter where the railway ends. To ease the congestion, Nitori plans that after construction there are at least two shortest paths from station 1 to any other station, and these two shortest paths do not pass the same station except station 1 and the terminal. Besides, Nitori also does not want to change the distance of the shortest path from station 1 to any other station. Due to various reasons, sometimes the cost of building a new railway will increase uncontrollably. There will be a total of q occurrences of this kind of incident, and the i - th event will add additional amount of x_ i to the cost of building a new railway from the station k_ i . To save resources, before all incidents and after each incident, Nitori wants you to help her calculate the minimal cost of railway construction.",
    "input": "The first line contains three integers n , m , and q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 3 \u00b7 10^ 5 , 0 \u2264 q \u2264 2\u00b710^ 5 ) . The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) . Each of the next m lines contains three integers u , v , d ( 1 \u2264 u, v \u2264 n , u v , 1 \u2264 d \u2264 10^ 9 ) , denoting a two- way railway connecting station u and station v , with length d . The i - th of the next q lines contains two integers k_ i, x_ i ( 1 \u2264 k_ i \u2264 n, 1 \u2264 x_ i \u2264 4 \u00d7 10^ 8 ) .",
    "output": "Print q+ 1 lines, and the i - th of these lines contains one integer, denoting the minimal cost of railway construction after the i- 1 - th incident ( especially, the 0 - th incident means no incident occurred) .",
    "note": "In the second example, Nitori can build railways as follows: 1 \u2192 2 , 1 \u2192 3 , 1 \u2192 4 , 2 \u2192 8 , and the cost is 14 + 14 + 14 + 4 = 46 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "1580E"
  },
  {
    "title": "Array Stabilization (AND version)",
    "url": "https://codeforces.com/problemset/problem/1579/F",
    "history": "You are given an array a[ 0 . . . n - 1] = [ a_ 0, a_ 1, . . . , a_ n - 1] of zeroes and ones only. Note that in this problem, unlike the others, the array indexes are numbered from zero, not from one. In one step, the array a is replaced by another array of length n according to the following rules: First, a new array a^ \u2192 d is defined as a cyclic shift of the array a to the right by d cells. The elements of this array can be defined as a^ \u2192 d_ i = a_ ( i + n - d) n , where ( i + n - d) n is the remainder of integer division of i + n - d by n . It means that the whole array a^ \u2192 d can be represented as a sequence a^ \u2192 d = [ a_ n - d, a_ n - d + 1, . . . , a_ n - 1, a_ 0, a_ 1, . . . , a_ n - d - 1] Then each element of the array a_ i is replaced by a_ i & a^ \u2192 d_ i , where & is a logical \" AND\" operator. For example, if a = [ 0, 0, 1, 1] and d = 1 , then a^ \u2192 d = [ 1, 0, 0, 1] and the value of a after the first step will be [ 0 & 1, 0 & 0, 1 & 0, 1 & 1] , that is [ 0, 0, 0, 1] . The process ends when the array stops changing. For a given array a , determine whether it will consist of only zeros at the end of the process. If yes, also find the number of steps the process will take before it finishes.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of each test case description contains two integers: n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 array size and d ( 1 \u2264 d \u2264 n ) \u2014 cyclic shift offset. The second line of the description contains n space- separated integers a_ i ( 0 \u2264 a_ i \u2264 1 ) \u2014 elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 .",
    "output": "Print t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the number of steps after which the array will contain only zeros for the first time. If there are still elements equal to 1 in the array after the end of the process, print - 1.",
    "note": "In the third sample test case the array will change as follows: At the beginning a = [ 1, 1, 0, 1, 0] , and a^ \u2192 2 = [ 1, 0, 1, 1, 0] . Their element- by- element \" AND\" is equal to [ 1 & 1, 1 & 0, 0 & 1, 1 & 1, 0 & 0] = [ 1, 0, 0, 1, 0] Now a = [ 1, 0, 0, 1, 0] , then a^ \u2192 2 = [ 1, 0, 1, 0, 0] . Their element- by- element \" AND\" equals to [ 1 & 1, 0 & 0, 0 & 1, 1 & 0, 0 & 0] = [ 1, 0, 0, 0, 0] And finally, when a = [ 1, 0, 0, 0, 0] we get a^ \u2192 2 = [ 0, 0, 1, 0, 0] . Their element- by- element \" AND\" equals to [ 1 & 0, 0 & 0, 0 & 1, 0 & 0, 0 & 0] = [ 0, 0, 0, 0, 0] Thus, the answer is 3 steps. In the fourth sample test case, the array will not change as it shifts by 2 to the right, so each element will be calculated as 0 & 0 or 1 & 1 thus not changing its value. So the answer is - 1, the array will never contain only zeros.",
    "topics": [
      "brute force",
      "graphs",
      "math",
      "number theory",
      "shortest paths"
    ],
    "id": "1579F"
  },
  {
    "title": "Productive Meeting",
    "url": "https://codeforces.com/problemset/problem/1579/D",
    "history": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several ( as many as they want) times per meeting. Each person has limited sociability. The sociability of the i - th person is a non- negative integer a_ i . This means that after exactly a_ i talks this person leaves the meeting ( and does not talk to anyone else anymore) . If a_ i = 0 , the i - th person leaves the meeting immediately after it starts. A meeting is considered most productive if the maximum possible number of talks took place during it. You are given an array of sociability a , determine which people should talk to each other so that the total number of talks is as large as possible.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of each test case description contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014the number of people in the meeting. The second line consists of n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the sociability parameters of all people. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 . It is also guaranteed that the sum of all a_ i ( over all test cases and all i ) does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t answers to all test cases. On the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting. On each of the next k lines print two integers i and j ( 1 \u2264 i, j \u2264 n and i = \u0338 j ) \u2014 the numbers of people who will have another talk. If there are several possible answers, you may print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "1579D"
  },
  {
    "title": "Kingdom of Islands",
    "url": "https://codeforces.com/problemset/problem/1578/K",
    "history": "The Kingdom of Islands consists of p islands. As the king, you rule over the whole kingdom, while each island is ruled over by one or several jarls under your rule. In total, there are n jarls under your jurisdiction. Each island of the kingdom has its own strong traditions, so jarls that rule over the same island support each other and never have conflicts. The downsides of such strength are cultural conflicts between people inhabiting different islands. Thus, two jarls that rule over different islands are in conflict. However, recent years brought a few changes to traditional relations between the jarls. To your knowledge, there are exactly k pairs of jarls such that relationships between two jarls in the pair are different from the traditional. That is, if two jarls of the pair you know rule over the same island, these jarls are in conflict. If they rule over different islands, then they overcome cultural disagreement and there is no conflict between them anymore. As a true responsible king, you are worried about whether the kingdom is close to a major conflict. In order to estimate the current situation, you would like to find the largest possible group of jarls such that every two jarls in the group are in conflict.",
    "input": "The first line of the input consists of two integers p and n ( 1 \u2264 p \u2264 n \u2264 10^ 5 ; 1 \u2264 p \u2264 10^ 4 ) . The second line consists of n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 p ) . The integer s_ i denotes that the i - th jarl rules over the island number s_ i . It is guaranteed that each island is ruled by at least one jarl. The third line consists of a single integer k ( 0 \u2264 k \u2264 20 ) . Then k lines follow. The j - th of these lines consists of two distinct integers a_ j and b_ j ( 1 \u2264 a_ j < b_ j \u2264 n ) , denoting that the relation between the a_ j - th jarl and the b_ j - th jarl differs from traditional. It is guaranteed that no pair of jarls appears twice in this list.",
    "output": "In the first line print a single integer q between 1 and n \u2014 the largest possible number of jarls in a pairwise conflicting group. In the second line print q distinct integers between 1 and n \u2014 the numbers of jarls in the group. The numbers of jarls can be printed in any order.",
    "note": "The conflict graph for the last sample testcase is given below. Each circle represents an island.",
    "topics": [
      "brute force",
      "graphs",
      "implementation"
    ],
    "id": "1578K"
  },
  {
    "title": "Anti-Tetris",
    "url": "https://codeforces.com/problemset/problem/1578/A",
    "history": "Let us consider the game \" Sticky Tetris\" . In this game, there is a field of n \u00d7 m squares. Tiles appear on the field and the player can move the tiles. Each tile is a 4 - connected set of at most 7 squares. Each new tile appears in any position that fits inside the field, does not intersect any other tile, and the top cell of the tile is at the top row of the field. The player can move the tile left, right, and down, and at any moment the tile must still entirely fit inside the field and must not intersect other tiles. The player can stop the tile at any position at any time. After that, it cannot be moved. Since this is \" Sticky Tetris, \" the tile will not fall once stopped. You are given a final configuration of a \" Sticky Tetris\" game. You need to restore a sequence of steps that leads to that configuration if it exists.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 50 ) \u2014 the size of the playing field. The next n lines contain a string of m characters each. Each character could be either a ' . ' , or lowercase English letter. Connected components of the same letter correspond to a single tile. Each tile consists of at most 7 squares.",
    "output": "If there is no solution, print - 1 . Otherwise, print k \u2014 the number of different tiles that are placed on the field. On the next k lines print the sequence of steps for each of the tiles in the order they are placed. Each line consists of a number x followed by a string with steps. x ( 1 \u2264 x \u2264 m ) is the starting column of the leftmost square in the top row of the tile. The string consists of characters ' L' ( for left) , ' R' ( for right) , and ' D' ( for down) , describing the path of that tile, ending with a single character ' S' ( for stop) . The final position of the tile determines which tile is being placed. The string with steps can have at most n \u00b7 m + 1 characters.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "shortest paths"
    ],
    "id": "1578A"
  },
  {
    "title": "Occurrences",
    "url": "https://codeforces.com/problemset/problem/1574/F",
    "history": "A subarray of array a from index l to the index r is the array [ a_ l, a_ l+ 1, . . . , a_ r] . The number of occurrences of the array b in the array a is the number of subarrays of a such that they are equal to b . You are given n arrays A_ 1, A_ 2, . . . , A_ n ; the elements of these arrays are integers from 1 to k . You have to build an array a consisting of m integers from 1 to k in such a way that, for every given subarray A_ i , the number of occurrences of A_ i in the array a is not less than the number of occurrences of each non- empty subarray of A_ i in a . Note that if A_ i doesn' t occur in a , and no subarray of A_ i occurs in a , this condition is still met for A_ i . Your task is to calculate the number of different arrays a you can build, and print it modulo 998244353 .",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n, m, k \u2264 3 \u00b7 10^ 5 ) \u2014 the number of the given arrays, the desired length of the array a , and the upper bound on the values in the arrays. Then n lines follow. The i - th line represents the array A_ i . The first integer in the i - th line is c_ i ( 1 \u2264 c_ i \u2264 m ) \u2014 the number of elements in A_ i ; then, c_ i integers from 1 to k follow \u2014 the elements of the array A_ i . Additional constraint on the input: \u2211_ i= 1^ n c_ i \u2264 3 \u00b7 10^ 5 ; i. e. , the number of elements in the given arrays in total does not exceed 3 \u00b7 10^ 5 .",
    "output": "Print one integer \u2014 the number of different arrays a you can build, taken modulo 998244353 .",
    "note": "",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "dp",
      "dsu",
      "fft",
      "graphs"
    ],
    "id": "1574F"
  },
  {
    "title": "The Strongest Build",
    "url": "https://codeforces.com/problemset/problem/1574/D",
    "history": "Ivan is playing yet another roguelike computer game. He controls a single hero in the game. The hero has n equipment slots. There is a list of c_ i items for the i - th slot, the j - th of them increases the hero strength by a_ i, j . The items for each slot are pairwise distinct and are listed in the increasing order of their strength increase. So, a_ i, 1 < a_ i, 2 < . . . < a_ i, c_ i . For each slot Ivan chooses exactly one item. Let the chosen item for the i - th slot be the b_ i - th item in the corresponding list. The sequence of choices [ b_ 1, b_ 2, . . . , b_ n] is called a build. The strength of a build is the sum of the strength increases of the items in it. Some builds are banned from the game. There is a list of m pairwise distinct banned builds. It' s guaranteed that there' s at least one build that' s not banned. What is the build with the maximum strength that is not banned from the game? If there are multiple builds with maximum strength, print any of them.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10 ) \u2014 the number of equipment slots. The i - th of the next n lines contains the description of the items for the i - th slot. First, one integer c_ i ( 1 \u2264 c_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the number of items for the i - th slot. Then c_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, c_ i ( 1 \u2264 a_ i, 1 < a_ i, 2 < . . . < a_ i, c_ i\u2264 10^ 8 ) . The sum of c_ i doesn' t exceed 2 \u00b7 10^ 5 . The next line contains a single integer m ( 0 \u2264 m \u2264 10^ 5 ) \u2014 the number of banned builds. Each of the next m lines contains a description of a banned build \u2014 a sequence of n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 c_ i ) . The builds are pairwise distinct, and there' s at least one build that' s not banned.",
    "output": "Print the build with the maximum strength that is not banned from the game. If there are multiple builds with maximum strength, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "hashing",
      "implementation"
    ],
    "id": "1574D"
  },
  {
    "title": "Bridge Club",
    "url": "https://codeforces.com/problemset/problem/1572/D",
    "history": "There are currently n hot topics numbered from 0 to n- 1 at your local bridge club and 2^ n players numbered from 0 to 2^ n- 1 . Each player holds a different set of views on those n topics, more specifically, the i - th player holds a positive view on the j - th topic if i & 2^ j > 0 , and a negative view otherwise. Here & denotes the bitwise AND operation. You are going to organize a bridge tournament capable of accommodating at most k pairs of players ( bridge is played in teams of two people) . You can select teams arbitrarily while each player is in at most one team, but there is one catch: two players cannot be in the same pair if they disagree on 2 or more of those n topics, as they would argue too much during the play. You know that the i - th player will pay you a_ i dollars if they play in this tournament. Compute the maximum amount of money that you can earn if you pair the players in your club optimally.",
    "input": "The first line contains two integers n , k ( 1 \u2264 n \u2264 20 , 1 \u2264 k \u2264 200 ) \u2014 the number of hot topics and the number of pairs of players that your tournament can accommodate. The second line contains 2^ n integers a_ 0, a_ 1, . . . , a_ 2^ n- 1 ( 0 \u2264 a_ i \u2264 10^ 6 ) \u2014 the amounts of money that the players will pay to play in the tournament.",
    "output": "Print one integer: the maximum amount of money that you can earn if you pair the players in your club optimally under the above conditions.",
    "note": "In the first example, the best we can do is to pair together the 0 - th player and the 2 - nd player resulting in earnings of 8 + 5 = 13 dollars. Although pairing the 0 - th player with the 5 - th player would give us 8 + 10 = 18 dollars, we cannot do this because those two players disagree on 2 of the 3 hot topics. In the second example, we can pair the 0 - th player with the 1 - st player and pair the 2 - nd player with the 3 - rd player resulting in earnings of 7 + 4 + 5 + 7 = 23 dollars.",
    "topics": [
      "flows",
      "graph matchings",
      "graphs",
      "greedy"
    ],
    "id": "1572D"
  },
  {
    "title": "Book",
    "url": "https://codeforces.com/problemset/problem/1572/A",
    "history": "You are given a book with n chapters. Each chapter has a specified list of other chapters that need to be understood in order to understand this chapter. To understand a chapter, you must read it after you understand every chapter on its required list. Currently you don' t understand any of the chapters. You are going to read the book from the beginning till the end repeatedly until you understand the whole book. Note that if you read a chapter at a moment when you don' t understand some of the required chapters, you don' t understand this chapter. Determine how many times you will read the book to understand every chapter, or determine that you will never understand every chapter no matter how many times you read the book.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 2\u00b710^ 4 ) . The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 number of chapters. Then n lines follow. The i - th line begins with an integer k_ i ( 0 \u2264 k_ i \u2264 n- 1 ) \u2014 number of chapters required to understand the i - th chapter. Then k_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, k_ i ( 1 \u2264 a_ i, j\u2264 n, a_ i, j i, a_ i, j a_ i, l for j l ) follow \u2014 the chapters required to understand the i - th chapter. It is guaranteed that the sum of n and sum of k_ i over all testcases do not exceed 2\u00b710^ 5 .",
    "output": "For each test case, if the entire book can be understood, print how many times you will read it, otherwise print - 1 .",
    "note": "In the first example, we will understand chapters { 2, 4} in the first reading and chapters { 1, 3} in the second reading of the book. In the second example, every chapter requires the understanding of some other chapter, so it is impossible to understand the book. In the third example, every chapter requires only chapters that appear earlier in the book, so we can understand everything in one go. In the fourth example, we will understand chapters { 2, 3, 4} in the first reading and chapter 1 in the second reading of the book. In the fifth example, we will understand one chapter in every reading from 5 to 1 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dp",
      "graphs",
      "implementation",
      "sortings"
    ],
    "id": "1572A"
  },
  {
    "title": "Palindromic Hamiltonian Path",
    "url": "https://codeforces.com/problemset/problem/1569/F",
    "history": "You are given a simple undirected graph with n vertices, n is even. You are going to write a letter on each vertex. Each letter should be one of the first k letters of the Latin alphabet. A path in the graph is called Hamiltonian if it visits each vertex exactly once. A string is called palindromic if it reads the same from left to right and from right to left. A path in the graph is called palindromic if the letters on the vertices in it spell a palindromic string without changing the order. A string of length n is good if: each letter is one of the first k lowercase Latin letters; if you write the i - th letter of the string on the i - th vertex of the graph, there will exist a palindromic Hamiltonian path in the graph. Note that the path doesn' t necesserily go through the vertices in order 1, 2, . . . , n . Count the number of good strings.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n \u2264 12 ; n is even; 0 \u2264 m \u2264n \u00b7 ( n- 1) / 2 ; 1 \u2264 k \u2264 12 ) \u2014 the number of vertices in the graph, the number of edges in the graph and the number of first letters of the Latin alphabet that can be used. Each of the next m lines contains two integers v and u ( 1 \u2264 v, u \u2264 n ; v = \u0338 u ) \u2014 the edges of the graph. The graph doesn' t contain multiple edges and self- loops.",
    "output": "Print a single integer \u2014 number of good strings.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "dp",
      "graphs",
      "hashing"
    ],
    "id": "1569F"
  },
  {
    "title": "One-Four Overload",
    "url": "https://codeforces.com/problemset/problem/1567/F",
    "history": "Alice has an empty grid with n rows and m columns. Some of the cells are marked, and no marked cells are adjacent to the edge of the grid. ( Two squares are adjacent if they share a side. ) Alice wants to fill each cell with a number such that the following statements are true: every unmarked cell contains either the number 1 or 4 ; every marked cell contains the sum of the numbers in all unmarked cells adjacent to it ( if a marked cell is not adjacent to any unmarked cell, this sum is 0 ) ; every marked cell contains a multiple of 5 . Alice couldn' t figure it out, so she asks Bob to help her. Help Bob find any such grid, or state that no such grid exists.",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n, m \u2264 500 ) \u2014 the number of rows and the number of columns in the grid, respectively. Then n lines follow, each containing m characters. Each of these characters is either ' . ' or ' X' \u2014 an unmarked and a marked cell, respectively. No marked cells are adjacent to the edge of the grid.",
    "output": "Output \" ' NO\" if no suitable grid exists. Otherwise, output \" ' YES\" ' . Then output n lines of m space- separated integers \u2014 the integers in the grid.",
    "note": "It can be shown that no such grid exists for the second test.",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation"
    ],
    "id": "1567F"
  },
  {
    "title": "Four Vertices",
    "url": "https://codeforces.com/problemset/problem/1566/G",
    "history": "You are given an undirected weighted graph, consisting of n vertices and m edges. Some queries happen with this graph: Delete an existing edge from the graph. Add a non- existing edge to the graph. At the beginning and after each query, you should find four different vertices a , b , c , d such that there exists a path between a and b , there exists a path between c and d , and the sum of lengths of two shortest paths from a to b and from c to d is minimal. The answer to the query is the sum of the lengths of these two shortest paths. The length of the path is equal to the sum of weights of edges in this path.",
    "input": "The first line contains two integers n and m ( 4 \u2264 n, m \u2264 10^ 5) \u2014 the number of vertices and edges in the graph respectively. Each of the next m lines contain three integers v , u , w ( 1 \u2264 v, u \u2264 n, v = \u0338 u , 1 \u2264 w \u2264 10^ 9 ) \u2014 this triple means that there is an edge between vertices v and u with weight w . The next line contains a single integer q ( 0 \u2264 q \u2264 10^ 5) \u2014 the number of queries. The next q lines contain the queries of two types: 0 v u \u2014 this query means deleting an edge between v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) . It is guaranteed that such edge exists in the graph. 1 v u w \u2014 this query means adding an edge between vertices v and u with weight w ( 1 \u2264 v, u \u2264 n, v = \u0338 u , 1 \u2264 w \u2264 10^ 9 ) . It is guaranteed that there was no such edge in the graph. It is guaranteed that the initial graph does not contain multiple edges. At the beginning and after each query, the graph doesn' t need to be connected. It is guaranteed that at each moment the number of edges will be at least 4 . It can be proven, that at each moment there exist some four vertices a , b , c , d such that there exists a path between vertices a and b , and there exists a path between vertices c and d .",
    "output": "Print q + 1 integers \u2014 the minimal sum of lengths of shortest paths between chosen pairs of vertices before the queries and after each of them.",
    "note": "Before the queries you can choose vertices ( a, b) = ( 3, 2) and ( c, d) = ( 1, 4) . The sum of lengths of two shortest paths is 3 + 1 = 4 . After the first query you can choose vertices ( a, b) = ( 2, 5) and ( c, d) = ( 1, 4) . The sum of lengths of two shortest paths is 2 + 1 = 3 . After the second query you can choose vertices ( a, b) = ( 3, 4) and ( c, d) = ( 2, 5) . The sum of lengths of two shortest paths is 1 + 2 = 3 . After the third query, you can choose vertices ( a, b) = ( 2, 6) and ( c, d) = ( 4, 5) . The sum of lengths of two shortest paths is 4 + 3 = 7 . After the last query you can choose vertices ( a, b) = ( 1, 6) and ( c, d) = ( 2, 5) . The sum of lengths of two shortest paths is 3 + 2 = 5 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1566G"
  },
  {
    "title": "Mocha and Diana (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1559/D2",
    "history": "This is the hard version of the problem. The only difference between the two versions is the constraint on n . You can make hacks only if all versions of the problem are solved. A forest is an undirected graph without cycles ( not necessarily connected) . Mocha and Diana are friends in Zhijiang, both of them have a forest with nodes numbered from 1 to n , and they would like to add edges to their forests such that: After adding edges, both of their graphs are still forests. They add the same edges. That is, if an edge ( u, v) is added to Mocha' s forest, then an edge ( u, v) is added to Diana' s forest, and vice versa. Mocha and Diana want to know the maximum number of edges they can add, and which edges to add.",
    "input": "The first line contains three integers n , m_ 1 and m_ 2 ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m_ 1, m_ 2 < n ) \u2014 the number of nodes and the number of initial edges in Mocha' s forest and Diana' s forest. Each of the next m_ 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edges in Mocha' s forest. Each of the next m_ 2 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edges in Diana' s forest.",
    "output": "The first line contains only one integer h , the maximum number of edges Mocha and Diana can add. Each of the next h lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edge you add each time. If there are multiple correct answers, you can print any one of them.",
    "note": "In the first example, we cannot add any edge. In the second example, the initial forests are as follows. We can add an edge ( 2, 4) .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "trees",
      "two pointers"
    ],
    "id": "1559D2"
  },
  {
    "title": "Mocha and Diana (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1559/D1",
    "history": "This is the easy version of the problem. The only difference between the two versions is the constraint on n . You can make hacks only if all versions of the problem are solved. A forest is an undirected graph without cycles ( not necessarily connected) . Mocha and Diana are friends in Zhijiang, both of them have a forest with nodes numbered from 1 to n , and they would like to add edges to their forests such that: After adding edges, both of their graphs are still forests. They add the same edges. That is, if an edge ( u, v) is added to Mocha' s forest, then an edge ( u, v) is added to Diana' s forest, and vice versa. Mocha and Diana want to know the maximum number of edges they can add, and which edges to add.",
    "input": "The first line contains three integers n , m_ 1 and m_ 2 ( 1 \u2264 n \u2264 1000 , 0 \u2264 m_ 1, m_ 2 < n ) \u2014 the number of nodes and the number of initial edges in Mocha' s forest and Diana' s forest. Each of the next m_ 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edges in Mocha' s forest. Each of the next m_ 2 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edges in Diana' s forest.",
    "output": "The first line contains only one integer h , the maximum number of edges Mocha and Diana can add ( in each forest) . Each of the next h lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edge you add each time. If there are multiple correct answers, you can print any one of them.",
    "note": "In the first example, we cannot add any edge. In the second example, the initial forests are as follows. We can add an edge ( 2, 4) .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1559D1"
  },
  {
    "title": "Mocha and Hiking",
    "url": "https://codeforces.com/problemset/problem/1559/C",
    "history": "The city where Mocha lives in is called Zhijiang. There are n+ 1 villages and 2n- 1 directed roads in this city. There are two kinds of roads: n- 1 roads are from village i to village i+ 1 , for all 1\u2264 i \u2264 n- 1 . n roads can be described by a sequence a_ 1, . . . , a_ n . If a_ i= 0 , the i - th of these roads goes from village i to village n+ 1 , otherwise it goes from village n+ 1 to village i , for all 1\u2264 i\u2264 n . Mocha plans to go hiking with Taki this weekend. To avoid the trip being boring, they plan to go through every village exactly once. They can start and finish at any villages. Can you help them to draw up a plan?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 20 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 4 ) \u2014 indicates that the number of villages is n+ 1 . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) . If a_ i= 0 , it means that there is a road from village i to village n+ 1 . If a_ i= 1 , it means that there is a road from village n+ 1 to village i . It is guaranteed that the sum of n over all test cases does not exceed 10^ 4 .",
    "output": "For each test case, print a line with n+ 1 integers, where the i - th number is the i - th village they will go through. If the answer doesn' t exist, print - 1 . If there are multiple correct answers, you can print any one of them.",
    "note": "In the first test case, the city looks like the following graph: So all possible answers are ( 1 \u2192 4 \u2192 2 \u2192 3) , ( 1 \u2192 2 \u2192 3 \u2192 4) . In the second test case, the city looks like the following graph: So all possible answers are ( 4 \u2192 1 \u2192 2 \u2192 3) , ( 1 \u2192 2 \u2192 3 \u2192 4) , ( 3 \u2192 4 \u2192 1 \u2192 2) , ( 2 \u2192 3 \u2192 4 \u2192 1) .",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1559C"
  },
  {
    "title": "Down Below",
    "url": "https://codeforces.com/problemset/problem/1558/E",
    "history": "In a certain video game, the player controls a hero characterized by a single integer value: power. On the current level, the hero got into a system of n caves numbered from 1 to n , and m tunnels between them. Each tunnel connects two distinct caves. Any two caves are connected with at most one tunnel. Any cave can be reached from any other cave by moving via tunnels. The hero starts the level in cave 1 , and every other cave contains a monster. The hero can move between caves via tunnels. If the hero leaves a cave and enters a tunnel, he must finish his movement and arrive at the opposite end of the tunnel. The hero can use each tunnel to move in both directions. However, the hero can not use the same tunnel twice in a row. Formally, if the hero has just moved from cave i to cave j via a tunnel, he can not head back to cave i immediately after, but he can head to any other cave connected to cave j with a tunnel. It is known that at least two tunnels come out of every cave, thus, the hero will never find himself in a dead end even considering the above requirement. To pass the level, the hero must beat the monsters in all the caves. When the hero enters a cave for the first time, he will have to fight the monster in it. The hero can beat the monster in cave i if and only if the hero' s power is strictly greater than a_ i . In case of beating the monster, the hero' s power increases by b_ i . If the hero can' t beat the monster he' s fighting, the game ends and the player loses. After the hero beats the monster in cave i , all subsequent visits to cave i won' t have any consequences: the cave won' t have any monsters, and the hero' s power won' t change either. Find the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 3 \u2264 n \u2264 1000 ; n \u2264 m \u2264 min( n( n- 1) / 2, 2000) ) \u2014 the number of caves and tunnels. The second line contains n- 1 integers a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 values the hero' s power are compared to while fighting monsters in caves 2, 3, . . . , n . The third line contains n- 1 integers b_ 2, b_ 3, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 increases applied to the hero' s power for beating monsters in caves 2, 3, . . . , n . Each of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) \u2014 the numbers of caves connected with a tunnel. No two caves are connected with more than one tunnel. Any cave can be reached from any other cave by moving via tunnels. At least two tunnels come out of every cave. It is guaranteed that the sum of n over all test cases does not exceed 1000 , and the sum of m over all test cases does not exceed 2000 .",
    "output": "For each test case print a single integer \u2014 the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.",
    "note": "In the first test case, the hero can pass the level with initial power 15 as follows: move from cave 1 to cave 2 : since 15 > 11 , the hero beats the monster, and his power increases to 15 + 8 = 23 ; move from cave 2 to cave 3 : since 23 > 22 , the hero beats the monster, and his power increases to 23 + 7 = 30 ; move from cave 3 to cave 4 : since 30 > 13 , the hero beats the monster, and his power increases to 30 + 5 = 35 . In the second test case, the situation is similar except that the power increases for beating monsters in caves 2 and 4 are exchanged. The hero can follow a different route, 1 \u2192 4 \u2192 3 \u2192 2 , and pass the level with initial power 15 . In the third test case, the hero can pass the level with initial power 19 as follows: move from cave 1 to cave 2 : since 19 > 10 , the hero beats the monster, and his power increases to 19 + 7 = 26 ; move from cave 2 to cave 4 : since 26 > 20 , the hero beats the monster, and his power increases to 26 + 10 = 36 ; move from cave 4 to cave 5 : since 36 > 30 , the hero beats the monster, and his power increases to 36 + 5 = 41 ; move from cave 5 to cave 2 : there is no monster in this cave anymore, nothing happens; move from cave 2 to cave 3 : since 41 > 40 , the hero beats the monster, and his power increases to 41 + 2 = 43 .",
    "topics": [
      "binary search",
      "dfs and similar",
      "graphs",
      "greedy",
      "meet-in-the-middle",
      "shortest paths"
    ],
    "id": "1558E"
  },
  {
    "title": "DIY Tree",
    "url": "https://codeforces.com/problemset/problem/1556/H",
    "history": "William really likes puzzle kits. For one of his birthdays, his friends gifted him a complete undirected edge- weighted graph consisting of n vertices. He wants to build a spanning tree of this graph, such that for the first k vertices the following condition is satisfied: the degree of a vertex with index i does not exceed d_ i . Vertices from k + 1 to n may have any degree. William wants you to find the minimum weight of a spanning tree that satisfies all the conditions. A spanning tree is a subset of edges of a graph that forms a tree on all n vertices of the graph. The weight of a spanning tree is defined as the sum of weights of all the edges included in a spanning tree.",
    "input": "The first line of input contains two integers n , k ( 2 \u2264 n \u2264 50 , 1 \u2264 k \u2264 min( n - 1, 5) ) . The second line contains k integers d_ 1, d_ 2, . . . , d_ k ( 1 \u2264 d_ i \u2264 n ) . The i - th of the next n - 1 lines contains n - i integers w_ i, i+ 1, w_ i, i+ 2, . . . , w_ i, n ( 1 \u2264 w_ i, j\u2264 100 ) : weights of edges ( i, i+ 1) , ( i, i+ 2) , . . . , ( i, n) .",
    "output": "Print one integer: the minimum weight of a spanning tree under given degree constraints for the first k vertices.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "math",
      "probabilities"
    ],
    "id": "1556H"
  },
  {
    "title": "Sports Betting",
    "url": "https://codeforces.com/problemset/problem/1556/F",
    "history": "William is not only interested in trading but also in betting on sports matches. n teams participate in each match. Each team is characterized by strength a_ i . Each two teams i < j play with each other exactly once. Team i wins with probability a_ i/ a_ i + a_ j and team j wins with probability a_ j/ a_ i + a_ j . The team is called a winner if it directly or indirectly defeated all other teams. Team a defeated ( directly or indirectly) team b if there is a sequence of teams c_ 1 , c_ 2 , . . . c_ k such that c_ 1 = a , c_ k = b and team c_ i defeated team c_ i + 1 for all i from 1 to k - 1 . Note that it is possible that team a defeated team b and in the same time team b defeated team a . William wants you to find the expected value of the number of winners.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 14 ) , which is the total number of teams participating in a match. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the strengths of teams participating in a match.",
    "output": "Output a single integer \u2014 the expected value of the number of winners of the tournament modulo 10^ 9 + 7 . Formally, let M = 10^ 9+ 7 . It can be demonstrated that the answer can be presented as a irreducible fraction p/ q , where p and q are integers and q \u2261\u03380 M . Output a single integer equal to p \u00b7 q^ - 1 M . In other words, output an integer x such that 0 \u2264 x < M and x \u00b7 q \u2261 p M .",
    "note": "To better understand in which situation several winners are possible let' s examine the second test: One possible result of the tournament is as follows ( a \u2192 b means that a defeated b ) : 1 \u2192 2 2 \u2192 3 3 \u2192 1 1 \u2192 4 1 \u2192 5 2 \u2192 4 2 \u2192 5 3 \u2192 4 3 \u2192 5 4 \u2192 5 Or more clearly in the picture: In this case every team from the set { 1, 2, 3 } directly or indirectly defeated everyone. I. e. : 1 st defeated everyone because they can get to everyone else in the following way 1 \u2192 2 , 1 \u2192 2 \u2192 3 , 1 \u2192 4 , 1 \u2192 5 . 2 nd defeated everyone because they can get to everyone else in the following way 2 \u2192 3 , 2 \u2192 3 \u2192 1 , 2 \u2192 4 , 2 \u2192 5 . 3 rd defeated everyone because they can get to everyone else in the following way 3 \u2192 1 , 3 \u2192 1 \u2192 2 , 3 \u2192 4 , 3 \u2192 5 . Therefore the total number of winners is 3 .",
    "topics": [
      "bitmasks",
      "combinatorics",
      "dp",
      "graphs",
      "math",
      "probabilities"
    ],
    "id": "1556F"
  },
  {
    "title": "Good Graph",
    "url": "https://codeforces.com/problemset/problem/1555/F",
    "history": "You have an undirected graph consisting of n vertices with weighted edges. A simple cycle is a cycle of the graph without repeated vertices. Let the weight of the cycle be the XOR of weights of edges it consists of. Let' s say the graph is good if all its simple cycles have weight 1 . A graph is bad if it' s not good. Initially, the graph is empty. Then q queries follow. Each query has the next type: u v x \u2014 add edge between vertices u and v of weight x if it doesn' t make the graph bad. For each query print, was the edge added or not.",
    "input": "The first line contains two integers n and q ( 3 \u2264 n \u2264 3 \u00b7 10^ 5 ; 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) \u2014 the number of vertices and queries. Next q lines contain queries \u2014 one per line. Each query contains three integers u , v and x ( 1 \u2264 u, v \u2264 n ; u = \u0338 v ; 0 \u2264 x \u2264 1 ) \u2014 the vertices of the edge and its weight. It' s guaranteed that there are no multiple edges in the input.",
    "output": "For each query, print YES if the edge was added to the graph, or NO otherwise ( both case- insensitive) .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1555F"
  },
  {
    "title": "Common Divisor Graph",
    "url": "https://codeforces.com/problemset/problem/1553/G",
    "history": "Consider a sequence of distinct integers a_ 1, . . . , a_ n , each representing one node of a graph. There is an edge between two nodes if the two values are not coprime, i. e. they have a common divisor greater than 1 . There are q queries, in each query, you want to get from one given node a_ s to another a_ t . In order to achieve that, you can choose an existing value a_ i and create new value a_ n+ 1 = a_ i \u00b7 ( 1 + a_ i) , with edges to all values that are not coprime with a_ n+ 1 . Also, n gets increased by 1 . You can repeat that operation multiple times, possibly making the sequence much longer and getting huge or repeated values. What' s the minimum possible number of newly created nodes so that a_ t is reachable from a_ s ? Queries are independent. In each query, you start with the initial sequence a given in the input.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 150 000 , 1 \u2264 q \u2264 300 000 ) \u2014 the size of the sequence and the number of queries. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 2 \u2264 a_ i \u2264 10^ 6 , a_ i = \u0338 a_ j if i j ) . The j - th of the following q lines contains two distinct integers s_ j and t_ j ( 1 \u2264 s_ j, t_ j \u2264 n , s_ j = \u0338 t_ j ) \u2014 indices of nodes for j - th query.",
    "output": "Print q lines. The j - th line should contain one integer: the minimum number of new nodes you create in order to move from a_ s_ j to a_ t_ j .",
    "note": "In the first example, you can first create new value 2 \u00b7 3 = 6 or 10 \u00b7 11 = 110 or 3 \u00b7 4 = 12 . None of that is needed in the first query because you can already get from a_ 1 = 2 to a_ 2 = 10 . In the second query, it' s optimal to first create 6 or 12 . For example, creating 6 makes it possible to get from a_ 1 = 2 to a_ 3 = 3 with a path ( 2, 6, 3) . In the last query of the second example, we want to get from a_ 3 = 7 to a_ 5 = 25 . One way to achieve that is to first create 6 \u00b7 7 = 42 and then create 25 \u00b7 26 = 650 . The final graph has seven nodes and it contains a path from a_ 3 = 7 to a_ 5 = 25 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dsu",
      "graphs",
      "hashing",
      "math",
      "number theory"
    ],
    "id": "1553G"
  },
  {
    "title": "Permutation Shift",
    "url": "https://codeforces.com/problemset/problem/1553/E",
    "history": "An identity permutation of length n is an array [ 1, 2, 3, . . . , n] . We performed the following operations to an identity permutation of length n : firstly, we cyclically shifted it to the right by k positions, where k is unknown to you ( the only thing you know is that 0 \u2264 k \u2264 n - 1 ) . When an array is cyclically shifted to the right by k positions, the resulting array is formed by taking k last elements of the original array ( without changing their relative order) , and then appending n - k first elements to the right of them ( without changing relative order of the first n - k elements as well) . For example, if we cyclically shift the identity permutation of length 6 by 2 positions, we get the array [ 5, 6, 1, 2, 3, 4] ; secondly, we performed the following operation at most m times: pick any two elements of the array and swap them. You are given the values of n and m , and the resulting array. Your task is to find all possible values of k in the cyclic shift operation.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains two integers n and m ( 3 \u2264 n \u2264 3 \u00b7 10^ 5 ; 0 \u2264 m \u2264n/ 3 ) . The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , each integer from 1 to n appears in this sequence exactly once) \u2014 the resulting array. The sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print the answer in the following way: firstly, print one integer r ( 0 \u2264 r \u2264 n ) \u2014 the number of possible values of k for the cyclic shift operation; secondly, print r integers k_ 1, k_ 2, . . . , k_ r ( 0 \u2264 k_ i \u2264 n - 1 ) \u2014 all possible values of k in increasing order.",
    "note": "Consider the example: in the first test case, the only possible value for the cyclic shift is 3 . If we shift [ 1, 2, 3, 4] by 3 positions, we get [ 2, 3, 4, 1] . Then we can swap the 3 - rd and the 4 - th elements to get the array [ 2, 3, 1, 4] ; in the second test case, the only possible value for the cyclic shift is 0 . If we shift [ 1, 2, 3] by 0 positions, we get [ 1, 2, 3] . Then we don' t change the array at all ( we stated that we made at most 1 swap) , so the resulting array stays [ 1, 2, 3] ; in the third test case, all values from 0 to 2 are possible for the cyclic shift: if we shift [ 1, 2, 3] by 0 positions, we get [ 1, 2, 3] . Then we can swap the 1 - st and the 3 - rd elements to get [ 3, 2, 1] ; if we shift [ 1, 2, 3] by 1 position, we get [ 3, 1, 2] . Then we can swap the 2 - nd and the 3 - rd elements to get [ 3, 2, 1] ; if we shift [ 1, 2, 3] by 2 positions, we get [ 2, 3, 1] . Then we can swap the 1 - st and the 2 - nd elements to get [ 3, 2, 1] ; in the fourth test case, we stated that we didn' t do any swaps after the cyclic shift, but no value of cyclic shift could produce the array [ 1, 2, 3, 4, 6, 5] .",
    "topics": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "math"
    ],
    "id": "1553E"
  },
  {
    "title": "Array Differentiation",
    "url": "https://codeforces.com/problemset/problem/1552/D",
    "history": "You are given a sequence of n integers a_ 1, a_ 2, . . . , a_ n . Does there exist a sequence of n integers b_ 1, b_ 2, . . . , b_ n such that the following property holds? For each 1 \u2264 i \u2264 n , there exist two ( not necessarily distinct) indices j and k ( 1 \u2264 j, k \u2264 n ) such that a_ i = b_ j - b_ k .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 20 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10 ) . The second line of each test case contains the n integers a_ 1, . . . , a_ n ( - 10^ 5 \u2264 a_ i \u2264 10^ 5 ) .",
    "output": "For each test case, output a line containing YES if a sequence b_ 1, . . . , b_ n satisfying the required property exists, and NO otherwise.",
    "note": "In the first test case, the sequence b = [ - 9, 2, 1, 3, - 2] satisfies the property. Indeed, the following holds: a_ 1 = 4 = 2 - ( - 2) = b_ 2 - b_ 5 ; a_ 2 = - 7 = - 9 - ( - 2) = b_ 1 - b_ 5 ; a_ 3 = - 1 = 1 - 2 = b_ 3 - b_ 2 ; a_ 4 = 5 = 3 - ( - 2) = b_ 4 - b_ 5 ; a_ 5 = 10 = 1 - ( - 9) = b_ 3 - b_ 1 . In the second test case, it is sufficient to choose b = [ 0] , since a_ 1 = 0 = 0 - 0 = b_ 1 - b_ 1 . In the third test case, it is possible to show that no sequence b of length 3 satisfies the property.",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "math"
    ],
    "id": "1552D"
  },
  {
    "title": "Running for Gold",
    "url": "https://codeforces.com/problemset/problem/1552/B",
    "history": "The Olympic Games have just started and Federico is eager to watch the marathon race. There will be n athletes, numbered from 1 to n , competing in the marathon, and all of them have taken part in 5 important marathons, numbered from 1 to 5 , in the past. For each 1\u2264 i\u2264 n and 1\u2264 j\u2264 5 , Federico remembers that athlete i ranked r_ i, j - th in marathon j ( e. g. , r_ 2, 4= 3 means that athlete 2 was third in marathon 4 ) . Federico considers athlete x superior to athlete y if athlete x ranked better than athlete y in at least 3 past marathons, i. e. , r_ x, j< r_ y, j for at least 3 distinct values of j . Federico believes that an athlete is likely to get the gold medal at the Olympics if he is superior to all other athletes. Find any athlete who is likely to get the gold medal ( that is, an athlete who is superior to all other athletes) , or determine that there is no such athlete.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 50 000 ) \u2014 the number of athletes. Then n lines follow, each describing the ranking positions of one athlete. The i - th of these lines contains the 5 integers r_ i, 1, r_ i, 2, r_ i, 3, r_ i, 4, r_ i, 5 ( 1\u2264 r_ i, j\u2264 50 000 ) \u2014 the ranking positions of athlete i in the past 5 marathons. It is guaranteed that, in each of the 5 past marathons, the n athletes have distinct ranking positions, i. e. , for each 1\u2264 j\u2264 5 , the n values r_ 1, j, r_ 2, j, . . . , r_ n, j are distinct. It is guaranteed that the sum of n over all test cases does not exceed 50 000 .",
    "output": "For each test case, print a single integer \u2014 the number of an athlete who is likely to get the gold medal ( that is, an athlete who is superior to all other athletes) . If there are no such athletes, print - 1 . If there is more than such one athlete, print any of them.",
    "note": "Explanation of the first test case: There is only one athlete, therefore he is superior to everyone else ( since there is no one else) , and thus he is likely to get the gold medal. Explanation of the second test case: There are n= 3 athletes. Athlete 1 is superior to athlete 2 . Indeed athlete 1 ranks better than athlete 2 in the marathons 1 , 2 and 3 . Athlete 2 is superior to athlete 3 . Indeed athlete 2 ranks better than athlete 3 in the marathons 1 , 2 , 4 and 5 . Athlete 3 is superior to athlete 1 . Indeed athlete 3 ranks better than athlete 1 in the marathons 3 , 4 and 5 . Explanation of the third test case: There are n= 3 athletes. Athlete 1 is superior to athletes 2 and 3 . Since he is superior to all other athletes, he is likely to get the gold medal. Athlete 2 is superior to athlete 3 . Athlete 3 is not superior to any other athlete. Explanation of the fourth test case: There are n= 6 athletes. Athlete 1 is superior to athletes 3 , 4 , 6 . Athlete 2 is superior to athletes 1 , 4 , 6 . Athlete 3 is superior to athletes 2 , 4 , 6 . Athlete 4 is not superior to any other athlete. Athlete 5 is superior to athletes 1 , 2 , 3 , 4 , 6 . Since he is superior to all other athletes, he is likely to get the gold medal. Athlete 6 is only superior to athlete 4 .",
    "topics": [
      "combinatorics",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1552B"
  },
  {
    "title": "Jumping Around",
    "url": "https://codeforces.com/problemset/problem/1550/F",
    "history": "There is an infinite pond that can be represented with a number line. There are n rocks in the pond, numbered from 1 to n . The i - th rock is located at an integer coordinate a_ i . The coordinates of the rocks are pairwise distinct. The rocks are numbered in the increasing order of the coordinate, so a_ 1 < a_ 2 < . . . < a_ n . A robot frog sits on the rock number s . The frog is programmable. It has a base jumping distance parameter d . There also is a setting for the jumping distance range. If the jumping distance range is set to some integer k , then the frog can jump from some rock to any rock at a distance from d - k to d + k inclusive in any direction. The distance between two rocks is an absolute difference between their coordinates. You are assigned a task to implement a feature for the frog. Given two integers i and k determine if the frog can reach a rock number i from a rock number s performing a sequence of jumps with the jumping distance range set to k . The sequence can be arbitrarily long or empty. You will be given q testcases for that feature, the j - th testcase consists of two integers i and k . Print \" Yes\" if the i - th rock is reachable and \" No\" otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" , \" Yes\" and ' YES\" ' will be recognized as a positive answer) .",
    "input": "The first line contains four integers n , q , s and d ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ; 1 \u2264 s \u2264 n ; 1 \u2264 d \u2264 10^ 6 ) \u2014 the number of rocks, the number of testcases, the starting rock and the base jumping distance parameter. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the coordinates of the rocks. The coordinates of the rocks are pairwise distinct. The rocks are numbered in the increasing order of distance from the land, so a_ 1 < a_ 2 < . . . < a_ n . Each of the next q lines contains two integers i and k ( 1 \u2264 i \u2264 n ; 1 \u2264 k \u2264 10^ 6 ) \u2014 the parameters to the testcase.",
    "output": "For each of the testcases print an answer. If there is a sequence of jumps from a rock number s to a rock number i with the jumping distance range set to k , then print \" Yes\" . Otherwise, print \" No\" .",
    "note": "Explanation of the first example: In the first testcase the destination rock is the same as the starting rock, thus no jumps are required to reach it. In the second testcase the frog can jump any distance in the range [ 5 - 2; 5 + 2] . Thus, it can reach rock number 5 ( by jumping 7 to the right) and rock number 3 ( by jumping 3 to the left) . From rock number 3 it can reach rock number 2 ( by jumping 5 to the left) . From rock number 2 it can reach rock number 1 ( by jumping 4 to the left) . However, there is no way to reach rock number 7 . In the third testcase the frog can jump any distance in the range [ 5 - 3; 5 + 3] . Thus, it can reach rock number 7 by jumping to rock 5 first and to 7 afterwards. The fourth testcase is shown in the explanation for the second testcase.",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp",
      "dsu",
      "graphs",
      "shortest paths"
    ],
    "id": "1550F"
  },
  {
    "title": "Gregor and the Pawn Game",
    "url": "https://codeforces.com/problemset/problem/1549/B",
    "history": "There is a chessboard of size n by n . The square in the i - th row from top and j - th column from the left is labelled ( i, j) . Currently, Gregor has some pawns in the n - th row. There are also enemy pawns in the 1 - st row. On one turn, Gregor moves one of his pawns. A pawn can move one square up ( from ( i, j) to ( i- 1, j) ) if there is no pawn in the destination square. Additionally, a pawn can move one square diagonally up ( from ( i, j) to either ( i- 1, j- 1) or ( i- 1, j+ 1) ) if and only if there is an enemy pawn in that square. The enemy pawn is also removed. Gregor wants to know what is the maximum number of his pawns that can reach row 1 ? Note that only Gregor takes turns in this game, and the enemy pawns never move. Also, when Gregor' s pawn reaches row 1 , it is stuck and cannot make any further moves.",
    "input": "The first line of the input contains one integer t ( 1\u2264 t\u2264 2\u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of three lines. The first line contains a single integer n ( 2\u2264 n\u2264 2\u00b710^ 5 ) \u2014 the size of the chessboard. The second line consists of a string of binary digits of length n , where a 1 in the i - th position corresponds to an enemy pawn in the i - th cell from the left, and 0 corresponds to an empty cell. The third line consists of a string of binary digits of length n , where a 1 in the i - th position corresponds to a Gregor' s pawn in the i - th cell from the left, and 0 corresponds to an empty cell. It is guaranteed that the sum of n across all test cases is less than 2\u00b710^ 5 .",
    "output": "For each test case, print one integer: the maximum number of Gregor' s pawns which can reach the 1 - st row.",
    "note": "In the first example, Gregor can simply advance all 3 of his pawns forward. Thus, the answer is 3 . In the second example, Gregor can guarantee that all 4 of his pawns reach the enemy row, by following the colored paths as demonstrated in the diagram below. Remember, only Gregor takes turns in this \" game\" ! In the third example, Gregor' s only pawn is stuck behind the enemy pawn, and cannot reach the end. In the fourth example, Gregor has no pawns, so the answer is clearly 0 .",
    "topics": [
      "dfs and similar",
      "dp",
      "flows",
      "graph matchings",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1549B"
  },
  {
    "title": "Gregor and the Two Painters",
    "url": "https://codeforces.com/problemset/problem/1548/E",
    "history": "Two painters, Amin and Benj, are repainting Gregor' s living room ceiling! The ceiling can be modeled as an n \u00d7 m grid. For each i between 1 and n , inclusive, painter Amin applies a_ i layers of paint to the entire i - th row. For each j between 1 and m , inclusive, painter Benj applies b_ j layers of paint to the entire j - th column. Therefore, the cell ( i, j) ends up with a_ i+ b_ j layers of paint. Gregor considers the cell ( i, j) to be badly painted if a_ i+ b_ j \u2264 x . Define a badly painted region to be a maximal connected component of badly painted cells, i. e. a connected component of badly painted cells such that all adjacent to the component cells are not badly painted. Two cells are considered adjacent if they share a side. Gregor is appalled by the state of the finished ceiling, and wants to know the number of badly painted regions.",
    "input": "The first line contains three integers n , m and x ( 1 \u2264 n, m \u2264 2\u00b7 10^ 5 , 1 \u2264 x \u2264 2\u00b7 10^ 5 ) \u2014 the dimensions of Gregor' s ceiling, and the maximum number of paint layers in a badly painted cell. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2\u00b7 10^ 5 ) , the number of paint layers Amin applies to each row. The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ j \u2264 2\u00b7 10^ 5 ) , the number of paint layers Benj applies to each column.",
    "output": "Print a single integer, the number of badly painted regions.",
    "note": "The diagram below represents the first example. The numbers to the left of each row represent the list a , and the numbers above each column represent the list b . The numbers inside each cell represent the number of paint layers in that cell. The colored cells correspond to badly painted cells. The red and blue cells respectively form 2 badly painted regions.",
    "topics": [
      "data structures",
      "divide and conquer",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1548E"
  },
  {
    "title": "Web of Lies",
    "url": "https://codeforces.com/problemset/problem/1548/A",
    "history": "When you play the game of thrones, you win, or you die. There is no middle ground. Cersei Lannister, A Game of Thrones by George R. R. MartinThere are n nobles, numbered from 1 to n . Noble i has a power of i . There are also m \" friendships\" . A friendship between nobles a and b is always mutual. A noble is defined to be vulnerable if both of the following conditions are satisfied: the noble has at least one friend, and all of that noble' s friends have a higher power. You will have to process the following three types of queries. Add a friendship between nobles u and v . Remove a friendship between nobles u and v . Calculate the answer to the following process. The process: all vulnerable nobles are simultaneously killed, and all their friendships end. Then, it is possible that new nobles become vulnerable. The process repeats itself until no nobles are vulnerable. It can be proven that the process will end in finite time. After the process is complete, you need to calculate the number of remaining nobles. Note that the results of the process are not carried over between queries, that is, every process starts with all nobles being alive!",
    "input": "The first line contains the integers n and m ( 1 \u2264 n \u2264 2\u00b7 10^ 5 , 0 \u2264 m \u2264 2\u00b7 10^ 5 ) \u2014 the number of nobles and number of original friendships respectively. The next m lines each contain the integers u and v ( 1 \u2264 u, v \u2264 n , u v ) , describing a friendship. No friendship is listed twice. The next line contains the integer q ( 1 \u2264 q \u2264 2\u00b710^ 5 ) \u2014 the number of queries. The next q lines contain the queries themselves, each query has one of the following three formats. 1 u v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 add a friendship between u and v . It is guaranteed that u and v are not friends at this moment. 2 u v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 remove a friendship between u and v . It is guaranteed that u and v are friends at this moment. 3 \u2014 print the answer to the process described in the statement.",
    "output": "For each type 3 query print one integer to a new line. It is guaranteed that there will be at least one type 3 query.",
    "note": "Consider the first example. In the first type 3 query, we have the diagram below. In the first round of the process, noble 1 is weaker than all of his friends ( 2 and 3 ) , and is thus killed. No other noble is vulnerable in round 1. In round 2, noble 3 is weaker than his only friend, noble 4 , and is therefore killed. At this point, the process ends, and the answer is 2 . In the second type 3 query, the only surviving noble is 4 . The second example consists of only one type 3 query. In the first round, two nobles are killed, and in the second round, one noble is killed. The final answer is 1 , since only one noble survives.",
    "topics": [
      "brute force",
      "graphs",
      "greedy"
    ],
    "id": "1548A"
  },
  {
    "title": "How Many Paths?",
    "url": "https://codeforces.com/problemset/problem/1547/G",
    "history": "You are given a directed graph G which can contain loops ( edges from a vertex to itself) . Multi- edges are absent in G which means that for all ordered pairs ( u, v) exists at most one edge from u to v . Vertices are numbered from 1 to n . A path from u to v is a sequence of edges such that: vertex u is the start of the first edge in the path; vertex v is the end of the last edge in the path; for all pairs of adjacent edges next edge starts at the vertex that the previous edge ends on. We will assume that the empty sequence of edges is a path from u to u . For each vertex v output one of four values: 0 , if there are no paths from 1 to v ; 1 , if there is only one path from 1 to v ; 2 , if there is more than one path from 1 to v and the number of paths is finite; - 1 , if the number of paths from 1 to v is infinite. Let' s look at the example shown in the figure. Then: the answer for vertex 1 is 1 : there is only one path from 1 to 1 ( path with length 0 ) ; the answer for vertex 2 is 0 : there are no paths from 1 to 2 ; the answer for vertex 3 is 1 : there is only one path from 1 to 3 ( it is the edge ( 1, 3) ) ; the answer for vertex 4 is 2 : there are more than one paths from 1 to 4 and the number of paths are finite ( two paths: [ ( 1, 3) , ( 3, 4) ] and [ ( 1, 4) ] ) ; the answer for vertex 5 is - 1 : the number of paths from 1 to 5 is infinite ( the loop can be used in a path many times) ; the answer for vertex 6 is - 1 : the number of paths from 1 to 6 is infinite ( the loop can be used in a path many times) .",
    "input": "The first contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then t test cases follow. Before each test case, there is an empty line. The first line of the test case contains two integers n and m ( 1 \u2264 n \u2264 4 \u00b7 10^ 5, 0 \u2264 m \u2264 4 \u00b7 10^ 5 ) \u2014 numbers of vertices and edges in graph respectively. The next m lines contain edges descriptions. Each line contains two integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) \u2014 the start and the end of the i - th edge. The vertices of the graph are numbered from 1 to n . The given graph can contain loops ( it is possible that a_ i = b_ i ) , but cannot contain multi- edges ( it is not possible that a_ i = a_ j and b_ i = b_ j for i j ) . The sum of n over all test cases does not exceed 4 \u00b7 10^ 5 . Similarly, the sum of m over all test cases does not exceed 4 \u00b7 10^ 5 .",
    "output": "Output t lines. The i - th line should contain an answer for the i - th test case: a sequence of n integers from - 1 to 2 .",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1547G"
  },
  {
    "title": "AquaMoon and Permutations",
    "url": "https://codeforces.com/problemset/problem/1545/C",
    "history": "Cirno has prepared n arrays of length n each. Each array is a permutation of n integers from 1 to n . These arrays are special: for all 1 \u2264 i \u2264 n , if we take the i - th element of each array and form another array of length n with these elements, the resultant array is also a permutation of n integers from 1 to n . In the other words, if you put these n arrays under each other to form a matrix with n rows and n columns, this matrix is a Latin square. Afterwards, Cirno added additional n arrays, each array is a permutation of n integers from 1 to n . For all 1 \u2264 i \u2264 n , there exists at least one position 1 \u2264 k \u2264 n , such that for the i - th array and the ( n + i) - th array, the k - th element of both arrays is the same. Notice that the arrays indexed from n + 1 to 2n don' t have to form a Latin square. Also, Cirno made sure that for all 2n arrays, no two arrays are completely equal, i. e. for all pair of indices 1 \u2264 i < j \u2264 2n , there exists at least one position 1 \u2264 k \u2264 n , such that the k - th elements of the i - th and j - th array are different. Finally, Cirno arbitrarily changed the order of 2n arrays. AquaMoon calls a subset of all 2n arrays of size n good if these arrays from a Latin square. AquaMoon wants to know how many good subsets exist. Because this number may be particularly large, find it modulo 998 244 353 . Also, she wants to find any good subset. Can you help her?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 5 \u2264 n \u2264 500 ) . Then 2n lines followed. The i - th of these lines contains n integers, representing the i - th array. It is guaranteed, that the sum of n over all test cases does not exceed 500 .",
    "output": "For each test case print two lines. In the first line, print the number of good subsets by modulo 998 244 353 . In the second line, print n indices from 1 to 2n \u2014 indices of the n arrays that form a good subset ( you can print them in any order) . If there are several possible answers \u2014 print any of them.",
    "note": "In the first test case, the number of good subsets is 1 . The only such subset is the set of arrays with indices 1 , 2 , 3 , 4 , 5 , 6 , 7 . In the second test case, the number of good subsets is 2 . They are 1 , 3 , 5 , 6 , 10 or 2 , 4 , 7 , 8 , 9 .",
    "topics": [
      "2-sat",
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "graph matchings",
      "graphs"
    ],
    "id": "1545C"
  },
  {
    "title": "The Final Pursuit",
    "url": "https://codeforces.com/problemset/problem/1543/E",
    "history": "Finally, you have defeated Razor and now, you are the Most Wanted street racer. Sergeant Cross has sent the full police force after you in a deadly pursuit. Fortunately, you have found a hiding spot but you fear that Cross and his force will eventually find you. To increase your chances of survival, you want to tune and repaint your BMW M3 GTR. The car can be imagined as a permuted n - dimensional hypercube. A simple n - dimensional hypercube is an undirected unweighted graph built recursively as follows: Take two simple ( n- 1) - dimensional hypercubes one having vertices numbered from 0 to 2^ n- 1- 1 and the other having vertices numbered from 2^ n- 1 to 2^ n- 1 . A simple 0 - dimensional Hypercube is just a single vertex. Add an edge between the vertices i and i+ 2^ n- 1 for each 0\u2264 i < 2^ n- 1 . A permuted n - dimensional hypercube is formed by permuting the vertex numbers of a simple n - dimensional hypercube in any arbitrary manner. Examples of a simple and permuted 3 - dimensional hypercubes are given below: Note that a permuted n - dimensional hypercube has the following properties: There are exactly 2^ n vertices. There are exactly n\u00b7 2^ n- 1 edges. Each vertex is connected to exactly n other vertices. There are no self- loops or duplicate edges. Let' s denote the permutation used to generate the permuted n - dimensional hypercube, representing your car, from a simple n - dimensional hypercube by P . Before messing up the functionalities of the car, you want to find this permutation so that you can restore the car if anything goes wrong. But the job isn' t done yet. You have n different colours numbered from 0 to n- 1 . You want to colour the vertices of this permuted n - dimensional hypercube in such a way that for each and every vertex u satisfying 0\u2264 u < 2^ n and for each and every colour c satisfying 0\u2264 c < n , there is at least one vertex v adjacent to u having a colour c . In other words, from each and every vertex, it must be possible to reach a vertex of any colour by just moving to an adjacent vertex. Given the permuted n - dimensional hypercube, find any valid permutation P and colouring.",
    "input": "The first line of input contains a single integer t ( 1\u2264 t\u2264 4096 ) \u2014 the number of test cases. For each test case, the first line contains a single integer n ( 1\u2264 n\u2264 16 ) . Each of the next n\u00b7 2^ n- 1 lines contain two integers u and v ( 0\u2264 u, v < 2^ n ) denoting that there is an edge between the vertices numbered u and v . It is guaranteed that the graph described in the input is a permuted n - dimensional hypercube. Additionally, it is guaranteed that the sum of 2^ n over all test cases does not exceed 2^ 16= 65 536 .",
    "output": "For each test case, print two lines. In the first line, output any permutation P of length 2^ n that can be used to transform a simple n - dimensional hypercube to the permuted n - dimensional hypercube given in the input. Two permuted hypercubes are considered the same if they have the same set of edges. If there are multiple answers, output any of them. In the second line, print the colouring. If there is no way to colour the vertices satisfying the conditions, output - 1 . Otherwise, output a single line containing 2^ n space separated integers. The i - th integer must be the colour of the vertex numbered ( i- 1) in the permuted n - dimensional hypercube. If there are multiple answers, output any of them.",
    "note": "The colouring and the permuted hypercube for the first test case is shown below: The colouring and the permuted hypercube for the second test case is shown below: The permuted hypercube for the third test case is given in the problem statement. However, it can be shown that there exists no way to colour that cube satifying all the conditions. Note that some other permutations like [ 0, 5, 7, 3, 1, 2, 4, 6] and [ 0, 1, 5, 2, 7, 4, 3, 6] will also give the same permuted hypercube.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "divide and conquer",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1543E"
  },
  {
    "title": "Tree Array",
    "url": "https://codeforces.com/problemset/problem/1540/B",
    "history": "You are given a tree consisting of n nodes. You generate an array from the tree by marking nodes one by one. Initially, when no nodes are marked, a node is equiprobably chosen and marked from the entire tree. After that, until all nodes are marked, a node is equiprobably chosen and marked from the set of unmarked nodes with at least one edge to a marked node. It can be shown that the process marks all nodes in the tree. The final array a is the list of the nodes' labels in order of the time each node was marked. Find the expected number of inversions in the array that is generated by the tree and the aforementioned process. The number of inversions in an array a is the number of pairs of indices ( i, j) such that i < j and a_ i > a_ j . For example, the array [ 4, 1, 3, 2] contains 4 inversions: ( 1, 2) , ( 1, 3) , ( 1, 4) , ( 3, 4) .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 200 ) \u2014 the number of nodes in the tree. The next n - 1 lines each contains two integers x and y ( 1 \u2264 x, y \u2264 n ; x = \u0338 y ) , denoting an edge between node x and y . It' s guaranteed that the given edges form a tree.",
    "output": "Output the expected number of inversions in the generated array modulo 10^ 9+ 7 . Formally, let M = 10^ 9+ 7 . It can be shown that the answer can be expressed as an irreducible fraction p/ q , where p and q are integers and q \u2261\u03380 M . Output the integer equal to p \u00b7 q^ - 1 M . In other words, output such an integer x that 0 \u2264 x < M and x \u00b7 q \u2261 p M .",
    "note": "This is the tree from the first sample: For the first sample, the arrays are almost fixed. If node 2 is chosen initially, then the only possible array is [ 2, 1, 3] ( 1 inversion) . If node 3 is chosen initially, then the only possible array is [ 3, 1, 2] ( 2 inversions) . If node 1 is chosen initially, the arrays [ 1, 2, 3] ( 0 inversions) and [ 1, 3, 2] ( 1 inversion) are the only possibilities and equiprobable. In total, the expected number of inversions is 1/ 3\u00b7 1 + 1/ 3\u00b7 2 + 1/ 3\u00b7 ( 1/ 2\u00b7 0 + 1/ 2\u00b7 1) = 7/ 6 . 166666669 \u00b7 6 = 7 10^ 9 + 7 , so the answer is 166666669 . This is the tree from the second sample: This is the tree from the third sample:",
    "topics": [
      "brute force",
      "combinatorics",
      "dp",
      "graphs",
      "math",
      "probabilities",
      "trees"
    ],
    "id": "1540B"
  },
  {
    "title": "Great Graphs",
    "url": "https://codeforces.com/problemset/problem/1540/A",
    "history": "Farmer John has a farm that consists of n pastures connected by one- directional roads. Each road has a weight, representing the time it takes to go from the start to the end of the road. The roads could have negative weight, where the cows go so fast that they go back in time! However, Farmer John guarantees that it is impossible for the cows to get stuck in a time loop, where they can infinitely go back in time by traveling across a sequence of roads. Also, each pair of pastures is connected by at most one road in each direction. Unfortunately, Farmer John lost the map of the farm. All he remembers is an array d , where d_ i is the smallest amount of time it took the cows to reach the i - th pasture from pasture 1 using a sequence of roads. The cost of his farm is the sum of the weights of each of the roads, and Farmer John needs to know the minimal cost of a farm that is consistent with his memory.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of pastures. The second line of each test case contains n space separated integers d_ 1, d_ 2, . . . , d_ n ( 0 \u2264 d_ i \u2264 10^ 9 ) \u2014 the array d . It is guaranteed that d_ 1 = 0 . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output the minimum possible cost of a farm that is consistent with Farmer John' s memory.",
    "note": "In the first test case, you can add roads from pasture 1 to pasture 2 with a time of 2 , from pasture 2 to pasture 3 with a time of 1 , from pasture 3 to pasture 1 with a time of - 3 , from pasture 3 to pasture 2 with a time of - 1 , from pasture 2 to pasture 1 with a time of - 2 . The total cost is 2 + 1 + - 3 + - 1 + - 2 = - 3 . In the second test case, you can add a road from pasture 1 to pasture 2 with cost 1000000000 and a road from pasture 2 to pasture 1 with cost - 1000000000 . The total cost is 1000000000 + - 1000000000 = 0 . In the third test case, you can' t add any roads. The total cost is 0 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ],
    "id": "1540A"
  },
  {
    "title": "Figure Fixing",
    "url": "https://codeforces.com/problemset/problem/1537/F",
    "history": "You have a connected undirected graph made of n nodes and m edges. The i - th node has a value v_ i and a target value t_ i . In an operation, you can choose an edge ( i, j) and add k to both v_ i and v_ j , where k can be any integer. In particular, k can be negative. Your task to determine if it is possible that by doing some finite number of operations ( possibly zero) , you can achieve for every node i , v_ i = t_ i .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) , the number of test cases. Then the test cases follow. The first line of each test case contains two integers n , m ( 2 \u2264 n \u2264 2\u00b7 10^ 5 , n- 1\u2264 m\u2264min( 2\u00b7 10^ 5, n( n- 1) / 2) ) \u2014 the number of nodes and edges respectively. The second line contains n integers v_ 1. . . , v_ n ( - 10^ 9 \u2264 v_ i \u2264 10^ 9 ) \u2014 initial values of nodes. The third line contains n integers t_ 1. . . , t_ n ( - 10^ 9 \u2264 t_ i \u2264 10^ 9 ) \u2014 target values of nodes. Each of the next m lines contains two integers i and j representing an edge between node i and node j ( 1 \u2264 i, j \u2264 n , i j ) . It is guaranteed that the graph is connected and there is at most one edge between the same pair of nodes. It is guaranteed that the sum of n over all testcases does not exceed 2 \u00b7 10^ 5 and the sum of m over all testcases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, if it is possible for every node to reach its target after some number of operations, print \" YES\" . Otherwise, print \" NO\" .",
    "note": "Here is a visualization of the first test case ( the orange values denote the initial values and the blue ones the desired values) : One possible order of operations to obtain the desired values for each node is the following: Operation 1 : Add 2 to nodes 2 and 3 . Operation 2 : Add - 2 to nodes 1 and 4 . Operation 3 : Add 6 to nodes 3 and 4 . Now we can see that in total we added - 2 to node 1 , 2 to node 2 , 8 to node 3 and 4 to node 4 which brings each node exactly to it' s desired value. For the graph from the second test case it' s impossible to get the target values.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1537F"
  },
  {
    "title": "Omkar and Forest",
    "url": "https://codeforces.com/problemset/problem/1536/E",
    "history": "Omkar' s most recent follower, Ajit, has entered the Holy Forest. Ajit realizes that Omkar' s forest is an n by m grid ( 1 \u2264 n, m \u2264 2000 ) of some non- negative integers. Since the forest is blessed by Omkar, it satisfies some special conditions: For any two adjacent ( sharing a side) cells, the absolute value of the difference of numbers in them is at most 1 . If the number in some cell is strictly larger than 0 , it should be strictly greater than the number in at least one of the cells adjacent to it. Unfortunately, Ajit is not fully worthy of Omkar' s powers yet. He sees each cell as a \" 0\" or a \" # \" . If a cell is labeled as \" 0\" , then the number in it must equal 0 . Otherwise, the number in it can be any nonnegative integer. Determine how many different assignments of elements exist such that these special conditions are satisfied. Two assignments are considered different if there exists at least one cell such that the numbers written in it in these assignments are different. Since the answer may be enormous, find the answer modulo 10^ 9+ 7 .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 2000, nm \u2265 2 ) \u2013 the dimensions of the forest. n lines follow, each consisting of one string of m characters. Each of these characters is either a \" 0\" or a \" # \" . It is guaranteed that the sum of n over all test cases does not exceed 2000 and the sum of m over all test cases does not exceed 2000 .",
    "output": "For each test case, print one integer: the number of valid configurations modulo 10^ 9+ 7 .",
    "note": "For the first test case, the two valid assignments are 0000 0000 0000 and 0000 0010 0000",
    "topics": [
      "combinatorics",
      "graphs",
      "math",
      "shortest paths"
    ],
    "id": "1536E"
  },
  {
    "title": "Lost Nodes",
    "url": "https://codeforces.com/problemset/problem/1534/H",
    "history": "This is an interactive problem. As he qualified for IOI this year, Little Ericyi was given a gift from all his friends: a tree of n nodes! On the flight to IOI Little Ericyi was very bored, so he decided to play a game with Little Yvonne with his new tree. First, Little Yvonne selects two ( not necessarily different) nodes a and b on the tree ( without telling Ericyi) , and then gives him a hint f ( which is some node on the path from a to b ) . Then, Little Ericyi is able to ask the following question repeatedly: If I rooted the tree at node r ( Ericyi gets to choose r ) , what would be the Lowest Common Ancestor of a and b ? Little Ericyi' s goal is to find the nodes a and b , and report them to Little Yvonne. However, Little Yvonne thought this game was too easy, so before he gives the hint f to Little Ericyi, he also wants him to first find the maximum number of queries required to determine a and b over all possibilities of a , b , and f assuming Little Ericyi plays optimally. Little Ericyi defines an optimal strategy as one that makes the minimum number of queries. Of course, once Little Ericyi replies with the maximum number of queries, Little Yvonne will only let him use that many queries in the game. The tree, a , b , and f are all fixed before the start of the game and do not change as queries are made. InteractionFirst read a line containing the integer n ( 1 \u2264 n \u2264 10^ 5 ) , the number of nodes in the tree. The next n\u22121 lines describe Little Ericyi' s tree. These lines contain two integers u and v ( 1 \u2264 u, v \u2264 n ) denoting an edge between u and v ( u = \u0338 v ) . It is guaranteed that these edges form a tree. After that you should output k , the maximum number of queries needed to determine a and b over all possibilities of a , b , and f assuming Little Ericyi plays optimally. You should output end of line and flush the output after printing k . After that read a line containing the integer f ( 1 \u2264 f \u2264 n ) \u2014 the hint: a node on the path from a to b , inclusive. After that, you can start making queries. You will be limited to making at most k queries, where k is the number you printed. Each query is made in the format \" ? r\" , where r is an integer 1 \u2264 r \u2264 n denoting the root node you want for the query. You will then receive an integer x ( 1 \u2264 x \u2264 n ) , the Lowest Common Ancestor of a and b if the tree was rooted at r . When your program has found the nodes a , b , report the answer in the following format: \" ! a b\" , where a and b are the two hidden nodes and terminate your program normally immediately after flushing the output stream. You may output a and b in any order. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. If at any point you make an invalid output or make more than k queries, the interaction will terminate and you will receive a Wrong Answer verdict. An invalid output is defined as either an invalid query or a value of k less than 0 or greater than n . HacksTo hack a solution, use the following format: The first line contains the integer n ( 1 \u2264 n \u2264 10^ 5 ) . The next n\u22121 lines contain two integers u and v ( 1 \u2264 u, v \u2264 n ) denoting an edge between u and v ( u = \u0338 v ) . These n- 1 edges must form a tree. The next line of input contains the nodes a and b ( 1 \u2264 a, b \u2264 n ) , separated by a space. The final line of input contains the integer f ( 1 \u2264 f \u2264 n ) . Node f should be on the simple path from a to b ( inclusive) .",
    "input": "",
    "output": "",
    "note": "Here is the the tree from the first sample interaction. Nodes a and b are highlighted. Notice that a and b can be output in any order. Additionally, here are the answers to querying every single node 1, 2, . . . , n for your convenience: 1 : 1 2 : 2 3 : 2 4 : 4 _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Here is the the tree from the second sample interaction. Again, nodes a and b are highlighted. Lastly, here are the answers to querying every single node 1, 2, . . . , n ( in example 2 ) for your convenience: 1 : 1 2 : 4 3 : 1 4 : 4 5 : 4",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "interactive",
      "sortings",
      "trees"
    ],
    "id": "1534H"
  },
  {
    "title": "Falling Sand (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1534/F2",
    "history": "This is the hard version of the problem. The difference between the versions is the constraints on a_ i . You can make hacks only if all versions of the problem are solved. Little Dormi has recently received a puzzle from his friend and needs your help to solve it. The puzzle consists of an upright board with n rows and m columns of cells, some empty and some filled with blocks of sand, and m non- negative integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) . In this version of the problem, a_ i will always be not greater than the number of blocks of sand in column i . When a cell filled with a block of sand is disturbed, the block of sand will fall from its cell to the sand counter at the bottom of the column ( each column has a sand counter) . While a block of sand is falling, other blocks of sand that are adjacent at any point to the falling block of sand will also be disturbed and start to fall. Specifically, a block of sand disturbed at a cell ( i, j) will pass through all cells below and including the cell ( i, j) within the column, disturbing all adjacent cells along the way. Here, the cells adjacent to a cell ( i, j) are defined as ( i- 1, j) , ( i, j- 1) , ( i+ 1, j) , and ( i, j+ 1) ( if they are within the grid) . Note that the newly falling blocks can disturb other blocks. In one operation you are able to disturb any piece of sand. The puzzle is solved when there are at least a_ i blocks of sand counted in the i - th sand counter for each column from 1 to m . You are now tasked with finding the minimum amount of operations in order to solve the puzzle. Note that Little Dormi will never give you a puzzle that is impossible to solve.",
    "input": "The first line consists of two space- separated positive integers n and m ( 1 \u2264 n \u00b7 m \u2264 400 000 ) . Each of the next n lines contains m characters, describing each row of the board. If a character on a line is ' . ' , the corresponding cell is empty. If it is ' # ' , the cell contains a block of sand. The final line contains m non- negative integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) \u2014 the minimum amount of blocks of sand that needs to fall below the board in each column. In this version of the problem, a_ i will always be not greater than the number of blocks of sand in column i .",
    "output": "Print one non- negative integer, the minimum amount of operations needed to solve the puzzle.",
    "note": "For example 1 , by disturbing both blocks of sand on the first row from the top at the first and sixth columns from the left, and the block of sand on the second row from the top and the fourth column from the left, it is possible to have all the required amounts of sand fall in each column. It can be proved that this is not possible with fewer than 3 operations, and as such the answer is 3 . Here is the puzzle from the first example. For example 2 , by disturbing the cell on the top row and rightmost column, one can cause all of the blocks of sand in the board to fall into the counters at the bottom. Thus, the answer is 1 . Here is the puzzle from the second example. For example 3 , by disturbing the cell on the top row and rightmost column, it is possible to have all the required amounts of sand fall in each column. It can be proved that this is not possible with fewer than 1 operation, and as such the answer is 1 . Here is the puzzle from the third example.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1534F2"
  },
  {
    "title": "Falling Sand (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1534/F1",
    "history": "This is the easy version of the problem. The difference between the versions is the constraints on a_ i . You can make hacks only if all versions of the problem are solved. Little Dormi has recently received a puzzle from his friend and needs your help to solve it. The puzzle consists of an upright board with n rows and m columns of cells, some empty and some filled with blocks of sand, and m non- negative integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) . In this version of the problem, a_ i will be equal to the number of blocks of sand in column i . When a cell filled with a block of sand is disturbed, the block of sand will fall from its cell to the sand counter at the bottom of the column ( each column has a sand counter) . While a block of sand is falling, other blocks of sand that are adjacent at any point to the falling block of sand will also be disturbed and start to fall. Specifically, a block of sand disturbed at a cell ( i, j) will pass through all cells below and including the cell ( i, j) within the column, disturbing all adjacent cells along the way. Here, the cells adjacent to a cell ( i, j) are defined as ( i- 1, j) , ( i, j- 1) , ( i+ 1, j) , and ( i, j+ 1) ( if they are within the grid) . Note that the newly falling blocks can disturb other blocks. In one operation you are able to disturb any piece of sand. The puzzle is solved when there are at least a_ i blocks of sand counted in the i - th sand counter for each column from 1 to m . You are now tasked with finding the minimum amount of operations in order to solve the puzzle. Note that Little Dormi will never give you a puzzle that is impossible to solve.",
    "input": "The first line consists of two space- separated positive integers n and m ( 1 \u2264 n \u00b7 m \u2264 400 000 ) . Each of the next n lines contains m characters, describing each row of the board. If a character on a line is ' . ' , the corresponding cell is empty. If it is ' # ' , the cell contains a block of sand. The final line contains m non- negative integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) \u2014 the minimum amount of blocks of sand that needs to fall below the board in each column. In this version of the problem, a_ i will be equal to the number of blocks of sand in column i .",
    "output": "Print one non- negative integer, the minimum amount of operations needed to solve the puzzle.",
    "note": "For example 1 , by disturbing both blocks of sand on the first row from the top at the first and sixth columns from the left, and the block of sand on the second row from the top and the fourth column from the left, it is possible to have all the required amounts of sand fall in each column. It can be proved that this is not possible with fewer than 3 operations, and as such the answer is 3 . Here is the puzzle from the first example. For example 2 , by disturbing the cell on the top row and rightmost column, one can cause all of the blocks of sand in the board to fall into the counters at the bottom. Thus, the answer is 1 . Here is the puzzle from the second example.",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1534F1"
  },
  {
    "title": "Lost Array",
    "url": "https://codeforces.com/problemset/problem/1534/E",
    "history": "This is an interactive problem. Note: the XOR- sum of an array a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) is defined as a_ 1 \u2295 a_ 2 \u2295. . . \u2295 a_ n , where \u2295 denotes the bitwise XOR operation. Little Dormi received an array of n integers a_ 1, a_ 2, . . . , a_ n for Christmas. However, while playing with it over the winter break, he accidentally dropped it into his XOR machine, and the array got lost. The XOR machine is currently configured with a query size of k ( which you cannot change) , and allows you to perform the following type of query: by giving the machine k distinct indices x_ 1, x_ 2, . . . , x_ k , it will output a_ x_ 1\u2295 a_ x_ 2\u2295. . . \u2295 a_ x_ k . As Little Dormi' s older brother, you would like to help him recover the XOR- sum of his array a_ 1, a_ 2, . . . , a_ n by querying the XOR machine. Little Dormi isn' t very patient, so to be as fast as possible, you must query the XOR machine the minimum number of times to find the XOR- sum of his array. Formally, let d be the minimum number of queries needed to find the XOR- sum of any array of length n with a query size of k . Your program will be accepted if you find the correct XOR- sum in at most d queries. Lastly, you also noticed that with certain configurations of the machine k and values of n , it may not be possible to recover the XOR- sum of Little Dormi' s lost array. If that is the case, you should report it as well. The array a_ 1, a_ 2, . . . , a_ n is fixed before you start querying the XOR machine and does not change with the queries. InteractionEach query is made in the format \" ? b\" , where b is an array of exactly k distinct integers from 1 to n denoting the indices of the elements in the lost array that you want to query the XOR sum of. You will then receive an integer x , the XOR sum of the queried elements. It can be proven that 0 \u2264 x \u2264 2 \u00b7 10^ 9 will always be true. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. If at any point you make an invalid query or try to make more than 500 queries ( which is the hard limit) , the interaction will terminate immediately and give you a Wrong Answer verdict. Note that if you exceed d queries, the interaction will continue normally unless you also exceed the 500 query hard limit, though you will still receive a Wrong Answer verdict either way. HacksTo hack a solution, use the following format. The first line contains the integers n and k ( 1 \u2264 n \u2264 500 , 1 \u2264 k \u2264 n ) . The second line contains the the array a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "input": "The only line of input contains the integers n and k ( 1 \u2264 n \u2264 500 , 1 \u2264 k \u2264 n ) , the length of the lost array and the configured query size of the XOR machine. Elements of the original array satisfy 1 \u2264 a_ i \u2264 10^ 9 . It can be proven that that if it is possible to recover the XOR sum under the given constraints, it can be done in at most 500 queries. That is, d \u2264 500 . After taking n and k , begin interaction.",
    "output": "If it is impossible to recover the XOR- sum of the array, output - 1 immediately after taking n and k . Do not begin interaction. Otherwise, when your program finds the XOR- sum of the lost array a_ 1, a_ 2, . . . , a_ n , report the answer in the following format: \" ! x\" , where x is the XOR sum of the array a_ 1, a_ 2, . . . , a_ n , and terminate your program normally immediately after flushing the output stream. Note that answering does not count as a query.",
    "note": "In the first example interaction, the array a_ 1, a_ 2, . . . , a_ n is 2, 1, 7, 5, 6 and its XOR- sum is 7 . The first query made asks for indices 1, 2, 3 , so the response is a_ 1 \u2295 a_ 2 \u2295 a_ 3 = 2 \u2295 1 \u2295 7 = 4 . The second query made asks for indices 2, 3, 5 , so the response is a_ 2 \u2295 a_ 3 \u2295 a_ 5 = 1 \u2295 7 \u2295 6 = 0 . The third query made asks for indices 4, 1, 5 , so the response is a_ 4 \u2295 a_ 1 \u2295 a_ 5 = 5 \u2295 2 \u2295 6 = 1 . Note that the indices may be output in any order. Additionally, even though three queries were made in the example interaction, it is just meant to demonstrate the interaction format and does not necessarily represent an optimal strategy. In the second example interaction, there is no way to recover the XOR- sum of Little Dormi' s array no matter what is queried, so the program immediately outputs - 1 and exits.",
    "topics": [
      "graphs",
      "greedy",
      "interactive",
      "shortest paths"
    ],
    "id": "1534E"
  },
  {
    "title": "Little Alawn's Puzzle",
    "url": "https://codeforces.com/problemset/problem/1534/C",
    "history": "When he' s not training for IOI, Little Alawn enjoys playing with puzzles of various types to stimulate his brain. Today, he' s playing with a puzzle that consists of a 2 \u00d7 n grid where each row is a permutation of the numbers 1, 2, 3, . . . , n . The goal of Little Alawn' s puzzle is to make sure no numbers on the same column or row are the same ( we' ll call this state of the puzzle as solved) , and to achieve this he is able to swap the numbers in any column. However, after solving the puzzle many times, Little Alawn got bored and began wondering about the number of possible solved configurations of the puzzle he could achieve from an initial solved configuration only by swapping numbers in a column. Unfortunately, Little Alawn got stuck while trying to solve this harder problem, so he was wondering if you could help him with it. Find the answer modulo 10^ 9+ 7 .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 4 \u00b7 10^ 5 ) . The next two lines of each test case describe the initial state of the puzzle grid. Each line will be a permutation of the numbers 1, 2, 3, . . . , n and the numbers in each column and row will be pairwise distinct. It is guaranteed that the sum of n over all test cases does not exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer, the number of possible solved configurations of the puzzle Little Alawn can achieve from an initial solved configuration only by swapping numbers in a column. As the answer can be very large, please output it modulo 10^ 9+ 7 . The answer for each test case should be on a separate line.",
    "note": "The two possible puzzle configurations for example 1 are: [ 1, 4, 2, 3] in the first row and [ 3, 2, 1, 4] in the second; [ 3, 2, 1, 4] in the first row and [ 1, 4, 2, 3] in the second.",
    "topics": [
      "combinatorics",
      "dp",
      "dsu",
      "graphs",
      "math"
    ],
    "id": "1534C"
  },
  {
    "title": "Excursions",
    "url": "https://codeforces.com/problemset/problem/1533/I",
    "history": "Irina works in an excursion company in Saratov. Today, she is going to organize excursions in the cities of Saratov and Engels. There are n_ 1 sights in Saratov and n_ 2 sights in Engels. The cities are separated by a river, but there are m bus routes that go along the bridges and allow tourists to go from Saratov to Engels and vice versa. The i - th bus route goes from the x_ i - th sight in Saratov to the y_ i - th sight in Engels, and in the opposite direction as well. Irina wants to plan excursions for the current day. The excursion trips start in Saratov in the morning, continue in Engels in the afternoon, and finish in Saratov in the evening. Each tourist starts their excursion day at some sight in Saratov, k_ i tourists start at the i - th sight. Then the tour guides lead them to Engels: at each sight in Saratov, a tour guide chooses a bus route leading from this sight to Engels, and all the tourists starting from this sight transfer to Engels along this bus route. After the excursions in Engels are finished, the same thing happens: at each sight in Engels, a tour guide chooses a bus route leading from this sight to Saratov, and all the tourists at this sight transfer to Saratov along this bus route. This process can lead to a situation such that some tourists return to the same sight in Saratov where they started in the morning. Obviously, tourists don' t like it; so Irina wants to choose where the tour guides take the tourists ( both on the way from Saratov to Engels and on the way from Engels to Saratov) , so that the minimum possible number of tourists return to the same sight where they started. Help Irina to find an optimal plan!",
    "input": "The first line contains three integers n_ 1 , n_ 2 and m ( 1 \u2264 n_ 1, n_ 2 \u2264 100 ; max( n_ 1, n_ 2) \u2264 m \u2264 n_ 1 \u00b7 n_ 2 ) \u2014 the number of sights in Saratov, the number of sights in Engels, and the number of bus routes, respectively. The second line contains n_ 1 integers k_ 1, k_ 2, . . . , k_ n_ 1 ( 1 \u2264 k_ i \u2264 10^ 6 ) , where k_ i is the number of tourists starting at the i - th sight in Saratov. Then m lines follow, each describing a bus route: the i - th line contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n_ 1 ; 1 \u2264 y_ i \u2264 n_ 2 ) meaning that the i - th bus route connects the x_ i - th sight in Saratov and the y_ i - th sight in Engels. All these bus routes are distinct, and each sight has at least one bus route leading to/ from it.",
    "output": "Print one integer \u2014 the minimum possible number of tourists that will return to the same sight where they started.",
    "note": "",
    "topics": [
      "*special",
      "constructive algorithms",
      "dfs and similar",
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": "1533I"
  },
  {
    "title": "Biome Map",
    "url": "https://codeforces.com/problemset/problem/1533/G",
    "history": "Polycarp decided to generate a biome map for his game. A map is a matrix divided into cells 1 \u00d7 1 . Each cell of the map must contain one of the available biomes. Each biome is defined by two parameters: temperature ( an integer from 1 to n ) and humidity ( an integer from 1 to m ) . But not for every temperature/ humidity combination, a corresponding biome is available. The biome map should be generated according to the following rules: each cell of the map belongs to exactly one biome; each available biome has at least one cell on the map; if two cells of the map are adjacent by the side and they belong to biomes with parameters ( t_ 1, h_ 1 ) and ( t_ 2, h_ 2 ) , respectively, then the equality | t_ 1- t_ 2| + | h_ 1- h_ 2| = 1 holds; let the number of available biomes be equal to k , then the number of rows and columns of the map ( separately) should not exceed k . Help Polycarp generate a biome map that meets all the conditions described above ( or report that this is impossible) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 20 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 10 ) \u2014 maximum temperature and humidity parameters. The following n lines contain m integers each a_ i, 1, a_ i, 2, . . . , a_ i, m ( 0 \u2264 a_ i, j\u2264 100 ) , where a_ i, j \u2014 the biome identifier with the parameters ( i, j) , if a_ i, j= \u0338 0 , otherwise the biome with such parameters is not available. All biome identifiers are different, and there are at least two biomes available.",
    "output": "For each test case, print the answer in the following format: print - 1 in a single line if there is no map that meets all the conditions; otherwise, in the first line, print two integers h and w \u2014 the number of rows and columns of the map, respectively. In the following h lines, print w integers \u2014 the identifiers of the biomes in the corresponding cells of the map.",
    "note": "",
    "topics": [
      "*special",
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "1533G"
  },
  {
    "title": "Secret Santa",
    "url": "https://codeforces.com/problemset/problem/1530/D",
    "history": "Every December, VK traditionally holds an event for its employees named \" Secret Santa\" . Here' s how it happens. n employees numbered from 1 to n take part in the event. Each employee i is assigned a different employee b_ i , to which employee i has to make a new year gift. Each employee is assigned to exactly one other employee, and nobody is assigned to themselves ( but two employees may be assigned to each other) . Formally, all b_ i must be distinct integers between 1 and n , and for any i , b_ i i must hold. The assignment is usually generated randomly. This year, as an experiment, all event participants have been asked who they wish to make a gift to. Each employee i has said that they wish to make a gift to employee a_ i . Find a valid assignment b that maximizes the number of fulfilled wishes of the employees.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. Each test case consists of two lines. The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of participants of the event. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ; a_ i i ) \u2014 wishes of the employees in order from 1 to n . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print two lines. In the first line, print a single integer k ( 0 \u2264 k \u2264 n ) \u2014 the number of fulfilled wishes in your assignment. In the second line, print n distinct integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ; b_ i i ) \u2014 the numbers of employees assigned to employees 1, 2, . . . , n . k must be equal to the number of values of i such that a_ i = b_ i , and must be as large as possible. If there are multiple answers, print any.",
    "note": "In the first test case, two valid assignments exist: [ 3, 1, 2] and [ 2, 3, 1] . The former assignment fulfills two wishes, while the latter assignment fulfills only one. Therefore, k = 2 , and the only correct answer is [ 3, 1, 2] .",
    "topics": [
      "constructive algorithms",
      "flows",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1530D"
  },
  {
    "title": "It's a bird! No, it's a plane! No, it's AaParsa!",
    "url": "https://codeforces.com/problemset/problem/1528/D",
    "history": "There are n cities in Shaazzzland, numbered from 0 to n- 1 . Ghaazzzland, the immortal enemy of Shaazzzland, is ruled by AaParsa. As the head of the Ghaazzzland' s intelligence agency, AaParsa is carrying out the most important spying mission in Ghaazzzland' s history on Shaazzzland. AaParsa has planted m transport cannons in the cities of Shaazzzland. The i - th cannon is planted in the city a_ i and is initially pointing at city b_ i . It is guaranteed that each of the n cities has at least one transport cannon planted inside it, and that no two cannons from the same city are initially pointing at the same city ( that is, all pairs ( a_ i, b_ i) are distinct) . AaParsa used very advanced technology to build the cannons, the cannons rotate every second. In other words, if the i - th cannon is pointing towards the city x at some second, it will target the city ( x + 1) n at the next second. As their name suggests, transport cannons are for transportation, specifically for human transport. If you use the i - th cannon to launch yourself towards the city that it' s currently pointing at, you' ll be airborne for c_ i seconds before reaching your target destination. If you still don' t get it, using the i - th cannon at the s - th second ( using which is only possible if you are currently in the city a_ i ) will shoot you to the city ( b_ i + s) n and you' ll land in there after c_ i seconds ( so you' ll be there in the ( s + c_ i) - th second) . Also note the cannon that you initially launched from will rotate every second but you obviously won' t change direction while you are airborne. AaParsa wants to use the cannons for travelling between Shaazzzland' s cities in his grand plan, and he can start travelling at second 0 . For him to fully utilize them, he needs to know the minimum number of seconds required to reach city u from city v using the cannons for every pair of cities ( u, v) . Note that AaParsa can stay in a city for as long as he wants.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 600 , n \u2264 m \u2264 n^ 2) \u2014 the number of cities and cannons correspondingly. The i - th line of the following m lines contains three integers a_ i , b_ i and c_ i ( 0 \u2264 a_ i , b_ i \u2264 n- 1 , 1 \u2264 c_ i \u2264 10^ 9) , denoting the cannon in the city a_ i , which is initially pointing to b_ i and travelling by which takes c_ i seconds. It is guaranteed that each of the n cities has at least one transport cannon planted inside it, and that no two cannons from the same city are initially pointing at the same city ( that is, all pairs ( a_ i, b_ i) are distinct) .",
    "output": "Print n lines, each line should contain n integers. The j - th integer in the i - th line should be equal to the minimum time required to reach city j from city i .",
    "note": "In the first example one possible path for going from 0 to 2 would be: Stay inside 0 and do nothing for 1 second. Use the first cannon and land at 2 after 1 second. Note that: we could have used the second cannon in 0 - th second but it would have taken us 3 seconds to reach city 2 in that case.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "shortest paths"
    ],
    "id": "1528D"
  },
  {
    "title": "To Go Or Not To Go?",
    "url": "https://codeforces.com/problemset/problem/1520/G",
    "history": "Dima overslept the alarm clock, which was supposed to raise him to school. Dima wonders if he will have time to come to the first lesson. To do this, he needs to know the minimum time it will take him to get from home to school. The city where Dima lives is a rectangular field of n \u00d7 m size. Each cell ( i, j) on this field is denoted by one number a_ ij : The number - 1 means that the passage through the cell is prohibited; The number 0 means that the cell is free and Dima can walk though it. The number x ( 1 \u2264 x \u2264 10^ 9 ) means that the cell contains a portal with a cost of x . A cell with a portal is also considered free. From any portal, Dima can go to any other portal, while the time of moving from the portal ( i, j) to the portal ( x, y) corresponds to the sum of their costs a_ ij + a_ xy . In addition to moving between portals, Dima can also move between unoccupied cells adjacent to one side in time w . In particular, he can enter a cell with a portal and not use it. Initially, Dima is in the upper- left cell ( 1, 1) , and the school is in the lower right cell ( n, m) .",
    "input": "The first line contains three integers n , m and w ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 3 , 1 \u2264 w \u2264 10^ 9 ) , where n and m are city size, w is time during which Dima moves between unoccupied cells. The next n lines each contain m numbers ( - 1 \u2264 a_ ij\u2264 10^ 9 ) \u2014 descriptions of cells. It is guaranteed that the cells ( 1, 1) and ( n, m) are free.",
    "output": "Output the minimum time it will take for Dima to get to school. If he cannot get to school at all, then output \" - 1\" .",
    "note": "Explanation for the first sample:",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1520G"
  },
  {
    "title": "Off by One",
    "url": "https://codeforces.com/problemset/problem/1519/E",
    "history": "There are n points on an infinite plane. The i - th point has coordinates ( x_ i, y_ i) such that x_ i > 0 and y_ i > 0 . The coordinates are not necessarily integer. In one move you perform the following operations: choose two points a and b ( a = \u0338 b ) ; move point a from ( x_ a, y_ a) to either ( x_ a + 1, y_ a) or ( x_ a, y_ a + 1) ; move point b from ( x_ b, y_ b) to either ( x_ b + 1, y_ b) or ( x_ b, y_ b + 1) ; remove points a and b . However, the move can only be performed if there exists a line that passes through the new coordinates of a , new coordinates of b and ( 0, 0) . Otherwise, the move can' t be performed and the points stay at their original coordinates ( x_ a, y_ a) and ( x_ b, y_ b) , respectively. The numeration of points does not change after some points are removed. Once the points are removed, they can' t be chosen in any later moves. Note that you have to move both points during the move, you can' t leave them at their original coordinates. What is the maximum number of moves you can perform? What are these moves? If there are multiple answers, you can print any of them.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points. The i - th of the next n lines contains four integers a_ i, b_ i, c_ i, d_ i ( 1 \u2264 a_ i, b_ i, c_ i, d_ i \u2264 10^ 9 ) . The coordinates of the i - th point are x_ i = a_ i/ b_ i and y_ i = c_ i/ d_ i .",
    "output": "In the first line print a single integer c \u2014 the maximum number of moves you can perform. Each of the next c lines should contain a description of a move: two integers a and b ( 1 \u2264 a, b \u2264 n , a = \u0338 b ) \u2014 the points that are removed during the current move. There should be a way to move points a and b according to the statement so that there' s a line that passes through the new coordinates of a , the new coordinates of b and ( 0, 0) . No removed point can be chosen in a later move. If there are multiple answers, you can print any of them. You can print the moves and the points in the move in the arbitrary order.",
    "note": "Here are the points and the moves for the ones that get chosen for the moves from the first example:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "geometry",
      "graphs",
      "sortings",
      "trees"
    ],
    "id": "1519E"
  },
  {
    "title": "Starry Night Camping",
    "url": "https://codeforces.com/problemset/problem/1517/G",
    "history": "At the foot of Liyushan Mountain, n tents will be carefully arranged to provide accommodation for those who are willing to experience the joy of approaching nature, the tranquility of the night, and the bright starry sky. The i - th tent is located at the point of ( x_ i, y_ i) and has a weight of w_ i . A tent is important if and only if both x_ i and y_ i are even. You need to remove some tents such that for each remaining important tent ( x, y) , there do not exist 3 other tents ( x' _ 1, y' _ 1) , ( x' _ 2, y' _ 2) and ( x' _ 3, y' _ 3) such that both conditions are true: | x' _ j- x| , | y' _ j - y| \u2264 1 for all j \u2208{ 1, 2, 3} , and these four tents form a parallelogram ( or a rectangle) and one of its sides is parallel to the x - axis. Please maximize the sum of the weights of the tents that are not removed. Print the maximum value.",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 1 000 ) , representing the number of tents. Each of the next n lines contains three integers x_ i , y_ i and w_ i ( - 10^ 9\u2264 x_ i, y_ i \u2264 10^ 9 , 1\u2264 w_ i\u2264 10^ 9 ) , representing the coordinate of the i - th tent and its weight. No two tents are located at the same point.",
    "output": "A single integer \u2014 the maximum sum of the weights of the remaining tents.",
    "note": "Here is an illustration of the second example. Black triangles indicate the important tents. This example also indicates all 8 forbidden patterns.",
    "topics": [
      "constructive algorithms",
      "flows",
      "graphs"
    ],
    "id": "1517G"
  },
  {
    "title": "Explorer Space",
    "url": "https://codeforces.com/problemset/problem/1517/D",
    "history": "You are wandering in the explorer space of the 2050 Conference. The explorer space can be viewed as an undirected weighted grid graph with size n\u00d7 m . The set of vertices is { ( i, j) | 1\u2264 i\u2264 n, 1\u2264 j\u2264 m} . Two vertices ( i_ 1, j_ 1) and ( i_ 2, j_ 2) are connected by an edge if and only if | i_ 1- i_ 2| + | j_ 1- j_ 2| = 1 . At each step, you can walk to any vertex connected by an edge with your current vertex. On each edge, there are some number of exhibits. Since you already know all the exhibits, whenever you go through an edge containing x exhibits, your boredness increases by x . For each starting vertex ( i, j) , please answer the following question: What is the minimum possible boredness if you walk from ( i, j) and go back to it after exactly k steps? You can use any edge for multiple times but the boredness on those edges are also counted for multiple times. At each step, you cannot stay on your current vertex. You also cannot change direction while going through an edge. Before going back to your starting vertex ( i, j) after k steps, you can visit ( i, j) ( or not) freely.",
    "input": "The first line contains three integers n , m and k ( 2\u2264 n, m\u2264 500, 1\u2264 k\u2264 20 ) . The j - th number ( 1\u2264 j \u2264 m - 1 ) in the i - th line of the following n lines is the number of exibits on the edge between vertex ( i, j) and vertex ( i, j+ 1) . The j - th number ( 1\u2264 j\u2264 m ) in the i - th line of the following n- 1 lines is the number of exibits on the edge between vertex ( i, j) and vertex ( i+ 1, j) . The number of exhibits on each edge is an integer between 1 and 10^ 6 .",
    "output": "Output n lines with m numbers each. The j - th number in the i - th line, answer_ ij , should be the minimum possible boredness if you walk from ( i, j) and go back to it after exactly k steps. If you cannot go back to vertex ( i, j) after exactly k steps, answer_ ij should be - 1 .",
    "note": "In the first example, the answer is always 10 no matter how you walk. In the second example, answer_ 21 = 10 , the path is ( 2, 1) \u2192 ( 1, 1) \u2192 ( 1, 2) \u2192 ( 2, 2) \u2192 ( 2, 1) , the boredness is 4 + 1 + 2 + 3 = 10 .",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "1517D"
  },
  {
    "title": "Cut",
    "url": "https://codeforces.com/problemset/problem/1516/D",
    "history": "This time Baby Ehab will only cut and not stick. He starts with a piece of paper with an array a of length n written on it, and then he does the following: he picks a range ( l, r) and cuts the subsegment a_ l, a_ l + 1, . . . , a_ r out, removing the rest of the array. he then cuts this range into multiple subranges. to add a number theory spice to it, he requires that the elements of every subrange must have their product equal to their least common multiple ( LCM) . Formally, he partitions the elements of a_ l, a_ l + 1, . . . , a_ r into contiguous subarrays such that the product of every subarray is equal to its LCM. Now, for q independent ranges ( l, r) , tell Baby Ehab the minimum number of subarrays he needs.",
    "input": "The first line contains 2 integers n and q ( 1 \u2264 n, q \u2264 10^ 5 ) \u2014 the length of the array a and the number of queries. The next line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the elements of the array a . Each of the next q lines contains 2 integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 the endpoints of this query' s interval.",
    "output": "For each query, print its answer on a new line.",
    "note": "The first query asks about the whole array. You can partition it into [ 2] , [ 3, 10, 7] , and [ 5, 14] . The first subrange has product and LCM equal to 2 . The second has product and LCM equal to 210 . And the third has product and LCM equal to 70 . Another possible partitioning is [ 2, 3] , [ 10, 7] , and [ 5, 14] . The second query asks about the range ( 2, 4) . Its product is equal to its LCM, so you don' t need to partition it further. The last query asks about the range ( 3, 5) . You can partition it into [ 10, 7] and [ 5] .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "graphs",
      "number theory",
      "two pointers"
    ],
    "id": "1516D"
  },
  {
    "title": "Phoenix and Odometers",
    "url": "https://codeforces.com/problemset/problem/1515/G",
    "history": "In Fire City, there are n intersections and m one- way roads. The i - th road goes from intersection a_ i to b_ i and has length l_ i miles. There are q cars that may only drive along those roads. The i - th car starts at intersection v_ i and has an odometer that begins at s_ i , increments for each mile driven, and resets to 0 whenever it reaches t_ i . Phoenix has been tasked to drive cars along some roads ( possibly none) and return them to their initial intersection with the odometer showing 0 . For each car, please find if this is possible. A car may visit the same road or intersection an arbitrary number of times. The odometers don' t stop counting the distance after resetting, so odometers may also be reset an arbitrary number of times.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of intersections and the number of roads, respectively. Each of the next m lines contain three integers a_ i , b_ i , and l_ i ( 1 \u2264 a_ i, b_ i \u2264 n ; a_ i = \u0338 b_ i ; 1 \u2264 l_ i \u2264 10^ 9 ) \u2014 the information about the i - th road. The graph is not necessarily connected. It is guaranteed that between any two intersections, there is at most one road for each direction. The next line contains an integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cars. Each of the next q lines contains three integers v_ i , s_ i , and t_ i ( 1 \u2264 v_ i \u2264 n ; 0 \u2264 s_ i < t_ i \u2264 10^ 9 ) \u2014 the initial intersection of the i - th car, the initial number on the i - th odometer, and the number at which the i - th odometer resets, respectively.",
    "output": "Print q answers. If the i - th car' s odometer may be reset to 0 by driving through some roads ( possibly none) and returning to its starting intersection v_ i , print YES. Otherwise, print NO.",
    "note": "The illustration for the first example is below: In the first query, Phoenix can drive through the following cities: 1 \u2192 2 \u2192 3 \u2192 1 \u2192 2 \u2192 3 \u2192 1 . The odometer will have reset 3 times, but it displays 0 at the end. In the second query, we can show that there is no way to reset the odometer to 0 and return to intersection 1 . In the third query, the odometer already displays 0 , so there is no need to drive through any roads. Below is the illustration for the second example:",
    "topics": [
      "dfs and similar",
      "graphs",
      "math",
      "number theory"
    ],
    "id": "1515G"
  },
  {
    "title": "Phoenix and Earthquake",
    "url": "https://codeforces.com/problemset/problem/1515/F",
    "history": "Phoenix' s homeland, the Fire Nation had n cities that were connected by m roads, but the roads were all destroyed by an earthquake. The Fire Nation wishes to repair n- 1 of these roads so that all the cities are connected again. The i - th city has a_ i tons of asphalt. x tons of asphalt are used up when repairing a road, and to repair a road between i and j , cities i and j must have at least x tons of asphalt between them. In other words, if city i had a_ i tons of asphalt and city j had a_ j tons, there would remain a_ i+ a_ j- x tons after repairing the road between them. Asphalt can be moved between cities if the road between them is already repaired. Please determine if it is possible to connect all the cities, and if so, output any sequence of roads to repair.",
    "input": "The first line contains integers n , m , and x ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ; n- 1 \u2264 m \u2264 3 \u00b7 10^ 5 ; 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of cities, number of roads, and amount of asphalt needed to repair one road. The next line contains n space- separated integer a_ i ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the amount of asphalt initially at city i . The next m lines contains two integers x_ i and y_ i ( x_ i y_ i ; 1 \u2264 x_ i, y_ i \u2264 n ) \u2014 the cities connected by the i - th road. It is guaranteed that there is at most one road between each pair of cities, and that the city was originally connected before the earthquake.",
    "output": "If it is not possible to connect all the cities, print NO. Otherwise, print YES followed by n- 1 integers e_ 1, e_ 2, . . . , e_ n- 1 , the order in which the roads should be repaired. e_ i is the index of the i - th road to repair. If there are multiple solutions, print any.",
    "note": "In the first example, the roads are repaired in the following order: Road 3 is repaired, connecting cities 3 and 4 . City 4 originally had 4 tons of asphalt. After this road is constructed, 3 tons remain. Road 2 is repaired, connecting cities 2 and 3 . The asphalt from city 4 can be transported to city 3 and used for the road. 2 tons remain. Road 1 is repaired, connecting cities 1 and 2 . The asphalt is transported to city 2 and used for the road. 1 ton remain. Road 4 is repaired, connecting cities 4 and 5 . The asphalt is transported to city 4 and used for the road. No asphalt remains. All the cities are now connected. In the second example, cities 1 and 2 use all their asphalt together to build the road. They each have 1 ton, so together they have 2 tons, which is enough. In the third example, there isn' t enough asphalt to connect cities 1 and 2 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1515F"
  },
  {
    "title": "Baby Ehab's Hyper Apartment",
    "url": "https://codeforces.com/problemset/problem/1514/E",
    "history": "This is an interactive problem. Baby Ehab loves crawling around his apartment. It has n rooms numbered from 0 to n- 1 . For every pair of rooms, a and b , there' s either a direct passage from room a to room b , or from room b to room a , but never both. Baby Ehab wants to go play with Baby Badawy. He wants to know if he could get to him. However, he doesn' t know anything about his apartment except the number of rooms. He can ask the baby sitter two types of questions: is the passage between room a and room b directed from a to b or the other way around? does room x have a passage towards any of the rooms s_ 1 , s_ 2 , . . . , s_ k ? He can ask at most 9n queries of the first type and at most 2n queries of the second type. After asking some questions, he wants to know for every pair of rooms a and b whether there' s a path from a to b or not. A path from a to b is a sequence of passages that starts from room a and ends at room b . InteractionTo ask a question of the first type, use the format: 1 a b ( 0 \u2264 a, b \u2264 n- 1 , a = \u0338 b ) . we will answer with 1 if the passage is from a to b , and 0 if it is from b to a . you can ask at most 9n questions of this type in each test case. To ask a question of the second type, use the format: 2 x k s_ 1 s_ 2 . . . s_ k ( 0 \u2264 x, s_ i \u2264 n- 1 , 0 \u2264 k < n , x = \u0338 s_ i , elements of s are pairwise distinct) . we will answer with 1 if there' s a passage from x to any of the rooms in s , and 0 otherwise. you can ask at most 2n questions of this type in each test case. If we answer with - 1 instead of a valid answer, that means you exceeded the number of queries or made an invalid query. Exit immediately after receiving - 1 and you will see Wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream. After printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. Hacks: The first line should contain an integer t \u2014 the number of test cases. The first line of each test case should contain an integer n ( 4 \u2264 n \u2264 100 ) \u2014 the number of rooms. Each of the next n lines should contain a binary string of length n . The j - th character of the i - th string should be 1 if there' s a passage from room i to room j , 0 otherwise. The i - th character of the i - th string should be 0 .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 30 ) \u2014 the number of test cases you need to solve. Then each test case starts with an integer n ( 4 \u2264 n \u2264 100 ) \u2014 the number of rooms. The sum of n across the test cases doesn' t exceed 500 .",
    "output": "To print the answer for a test case, print a line containing \" 3\" , followed by n lines, each containing a binary string of length n . The j - th character of the i - th string should be 1 if there' s a path from room i to room j , and 0 if there isn' t. The i - th character of the i - th string should be 1 for each valid i . After printing the answer, we will respond with a single integer. If it' s 1 , you printed a correct answer and should keep solving the test cases ( or exit if it is the last one) . If it' s - 1 , you printed a wrong answer and should terminate to get Wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream.",
    "note": "In the given example: The first query asks whether there' s a passage from room 3 to any of the other rooms. The second query asks about the direction of the passage between rooms 0 and 1 . After a couple other queries, we concluded that you can go from any room to any other room except if you start at room 3 , and you can' t get out of this room, so we printed the matrix: 1111111111110001The interactor answered with 1 , telling us the answer is correct.",
    "topics": [
      "binary search",
      "graphs",
      "interactive",
      "sortings",
      "two pointers"
    ],
    "id": "1514E"
  },
  {
    "title": "GCD and MST",
    "url": "https://codeforces.com/problemset/problem/1513/D",
    "history": "You are given an array a of n ( n \u2265 2 ) positive integers and an integer p . Consider an undirected weighted graph of n vertices numbered from 1 to n for which the edges between the vertices i and j ( i< j ) are added in the following manner: If gcd( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) = min( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) , then there is an edge of weight min( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) between i and j . If i+ 1= j , then there is an edge of weight p between i and j . Here gcd( x, y, . . . ) denotes the greatest common divisor ( GCD) of integers x , y , . . . . Note that there could be multiple edges between i and j if both of the above conditions are true, and if both the conditions fail for i and j , then there is no edge between these vertices. The goal is to find the weight of the minimum spanning tree of this graph.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) and p ( 1 \u2264 p \u2264 10^ 9 ) \u2014 the number of nodes and the parameter p . The second line contains n integers a_ 1, a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output t lines. For each test case print the weight of the corresponding graph.",
    "note": "Here are the graphs for the four test cases of the example ( the edges of a possible MST of the graphs are marked pink) : For test case 1 For test case 2 For test case 3 For test case 4",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "number theory",
      "sortings"
    ],
    "id": "1513D"
  },
  {
    "title": "Min Cost String",
    "url": "https://codeforces.com/problemset/problem/1511/D",
    "history": "Let' s define the cost of a string s as the number of index pairs i and j ( 1 \u2264 i < j < | s| ) such that s_ i = s_ j and s_ i+ 1 = s_ j+ 1 . You are given two positive integers n and k . Among all strings with length n that contain only the first k characters of the Latin alphabet, find a string with minimum possible cost. If there are multiple such strings with minimum cost \u2014 find any of them.",
    "input": "The only line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5; 1 \u2264 k \u2264 26 ) .",
    "output": "Print the string s such that it consists of n characters, each its character is one of the k first Latin letters, and it has the minimum possible cost among all these strings. If there are multiple such strings \u2014 print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "strings"
    ],
    "id": "1511D"
  },
  {
    "title": "King's Task",
    "url": "https://codeforces.com/problemset/problem/1510/K",
    "history": "The brave Knight came to the King and asked permission to marry the princess. The King knew that the Knight was brave, but he also wanted to know if he was smart enough. So he asked him to solve the following task. There is a permutation p_ i of numbers from 1 to 2n . You can make two types of operations. Swap p_ 1 and p_ 2 , p_ 3 and p_ 4 , . . . , p_ 2n- 1 and p_ 2n . Swap p_ 1 and p_ n+ 1 , p_ 2 and p_ n+ 2 , . . . , p_ n and p_ 2n . The task is to find the minimal number of operations required to sort the given permutation. The Knight was not that smart actually, but quite charming, so the princess asks you to help him to solve the King' s task.",
    "input": "The first line contains the integer n ( 1\u2264 n\u2264 1000 ) . The second line contains 2n integers p_ i \u2014 the permutation of numbers from 1 to 2n .",
    "output": "Print one integer \u2014 the minimal number of operations required to sort the permutation. If it is impossible to sort the permutation using these operations, print - 1 .",
    "note": "In the first example, you can sort the permutation in three operations: Make operation 1: 3, 6, 5, 2, 1, 4 . Make operation 2: 2, 1, 4, 3, 6, 5 . Make operation 1: 1, 2, 3, 4, 5, 6 .",
    "topics": [
      "brute force",
      "graphs",
      "implementation"
    ],
    "id": "1510K"
  },
  {
    "title": "Cactus Not Enough",
    "url": "https://codeforces.com/problemset/problem/1510/C",
    "history": "There was no problem about a cactus at the NERC 2020 online round. That' s a bad mistake, so judges decided to fix it. You shall not pass to the World Finals 2021 without solving a problem about a cactus! A cactus is a connected undirected graph in which every edge lies on at most one simple cycle. Intuitively, a cactus is a generalization of a tree where some cycles are allowed. Multiedges ( multiple edges between a pair of vertices) and loops ( edges that connect a vertex to itself) are not allowed in a cactus. Cher has got a cactus. She calls cactus strong if it is impossible to add an edge to it in such a way that it still remains a cactus. But Cher thinks her cactus is not strong enough. She wants to add the smallest possible number of edges to it to make it strong, i. e. to create a new cactus with the same vertices, so that the original cactus is a subgraph of the new one, and it is impossible to add another edge to it so that the graph remains a cactus. Cher hired you to do this job for her. So. . . it' s on you!",
    "input": "The input consists of one or more independent test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264 10^ 5 ) , where n is the number of vertices in the graph. Vertices are numbered from 1 to n . Edges of the graph are represented by a set of edge- distinct paths, where m is the number of such paths. Each of the following m lines contains a path in the graph. A path starts with an integer number s_ i ( 2 \u2264 s_ i \u2264 1000 ) followed by s_ i integers from 1 to n . These s_ i integers represent vertices of a path. Adjacent vertices in a path are distinct. The path can go through the same vertex multiple times, but every edge is traversed exactly once in the whole test case. There are no multiedges in the graph ( there is at most one edge between any two vertices) . The last line of the input after all test cases always contains two zeros. It does not define a test case. It just marks the end of the input and does not require any output. All graphs in the input are cacti. The total sum of all values of n and the total sum of all values of m throughout the input both do not exceed 10^ 5 .",
    "output": "For each test case, first output the line with the minimal possible number of additional edges A . Then output A lines, each describing one edge as u_ i v_ i , where u_ i and v_ i are the numbers of vertices to connect. After adding these edges, the resulting graph must be a strong cactus.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graph matchings",
      "graphs"
    ],
    "id": "1510C"
  },
  {
    "title": "Button Lock",
    "url": "https://codeforces.com/problemset/problem/1510/B",
    "history": "You are standing in front of the room with great treasures. The only thing stopping you is the door with a push- button combination lock. This lock has d buttons with digits from 0 to d - 1 . Whenever you press a button, it stays pushed down. You can not pop back up just one button, but there is a \" RESET\" button \u2014 pressing it pops up all other buttons. Initially, no buttons are pushed down. The door instantly opens when some specific set of digits is pushed down. Sadly, you don' t know the password for it. Having read the documentation for this specific lock, you found out that there are n possible passwords for this particular lock. Find the shortest sequence of button presses, such that all possible passwords appear at least once during its execution. Any shortest correct sequence of button presses will be accepted.",
    "input": "The first line contains two integers d and n ( 1 \u2264 d \u2264 10 ; 1 \u2264 n \u2264 2^ d - 1 ) . Next n lines describe possible passwords. Each line contains a string s_ i of d zeros and ones: for all j from 1 to d the j - th character is 1 iff the button with the digit j - 1 must be pushed down. All strings s_ i are different, and each string contains at least one 1.",
    "output": "On the first line, print the number k \u2014 the minimum number of button presses. On the second line, print k tokens, describing the sequence. Whenever you press a button with a digit, print that digit. Whenever you press \" RESET\" , print \" R\" .",
    "note": "In the second example, the sequence 1 2 R 2 0 1 is also possible.",
    "topics": [
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": "1510B"
  },
  {
    "title": "Complete the MST",
    "url": "https://codeforces.com/problemset/problem/1508/C",
    "history": "As a teacher, Riko Hakozaki often needs to help her students with problems from various subjects. Today, she is asked a programming task which goes as follows. You are given an undirected complete graph with n nodes, where some edges are pre- assigned with a positive weight while the rest aren' t. You need to assign all unassigned edges with non- negative weights so that in the resulting fully- assigned complete graph the XOR sum of all weights would be equal to 0 . Define the ugliness of a fully- assigned complete graph the weight of its minimum spanning tree, where the weight of a spanning tree equals the sum of weights of its edges. You need to assign the weights so that the ugliness of the resulting graph is as small as possible. As a reminder, an undirected complete graph with n nodes contains all edges ( u, v) with 1 \u2264 u < v \u2264 n ; such a graph has n( n- 1) / 2 edges. She is not sure how to solve this problem, so she asks you to solve it for her.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264min( 2 \u00b7 10^ 5, n( n- 1) / 2 - 1) ) \u2014 the number of nodes and the number of pre- assigned edges. The inputs are given so that there is at least one unassigned edge. The i - th of the following m lines contains three integers u_ i , v_ i , and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u v , 1 \u2264 w_ i < 2^ 30 ) , representing the edge from u_ i to v_ i has been pre- assigned with the weight w_ i . No edge appears in the input more than once.",
    "output": "Print on one line one integer \u2014 the minimum ugliness among all weight assignments with XOR sum equal to 0 .",
    "note": "The following image showcases the first test case. The black weights are pre- assigned from the statement, the red weights are assigned by us, and the minimum spanning tree is denoted by the blue edges.",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1508C"
  },
  {
    "title": "Triangular Paths",
    "url": "https://codeforces.com/problemset/problem/1506/F",
    "history": "Consider an infinite triangle made up of layers. Let' s number the layers, starting from one, from the top of the triangle ( from top to bottom) . The k - th layer of the triangle contains k points, numbered from left to right. Each point of an infinite triangle is described by a pair of numbers ( r, c) ( 1 \u2264 c \u2264 r ) , where r is the number of the layer, and c is the number of the point in the layer. From each point ( r, c) there are two directed edges to the points ( r+ 1, c) and ( r+ 1, c+ 1) , but only one of the edges is activated. If r + c is even, then the edge to the point ( r+ 1, c) is activated, otherwise the edge to the point ( r+ 1, c+ 1) is activated. Look at the picture for a better understanding. Activated edges are colored in black. Non- activated edges are colored in gray. From the point ( r_ 1, c_ 1) it is possible to reach the point ( r_ 2, c_ 2) , if there is a path between them only from activated edges. For example, in the picture above, there is a path from ( 1, 1) to ( 3, 2) , but there is no path from ( 2, 1) to ( 1, 1) . Initially, you are at the point ( 1, 1) . For each turn, you can: Replace activated edge for point ( r, c) . That is if the edge to the point ( r+ 1, c) is activated, then instead of it, the edge to the point ( r+ 1, c+ 1) becomes activated, otherwise if the edge to the point ( r+ 1, c+ 1) , then instead if it, the edge to the point ( r+ 1, c) becomes activated. This action increases the cost of the path by 1 ; Move from the current point to another by following the activated edge. This action does not increase the cost of the path. You are given a sequence of n points of an infinite triangle ( r_ 1, c_ 1) , ( r_ 2, c_ 2) , . . . , ( r_ n, c_ n) . Find the minimum cost path from ( 1, 1) , passing through all n points in arbitrary order.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) is the number of test cases. Then t test cases follow. Each test case begins with a line containing one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) is the number of points to visit. The second line contains n numbers r_ 1, r_ 2, . . . , r_ n ( 1 \u2264 r_ i \u2264 10^ 9 ) , where r_ i is the number of the layer in which i - th point is located. The third line contains n numbers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 r_ i ) , where c_ i is the number of the i - th point in the r_ i layer. It is guaranteed that all n points are distinct. It is guaranteed that there is always at least one way to traverse all n points. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the minimum cost of a path passing through all points in the corresponding test case.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math",
      "shortest paths",
      "sortings"
    ],
    "id": "1506F"
  },
  {
    "title": "Balance the Cards",
    "url": "https://codeforces.com/problemset/problem/1503/F",
    "history": "A balanced bracket sequence is defined as an integer sequence that can be built with the following rules: The empty sequence is balanced. If [ a_ 1, . . . , a_ n] and [ b_ 1, . . . , b_ m] are balanced, then their concatenation [ a_ 1, . . . , a_ n, b_ 1, . . . , b_ m] is balanced. If x is a positive integer and [ a_ 1, . . . , a_ n] is balanced, then [ x, a_ 1, . . . , a_ n, - x] is balanced. The positive numbers can be imagined as opening brackets and the negative numbers as closing brackets, where matching brackets must have the same type ( absolute value) . For example, [ 1, 2, - 2, - 1] and [ 1, 3, - 3, 2, - 2, - 1] are balanced, but [ 1, 2, - 1, - 2] and [ - 1, 1] are not balanced. There are 2n cards. Each card has a number on the front and a number on the back. Each integer 1, - 1, 2, - 2, . . . , n, - n appears exactly once on the front of some card and exactly once on the back of some ( not necessarily the same) card. You can reorder the cards however you like. You are not allowed to flip cards, so numbers cannot move between the front and back. Your task is to order the cards so that the sequences given by the front numbers and the back numbers are both balanced, or report that it is impossible.",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of bracket types, and half the number of cards. The next 2n lines describe the cards. The i - th of these lines contains two integers a_ i , b_ i ( - n\u2264 a_ i, b_ i\u2264 n , a_ i 0 , b_ i 0 ) \u2014 the numbers on the front and back of the i - th card, respectively. Every integer 1, - 1, 2, - 2, . . . , n, - n appears exactly once as a_ i and exactly once as b_ i .",
    "output": "On the first line, output \" YES\" if it' s possible to reorder these cards to satisfy the condition. Otherwise, output \" NO\" . You can print each letter in any case ( upper or lower) . If it is possible, on the next 2n lines output the cards in an order so that the front and back are both balanced. If there are multiple solutions, you may output any.",
    "note": "In the first test case, the front numbers create the balanced sequence [ 1, 4, - 4, - 1, 5, 3, 2, - 2, - 3, - 5] and the back numbers create the balanced sequence [ 3, - 3, 4, - 4, 1, - 1, 2, 5, - 5, - 2] . In the second test case, the cards are given in an order so that the front numbers are balanced, but the back numbers create the unbalanced sequence [ 1, 2, - 1, - 2] . If we swapped the second and third cards, we would balance the back numbers and unbalance the front numbers. But there is no order that balances both.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "geometry",
      "graphs",
      "implementation"
    ],
    "id": "1503F"
  },
  {
    "title": "Graph Coloring",
    "url": "https://codeforces.com/problemset/problem/1499/G",
    "history": "You are given a bipartite graph consisting of n_ 1 vertices in the first part, n_ 2 vertices in the second part, and m edges, numbered from 1 to m . You have to color each edge into one of two colors, red and blue. You have to minimize the following value: \u2211_ v \u2208 V | r( v) - b( v) | , where V is the set of vertices of the graph, r( v) is the number of red edges incident to v , and b( v) is the number of blue edges incident to v . Sounds classical and easy, right? Well, you have to process q queries of the following format: 1 v_ 1 v_ 2 \u2014 add a new edge connecting the vertex v_ 1 of the first part with the vertex v_ 2 of the second part. This edge gets a new index as follows: the first added edge gets the index m + 1 , the second \u2014 m + 2 , and so on. After adding the edge, you have to print the hash of the current optimal coloring ( if there are multiple optimal colorings, print the hash of any of them) . Actually, this hash won' t be verified, you may print any number as the answer to this query, but you may be asked to produce the coloring having this hash; 2 \u2014 print the optimal coloring of the graph with the same hash you printed while processing the previous query. The query of this type will only be asked after a query of type 1 , and there will be at most 10 queries of this type. If there are multiple optimal colorings corresponding to this hash, print any of them. Note that if an edge was red or blue in some coloring, it may change its color in next colorings. The hash of the coloring is calculated as follows: let R be the set of indices of red edges, then the hash is ( \u2211_ i \u2208 R 2^ i) 998244353 . Note that you should solve the problem in online mode. It means that you can' t read the whole input at once. You can read each query only after writing the answer for the last query. Use functions fflush in C+ + and BufferedWriter. flush in Java languages after each writing in your program.",
    "input": "The first line contains three integers n_ 1 , n_ 2 and m ( 1 \u2264 n_ 1, n_ 2, m \u2264 2 \u00b7 10^ 5 ) . Then m lines follow, the i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n_ 1 ; 1 \u2264 y_ i \u2264 n_ 2 ) meaning that the i - th edge connects the vertex x_ i from the first part and the vertex y_ i from the second part. The next line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries you have to process. The next q lines contain the queries in the format introduced in the statement. Additional constraints on the input: at any moment, the graph won' t contain any multiple edges; the queries of type 2 are only asked if the previous query had type 1 ; there are at most 10 queries of type 2 .",
    "output": "To answer a query of type 1 , print one integer \u2014 the hash of the optimal coloring. To answer a query of type 2 , print one line. It should begin with the integer k \u2014 the number of red edges. Then, k distinct integer should follow \u2014 the indices of red edges in your coloring, in any order. Each index should correspond to an existing edge, and the hash of the coloring you produce should be equal to the hash you printed as the answer to the previous query. If there are multiple answers to a query, you may print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "interactive"
    ],
    "id": "1499G"
  },
  {
    "title": "Two Houses",
    "url": "https://codeforces.com/problemset/problem/1498/E",
    "history": "This is an interactive problem. Remember to flush your output while communicating with the testing program. You may use fflush( stdout) in C+ + , system. out. flush( ) in Java, stdout. flush( ) in Python or flush( output) in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems: https: / / codeforces. com/ blog/ entry/ 45307. There is a city in which Dixit lives. In the city, there are n houses. There is exactly one directed road between every pair of houses. For example, consider two houses A and B, then there is a directed road either from A to B or from B to A but not both. The number of roads leading to the i - th house is k_ i . Two houses A and B are bi- reachable if A is reachable from B and B is reachable from A. We say that house B is reachable from house A when there is a path from house A to house B. Dixit wants to buy two houses in the city, that is, one for living and one for studying. Of course, he would like to travel from one house to another. So, he wants to find a pair of bi- reachable houses A and B. Among all such pairs, he wants to choose one with the maximum value of | k_ A - k_ B| , where k_ i is the number of roads leading to the house i . If more than one optimal pair exists, any of them is suitable. Since Dixit is busy preparing CodeCraft, can you help him find the desired pair of houses, or tell him that no such houses exist? In the problem input, you are not given the direction of each road. You are given \u2014 for each house \u2014 only the number of incoming roads to that house ( k_ i ) . You are allowed to ask only one type of query from the judge: give two houses A and B, and the judge answers whether B is reachable from A. There is no upper limit on the number of queries. But, you cannot ask more queries after the judge answers \" Yes\" to any of your queries. Also, you cannot ask the same query twice. Once you have exhausted all your queries ( or the judge responds \" Yes\" to any of your queries) , your program must output its guess for the two houses and quit. See the Interaction section below for more details. InteractionTo ask a query, print \" ? A B\" ( 1 \u2264 A, B \u2264 N, A= \u0338 B) . The judge will respond \" Yes\" if house B is reachable from house A, or \" No\" otherwise. To output the final answer, print \" ! A B\" , where A and B are bi- reachable with the maximum possible value of | k_ A - k_ B| . If there does not exist such pair of houses A and B, output \" ! 0 0\" . After outputting the final answer, your program must terminate immediately, otherwise you will receive Wrong Answer verdict. You cannot ask the same query twice. There is no upper limit to the number of queries you ask, but, you cannot ask more queries after the judge answers \" Yes\" to any of your queries. Your program must now output the final answer ( \" ! A B\" or \" ! 0 0\" ) and terminate. If you ask a query in incorrect format or repeat a previous query, you will get Wrong Answer verdict. After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get the Idleness limit exceeded error. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages.",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 500 ) denoting the number of houses in the city. The next line contains n space- separated integers k_ 1, k_ 2, . . . , k_ n ( 0 \u2264 k_ i \u2264 n - 1 ) , the i - th of them represents the number of incoming roads to the i - th house.",
    "output": "",
    "note": "In the first sample input, we are given a city of three houses with one incoming road each. The user program asks one query: \" ? 1 2\" : asking whether we can reach from house 1 to house 2 . The judge responds with \" Yes\" . The user program now concludes that this is sufficient information to determine the correct answer. So, it outputs \" ! 1 2\" and quits. In the second sample input, the user program queries for six different pairs of houses, and finally answers \" ! 0 0\" as it is convinced that no two houses as desired in the question exist in this city.",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ],
    "id": "1498E"
  },
  {
    "title": "Bananas in a Microwave",
    "url": "https://codeforces.com/problemset/problem/1498/D",
    "history": "You have a malfunctioning microwave in which you want to put some bananas. You have n time- steps before the microwave stops working completely. At each time- step, it displays a new operation. Let k be the number of bananas in the microwave currently. Initially, k = 0 . In the i - th operation, you are given three parameters t_ i , x_ i , y_ i in the input. Based on the value of t_ i , you must do one of the following: Type 1: ( t_ i= 1 , x_ i , y_ i ) \u2014 pick an a_ i , such that 0 \u2264 a_ i \u2264 y_ i , and perform the following update a_ i times: k: = \u2308 ( k + x_ i) \u2309 . Type 2: ( t_ i= 2 , x_ i , y_ i ) \u2014 pick an a_ i , such that 0 \u2264 a_ i \u2264 y_ i , and perform the following update a_ i times: k: = \u2308 ( k \u00b7 x_ i) \u2309 . Note that x_ i can be a fractional value. See input format for more details. Also, \u2308 x \u2309 is the smallest integer \u2265 x . At the i - th time- step, you must apply the i - th operation exactly once. For each j such that 1 \u2264 j \u2264 m , output the earliest time- step at which you can create exactly j bananas. If you cannot create exactly j bananas, output - 1 .",
    "input": "The first line contains two space- separated integers n ( 1 \u2264 n \u2264 200) and m ( 2 \u2264 m \u2264 10^ 5) . Then, n lines follow, where the i - th line denotes the operation for the i - th timestep. Each such line contains three space- separated integers t_ i , x' _ i and y_ i ( 1 \u2264 t_ i \u2264 2 , 1\u2264 y_ i\u2264 m ) . Note that you are given x' _ i , which is 10^ 5 \u00b7 x_ i . Thus, to obtain x_ i , use the formula x_ i= x' _ i10^ 5 . For type 1 operations, 1 \u2264 x' _ i \u2264 10^ 5 \u00b7 m , and for type 2 operations, 10^ 5 < x' _ i \u2264 10^ 5 \u00b7 m .",
    "output": "Print m integers, where the i - th integer is the earliest time- step when you can obtain exactly i bananas ( or - 1 if it is impossible) .",
    "note": "In the first sample input, let us see how to create 16 number of bananas in three timesteps. Initially, k= 0 . In timestep 1, we choose a_ 1= 2 , so we apply the type 1 update \u2014 k : = \u2308( k+ 3) \u2309 \u2014 two times. Hence, k is now 6. In timestep 2, we choose a_ 2= 0 , hence value of k remains unchanged. In timestep 3, we choose a_ 3= 1 , so we are applying the type 1 update k: = \u2308( k+ 10) \u2309 once. Hence, k is now 16. It can be shown that k= 16 cannot be reached in fewer than three timesteps with the given operations. In the second sample input, let us see how to create 17 number of bananas in two timesteps. Initially, k= 0 . In timestep 1, we choose a_ 1= 1 , so we apply the type 1 update \u2014 k : = \u2308( k+ 3. 99999) \u2309 \u2014 once. Hence, k is now 4. In timestep 2, we choose a_ 2= 1 , so we apply the type 2 update \u2014 k : = \u2308( k\u00b7 4. 12345) \u2309 \u2014 once. Hence, k is now 17. It can be shown that k= 17 cannot be reached in fewer than two timesteps with the given operations.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "implementation"
    ],
    "id": "1498D"
  },
  {
    "title": "Genius",
    "url": "https://codeforces.com/problemset/problem/1497/D",
    "history": "Please note the non- standard memory limit. There are n problems numbered with integers from 1 to n . i - th problem has the complexity c_ i = 2^ i , tag tag_ i and score s_ i . After solving the problem i it' s allowed to solve problem j if and only if IQ < | c_ i - c_ j| and tag_ i = \u0338 tag_ j . After solving it your IQ changes and becomes IQ = | c_ i - c_ j| and you gain | s_ i - s_ j| points. Any problem can be the first. You can solve problems in any order and as many times as you want. Initially your IQ = 0 . Find the maximum number of points that can be earned.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100) \u2014 the number of test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 5000) \u2014 the number of problems. The second line of each test case contains n integers tag_ 1, tag_ 2, . . . , tag_ n ( 1 \u2264 tag_ i \u2264 n) \u2014 tags of the problems. The third line of each test case contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9) \u2014 scores of the problems. It' s guaranteed that sum of n over all test cases does not exceed 5000 .",
    "output": "For each test case print a single integer \u2014 the maximum number of points that can be earned.",
    "note": "In the first test case optimal sequence of solving problems is as follows: 1 \u2192 2 , after that total score is 5 and IQ = 2 2 \u2192 3 , after that total score is 10 and IQ = 4 3 \u2192 1 , after that total score is 20 and IQ = 6 1 \u2192 4 , after that total score is 35 and IQ = 14 In the second test case optimal sequence of solving problems is as follows: 1 \u2192 2 , after that total score is 5 and IQ = 2 2 \u2192 3 , after that total score is 10 and IQ = 4 3 \u2192 4 , after that total score is 15 and IQ = 8 4 \u2192 1 , after that total score is 35 and IQ = 14 In the third test case optimal sequence of solving problems is as follows: 1 \u2192 3 , after that total score is 17 and IQ = 6 3 \u2192 4 , after that total score is 35 and IQ = 8 4 \u2192 2 , after that total score is 42 and IQ = 12",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "number theory"
    ],
    "id": "1497D"
  },
  {
    "title": "Squares",
    "url": "https://codeforces.com/problemset/problem/1495/F",
    "history": "There are n squares drawn from left to right on the floor. The i - th square has three integers p_ i, a_ i, b_ i , written on it. The sequence p_ 1, p_ 2, . . . , p_ n forms a permutation. Each round you will start from the leftmost square 1 and jump to the right. If you are now on the i - th square, you can do one of the following two operations: Jump to the i+ 1 - th square and pay the cost a_ i . If i= n , then you can end the round and pay the cost a_ i . Jump to the j - th square and pay the cost b_ i , where j is the leftmost square that satisfies j > i, p_ j > p_ i . If there is no such j then you can end the round and pay the cost b_ i . There are q rounds in the game. To make the game more difficult, you need to maintain a square set S ( initially it is empty) . You must pass through these squares during the round ( other squares can also be passed through) . The square set S for the i - th round is obtained by adding or removing a square from the square set for the ( i- 1) - th round. For each round find the minimum cost you should pay to end it.",
    "input": "The first line contains two integers n , q ( 1\u2264 n, q\u2264 2 \u00b7 10^ 5 ) \u2014 the number of squares and the number of rounds. The second line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1\u2264 p_ i\u2264 n ) . It is guaranteed that the sequence p_ 1, p_ 2, . . . , p_ n forms a permutation. The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i\u2264 10^ 9 ) . The fourth line contains n integers b_ 1, b_ 2, . . . , b_ n ( - 10^ 9\u2264 b_ i\u2264 10^ 9 ) . Then q lines follow, i - th of them contains a single integer x_ i ( 1\u2264 x_ i\u2264 n ) . If x_ i was in the set S on the ( i- 1) - th round you should remove it, otherwise, you should add it.",
    "output": "Print q lines, each of them should contain a single integer \u2014 the minimum cost you should pay to end the corresponding round.",
    "note": "Let' s consider the character T as the end of a round. Then we can draw two graphs for the first and the second test. In the first round of the first test, the set that you must pass through is { 1} . The path you can use is 1\u2192 3\u2192 T and its cost is 6 . In the second round of the first test, the set that you must pass through is { 1, 2} . The path you can use is 1\u2192 2\u2192 3\u2192 T and its cost is 8 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1495F"
  },
  {
    "title": "BFS Trees",
    "url": "https://codeforces.com/problemset/problem/1495/D",
    "history": "We define a spanning tree of a graph to be a BFS tree rooted at vertex s if and only if for every node t the shortest distance between s and t in the graph is equal to the shortest distance between s and t in the spanning tree. Given a graph, we define f( x, y) to be the number of spanning trees of that graph that are BFS trees rooted at vertices x and y at the same time. You are given an undirected connected graph with n vertices and m edges. Calculate f( i, j) for all i , j by modulo 998 244 353 .",
    "input": "The first line contains two integers n , m ( 1 \u2264 n \u2264 400 , 0 \u2264 m \u2264 600 ) \u2014 the number of vertices and the number of edges in the graph. The i - th of the next m lines contains two integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i < b_ i ) , representing an edge connecting a_ i and b_ i . It is guaranteed that all edges are distinct and the graph is connected.",
    "output": "Print n lines, each consisting of n integers. The integer printed in the row i and the column j should be f( i, j) 998 244 353 .",
    "note": "The following picture describes the first example. The tree with red edges is a BFS tree rooted at both 1 and 2 . Similarly, the BFS tree for other adjacent pairs of vertices can be generated in this way.",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "graphs",
      "math",
      "shortest paths",
      "trees"
    ],
    "id": "1495D"
  },
  {
    "title": "Garden of the Sun",
    "url": "https://codeforces.com/problemset/problem/1495/C",
    "history": "There are many sunflowers in the Garden of the Sun. Garden of the Sun is a rectangular table with n rows and m columns, where the cells of the table are farmlands. All of the cells grow a sunflower on it. Unfortunately, one night, the lightning stroke some ( possibly zero) cells, and sunflowers on those cells were burned into ashes. In other words, those cells struck by the lightning became empty. Magically, any two empty cells have no common points ( neither edges nor corners) . Now the owner wants to remove some ( possibly zero) sunflowers to reach the following two goals: When you are on an empty cell, you can walk to any other empty cell. In other words, those empty cells are connected. There is exactly one simple path between any two empty cells. In other words, there is no cycle among the empty cells. You can walk from an empty cell to another if they share a common edge. Could you please give the owner a solution that meets all her requirements? Note that you are not allowed to plant sunflowers. You don' t need to minimize the number of sunflowers you remove. It can be shown that the answer always exists.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line contains two integers n , m ( 1 \u2264 n, m \u2264 500 ) \u2014 the number of rows and columns. Each of the next n lines contains m characters. Each character is either ' X' or ' . ' , representing an empty cell and a cell that grows a sunflower, respectively. It is guaranteed that the sum of n \u00b7 m for all test cases does not exceed 250 000 .",
    "output": "For each test case, print n lines. Each should contain m characters, representing one row of the table. Each character should be either ' X' or ' . ' , representing an empty cell and a cell with a sunflower, respectively. If there are multiple answers, you can print any. It can be shown that the answer always exists.",
    "note": "Let' s use ( x, y) to describe the cell on x - th row and y - th column. In the following pictures white, yellow, and blue cells stand for the cells that grow a sunflower, the cells lightning stroke, and the cells sunflower on which are removed, respectively. In the first test case, one possible solution is to remove sunflowers on ( 1, 2) , ( 2, 3) and ( 3 , 2) . Another acceptable solution is to remove sunflowers on ( 1, 2) , ( 2, 2) and ( 3, 2) . This output is considered wrong because there are 2 simple paths between any pair of cells ( there is a cycle) . For example, there are 2 simple paths between ( 1, 1) and ( 3, 3) . ( 1, 1) \u2192 ( 1, 2) \u2192 ( 1, 3) \u2192 ( 2, 3) \u2192 ( 3, 3) ( 1, 1) \u2192 ( 2, 1) \u2192 ( 3, 1) \u2192 ( 3, 2) \u2192 ( 3, 3) This output is considered wrong because you can' t walk from ( 1, 1) to ( 3, 3) .",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1495C"
  },
  {
    "title": "Delete The Edges",
    "url": "https://codeforces.com/problemset/problem/1494/F",
    "history": "You are given an undirected connected graph consisting of n vertices and m edges. Your goal is to destroy all edges of the given graph. You may choose any vertex as the starting one and begin walking from it along the edges. When you walk along an edge, you destroy it. Obviously, you cannot walk along an edge if it is destroyed. You can perform the mode shift operation at most once during your walk, and this operation can only be performed when you are at some vertex ( you cannot perform it while traversing an edge) . After the mode shift, the edges you go through are deleted in the following way: the first edge after the mode shift is not destroyed, the second one is destroyed, the third one is not destroyed, the fourth one is destroyed, and so on. You cannot switch back to the original mode, and you don' t have to perform this operation if you don' t want to. Can you destroy all the edges of the given graph?",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 3000 ; n - 1 \u2264 m \u2264min( n( n- 1) / 2, 3000 ) ) \u2014 the numbef of vertices and the number of edges in the graph. Then m lines follow, each containing two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ) \u2014 the endpoints of the i - th edge. These edges form a connected undirected graph without multiple edges.",
    "output": "If it' s impossible to destroy all of the edges, print 0. Otherwise, print the sequence of your actions as follows. First, print k \u2014 the number of actions ( k \u2264 2m + 2 ) . Then, print the sequence itself, consisting of k integers. The first integer should be the index of the starting vertex. Then, each of the next integers should be either the index of the next vertex in your traversal, or - 1 if you use mode shift. You are allowed to use mode shift at most once. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "1494F"
  },
  {
    "title": "A-Z Graph",
    "url": "https://codeforces.com/problemset/problem/1494/E",
    "history": "You are given a directed graph consisting of n vertices. Each directed edge ( or arc) labeled with a single character. Initially, the graph is empty. You should process m queries with it. Each query is one of three types: \" + u v c \" \u2014 add arc from u to v with label c . It' s guaranteed that there is no arc ( u, v) in the graph at this moment; \" - u v \" \u2014 erase arc from u to v . It' s guaranteed that the graph contains arc ( u, v) at this moment; \" ? k \" \u2014 find the sequence of k vertices v_ 1, v_ 2, . . . , v_ k such that there exist both routes v_ 1 \u2192 v_ 2 \u2192. . . \u2192 v_ k and v_ k \u2192 v_ k - 1\u2192. . . \u2192 v_ 1 and if you write down characters along both routes you' ll get the same string. You can visit the same vertices any number of times.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the graph and the number of queries. The next m lines contain queries \u2014 one per line. Each query is one of three types: \" + u v c \" ( 1 \u2264 u, v \u2264 n ; u = \u0338 v ; c is a lowercase Latin letter) ; \" - u v \" ( 1 \u2264 u, v \u2264 n ; u = \u0338 v ) ; \" ? k \" ( 2 \u2264 k \u2264 10^ 5 ) . It' s guaranteed that you don' t add multiple edges and erase only existing edges. Also, there is at least one query of the third type.",
    "output": "For each query of the third type, print YES if there exist the sequence v_ 1, v_ 2, . . . , v_ k described above, or NO otherwise.",
    "note": "In the first query of the third type k = 3 , we can, for example, choose a sequence [ 1, 2, 3] , since 1 2 3 and 3 2 1 . In the second query of the third type k = 2 , and we can' t find sequence p_ 1, p_ 2 such that arcs ( p_ 1, p_ 2) and ( p_ 2, p_ 1) have the same characters. In the third query of the third type, we can, for example, choose a sequence [ 1, 2, 3, 2, 1] , where 1 2 3 2 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "hashing"
    ],
    "id": "1494E"
  },
  {
    "title": "Switch and Flip",
    "url": "https://codeforces.com/problemset/problem/1491/G",
    "history": "There are n coins labeled from 1 to n . Initially, coin c_ i is on position i and is facing upwards ( ( c_ 1, c_ 2, . . . , c_ n) is a permutation of numbers from 1 to n ) . You can do some operations on these coins. In one operation, you can do the following: Choose 2 distinct indices i and j . Then, swap the coins on positions i and j . Then, flip both coins on positions i and j . ( If they are initially faced up, they will be faced down after the operation and vice versa) Construct a sequence of at most n+ 1 operations such that after performing all these operations the coin i will be on position i at the end, facing up. Note that you do not need to minimize the number of operations.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of coins. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 n , c_ i = \u0338 c_ j for i= \u0338 j ) .",
    "output": "In the first line, output an integer q ( 0 \u2264 q \u2264 n+ 1) \u2014 the number of operations you used. In the following q lines, output two integers i and j ( 1 \u2264 i, j \u2264 n, i j) \u2014 the positions you chose for the current operation.",
    "note": "Let coin i facing upwards be denoted as i and coin i facing downwards be denoted as - i . The series of moves performed in the first sample changes the coins as such: [ 2, 1, 3] [ - 3, 1, - 2] [ - 3, 2, - 1] [ 1, 2, 3] In the second sample, the coins are already in their correct positions so there is no need to swap.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math"
    ],
    "id": "1491G"
  },
  {
    "title": "Cheap Dinner",
    "url": "https://codeforces.com/problemset/problem/1487/E",
    "history": "Ivan wants to have a good dinner. A good dinner should consist of a first course, a second course, a drink, and a dessert. There are n_ 1 different types of first courses Ivan can buy ( the i - th of them costs a_ i coins) , n_ 2 different types of second courses ( the i - th of them costs b_ i coins) , n_ 3 different types of drinks ( the i - th of them costs c_ i coins) and n_ 4 different types of desserts ( the i - th of them costs d_ i coins) . Some dishes don' t go well with each other. There are m_ 1 pairs of first courses and second courses that don' t go well with each other, m_ 2 pairs of second courses and drinks, and m_ 3 pairs of drinks and desserts that don' t go well with each other. Ivan wants to buy exactly one first course, one second course, one drink, and one dessert so that they go well with each other, and the total cost of the dinner is the minimum possible. Help him to find the cheapest dinner option!",
    "input": "The first line contains four integers n_ 1 , n_ 2 , n_ 3 and n_ 4 ( 1 \u2264 n_ i \u2264 150000 ) \u2014 the number of types of first courses, second courses, drinks and desserts, respectively. Then four lines follow. The first line contains n_ 1 integers a_ 1, a_ 2, . . . , a_ n_ 1 ( 1 \u2264 a_ i \u2264 10^ 8 ) , where a_ i is the cost of the i - th type of first course. Three next lines denote the costs of second courses, drinks, and desserts in the same way ( 1 \u2264 b_ i, c_ i, d_ i \u2264 10^ 8 ) . The next line contains one integer m_ 1 ( 0 \u2264 m_ 1 \u2264 200000 ) \u2014 the number of pairs of first and second courses that don' t go well with each other. Each of the next m_ 1 lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n_ 1 ; 1 \u2264 y_ i \u2264 n_ 2 ) denoting that the first course number x_ i doesn' t go well with the second course number y_ i . All these pairs are different. The block of pairs of second dishes and drinks that don' t go well with each other is given in the same format. The same for pairs of drinks and desserts that don' t go well with each other ( 0 \u2264 m_ 2, m_ 3 \u2264 200000 ) .",
    "output": "If it' s impossible to choose a first course, a second course, a drink, and a dessert so that they go well with each other, print - 1 . Otherwise, print one integer \u2014 the minimum total cost of the dinner.",
    "note": "The best option in the first example is to take the first course 2 , the second course 1 , the drink 2 and the dessert 1 . In the second example, the only pair of the first course and the second course is bad, so it' s impossible to have dinner.",
    "topics": [
      "brute force",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1487E"
  },
  {
    "title": "Minimum Ties",
    "url": "https://codeforces.com/problemset/problem/1487/C",
    "history": "A big football championship will occur soon! n teams will compete in it, and each pair of teams will play exactly one game against each other. There are two possible outcomes of a game: the game may result in a tie, then both teams get 1 point; one team might win in a game, then the winning team gets 3 points and the losing team gets 0 points. The score of a team is the number of points it gained during all games that it played. You are interested in a hypothetical situation when all teams get the same score at the end of the championship. A simple example of that situation is when all games result in ties, but you want to minimize the number of ties as well. Your task is to describe a situation ( choose the result of each game) so that all teams get the same score, and the number of ties is the minimum possible.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then the test cases follow. Each test case is described by one line containing one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of teams.",
    "output": "For each test case, print n( n - 1) / 2 integers describing the results of the games in the following order: the first integer should correspond to the match between team 1 and team 2 , the second \u2014 between team 1 and team 3 , then 1 and 4 , . . . , 1 and n , 2 and 3 , 2 and 4 , . . . , 2 and n , and so on, until the game between the team n - 1 and the team n . The integer corresponding to the game between the team x and the team y should be 1 if x wins, - 1 if y wins, or 0 if the game results in a tie. All teams should get the same score, and the number of ties should be the minimum possible. If there are multiple optimal answers, print any of them. It can be shown that there always exists a way to make all teams have the same score.",
    "note": "In the first test case of the example, both teams get 1 point since the game between them is a tie. In the second test case of the example, team 1 defeats team 2 ( team 1 gets 3 points) , team 1 loses to team 3 ( team 3 gets 3 points) , and team 2 wins against team 3 ( team 2 gets 3 points) .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1487C"
  },
  {
    "title": "Paired Payment",
    "url": "https://codeforces.com/problemset/problem/1486/E",
    "history": "There are n cities and m bidirectional roads in the country. The roads in the country form an undirected weighted graph. The graph is not guaranteed to be connected. Each road has it' s own parameter w . You can travel through the roads, but the government made a new law: you can only go through two roads at a time ( go from city a to city b and then from city b to city c ) and you will have to pay ( w_ ab + w_ bc) ^ 2 money to go through those roads. Find out whether it is possible to travel from city 1 to every other city t and what' s the minimum amount of money you need to get from 1 to t .",
    "input": "First line contains two integers n , m ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 min( n \u00b7 ( n - 1) / 2, 2 \u00b7 10^ 5) ) . Next m lines each contain three integers v_ i , u_ i , w_ i ( 1 \u2264 v_ i, u_ i \u2264 n , 1 \u2264 w_ i \u2264 50 , u_ i = \u0338 v_ i ) . It' s guaranteed that there are no multiple edges, i. e. for any edge ( u_ i, v_ i) there are no other edges ( u_ i, v_ i) or ( v_ i, u_ i) .",
    "output": "For every city t print one integer. If there is no correct path between 1 and t output - 1 . Otherwise print out the minimum amount of money needed to travel from 1 to t .",
    "note": "The graph in the first example looks like this. In the second example the path from 1 to 3 goes through 2 , so the resulting payment is ( 1 + 2) ^ 2 = 9 .",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "dp",
      "flows",
      "graphs",
      "shortest paths"
    ],
    "id": "1486E"
  },
  {
    "title": "Multiples and Power Differences",
    "url": "https://codeforces.com/problemset/problem/1485/D",
    "history": "You are given a matrix a consisting of positive integers. It has n rows and m columns. Construct a matrix b consisting of positive integers. It should have the same size as a , and the following conditions should be met: 1 \u2264 b_ i, j\u2264 10^ 6 ; b_ i, j is a multiple of a_ i, j ; the absolute value of the difference between numbers in any adjacent pair of cells ( two cells that share the same side) in b is equal to k^ 4 for some integer k \u2265 1 ( k is not necessarily the same for all pairs, it is own for each pair) . We can show that the answer always exists.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n, m \u2264 500 ) . Each of the following n lines contains m integers. The j - th integer in the i - th line is a_ i, j ( 1 \u2264 a_ i, j\u2264 16 ) .",
    "output": "The output should contain n lines each containing m integers. The j - th integer in the i - th line should be b_ i, j .",
    "note": "In the first example, the matrix a can be used as the matrix b , because the absolute value of the difference between numbers in any adjacent pair of cells is 1 = 1^ 4 . In the third example: 327 is a multiple of 3 , 583 is a multiple of 11 , 408 is a multiple of 12 , 664 is a multiple of 8 ; | 408 - 327| = 3^ 4 , | 583 - 327| = 4^ 4 , | 664 - 408| = 4^ 4 , | 664 - 583| = 3^ 4 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math",
      "number theory"
    ],
    "id": "1485D"
  },
  {
    "title": "Useful Edges",
    "url": "https://codeforces.com/problemset/problem/1482/F",
    "history": "You are given a weighted undirected graph on n vertices along with q triples ( u, v, l) , where in each triple u and v are vertices and l is a positive integer. An edge e is called useful if there is at least one triple ( u, v, l) and a path ( not necessarily simple) with the following properties: u and v are the endpoints of this path, e is one of the edges of this path, the sum of weights of all edges on this path doesn' t exceed l . Please print the number of useful edges in this graph.",
    "input": "The first line contains two integers n and m ( 2\u2264 n\u2264 600 , 0\u2264 m\u2264n( n- 1) / 2 ) . Each of the following m lines contains three integers u , v and w ( 1\u2264 u, v\u2264 n , u= \u0338 v , 1\u2264 w\u2264 10^ 9 ) , denoting an edge connecting vertices u and v and having a weight w . The following line contains the only integer q ( 1\u2264 q\u2264n( n- 1) / 2 ) denoting the number of triples. Each of the following q lines contains three integers u , v and l ( 1\u2264 u, v\u2264 n , u= \u0338 v , 1\u2264 l\u2264 10^ 9 ) denoting a triple ( u, v, l) . It' s guaranteed that: the graph doesn' t contain loops or multiple edges; all pairs ( u, v) in the triples are also different.",
    "output": "Print a single integer denoting the number of useful edges in the graph.",
    "note": "In the first example each edge is useful, except the one of weight 5 . In the second example only edge between 1 and 2 is useful, because it belongs to the path 1- 2 , and 10 \u2264 11 . The edge between 3 and 4 , on the other hand, is not useful. In the third example both edges are useful, for there is a path 1- 2- 3- 2 of length exactly 5 . Please note that the path may pass through a vertex more than once.",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "1482F"
  },
  {
    "title": "AB Graph",
    "url": "https://codeforces.com/problemset/problem/1481/D",
    "history": "Your friend Salem is Warawreh' s brother and only loves math and geometry problems. He has solved plenty of such problems, but according to Warawreh, in order to graduate from university he has to solve more graph problems. Since Salem is not good with graphs he asked your help with the following problem. You are given a complete directed graph with n vertices without self- loops. In other words, you have n vertices and each pair of vertices u and v ( u = \u0338 v ) has both directed edges ( u, v) and ( v, u) . Every directed edge of the graph is labeled with a single character: either ' a' or ' b' ( edges ( u, v) and ( v, u) may have different labels) . You are also given an integer m > 0 . You should find a path of length m such that the string obtained by writing out edges' labels when going along the path is a palindrome. The length of the path is the number of edges in it. You can visit the same vertex and the same directed edge any number of times.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 1000 ; 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of vertices in the graph and desirable length of the palindrome. Each of the next n lines contains n characters. The j - th character of the i - th line describes the character on the edge that is going from node i to node j . Every character is either ' a' or ' b' if i = \u0338 j , or ' * ' if i = j , since the graph doesn' t contain self- loops. It' s guaranteed that the sum of n over test cases doesn' t exceed 1000 and the sum of m doesn' t exceed 10^ 5 .",
    "output": "For each test case, if it is possible to find such path, print \" YES\" and the path itself as a sequence of m + 1 integers: indices of vertices in the path in the appropriate order. If there are several valid paths, print any of them. Otherwise, ( if there is no answer) print \" NO\" .",
    "note": "The graph from the first three test cases is shown below: In the first test case, the answer sequence is [ 1, 2] which means that the path is: 1 2 So the string that is obtained by the given path is b. In the second test case, the answer sequence is [ 2, 1, 3, 2] which means that the path is: 2 1 3 2 So the string that is obtained by the given path is bab. In the third test case, the answer sequence is [ 1, 3, 1, 3, 1] which means that the path is: 1 3 1 3 1 So the string that is obtained by the given path is aaaa. The string obtained in the fourth test case is abaaba.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1481D"
  },
  {
    "title": "Nezzar and Hidden Permutations",
    "url": "https://codeforces.com/problemset/problem/1477/D",
    "history": "Nezzar designs a brand new game \" Hidden Permutations\" and shares it with his best friend, Nanako. At the beginning of the game, Nanako and Nezzar both know integers n and m . The game goes in the following way: Firstly, Nezzar hides two permutations p_ 1, p_ 2, . . . , p_ n and q_ 1, q_ 2, . . . , q_ n of integers from 1 to n , and Nanako secretly selects m unordered pairs ( l_ 1, r_ 1) , ( l_ 2, r_ 2) , . . . , ( l_ m, r_ m) ; After that, Nanako sends his chosen pairs to Nezzar; On receiving those m unordered pairs, Nezzar checks if there exists 1 \u2264 i \u2264 m , such that ( p_ l_ i- p_ r_ i) and ( q_ l_ i- q_ r_ i) have different signs. If so, Nezzar instantly loses the game and gets a score of - 1 . Otherwise, the score Nezzar gets is equal to the number of indices 1 \u2264 i \u2264 n such that p_ i = \u0338 q_ i . However, Nezzar accidentally knows Nanako' s unordered pairs and decides to take advantage of them. Please help Nezzar find out two permutations p and q such that the score is maximized.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains two integers n, m ( 1 \u2264 n \u2264 5 \u00b7 10^ 5, 0 \u2264 m \u2264min( n( n- 1) / 2, 5 \u00b7 10^ 5) ) . Then m lines follow, i - th of them contains two integers l_ i, r_ i ( 1 \u2264 l_ i, r_ i \u2264 n , l_ i = \u0338 r_ i ) , describing the i - th unordered pair Nanako chooses. It is guaranteed that all m unordered pairs are distinct. It is guaranteed that the sum of n for all test cases does not exceed 5 \u00b7 10^ 5 , and the sum of m for all test cases does not exceed 5\u00b7 10^ 5 .",
    "output": "For each test case, print two permutations p_ 1, p_ 2, . . . , p_ n and q_ 1, q_ 2, . . . , q_ n such that the score Nezzar gets is maximized.",
    "note": "For first test case, for each pair given by Nanako: for the first pair ( 1, 2) : p_ 1 - p_ 2 = 1 - 2 = - 1 , q_ 1 - q_ 2 = 3 - 4 = - 1 , they have the same sign; for the second pair ( 3, 4) : p_ 3 - p_ 4 = 3 - 4 = - 1 , q_ 3 - q_ 4 = 1 - 2 = - 1 , they have the same sign. As Nezzar does not lose instantly, Nezzar gains the score of 4 as p_ i = \u0338 q_ i for all 1 \u2264 i \u2264 4 . Obviously, it is the maximum possible score Nezzar can get.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "1477D"
  },
  {
    "title": "Pattern Matching",
    "url": "https://codeforces.com/problemset/problem/1476/E",
    "history": "You are given n patterns p_ 1, p_ 2, . . . , p_ n and m strings s_ 1, s_ 2, . . . , s_ m . Each pattern p_ i consists of k characters that are either lowercase Latin letters or wildcard characters ( denoted by underscores) . All patterns are pairwise distinct. Each string s_ j consists of k lowercase Latin letters. A string a matches a pattern b if for each i from 1 to k either b_ i is a wildcard character or b_ i= a_ i . You are asked to rearrange the patterns in such a way that the first pattern the j - th string matches is p[ mt_ j] . You are allowed to leave the order of the patterns unchanged. Can you perform such a rearrangement? If you can, then print any valid order.",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n, m \u2264 10^ 5 , 1 \u2264 k \u2264 4 ) \u2014 the number of patterns, the number of strings and the length of each pattern and string. Each of the next n lines contains a pattern \u2014 k characters that are either lowercase Latin letters or underscores. All patterns are pairwise distinct. Each of the next m lines contains a string \u2014 k lowercase Latin letters, and an integer mt ( 1 \u2264 mt \u2264 n ) \u2014 the index of the first pattern the corresponding string should match.",
    "output": "Print \" NO\" if there is no way to rearrange the patterns in such a way that the first pattern that the j - th string matches is p[ mt_ j] . Otherwise, print \" YES\" in the first line. The second line should contain n distinct integers from 1 to n \u2014 the order of the patterns. If there are multiple answers, print any of them.",
    "note": "The order of patterns after the rearrangement in the first example is the following: aaaa _ _ b_ ab_ _ _ bcd _ b_ d Thus, the first string matches patterns ab_ _ , _ bcd, _ b_ d in that order, the first of them is ab_ _ , that is indeed p[ 4] . The second string matches _ _ b_ and ab_ _ , the first of them is _ _ b_ , that is p[ 2] . The last string matches _ bcd and _ b_ d, the first of them is _ bcd, that is p[ 5] . The answer to that test is not unique, other valid orders also exist. In the second example cba doesn' t match _ _ c, thus, no valid order exists. In the third example the order ( a_ , _ b) makes both strings match pattern 1 first and the order ( _ b, a_ ) makes both strings match pattern 2 first. Thus, there is no order that produces the result 1 and 2 .",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "graphs",
      "hashing",
      "sortings",
      "strings"
    ],
    "id": "1476E"
  },
  {
    "title": "Longest Simple Cycle",
    "url": "https://codeforces.com/problemset/problem/1476/C",
    "history": "You have n chains, the i - th chain consists of c_ i vertices. Vertices in each chain are numbered independently from 1 to c_ i along the chain. In other words, the i - th chain is the undirected graph with c_ i vertices and ( c_ i - 1) edges connecting the j - th and the ( j + 1) - th vertices for each 1 \u2264 j < c_ i . Now you decided to unite chains in one graph in the following way: the first chain is skipped; the 1 - st vertex of the i - th chain is connected by an edge with the a_ i - th vertex of the ( i - 1) - th chain; the last ( c_ i - th) vertex of the i - th chain is connected by an edge with the b_ i - th vertex of the ( i - 1) - th chain. Picture of the first test case. Dotted lines are the edges added during uniting process Calculate the length of the longest simple cycle in the resulting graph. A simple cycle is a chain where the first and last vertices are connected as well. If you travel along the simple cycle, each vertex of this cycle will be visited exactly once.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of chains you have. The second line of each test case contains n integers c_ 1, c_ 2, . . . , c_ n ( 2 \u2264 c_ i \u2264 10^ 9 ) \u2014 the number of vertices in the corresponding chains. The third line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( a_ 1 = - 1 ; 1 \u2264 a_ i \u2264 c_ i - 1 ) . The fourth line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( b_ 1 = - 1 ; 1 \u2264 b_ i \u2264 c_ i - 1 ) . Both a_ 1 and b_ 1 are equal to - 1 , they aren' t used in graph building and given just for index consistency. It' s guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print the length of the longest simple cycle.",
    "note": "In the first test case, the longest simple cycle is shown below: We can' t increase it with the first chain, since in such case it won' t be simple \u2014 the vertex 2 on the second chain will break simplicity.",
    "topics": [
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1476C"
  },
  {
    "title": "Ball in Berland",
    "url": "https://codeforces.com/problemset/problem/1475/C",
    "history": "At the school where Vasya is studying, preparations are underway for the graduation ceremony. One of the planned performances is a ball, which will be attended by pairs of boys and girls. Each class must present two couples to the ball. In Vasya' s class, a boys and b girls wish to participate. But not all boys and not all girls are ready to dance in pairs. Formally, you know k possible one- boy- one- girl pairs. You need to choose two of these pairs so that no person is in more than one pair. For example, if a= 3 , b= 4 , k= 4 and the couples ( 1, 2) , ( 1, 3) , ( 2, 2) , ( 3, 4) are ready to dance together ( in each pair, the boy' s number comes first, then the girl' s number) , then the following combinations of two pairs are possible ( not all possible options are listed below) : ( 1, 3) and ( 2, 2) ; ( 3, 4) and ( 1, 3) ; But the following combinations are not possible: ( 1, 3) and ( 1, 2) \u2014 the first boy enters two pairs; ( 1, 2) and ( 2, 2) \u2014 the second girl enters two pairs; Find the number of ways to select two pairs that match the condition above. Two ways are considered different if they consist of different pairs.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains three integers a , b and k ( 1 \u2264 a, b, k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of boys and girls in the class and the number of couples ready to dance together. The second line of each test case contains k integers a_ 1, a_ 2, . . . a_ k . ( 1 \u2264 a_ i \u2264 a ) , where a_ i is the number of the boy in the pair with the number i . The third line of each test case contains k integers b_ 1, b_ 2, . . . b_ k . ( 1 \u2264 b_ i \u2264 b ) , where b_ i is the number of the girl in the pair with the number i . It is guaranteed that the sums of a , b , and k over all test cases do not exceed 2 \u00b7 10^ 5 . It is guaranteed that each pair is specified at most once in one test case.",
    "output": "For each test case, on a separate line print one integer \u2014 the number of ways to choose two pairs that match the condition above.",
    "note": "In the first test case, the following combinations of pairs fit: ( 1, 2) and ( 3, 4) ; ( 1, 3) and ( 2, 2) ; ( 1, 3) and ( 3, 4) ; ( 2, 2) and ( 3, 4) . There is only one pair in the second test case. In the third test case, the following combinations of pairs fit: ( 1, 1) and ( 2, 2) ; ( 1, 2) and ( 2, 1) .",
    "topics": [
      "combinatorics",
      "graphs",
      "math"
    ],
    "id": "1475C"
  },
  {
    "title": "Minimum Path",
    "url": "https://codeforces.com/problemset/problem/1473/E",
    "history": "You are given a weighted undirected connected graph consisting of n vertices and m edges. It is guaranteed that there are no self- loops or multiple edges in the given graph. Let' s define the weight of the path consisting of k edges with indices e_ 1, e_ 2, . . . , e_ k as \u2211_ i= 1^ kw_ e_ i - max_ i= 1^ kw_ e_ i + min_ i= 1^ kw_ e_ i , where w_ i \u2014 weight of the i - th edge in the graph. Your task is to find the minimum weight of the path from the 1 - st vertex to the i - th vertex for each i ( 2 \u2264 i \u2264 n ) .",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges in the graph. Following m lines contains three integers v_ i, u_ i, w_ i ( 1 \u2264 v_ i, u_ i \u2264 n ; 1 \u2264 w_ i \u2264 10^ 9 ; v_ i = \u0338 u_ i ) \u2014 endpoints of the i - th edge and its weight respectively.",
    "output": "Print n- 1 integers \u2014 the minimum weight of the path from 1 - st vertex to the i - th vertex for each i ( 2 \u2264 i \u2264 n ) .",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "1473E"
  },
  {
    "title": "Moving to the Capital",
    "url": "https://codeforces.com/problemset/problem/1472/G",
    "history": "There are n cities in Berland. The city numbered 1 is the capital. Some pairs of cities are connected by a one- way road of length 1. Before the trip, Polycarp for each city found out the value of d_ i \u2014 the shortest distance from the capital ( the 1 - st city) to the i - th city. Polycarp begins his journey in the city with number s and, being in the i - th city, chooses one of the following actions: Travel from the i - th city to the j - th city if there is a road from the i - th city to the j - th and d_ i < d_ j ; Travel from the i - th city to the j - th city if there is a road from the i - th city to the j - th and d_ i \u2265 d_ j ; Stop traveling. Since the government of Berland does not want all people to come to the capital, so Polycarp no more than once can take the second action from the list. in other words, he can perform the second action 0 or 1 time during his journey. Polycarp, on the other hand, wants to be as close to the capital as possible. For example, if n = 6 and the cities are connected, as in the picture above, then Polycarp could have made the following travels ( not all possible options) : 2 \u2192 5 \u2192 1 \u2192 2 \u2192 5 ; 3 \u2192 6 \u2192 2 ; 1 \u2192 3 \u2192 6 \u2192 2 \u2192 5 . Polycarp wants for each starting city i to find out how close he can get to the capital. More formally: he wants to find the minimal value of d_ j that Polycarp can get from the city i to the city j according to the rules described above.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case is preceded by an empty line. The first line of each test case contains two integers n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) and m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 number of cities and roads, respectively. This is followed by m lines describing the roads. Each road is characterized by two integers u and v ( 1 \u2264 u, v \u2264 n, u v ) \u2014 the numbers of cities connected by a one- way road. It is guaranteed that the sums of n and m over all test cases do not exceed 2 \u00b7 10^ 5 . It is guaranteed that for each pair of different cities ( u, v) there is at most one road from u to v ( but a pair of roads from u to v and from v to u \u2014 is valid) . It is guaranteed that there is a path from the capital to all cities.",
    "output": "For each test case, on a separate line output n numbers, the i - th of which is equal to the minimum possible distance from the capital to the city where Polycarp ended his journey.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "1472G"
  },
  {
    "title": "Long Jumps",
    "url": "https://codeforces.com/problemset/problem/1472/C",
    "history": "Polycarp found under the Christmas tree an array a of n elements and instructions for playing with it: At first, choose index i ( 1 \u2264 i \u2264 n ) \u2014 starting position in the array. Put the chip at the index i ( on the value a_ i ) . While i \u2264 n , add a_ i to your score and move the chip a_ i positions to the right ( i. e. replace i with i + a_ i ) . If i > n , then Polycarp ends the game. For example, if n = 5 and a = [ 7, 3, 1, 2, 3] , then the following game options are possible: Polycarp chooses i = 1 . Game process: i = 1 + 7\u27f6 8 . The score of the game is: a_ 1 = 7 . Polycarp chooses i = 2 . Game process: i = 2 + 3\u27f6 5 + 3\u27f6 8 . The score of the game is: a_ 2 + a_ 5 = 6 . Polycarp chooses i = 3 . Game process: i = 3 + 1\u27f6 4 + 2\u27f6 6 . The score of the game is: a_ 3 + a_ 4 = 3 . Polycarp chooses i = 4 . Game process: i = 4 + 2\u27f6 6 . The score of the game is: a_ 4 = 2 . Polycarp chooses i = 5 . Game process: i = 5 + 3\u27f6 8 . The score of the game is: a_ 5 = 3 . Help Polycarp to find out the maximum score he can get if he chooses the starting index in an optimal way.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output on a separate line one number \u2014 the maximum score that Polycarp can get by playing the game on the corresponding array according to the instruction from the statement. Note that Polycarp chooses any starting position from 1 to n in such a way as to maximize his result.",
    "note": "The first test case is explained in the statement. In the second test case, the maximum score can be achieved by choosing i = 1 . In the third test case, the maximum score can be achieved by choosing i = 2 . In the fourth test case, the maximum score can be achieved by choosing i = 1 .",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "1472C"
  },
  {
    "title": "Strange Permutation",
    "url": "https://codeforces.com/problemset/problem/1470/E",
    "history": "Alice had a permutation p_ 1, p_ 2, . . . , p_ n . Unfortunately, the permutation looked very boring, so she decided to change it and choose some non- overlapping subranges of this permutation and reverse them. The cost of reversing a single subrange [ l, r] ( elements from position l to position r , inclusive) is equal to r - l , and the cost of the operation is the sum of costs of reversing individual subranges. Alice had an integer c in mind, so she only considered operations that cost no more than c . Then she got really bored, and decided to write down all the permutations that she could possibly obtain by performing exactly one operation on the initial permutation. Of course, Alice is very smart, so she wrote down each obtainable permutation exactly once ( no matter in how many ways it can be obtained) , and of course the list was sorted lexicographically. Now Bob would like to ask Alice some questions about her list. Each question is in the following form: what is the i - th number in the j - th permutation that Alice wrote down? Since Alice is too bored to answer these questions, she asked you to help her out.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 30 ) \u2014 the number of test cases. The first line of each test case contains three integers n , c , q ( 1 \u2264 n \u2264 3 \u00b7 10^ 4 , 1 \u2264 c \u2264 4 , 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the permutation, the maximum cost of the operation, and the number of queries. The next line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , p_ i = \u0338 p_ j if i = \u0338 j ) , describing the initial permutation. The following q lines describe the queries. Each of them contains two integers i and j ( 1 \u2264 i \u2264 n , 1 \u2264 j \u2264 10^ 18 ) , denoting parameters of this query. It is guaranteed that the sum of values n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of values q over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each query output the answer for this query, or - 1 if j - th permutation does not exist in her list.",
    "note": "In the first test case, Alice wrote down the following permutations: [ 1, 2, 3] , [ 1, 3, 2] , [ 2, 1, 3] . Note that, for a permutation [ 3, 2, 1] Alice would have to reverse the whole array, and it would cost her 2 , which is greater than the specified value c= 1 . The other two permutations can not be obtained by performing exactly one operation described in the problem statement.",
    "topics": [
      "binary search",
      "combinatorics",
      "data structures",
      "dp",
      "graphs",
      "implementation",
      "two pointers"
    ],
    "id": "1470E"
  },
  {
    "title": "Strange Housing",
    "url": "https://codeforces.com/problemset/problem/1470/D",
    "history": "Students of Winter Informatics School are going to live in a set of houses connected by underground passages. Teachers are also going to live in some of these houses, but they can not be accommodated randomly. For safety reasons, the following must hold: All passages between two houses will be closed, if there are no teachers in both of them. All other passages will stay open. It should be possible to travel between any two houses using the underground passages that are open. Teachers should not live in houses, directly connected by a passage. Please help the organizers to choose the houses where teachers will live to satisfy the safety requirements or determine that it is impossible.",
    "input": "The first input line contains a single integer t \u2014 the number of test cases ( 1 \u2264 t \u2264 10^ 5 ) . Each test case starts with two integers n and m ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , 0 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of houses and the number of passages. Then m lines follow, each of them contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , describing a passage between the houses u and v . It is guaranteed that there are no two passages connecting the same pair of houses. The sum of values n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of values m over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, if there is no way to choose the desired set of houses, output \" NO\" . Otherwise, output \" YES\" , then the total number of houses chosen, and then the indices of the chosen houses in arbitrary order.",
    "note": "The picture below shows the second example test.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graph matchings",
      "graphs",
      "greedy"
    ],
    "id": "1470D"
  },
  {
    "title": "Strange Definition",
    "url": "https://codeforces.com/problemset/problem/1470/B",
    "history": "Let us call two integers x and y adjacent if lcm( x, y) / gcd( x, y) is a perfect square. For example, 3 and 12 are adjacent, but 6 and 9 are not. Here gcd( x, y) denotes the greatest common divisor ( GCD) of integers x and y , and lcm( x, y) denotes the least common multiple ( LCM) of integers x and y . You are given an array a of length n . Each second the following happens: each element a_ i of the array is replaced by the product of all elements of the array ( including itself) , that are adjacent to the current value. Let d_ i be the number of adjacent elements to a_ i ( including a_ i itself) . The beauty of the array is defined as max_ 1 \u2264 i \u2264 n d_ i . You are given q queries: each query is described by an integer w , and you have to output the beauty of the array after w seconds.",
    "input": "The first input line contains a single integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array. The following line contains n integers a_ 1, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 array elements. The next line contain a single integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of queries. The following q lines contain a single integer w each ( 0 \u2264 w \u2264 10^ 18 ) \u2014 the queries themselves. It is guaranteed that the sum of values n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of values q over all test cases does not exceed 3 \u00b7 10^ 5",
    "output": "For each query output a single integer \u2014 the beauty of the array at the corresponding moment.",
    "note": "In the first test case, the initial array contains elements [ 6, 8, 4, 2] . Element a_ 4= 2 in this array is adjacent to a_ 4= 2 ( since lcm( 2, 2) / gcd( 2, 2) = 2/ 2= 1= 1^ 2 ) and a_ 2= 8 ( since lcm( 8, 2) / gcd( 8, 2) = 8/ 2= 4= 2^ 2 ) . Hence, d_ 4= 2 , and this is the maximal possible value d_ i in this array. In the second test case, the initial array contains elements [ 12, 3, 20, 5, 80, 1] . The elements adjacent to 12 are { 12, 3} , the elements adjacent to 3 are { 12, 3} , the elements adjacent to 20 are { 20, 5, 80} , the elements adjacent to 5 are { 20, 5, 80} , the elements adjacent to 80 are { 20, 5, 80} , the elements adjacent to 1 are { 1} . After one second, the array is transformed into [ 36, 36, 8000, 8000, 8000, 1] .",
    "topics": [
      "bitmasks",
      "graphs",
      "hashing",
      "math",
      "number theory"
    ],
    "id": "1470B"
  },
  {
    "title": "Similar Sets",
    "url": "https://codeforces.com/problemset/problem/1468/M",
    "history": "You are given n sets of integers. The i - th set contains k_ i integers. Two sets are called similar if they share at least two common elements, i. e. there exist two integers x and y such that x y , and they both belong to each of the two sets. Your task is to find two similar sets among the given ones, or report that there is no such pair of sets.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 50000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) the number of given sets. The following n lines describe the sets. The i - th line starts with an integer k_ i ( 2 \u2264 k_ i \u2264 10^ 5 ) \u2014 the number of integers in the i - th set. Then k_ i integers a_ i, 1 , a_ i, 2 , . . . , a_ i, k_ i ( 1 \u2264 a_ i, j\u2264 10^ 9 ) follow \u2014 the elements of the i - th set. It is guaranteed that all elements in each set are different. The total number of elements in all sets in all test cases is not greater than 2\u00b7 10^ 5 .",
    "output": "For each test case, print the answer on a single line. If there is no pair of similar sets, print - 1. Otherwise, print two different integers \u2014 the indices of the similar sets. The sets are numbered from 1 to n in the order they are given in the input. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "implementation"
    ],
    "id": "1468M"
  },
  {
    "title": "Road Reform",
    "url": "https://codeforces.com/problemset/problem/1468/J",
    "history": "There are n cities and m bidirectional roads in Berland. The i - th road connects the cities x_ i and y_ i , and has the speed limit s_ i . The road network allows everyone to get from any city to any other city. The Berland Transport Ministry is planning a road reform. First of all, maintaining all m roads is too costly, so m - ( n - 1) roads will be demolished in such a way that the remaining ( n - 1) roads still allow to get to any city from any other city. Formally, the remaining roads should represent an undirected tree. Secondly, the speed limits on the remaining roads might be changed. The changes will be done sequentially, each change is either increasing the speed limit on some road by 1 , or decreasing it by 1 . Since changing the speed limit requires a lot of work, the Ministry wants to minimize the number of changes. The goal of the Ministry is to have a road network of ( n - 1) roads with the maximum speed limit over all roads equal to exactly k . They assigned you the task of calculating the minimum number of speed limit changes they have to perform so the road network meets their requirements. For example, suppose the initial map of Berland looks like that, and k = 7 : Then one of the optimal courses of action is to demolish the roads 1 \u2013 4 and 3 \u2013 4 , and then decrease the speed limit on the road 2 \u2013 3 by 1 , so the resulting road network looks like that:",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; n - 1 \u2264 m \u2264min( 2 \u00b7 10^ 5, n( n- 1) / 2) ; 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of cities, the number of roads and the required maximum speed limit, respectively. Then m lines follow. The i - th line contains three integers x_ i , y_ i and s_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ; 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the cities connected by the i - th road and the speed limit on it, respectively. All roads are bidirectional. The road network in each test case is connected ( that is, it is possible to reach any city from any other city by traveling along the road) , and each pair of cities is connected by at most one road. The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 . Similarly, the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum number of changes the Ministry has to perform so that the maximum speed limit among the remaining ( n - 1) roads is exactly k .",
    "note": "The explanation for the example test: The first test case is described in the problem statement. In the second test case, the road network initially looks like that: The Ministry can demolish the roads 1 \u2013 2 , 3 \u2013 2 and 3 \u2013 4 , and then increase the speed limit on the road 1 \u2013 4 three times. In the third test case, the road network already meets all the requirements. In the fourth test case, it is enough to demolish the road 1 \u2013 2 so the resulting road network meets the requirements.",
    "topics": [
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1468J"
  },
  {
    "title": "Finding satisfactory solutions",
    "url": "https://codeforces.com/problemset/problem/1466/H",
    "history": "Getting so far in this contest is not an easy feat. By solving all the previous problems, you have impressed the gods greatly. Thus, they decided to spare you the story for this problem and grant a formal statement instead. Consider n agents. Each one of them initially has exactly one item, i - th agent has the item number i . We are interested in reassignments of these items among the agents. An assignment is valid iff each item is assigned to exactly one agent, and each agent is assigned exactly one item. Each agent has a preference over the items, which can be described by a permutation p of items sorted from the most to the least desirable. In other words, the agent prefers item i to item j iff i appears earlier in the permutation p . A preference profile is a list of n permutations of length n each, such that i - th permutation describes preferences of the i - th agent. It is possible that some of the agents are not happy with the assignment of items. A set of dissatisfied agents may choose not to cooperate with other agents. In such a case, they would exchange the items they possess initially ( i - th item belongs to i - th agent) only between themselves. Agents from this group don' t care about the satisfaction of agents outside of it. However, they need to exchange their items in such a way that will make at least one of them happier, and none of them less happy ( in comparison to the given assignment) . Formally, consider a valid assignment of items \u2014 A . Let A( i) denote the item assigned to i - th agent. Also, consider a subset of agents. Let S be the set of their indices. We will say this subset of agents is dissatisfied iff there exists a valid assignment B( i) such that: For each i \u2208 S , B( i) \u2208 S . No agent i \u2208 S prefers A( i) to B( i) ( no agent from the S is less happy) . At least one agent i \u2208 S prefers B( i) to A( i) ( at least one agent from the S is happier) . An assignment is optimal if no subset of the agents is dissatisfied. Note that the empty subset cannot be dissatisfied. It can be proven that for each preference profile, there is precisely one optimal assignment. Example: Consider 3 agents with the following preference profile: [ 2, 1, 3] [ 1, 2, 3] [ 1, 3, 2] And such an assignment: First agent gets item 2 Second agent gets item 3 . Third agent gets item 1 . See that the set of agents { 1, 2} is dissatisfied, because they can reassign their ( initial) items in the following way: First agent gets item 2 . Second agent gets item 1 . Third agent gets item 3 . This reassignment will make the second agent happier and make no difference to the first agent. As a result, the third agent got an item that is worse for him, but this does not prevent the set { 1, 2} from being dissatisfied ( he is not in this set) . The following assignment would be optimal: First agent gets item 2 . Second agent gets item 1 . Third agent gets item 3 . Given an assignment A , calculate the number of distinct preference profiles for which assignment A is optimal. As the answer can be huge, output it modulo 10^ 9+ 7 . Two preference profiles are different iff they assign different preference permutations to any agent.",
    "input": "In the first line of input there is an integer n ( 1 \u2264 n \u2264 40 ) . The next line contains n space separated integers, a permutation of numbers from 1 to n . The i - th number denotes the item assigned to agent i in the optimal assignment.",
    "output": "In a single line output one non- negative integer, the number of preference profiles for which the assignment of items given in the input is optimal modulo 10^ 9+ 7 .",
    "note": "Assignment from the first test case is optimal only for the following preference profile: 2, 1 1, 2 If any agent wants his initial item the most and is given another item, he would form a dissatisfied set. Hence the allocation is not optimal for any other preference profile.",
    "topics": [
      "combinatorics",
      "dp",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1466H"
  },
  {
    "title": "Euclid's nightmare",
    "url": "https://codeforces.com/problemset/problem/1466/F",
    "history": "You may know that Euclid was a mathematician. Well, as it turns out, Morpheus knew it too. So when he wanted to play a mean trick on Euclid, he sent him an appropriate nightmare. In his bad dream Euclid has a set S of n m - dimensional vectors over the Z_ 2 field and can perform vector addition on them. In other words he has vectors with m coordinates, each one equal either 0 or 1 . Vector addition is defined as follows: let u+ v = w , then w_ i = ( u_ i + v_ i) 2 . Euclid can sum any subset of S and archive another m - dimensional vector over Z_ 2 . In particular, he can sum together an empty subset; in such a case, the resulting vector has all coordinates equal 0 . Let T be the set of all the vectors that can be written as a sum of some vectors from S . Now Euclid wonders the size of T and whether he can use only a subset S' of S to obtain all the vectors from T . As it is usually the case in such scenarios, he will not wake up until he figures this out. So far, things are looking rather grim for the philosopher. But there is hope, as he noticed that all vectors in S have at most 2 coordinates equal 1 . Help Euclid and calculate | T| , the number of m - dimensional vectors over Z_ 2 that can be written as a sum of some vectors from S . As it can be quite large, calculate it modulo 10^ 9+ 7 . You should also find S' , the smallest such subset of S , that all vectors in T can be written as a sum of vectors from S' . In case there are multiple such sets with a minimal number of elements, output the lexicographically smallest one with respect to the order in which their elements are given in the input. Consider sets A and B such that | A| = | B| . Let a_ 1, a_ 2, . . . a_ | A| and b_ 1, b_ 2, . . . b_ | B| be increasing arrays of indices elements of A and B correspondingly. A is lexicographically smaller than B iff there exists such i that a_ j = b_ j for all j < i and a_ i < b_ i .",
    "input": "In the first line of input, there are two integers n , m ( 1 \u2264 n, m \u2264 5 \u00b7 10^ 5 ) denoting the number of vectors in S and the number of dimensions. Next n lines contain the description of the vectors in S . In each of them there is an integer k ( 1 \u2264 k \u2264 2 ) and then follow k distinct integers x_ 1, . . . x_ k ( 1 \u2264 x_ i \u2264 m ) . This encodes an m - dimensional vector having 1 s on coordinates x_ 1, . . . x_ k and 0 s on the rest of them. Among the n vectors, no two are the same.",
    "output": "In the first line, output two integers: remainder modulo 10^ 9+ 7 of | T| and | S' | . In the second line, output | S' | numbers, indices of the elements of S' in ascending order. The elements of S are numbered from 1 in the order they are given in the input.",
    "note": "In the first example we are given three vectors: 10 01 11 It turns out that we can represent all vectors from our 2 - dimensional space using these vectors: 00 is a sum of the empty subset of above vectors; 01 = 11 + 10 , is a sum of the first and third vector; 10 = 10 , is just the first vector; 11 = 10 + 01 , is a sum of the first and the second vector. Hence, T = { 00, 01, 10, 11} . We can choose any two of the three vectors from S and still be able to obtain all the vectors in T . In such a case, we choose the two vectors which appear first in the input. Since we cannot obtain all vectors in T using only a single vector from S , | S' | = 2 and S' = { 10, 01} ( indices 1 and 2 ) , as set { 1, 2 } is lexicographically the smallest. We can represent all vectors from T , using only vectors from S' , as shown below: 00 is a sum of the empty subset; 01 = 01 is just the second vector; 10 = 10 is just the first vector; 11 = 10 + 01 is a sum of the first and the second vector.",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1466F"
  },
  {
    "title": "Plan of Lectures",
    "url": "https://codeforces.com/problemset/problem/1463/E",
    "history": "Ivan is a programming teacher. During the academic year, he plans to give n lectures on n different topics. Each topic should be used in exactly one lecture. Ivan wants to choose which topic will he explain during the 1 - st, 2 - nd, . . . , n - th lecture \u2014 formally, he wants to choose some permutation of integers from 1 to n ( let' s call this permutation q ) . q_ i is the index of the topic Ivan will explain during the i - th lecture. For each topic ( except exactly one) , there exists a prerequisite topic ( for the topic i , the prerequisite topic is p_ i ) . Ivan cannot give a lecture on a topic before giving a lecture on its prerequisite topic. There exists at least one valid ordering of topics according to these prerequisite constraints. Ordering the topics correctly can help students understand the lectures better. Ivan has k special pairs of topics ( x_ i, y_ i) such that he knows that the students will understand the y_ i - th topic better if the lecture on it is conducted right after the lecture on the x_ i - th topic. Ivan wants to satisfy the constraints on every such pair, that is, for every i \u2208 [ 1, k] , there should exist some j \u2208 [ 1, n - 1] such that q_ j = x_ i and q_ j + 1 = y_ i . Now Ivan wants to know if there exists an ordering of topics that satisfies all these constraints, and if at least one exists, find any of them.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 k \u2264 n - 1 ) \u2014 the number of topics and the number of special pairs of topics, respectively. The second line contains n integers p_ 1 , p_ 2 , . . . , p_ n ( 0 \u2264 p_ i \u2264 n ) , where p_ i is the prerequisite topic for the topic i ( or p_ i = 0 if the i - th topic has no prerequisite topics) . Exactly one of these integers is 0 . At least one ordering of topics such that for every i the p_ i - th topic is placed before the i - th topic exists. Then k lines follow, the i - th line contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ) \u2014 the topics from the i - th special pair. All values of x_ i are pairwise distinct; similarly, all valus of y_ i are pairwise distinct.",
    "output": "If there is no ordering of topics meeting all the constraints, print 0 . Otherwise, print n pairwise distinct integers q_ 1 , q_ 2 , . . . , q_ n ( 1 \u2264 q_ i \u2264 n ) \u2014 the ordering of topics meeting all of the constraints. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation",
      "sortings",
      "trees"
    ],
    "id": "1463E"
  },
  {
    "title": "Water Level",
    "url": "https://codeforces.com/problemset/problem/1461/E",
    "history": "In recent years John has very successfully settled at his new job at the office. But John doesn' t like to idly sit around while his code is compiling, so he immediately found himself an interesting distraction. The point of his distraction was to maintain a water level in the water cooler used by other zebras. Originally the cooler contained exactly k liters of water. John decided that the amount of water must always be at least l liters of water but no more than r liters. John will stay at the office for exactly t days. He knows that each day exactly x liters of water will be used by his colleagues. At the beginning of each day he can add exactly y liters of water to the cooler, but at any point in time the amount of water in the cooler must be in the range [ l, r] . Now John wants to find out whether he will be able to maintain the water level at the necessary level for t days. Help him answer this question!",
    "input": "The first line of the input contains six integers k , l , r , t , x and y ( 1 \u2264 l \u2264 k \u2264 r \u2264 10^ 18; 1 \u2264 t \u2264 10^ 18; 1 \u2264 x \u2264 10^ 6; 1 \u2264 y \u2264 10^ 18 ) \u2014 initial water level, the required range, the number of days, daily water usage and the exact amount of water that can be added, respectively.",
    "output": "Print \" Yes\" if John can maintain the water level for t days and \" No\" otherwise.",
    "note": "In the first example, John can' t increase the amount of water at the beginning of the first day, since it would exceed the limit r . That is why after the first day the cooler will contain 2 liters of water. The next day John adds 4 liters to the cooler but loses 6 liters, leaving John with 0 liters, which is outside the range [ 1, 10] . In the second example, after the first day John is left with 2 liters of water. At the beginning of the next day he adds 5 liters, then 6 liters get used, leaving John with 1 liter of water which is in range [ 1, 10] . In the third example, after the first day John is left with 7 liters, after the second day \u2014 5 liters, after the fourth \u2014 1 liter. At the beginning of the fifth day John will add 9 liters and lose 2 liters. Meaning, after the fifth day he will have 8 liters left. Then each day the water level will decrease by 2 liters and after the eighth day John will have 2 liters and after the ninth day \u2014 0 liters. 0 is outside range [ 1, 10] , so the answer is \" No\" . In the fourth example, after the first day John is left with 15 liters of water. At the beginning of the second day he adds 7 liters and loses 5 , so after the second day he is left with 17 liters. At the beginning of the third day he adds 7 more liters of water and loses 5 , so after the third day he is left with 19 liters. 19 is in range [ 15, 25] so the answer is \" Yes\" .",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1461E"
  },
  {
    "title": "Flip and Reverse",
    "url": "https://codeforces.com/problemset/problem/1458/D",
    "history": "You are given a string s of 0' s and 1' s. You are allowed to perform the following operation: choose a non- empty contiguous substring of s that contains an equal number of 0' s and 1' s; flip all characters in the substring, that is, replace all 0' s with 1' s, and vice versa; reverse the substring. For example, consider s = 00111011, and the following operation: Choose the first six characters as the substring to act upon: 00111011. Note that the number of 0' s and 1' s are equal, so this is a legal choice. Choosing substrings 0, 110, or the entire string would not be possible. Flip all characters in the substring: 11000111. Reverse the substring: 10001111. Find the lexicographically smallest string that can be obtained from s after zero or more operations.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 5 \u00b7 10^ 5 ) \u2014 the number of test cases. Each of the following T lines contains a single non- empty string \u2014 the input string s for the respective test case. All strings consist of characters 0 and 1, and their total length does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, on a separate line print the lexicographically smallest string that can be obtained from s after zero or more operations.",
    "note": "In the first test case a single operation should be applied to the entire string. In the second test case two operations are needed: 0111001, 0110110. In the third test case the string stays the same after any operation.",
    "topics": [
      "data structures",
      "graphs",
      "greedy"
    ],
    "id": "1458D"
  },
  {
    "title": "Number of Simple Paths",
    "url": "https://codeforces.com/problemset/problem/1454/E",
    "history": "You are given an undirected graph consisting of n vertices and n edges. It is guaranteed that the given graph is connected ( i. e. it is possible to reach any vertex from any other vertex) and there are no self- loops and multiple edges in the graph. Your task is to calculate the number of simple paths of length at least 1 in the given graph. Note that paths that differ only by their direction are considered the same ( i. e. you have to calculate the number of undirected paths) . For example, paths [ 1, 2, 3] and [ 3, 2, 1] are considered the same. You have to answer t independent test cases. Recall that a path in the graph is a sequence of vertices v_ 1, v_ 2, . . . , v_ k such that each pair of adjacent ( consecutive) vertices in this sequence is connected by an edge. The length of the path is the number of edges in it. A simple path is such a path that all vertices in it are distinct.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices ( and the number of edges) in the graph. The next n lines of the test case describe edges: edge i is given as a pair of vertices u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) , where u_ i and v_ i are vertices the i - th edge connects. For each pair of vertices ( u, v) , there is at most one edge between u and v . There are no edges from the vertex to itself. So, there are no self- loops and multiple edges in the graph. The graph is undirected, i. e. all its edges are bidirectional. The graph is connected, i. e. it is possible to reach any vertex from any other vertex by moving along the edges of the graph. It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print one integer: the number of simple paths of length at least 1 in the given graph. Note that paths that differ only by their direction are considered the same ( i. e. you have to calculate the number of undirected paths) .",
    "note": "Consider the second test case of the example. It looks like that: There are 11 different simple paths: [ 1, 2] ; [ 2, 3] ; [ 3, 4] ; [ 2, 4] ; [ 1, 2, 4] ; [ 1, 2, 3] ; [ 2, 3, 4] ; [ 2, 4, 3] ; [ 3, 2, 4] ; [ 1, 2, 3, 4] ; [ 1, 2, 4, 3] .",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1454E"
  },
  {
    "title": "Capitalism",
    "url": "https://codeforces.com/problemset/problem/1450/E",
    "history": "A society can be represented by a connected, undirected graph of n vertices and m edges. The vertices represent people, and an edge ( i, j) represents a friendship between people i and j . In society, the i - th person has an income a_ i . A person i is envious of person j if a_ j= a_ i+ 1 . That is if person j has exactly 1 more unit of income than person i . The society is called capitalist if for every pair of friends one is envious of the other. For some friendships, you know which friend is envious of the other. For the remaining friendships, you do not know the direction of envy. The income inequality of society is defined as max_ 1 \u2264 i \u2264 n a_ i - min_ 1 \u2264 i \u2264 n a_ i . You only know the friendships and not the incomes. If it is impossible for this society to be capitalist with the given knowledge, you should report about it. Otherwise, you should find an assignment of incomes in which the society is capitalist, and the income inequality is maximized.",
    "input": "The first line contains two integers n , m ( 1\u2264 n\u2264 200 , n- 1\u2264 m\u2264 2000 ) \u2014 the number of people and friendships, respectively. The following m lines describe the friendships. Each friendship is described by three integers i , j , b ( 1\u2264 i, j\u2264 n, i j, 0\u2264 b\u2264 1 ) . This denotes that people i and j are friends. If b= 1 , we require that person i is envious of person j . If b= 0 , one friend should be envious of the other in either direction. There is at most one friendship between each pair of people. It is guaranteed that if we consider the friendships as undirected edges, the graph is connected.",
    "output": "Print \" YES\" if it is possible that the society is capitalist, or \" NO\" otherwise. You can print characters in any case ( upper or lower) . If the answer is \" YES\" , you should print two additional lines. In the first line, print the maximum possible income inequality. On the next line you should print n integers a_ 1, . . . , a_ n ( 0\u2264 a_ i\u2264 10^ 6 ) , where a_ i denotes the income of the i - th person. We can prove that if there exists a solution, there exists one where 0\u2264 a_ i\u2264 10^ 6 for all i . If there exist multiple solutions, print any.",
    "note": "In the first test, we can show that an income inequality greater than 3 is impossible for the given society. In the given answer with income inequality equal to 3 : Person 2 is envious of person 1 . Person 3 is envious of person 2 . Person 5 is envious of person 2 . Person 6 is envious of person 5 ( the required direction is satisfied) . Person 6 is envious of person 3 . Person 2 is envious of person 4 ( the required direction is satisfied) . In the second test, we can show that there is no way to assign incomes to satisfy all requirements.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1450E"
  },
  {
    "title": "Team-Building",
    "url": "https://codeforces.com/problemset/problem/1444/C",
    "history": "The new academic year has started, and Berland' s university has n first- year students. They are divided into k academic groups, however, some of the groups might be empty. Among the students, there are m pairs of acquaintances, and each acquaintance pair might be both in a common group or be in two different groups. Alice is the curator of the first years, she wants to host an entertaining game to make everyone know each other. To do that, she will select two different academic groups and then divide the students of those groups into two teams. The game requires that there are no acquaintance pairs inside each of the teams. Alice wonders how many pairs of groups she can select, such that it' ll be possible to play a game after that. All students of the two selected groups must take part in the game. Please note, that the teams Alice will form for the game don' t need to coincide with groups the students learn in. Moreover, teams may have different sizes ( or even be empty) .",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 500 000 ; 0 \u2264 m \u2264 500 000 ; 2 \u2264 k \u2264 500 000 ) \u2014 the number of students, the number of pairs of acquaintances and the number of groups respectively. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 k ) , where c_ i equals to the group number of the i - th student. Next m lines follow. The i - th of them contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) , denoting that students a_ i and b_ i are acquaintances. It' s guaranteed, that a_ i = \u0338 b_ i , and that no ( unordered) pair is mentioned more than once.",
    "output": "Print a single integer \u2014 the number of ways to choose two different groups such that it' s possible to select two teams to play the game.",
    "note": "The acquaintances graph for the first example is shown in the picture below ( next to each student there is their group number written) . In that test we can select the following groups: Select the first and the second groups. For instance, one team can be formed from students 1 and 4 , while other team can be formed from students 2 and 3 . Select the second and the third group. For instance, one team can be formed 3 and 6 , while other team can be formed from students 4 and 5 . We can' t select the first and the third group, because there is no way to form the teams for the game. In the second example, we can select any group pair. Please note, that even though the third group has no students, we still can select it ( with some other group) for the game.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1444C"
  },
  {
    "title": "Graph Transpositions",
    "url": "https://codeforces.com/problemset/problem/1442/C",
    "history": "You are given a directed graph of n vertices and m edges. Vertices are numbered from 1 to n . There is a token in vertex 1 . The following actions are allowed: Token movement. To move the token from vertex u to vertex v if there is an edge u \u2192 v in the graph. This action takes 1 second. Graph transposition. To transpose all the edges in the graph: replace each edge u \u2192 v by an edge v \u2192 u . This action takes increasingly more time: k - th transposition takes 2^ k- 1 seconds, i. e. the first transposition takes 1 second, the second one takes 2 seconds, the third one takes 4 seconds, and so on. The goal is to move the token from vertex 1 to vertex n in the shortest possible time. Print this time modulo 998 244 353 .",
    "input": "The first line of input contains two integers n, m ( 1 \u2264 n, m \u2264 200 000 ) . The next m lines contain two integers each: u, v ( 1 \u2264 u, v \u2264 n; u v ) , which represent the edges of the graph. It is guaranteed that all ordered pairs ( u, v) are distinct. It is guaranteed that it is possible to move the token from vertex 1 to vertex n using the actions above.",
    "output": "Print one integer: the minimum required time modulo 998 244 353 .",
    "note": "The first example can be solved by transposing the graph and moving the token to vertex 4 , taking 2 seconds. The best way to solve the second example is the following: transpose the graph, move the token to vertex 2 , transpose the graph again, move the token to vertex 3 , transpose the graph once more and move the token to vertex 4 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1442C"
  },
  {
    "title": "Graph Subset Problem",
    "url": "https://codeforces.com/problemset/problem/1439/B",
    "history": "You are given an undirected graph with n vertices and m edges. Also, you are given an integer k . Find either a clique of size k or a non- empty subset of vertices such that each vertex of this subset has at least k neighbors in the subset. If there are no such cliques and subsets report about it. A subset of vertices is called a clique of size k if its size is k and there exists an edge between every two vertices from the subset. A vertex is called a neighbor of the other vertex if there exists an edge between them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The next lines contain descriptions of test cases. The first line of the description of each test case contains three integers n , m , k ( 1 \u2264 n, m, k \u2264 10^ 5 , k \u2264 n ) . Each of the next m lines contains two integers u, v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) , denoting an edge between vertices u and v . It is guaranteed that there are no self- loops or multiple edges. It is guaranteed that the sum of n for all test cases and the sum of m for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case: If you found a subset of vertices such that each vertex of this subset has at least k neighbors in the subset in the first line output 1 and the size of the subset. On the second line output the vertices of the subset in any order. If you found a clique of size k then in the first line output 2 and in the second line output the vertices of the clique in any order. If there are no required subsets and cliques print - 1 . If there exists multiple possible answers you can print any of them.",
    "note": "In the first test case: the subset { 1, 2, 3, 4} is a clique of size 4 . In the second test case: degree of each vertex in the original graph is at least 3 . So the set of all vertices is a correct answer. In the third test case: there are no cliques of size 4 or required subsets, so the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs"
    ],
    "id": "1439B"
  },
  {
    "title": "Binary Table (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1439/A2",
    "history": "This is the hard version of the problem. The difference between the versions is in the number of possible operations that can be made. You can make hacks if and only if you solved both versions of the problem. You are given a binary table of size n \u00d7 m . This table consists of symbols 0 and 1 . You can make such operation: select 3 different cells that belong to one 2 \u00d7 2 square and change the symbols in these cells ( change 0 to 1 and 1 to 0 ) . Your task is to make all symbols in the table equal to 0 . You are allowed to make at most nm operations. You don' t need to minimize the number of operations. It can be proved, that it is always possible.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. The next lines contain descriptions of test cases. The first line of the description of each test case contains two integers n , m ( 2 \u2264 n, m \u2264 100 ) . Each of the next n lines contains a binary string of length m , describing the symbols of the next row of the table. It is guaranteed, that the sum of nm for all test cases does not exceed 20000 .",
    "output": "For each test case print the integer k ( 0 \u2264 k \u2264 nm ) \u2014 the number of operations. In the each of the next k lines print 6 integers x_ 1, y_ 1, x_ 2, y_ 2, x_ 3, y_ 3 ( 1 \u2264 x_ 1, x_ 2, x_ 3 \u2264 n, 1 \u2264 y_ 1, y_ 2, y_ 3 \u2264 m ) describing the next operation. This operation will be made with three cells ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , ( x_ 3, y_ 3) . These three cells should be different. These three cells should belong to some 2 \u00d7 2 square.",
    "note": "In the first test case, it is possible to make only one operation with cells ( 1, 1) , ( 2, 1) , ( 2, 2) . After that, all symbols will be equal to 0 . In the second test case: operation with cells ( 2, 1) , ( 3, 1) , ( 3, 2) . After it the table will be: 011001000 operation with cells ( 1, 2) , ( 1, 3) , ( 2, 3) . After it the table will be: 000000000 In the fifth test case: operation with cells ( 1, 3) , ( 2, 2) , ( 2, 3) . After it the table will be: 010110 operation with cells ( 1, 2) , ( 2, 1) , ( 2, 2) . After it the table will be: 000000",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1439A2"
  },
  {
    "title": "Minimal Height Tree",
    "url": "https://codeforces.com/problemset/problem/1437/D",
    "history": "Monocarp had a tree which consisted of n vertices and was rooted at vertex 1 . He decided to study BFS ( Breadth- first search) , so he ran BFS on his tree, starting from the root. BFS can be described by the following pseudocode: a = [ ] # the order in which vertices were processedq = Queue( ) q. put( 1) # place the root at the end of the queuewhile not q. empty( ) : k = q. pop( ) # retrieve the first vertex from the queue a. append( k) # append k to the end of the sequence in which vertices were visited for y in g[ k] : # g[ k] is the list of all children of vertex k, sorted in ascending order q. put( y) Monocarp was fascinated by BFS so much that, in the end, he lost his tree. Fortunately, he still has a sequence of vertices, in which order vertices were visited by the BFS algorithm ( the array a from the pseudocode) . Monocarp knows that each vertex was visited exactly once ( since they were put and taken from the queue exactly once) . Also, he knows that all children of each vertex were viewed in ascending order. Monocarp knows that there are many trees ( in the general case) with the same visiting order a , so he doesn' t hope to restore his tree. Monocarp is okay with any tree that has minimum height. The height of a tree is the maximum depth of the tree' s vertices, and the depth of a vertex is the number of edges in the path from the root to it. For example, the depth of vertex 1 is 0 , since it' s the root, and the depth of all root' s children are 1 . Help Monocarp to find any tree with given visiting order a and minimum height.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ; a_ i = \u0338 a_ j ; a_ 1 = 1 ) \u2014 the order in which the vertices were visited by the BFS algorithm. It' s guaranteed that the total sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print the minimum possible height of a tree with the given visiting order a .",
    "note": "In the first test case, there is only one tree with the given visiting order: In the second test case, there is only one tree with the given visiting order as well: In the third test case, an optimal tree with the given visiting order is shown below:",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1437D"
  },
  {
    "title": "Bandit in a City",
    "url": "https://codeforces.com/problemset/problem/1436/D",
    "history": "Bandits appeared in the city! One of them is trying to catch as many citizens as he can. The city consists of n squares connected by n- 1 roads in such a way that it is possible to reach any square from any other square. The square number 1 is the main square. After Sunday walk all the roads were changed to one- way roads in such a way that it is possible to reach any square from the main square. At the moment when the bandit appeared on the main square there were a_ i citizens on the i - th square. Now the following process will begin. First, each citizen that is currently on a square with some outgoing one- way roads chooses one of such roads and moves along it to another square. Then the bandit chooses one of the one- way roads outgoing from the square he is located and moves along it. The process is repeated until the bandit is located on a square with no outgoing roads. The bandit catches all the citizens on that square. The bandit wants to catch as many citizens as possible; the citizens want to minimize the number of caught people. The bandit and the citizens know positions of all citizens at any time, the citizens can cooperate. If both sides act optimally, how many citizens will be caught?",
    "input": "The first line contains a single integer n \u2014 the number of squares in the city ( 2 \u2264 n \u2264 2\u00b710^ 5 ) . The second line contains n- 1 integers p_ 2, p_ 3 . . . p_ n meaning that there is a one- way road from the square p_ i to the square i ( 1 \u2264 p_ i < i ) . The third line contains n integers a_ 1, a_ 2, . . . , a_ n \u2014 the number of citizens on each square initially ( 0 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print a single integer \u2014 the number of citizens the bandit will catch if both sides act optimally.",
    "note": "In the first example the citizens on the square 1 can split into two groups 2 + 1 , so that the second and on the third squares will have 3 citizens each. In the second example no matter how citizens act the bandit can catch at least 4 citizens.",
    "topics": [
      "binary search",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1436D"
  },
  {
    "title": "Reducing Delivery Cost",
    "url": "https://codeforces.com/problemset/problem/1433/G",
    "history": "You are a mayor of Berlyatov. There are n districts and m two- way roads between them. The i - th road connects districts x_ i and y_ i . The cost of travelling along this road is w_ i . There is some path between each pair of districts, so the city is connected. There are k delivery routes in Berlyatov. The i - th route is going from the district a_ i to the district b_ i . There is one courier on each route and the courier will always choose the cheapest ( minimum by total cost) path from the district a_ i to the district b_ i to deliver products. The route can go from the district to itself, some couriers routes can coincide ( and you have to count them independently) . You can make at most one road to have cost zero ( i. e. you choose at most one road and change its cost with 0 ) . Let d( x, y) be the cheapest cost of travel between districts x and y . Your task is to find the minimum total courier routes cost you can achieve, if you optimally select the some road and change its cost with 0 . In other words, you have to find the minimum possible value of \u2211_ i = 1^ k d( a_ i, b_ i) after applying the operation described above optimally.",
    "input": "The first line of the input contains three integers n , m and k ( 2 \u2264 n \u2264 1000 ; n - 1 \u2264 m \u2264 min( 1000, n( n- 1) / 2) ; 1 \u2264 k \u2264 1000 ) \u2014 the number of districts, the number of roads and the number of courier routes. The next m lines describe roads. The i - th road is given as three integers x_ i , y_ i and w_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ; 1 \u2264 w_ i \u2264 1000 ) , where x_ i and y_ i are districts the i - th road connects and w_ i is its cost. It is guaranteed that there is some path between each pair of districts, so the city is connected. It is also guaranteed that there is at most one road between each pair of districts. The next k lines describe courier routes. The i - th route is given as two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) \u2014 the districts of the i - th route. The route can go from the district to itself, some couriers routes can coincide ( and you have to count them independently) .",
    "output": "Print one integer \u2014 the minimum total courier routes cost you can achieve ( i. e. the minimum value \u2211_ i= 1^ k d( a_ i, b_ i) , where d( x, y) is the cheapest cost of travel between districts x and y ) if you can make some ( at most one) road cost zero.",
    "note": "The picture corresponding to the first example: There, you can choose either the road ( 2, 4) or the road ( 4, 6) . Both options lead to the total cost 22 . The picture corresponding to the second example: There, you can choose the road ( 3, 4) . This leads to the total cost 13 .",
    "topics": [
      "brute force",
      "graphs",
      "shortest paths"
    ],
    "id": "1433G"
  },
  {
    "title": "Yet Another DAG Problem",
    "url": "https://codeforces.com/problemset/problem/1430/G",
    "history": "You are given a directed acyclic graph ( a directed graph that does not contain cycles) of n vertices and m arcs. The i - th arc leads from the vertex x_ i to the vertex y_ i and has the weight w_ i . Your task is to select an integer a_ v for each vertex v , and then write a number b_ i on each arcs i such that b_ i = a_ x_ i - a_ y_ i . You must select the numbers so that: all b_ i are positive; the value of the expression \u2211_ i = 1^ m w_ i b_ i is the lowest possible. It can be shown that for any directed acyclic graph with non- negative w_ i , such a way to choose numbers exists.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 18 ; 0 \u2264 m \u2264n( n - 1) 2 ) . Then m lines follow, the i - th of them contains three integers x_ i , y_ i and w_ i ( 1 \u2264 x_ i, y_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 5 , x_ i y_ i ) \u2014 the description of the i - th arc. It is guaranteed that the lines describe m arcs of a directed acyclic graph without multiple arcs between the same pair of vertices.",
    "output": "Print n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ v \u2264 10^ 9 ) , which must be written on the vertices so that all b_ i are positive, and the value of the expression \u2211_ i = 1^ m w_ i b_ i is the lowest possible. If there are several answers, print any of them. It can be shown that the answer always exists, and at least one of the optimal answers satisfies the constraints 0 \u2264 a_ v \u2264 10^ 9 .",
    "note": "",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dp",
      "flows",
      "graphs",
      "math"
    ],
    "id": "1430G"
  },
  {
    "title": "Belted Rooms",
    "url": "https://codeforces.com/problemset/problem/1428/B",
    "history": "In the snake exhibition, there are n rooms ( numbered 0 to n - 1 ) arranged in a circle, with a snake in each room. The rooms are connected by n conveyor belts, and the i - th conveyor belt connects the rooms i and ( i+ 1) n . In the other words, rooms 0 and 1 , 1 and 2 , . . . , n- 2 and n- 1 , n- 1 and 0 are connected with conveyor belts. The i - th conveyor belt is in one of three states: If it is clockwise, snakes can only go from room i to ( i+ 1) n . If it is anticlockwise, snakes can only go from room ( i+ 1) n to i . If it is off, snakes can travel in either direction. Above is an example with 4 rooms, where belts 0 and 3 are off, 1 is clockwise, and 2 is anticlockwise. Each snake wants to leave its room and come back to it later. A room is returnable if the snake there can leave the room, and later come back to it using the conveyor belts. How many such returnable rooms are there?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) : the number of test cases. The description of the test cases follows. The first line of each test case description contains a single integer n ( 2 \u2264 n \u2264 300 000 ) : the number of rooms. The next line of each test case description contains a string s of length n , consisting of only ' < ' , ' > ' and ' - ' . If s_ i = ' > ' , the i - th conveyor belt goes clockwise. If s_ i = ' < ' , the i - th conveyor belt goes anticlockwise. If s_ i = ' - ' , the i - th conveyor belt is off. It is guaranteed that the sum of n among all test cases does not exceed 300 000 .",
    "output": "For each test case, output the number of returnable rooms.",
    "note": "In the first test case, all rooms are returnable except room 2 . The snake in the room 2 is trapped and cannot exit. This test case corresponds to the picture from the problem statement. In the second test case, all rooms are returnable by traveling on the series of clockwise belts.",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": "1428B"
  },
  {
    "title": "One Billion Shades of Grey",
    "url": "https://codeforces.com/problemset/problem/1427/G",
    "history": "You have to paint with shades of grey the tiles of an n\u00d7 n wall. The wall has n rows of tiles, each with n tiles. The tiles on the boundary of the wall ( i. e. , on the first row, last row, first column and last column) are already painted and you shall not change their color. All the other tiles are not painted. Some of the tiles are broken, you shall not paint those tiles. It is guaranteed that the tiles on the boundary are not broken. You shall paint all the non- broken tiles that are not already painted. When you paint a tile you can choose from 10^ 9 shades of grey, indexed from 1 to 10^ 9 . You can paint multiple tiles with the same shade. Formally, painting the wall is equivalent to assigning a shade ( an integer between 1 and 10^ 9 ) to each non- broken tile that is not already painted. The contrast between two tiles is the absolute value of the difference between the shades of the two tiles. The total contrast of the wall is the sum of the contrast of all the pairs of adjacent non- broken tiles ( two tiles are adjacent if they share a side) . Compute the minimum possible total contrast of the wall.",
    "input": "The first line contains n ( 3\u2264 n\u2264 200 ) \u2013 the number of rows and columns. Then n lines, each containing n integers, follow. The i - th of these lines describe the i - th row of tiles. It contains the n integers a_ ij ( - 1\u2264 a_ ij\u2264 10^ 9) . The value of a_ ij described the tile on the i - th row and j - th column: If a_ ij= 0 , then the tile is not painted and shall be painted. If a_ ij= - 1 , then the tile is broken and shall not be painted. If 1\u2264 a_ ij\u2264 10^ 9 , then the tile is already painted with the shade a_ ij . It is guaranteed that the tiles on the boundary are already painted, the tiles not on the boundary are not already painted, and the tiles on the boundary are not broken.",
    "output": "Print a single integer \u2013 the minimum possible total contrast of the wall.",
    "note": "Explanation of the first testcase: The initial configuration of the tiles is ( tiles to paint are denoted by ? ) : 1 7 64 ? 61 1 1 A possible way to paint the tile achieving the minimum possible contrast of 26 is: 1 7 64 5 61 1 1 Explanation of the second testcase: Since all tiles are either painted or broken, there is nothing to do. The total contrast is 396 . Explanation of the third testcase: The initial configuration of the tiles is ( tiles to paint are denoted by ? ) : 6 6 5 4 46 ? ? ? 47 ? ? ? 38 ? ? ? 28 8 1 2 2 A possible way to paint the tiles achieving the minimum possible contrast of 34 is: 6 6 5 4 46 6 5 4 47 7 5 3 38 8 2 2 28 8 1 2 2",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1427G"
  },
  {
    "title": "Ancient Language",
    "url": "https://codeforces.com/problemset/problem/1424/M",
    "history": "While exploring the old caves, researchers found a book, or more precisely, a stash of mixed pages from a book. Luckily, all of the original pages are present and each page contains its number. Therefore, the researchers can reconstruct the book. After taking a deeper look into the contents of these pages, linguists think that this may be some kind of dictionary. What' s interesting is that this ancient civilization used an alphabet which is a subset of the English alphabet, however, the order of these letters in the alphabet is not like the one in the English language. Given the contents of pages that researchers have found, your task is to reconstruct the alphabet of this ancient civilization using the provided pages from the dictionary.",
    "input": "First- line contains two integers: n and k ( 1 \u2264 n, k \u2264 10^ 3 ) \u2014 the number of pages that scientists have found and the number of words present at each page. Following n groups contain a line with a single integer p_ i ( 0 \u2264 n 10^ 3 ) \u2014 the number of i - th page, as well as k lines, each line containing one of the strings ( up to 100 characters) written on the page numbered p_ i .",
    "output": "Output a string representing the reconstructed alphabet of this ancient civilization. If the book found is not a dictionary, output \" IMPOSSIBLE\" without quotes. In case there are multiple solutions, output any of them.",
    "note": "",
    "topics": [
      "graphs",
      "sortings"
    ],
    "id": "1424M"
  },
  {
    "title": "Virus",
    "url": "https://codeforces.com/problemset/problem/1423/H",
    "history": "In Bubbleland a group of special programming forces gets a top secret job to calculate the number of potentially infected people by a new unknown virus. The state has a population of n people and every day there is new information about new contacts between people. The job of special programming forces is to calculate how many contacts in the last k days a given person had. The new virus has an incubation period of k days, and after that time people consider as non- infectious. Because the new virus is an extremely dangerous, government mark as suspicious everybody who had direct or indirect contact in the last k days, independently of the order of contacts. This virus is very strange, and people can' t get durable immunity. You need to help special programming forces to calculate the number of suspicious people for a given person ( number of people who had contact with a given person) . There are 3 given inputs on beginning n where n is population, q number of queries, k virus incubation time in days. Each query is one of three types: ( x , y ) person x and person y met that day ( x = \u0338 y ) . ( z ) return the number of people in contact with z , counting himself. The end of the current day moves on to the next day.",
    "input": "The first line of input contains three integers n ( 1 \u2264 n\u2264 10^ 5 ) the number of people in the state, q ( 1 \u2264 q\u2264 5\u00d710^ 5 ) number of queries and k ( 1 \u2264 k\u2264 10^ 5 ) virus incubation time in days. Each of the next q lines starts with an integer t ( 1 \u2264 t\u2264 3 ) the type of the query. A pair of integers x and y ( 1 \u2264 x, y \u2264 n ) follows in the query of the first type ( x = \u0338 y ) . An integer i ( 1 \u2264 i\u2264 n ) follows in the query of the second type. Query of third type does not have the following number.",
    "output": "For the queries of the second type print on a separate line the current number of people in contact with a given person.",
    "note": "Pay attention if persons 1 and 2 had contact first day and next day persons 1 and 3 had contact, for k > 1 number of contacts of person 3 is 3 ( persons: 1, 2, 3) .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu",
      "graphs"
    ],
    "id": "1423H"
  },
  {
    "title": "Du\u0161an's Railway",
    "url": "https://codeforces.com/problemset/problem/1423/C",
    "history": "As you may already know, Dus\u030can is keen on playing with railway models. He has a big map with cities that are connected with railways. His map can be seen as a graph where vertices are cities and the railways connecting them are the edges. So far, the graph corresponding to his map is a tree. As you already know, a tree is a connected acyclic undirected graph. He is curious to find out whether his railway can be optimized somehow. He wants to add so- called shortcuts, which are also railways connecting pairs of cities. This shortcut will represent the railways in the unique path in the tree between the pair of cities it connects. Since Dus\u030can doesn' t like repeating the railways, he has also defined good paths in his newly obtained network ( notice that after adding the shortcuts, his graph is no more a tree) . He calls a path good, if no edge appears more than once, either as a regular railway edge or as an edge represented by some shortcut ( Every shortcut in a good path has length 1, but uses up all the edges it represents - they can' t appear again in that path) . Having defined good paths, he defines good distance between two cities to be the length of the shortest good path between them. Finally, the shortcutting diameter of his network is the largest good distance between any two cities. Now he is curious to find out whether it is possible to achieve shortcutting diameter less or equal than k , while adding as few shortcuts as possible. Your solution should add no more than 10 \u00b7 n shortcuts.",
    "input": "The first line in the standard input contains an integer n ( 1 \u2264 n \u2264 10^ 4 ) , representing the number of the cities in Dus\u030can' s railway map, and an integer k ( 3 \u2264 k \u2264 n ) representing the shortcutting diameter that he wants to achieve. Each of the following n - 1 lines will contain two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i = \u0338 v_ i ) , meaning that there is a railway between cities u_ i and v_ i .",
    "output": "The first line of the output should contain a number t representing the number of the shortcuts that were added. Each of the following t lines should contain two integers u_ i and v_ i , signifying that a shortcut is added between cities u_ i and v_ i .",
    "note": "Notice that adding a shortcut between all cities and city 1 will make a graph theoretic diameter become 2. On the other hand, the paths obtained that way might not be good, since some of the edges might get duplicated. In the example, adding a shortcut between all cities and city 1 doesn' t create a valid solution, because for cities 5 and 10 the path that uses shortcuts 5- 1 and 1- 10 is not valid because it uses edges 1- 2, 2- 3, 3- 4, 4- 5 twice.",
    "topics": [
      "divide and conquer",
      "graphs",
      "trees"
    ],
    "id": "1423C"
  },
  {
    "title": "Valuable Paper",
    "url": "https://codeforces.com/problemset/problem/1423/B",
    "history": "The pandemic is upon us, and the world is in shortage of the most important resource: toilet paper. As one of the best prepared nations for this crisis, BubbleLand promised to help all other world nations with this valuable resource. To do that, the country will send airplanes to other countries carrying toilet paper. In BubbleLand, there are N toilet paper factories, and N airports. Because of how much it takes to build a road, and of course legal issues, every factory must send paper to only one airport, and every airport can only take toilet paper from one factory. Also, a road can' t be built between all airport- factory pairs, again because of legal issues. Every possible road has number d given, number of days it takes to build that road. Your job is to choose N factory- airport pairs, such that if the country starts building all roads at the same time, it takes the least amount of days to complete them.",
    "input": "The first line contains two integers N ( 1 \u2264 N \u2264 10^ 4) - number of airports/ factories, and M ( 1 \u2264 M \u2264 10^ 5) - number of available pairs to build a road between. On next M lines, there are three integers u , v ( 1 \u2264 u, v \u2264 N) , d ( 1 \u2264 d \u2264 10^ 9) - meaning that you can build a road between airport u and factory v for d days.",
    "output": "If there are no solutions, output - 1. If there exists a solution, output the minimal number of days to complete all roads, equal to maximal d among all chosen roads.",
    "note": "",
    "topics": [
      "binary search",
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": "1423B"
  },
  {
    "title": "Returning Home",
    "url": "https://codeforces.com/problemset/problem/1422/D",
    "history": "Yura has been walking for some time already and is planning to return home. He needs to get home as fast as possible. To do this, Yura can use the instant- movement locations around the city. Let' s represent the city as an area of n \u00d7 n square blocks. Yura needs to move from the block with coordinates ( s_ x, s_ y) to the block with coordinates ( f_ x, f_ y) . In one minute Yura can move to any neighboring by side block; in other words, he can move in four directions. Also, there are m instant- movement locations in the city. Their coordinates are known to you and Yura. Yura can move to an instant- movement location in no time if he is located in a block with the same coordinate x or with the same coordinate y as the location. Help Yura to find the smallest time needed to get home.",
    "input": "The first line contains two integers n and m \u2014 the size of the city and the number of instant- movement locations ( 1 \u2264 n \u2264 10^ 9 , 0 \u2264 m \u2264 10^ 5 ) . The next line contains four integers s_ x s_ y f_ x f_ y \u2014 the coordinates of Yura' s initial position and the coordinates of his home ( 1 \u2264 s_ x, s_ y, f_ x, f_ y \u2264 n ) . Each of the next m lines contains two integers x_ i y_ i \u2014 coordinates of the i - th instant- movement location ( 1 \u2264 x_ i, y_ i \u2264 n ) .",
    "output": "In the only line print the minimum time required to get home.",
    "note": "In the first example Yura needs to reach ( 5, 5) from ( 1, 1) . He can do that in 5 minutes by first using the second instant- movement location ( because its y coordinate is equal to Yura' s y coordinate) , and then walking ( 4, 1) \u2192 ( 4, 2) \u2192 ( 4, 3) \u2192 ( 5, 3) \u2192 ( 5, 4) \u2192 ( 5, 5) .",
    "topics": [
      "graphs",
      "shortest paths",
      "sortings"
    ],
    "id": "1422D"
  },
  {
    "title": "Rain of Fire",
    "url": "https://codeforces.com/problemset/problem/1419/F",
    "history": "There are n detachments on the surface, numbered from 1 to n , the i - th detachment is placed in a point with coordinates ( x_ i, y_ i) . All detachments are placed in different points. Brimstone should visit each detachment at least once. You can choose the detachment where Brimstone starts. To move from one detachment to another he should first choose one of four directions of movement ( up, right, left or down) and then start moving with the constant speed of one unit interval in a second until he comes to a detachment. After he reaches an arbitrary detachment, he can repeat the same process. Each t seconds an orbital strike covers the whole surface, so at that moment Brimstone should be in a point where some detachment is located. He can stay with any detachment as long as needed. Brimstone is a good commander, that' s why he can create at most one detachment and place it in any empty point with integer coordinates he wants before his trip. Keep in mind that Brimstone will need to visit this detachment, too. Help Brimstone and find such minimal t that it is possible to check each detachment. If there is no such t report about it.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 1000) \u2014 the number of detachments. In each of the next n lines there is a pair of integers x_ i , y_ i ( | x_ i| , | y_ i| \u2264 10^ 9) \u2014 the coordinates of i - th detachment. It is guaranteed that all points are different.",
    "output": "Output such minimal integer t that it is possible to check all the detachments adding at most one new detachment. If there is no such t , print - 1 .",
    "note": "In the first test it is possible to place a detachment in ( 0, 0) , so that it is possible to check all the detachments for t = 100 . It can be proven that it is impossible to check all detachments for t < 100 ; thus the answer is 100 . In the second test, there is no such t that it is possible to check all detachments, even with adding at most one new detachment, so the answer is - 1 . In the third test, it is possible to place a detachment in ( 1, 0) , so that Brimstone can check all the detachments for t = 2 . It can be proven that it is the minimal such t . In the fourth test, there is no need to add any detachments, because the answer will not get better ( t = 2 ) . It can be proven that it is the minimal such t .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation"
    ],
    "id": "1419F"
  },
  {
    "title": "Mortal Kombat Tower",
    "url": "https://codeforces.com/problemset/problem/1418/C",
    "history": "You and your friend are playing the game Mortal Kombat XI. You are trying to pass a challenge tower. There are n bosses in this tower, numbered from 1 to n . The type of the i - th boss is a_ i . If the i - th boss is easy then its type is a_ i = 0 , otherwise this boss is hard and its type is a_ i = 1 . During one session, either you or your friend can kill one or two bosses ( neither you nor your friend can skip the session, so the minimum number of bosses killed during one session is at least one) . After your friend session, your session begins, then again your friend session begins, your session begins, and so on. The first session is your friend' s session. Your friend needs to get good because he can' t actually kill hard bosses. To kill them, he uses skip points. One skip point can be used to kill one hard boss. Your task is to find the minimum number of skip points your friend needs to use so you and your friend kill all n bosses in the given order. For example: suppose n = 8 , a = [ 1, 0, 1, 1, 0, 1, 1, 1] . Then the best course of action is the following: your friend kills two first bosses, using one skip point for the first boss; you kill the third and the fourth bosses; your friend kills the fifth boss; you kill the sixth and the seventh bosses; your friend kills the last boss, using one skip point, so the tower is completed using two skip points. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of bosses. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) , where a_ i is the type of the i - th boss. It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: the minimum number of skip points your friend needs to use so you and your friend kill all n bosses in the given order.",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1418C"
  },
  {
    "title": "Graph and Queries",
    "url": "https://codeforces.com/problemset/problem/1416/D",
    "history": "You are given an undirected graph consisting of n vertices and m edges. Initially there is a single integer written on every vertex: the vertex i has p_ i written on it. All p_ i are distinct integers from 1 to n . You have to process q queries of two types: 1 v \u2014 among all vertices reachable from the vertex v using the edges of the graph ( including the vertex v itself) , find a vertex u with the largest number p_ u written on it, print p_ u and replace p_ u with 0 ; 2 i \u2014 delete the i - th edge from the graph. Note that, in a query of the first type, it is possible that all vertices reachable from v have 0 written on them. In this case, u is not explicitly defined, but since the selection of u does not affect anything, you can choose any vertex reachable from v and print its value ( which is 0 ) .",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 3 \u00b7 10^ 5 ; 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) . The second line contains n distinct integers p_ 1 , p_ 2 , . . . , p_ n , where p_ i is the number initially written on vertex i ( 1 \u2264 p_ i \u2264 n ) . Then m lines follow, the i - th of them contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i b_ i ) and means that the i - th edge connects vertices a_ i and b_ i . It is guaranteed that the graph does not contain multi- edges. Then q lines follow, which describe the queries. Each line is given by one of the following formats: 1 v \u2014 denotes a query of the first type with a vertex v ( 1 \u2264 v \u2264 n ) . 2 i \u2014 denotes a query of the second type with an edge i ( 1 \u2264 i \u2264 m ) . For each query of the second type, it is guaranteed that the corresponding edge is not deleted from the graph yet.",
    "output": "For every query of the first type, print the value of p_ u written on the chosen vertex u .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "1416D"
  },
  {
    "title": "Peaceful Rooks",
    "url": "https://codeforces.com/problemset/problem/1411/C",
    "history": "You are given a n \u00d7 n chessboard. Rows and columns of the board are numbered from 1 to n . Cell ( x, y) lies on the intersection of column number x and row number y . Rook is a chess piece, that can in one turn move any number of cells vertically or horizontally. There are m rooks ( m < n ) placed on the chessboard in such a way that no pair of rooks attack each other. I. e. there are no pair of rooks that share a row or a column. In one turn you can move one of the rooks any number of cells vertically or horizontally. Additionally, it shouldn' t be attacked by any other rook after movement. What is the minimum number of moves required to place all the rooks on the main diagonal? The main diagonal of the chessboard is all the cells ( i, i) , where 1 \u2264 i \u2264 n .",
    "input": "The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 3 ) . Description of the t test cases follows. The first line of each test case contains two integers n and m \u2014 size of the chessboard and the number of rooks ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m < n ) . Each of the next m lines contains two integers x_ i and y_ i \u2014 positions of rooks, i - th rook is placed in the cell ( x_ i, y_ i) ( 1 \u2264 x_ i, y_ i \u2264 n ) . It' s guaranteed that no two rooks attack each other in the initial placement. The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each of t test cases print a single integer \u2014 the minimum number of moves required to place all the rooks on the main diagonal. It can be proved that this is always possible.",
    "note": "Possible moves for the first three test cases: ( 2, 3) \u2192 ( 2, 2) ( 2, 1) \u2192 ( 2, 3) , ( 1, 2) \u2192 ( 1, 1) , ( 2, 3) \u2192 ( 2, 2) ( 2, 3) \u2192 ( 2, 4) , ( 2, 4) \u2192 ( 4, 4) , ( 3, 1) \u2192 ( 3, 3) , ( 1, 2) \u2192 ( 1, 1)",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1411C"
  },
  {
    "title": "Clusterization Counting",
    "url": "https://codeforces.com/problemset/problem/1408/G",
    "history": "There are n computers in the company network. They are numbered from 1 to n . For each pair of two computers 1 \u2264 i < j \u2264 n you know the value a_ i, j : the difficulty of sending data between computers i and j . All values a_ i, j for i< j are different. You want to separate all computers into k sets A_ 1, A_ 2, . . . , A_ k , such that the following conditions are satisfied: for each computer 1 \u2264 i \u2264 n there is exactly one set A_ j , such that i \u2208 A_ j ; for each two pairs of computers ( s, f) and ( x, y) ( s = \u0338 f , x = \u0338 y ) , such that s , f , x are from the same set but x and y are from different sets, a_ s, f < a_ x, y . For each 1 \u2264 k \u2264 n find the number of ways to divide computers into k groups, such that all required conditions are satisfied. These values can be large, so you need to find them by modulo 998 244 353 .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 1500 ) : the number of computers. The i - th of the next n lines contains n integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 0 \u2264 a_ i, j\u2264n ( n- 1) / 2 ) . It is guaranteed that: for all 1 \u2264 i \u2264 n a_ i, i = 0 ; for all 1 \u2264 i < j \u2264 n a_ i, j > 0 ; for all 1 \u2264 i < j \u2264 n a_ i, j = a_ j, i ; all a_ i, j for i < j are different.",
    "output": "Print n integers: the k - th of them should be equal to the number of possible ways to divide computers into k groups, such that all required conditions are satisfied, modulo 998 244 353 .",
    "note": "Here are all possible ways to separate all computers into 4 groups in the second example: { 1, 2} , { 3, 4} , { 5} , { 6, 7} ; { 1} , { 2} , { 3, 4} , { 5, 6, 7} ; { 1, 2} , { 3} , { 4} , { 5, 6, 7} .",
    "topics": [
      "combinatorics",
      "dp",
      "dsu",
      "fft",
      "graphs",
      "trees"
    ],
    "id": "1408G"
  },
  {
    "title": "Avoid Rainbow Cycles",
    "url": "https://codeforces.com/problemset/problem/1408/E",
    "history": "You are given m sets of integers A_ 1, A_ 2, . . . , A_ m ; elements of these sets are integers between 1 and n , inclusive. There are two arrays of positive integers a_ 1, a_ 2, . . . , a_ m and b_ 1, b_ 2, . . . , b_ n . In one operation you can delete an element j from the set A_ i and pay a_ i + b_ j coins for that. You can make several ( maybe none) operations ( some sets can become empty) . After that, you will make an edge- colored undirected graph consisting of n vertices. For each set A_ i you will add an edge ( x, y) with color i for all x, y \u2208 A_ i and x < y . Some pairs of vertices can be connected with more than one edge, but such edges have different colors. You call a cycle i_ 1 \u2192 e_ 1 \u2192 i_ 2 \u2192 e_ 2 \u2192. . . \u2192 i_ k \u2192 e_ k \u2192 i_ 1 ( e_ j is some edge connecting vertices i_ j and i_ j+ 1 in this graph) rainbow if all edges on it have different colors. Find the minimum number of coins you should pay to get a graph without rainbow cycles.",
    "input": "The first line contains two integers m and n ( 1 \u2264 m, n \u2264 10^ 5 ) , the number of sets and the number of vertices in the graph. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) . In the each of the next of m lines there are descriptions of sets. In the i - th line the first integer s_ i ( 1 \u2264 s_ i \u2264 n ) is equal to the size of A_ i . Then s_ i integers follow: the elements of the set A_ i . These integers are from 1 to n and distinct. It is guaranteed that the sum of s_ i for all 1 \u2264 i \u2264 m does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print one integer: the minimum number of coins you should pay for operations to avoid rainbow cycles in the obtained graph.",
    "note": "In the first test, you can make such operations: Delete element 1 from set 1 . You should pay a_ 1 + b_ 1 = 5 coins for that. Delete element 1 from set 2 . You should pay a_ 2 + b_ 1 = 6 coins for that. You pay 11 coins in total. After these operations, the first and the second sets will be equal to { 2} and the third set will be equal to { 1, 2} . So, the graph will consist of one edge ( 1, 2) of color 3 . In the second test, you can make such operations: Delete element 1 from set 1 . You should pay a_ 1 + b_ 1 = 11 coins for that. Delete element 4 from set 2 . You should pay a_ 2 + b_ 4 = 13 coins for that. Delete element 7 from set 3 . You should pay a_ 3 + b_ 7 = 13 coins for that. Delete element 4 from set 4 . You should pay a_ 4 + b_ 4 = 16 coins for that. Delete element 7 from set 6 . You should pay a_ 6 + b_ 7 = 13 coins for that. You pay 66 coins in total. After these operations, the sets will be: { 2, 3} ; { 1} ; { 1, 3} ; { 3} ; { 3, 4, 5, 6, 7} ; { 5} ; { 8} . We will get the graph: There are no rainbow cycles in it.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1408E"
  },
  {
    "title": "Egor in the Republic of Dagestan",
    "url": "https://codeforces.com/problemset/problem/1407/E",
    "history": "Egor is a famous Russian singer, rapper, actor and blogger, and finally he decided to give a concert in the sunny Republic of Dagestan. There are n cities in the republic, some of them are connected by m directed roads without any additional conditions. In other words, road system of Dagestan represents an arbitrary directed graph. Egor will arrive to the city 1 , travel to the city n by roads along some path, give a concert and fly away. As any famous artist, Egor has lots of haters and too annoying fans, so he can travel only by safe roads. There are two types of the roads in Dagestan, black and white: black roads are safe at night only, and white roads \u2014 in the morning. Before the trip Egor' s manager' s going to make a schedule: for each city he' ll specify it' s color, black or white, and then if during the trip they visit some city, the only time they can leave it is determined by the city' s color: night, if it' s black, and morning, if it' s white. After creating the schedule Egor chooses an available path from 1 to n , and for security reasons it has to be the shortest possible. Egor' s manager likes Dagestan very much and wants to stay here as long as possible, so he asks you to make such schedule that there would be no path from 1 to n or the shortest path' s length would be greatest possible. A path is one city or a sequence of roads such that for every road ( excluding the first one) the city this road goes from is equal to the city previous road goes into. Egor can move only along paths consisting of safe roads only. The path length is equal to the number of roads in it. The shortest path in a graph is a path with smallest length.",
    "input": "The first line contains two integers n , m ( 1 \u2264 n \u2264 500000 , 0 \u2264 m \u2264 500000 ) \u2014 the number of cities and the number of roads. The i - th of next m lines contains three integers \u2014 u_ i , v_ i and t_ i ( 1 \u2264 u_ i, v_ i \u2264 n , t_ i \u2208{ 0, 1} ) \u2014 numbers of cities connected by road and its type, respectively ( 0 \u2014 night road, 1 \u2014 morning road) .",
    "output": "In the first line output the length of the desired path ( or - 1 , if it' s possible to choose such schedule that there' s no path from 1 to n ) . In the second line output the desired schedule \u2014 a string of n digits, where i - th digit is 0 , if the i - th city is a night one, and 1 if it' s a morning one. If there are multiple answers, print any.",
    "note": "For the first sample, if we paint city 1 white, the shortest path is 1 \u2192 3 . Otherwise, it' s 1 \u2192 2 \u2192 3 regardless of other cities' colors. For the second sample, we should paint city 3 black, and there are both black and white roads going from 2 to 4 . Note that there can be a road connecting a city with itself.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1407E"
  },
  {
    "title": "Discrete Centrifugal Jumps",
    "url": "https://codeforces.com/problemset/problem/1407/D",
    "history": "There are n beautiful skyscrapers in New York, the height of the i - th one is h_ i . Today some villains have set on fire first n - 1 of them, and now the only safety building is n - th skyscraper. Let' s call a jump from i - th skyscraper to j - th ( i < j ) discrete, if all skyscrapers between are strictly lower or higher than both of them. Formally, jump is discrete, if i < j and one of the following conditions satisfied: i + 1 = j max( h_ i + 1, . . . , h_ j - 1) < min( h_ i, h_ j) max( h_ i, h_ j) < min( h_ i + 1, . . . , h_ j - 1) . At the moment, Vasya is staying on the first skyscraper and wants to live a little longer, so his goal is to reach n - th skyscraper with minimal count of discrete jumps. Help him with calcualting this number.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 total amount of skyscrapers. The second line contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 9 ) \u2014 heights of skyscrapers.",
    "output": "Print single number k \u2014 minimal amount of discrete jumps. We can show that an answer always exists.",
    "note": "In the first testcase, Vasya can jump in the following way: 1 \u2192 2 \u2192 4 \u2192 5 . In the second and third testcases, we can reach last skyscraper in one jump. Sequence of jumps in the fourth testcase: 1 \u2192 3 \u2192 5 .",
    "topics": [
      "data structures",
      "dp",
      "graphs"
    ],
    "id": "1407D"
  },
  {
    "title": "Link Cut Centroids",
    "url": "https://codeforces.com/problemset/problem/1406/C",
    "history": "Fishing Prince loves trees, and he especially loves trees with only one centroid. The tree is a connected graph without cycles. A vertex is a centroid of a tree only when you cut this vertex ( remove it and remove all edges from this vertex) , the size of the largest connected component of the remaining graph is the smallest possible. For example, the centroid of the following tree is 2 , because when you cut it, the size of the largest connected component of the remaining graph is 2 and it can' t be smaller. However, in some trees, there might be more than one centroid, for example: Both vertex 1 and vertex 2 are centroids because the size of the largest connected component is 3 after cutting each of them. Now Fishing Prince has a tree. He should cut one edge of the tree ( it means to remove the edge) . After that, he should add one edge. The resulting graph after these two operations should be a tree. He can add the edge that he cut. He wants the centroid of the resulting tree to be unique. Help him and find any possible way to make the operations. It can be proved, that at least one such way always exists.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 3\u2264 n\u2264 10^ 5 ) \u2014 the number of vertices. Each of the next n- 1 lines contains two integers x, y ( 1\u2264 x, y\u2264 n ) . It means, that there exists an edge connecting vertices x and y . It' s guaranteed that the given graph is a tree. It' s guaranteed that the sum of n for all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print two lines. In the first line print two integers x_ 1, y_ 1 ( 1 \u2264 x_ 1, y_ 1 \u2264 n ) , which means you cut the edge between vertices x_ 1 and y_ 1 . There should exist edge connecting vertices x_ 1 and y_ 1 . In the second line print two integers x_ 2, y_ 2 ( 1 \u2264 x_ 2, y_ 2 \u2264 n ) , which means you add the edge between vertices x_ 2 and y_ 2 . The graph after these two operations should be a tree. If there are multiple solutions you can print any.",
    "note": "Note that you can add the same edge that you cut. In the first test case, after cutting and adding the same edge, the vertex 2 is still the only centroid. In the second test case, the vertex 2 becomes the only centroid after cutting the edge between vertices 1 and 3 and adding the edge between vertices 2 and 3 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1406C"
  },
  {
    "title": "Bricks",
    "url": "https://codeforces.com/problemset/problem/1404/E",
    "history": "A brick is defined as a rectangle with integer side lengths with either width 1 or height 1 ( or both) . There is an n\u00d7 m grid, and each cell is colored either black or white. A tiling is a way to place bricks onto the grid such that each black cell is covered by exactly one brick, and each white cell is not covered by any brick. In other words, bricks are placed on black cells only, cover all black cells, and no two bricks overlap. An example tiling of the first test case using 5 bricks. It is possible to do better, using only 4 bricks. What is the minimum number of bricks required to make a valid tiling?",
    "input": "The first line contains two integers n , m ( 1\u2264 n, m\u2264 200 ) \u2014 the number of rows and columns, respectively. The next n lines describe the grid. The i - th of these lines contains a string of length m , where the j - th character denotes the color of the cell in row i , column j . A black cell is given by \" # \" , and a white cell is given by \" . \" . It is guaranteed that there is at least one black cell.",
    "output": "Output a single integer, the minimum number of bricks required.",
    "note": "The first test case can be tiled with 4 bricks placed vertically. The third test case can be tiled with 18 bricks like this:",
    "topics": [
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": "1404E"
  },
  {
    "title": "Spring cleaning",
    "url": "https://codeforces.com/problemset/problem/1403/B",
    "history": "Spring cleanings are probably the most boring parts of our lives, except this year, when Flo\u0301ra and her mother found a dusty old tree graph under the carpet. This tree has N nodes ( numbered from 1 to N ) , connected by N- 1 edges. The edges gathered too much dust, so Flo\u0301ra' s mom decided to clean them. Cleaning the edges of an arbitrary tree is done by repeating the following process: She chooses 2 different leaves ( a node is a leaf if it is connected to exactly one other node by an edge) , and cleans every edge lying on the shortest path between them. If this path has d edges, then the cost of cleaning this path is d . She doesn' t want to harm the leaves of the tree, so she chooses every one of them at most once. A tree is cleaned when all of its edges are cleaned. The cost of this is the sum of costs for all cleaned paths. Flo\u0301ra thinks the tree they found is too small and simple, so she imagines Q variations of it. In the i - th variation, she adds a total of D_ i extra leaves to the original tree: for each new leaf, she chooses a node from the original tree, and connects that node with the new leaf by an edge. Note that some nodes may stop being leaves during this step. For all these Q variations, we are interested in the minimum cost that is required to clean the tree. Scoring [ Subtask Points Constraints; 1 0 samples; 2 9 Q = 1, there is an edge between node 1 and i for every i ( 2 \u2264 i \u2264 N) , ; Flo\u0301ra can' t add extra leaf to node 1; 3 9 Q = 1, there is an edge between node i and i+ 1 for all ( 1 \u2264 i < N) , ; Flo\u0301ra can' t add extra leaf to node 1 nor node N; 4 16 N \u2264 20000, Q \u2264 300; 5 19 the original tree is a perfect binary tree rooted at node 1; ( i. e. each internal node has exactly 2 children, and every leaf; has the same distance from the root) ; 6 17 D_ i = 1 for all i; 7 30 no additional constraints; ]",
    "input": "The first line contains two space- separated integer, N and Q ( 3 \u2264 N \u2264 10^ 5 , 1 \u2264 Q \u2264 10^ 5 ) \u2013 the number of nodes the tree has and the number of variations. Each of the next N- 1 lines contains two space- separated integers u and v denoting that nodes u and v are connected by an edge ( 1 \u2264 u, v \u2264 N ) . The next Q lines describe the variations. The first integer in the i th line is D_ i ( 1 \u2264 D_ i \u2264 10^ 5 ) . Then D_ i space- separated integers follow: if the j th number is a_ j , it means that Flo\u0301ra adds a new leaf to node a_ j ( 1 \u2264 a_ j \u2264 N ) . We may add more than one leaf to the same node. \u2211_ 1^ Q D_ i \u2264 10^ 5 i. e. the sum of D_ i in all varations is at most 10^ 5 . After each variation, Flo\u0301ra restarts and adds extra leaves to the original tree.",
    "output": "You should print Q lines. In the i - th line, print a single integer: the minimum cost required to clean the i - th variation of the tree. If the tree cannot be cleaned, print - 1 .",
    "note": "The following picture shows the second variation. A possible solution is to clean the path between leaves 1 - 6 , A - 7 and B - 3 . You can download the above example and an additional ( bigger) sample input here: https: / / gofile. io/ d/ 8QlbsS",
    "topics": [
      "*special",
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1403B"
  },
  {
    "title": "The Potion of Great Power",
    "url": "https://codeforces.com/problemset/problem/1403/A",
    "history": "Once upon a time, in the Land of the Shamans, everyone lived on the Sky- High Beanstalk. Each shaman had a unique identifying number i between 0 and N- 1 , and an altitude value H_ i , representing how high he lived above ground level. The distance between two altitudes is the absolute value of their difference. All shamans lived together in peace, until one of them stole the formula of the world- famous Potion of Great Power. To cover his/ her tracks, the Thief has put a Curse on the land: most inhabitants could no longer trust each other. . . Despite the very difficult circumstances, the Order of Good Investigators have gained the following information about the Curse: When the Curse first takes effect, everyone stops trusting each other. The Curse is unstable: at the end of each day ( exactly at midnight) , one pair of shamans will start or stop trusting each other. Unfortunately, each shaman will only ever trust at most D others at any given time. They have also reconstructed a log of who trusted whom: for each night they know which pair of shamans started/ stopped trusting each other. They believe the Thief has whispered the formula to an Evil Shaman. To avoid detection, both of them visited the home of one of their ( respective) trusted friends. During the visit, the Thief whispered the formula to the Evil Shaman through the window. ( Note: this trusted friend did not have to be home at the time. In fact, it' s even possible that they visited each other' s houses \u2013 shamans are weird. ) Fortunately, whispers only travel short distances, so the Order knows the two trusted friends visited ( by the Thief and the Evil Shaman) must live very close to each other. They ask you to help with their investigation. They would like to test their suspicions: what if the Thief was x , the Evil Shaman was y , and the formula was whispered on day v ? What is the smallest distance the whispered formula had to travel? That is, what is the minimum distance between the apartments of some shamans x' and y' ( i. e. min( | H_ x' - H_ y' | ) ) , such that x' was a trusted friend of x and y' was a trusted friend of y on day v ? They will share all their information with you, then ask you a number of questions. You need to answer each question immediately, before receiving the next one. InteractionThe interaction will begin with a line containing N , D , U and Q ( 2 \u2264 N \u2264 100000 , 1 \u2264 D \u2264 500 , 0 \u2264 U \u2264 200000 , 1 \u2264 Q \u2264 50000) \u2013 the number of shamans, the maximum number of trusted friends a shaman can have at any given point, the number of days, and the number of questions. On the next line N space separated integers will follow, the i th ( 1\u2264 i \u2264 N) of which being H_ i- 1 ( 0\u2264 H_ i- 1\u2264 10^ 9) , the altitude of shaman i- 1 . On the next U lines there will be two integers each, on the i th ( 1 \u2264 i \u2264 U ) A_ i and B_ i ( 0 \u2264 A_ i, B_ i < N and A_ i = \u0338 B_ i) , which represents a pair of shamans who started or stopped trusting each other at the end of day i- 1 . That is, if A_ i and B_ i trusted each other on day i- 1 , they did not trust each other on day i , or vice versa. Read all of these integers. The interactor now will ask you Q question, so the following interaction should happen Q times: Read 3 integers describing the current query: x, y and v ( x = \u0338 y , 0 \u2264 x, y < N and 0 \u2264 v \u2264 U ) , where x is the suspected Thief, y is the suspected Evil Shaman, and v is the suspected day. . Then print the answer to this query on a single line, i. e. you should print the minimum distance the whispered formula had to travel from some trusted friend x' of x to a trusted friend y' of y . In case someone trusted both x and y ( i. e. x' = y' ) , you should print 0 . If x or y had no trusted friends, print 10^ 9 . After printing each line do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Scoring [ Subtask Points Constraints; 1 0 samples; 2 17 Q, U \u2264 1000; 3 14 v= U for all questions; 4 18 H_ i \u2208{ 0, 1} for all shamans i; 5 21 U, N \u2264 10000; 6 30 no additional constraints; ]",
    "input": "",
    "output": "",
    "note": "Example queries: Evolution of friendships:",
    "topics": [
      "*special",
      "2-sat",
      "binary search",
      "data structures",
      "graphs",
      "interactive",
      "sortings",
      "two pointers"
    ],
    "id": "1403A"
  },
  {
    "title": "Star Trek",
    "url": "https://codeforces.com/problemset/problem/1402/C",
    "history": "The United Federation of Planets is an alliance of N planets, they are indexed from 1 to N . Some planets are connected by space tunnels. In a space tunnel, a starship can fly both ways really fast. There are exactly N- 1 space tunnels, and we can travel from any planet to any other planet in the Federation using these tunnels. It' s well known that there are D additional parallel universes. These are exact copies of our universe, they have the same planets and space tunnels. They are indexed from 1 to D ( our universe has index 0 ) . We denote the planet x in universe i by P_ x^ i . We can travel from one universe to another using dimension portals. For every i ( 0\u2264 i \u2264 D- 1 ) , we will place exactly one portal that allows us to fly from P_ A_ i^ i to P_ B_ i^ i+ 1 , for some planet indices A_ i and B_ i ( i. e. 1 \u2264 A_ i, B_ i \u2264 N ) . Once all the portals are placed, Starship Batthya\u0301ny will embark on its maiden voyage. It is currently orbiting around P_ 1^ 0 . Captain A\u0301gnes and Lieutenant Ga\u0301bor have decided to play the following game: they choose alternately a destination ( a planet) to fly to. This planet can be in the same universe, if a space tunnel goes there, or it can be in another universe, if a portal goes there. Their aim is to visit places where no one has gone before. That' s why, once they have visited a planet P_ x^ i , they never go back there ( but they can visit the planet x in another universe) . Captain A\u0301gnes chooses the first destination ( then Ga\u0301bor, then A\u0301gnes etc. ) . If somebody can' t choose a planet where they have not been before in his/ her turn, he/ she loses. Captain A\u0301gnes and Lieutenant Ga\u0301bor are both very clever: they know the locations of all tunnels and portals, and they both play optimally. For how many different placements of portals does Captain A\u0301gnes win the game? Two placements are different if there is an index i ( 0\u2264 i \u2264 D- 1 ) , where the i th portal connects different pairs of planets in the two placements ( i. e A_ i or B_ i differs) . This number can be very big, so we are interested in it modulo 10^ 9+ 7 . Scoring [ Subtask Points Constraints; 1 0 samples; 2 7 N= 2; 3 8 N \u2264 100 and D = 1; 4 15 N \u2264 1000 and D = 1; 5 15 D= 1; 6 20 N \u2264 1000 and D \u2264 10^ 5; 7 20 D \u2264 10^ 5; 8 15 no additional constraints; ]",
    "input": "The first line contains two space- separated integers, N ( 1\u2264 N \u2264 10^ 5 ) \u2013 the number of planets and D ( 1 \u2264 D \u2264 10^ 18 ) \u2013 the number of additional parallel universes. Each of the next N- 1 lines contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 N ) , denoting that P_ u^ i and P_ v^ i are connected by a space tunnel for all i ( 0 \u2264 i \u2264 D ) .",
    "output": "You should print a single integer, the number of possible placements of portals where Captain A\u0301gnes wins modulo 10^ 9+ 7 .",
    "note": "There is only 1 portal and 3 \u00b7 3 = 9 different placements. The following 4 placements are when the Captain wins.",
    "topics": [
      "*special",
      "combinatorics",
      "dfs and similar",
      "dp",
      "games",
      "graphs",
      "matrices",
      "trees"
    ],
    "id": "1402C"
  },
  {
    "title": "Yet Another Segments Subset",
    "url": "https://codeforces.com/problemset/problem/1399/F",
    "history": "You are given n segments on a coordinate axis OX . The i - th segment has borders [ l_ i; r_ i] . All points x , for which l_ i \u2264 x \u2264 r_ i holds, belong to the i - th segment. Your task is to choose the maximum by size ( the number of segments) subset of the given set of segments such that each pair of segments in this subset either non- intersecting or one of them lies inside the other one. Two segments [ l_ i; r_ i] and [ l_ j; r_ j] are non- intersecting if they have no common points. For example, segments [ 1; 2] and [ 3; 4] , [ 1; 3] and [ 5; 5] are non- intersecting, while segments [ 1; 2] and [ 2; 3] , [ 1; 2] and [ 2; 2] are intersecting. The segment [ l_ i; r_ i] lies inside the segment [ l_ j; r_ j] if l_ j \u2264 l_ i and r_ i \u2264 r_ j . For example, segments [ 2; 2] , [ 2, 3] , [ 3; 4] and [ 2; 4] lie inside the segment [ 2; 4] , while [ 2; 5] and [ 1; 4] are not. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 3000 ) \u2014 the number of segments. The next n lines describe segments. The i - th segment is given as two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 2 \u00b7 10^ 5 ) , where l_ i is the left border of the i - th segment and r_ i is the right border of the i - th segment. Additional constraint on the input: there are no duplicates in the list of segments. It is guaranteed that the sum of n does not exceed 3000 ( \u2211 n \u2264 3000 ) .",
    "output": "For each test case, print the answer: the maximum possible size of the subset of the given set of segments such that each pair of segments in this subset either non- intersecting or one of them lies inside the other one.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "sortings"
    ],
    "id": "1399F"
  },
  {
    "title": "Boboniu Walks on Graph",
    "url": "https://codeforces.com/problemset/problem/1394/B",
    "history": "Boboniu has a directed graph with n vertices and m edges. The out- degree of each vertex is at most k . Each edge has an integer weight between 1 and m . No two edges have equal weights. Boboniu likes to walk on the graph with some specific rules, which is represented by a tuple ( c_ 1, c_ 2, . . . , c_ k) . If he now stands on a vertex u with out- degree i , then he will go to the next vertex by the edge with the c_ i - th ( 1\u2264 c_ i\u2264 i) smallest weight among all edges outgoing from u . Now Boboniu asks you to calculate the number of tuples ( c_ 1, c_ 2, . . . , c_ k) such that 1\u2264 c_ i\u2264 i for all i ( 1\u2264 i\u2264 k ) . Starting from any vertex u , it is possible to go back to u in finite time by walking on the graph under the described rules.",
    "input": "The first line contains three integers n , m and k ( 2\u2264 n\u2264 2\u00b7 10^ 5 , 2\u2264 m\u2264min( 2\u00b7 10^ 5, n( n- 1) ) , 1\u2264 k\u2264 9 ) . Each of the next m lines contains three integers u , v and w ( 1\u2264 u, v\u2264 n, u v, 1\u2264 w\u2264 m) , denoting an edge from u to v with weight w . It is guaranteed that there are no self- loops or multiple edges and each vertex has at least one edge starting from itself. It is guaranteed that the out- degree of each vertex is at most k and no two edges have equal weight.",
    "output": "Print one integer: the number of tuples.",
    "note": "For the first example, there are two tuples: ( 1, 1, 3) and ( 1, 2, 3) . The blue edges in the picture denote the c_ i - th smallest edges for each vertex, which Boboniu chooses to go through. For the third example, there' s only one tuple: ( 1, 2, 2, 2) . The out- degree of vertex u means the number of edges outgoing from u .",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "hashing"
    ],
    "id": "1394B"
  },
  {
    "title": "Kevin and Grid",
    "url": "https://codeforces.com/problemset/problem/1392/I",
    "history": "As Kevin is in BigMan' s house, suddenly a trap sends him onto a grid with n rows and m columns. BigMan' s trap is configured by two arrays: an array a_ 1, a_ 2, . . . , a_ n and an array b_ 1, b_ 2, . . . , b_ m . In the i - th row there is a heater which heats the row by a_ i degrees, and in the j - th column there is a heater which heats the column by b_ j degrees, so that the temperature of cell ( i, j) is a_ i+ b_ j . Fortunately, Kevin has a suit with one parameter x and two modes: heat resistance. In this mode suit can stand all temperatures greater or equal to x , but freezes as soon as reaches a cell with temperature less than x . cold resistance. In this mode suit can stand all temperatures less than x , but will burn as soon as reaches a cell with temperature at least x . Once Kevin lands on a cell the suit automatically turns to cold resistance mode if the cell has temperature less than x , or to heat resistance mode otherwise, and cannot change after that. We say that two cells are adjacent if they share an edge. Let a path be a sequence c_ 1, c_ 2, . . . , c_ k of cells such that c_ i and c_ i+ 1 are adjacent for 1 \u2264 i \u2264 k- 1 . We say that two cells are connected if there is a path between the two cells consisting only of cells that Kevin can step on. A connected component is a maximal set of pairwise connected cells. We say that a connected component is good if Kevin can escape the grid starting from it \u2014 when it contains at least one border cell of the grid, and that it' s bad otherwise. To evaluate the situation, Kevin gives a score of 1 to each good component and a score of 2 for each bad component. The final score will be the difference between the total score of components with temperatures bigger than or equal to x and the score of components with temperatures smaller than x . There are q possible values of x that Kevin can use, and for each of them Kevin wants to know the final score. Help Kevin defeat BigMan!",
    "input": "The first line contains three integers n , m , q ( 1 \u2264 n, m, q \u2264 10^ 5 ) \u2013 the number of rows, columns, and the number of possible values for x respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 5 ) . Each of the next q lines contains one integer x ( 1 \u2264 x \u2264 2 \u00b7 10^ 5 ) .",
    "output": "Output q lines, in the i - th line output the answer for the i - th possible value of x from the input.",
    "note": "In the first example, the score for components with temperature smaller than 5 is 1+ 2 , and the score for components with temperature at least 5 is 2 . Thus, the final score is 2- 3= - 1 .",
    "topics": [
      "fft",
      "graphs",
      "math"
    ],
    "id": "1392I"
  },
  {
    "title": "Pairs of Pairs",
    "url": "https://codeforces.com/problemset/problem/1391/E",
    "history": "You have a simple and connected undirected graph consisting of n nodes and m edges. Consider any way to pair some subset of these n nodes such that no node is present in more than one pair. This pairing is valid if for every pair of pairs, the induced subgraph containing all 4 nodes, two from each pair, has at most 2 edges ( out of the 6 possible edges) . More formally, for any two pairs, ( a, b) and ( c, d) , the induced subgraph with nodes { a, b, c, d} should have at most 2 edges. Please note that the subgraph induced by a set of nodes contains nodes only from this set and edges which have both of its end points in this set. Now, do one of the following: Find a simple path consisting of at least \u2308n/ 2\u2309 nodes. Here, a path is called simple if it does not visit any node multiple times. Find a valid pairing in which at least \u2308n/ 2\u2309 nodes are paired. It can be shown that it is possible to find at least one of the two in every graph satisfying constraints from the statement.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains 2 integers n, m ( 2 \u2264 n \u2264 5\u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 6 ) , denoting the number of nodes and edges, respectively. The next m lines each contain 2 integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , denoting that there is an undirected edge between nodes u and v in the given graph. It is guaranteed that the given graph is connected, and simple \u2014 it does not contain multiple edges between the same pair of nodes, nor does it have any self- loops. It is guaranteed that the sum of n over all test cases does not exceed 5\u00b7 10^ 5 . It is guaranteed that the sum of m over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, the output format is as follows. If you have found a pairing, in the first line output \" PAIRING\" ( without quotes) . Then, output k ( \u2308n/ 2\u2309\u2264 2\u00b7 k \u2264 n ) , the number of pairs in your pairing. Then, in each of the next k lines, output 2 integers a and b \u2014 denoting that a and b are paired with each other. Note that the graph does not have to have an edge between a and b ! This pairing has to be valid, and every node has to be a part of at most 1 pair. Otherwise, in the first line output \" PATH\" ( without quotes) . Then, output k ( \u2308n/ 2\u2309\u2264 k \u2264 n ) , the number of nodes in your path. Then, in the second line, output k integers, v_ 1, v_ 2, . . . , v_ k , in the order in which they appear on the path. Formally, v_ i and v_ i+ 1 should have an edge between them for every i ( 1 \u2264 i < k ) . This path has to be simple, meaning no node should appear more than once.",
    "note": "The path outputted in the first case is the following. The pairing outputted in the second case is the following. Here is an invalid pairing for the same graph \u2014 the subgraph { 1, 3, 4, 5} has 3 edges. Here is the pairing outputted in the third case. It' s valid because \u2014 The subgraph { 1, 8, 2, 5} has edges ( 1 , 2 ) and ( 1 , 5 ) . The subgraph { 1, 8, 4, 10} has edges ( 1 , 4 ) and ( 4 , 10 ) . The subgraph { 4, 10, 2, 5} has edges ( 2 , 4 ) and ( 4 , 10 ) . Here is the pairing outputted in the fourth case.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1391E"
  },
  {
    "title": "Cyclic Permutations ",
    "url": "https://codeforces.com/problemset/problem/1391/C",
    "history": "A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . Consider a permutation p of length n , we build a graph of size n using it as follows: For every 1 \u2264 i \u2264 n , find the largest j such that 1 \u2264 j < i and p_ j > p_ i , and add an undirected edge between node i and node j For every 1 \u2264 i \u2264 n , find the smallest j such that i < j \u2264 n and p_ j > p_ i , and add an undirected edge between node i and node j In cases where no such j exists, we make no edges. Also, note that we make edges between the corresponding indices, not the values at those indices. For clarity, consider as an example n = 4 , and p = [ 3, 1, 4, 2] ; here, the edges of the graph are ( 1, 3) , ( 2, 1) , ( 2, 3) , ( 4, 3) . A permutation p is cyclic if the graph built using p has at least one simple cycle. Given n , find the number of cyclic permutations of length n . Since the number may be very large, output it modulo 10^ 9+ 7 . Please refer to the Notes section for the formal definition of a simple cycle",
    "input": "The first and only line contains a single integer n ( 3 \u2264 n \u2264 10^ 6 ) .",
    "output": "Output a single integer 0 \u2264 x < 10^ 9+ 7 , the number of cyclic permutations of length n modulo 10^ 9+ 7 .",
    "note": "There are 16 cyclic permutations for n = 4 . [ 4, 2, 1, 3] is one such permutation, having a cycle of length four: 4 \u2192 3 \u2192 2 \u2192 1 \u2192 4 . Nodes v_ 1 , v_ 2 , . . . , v_ k form a simple cycle if the following conditions hold: k \u2265 3 . v_ i = \u0338 v_ j for any pair of indices i and j . ( 1 \u2264 i < j \u2264 k ) v_ i and v_ i+ 1 share an edge for all i ( 1 \u2264 i < k ) , and v_ 1 and v_ k share an edge.",
    "topics": [
      "combinatorics",
      "dp",
      "graphs",
      "math"
    ],
    "id": "1391C"
  },
  {
    "title": "Directing Edges",
    "url": "https://codeforces.com/problemset/problem/1389/G",
    "history": "You are given an undirected connected graph consisting of n vertices and m edges. k vertices of this graph are special. You have to direct each edge of this graph or leave it undirected. If you leave the i - th edge undirected, you pay w_ i coins, and if you direct it, you don' t have to pay for it. Let' s call a vertex saturated if it is reachable from each special vertex along the edges of the graph ( if an edge is undirected, it can be traversed in both directions) . After you direct the edges of the graph ( possibly leaving some of them undirected) , you receive c_ i coins for each saturated vertex i . Thus, your total profit can be calculated as \u2211_ i \u2208 S c_ i - \u2211_ j \u2208 U w_ j , where S is the set of saturated vertices, and U is the set of edges you leave undirected. For each vertex i , calculate the maximum possible profit you can get if you have to make the vertex i saturated.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , n - 1 \u2264 m \u2264min( 3 \u00b7 10^ 5, n( n- 1) / 2) , 1 \u2264 k \u2264 n ) . The second line contains k pairwise distinct integers v_ 1 , v_ 2 , . . . , v_ k ( 1 \u2264 v_ i \u2264 n ) \u2014 the indices of the special vertices. The third line contains n integers c_ 1 , c_ 2 , . . . , c_ n ( 0 \u2264 c_ i \u2264 10^ 9 ) . The fourth line contains m integers w_ 1 , w_ 2 , . . . , w_ m ( 0 \u2264 w_ i \u2264 10^ 9 ) . Then m lines follow, the i - th line contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) \u2014 the endpoints of the i - th edge. There is at most one edge between each pair of vertices.",
    "output": "Print n integers, where the i - th integer is the maximum profit you can get if you have to make the vertex i saturated.",
    "note": "Consider the first example: the best way to make vertex 1 saturated is to direct the edges as 2 \u2192 1 , 3 \u2192 2 ; 1 is the only saturated vertex, so the answer is 11 ; the best way to make vertex 2 saturated is to leave the edge 1- 2 undirected and direct the other edge as 3 \u2192 2 ; 1 and 2 are the saturated vertices, and the cost to leave the edge 1- 2 undirected is 10 , so the answer is 2 ; the best way to make vertex 3 saturated is to direct the edges as 2 \u2192 3 , 1 \u2192 2 ; 3 is the only saturated vertex, so the answer is 5 . The best course of action in the second example is to direct the edges along the cycle: 1 \u2192 2 , 2 \u2192 3 , 3 \u2192 4 and 4 \u2192 1 . That way, all vertices are saturated.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1389G"
  },
  {
    "title": "Captain Flint and Treasure",
    "url": "https://codeforces.com/problemset/problem/1388/D",
    "history": "Captain Fint is involved in another treasure hunt, but have found only one strange problem. The problem may be connected to the treasure' s location or may not. That' s why captain Flint decided to leave the solving the problem to his crew and offered an absurdly high reward: one day off. The problem itself sounds like this. . . There are two arrays a and b of length n . Initially, an ans is equal to 0 and the following operation is defined: Choose position i ( 1 \u2264 i \u2264 n ) ; Add a_ i to ans ; If b_ i = \u0338 - 1 then add a_ i to a_ b_ i . What is the maximum ans you can get by performing the operation on each i ( 1 \u2264 i \u2264 n ) exactly once? Uncle Bogdan is eager to get the reward, so he is asking your help to find the optimal order of positions to perform the operation on them.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of arrays a and b . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( \u221210^ 6 \u2264 a_ i \u2264 10^ 6 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n or b_ i = - 1 ) . Additional constraint: it' s guaranteed that for any i ( 1 \u2264 i \u2264 n ) the sequence b_ i, b_ b_ i, b_ b_ b_ i, . . . is not cyclic, in other words it will always end with - 1 .",
    "output": "In the first line, print the maximum ans you can get. In the second line, print the order of operations: n different integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . The p_ i is the position which should be chosen at the i - th step. If there are multiple orders, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1388D"
  },
  {
    "title": "Columns Swaps",
    "url": "https://codeforces.com/problemset/problem/1385/G",
    "history": "You are given a table a of size 2 \u00d7 n ( i. e. two rows and n columns) consisting of integers from 1 to n . In one move, you can choose some column j ( 1 \u2264 j \u2264 n ) and swap values a_ 1, j and a_ 2, j in it. Each column can be chosen no more than once. Your task is to find the minimum number of moves required to obtain permutations of size n in both first and second rows of the table or determine if it is impossible to do that. You have to answer t independent test cases. Recall that the permutation of size n is such an array of size n that contains each integer from 1 to n exactly once ( the order of elements doesn' t matter) .",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of columns in the table. The second line of the test case contains n integers a_ 1, 1, a_ 1, 2, . . . , a_ 1, n ( 1 \u2264 a_ 1, i\u2264 n ) , where a_ 1, i is the i - th element of the first row of the table. The third line of the test case contains n integers a_ 2, 1, a_ 2, 2, . . . , a_ 2, n ( 1 \u2264 a_ 2, i\u2264 n ) , where a_ 2, i is the i - th element of the second row of the table. It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case print the answer: - 1 if it is impossible to obtain permutation of size n in both first and the second rows of the table, or one integer k in the first line, where k is the minimum number of moves required to obtain permutations in both rows, and k distinct integers pos_ 1, pos_ 2, . . . , pos_ k in the second line ( 1 \u2264 pos_ i \u2264 n ) in any order \u2014 indices of columns in which you need to swap values to obtain permutations in both rows. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "2-sat",
      "dfs and similar",
      "dsu",
      "graphs",
      "implementation"
    ],
    "id": "1385G"
  },
  {
    "title": "Directing Edges",
    "url": "https://codeforces.com/problemset/problem/1385/E",
    "history": "You are given a graph consisting of n vertices and m edges. It is not guaranteed that the given graph is connected. Some edges are already directed and you can' t change their direction. Other edges are undirected and you have to choose some direction for all these edges. You have to direct undirected edges in such a way that the resulting graph is directed and acyclic ( i. e. the graph with all edges directed and having no directed cycles) . Note that you have to direct all undirected edges. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 min( 2 \u00b7 10^ 5, n( n- 1) / 2) ) \u2014 the number of vertices and the number of edges in the graph, respectively. The next m lines describe edges of the graph. The i - th edge is described with three integers t_ i , x_ i and y_ i ( t_ i \u2208 [ 0; 1] , 1 \u2264 x_ i, y_ i \u2264 n ) \u2014 the type of the edge ( t_ i = 0 if the edge is undirected and t_ i = 1 if the edge is directed) and vertices this edge connects ( the undirected edge connects vertices x_ i and y_ i and directed edge is going from the vertex x_ i to the vertex y_ i ) . It is guaranteed that the graph do not contain self- loops ( i. e. edges from the vertex to itself) and multiple edges ( i. e. for each pair ( x_ i, y_ i ) there are no other pairs ( x_ i, y_ i ) or ( y_ i, x_ i ) ) . It is guaranteed that both sum n and sum m do not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ; \u2211 m \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case print the answer \u2014 \" NO\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \" YES\" on the first line and m lines describing edges of the resulted directed acyclic graph ( in any order) . Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.",
    "note": "Explanation of the second test case of the example: Explanation of the third test case of the example:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "1385E"
  },
  {
    "title": "Special Edges",
    "url": "https://codeforces.com/problemset/problem/1383/F",
    "history": "Koa the Koala has a directed graph G with n nodes and m edges. Each edge has a capacity associated with it. Exactly k edges of the graph, numbered from 1 to k , are special, such edges initially have a capacity equal to 0 . Koa asks you q queries. In each query she gives you k integers w_ 1, w_ 2, . . . , w_ k . This means that capacity of the i - th special edge becomes w_ i ( and other capacities remain the same) . Koa wonders: what is the maximum flow that goes from node 1 to node n after each such query? Help her!",
    "input": "The first line of the input contains four integers n , m , k , q ( 2 \u2264 n \u2264 10^ 4 , 1 \u2264 m \u2264 10^ 4 , 1 \u2264 k \u2264min( 10, m) , 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of nodes, the number of edges, the number of special edges and the number of queries. Each of the next m lines contains three integers u , v , w ( 1 \u2264 u, v \u2264 n ; 0 \u2264 w \u2264 25 ) \u2014 the description of a directed edge from node u to node v with capacity w . Edges are numbered starting from 1 in the same order they are listed in the input. The first k edges are the special edges. It is guaranteed that w_ i = 0 for all i with 1 \u2264 i \u2264 k . Each of the next q lines contains k integers w_ 1, w_ 2, . . . , w_ k ( 0 \u2264 w_ i \u2264 25 ) \u2014 the description of the query. w_ i denotes the capacity of i - th edge.",
    "output": "For the i - th query, print one integer res_ i \u2014 the maximum flow that can be obtained from node 1 to node n given the i - th query' s special edge weights.",
    "note": "For the second sample, the following images correspond to the first two queries ( from left to right respectively) . For each edge there is a pair flow/ capacity denoting flow pushed through the edge and edge' s capacity. The special edges are colored in red. As you can see in first query maximum flow from node 1 to node 4 equals 0 and in second query equals 1 .",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1383F"
  },
  {
    "title": "Rearrange",
    "url": "https://codeforces.com/problemset/problem/1383/D",
    "history": "Koa the Koala has a matrix A of n rows and m columns. Elements of this matrix are distinct integers from 1 to n \u00b7 m ( each number from 1 to n \u00b7 m appears exactly once in the matrix) . For any matrix M of n rows and m columns let' s define the following: The i - th row of M is defined as R_ i( M) = [ M_ i1, M_ i2, . . . , M_ im ] for all i ( 1 \u2264 i \u2264 n ) . The j - th column of M is defined as C_ j( M) = [ M_ 1j, M_ 2j, . . . , M_ nj ] for all j ( 1 \u2264 j \u2264 m ) . Koa defines S( A) = ( X, Y) as the spectrum of A , where X is the set of the maximum values in rows of A and Y is the set of the maximum values in columns of A . More formally: X = { max( R_ 1( A) ) , max( R_ 2( A) ) , . . . , max( R_ n( A) ) } Y = { max( C_ 1( A) ) , max( C_ 2( A) ) , . . . , max( C_ m( A) ) } Koa asks you to find some matrix A' of n rows and m columns, such that each number from 1 to n \u00b7 m appears exactly once in the matrix, and the following conditions hold: S( A' ) = S( A) R_ i( A' ) is bitonic for all i ( 1 \u2264 i \u2264 n ) C_ j( A' ) is bitonic for all j ( 1 \u2264 j \u2264 m ) An array t ( t_ 1, t_ 2, . . . , t_ k ) is called bitonic if it first increases and then decreases. More formally: t is bitonic if there exists some position p ( 1 \u2264 p \u2264 k ) such that: t_ 1 < t_ 2 < . . . < t_ p > t_ p+ 1 > . . . > t_ k . Help Koa to find such matrix or to determine that it doesn' t exist.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 250 ) \u2014 the number of rows and columns of A . Each of the ollowing n lines contains m integers. The j - th integer in the i - th line denotes element A_ ij ( 1 \u2264 A_ ij\u2264 n \u00b7 m ) of matrix A . It is guaranteed that every number from 1 to n \u00b7 m appears exactly once among elements of the matrix.",
    "output": "If such matrix doesn' t exist, print - 1 on a single line. Otherwise, the output must consist of n lines, each one consisting of m space separated integers \u2014 a description of A' . The j - th number in the i - th line represents the element A' _ ij . Every integer from 1 to n \u00b7 m should appear exactly once in A' , every row and column in A' must be bitonic and S( A) = S( A' ) must hold. If there are many answers print any.",
    "note": "Let' s analyze the first sample: For matrix A we have: Rows: R_ 1( A) = [ 3, 5, 6] ; max( R_ 1( A) ) = 6 R_ 2( A) = [ 1, 7, 9] ; max( R_ 2( A) ) = 9 R_ 3( A) = [ 4, 8, 2] ; max( R_ 3( A) ) = 8 Columns: C_ 1( A) = [ 3, 1, 4] ; max( C_ 1( A) ) = 4 C_ 2( A) = [ 5, 7, 8] ; max( C_ 2( A) ) = 8 C_ 3( A) = [ 6, 9, 2] ; max( C_ 3( A) ) = 9 X = { max( R_ 1( A) ) , max( R_ 2( A) ) , max( R_ 3( A) ) } = { 6, 9, 8 } Y = { max( C_ 1( A) ) , max( C_ 2( A) ) , max( C_ 3( A) ) } = { 4, 8, 9 } So S( A) = ( X, Y) = ( { 6, 9, 8 } , { 4, 8, 9 } ) For matrix A' we have: Rows: R_ 1( A' ) = [ 9, 5, 1] ; max( R_ 1( A' ) ) = 9 R_ 2( A' ) = [ 7, 8, 2] ; max( R_ 2( A' ) ) = 8 R_ 3( A' ) = [ 3, 6, 4] ; max( R_ 3( A' ) ) = 6 Columns: C_ 1( A' ) = [ 9, 7, 3] ; max( C_ 1( A' ) ) = 9 C_ 2( A' ) = [ 5, 8, 6] ; max( C_ 2( A' ) ) = 8 C_ 3( A' ) = [ 1, 2, 4] ; max( C_ 3( A' ) ) = 4 Note that each of this arrays are bitonic. X = { max( R_ 1( A' ) ) , max( R_ 2( A' ) ) , max( R_ 3( A' ) ) } = { 9, 8, 6 } Y = { max( C_ 1( A' ) ) , max( C_ 2( A' ) ) , max( C_ 3( A' ) ) } = { 9, 8, 4 } So S( A' ) = ( X, Y) = ( { 9, 8, 6 } , { 9, 8, 4 } )",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1383D"
  },
  {
    "title": "String Transformation 2",
    "url": "https://codeforces.com/problemset/problem/1383/C",
    "history": "Note that the only difference between String Transformation 1 and String Transformation 2 is in the move Koa does. In this version the letter y Koa selects can be any letter from the first 20 lowercase letters of English alphabet ( read statement for better understanding) . You can make hacks in these problems independently. Koa the Koala has two strings A and B of the same length n ( | A| = | B| = n ) consisting of the first 20 lowercase English alphabet letters ( ie. from a to t) . In one move Koa: selects some subset of positions p_ 1, p_ 2, . . . , p_ k ( k \u2265 1; 1 \u2264 p_ i \u2264 n; p_ i = \u0338 p_ j if i = \u0338 j ) of A such that A_ p_ 1 = A_ p_ 2 = . . . = A_ p_ k = x ( ie. all letters on this positions are equal to some letter x ) . selects any letter y ( from the first 20 lowercase letters in English alphabet) . sets each letter in positions p_ 1, p_ 2, . . . , p_ k to letter y . More formally: for each i ( 1 \u2264 i \u2264 k ) Koa sets A_ p_ i = y . Note that you can only modify letters in string A . Koa wants to know the smallest number of moves she has to do to make strings equal to each other ( A = B ) or to determine that there is no way to make them equal. Help her!",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 10 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of strings A and B . The second line of each test case contains string A ( | A| = n ) . The third line of each test case contains string B ( | B| = n ) . Both strings consists of the first 20 lowercase English alphabet letters ( ie. from a to t) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case: Print on a single line the smallest number of moves she has to do to make strings equal to each other ( A = B ) or - 1 if there is no way to make them equal.",
    "note": "In the 1 - st test case Koa: selects positions 1 and 2 and sets A_ 1 = A_ 2 = b ( aab \u2192bbb ) . selects positions 2 and 3 and sets A_ 2 = A_ 3 = c ( bbb\u2192 bcc ) . In the 2 - nd test case Koa: selects positions 1 and 4 and sets A_ 1 = A_ 4 = a ( cabc\u2192aaba ) . selects positions 2 and 4 and sets A_ 2 = A_ 4 = b ( aaba\u2192 abbb ) . selects position 3 and sets A_ 3 = c ( abbb \u2192 abcb ) . In the 3 - rd test case Koa: selects position 1 and sets A_ 1 = t ( abc \u2192tbc ) . selects position 2 and sets A_ 2 = s ( tbc \u2192 tsc ) . selects position 3 and sets A_ 3 = r ( tsc\u2192 tsr ) .",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1383C"
  },
  {
    "title": "String Transformation 1",
    "url": "https://codeforces.com/problemset/problem/1383/A",
    "history": "Note that the only difference between String Transformation 1 and String Transformation 2 is in the move Koa does. In this version the letter y Koa selects must be strictly greater alphabetically than x ( read statement for better understanding) . You can make hacks in these problems independently. Koa the Koala has two strings A and B of the same length n ( | A| = | B| = n ) consisting of the first 20 lowercase English alphabet letters ( ie. from a to t) . In one move Koa: selects some subset of positions p_ 1, p_ 2, . . . , p_ k ( k \u2265 1; 1 \u2264 p_ i \u2264 n; p_ i = \u0338 p_ j if i = \u0338 j ) of A such that A_ p_ 1 = A_ p_ 2 = . . . = A_ p_ k = x ( ie. all letters on this positions are equal to some letter x ) . selects a letter y ( from the first 20 lowercase letters in English alphabet) such that y> x ( ie. letter y is strictly greater alphabetically than x ) . sets each letter in positions p_ 1, p_ 2, . . . , p_ k to letter y . More formally: for each i ( 1 \u2264 i \u2264 k ) Koa sets A_ p_ i = y . Note that you can only modify letters in string A . Koa wants to know the smallest number of moves she has to do to make strings equal to each other ( A = B ) or to determine that there is no way to make them equal. Help her!",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 10 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of strings A and B . The second line of each test case contains string A ( | A| = n ) . The third line of each test case contains string B ( | B| = n ) . Both strings consists of the first 20 lowercase English alphabet letters ( ie. from a to t) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case: Print on a single line the smallest number of moves she has to do to make strings equal to each other ( A = B ) or - 1 if there is no way to make them equal.",
    "note": "In the 1 - st test case Koa: selects positions 1 and 2 and sets A_ 1 = A_ 2 = b ( aab \u2192bbb ) . selects positions 2 and 3 and sets A_ 2 = A_ 3 = c ( bbb\u2192 bcc ) . In the 2 - nd test case Koa has no way to make string A equal B . In the 3 - rd test case Koa: selects position 1 and sets A_ 1 = t ( abc \u2192tbc ) . selects position 2 and sets A_ 2 = s ( tbc \u2192 tsc ) . selects position 3 and sets A_ 3 = r ( tsc\u2192 tsr ) .",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "strings",
      "trees",
      "two pointers"
    ],
    "id": "1383A"
  },
  {
    "title": "Tree Modification",
    "url": "https://codeforces.com/problemset/problem/1375/G",
    "history": "You are given a tree with n vertices. You are allowed to modify the structure of the tree through the following multi- step operation: Choose three vertices a , b , and c such that b is adjacent to both a and c . For every vertex d other than b that is adjacent to a , remove the edge connecting d and a and add the edge connecting d and c . Delete the edge connecting a and b and add the edge connecting a and c . As an example, consider the following tree: The following diagram illustrates the sequence of steps that happen when we apply an operation to vertices 2 , 4 , and 5 : It can be proven that after each operation, the resulting graph is still a tree. Find the minimum number of operations that must be performed to transform the tree into a star. A star is a tree with one vertex of degree n - 1 , called its center, and n - 1 vertices of degree 1 .",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The i - th of the following n - 1 lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i ) denoting that there exists an edge connecting vertices u_ i and v_ i . It is guaranteed that the given edges form a tree.",
    "output": "Print a single integer \u2014 the minimum number of operations needed to transform the tree into a star. It can be proven that under the given constraints, it is always possible to transform the tree into a star using at most 10^ 18 operations.",
    "note": "The first test case corresponds to the tree shown in the statement. As we have seen before, we can transform the tree into a star with center at vertex 5 by applying a single operation to vertices 2 , 4 , and 5 . In the second test case, the given tree is already a star with the center at vertex 4 , so no operations have to be performed.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "graph matchings",
      "graphs",
      "trees"
    ],
    "id": "1375G"
  },
  {
    "title": "The Hidden Pair (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1370/F2",
    "history": "Note that the only difference between the easy and hard version is the constraint on the number of queries. You can make hacks only if all versions of the problem are solved. This is an interactive problem. You are given a tree consisting of n nodes numbered with integers from 1 to n . Ayush and Ashish chose two secret distinct nodes in the tree. You need to find out both the nodes. You can make the following query: Provide a list of nodes and you will receive a node from that list whose sum of distances to both the hidden nodes is minimal ( if there are multiple such nodes in the list, you will receive any one of them) . You will also get the sum of distances of that node to the hidden nodes. Recall that a tree is a connected graph without cycles. The distance between two nodes is defined as the number of edges in the simple path between them. More formally, let' s define two hidden nodes as s and f . In one query you can provide the set of nodes { a_ 1, a_ 2, . . . , a_ c} of the tree. As a result, you will get two numbers a_ i and dist( a_ i, s) + dist( a_ i, f) . The node a_ i is any node from the provided set, for which the number dist( a_ i, s) + dist( a_ i, f) is minimal. You can ask no more than 11 queries. InteractionTo ask a query print a single line: In the beginning print \" ? c \" ( without quotes) where c ( 1 \u2264 c \u2264 n) denotes the number of nodes being queried, followed by c distinct integers in the range [ 1, n] \u2014 the indices of nodes from the list. For each query, you will receive two integers x , d \u2014 the node ( among the queried nodes) with the minimum sum of distances to the hidden nodes and the sum of distances from that node to the hidden nodes. If the subset of nodes queried is invalid or you exceeded the number of queries then you will get x = d = - 1 . In this case, you should terminate the program immediately. When you have guessed the hidden nodes, print a single line \" ! \" ( without quotes) , followed by two integers in the range [ 1, n] \u2014 the hidden nodes. You can output the hidden nodes in any order. After this, you should read a string. If you guess the nodes correctly, you will receive the string \" Correct\" . In this case, you should continue solving the remaining test cases or terminate the program, if all test cases were solved. Otherwise, you will receive the string \" Incorrect\" . In this case, you should terminate the program immediately. Guessing the hidden nodes does not count towards the number of queries asked. The interactor is not adaptive. The hidden nodes do not change with queries. Do not forget to read the string \" Correct\" / \" Incorrect\" after guessing the hidden nodes. You need to solve each test case before receiving the input for the next test case. The limit of 11 queries applies to each test case and not to the entire input. After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. HacksTo hack the solution, use the following test format: The first line should contain a single integer t ( 1 \u2264 t \u2264 10) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case should contain a single integer n ( 2 \u2264 n \u2264 1000) \u2014 the number of nodes in the tree. The second line should contain two distinct integers in the range [ 1, n] \u2014 the hidden nodes. The next n - 1 lines should contain two integers u , v ( 1 \u2264 u, v \u2264 n, u v) \u2014 the edges of the tree.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10) \u2014 the number of test cases. Please note, how the interaction process is organized. The first line of each test case consists of a single integer n ( 2 \u2264 n \u2264 1000) \u2014 the number of nodes in the tree. The next n - 1 lines consist of two integers u , v ( 1 \u2264 u, v \u2264 n, u v) \u2014 the edges of the tree.",
    "output": "",
    "note": "The tree from the first test is shown below, and the hidden nodes are 1 and 3 .",
    "topics": [
      "binary search",
      "dfs and similar",
      "graphs",
      "interactive",
      "shortest paths",
      "trees"
    ],
    "id": "1370F2"
  },
  {
    "title": "The Hidden Pair (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1370/F1",
    "history": "Note that the only difference between the easy and hard version is the constraint on the number of queries. You can make hacks only if all versions of the problem are solved. This is an interactive problem. You are given a tree consisting of n nodes numbered with integers from 1 to n . Ayush and Ashish chose two secret distinct nodes in the tree. You need to find out both the nodes. You can make the following query: Provide a list of nodes and you will receive a node from that list whose sum of distances to both the hidden nodes is minimal ( if there are multiple such nodes in the list, you will receive any one of them) . You will also get the sum of distances of that node to the hidden nodes. Recall that a tree is a connected graph without cycles. The distance between two nodes is defined as the number of edges in the simple path between them. More formally, let' s define two hidden nodes as s and f . In one query you can provide the set of nodes { a_ 1, a_ 2, . . . , a_ c} of the tree. As a result, you will get two numbers a_ i and dist( a_ i, s) + dist( a_ i, f) . The node a_ i is any node from the provided set, for which the number dist( a_ i, s) + dist( a_ i, f) is minimal. You can ask no more than 14 queries. InteractionTo ask a query print a single line: In the beginning print \" ? c \" ( without quotes) where c ( 1 \u2264 c \u2264 n) denotes the number of nodes being queried, followed by c distinct integers in the range [ 1, n] \u2014 the indices of nodes from the list. For each query, you will receive two integers x , d \u2014 the node ( among the queried nodes) with the minimum sum of distances to the hidden nodes and the sum of distances from that node to the hidden nodes. If the subset of nodes queried is invalid or you exceeded the number of queries then you will get x = d = - 1 . In this case, you should terminate the program immediately. When you have guessed the hidden nodes, print a single line \" ! \" ( without quotes) , followed by two integers in the range [ 1, n] \u2014 the hidden nodes. You can output the hidden nodes in any order. After this, you should read a string. If you guess the nodes correctly, you will receive the string \" Correct\" . In this case, you should continue solving the remaining test cases or terminate the program, if all test cases were solved. Otherwise, you will receive the string \" Incorrect\" . In this case, you should terminate the program immediately. Guessing the hidden nodes does not count towards the number of queries asked. The interactor is not adaptive. The hidden nodes do not change with queries. Do not forget to read the string \" Correct\" / \" Incorrect\" after guessing the hidden nodes. You need to solve each test case before receiving the input for the next test case. The limit of 14 queries applies to each test case and not to the entire input. After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. HacksTo hack the solution, use the following test format: The first line should contain a single integer t ( 1 \u2264 t \u2264 10) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case should contain a single integer n ( 2 \u2264 n \u2264 1000) \u2014 the number of nodes in the tree. The second line should contain two distinct integers in the range [ 1, n] \u2014 the hidden nodes. The next n - 1 lines should contain two integers u , v ( 1 \u2264 u, v \u2264 n, u v) \u2014 the edges of the tree.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10) \u2014 the number of test cases. Please note, how the interaction process is organized. The first line of each test case consists of a single integer n ( 2 \u2264 n \u2264 1000) \u2014 the number of nodes in the tree. The next n - 1 lines consist of two integers u , v ( 1 \u2264 u, v \u2264 n, u v) \u2014 the edges of the tree.",
    "output": "",
    "note": "The tree from the first test is shown below, and the hidden nodes are 1 and 3 .",
    "topics": [
      "binary search",
      "dfs and similar",
      "graphs",
      "interactive",
      "shortest paths",
      "trees"
    ],
    "id": "1370F1"
  },
  {
    "title": "TediousLee",
    "url": "https://codeforces.com/problemset/problem/1369/D",
    "history": "Lee tried so hard to make a good div. 2 D problem to balance his recent contest, but it still doesn' t feel good at all. Lee invented it so tediously slow that he managed to develop a phobia about div. 2 D problem setting instead. And now he is hiding behind the bushes. . . Let' s define a Rooted Dead Bush ( RDB) of level n as a rooted tree constructed as described below. A rooted dead bush of level 1 is a single vertex. To construct an RDB of level i we, at first, construct an RDB of level i- 1 , then for each vertex u : if u has no children then we will add a single child to it; if u has one child then we will add two children to it; if u has more than one child, then we will skip it. Rooted Dead Bushes of level 1 , 2 and 3 . Let' s define a claw as a rooted tree with four vertices: one root vertex ( called also as center) with three children. It looks like a claw: The center of the claw is the vertex with label 1 . Lee has a Rooted Dead Bush of level n . Initially, all vertices of his RDB are green. In one move, he can choose a claw in his RDB, if all vertices in the claw are green and all vertices of the claw are children of its center, then he colors the claw' s vertices in yellow. He' d like to know the maximum number of yellow vertices he can achieve. Since the answer might be very large, print it modulo 10^ 9+ 7 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Next t lines contain test cases \u2014 one per line. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 6 ) \u2014 the level of Lee' s RDB.",
    "output": "For each test case, print a single integer \u2014 the maximum number of yellow vertices Lee can make modulo 10^ 9 + 7 .",
    "note": "It' s easy to see that the answer for RDB of level 1 or 2 is 0 . The answer for RDB of level 3 is 4 since there is only one claw we can choose: { 1, 2, 3, 4} . The answer for RDB of level 4 is 4 since we can choose either single claw { 1, 3, 2, 4} or single claw { 2, 7, 5, 6} . There are no other claws in the RDB of level 4 ( for example, we can' t choose { 2, 1, 7, 6} , since 1 is not a child of center vertex 2 ) . Rooted Dead Bush of level 4.",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "math",
      "trees"
    ],
    "id": "1369D"
  },
  {
    "title": "Shifting Dominoes",
    "url": "https://codeforces.com/problemset/problem/1368/G",
    "history": "Bill likes to play with dominoes. He took an n \u00d7 m board divided into equal square cells, and covered it with dominoes. Each domino covers two adjacent cells of the board either horizontally or vertically, and each cell is covered exactly once with a half of one domino ( that is, there are no uncovered cells, and no two dominoes cover the same cell twice) . After that Bill decided to play with the covered board and share some photos of it on social media. First, he removes exactly one domino from the board, freeing two of the cells. Next, he moves dominoes around. A domino can only be moved along the line parallel to its longer side. A move in the chosen direction is possible if the next cell in this direction is currently free. Bill doesn' t want to lose track of what the original tiling looks like, so he makes sure that at any point each domino shares at least one cell with its original position. After removing a domino and making several ( possibly, zero) moves Bill takes a photo of the board and posts it. However, with the amount of filters Bill is using, domino borders are not visible, so only the two free cells of the board can be identified. When the photo is posted, Bill reverts the board to its original state and starts the process again. Bill wants to post as many photos as possible, but he will not post any photo twice. How many distinct photos can he take? Recall that photos are different if the pairs of free cells in the photos are different.",
    "input": "The first line contains two positive integers n and m ( nm \u2264 2 \u00b7 10^ 5 ) \u2014 height and width of the board respectively. The next n lines describe the tiling of the board, row by row from top to bottom. Each of these lines contains m characters, describing the cells in the corresponding row left to right. Each character is one of U, D, L, or R, meaning that the cell is covered with a top, bottom, left, or right half of a domino respectively. It is guaranteed that the described tiling is valid, that is, each half- domino has a counterpart in the relevant location. In particular, since tiling is possible, the number of cells in the board is even.",
    "output": "Print a single integer \u2014 the number of distinct photos Bill can take.",
    "note": "In the first sample case, no moves are possible after removing any domino, thus there are four distinct photos. In the second sample case, four photos are possible after removing the leftmost domino by independently moving/ not moving the remaining two dominoes. Two more different photos are obtained by removing one of the dominoes on the right.",
    "topics": [
      "data structures",
      "geometry",
      "graphs",
      "trees"
    ],
    "id": "1368G"
  },
  {
    "title": "Ski Accidents",
    "url": "https://codeforces.com/problemset/problem/1368/E",
    "history": "Arthur owns a ski resort on a mountain. There are n landing spots on the mountain numbered from 1 to n from the top to the foot of the mountain. The spots are connected with one- directional ski tracks. All tracks go towards the foot of the mountain, so there are no directed cycles formed by the tracks. There are at most two tracks leaving each spot, but many tracks may enter the same spot. A skier can start skiing from one spot and stop in another spot if there is a sequence of tracks that lead from the starting spot and end in the ending spot. Unfortunately, recently there were many accidents, because the structure of the resort allows a skier to go through dangerous paths, by reaching high speed and endangering himself and the other customers. Here, a path is called dangerous, if it consists of at least two tracks. Arthur wants to secure his customers by closing some of the spots in a way that there are no dangerous paths in the resort. When a spot is closed, all tracks entering and leaving that spot become unusable. Formally, after closing some of the spots, there should not be a path that consists of two or more tracks. Arthur doesn' t want to close too many spots. He will be happy to find any way to close at most 4/ 7n spots so that the remaining part is safe. Help him find any suitable way to do so.",
    "input": "The first line contains a single positive integer T \u2014 the number of test cases. T test case description follows. The first line of each description contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of landing spots and tracks respectively. The following m lines describe the tracks. Each of these lines contains two integers x and y ( 1 \u2264 x < y \u2264 n ) \u2014 indices of the starting and finishing spots for the respective track. It is guaranteed that at most two tracks start at each spot. There may be tracks in which starting and finishing spots both coincide. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer k ( 0 \u2264 k \u22644/ 7n ) \u2014 the number of spots to be closed. In the next line, print k distinct integers \u2014 indices of all spots to be closed, in any order. If there are several answers, you may output any of them. Note that you don' t have to minimize k . It can be shown that a suitable answer always exists.",
    "note": "In the first sample case, closing any two spots is suitable. In the second sample case, closing only the spot 1 is also suitable.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "1368E"
  },
  {
    "title": "Necklace Assembly",
    "url": "https://codeforces.com/problemset/problem/1367/E",
    "history": "The store sells n beads. The color of each bead is described by a lowercase letter of the English alphabet ( \" a\" \u2013\" z\" ) . You want to buy some beads to assemble a necklace from them. A necklace is a set of beads connected in a circle. For example, if the store sells beads \" a\" , \" b\" , \" c\" , \" a\" , \" c\" , \" c\" , then you can assemble the following necklaces ( these are not all possible options) : And the following necklaces cannot be assembled from beads sold in the store: The first necklace cannot be assembled because it has three beads \" a\" ( of the two available) . The second necklace cannot be assembled because it contains a bead \" d\" , which is not sold in the store. We call a necklace k - beautiful if, when it is turned clockwise by k beads, the necklace remains unchanged. For example, here is a sequence of three turns of a necklace. As you can see, this necklace is, for example, 3 - beautiful, 6 - beautiful, 9 - beautiful, and so on, but it is not 1 - beautiful or 2 - beautiful. In particular, a necklace of length 1 is k - beautiful for any integer k . A necklace that consists of beads of the same color is also beautiful for any k . You are given the integers n and k , and also the string s containing n lowercase letters of the English alphabet \u2014 each letter defines a bead in the store. You can buy any subset of beads and connect them in any order. Find the maximum length of a k - beautiful necklace you can assemble.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases in the test. Then t test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 n, k \u2264 2000 ) . The second line of each test case contains the string s containing n lowercase English letters \u2014 the beads in the store. It is guaranteed that the sum of n for all test cases does not exceed 2000 .",
    "output": "Output t answers to the test cases. Each answer is a positive integer \u2014 the maximum length of the k - beautiful necklace you can assemble.",
    "note": "The first test case is explained in the statement. In the second test case, a 6 - beautiful necklace can be assembled from all the letters. In the third test case, a 1000 - beautiful necklace can be assembled, for example, from beads \" abzyo\" .",
    "topics": [
      "brute force",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "number theory"
    ],
    "id": "1367E"
  },
  {
    "title": "Jog Around The Graph",
    "url": "https://codeforces.com/problemset/problem/1366/F",
    "history": "You are given a simple weighted connected undirected graph, consisting of n vertices and m edges. A path in the graph of length k is a sequence of k+ 1 vertices v_ 1, v_ 2, . . . , v_ k+ 1 such that for each i ( 1 \u2264 i \u2264 k) the edge ( v_ i, v_ i+ 1) is present in the graph. A path from some vertex v also has vertex v_ 1= v . Note that edges and vertices are allowed to be included in the path multiple times. The weight of the path is the total weight of edges in it. For each i from 1 to q consider a path from vertex 1 of length i of the maximum weight. What is the sum of weights of these q paths? Answer can be quite large, so print it modulo 10^ 9+ 7 .",
    "input": "The first line contains a three integers n , m , q ( 2 \u2264 n \u2264 2000 ; n - 1 \u2264 m \u2264 2000 ; m \u2264 q \u2264 10^ 9 ) \u2014 the number of vertices in the graph, the number of edges in the graph and the number of lengths that should be included in the answer. Each of the next m lines contains a description of an edge: three integers v , u , w ( 1 \u2264 v, u \u2264 n ; 1 \u2264 w \u2264 10^ 6 ) \u2014 two vertices v and u are connected by an undirected edge with weight w . The graph contains no loops and no multiple edges. It is guaranteed that the given edges form a connected graph.",
    "output": "Print a single integer \u2014 the sum of the weights of the paths from vertex 1 of maximum weights of lengths 1, 2, . . . , q modulo 10^ 9+ 7 .",
    "note": "Here is the graph for the first example: Some maximum weight paths are: length 1 : edges ( 1, 7) \u2014 weight 3 ; length 2 : edges ( 1, 2) , ( 2, 3) \u2014 weight 1+ 10= 11 ; length 3 : edges ( 1, 5) , ( 5, 6) , ( 6, 4) \u2014 weight 2+ 7+ 15= 24 ; length 4 : edges ( 1, 5) , ( 5, 6) , ( 6, 4) , ( 6, 4) \u2014 weight 2+ 7+ 15+ 15= 39 ; . . . So the answer is the sum of 25 terms: 3+ 11+ 24+ 39+ . . . In the second example the maximum weight paths have weights 4 , 8 , 12 , 16 and 20 .",
    "topics": [
      "binary search",
      "dp",
      "geometry",
      "graphs"
    ],
    "id": "1366F"
  },
  {
    "title": "Solve The Maze",
    "url": "https://codeforces.com/problemset/problem/1365/D",
    "history": "Vivek has encountered a problem. He has a maze that can be represented as an n \u00d7 m grid. Each of the grid cells may represent the following: Empty \u2014 ' . ' Wall \u2014 ' # ' Good person \u2014 ' G' Bad person \u2014 ' B' The only escape from the maze is at cell ( n, m) . A person can move to a cell only if it shares a side with their current cell and does not contain a wall. Vivek wants to block some of the empty cells by replacing them with walls in such a way, that all the good people are able to escape, while none of the bad people are able to. A cell that initially contains ' G' or ' B' cannot be blocked and can be travelled through. Help him determine if there exists a way to replace some ( zero or more) empty cells with walls to satisfy the above conditions. It is guaranteed that the cell ( n, m) is empty. Vivek can also block this cell.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n , m ( 1 \u2264 n, m \u2264 50) \u2014 the number of rows and columns in the maze. Each of the next n lines contain m characters. They describe the layout of the maze. If a character on a line equals ' . ' , the corresponding cell is empty. If it equals ' # ' , the cell has a wall. ' G' corresponds to a good person and ' B' corresponds to a bad person.",
    "output": "For each test case, print \" Yes\" if there exists a way to replace some empty cells with walls to satisfy the given conditions. Otherwise print \" No\" You may print every letter in any case ( upper or lower) .",
    "note": "For the first and second test cases, all conditions are already satisfied. For the third test case, there is only one empty cell ( 2, 2) , and if it is replaced with a wall then the good person at ( 1, 2) will not be able to escape. For the fourth test case, the good person at ( 1, 1) cannot escape. For the fifth test case, Vivek can block the cells ( 2, 3) and ( 2, 2) . For the last test case, Vivek can block the destination cell ( 2, 2) .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1365D"
  },
  {
    "title": "Ehab's Last Corollary",
    "url": "https://codeforces.com/problemset/problem/1364/D",
    "history": "Given a connected undirected graph with n vertices and an integer k , you have to either: either find an independent set that has exactly \u2308k/ 2\u2309 vertices. or find a simple cycle of length at most k . An independent set is a set of vertices such that no two of them are connected by an edge. A simple cycle is a cycle that doesn' t contain any vertex twice. I have a proof that for any input you can always solve at least one of these problems, but it' s left as an exercise for the reader.",
    "input": "The first line contains three integers n , m , and k ( 3 \u2264 k \u2264 n \u2264 10^ 5 , n- 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and edges in the graph, and the parameter k from the statement. Each of the next m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) that mean there' s an edge between vertices u and v . It' s guaranteed that the graph is connected and doesn' t contain any self- loops or multiple edges.",
    "output": "If you choose to solve the first problem, then on the first line print 1 , followed by a line containing \u2308k/ 2\u2309 distinct integers not exceeding n , the vertices in the desired independent set. If you, however, choose to solve the second problem, then on the first line print 2 , followed by a line containing one integer, c , representing the length of the found cycle, followed by a line containing c distinct integers not exceeding n , the vertices in the desired cycle, in the order they appear in the cycle.",
    "note": "In the first sample: Notice that printing the independent set { 2, 4} is also OK, but printing the cycle 1- 2- 3- 4 isn' t, because its length must be at most 3 . In the second sample: Notice that printing the independent set { 1, 3} or printing the cycle 2- 1- 4 is also OK. In the third sample: In the fourth sample:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1364D"
  },
  {
    "title": "James and the Chase",
    "url": "https://codeforces.com/problemset/problem/1361/E",
    "history": "James Bond has a new plan for catching his enemy. There are some cities and directed roads between them, such that it is possible to travel between any two cities using these roads. When the enemy appears in some city, Bond knows her next destination but has no idea which path she will choose to move there. The city a is called interesting, if for each city b , there is exactly one simple path from a to b . By a simple path, we understand a sequence of distinct cities, such that for every two neighboring cities, there exists a directed road from the first to the second city. Bond' s enemy is the mistress of escapes, so only the chase started in an interesting city gives the possibility of catching her. James wants to arrange his people in such cities. However, if there are not enough interesting cities, the whole action doesn' t make sense since Bond' s people may wait too long for the enemy. You are responsible for finding all the interesting cities or saying that there is not enough of them. By not enough, James means strictly less than 20% of all cities.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 2 000 ) \u2014 the number of test cases. Each test case is described as follows: The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cities and roads between them. Each of the following m lines contains two integers u , v ( u = \u0338 v ; 1 \u2264 u, v \u2264 n ) , which denote that there is a directed road from u to v . You can assume that between each ordered pair of cities there is at most one road. The sum of n over all test cases doesn' t exceed 10^ 5 , and the sum of m doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "If strictly less than 20% of all cities are interesting, print - 1 . Otherwise, let k be the number of interesting cities. Print k distinct integers in increasing order \u2014 the indices of interesting cities.",
    "note": "In all drawings, if a city is colored green, then it is interesting; otherwise, it is colored red. In the first sample, each city is interesting. In the second sample, no city is interesting. In the third sample, cities 1 , 2 , 3 and 5 are interesting. In the last sample, only the city 1 is interesting. It is strictly less than 20% of all cities, so the answer is - 1 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "probabilities",
      "trees"
    ],
    "id": "1361E"
  },
  {
    "title": "Johnny and Megan's Necklace",
    "url": "https://codeforces.com/problemset/problem/1361/C",
    "history": "Johnny' s younger sister Megan had a birthday recently. Her brother has bought her a box signed as \" Your beautiful necklace \u2014 do it yourself! \" . It contains many necklace parts and some magic glue. The necklace part is a chain connecting two pearls. Color of each pearl can be defined by a non- negative integer. The magic glue allows Megan to merge two pearls ( possibly from the same necklace part) into one. The beauty of a connection of pearls in colors u and v is defined as follows: let 2^ k be the greatest power of two dividing u \u2295 v \u2014 exclusive or of u and v . Then the beauty equals k . If u = v , you may assume that beauty is equal to 20 . Each pearl can be combined with another at most once. Merging two parts of a necklace connects them. Using the glue multiple times, Megan can finally build the necklace, which is a cycle made from connected necklace parts ( so every pearl in the necklace is combined with precisely one other pearl in it) . The beauty of such a necklace is the minimum beauty of a single connection in it. The girl wants to use all available necklace parts to build exactly one necklace consisting of all of them with the largest possible beauty. Help her!",
    "input": "The first line contains n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5) \u2014 the number of necklace parts in the box. Each of the next n lines contains two integers a and b ( 0 \u2264 a, b < 2^ 20) , which denote colors of pearls presented in the necklace parts. Pearls in the i - th line have indices 2i - 1 and 2i respectively.",
    "output": "The first line should contain a single integer b denoting the maximum possible beauty of a necklace built from all given parts. The following line should contain 2n distinct integers p_ i ( 1 \u2264 p_ i \u2264 2n) \u2014 the indices of initial pearls in the order in which they appear on a cycle. Indices of pearls belonging to the same necklace part have to appear at neighboring positions in this permutation ( so 1 4 3 2 is not a valid output, whereas 2 1 4 3 and 4 3 1 2 are) . If there are many possible answers, you can print any.",
    "note": "In the first example the following pairs of pearls are combined: ( 7, 9) , ( 10, 5) , ( 6, 1) , ( 2, 3) and ( 4, 8) . The beauties of connections equal correspondingly: 3 , 3 , 3 , 20 , 20 . The following drawing shows this construction.",
    "topics": [
      "binary search",
      "bitmasks",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1361C"
  },
  {
    "title": "Johnny and Contribution",
    "url": "https://codeforces.com/problemset/problem/1361/A",
    "history": "Today Johnny wants to increase his contribution. His plan assumes writing n blogs. One blog covers one topic, but one topic can be covered by many blogs. Moreover, some blogs have references to each other. Each pair of blogs that are connected by a reference has to cover different topics because otherwise, the readers can notice that they are split just for more contribution. Set of blogs and bidirectional references between some pairs of them is called blogs network. There are n different topics, numbered from 1 to n sorted by Johnny' s knowledge. The structure of the blogs network is already prepared. Now Johnny has to write the blogs in some order. He is lazy, so each time before writing a blog, he looks at it' s already written neighbors ( the blogs referenced to current one) and chooses the topic with the smallest number which is not covered by neighbors. It' s easy to see that this strategy will always allow him to choose a topic because there are at most n - 1 neighbors. For example, if already written neighbors of the current blog have topics number 1 , 3 , 1 , 5 , and 2 , Johnny will choose the topic number 4 for the current blog, because topics number 1 , 2 and 3 are already covered by neighbors and topic number 4 isn' t covered. As a good friend, you have done some research and predicted the best topic for each blog. Can you tell Johnny, in which order he has to write the blogs, so that his strategy produces the topic assignment chosen by you?",
    "input": "The first line contains two integers n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5) and m ( 0 \u2264 m \u2264 5 \u00b7 10^ 5) \u2014 the number of blogs and references, respectively. Each of the following m lines contains two integers a and b ( a = \u0338 b ; 1 \u2264 a, b \u2264 n ) , which mean that there is a reference between blogs a and b . It' s guaranteed that the graph doesn' t contain multiple edges. The last line contains n integers t_ 1, t_ 2, . . . , t_ n , i - th of them denotes desired topic number of the i - th blog ( 1 \u2264 t_ i \u2264 n ) .",
    "output": "If the solution does not exist, then write - 1 . Otherwise, output n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n) , which describe the numbers of blogs in order which Johnny should write them. If there are multiple answers, print any.",
    "note": "In the first example, Johnny starts with writing blog number 2 , there are no already written neighbors yet, so it receives the first topic. Later he writes blog number 1 , it has reference to the already written second blog, so it receives the second topic. In the end, he writes blog number 3 , it has references to blogs number 1 and 2 so it receives the third topic. Second example: There does not exist any permutation fulfilling given conditions. Third example: First Johnny writes blog 2 , it receives the topic 1 . Then he writes blog 5 , it receives the topic 1 too because it doesn' t have reference to single already written blog 2 . Then he writes blog number 1 , it has reference to blog number 2 with topic 1 , so it receives the topic 2 . Then he writes blog number 3 which has reference to blog 2 , so it receives the topic 2 . Then he ends with writing blog number 4 which has reference to blog 5 and receives the topic 2 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1361A"
  },
  {
    "title": "Polygon",
    "url": "https://codeforces.com/problemset/problem/1360/E",
    "history": "Polygon is not only the best platform for developing problems but also a square matrix with side n , initially filled with the character 0. On the polygon, military training was held. The soldiers placed a cannon above each cell in the first row and a cannon to the left of each cell in the first column. Thus, exactly 2n cannons were placed. Initial polygon for n= 4 . Cannons shoot character 1. At any moment of time, no more than one cannon is shooting. When a 1 flies out of a cannon, it flies forward ( in the direction of the shot) until it collides with a polygon border or another 1. After that, it takes the cell in which it was before the collision and remains there. Take a look at the examples for better understanding. More formally: if a cannon stands in the row i , to the left of the first column, and shoots with a 1, then the 1 starts its flight from the cell ( i, 1 ) and ends in some cell ( i, j ) ; if a cannon stands in the column j , above the first row, and shoots with a 1, then the 1 starts its flight from the cell ( 1, j ) and ends in some cell ( i, j ) . For example, consider the following sequence of shots: 1. Shoot the cannon in the row 2 . 2. Shoot the cannon in the row 2 . 3. Shoot the cannon in column 3 . You have a report from the military training on your desk. This report is a square matrix with side length n consisting of 0 and 1. You wonder if the training actually happened. In other words, is there a sequence of shots such that, after the training, you get the given matrix? Each cannon can make an arbitrary number of shots. Before the training, each cell of the polygon contains 0.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. Each test case starts with a line containing an integer n ( 1 \u2264 n \u2264 50 ) \u2014 the size of the polygon. This is followed by n lines of length n , consisting of 0 and 1 \u2014 the polygon matrix after the training. The total area of the matrices in all test cases in one test does not exceed 10^ 5 .",
    "output": "For each test case print: YES if there is a sequence of shots leading to a given matrix; NO if such a sequence does not exist. The letters in the words YES and NO can be printed in any case.",
    "note": "The first test case was explained in the statement. The answer to the second test case is NO, since a 1 in a cell ( 1, 1 ) flying out of any cannon would continue its flight further.",
    "topics": [
      "dp",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "1360E"
  },
  {
    "title": "Graph Coloring",
    "url": "https://codeforces.com/problemset/problem/1354/E",
    "history": "You are given an undirected graph without self- loops or multiple edges which consists of n vertices and m edges. Also you are given three integers n_ 1 , n_ 2 and n_ 3 . Can you label each vertex with one of three numbers 1, 2 or 3 in such way, that: Each vertex should be labeled by exactly one number 1, 2 or 3; The total number of vertices with label 1 should be equal to n_ 1 ; The total number of vertices with label 2 should be equal to n_ 2 ; The total number of vertices with label 3 should be equal to n_ 3 ; | col_ u - col_ v| = 1 for each edge ( u, v) , where col_ x is the label of vertex x . If there are multiple valid labelings, print any of them.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 5000 ; 0 \u2264 m \u2264 10^ 5 ) \u2014 the number of vertices and edges in the graph. The second line contains three integers n_ 1 , n_ 2 and n_ 3 ( 0 \u2264 n_ 1, n_ 2, n_ 3 \u2264 n ) \u2014 the number of labels 1, 2 and 3, respectively. It' s guaranteed that n_ 1 + n_ 2 + n_ 3 = n . Next m lines contan description of edges: the i - th line contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i = \u0338 v_ i ) \u2014 the vertices the i - th edge connects. It' s guaranteed that the graph doesn' t contain self- loops or multiple edges.",
    "output": "If valid labeling exists then print \" YES\" ( without quotes) in the first line. In the second line print string of length n consisting of 1, 2 and 3. The i - th letter should be equal to the label of the i - th vertex. If there is no valid labeling, print \" NO\" ( without quotes) .",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "1354E"
  },
  {
    "title": "Orac and Game of Life",
    "url": "https://codeforces.com/problemset/problem/1349/C",
    "history": "Please notice the unusual memory limit of this problem. Orac likes games. Recently he came up with the new game, \" Game of Life\" . You should play this game on a black and white grid with n rows and m columns. Each cell is either black or white. For each iteration of the game ( the initial iteration is 0 ) , the color of each cell will change under the following rules: If there are no adjacent cells with the same color as this cell on the current iteration, the color of it on the next iteration will be the same. Otherwise, the color of the cell on the next iteration will be different. Two cells are adjacent if they have a mutual edge. Now Orac has set an initial situation, and he wants to know for the cell ( i, j) ( in i - th row and j - th column) , what will be its color at the iteration p . He may ask you these questions several times.",
    "input": "The first line contains three integers n, m, t ( 1\u2264 n, m\u2264 1000, 1\u2264 t\u2264 100 000) , representing the number of rows, columns, and the number of Orac queries. Each of the following n lines contains a binary string of length m , the j - th character in i - th line represents the initial color of cell ( i, j) . ' 0' stands for white, ' 1' stands for black. Each of the following t lines contains three integers i, j, p ( 1\u2264 i\u2264 n, 1\u2264 j\u2264 m, 1\u2264 p\u2264 10^ 18) , representing a query from Orac.",
    "output": "Print t lines, in i - th line you should print the answer to the i - th query by Orac. If the color of this cell is black, you should print ' 1' ; otherwise, you should write ' 0' .",
    "note": "For the first example, the picture above shows the initial situation and the color of cells at the iteration 1 , 2 , and 3 . We can see that the color of ( 1, 1) at the iteration 1 is black, the color of ( 2, 2) at the iteration 2 is black, and the color of ( 3, 3) at the iteration 3 is also black. For the second example, you can prove that the cells will never change their colors.",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "1349C"
  },
  {
    "title": "Phoenix and Memory",
    "url": "https://codeforces.com/problemset/problem/1348/F",
    "history": "Phoenix is trying to take a photo of his n friends with labels 1, 2, . . . , n who are lined up in a row in a special order. But before he can take the photo, his friends get distracted by a duck and mess up their order. Now, Phoenix must restore the order but he doesn' t remember completely! He only remembers that the i - th friend from the left had a label between a_ i and b_ i inclusive. Does there exist a unique way to order his friends based of his memory?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of friends. The i - th of the next n lines contain two integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 b_ i \u2264 n ) \u2014 Phoenix' s memory of the i - th position from the left. It is guaranteed that Phoenix' s memory is valid so there is at least one valid ordering.",
    "output": "If Phoenix can reorder his friends in a unique order, print YES followed by n integers \u2014 the i - th integer should be the label of the i - th friend from the left. Otherwise, print NO. Then, print any two distinct valid orderings on the following two lines. If are multiple solutions, print any.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1348F"
  },
  {
    "title": "Magic Tricks",
    "url": "https://codeforces.com/problemset/problem/1346/E",
    "history": "Masha is going to participate in a talent show conducted by the university she studies at. She wants to impress the audience with lots of different magic tricks! For one of her tricks, she uses n sponge balls, one of which is a special one. First, she arranges the balls in a row in such a way that the special ball is put on position k ( positions are numbered from 1 to n from left to right) . After that, she performs m swaps: during the i - th swap, she chooses the ball on position x_ i and the ball on position y_ i , and swaps them. Since Masha is a magician, she fakes some of her actions to trick the audience \u2014 when she starts performing a swap, she may fake it, so it is not performed ( but it looks like it is performed for the audience) . There are no constraints on which swaps Masha should fake or should actually perform \u2014 for example, she may fake all of the swaps, or even not fake anything at all. For the trick to work perfectly, the special ball should end up on a specific position \u2014 Masha has not decided yet, which position is perfect. Since faking swaps is difficult, for each position she wants to know the minimum number of swaps she has to fake so that the special ball ends up there. Unfortunately, Masha is a magician, neither a mathematician nor a programmer. So she needs your help in calculating what she wants!",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ) \u2014 the number of balls, the number of swaps and the initial position of the special ball, respectively. Then m lines follow, the i - th line contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ) denoting the i - th swap.",
    "output": "Print n integers. The i - th integer should be the minimum number of swaps Masha has to fake so the special ball ends up on position i ( or - 1 , if Masha cannot put the special ball there) .",
    "note": "",
    "topics": [
      "*special",
      "dp",
      "graphs"
    ],
    "id": "1346E"
  },
  {
    "title": "Constructing the Dungeon",
    "url": "https://codeforces.com/problemset/problem/1346/D",
    "history": "Polycarp is developing an RPG game where the main character fights monsters and searches for treasure in dungeons. Now Polycarp is making one of the dungeons the character can explore. The dungeon consists of n rooms connected by m two- way tunnels, and it is possible to reach every room from every other room using tunnels. The rooms are guarded by monsters ( the number of monsters in the i - th room is a_ i ) , and the tunnels contain gold coins ( the number of coins in the i - th tunnel is w_ i ) . The i - th two- way tunnel connects rooms v_ i and u_ i . Polycarp has already fixed the number of coins in each tunnel ( the values of w_ i are already known) , and now he tries to place the monsters in the rooms ( the values of a_ i are not known yet) . Polycarp wants to choose the number of monsters in each room in such a way that the following two conditions are met: the number of coins for the tunnel connecting the rooms x and y should be equal to the minimum of a_ x and a_ y . That is, for each tunnel i , w_ i = min ( a_ v_ i, a_ u_ i) ; the number of monsters in the dungeon is as small as possible. That is, the value of a_ 1 + a_ 2 + . . . + a_ n is minimum possible. Help Polycarp to choose the values a_ 1 , a_ 2 , . . . , a_ n , or tell him that it is impossible and he has to change something in his dungeon plan.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100000 ) \u2014 the number of test cases. Then the test cases follow. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 200000 ; n - 1 \u2264 m \u2264min( 200000, n( n- 1) / 2) ) \u2014 the number of rooms and tunnels in the dungeon, respectively. Then m lines follow, each line describing one of the tunnels in the dungeon. The i - th line contains three integers v_ i , u_ i and w_ i ( 1 \u2264 v_ i, u_ i \u2264 n ; v_ i u_ i ; 1 \u2264 w_ i \u2264 10^ 9 ) denoting a two- way tunnel that connects rooms v_ i and u_ i , and contains w_ i coins. The tunnel system is connected in each test case ( it is possible to reach every room from every other room using the tunnels) . Each pair of rooms is connected by at most one tunnel. The sum of n over all test cases does not exceed 200000 . Similarly, the sum of m over all test cases does not exceed 200000 .",
    "output": "For each test case, print the answer as follows: If it is impossible to find the values of a_ 1 , a_ 2 , . . . , a_ n satisfying all the constraints, print one single string NO on a separate line. Otherwise, print YES in the first line, and n integers a_ 1 , a_ 2 , . . . , a_ n in the second line. If there are multiple valid answers, print any of them.",
    "note": "",
    "topics": [
      "*special",
      "graphs",
      "greedy"
    ],
    "id": "1346D"
  },
  {
    "title": "Quantifier Question",
    "url": "https://codeforces.com/problemset/problem/1344/C",
    "history": "Logical quantifiers are very useful tools for expressing claims about a set. For this problem, let' s focus on the set of real numbers specifically. The set of real numbers includes zero and negatives. There are two kinds of quantifiers: universal ( \u2200 ) and existential ( \u2203 ) . You can read more about them here. The universal quantifier is used to make a claim that a statement holds for all real numbers. For example: \u2200 x, x< 100 is read as: for all real numbers x , x is less than 100 . This statement is false. \u2200 x, x> x- 1 is read as: for all real numbers x , x is greater than x- 1 . This statement is true. The existential quantifier is used to make a claim that there exists some real number for which the statement holds. For example: \u2203 x, x< 100 is read as: there exists a real number x such that x is less than 100 . This statement is true. \u2203 x, x> x- 1 is read as: there exists a real number x such that x is greater than x- 1 . This statement is true. Moreover, these quantifiers can be nested. For example: \u2200 x, \u2203 y, x< y is read as: for all real numbers x , there exists a real number y such that x is less than y . This statement is true since for every x , there exists y= x+ 1 . \u2203 y, \u2200 x, x< y is read as: there exists a real number y such that for all real numbers x , x is less than y . This statement is false because it claims that there is a maximum real number: a number y larger than every x . Note that the order of variables and quantifiers is important for the meaning and veracity of a statement. There are n variables x_ 1, x_ 2, . . . , x_ n , and you are given some formula of the form f( x_ 1, . . . , x_ n) : = ( x_ j_ 1< x_ k_ 1) ( x_ j_ 2< x_ k_ 2) \u22ef ( x_ j_ m< x_ k_ m) , where denotes logical AND. That is, f( x_ 1, . . . , x_ n) is true if every inequality x_ j_ i< x_ k_ i holds. Otherwise, if at least one inequality does not hold, then f( x_ 1, . . . , x_ n) is false. Your task is to assign quantifiers Q_ 1, . . . , Q_ n to either universal ( \u2200 ) or existential ( \u2203 ) so that the statement Q_ 1 x_ 1, Q_ 2 x_ 2, . . . , Q_ n x_ n, f( x_ 1, . . . , x_ n) is true, and the number of universal quantifiers is maximized, or determine that the statement is false for every possible assignment of quantifiers. Note that the order the variables appear in the statement is fixed. For example, if f( x_ 1, x_ 2) : = ( x_ 1< x_ 2) then you are not allowed to make x_ 2 appear first and use the statement \u2200 x_ 2, \u2203 x_ 1, x_ 1< x_ 2 . If you assign Q_ 1= \u2203 and Q_ 2= \u2200 , it will only be interpreted as \u2203 x_ 1, \u2200 x_ 2, x_ 1< x_ 2 .",
    "input": "The first line contains two integers n and m ( 2\u2264 n\u2264 2\u00b7 10^ 5 ; 1\u2264 m\u2264 2\u00b7 10^ 5 ) \u2014 the number of variables and the number of inequalities in the formula, respectively. The next m lines describe the formula. The i - th of these lines contains two integers j_ i , k_ i ( 1\u2264 j_ i, k_ i\u2264 n , j_ i k_ i ) .",
    "output": "If there is no assignment of quantifiers for which the statement is true, output a single integer - 1 . Otherwise, on the first line output an integer, the maximum possible number of universal quantifiers. On the next line, output a string of length n , where the i - th character is \" A\" if Q_ i should be a universal quantifier ( \u2200 ) , or \" E\" if Q_ i should be an existential quantifier ( \u2203 ) . All letters should be upper- case. If there are multiple solutions where the number of universal quantifiers is maximum, print any.",
    "note": "For the first test, the statement \u2200 x_ 1, \u2203 x_ 2, x_ 1< x_ 2 is true. Answers of \" EA\" and \" AA\" give false statements. The answer \" EE\" gives a true statement, but the number of universal quantifiers in this string is less than in our answer. For the second test, we can show that no assignment of quantifiers, for which the statement is true exists. For the third test, the statement \u2200 x_ 1, \u2200 x_ 2, \u2203 x_ 3, ( x_ 1< x_ 3) ( x_ 2< x_ 3) is true: We can set x_ 3= max{ x_ 1, x_ 2} + 1 .",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "math"
    ],
    "id": "1344C"
  },
  {
    "title": "Monopole Magnets",
    "url": "https://codeforces.com/problemset/problem/1344/B",
    "history": "A monopole magnet is a magnet that only has one pole, either north or south. They don' t actually exist since real magnets have two poles, but this is a programming contest problem, so we don' t care. There is an n\u00d7 m grid. Initially, you may place some north magnets and some south magnets into the cells. You are allowed to place as many magnets as you like, even multiple in the same cell. An operation is performed as follows. Choose a north magnet and a south magnet to activate. If they are in the same row or the same column and they occupy different cells, then the north magnet moves one unit closer to the south magnet. Otherwise, if they occupy the same cell or do not share a row or column, then nothing changes. Note that the south magnets are immovable. Each cell of the grid is colored black or white. Let' s consider ways to place magnets in the cells so that the following conditions are met. There is at least one south magnet in every row and every column. If a cell is colored black, then it is possible for a north magnet to occupy this cell after some sequence of operations from the initial placement. If a cell is colored white, then it is impossible for a north magnet to occupy this cell after some sequence of operations from the initial placement. Determine if it is possible to place magnets such that these conditions are met. If it is possible, find the minimum number of north magnets required ( there are no requirements on the number of south magnets) .",
    "input": "The first line contains two integers n and m ( 1\u2264 n, m\u2264 1000 ) \u2014 the number of rows and the number of columns, respectively. The next n lines describe the coloring. The i - th of these lines contains a string of length m , where the j - th character denotes the color of the cell in row i and column j . The characters \" # \" and \" . \" represent black and white, respectively. It is guaranteed, that the string will not contain any other characters.",
    "output": "Output a single integer, the minimum possible number of north magnets required. If there is no placement of magnets that satisfies all conditions, print a single integer - 1 .",
    "note": "In the first test, here is an example placement of magnets: In the second test, we can show that no required placement of magnets exists. Here are three example placements that fail to meet the requirements. The first example violates rule 3 since we can move the north magnet down onto a white square. The second example violates rule 2 since we cannot move the north magnet to the bottom- left black square by any sequence of operations. The third example violates rule 1 since there is no south magnet in the first column. In the third test, here is an example placement of magnets. We can show that there is no required placement of magnets with fewer north magnets. In the fourth test, we can show that no required placement of magnets exists. Here are two example placements that fail to meet the requirements. The first example violates rule 1 since there is no south magnet in the first row. The second example violates rules 1 and 3 since there is no south magnet in the second row and we can move the north magnet up one unit onto a white square. In the fifth test, we can put the south magnet in each cell and no north magnets. Because there are no black cells, it will be a correct placement.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1344B"
  },
  {
    "title": "Weights Distributing",
    "url": "https://codeforces.com/problemset/problem/1343/E",
    "history": "You are given an undirected unweighted graph consisting of n vertices and m edges ( which represents the map of Bertown) and the array of prices p of length m . It is guaranteed that there is a path between each pair of vertices ( districts) . Mike has planned a trip from the vertex ( district) a to the vertex ( district) b and then from the vertex ( district) b to the vertex ( district) c . He can visit the same district twice or more. But there is one issue: authorities of the city want to set a price for using the road so if someone goes along the road then he should pay the price corresponding to this road ( he pays each time he goes along the road) . The list of prices that will be used p is ready and they just want to distribute it between all roads in the town in such a way that each price from the array corresponds to exactly one road. You are a good friend of Mike ( and suddenly a mayor of Bertown) and want to help him to make his trip as cheap as possible. So, your task is to distribute prices between roads in such a way that if Mike chooses the optimal path then the price of the trip is the minimum possible. Note that you cannot rearrange prices after the start of the trip. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains five integers n, m, a, b and c ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n- 1 \u2264 m \u2264 min( n( n- 1) / 2, 2 \u00b7 10^ 5) , 1 \u2264 a, b, c \u2264 n ) \u2014 the number of vertices, the number of edges and districts in Mike' s trip. The second line of the test case contains m integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 10^ 9 ) , where p_ i is the i - th price from the array. The following m lines of the test case denote edges: edge i is represented by a pair of integers v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , u_ i v_ i ) , which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ( v_ i, u_ i ) there are no other pairs ( v_ i, u_ i ) or ( u_ i, v_ i ) in the array of edges, and for each pair ( v_ i, u_ i) the condition v_ i u_ i is satisfied. It is guaranteed that the given graph is connected. It is guaranteed that the sum of n ( as well as the sum of m ) does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 , \u2211 m \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum possible price of Mike' s trip if you distribute prices between edges optimally.",
    "note": "One of the possible solution to the first test case of the example: One of the possible solution to the second test case of the example:",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ],
    "id": "1343E"
  },
  {
    "title": "Nastya and Bees",
    "url": "https://codeforces.com/problemset/problem/1340/E",
    "history": "Unfortunately, a mistake was found in the proof of the author' s solution to this problem. Currently, we don' t know the absolutely correct solution. However, you can solve this task, but if your solution passes all the tests, it is not guaranteed to be correct. If your solution has passed all the tests and you are sure that it is correct, you can write to one of the contest authors about it. Surely you all read the book \" Alice in Wonderland\" . In this task, Nastya got to the country of Three strange Bees. The bees are strange because their honeycombs are pentagonal. Nastya got there illegally, so she wants bees not to catch her. Help the bees punish the intruder! This is an interactive problem. A beehive is a connected undirected graph where bees and Nastya can move along the edges. A graph satisfies two properties: The degree of any of its vertex is no more than 3 . For each edge, there exists a cycle of length not greater than 5 passing through this edge. There are three bees and Nastya. You play for bees. Firstly, you choose the vertices where you put the bees. Then Nastya chooses another vertex in which she will initially appear. One move is first moving the bees, then Nastya, in turn: For each of your bees, you can either move each one along some edge from the vertex they are currently staying or leave it in place. Then Nastya will necessarily move along some edge of the graph from the vertex she is currently staying/ . You win if at least one of the bees and Nastya are in the same vertex at any time of the game. If this situation does not occur after n moves, then you lose. Several bees can be in the same vertex. InteractionAt each turn, you must output exactly three vertices a, b, c ( 1 \u2264 a, b, c \u2264 n) . For the first time, 3 vertices displayed will indicate which vertices you originally placed bees on. In response, you will receive the vertex where the jury placed Nastya. Each next 3 vertices will indicate where the 3 bees move at your turn. Each of the bees can, regardless of other bees, both remain at the current vertex and move along the edge. After the next output of 3 vertices, in response, you get the number of the new vertex to which Nastya went. As soon as one of the bees is at the same vertex with Nastya or you have reached the limit on the number of moves, your program should stop working. That is if you made a move, and one of the bees ended up at the same vertex with Nastya, your program must stop working, or if Nastya made a move and ended up at the same vertex with one of the bees, you should not make your move and the program should stop working. If the number of moves exceeds limit ( n , where n is the number of vertices) , you will get the Wrong Answer verdict. Your solution may receive the verdict Idleness Limit Exceeded if you don' t output anything or forget to flush the output buffer. To flush the output buffer, you need to do the following immediately after printing the query and the line end: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; for other languages see documentation. In this problem interactor is adaptive. This means that depending on all your previous moves, Nastya' s behavior may change. Hacks are not available for this problem.",
    "input": "The first line contains two integers n ( 4 \u2264 n \u2264 5000) and m ( n \u2264 m \u2264 3n) \u2014 the number of vertices and edges in the graph. Each of the next m lines contains two integers v and u ( 1 \u2264 v, u \u2264 n) , which mean that there is an edge between the vertices v and u . It is guaranteed that the graph is connected, does not contain loops that the degree of any vertex does not exceed 3 and a cycle of length no more than 5 passes through each edge. Note that the graph may contain multiple edges.",
    "output": "",
    "note": "Let Nastya be a green chip, and three numbered red ones are three bees. In the first test, the movement of the heroes looks like this. After selecting the starting vertices. The first move after the bees move. The first move after the Nastya' s move. The first bee caught Nastya. In the second test, the movement of the heroes looks like this. After selecting the starting vertices. The first move after the bees move. The first move after the Nastya' s move. The second move after the bees move. The first bee caught Nastya.",
    "topics": [
      "graphs",
      "interactive",
      "probabilities"
    ],
    "id": "1340E"
  },
  {
    "title": "Nastya and Time Machine",
    "url": "https://codeforces.com/problemset/problem/1340/D",
    "history": "Denis came to Nastya and discovered that she was not happy to see him. . . There is only one chance that she can become happy. Denis wants to buy all things that Nastya likes so she will certainly agree to talk to him. The map of the city where they live has a lot of squares, some of which are connected by roads. There is exactly one way between each pair of squares which does not visit any vertex twice. It turns out that the graph of the city is a tree. Denis is located at vertex 1 at the time 0 . He wants to visit every vertex at least once and get back as soon as possible. Denis can walk one road in 1 time. Unfortunately, the city is so large that it will take a very long time to visit all squares. Therefore, Denis took a desperate step. He pulled out his pocket time machine, which he constructed in his basement. With its help, Denis can change the time to any non- negative time, which is less than the current time. But the time machine has one feature. If the hero finds himself in the same place and at the same time twice, there will be an explosion of universal proportions and Nastya will stay unhappy. Therefore, Denis asks you to find him a route using a time machine that he will get around all squares and will return to the first and at the same time the maximum time in which he visited any square will be minimal. Formally, Denis' s route can be represented as a sequence of pairs: { v_ 1, t_ 1} , { v_ 2, t_ 2} , { v_ 3, t_ 3} , . . . , { v_ k, t_ k} , where v_ i is number of square, and t_ i is time in which the boy is now. The following conditions must be met: The route starts on square 1 at time 0 , i. e. v_ 1 = 1, t_ 1 = 0 and ends on the square 1 , i. e. v_ k = 1 . All transitions are divided into two types: Being in the square change the time: { v_ i, t_ i } \u2192{ v_ i+ 1, t_ i+ 1} : v_ i+ 1 = v_ i, 0 \u2264 t_ i+ 1 < t_ i . Walk along one of the roads: { v_ i, t_ i } \u2192{ v_ i+ 1, t_ i+ 1} . Herewith, v_ i and v_ i+ 1 are connected by road, and t_ i+ 1 = t_ i + 1 All pairs { v_ i, t_ i } must be different. All squares are among v_ 1, v_ 2, . . . , v_ k . You need to find a route such that the maximum time in any square will be minimal, that is, the route for which max( t_ 1, t_ 2, . . . , t_ k) will be the minimum possible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 the number of squares in the city. The next n - 1 lines contain two integers u and v ( 1 \u2264 v, u \u2264 n, u = \u0338 v) - the numbers of the squares connected by the road. It is guaranteed that the given graph is a tree.",
    "output": "In the first line output the integer k ( 1 \u2264 k \u2264 10^ 6) \u2014 the length of the path of Denis. In the next k lines output pairs v_ i, t_ i \u2014 pairs that describe Denis' s route ( as in the statement) . All route requirements described in the statements must be met. It is guaranteed that under given restrictions there is at least one route and an answer whose length does not exceed 10^ 6 . If there are several possible answers, print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1340D"
  },
  {
    "title": "Nastya and Unexpected Guest",
    "url": "https://codeforces.com/problemset/problem/1340/C",
    "history": "If the girl doesn' t go to Denis, then Denis will go to the girl. Using this rule, the young man left home, bought flowers and went to Nastya. On the way from Denis' s house to the girl' s house is a road of n lines. This road can' t be always crossed in one green light. Foreseeing this, the good mayor decided to place safety islands in some parts of the road. Each safety island is located after a line, as well as at the beginning and at the end of the road. Pedestrians can relax on them, gain strength and wait for a green light. Denis came to the edge of the road exactly at the moment when the green light turned on. The boy knows that the traffic light first lights up g seconds green, and then r seconds red, then again g seconds green and so on. Formally, the road can be represented as a segment [ 0, n] . Initially, Denis is at point 0 . His task is to get to point n in the shortest possible time. He knows many different integers d_ 1, d_ 2, . . . , d_ m , where 0 \u2264 d_ i \u2264 n \u2014 are the coordinates of points, in which the safety islands are located. Only at one of these points, the boy can be at a time when the red light is on. Unfortunately, Denis isn' t always able to control himself because of the excitement, so some restrictions are imposed: He must always move while the green light is on because it' s difficult to stand when so beautiful girl is waiting for you. Denis can change his position by \u00b1 1 in 1 second. While doing so, he must always stay inside the segment [ 0, n] . He can change his direction only on the safety islands ( because it is safe) . This means that if in the previous second the boy changed his position by + 1 and he walked on a safety island, then he can change his position by \u00b1 1 . Otherwise, he can change his position only by + 1 . Similarly, if in the previous second he changed his position by - 1 , on a safety island he can change position by \u00b1 1 , and at any other point by - 1 . At the moment when the red light is on, the boy must be on one of the safety islands. He can continue moving in any direction when the green light is on. Denis has crossed the road as soon as his coordinate becomes equal to n . This task was not so simple, because it' s possible that it is impossible to cross the road. Since Denis has all thoughts about his love, he couldn' t solve this problem and asked us to help him. Find the minimal possible time for which he can cross the road according to these rules, or find that it is impossible to do.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 6, 2 \u2264 m \u2264 min( n + 1, 10^ 4) ) \u2014 road width and the number of safety islands. The second line contains m distinct integers d_ 1, d_ 2, . . . , d_ m ( 0 \u2264 d_ i \u2264 n) \u2014 the points where the safety islands are located. It is guaranteed that there are 0 and n among them. The third line contains two integers g, r ( 1 \u2264 g, r \u2264 1000) \u2014 the time that the green light stays on and the time that the red light stays on.",
    "output": "Output a single integer \u2014 the minimum time for which Denis can cross the road with obeying all the rules. If it is impossible to cross the road output - 1 .",
    "note": "In the first test, the optimal route is: for the first green light, go to 7 and return to 3 . In this case, we will change the direction of movement at the point 7 , which is allowed, since there is a safety island at this point. In the end, we will be at the point of 3 , where there is also a safety island. The next 11 seconds we have to wait for the red light. for the second green light reaches 14 . Wait for the red light again. for 1 second go to 15 . As a result, Denis is at the end of the road. In total, 45 seconds are obtained. In the second test, it is impossible to cross the road according to all the rules.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "1340C"
  },
  {
    "title": "Nastya and Scoreboard",
    "url": "https://codeforces.com/problemset/problem/1340/B",
    "history": "Denis, after buying flowers and sweets ( you will learn about this story in the next task) , went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally. . . Denis asks her to be together, but . . . Nastya doesn' t give any answer. The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks ( which are off now) ? It is allowed that the number includes leading zeros.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of digits on scoreboard and k ( 0 \u2264 k \u2264 2000) \u2014 the number of segments that stopped working. The next n lines contain one binary string of length 7 , the i - th of which encodes the i - th digit of the scoreboard. Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i - th place of the binary string be 0 if the i - th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now. Thus, the sequences \" 1110111\" , \" 0010010\" , \" 1011101\" , \" 1011011\" , \" 0111010\" , \" 1101011\" , \" 1101111\" , \" 1010010\" , \" 1111111\" , \" 1111011\" encode in sequence all digits from 0 to 9 inclusive.",
    "output": "Output a single number consisting of n digits \u2014 the maximum number that can be obtained if you turn on exactly k sticks or - 1 , if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.",
    "note": "In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard. In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07 , 18 , 34 , 43 , 70 , 79 , 81 and 97 , of which we choose the maximum \u2014 97 . In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1340B"
  },
  {
    "title": "JYPnation",
    "url": "https://codeforces.com/problemset/problem/1338/E",
    "history": "Due to the success of TWICE, JYP Entertainment has earned countless money and emerged as the biggest entertainment firm by market capitalization. Therefore, the boss, JYP, has decided to create a new nation and has appointed you to provide a design diagram. The new nation consists of n cities and some roads between them. JYP has given some restrictions: To guarantee efficiency while avoiding chaos, for any 2 different cities A and B , there is exactly one road between them, and it is one- directional. There are no roads connecting a city to itself. The logo of rivaling companies should not appear in the plan, that is, there does not exist 4 distinct cities A , B , C , D , such that the following configuration occurs. JYP has given criteria for your diagram. For two cities A , B , let dis( A, B) be the smallest number of roads you have to go through to get from A to B . If it is not possible to walk from A to B , dis( A, B) = 614n . Then, the efficiency value is defined to be the sum of dis( A, B) for all ordered pairs of distinct cities ( A, B) . Note that dis( A, B) doesn' t have to be equal to dis( B, A) . You have drawn a design diagram that satisfies JYP' s restrictions. Find the sum of dis( A, B) over all ordered pairs of cities ( A, B) with A= \u0338 B . Note that the input is given in compressed form. But even though it is compressed, you' d better use fast input.",
    "input": "The first line contains a single integer n ( 4 \u2264 n \u2264 8000 , n \u2261 0 4 ) \u2014 the number of cities. A binary matrix is encrypted in the following format. Each of n next lines contains n/ 4 one- digit hexadecimal numbers ( that is, these numbers can be represented either as digits from 0 to 9 or as uppercase Latin letters from A to F ) . Binary representation of each of these numbers denotes next 4 elements of the matrix in the corresponding row. For example, if the number B is given, then the corresponding elements are 1011 , and if the number is 5 , then the corresponding elements are 0101 . After you obtain the decrypted binary matrix, the j - th character of the i - th row is 1 if the one- directional road between cities i and j is directed from i to j , and 0 otherwise. It is guaranteed that the graph satisfies the restrictions mentioned above.",
    "output": "Output one integer, representing the sum of dis( A, B) over all ordered pairs of cities ( A, B) with A= \u0338 B .",
    "note": "The first example corresponds to the matrix: 0111 0010 0001 0100 Which corresponds to this graph: dis( 1, 2) = dis( 1, 3) = dis( 1, 4) = dis( 2, 3) = dis( 3, 4) = dis( 4, 2) = 1 dis( 2, 4) = dis( 4, 3) = dis( 3, 2) = 2 dis( 2, 1) = dis( 3, 1) = dis( 4, 1) = 2456 Therefore the answer for the diagram is 7380 .",
    "topics": [
      "graphs"
    ],
    "id": "1338E"
  },
  {
    "title": "Journey",
    "url": "https://codeforces.com/problemset/problem/1336/F",
    "history": "In the wilds far beyond lies the Land of Sacredness, which can be viewed as a tree \u2014 connected undirected graph consisting of n nodes and n- 1 edges. The nodes are numbered from 1 to n . There are m travelers attracted by its prosperity and beauty. Thereupon, they set off their journey on this land. The i - th traveler will travel along the shortest path from s_ i to t_ i . In doing so, they will go through all edges in the shortest path from s_ i to t_ i , which is unique in the tree. During their journey, the travelers will acquaint themselves with the others. Some may even become friends. To be specific, the i - th traveler and the j - th traveler will become friends if and only if there are at least k edges that both the i - th traveler and the j - th traveler will go through. Your task is to find out the number of pairs of travelers ( i, j) satisfying the following conditions: 1 \u2264 i < j \u2264 m . the i - th traveler and the j - th traveler will become friends.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n, m \u2264 1. 5 \u00b7 10^ 5 , 1\u2264 k\u2264 n ) . Each of the next n- 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) , denoting there is an edge between u and v . The i - th line of the next m lines contains two integers s_ i and t_ i ( 1\u2264 s_ i, t_ i\u2264 n , s_ i = \u0338 t_ i ) , denoting the starting point and the destination of i - th traveler. It is guaranteed that the given edges form a tree.",
    "output": "The only line contains a single integer \u2014 the number of pairs of travelers satisfying the given conditions.",
    "note": "In the first example there are 4 pairs satisfying the given requirements: ( 1, 2) , ( 1, 3) , ( 1, 4) , ( 3, 4) . The 1 - st traveler and the 2 - nd traveler both go through the edge 6- 8 . The 1 - st traveler and the 3 - rd traveler both go through the edge 2- 6 . The 1 - st traveler and the 4 - th traveler both go through the edge 1- 2 and 2- 6 . The 3 - rd traveler and the 4 - th traveler both go through the edge 2- 6 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "graphs",
      "trees"
    ],
    "id": "1336F"
  },
  {
    "title": "Robots on a Grid",
    "url": "https://codeforces.com/problemset/problem/1335/F",
    "history": "There is a rectangular grid of size n \u00d7 m . Each cell of the grid is colored black ( ' 0' ) or white ( ' 1' ) . The color of the cell ( i, j) is c_ i, j . You are also given a map of directions: for each cell, there is a direction s_ i, j which is one of the four characters ' U' , ' R' , ' D' and ' L' . If s_ i, j is ' U' then there is a transition from the cell ( i, j) to the cell ( i - 1, j) ; if s_ i, j is ' R' then there is a transition from the cell ( i, j) to the cell ( i, j + 1) ; if s_ i, j is ' D' then there is a transition from the cell ( i, j) to the cell ( i + 1, j) ; if s_ i, j is ' L' then there is a transition from the cell ( i, j) to the cell ( i, j - 1) . It is guaranteed that the top row doesn' t contain characters ' U' , the bottom row doesn' t contain characters ' D' , the leftmost column doesn' t contain characters ' L' and the rightmost column doesn' t contain characters ' R' . You want to place some robots in this field ( at most one robot in a cell) . The following conditions should be satisfied. Firstly, each robot should move every time ( i. e. it cannot skip the move) . During one move each robot goes to the adjacent cell depending on the current direction. Secondly, you have to place robots in such a way that there is no move before which two different robots occupy the same cell ( it also means that you cannot place two robots in the same cell) . I. e. if the grid is \" RL\" ( one row, two columns, colors does not matter there) then you can place two robots in cells ( 1, 1) and ( 1, 2) , but if the grid is \" RLL\" then you cannot place robots in cells ( 1, 1) and ( 1, 3) because during the first second both robots will occupy the cell ( 1, 2) . The robots make an infinite number of moves. Your task is to place the maximum number of robots to satisfy all the conditions described above and among all such ways, you have to choose one where the number of black cells occupied by robots before all movements is the maximum possible. Note that you can place robots only before all movements. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and m ( 1 < nm \u2264 10^ 6 ) \u2014 the number of rows and the number of columns correspondingly. The next n lines contain m characters each, where the j - th character of the i - th line is c_ i, j ( c_ i, j is either ' 0' if the cell ( i, j) is black or ' 1' if the cell ( i, j) is white) . The next n lines also contain m characters each, where the j - th character of the i - th line is s_ i, j ( s_ i, j is ' U' , ' R' , ' D' or ' L' and describes the direction of the cell ( i, j) ) . It is guaranteed that the sum of the sizes of fields does not exceed 10^ 6 ( \u2211 nm \u2264 10^ 6 ) .",
    "output": "For each test case, print two integers \u2014 the maximum number of robots you can place to satisfy all the conditions described in the problem statement and the maximum number of black cells occupied by robots before all movements if the number of robots placed is maximized. Note that you can place robots only before all movements.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "matrices"
    ],
    "id": "1335F"
  },
  {
    "title": "Divisor Paths",
    "url": "https://codeforces.com/problemset/problem/1334/E",
    "history": "You are given a positive integer D . Let' s build the following graph from it: each vertex is a divisor of D ( not necessarily prime, 1 and D itself are also included) ; two vertices x and y ( x > y ) have an undirected edge between them if x is divisible by y and x/ y is a prime; the weight of an edge is the number of divisors of x that are not divisors of y . For example, here is the graph for D= 12 : Edge ( 4, 12) has weight 3 because 12 has divisors [ 1, 2, 3, 4, 6, 12] and 4 has divisors [ 1, 2, 4] . Thus, there are 3 divisors of 12 that are not divisors of 4 \u2014 [ 3, 6, 12] . There is no edge between 3 and 2 because 3 is not divisible by 2 . There is no edge between 12 and 3 because 12/ 3= 4 is not a prime. Let the length of the path between some vertices v and u in the graph be the total weight of edges on it. For example, path [ ( 1, 2) , ( 2, 6) , ( 6, 12) , ( 12, 4) , ( 4, 2) , ( 2, 6) ] has length 1+ 2+ 2+ 3+ 1+ 2= 11 . The empty path has length 0 . So the shortest path between two vertices v and u is the path that has the minimal possible length. Two paths a and b are different if there is either a different number of edges in them or there is a position i such that a_ i and b_ i are different edges. You are given q queries of the following form: v u \u2014 calculate the number of the shortest paths between vertices v and u . The answer for each query might be large so print it modulo 998244353 .",
    "input": "The first line contains a single integer D ( 1 \u2264 D \u2264 10^ 15 ) \u2014 the number the graph is built from. The second line contains a single integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of queries. Each of the next q lines contains two integers v and u ( 1 \u2264 v, u \u2264 D ) . It is guaranteed that D is divisible by both v and u ( both v and u are divisors of D ) .",
    "output": "Print q integers \u2014 for each query output the number of the shortest paths between the two given vertices modulo 998244353 .",
    "note": "In the first example: The first query is only the empty path \u2014 length 0 ; The second query are paths [ ( 12, 4) , ( 4, 2) , ( 2, 1) ] ( length 3+ 1+ 1= 5 ) , [ ( 12, 6) , ( 6, 2) , ( 2, 1) ] ( length 2+ 2+ 1= 5 ) and [ ( 12, 6) , ( 6, 3) , ( 3, 1) ] ( length 2+ 2+ 1= 5 ) . The third query is only the path [ ( 3, 1) , ( 1, 2) , ( 2, 4) ] ( length 1+ 1+ 1= 3 ) .",
    "topics": [
      "combinatorics",
      "graphs",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1334E"
  },
  {
    "title": "Minimum Euler Cycle",
    "url": "https://codeforces.com/problemset/problem/1334/D",
    "history": "You are given a complete directed graph K_ n with n vertices: each pair of vertices u = \u0338 v in K_ n have both directed edges ( u, v) and ( v, u) ; there are no self- loops. You should find such a cycle in K_ n that visits every directed edge exactly once ( allowing for revisiting vertices) . We can write such cycle as a list of n( n - 1) + 1 vertices v_ 1, v_ 2, v_ 3, . . . , v_ n( n - 1) - 1, v_ n( n - 1) , v_ n( n - 1) + 1 = v_ 1 \u2014 a visiting order, where each ( v_ i, v_ i + 1) occurs exactly once. Find the lexicographically smallest such cycle. It' s not hard to prove that the cycle always exists. Since the answer can be too large print its [ l, r] segment, in other words, v_ l, v_ l + 1, . . . , v_ r .",
    "input": "The first line contains the single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of test cases. Next T lines contain test cases \u2014 one per line. The first and only line of each test case contains three integers n , l and r ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 l \u2264 r \u2264 n( n - 1) + 1 , r - l + 1 \u2264 10^ 5 ) \u2014 the number of vertices in K_ n , and segment of the cycle to print. It' s guaranteed that the total sum of n doesn' t exceed 10^ 5 and the total sum of r - l + 1 doesn' t exceed 10^ 5 .",
    "output": "For each test case print the segment v_ l, v_ l + 1, . . . , v_ r of the lexicographically smallest cycle that visits every edge exactly once.",
    "note": "In the second test case, the lexicographically minimum cycle looks like: 1, 2, 1, 3, 2, 3, 1 . In the third test case, it' s quite obvious that the cycle should start and end in vertex 1 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1334D"
  },
  {
    "title": "Challenges in school \u211641",
    "url": "https://codeforces.com/problemset/problem/1333/D",
    "history": "There are n children, who study at the school No41. It is well- known that they are good mathematicians. Once at a break, they arranged a challenge for themselves. All children arranged in a row and turned heads either to the left or to the right. Children can do the following: in one second several pairs of neighboring children who are looking at each other can simultaneously turn the head in the opposite direction. For instance, the one who was looking at the right neighbor turns left and vice versa for the second child. Moreover, every second at least one pair of neighboring children performs such action. They are going to finish when there is no pair of neighboring children who are looking at each other. You are given the number n , the initial arrangement of children and the number k . You have to find a way for the children to act if they want to finish the process in exactly k seconds. More formally, for each of the k moves, you need to output the numbers of the children who turn left during this move. For instance, for the configuration shown below and k = 2 children can do the following steps: At the beginning, two pairs make move: ( 1, 2) and ( 3, 4) . After that, we receive the following configuration: At the second move pair ( 2, 3) makes the move. The final configuration is reached. Good job. It is guaranteed that if the solution exists, it takes not more than n^ 2 \" headturns\" .",
    "input": "The first line of input contains two integers n and k ( 2 \u2264 n \u2264 3000 , 1 \u2264 k \u2264 3000000 ) \u2014 the number of children and required number of moves. The next line contains a string of length n and consists only of characters L and R, where L means that the child looks to the left and R means that the child looks to the right.",
    "output": "If there is no solution, print a single line with number - 1 . Otherwise, output k lines. Each line has to start with a number n_ i ( 1\u2264 n_ i \u2264n/ 2 ) \u2014 the number of pairs of children, who turn at this move. After that print n_ i distinct integers \u2014 the numbers of the children who will turn left during this move. After performing all \" headturns\" , there can' t be a pair of two neighboring children looking at each other. If there are many solutions, print any of them.",
    "note": "The first sample contains a pair of children who look at each other. After one move, they can finish the process. In the second sample, children can' t make any move. As a result, they can' t end in k> 0 moves. The third configuration is described in the statement.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "games",
      "graphs",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1333D"
  },
  {
    "title": "Tree Queries",
    "url": "https://codeforces.com/problemset/problem/1328/E",
    "history": "You are given a rooted tree consisting of n vertices numbered from 1 to n . The root of the tree is a vertex number 1 . A tree is a connected undirected graph with n- 1 edges. You are given m queries. The i - th query consists of the set of k_ i distinct vertices v_ i[ 1] , v_ i[ 2] , . . . , v_ i[ k_ i] . Your task is to say if there is a path from the root to some vertex u such that each of the given k vertices is either belongs to this path or has the distance 1 to some vertex of this path.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree and the number of queries. Each of the next n- 1 lines describes an edge of the tree. Edge i is denoted by two integers u_ i and v_ i , the labels of vertices it connects ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i v_ i ) . It is guaranteed that the given edges form a tree. The next m lines describe queries. The i - th line describes the i - th query and starts with the integer k_ i ( 1 \u2264 k_ i \u2264 n ) \u2014 the number of vertices in the current query. Then k_ i integers follow: v_ i[ 1] , v_ i[ 2] , . . . , v_ i[ k_ i] ( 1 \u2264 v_ i[ j] \u2264 n ) , where v_ i[ j] is the j - th vertex of the i - th query. It is guaranteed that all vertices in a single query are distinct. It is guaranteed that the sum of k_ i does not exceed 2 \u00b7 10^ 5 ( \u2211_ i= 1^ m k_ i \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each query, print the answer \u2014 \" YES\" , if there is a path from the root to some vertex u such that each of the given k vertices is either belongs to this path or has the distance 1 to some vertex of this path and \" NO\" otherwise.",
    "note": "The picture corresponding to the example: Consider the queries. The first query is [ 3, 8, 9, 10] . The answer is \" YES\" as you can choose the path from the root 1 to the vertex u= 10 . Then vertices [ 3, 9, 10] belong to the path from 1 to 10 and the vertex 8 has distance 1 to the vertex 7 which also belongs to this path. The second query is [ 2, 4, 6] . The answer is \" YES\" as you can choose the path to the vertex u= 2 . Then the vertex 4 has distance 1 to the vertex 1 which belongs to this path and the vertex 6 has distance 1 to the vertex 2 which belongs to this path. The third query is [ 2, 1, 5] . The answer is \" YES\" as you can choose the path to the vertex u= 5 and all vertices of the query belong to this path. The fourth query is [ 4, 8, 2] . The answer is \" YES\" as you can choose the path to the vertex u= 9 so vertices 2 and 4 both have distance 1 to the vertex 1 which belongs to this path and the vertex 8 has distance 1 to the vertex 7 which belongs to this path. The fifth and the sixth queries both have answer \" NO\" because you cannot choose suitable vertex u .",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1328E"
  },
  {
    "title": "Carousel",
    "url": "https://codeforces.com/problemset/problem/1328/D",
    "history": "The round carousel consists of n figures of animals. Figures are numbered from 1 to n in order of the carousel moving. Thus, after the n - th figure the figure with the number 1 follows. Each figure has its own type \u2014 the type of the animal corresponding to this figure ( the horse, the tiger and so on) . The type of animal of the i - th figure equals t_ i . The example of the carousel for n= 9 and t= [ 5, 5, 1, 15, 1, 5, 5, 1, 1] . You want to color each figure in one of the colors. You think that it' s boring if the carousel contains two different figures ( with the distinct types of animals) going one right after another and colored in the same color. Your task is to color the figures in such a way that the number of distinct colors used is the minimum possible and there are no figures of the different types going one right after another and colored in the same color. If you use exactly k distinct colors, then the colors of figures should be denoted with integers from 1 to k .",
    "input": "The input contains one or more test cases. The first line contains one integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then q test cases follow. One test case is given on two lines. The first line of the test case contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of figures in the carousel. Figures are numbered from 1 to n in order of carousel moving. Assume that after the n - th figure the figure 1 goes. The second line of the test case contains n integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 2 \u00b7 10^ 5 ) , where t_ i is the type of the animal of the i - th figure. The sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "Print q answers, for each test case print two lines. In the first line print one integer k \u2014 the minimum possible number of distinct colors of figures. In the second line print n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 k ) , where c_ i is the color of the i - th figure. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1328D"
  },
  {
    "title": "Infinite Path",
    "url": "https://codeforces.com/problemset/problem/1327/D",
    "history": "You are given a colored permutation p_ 1, p_ 2, . . . , p_ n . The i - th element of the permutation has color c_ i . Let' s define an infinite path as infinite sequence i, p[ i] , p[ p[ i] ] , p[ p[ p[ i] ] ] . . . where all elements have same color ( c[ i] = c[ p[ i] ] = c[ p[ p[ i] ] ] = . . . ) . We can also define a multiplication of permutations a and b as permutation c = a \u00d7 b where c[ i] = b[ a[ i] ] . Moreover, we can define a power k of permutation p as p^ k= p \u00d7 p \u00d7. . . \u00d7 p_ k times . Find the minimum k > 0 such that p^ k has at least one infinite path ( i. e. there is a position i in p^ k such that the sequence starting from i is an infinite path) . It can be proved that the answer always exists.",
    "input": "The first line contains single integer T ( 1 \u2264 T \u2264 10^ 4 ) \u2014 the number of test cases. Next 3T lines contain test cases \u2014 one per three lines. The first line contains single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the permutation. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , p_ i = \u0338 p_ j for i = \u0338 j ) \u2014 the permutation p . The third line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 n ) \u2014 the colors of elements of the permutation. It is guaranteed that the total sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print T integers \u2014 one per test case. For each test case print minimum k > 0 such that p^ k has at least one infinite path.",
    "note": "In the first test case, p^ 1 = p = [ 1, 3, 4, 2] and the sequence starting from 1 : 1, p[ 1] = 1, . . . is an infinite path. In the second test case, p^ 5 = [ 1, 2, 3, 4, 5] and it obviously contains several infinite paths. In the third test case, p^ 2 = [ 3, 6, 1, 8, 7, 2, 5, 4] and the sequence starting from 4 : 4, p^ 2[ 4] = 8, p^ 2[ 8] = 4, . . . is an infinite path since c_ 4 = c_ 8 = 4 .",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "math",
      "number theory"
    ],
    "id": "1327D"
  },
  {
    "title": "Princesses and Princes",
    "url": "https://codeforces.com/problemset/problem/1327/B",
    "history": "The King of Berland Polycarp LXXXIV has n daughters. To establish his power to the neighbouring kingdoms he wants to marry his daughters to the princes of these kingdoms. As a lucky coincidence there are n other kingdoms as well. So Polycarp LXXXIV has enumerated his daughters from 1 to n and the kingdoms from 1 to n . For each daughter he has compiled a list of kingdoms princes of which she wanted to marry. Polycarp LXXXIV is very busy, so he finds a couple for his daughters greedily one after another. For the first daughter he takes the kingdom with the lowest number from her list and marries the daughter to their prince. For the second daughter he takes the kingdom with the lowest number from her list, prince of which hasn' t been taken already. If there are no free princes in the list then the daughter marries nobody and Polycarp LXXXIV proceeds to the next daughter. The process ends after the n - th daughter. For example, let there be 4 daughters and kingdoms, the lists daughters have are [ 2, 3] , [ 1, 2] , [ 3, 4] , [ 3] , respectively. In that case daughter 1 marries the prince of kingdom 2 , daughter 2 marries the prince of kingdom 1 , daughter 3 marries the prince of kingdom 3 , leaving daughter 4 nobody to marry to. Actually, before starting the marriage process Polycarp LXXXIV has the time to convince one of his daughters that some prince is also worth marrying to. Effectively, that means that he can add exactly one kingdom to exactly one of his daughter' s list. Note that this kingdom should not be present in the daughter' s list. Polycarp LXXXIV wants to increase the number of married couples. Unfortunately, what he doesn' t have the time for is determining what entry to add. If there is no way to increase the total number of married couples then output that the marriages are already optimal. Otherwise, find such an entry that the total number of married couples increases if Polycarp LXXXIV adds it. If there are multiple ways to add an entry so that the total number of married couples increases then print any of them. For your and our convenience you are asked to answer t independent test cases.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of daughters and the number of kingdoms. Each of the next n lines contains the description of each daughter' s list. The first integer k ( 0 \u2264 k \u2264 n ) is the number of entries in the i - th daughter' s list. After that k distinct integers follow g_ i[ 1] , g_ i[ 2] , . . . , g_ i[ k] ( 1 \u2264 g_ i[ j] \u2264 n ) \u2014 the indices of the kingdoms in the list in the increasing order ( g_ i[ 1] < g_ i[ 2] < . . . < g_ i[ k] ) . It' s guaranteed that the total number of daughters over all test cases does not exceed 10^ 5 . It' s also guaranteed that the total number of kingdoms in lists over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print the answer to it. Print \" IMPROVE\" in the first line if Polycarp LXXXIV can add some kingdom to some of his daughter' s list so that the total number of married couples increases. The second line then should contain two integers \u2014 the index of the daughter and the index of the kingdom Polycarp LXXXIV should add to that daughter' s list. If there are multiple ways to add an entry so that the total number of married couples increases then print any of them. Otherwise the only line should contain one word \" OPTIMAL\" .",
    "note": "The first test case is depicted in the statement. Adding the fourth kingdom to the list of the fourth daughter makes her marry the prince of the fourth kingdom. In the second test case any new entry will increase the number of marriages from 0 to 1 . In the third and the fourth test cases there is no way to add an entry. In the fifth test case there is no way to change the marriages by adding any entry.",
    "topics": [
      "brute force",
      "graphs",
      "greedy"
    ],
    "id": "1327B"
  },
  {
    "title": "Ehab's Last Theorem",
    "url": "https://codeforces.com/problemset/problem/1325/F",
    "history": "It' s the year 5555. You have a graph, and you want to find a long cycle and a huge independent set, just because you can. But for now, let' s just stick with finding either. Given a connected graph with n vertices, you can choose to either: find an independent set that has exactly \u2308\u221a( n) \u2309 vertices. find a simple cycle of length at least \u2308\u221a( n) \u2309 . An independent set is a set of vertices such that no two of them are connected by an edge. A simple cycle is a cycle that doesn' t contain any vertex twice. I have a proof you can always solve one of these problems, but it' s too long to fit this margin.",
    "input": "The first line contains two integers n and m ( 5 \u2264 n \u2264 10^ 5 , n- 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and edges in the graph. Each of the next m lines contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 n ) that mean there' s an edge between vertices u and v . It' s guaranteed that the graph is connected and doesn' t contain any self- loops or multiple edges.",
    "output": "If you choose to solve the first problem, then on the first line print \" 1\" , followed by a line containing \u2308\u221a( n) \u2309 distinct integers not exceeding n , the vertices in the desired independent set. If you, however, choose to solve the second problem, then on the first line print \" 2\" , followed by a line containing one integer, c , representing the length of the found cycle, followed by a line containing c distinct integers integers not exceeding n , the vertices in the desired cycle, in the order they appear in the cycle.",
    "note": "In the first sample: Notice that you can solve either problem, so printing the cycle 2- 4- 3- 1- 5- 6 is also acceptable. In the second sample: Notice that if there are multiple answers you can print any, so printing the cycle 2- 5- 6 , for example, is acceptable. In the third sample:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1325F"
  },
  {
    "title": "Ehab's REAL Number Theory Problem",
    "url": "https://codeforces.com/problemset/problem/1325/E",
    "history": "You are given an array a of length n that has a special condition: every element in this array has at most 7 divisors. Find the length of the shortest non- empty subsequence of this array product of whose elements is a perfect square. A sequence a is a subsequence of an array b if a can be obtained from b by deletion of several ( possibly, zero or all) elements.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of a . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the elements of the array a .",
    "output": "Output the length of the shortest non- empty subsequence of a product of whose elements is a perfect square. If there are several shortest subsequences, you can find any of them. If there' s no such subsequence, print \" - 1\" .",
    "note": "In the first sample, you can choose a subsequence [ 1] . In the second sample, you can choose a subsequence [ 6, 6] . In the third sample, you can choose a subsequence [ 6, 15, 10] . In the fourth sample, there is no such subsequence.",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "number theory",
      "shortest paths"
    ],
    "id": "1325E"
  },
  {
    "title": "Maximum White Subtree",
    "url": "https://codeforces.com/problemset/problem/1324/F",
    "history": "You are given a tree consisting of n vertices. A tree is a connected undirected graph with n- 1 edges. Each vertex v of this tree has a color assigned to it ( a_ v = 1 if the vertex v is white and 0 if the vertex v is black) . You have to solve the following problem for each vertex v : what is the maximum difference between the number of white and the number of black vertices you can obtain if you choose some subtree of the given tree that contains the vertex v ? The subtree of the tree is the connected subgraph of the given tree. More formally, if you choose the subtree that contains cnt_ w white vertices and cnt_ b black vertices, you have to maximize cnt_ w - cnt_ b .",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) , where a_ i is the color of the i - th vertex. Each of the next n- 1 lines describes an edge of the tree. Edge i is denoted by two integers u_ i and v_ i , the labels of vertices it connects ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i v_ i ) . It is guaranteed that the given edges form a tree.",
    "output": "Print n integers res_ 1, res_ 2, . . . , res_ n , where res_ i is the maximum possible difference between the number of white and black vertices in some subtree that contains the vertex i .",
    "note": "The first example is shown below: The black vertices have bold borders. In the second example, the best subtree for vertices 2, 3 and 4 are vertices 2, 3 and 4 correspondingly. And the best subtree for the vertex 1 is the subtree consisting of vertices 1 and 3 .",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1324F"
  },
  {
    "title": "Instant Noodles",
    "url": "https://codeforces.com/problemset/problem/1322/C",
    "history": "Wu got hungry after an intense training session, and came to a nearby store to buy his favourite instant noodles. After Wu paid for his purchase, the cashier gave him an interesting task. You are given a bipartite graph with positive integers in all vertices of the right half. For a subset S of vertices of the left half we define N( S) as the set of all vertices of the right half adjacent to at least one vertex in S , and f( S) as the sum of all numbers in vertices of N( S) . Find the greatest common divisor of f( S) for all possible non- empty subsets S ( assume that GCD of empty set is 0 ) . Wu is too tired after his training to solve this problem. Help him!",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 000 ) \u2014 the number of test cases in the given test set. Test case descriptions follow. The first line of each case description contains two integers n and m ( 1 \u2264 n, m \u2264 500 000 ) \u2014 the number of vertices in either half of the graph, and the number of edges respectively. The second line contains n integers c_ i ( 1 \u2264 c_ i \u2264 10^ 12 ) . The i - th number describes the integer in the vertex i of the right half of the graph. Each of the following m lines contains a pair of integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) , describing an edge between the vertex u_ i of the left half and the vertex v_ i of the right half. It is guaranteed that the graph does not contain multiple edges. Test case descriptions are separated with empty lines. The total value of n across all test cases does not exceed 500 000 , and the total value of m across all test cases does not exceed 500 000 as well.",
    "output": "For each test case print a single integer \u2014 the required greatest common divisor.",
    "note": "The greatest common divisor of a set of integers is the largest integer g such that all elements of the set are divisible by g . In the first sample case vertices of the left half and vertices of the right half are pairwise connected, and f( S) for any non- empty subset is 2 , thus the greatest common divisor of these values if also equal to 2 . In the second sample case the subset { 1} in the left half is connected to vertices { 1, 2} of the right half, with the sum of numbers equal to 2 , and the subset { 1, 2} in the left half is connected to vertices { 1, 2, 3} of the right half, with the sum of numbers equal to 3 . Thus, f( { 1} ) = 2 , f( { 1, 2} ) = 3 , which means that the greatest common divisor of all values of f( S) is 1 .",
    "topics": [
      "graphs",
      "hashing",
      "math",
      "number theory"
    ],
    "id": "1322C"
  },
  {
    "title": "Navigation System",
    "url": "https://codeforces.com/problemset/problem/1320/B",
    "history": "The map of Bertown can be represented as a set of n intersections, numbered from 1 to n and connected by m one- way roads. It is possible to move along the roads from any intersection to any other intersection. The length of some path from one intersection to another is the number of roads that one has to traverse along the path. The shortest path from one intersection v to another intersection u is the path that starts in v , ends in u and has the minimum length among all such paths. Polycarp lives near the intersection s and works in a building near the intersection t . Every day he gets from s to t by car. Today he has chosen the following path to his workplace: p_ 1 , p_ 2 , . . . , p_ k , where p_ 1 = s , p_ k = t , and all other elements of this sequence are the intermediate intersections, listed in the order Polycarp arrived at them. Polycarp never arrived at the same intersection twice, so all elements of this sequence are pairwise distinct. Note that you know Polycarp' s path beforehand ( it is fixed) , and it is not necessarily one of the shortest paths from s to t . Polycarp' s car has a complex navigation system installed in it. Let' s describe how it works. When Polycarp starts his journey at the intersection s , the system chooses some shortest path from s to t and shows it to Polycarp. Let' s denote the next intersection in the chosen path as v . If Polycarp chooses to drive along the road from s to v , then the navigator shows him the same shortest path ( obviously, starting from v as soon as he arrives at this intersection) . However, if Polycarp chooses to drive to another intersection w instead, the navigator rebuilds the path: as soon as Polycarp arrives at w , the navigation system chooses some shortest path from w to t and shows it to Polycarp. The same process continues until Polycarp arrives at t : if Polycarp moves along the road recommended by the system, it maintains the shortest path it has already built; but if Polycarp chooses some other path, the system rebuilds the path by the same rules. Here is an example. Suppose the map of Bertown looks as follows, and Polycarp drives along the path [ 1, 2, 3, 4] ( s = 1 , t = 4 ) : Check the picture by the link http: / / tk. codeforces. com/ a. png When Polycarp starts at 1 , the system chooses some shortest path from 1 to 4 . There is only one such path, it is [ 1, 5, 4] ; Polycarp chooses to drive to 2 , which is not along the path chosen by the system. When Polycarp arrives at 2 , the navigator rebuilds the path by choosing some shortest path from 2 to 4 , for example, [ 2, 6, 4] ( note that it could choose [ 2, 3, 4] ) ; Polycarp chooses to drive to 3 , which is not along the path chosen by the system. When Polycarp arrives at 3 , the navigator rebuilds the path by choosing the only shortest path from 3 to 4 , which is [ 3, 4] ; Polycarp arrives at 4 along the road chosen by the navigator, so the system does not have to rebuild anything. Overall, we get 2 rebuilds in this scenario. Note that if the system chose [ 2, 3, 4] instead of [ 2, 6, 4] during the second step, there would be only 1 rebuild ( since Polycarp goes along the path, so the system maintains the path [ 3, 4] during the third step) . The example shows us that the number of rebuilds can differ even if the map of Bertown and the path chosen by Polycarp stays the same. Given this information ( the map and Polycarp' s path) , can you determine the minimum and the maximum number of rebuilds that could have happened during the journey?",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of intersections and one- way roads in Bertown, respectively. Then m lines follow, each describing a road. Each line contains two integers u and v ( 1 \u2264 u, v \u2264 n , u v ) denoting a road from intersection u to intersection v . All roads in Bertown are pairwise distinct, which means that each ordered pair ( u, v) appears at most once in these m lines ( but if there is a road ( u, v) , the road ( v, u) can also appear) . The following line contains one integer k ( 2 \u2264 k \u2264 n ) \u2014 the number of intersections in Polycarp' s path from home to his workplace. The last line contains k integers p_ 1 , p_ 2 , . . . , p_ k ( 1 \u2264 p_ i \u2264 n , all these integers are pairwise distinct) \u2014 the intersections along Polycarp' s path in the order he arrived at them. p_ 1 is the intersection where Polycarp lives ( s = p_ 1 ) , and p_ k is the intersection where Polycarp' s workplace is situated ( t = p_ k ) . It is guaranteed that for every i \u2208 [ 1, k - 1] the road from p_ i to p_ i + 1 exists, so the path goes along the roads of Bertown.",
    "output": "Print two integers: the minimum and the maximum number of rebuilds that could have happened during the journey.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1320B"
  },
  {
    "title": "Nash Matrix",
    "url": "https://codeforces.com/problemset/problem/1316/D",
    "history": "Nash designed an interesting yet simple board game where a player is simply required to follow instructions written on the cell where the player currently stands. This board game is played on the n\u00d7 n board. Rows and columns of this board are numbered from 1 to n . The cell on the intersection of the r - th row and c - th column is denoted by ( r, c) . Some cells on the board are called blocked zones. On each cell of the board, there is written one of the following 5 characters \u2014 U , D , L , R or X \u2014 instructions for the player. Suppose that the current cell is ( r, c) . If the character is R , the player should move to the right cell ( r, c+ 1) , for L the player should move to the left cell ( r, c- 1) , for U the player should move to the top cell ( r- 1, c) , for D the player should move to the bottom cell ( r+ 1, c) . Finally, if the character in the cell is X , then this cell is the blocked zone. The player should remain in this cell ( the game for him isn' t very interesting from now on) . It is guaranteed that the characters are written in a way that the player will never have to step outside of the board, no matter at which cell he starts. As a player starts from a cell, he moves according to the character in the current cell. The player keeps moving until he lands in a blocked zone. It is also possible that the player will keep moving infinitely long. For every of the n^ 2 cells of the board Alice, your friend, wants to know, how will the game go, if the player starts in this cell. For each starting cell of the board, she writes down the cell that the player stops at, or that the player never stops at all. She gives you the information she has written: for each cell ( r, c) she wrote: a pair ( x , y ) , meaning if a player had started at ( r, c) , he would end up at cell ( x , y ) . or a pair ( - 1 , - 1 ) , meaning if a player had started at ( r, c) , he would keep moving infinitely long and would never enter the blocked zone. It might be possible that Alice is trying to fool you and there' s no possible grid that satisfies all the constraints Alice gave you. For the given information Alice provided you, you are required to decipher a possible board, or to determine that such a board doesn' t exist. If there exist several different boards that satisfy the provided information, you can find any of them.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 10^ 3 ) \u2014 the side of the board. The i - th of the next n lines of the input contains 2n integers x_ 1, y_ 1, x_ 2, y_ 2, . . . , x_ n, y_ n , where ( x_ j, y_ j) ( 1 \u2264 x_ j \u2264 n, 1 \u2264 y_ j \u2264 n , or ( x_ j, y_ j) = ( - 1, - 1) ) is the pair written by Alice for the cell ( i, j) .",
    "output": "If there doesn' t exist a board satisfying the information that Alice gave you, print a single line containing INVALID. Otherwise, in the first line print VALID. In the i - th of the next n lines, print the string of n characters, corresponding to the characters in the i - th row of the suitable board you found. Each character of a string can either be U , D , L , R or X . If there exist several different boards that satisfy the provided information, you can find any of them.",
    "note": "For the sample test 1 : The given grid in output is a valid one. If the player starts at ( 1, 1) , he doesn' t move any further following X and stops there. If the player starts at ( 1, 2) , he moves to left following L and stops at ( 1, 1) . If the player starts at ( 2, 1) , he moves to right following R and stops at ( 2, 2) . If the player starts at ( 2, 2) , he doesn' t move any further following X and stops there. The simulation can be seen below : For the sample test 2 : The given grid in output is a valid one, as a player starting at any cell other than the one at center ( 2, 2) , keeps moving in an infinitely long cycle and never stops. Had he started at ( 2, 2) , he wouldn' t have moved further following instruction X . The simulation can be seen below :",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "1316D"
  },
  {
    "title": "Tourism",
    "url": "https://codeforces.com/problemset/problem/1310/D",
    "history": "Masha lives in a country with n cities numbered from 1 to n . She lives in the city number 1 . There is a direct train route between each pair of distinct cities i and j , where i = \u0338 j . In total there are n( n- 1) distinct routes. Every route has a cost, cost for route from i to j may be different from the cost of route from j to i . Masha wants to start her journey in city 1 , take exactly k routes from one city to another and as a result return to the city 1 . Masha is really careful with money, so she wants the journey to be as cheap as possible. To do so Masha doesn' t mind visiting a city multiple times or even taking the same route multiple times. Masha doesn' t want her journey to have odd cycles. Formally, if you can select visited by Masha city v , take odd number of routes used by Masha in her journey and return to the city v , such journey is considered unsuccessful. Help Masha to find the cheapest ( with minimal total cost of all taken routes) successful journey.",
    "input": "First line of input had two integer numbers n, k ( 2 \u2264 n \u2264 80; 2 \u2264 k \u2264 10 ) : number of cities in the country and number of routes in Masha' s journey. It is guaranteed that k is even. Next n lines hold route descriptions: j - th number in i - th line represents the cost of route from i to j if i = \u0338 j , and is 0 otherwise ( there are no routes i \u2192 i ) . All route costs are integers from 0 to 10^ 8 .",
    "output": "Output a single integer \u2014 total cost of the cheapest Masha' s successful journey.",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "probabilities"
    ],
    "id": "1310D"
  },
  {
    "title": "Cow and Exercise",
    "url": "https://codeforces.com/problemset/problem/1307/G",
    "history": "Farmer John is obsessed with making Bessie exercise more! Bessie is out grazing on the farm, which consists of n fields connected by m directed roads. Each road takes some time w_ i to cross. She is currently at field 1 and will return to her home at field n at the end of the day. Farmer John has plans to increase the time it takes to cross certain roads. He can increase the time it takes to cross each road by a nonnegative amount, but the total increase cannot exceed x_ i for the i - th plan. Determine the maximum he can make the shortest path from 1 to n for each of the q independent plans.",
    "input": "The first line contains integers n and m ( 2 \u2264 n \u2264 50 , 1 \u2264 m \u2264 n \u00b7 ( n- 1) ) \u2014 the number of fields and number of roads, respectively. Each of the following m lines contains 3 integers, u_ i , v_ i , and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 6 ) , meaning there is an road from field u_ i to field v_ i that takes w_ i time to cross. It is guaranteed that there exists a way to get to field n from field 1 . It is guaranteed that the graph does not contain self- loops or parallel edges. It is possible to have a road from u to v and a road from v to u . The next line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) , the number of plans. Each of the following q lines contains a single integer x_ i , the query ( 0 \u2264 x_ i \u2264 10^ 5 ) .",
    "output": "For each query, output the maximum Farmer John can make the shortest path if the total increase does not exceed x_ i . Your answer is considered correct if its absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "",
    "topics": [
      "flows",
      "graphs",
      "shortest paths"
    ],
    "id": "1307G"
  },
  {
    "title": "Cow and Fields",
    "url": "https://codeforces.com/problemset/problem/1307/D",
    "history": "Bessie is out grazing on the farm, which consists of n fields connected by m bidirectional roads. She is currently at field 1 , and will return to her home at field n at the end of the day. The Cowfederation of Barns has ordered Farmer John to install one extra bidirectional road. The farm has k special fields and he has decided to install the road between two different special fields. He may add the road between two special fields that already had a road directly connecting them. After the road is added, Bessie will return home on the shortest path from field 1 to field n . Since Bessie needs more exercise, Farmer John must maximize the length of this shortest path. Help him!",
    "input": "The first line contains integers n , m , and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n- 1 \u2264 m \u2264 2 \u00b7 10^ 5 , 2 \u2264 k \u2264 n ) \u2014 the number of fields on the farm, the number of roads, and the number of special fields. The second line contains k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) \u2014 the special fields. All a_ i are distinct. The i - th of the following m lines contains integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) , representing a bidirectional road between fields x_ i and y_ i . It is guaranteed that one can reach any field from every other field. It is also guaranteed that for any pair of fields there is at most one road connecting them.",
    "output": "Output one integer, the maximum possible length of the shortest path from field 1 to n after Farmer John installs one road optimally.",
    "note": "The graph for the first example is shown below. The special fields are denoted by red. It is optimal for Farmer John to add a road between fields 3 and 5 , and the resulting shortest path from 1 to 5 is length 3 . The graph for the second example is shown below. Farmer John must add a road between fields 2 and 4 , and the resulting shortest path from 1 to 5 is length 3 .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ],
    "id": "1307D"
  },
  {
    "title": "Kuroni and Antihype",
    "url": "https://codeforces.com/problemset/problem/1305/G",
    "history": "Kuroni isn' t good at economics. So he decided to found a new financial pyramid called Antihype. It has the following rules: You can join the pyramid for free and get 0 coins. If you are already a member of Antihype, you can invite your friend who is currently not a member of Antihype, and get a number of coins equal to your age ( for each friend you invite) . n people have heard about Antihype recently, the i - th person' s age is a_ i . Some of them are friends, but friendship is a weird thing now: the i - th person is a friend of the j - th person if and only if a_ i AND a_ j = 0 , where AND denotes the bitwise AND operation. Nobody among the n people is a member of Antihype at the moment. They want to cooperate to join and invite each other to Antihype in a way that maximizes their combined gainings. Could you help them?",
    "input": "The first line contains a single integer n ( 1\u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the number of people. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i \u2264 2\u00b7 10^ 5 ) \u2014 the ages of the people.",
    "output": "Output exactly one integer \u2014 the maximum possible combined gainings of all n people.",
    "note": "Only the first and second persons are friends. The second can join Antihype and invite the first one, getting 2 for it.",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "dsu",
      "graphs"
    ],
    "id": "1305G"
  },
  {
    "title": "Shortest and Longest LIS",
    "url": "https://codeforces.com/problemset/problem/1304/D",
    "history": "Gildong recently learned how to find the longest increasing subsequence ( LIS) in O( nlogn) time for a sequence of length n . He wants to test himself if he can implement it correctly, but he couldn' t find any online judges that would do it ( even though there are actually many of them) . So instead he' s going to make a quiz for you about making permutations of n distinct integers between 1 and n , inclusive, to test his code with your output. The quiz is as follows. Gildong provides a string of length n- 1 , consisting of characters ' < ' and ' > ' only. The i - th ( 1- indexed) character is the comparison result between the i - th element and the i+ 1 - st element of the sequence. If the i - th character of the string is ' < ' , then the i - th element of the sequence is less than the i+ 1 - st element. If the i - th character of the string is ' > ' , then the i - th element of the sequence is greater than the i+ 1 - st element. He wants you to find two possible sequences ( not necessarily distinct) consisting of n distinct integers between 1 and n , inclusive, each satisfying the comparison results, where the length of the LIS of the first sequence is minimum possible, and the length of the LIS of the second sequence is maximum possible.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Each test case contains exactly one line, consisting of an integer and a string consisting of characters ' < ' and ' > ' only. The integer is n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) , the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is n- 1 . It is guaranteed that the sum of all n in all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print two lines with n integers each. The first line is the sequence with the minimum length of the LIS, and the second line is the sequence with the maximum length of the LIS. If there are multiple answers, print any one of them. Each sequence should contain all integers between 1 and n , inclusive, and should satisfy the comparison results. It can be shown that at least one answer always exists.",
    "note": "In the first case, 1 2 3 is the only possible answer. In the second case, the shortest length of the LIS is 2 , and the longest length of the LIS is 3 . In the example of the maximum LIS sequence, 4 ' 3 ' 1 7 ' 5 ' 2 ' 6 ' can be one of the possible LIS.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "two pointers"
    ],
    "id": "1304D"
  },
  {
    "title": "Super Jaber",
    "url": "https://codeforces.com/problemset/problem/1301/F",
    "history": "Jaber is a superhero in a large country that can be described as a grid with n rows and m columns, where every cell in that grid contains a different city. Jaber gave every city in that country a specific color between 1 and k . In one second he can go from the current city to any of the cities adjacent by the side or to any city with the same color as the current city color. Jaber has to do q missions. In every mission he will be in the city at row r_ 1 and column c_ 1 , and he should help someone in the city at row r_ 2 and column c_ 2 . Jaber wants your help to tell him the minimum possible time to go from the starting city to the finishing city for every mission.",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n, m \u2264 1000 , 1 \u2264 k \u2264 min( 40 , n \u00b7 m) ) \u2014 the number of rows, columns and colors. Each of the next n lines contains m integers. In the i - th line, the j - th integer is a_ ij ( 1 \u2264 a_ ij\u2264 k ) , which is the color assigned to the city in the i - th row and j - th column. The next line contains one integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of missions. For the next q lines, every line contains four integers r_ 1 , c_ 1 , r_ 2 , c_ 2 ( 1 \u2264 r_ 1 , r_ 2 \u2264 n , 1 \u2264 c_ 1 , c_ 2 \u2264 m ) \u2014 the coordinates of the starting and the finishing cities of the corresponding mission. It is guaranteed that for every color between 1 and k there is at least one city of that color.",
    "output": "For every mission print the minimum possible time to reach city at the cell ( r_ 2, c_ 2) starting from city at the cell ( r_ 1, c_ 1) .",
    "note": "In the first example: mission 1 : Jaber should go from the cell ( 1, 1) to the cell ( 3, 3) because they have the same colors, then from the cell ( 3, 3) to the cell ( 3, 4) because they are adjacent by side ( two moves in total) ; mission 2 : Jaber already starts in the finishing cell. In the second example: mission 1 : ( 1, 1) \u2192 ( 1, 2) \u2192 ( 2, 2) ; mission 2 : ( 1, 1) \u2192 ( 3, 2) \u2192 ( 3, 3) \u2192 ( 3, 4) ; mission 3 : ( 1, 1) \u2192 ( 3, 2) \u2192 ( 3, 3) \u2192 ( 2, 4) ; mission 4 : ( 1, 1) \u2192 ( 1, 2) \u2192 ( 1, 3) \u2192 ( 1, 4) \u2192 ( 4, 4) .",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "1301F"
  },
  {
    "title": "Time to Run",
    "url": "https://codeforces.com/problemset/problem/1301/D",
    "history": "Bashar was practicing for the national programming contest. Because of sitting too much in front of the computer without doing physical movements and eating a lot Bashar became much fatter. Bashar is going to quit programming after the national contest and he is going to become an actor ( just like his father) , so he should lose weight. In order to lose weight, Bashar is going to run for k kilometers. Bashar is going to run in a place that looks like a grid of n rows and m columns. In this grid there are two one- way roads of one- kilometer length between each pair of adjacent by side cells, one road is going from the first cell to the second one, and the other road is going from the second cell to the first one. So, there are exactly ( 4 n m - 2n - 2m) roads. Let' s take, for example, n = 3 and m = 4 . In this case, there are 34 roads. It is the picture of this case ( arrows describe roads) : Bashar wants to run by these rules: He starts at the top- left cell in the grid; In one move Bashar may go up ( the symbol ' U' ) , down ( the symbol ' D' ) , left ( the symbol ' L' ) or right ( the symbol ' R' ) . More formally, if he stands in the cell in the row i and in the column j , i. e. in the cell ( i, j) he will move to: in the case ' U' to the cell ( i- 1, j) ; in the case ' D' to the cell ( i+ 1, j) ; in the case ' L' to the cell ( i, j- 1) ; in the case ' R' to the cell ( i, j+ 1) ; He wants to run exactly k kilometers, so he wants to make exactly k moves; Bashar can finish in any cell of the grid; He can' t go out of the grid so at any moment of the time he should be on some cell; Bashar doesn' t want to get bored while running so he must not visit the same road twice. But he can visit the same cell any number of times. Bashar asks you if it is possible to run by such rules. If it is possible, you should tell him how should he run. You should give him a steps to do and since Bashar can' t remember too many steps, a should not exceed 3000 . In every step, you should give him an integer f and a string of moves s of length at most 4 which means that he should repeat the moves in the string s for f times. He will perform the steps in the order you print them. For example, if the steps are 2 RUD, 3 UUL then the moves he is going to move are RUD + RUD + UUL + UUL + UUL = RUDRUDUULUULUUL. Can you help him and give him a correct sequence of moves such that the total distance he will run is equal to k kilometers or say, that it is impossible?",
    "input": "The only line contains three integers n , m and k ( 1 \u2264 n, m \u2264 500 , 1 \u2264 k \u2264 10 ^ 9 ) , which are the number of rows and the number of columns in the grid and the total distance Bashar wants to run.",
    "output": "If there is no possible way to run k kilometers, print \" NO\" ( without quotes) , otherwise print \" YES\" ( without quotes) in the first line. If the answer is \" YES\" , on the second line print an integer a ( 1 \u2264 a \u2264 3000 ) \u2014 the number of steps, then print a lines describing the steps. To describe a step, print an integer f ( 1 \u2264 f \u2264 10^ 9 ) and a string of moves s of length at most 4 . Every character in s should be ' U' , ' D' , ' L' or ' R' . Bashar will start from the top- left cell. Make sure to move exactly k moves without visiting the same road twice and without going outside the grid. He can finish at any cell. We can show that if it is possible to run exactly k kilometers, then it is possible to describe the path under such output constraints.",
    "note": "The moves Bashar is going to move in the first example are: \" RRLL\" . It is not possible to run 1000000000 kilometers in the second example because the total length of the roads is smaller and Bashar can' t run the same road twice. The moves Bashar is going to move in the third example are: \" RRDDLLRR\" . The moves Bashar is going to move in the fifth example are: \" RRRLLLDRRRDULLLD\" . It is the picture of his run ( the roads on this way are marked with red and numbered in the order of his running) :",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "1301D"
  },
  {
    "title": "Around the World",
    "url": "https://codeforces.com/problemset/problem/1299/D",
    "history": "Guy- Manuel and Thomas are planning 144 trips around the world. You are given a simple weighted undirected connected graph with n vertexes and m edges with the following restriction: there isn' t any simple cycle ( i. e. a cycle which doesn' t pass through any vertex more than once) of length greater than 3 which passes through the vertex 1 . The cost of a path ( not necessarily simple) in this graph is defined as the XOR of weights of all edges in that path with each edge being counted as many times as the path passes through it. But the trips with cost 0 aren' t exciting. You may choose any subset of edges incident to the vertex 1 and remove them. How many are there such subsets, that, when removed, there is not any nontrivial cycle with the cost equal to 0 which passes through the vertex 1 in the resulting graph? A cycle is called nontrivial if it passes through some edge odd number of times. As the answer can be very big, output it modulo 10^ 9+ 7 .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of vertexes and edges in the graph. The i - th of the next m lines contains three integers a_ i , b_ i and w_ i ( 1 \u2264 a_ i, b_ i \u2264 n, a_ i = \u0338 b_ i, 0 \u2264 w_ i < 32 ) \u2014 the endpoints of the i - th edge and its weight. It' s guaranteed there aren' t any multiple edges, the graph is connected and there isn' t any simple cycle of length greater than 3 which passes through the vertex 1 .",
    "output": "Output the answer modulo 10^ 9+ 7 .",
    "note": "The pictures below represent the graphs from examples. In the first example, there aren' t any nontrivial cycles with cost 0 , so we can either remove or keep the only edge incident to the vertex 1 . In the second example, if we don' t remove the edge 1- 2 , then there is a cycle 1- 2- 4- 5- 2- 1 with cost 0 ; also if we don' t remove the edge 1- 3 , then there is a cycle 1- 3- 2- 4- 5- 2- 3- 1 of cost 0 . The only valid subset consists of both edges. In the third example, all subsets are valid except for those two in which both edges 1- 3 and 1- 4 are kept.",
    "topics": [
      "bitmasks",
      "combinatorics",
      "dfs and similar",
      "dp",
      "graphs",
      "graphs",
      "math",
      "trees"
    ],
    "id": "1299D"
  },
  {
    "title": "String Coloring (easy version)",
    "url": "https://codeforces.com/problemset/problem/1296/E1",
    "history": "This is an easy version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different. You are given a string s consisting of n lowercase Latin letters. You have to color all its characters one of the two colors ( each character to exactly one color, the same letters can be colored the same or different colors, i. e. you can choose exactly one color for each index in s ) . After coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary ( possibly, zero) number of times. The goal is to make the string sorted, i. e. all characters should be in alphabetical order. Your task is to say if it is possible to color the given string so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 200 ) \u2014 the length of s . The second line of the input contains the string s consisting of exactly n lowercase Latin letters.",
    "output": "If it is impossible to color the given string so that after coloring it can become sorted by some sequence of swaps, print \" NO\" ( without quotes) in the first line. Otherwise, print \" YES\" in the first line and any correct coloring in the second line ( the coloring is the string consisting of n characters, the i - th character should be ' 0' if the i - th character is colored the first color and ' 1' otherwise) .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1296E1"
  },
  {
    "title": "Chaotic V.",
    "url": "https://codeforces.com/problemset/problem/1292/D",
    "history": "\u00c6sir - CHAOS \u00c6sir - V. \" Everything has been planned out. No more hidden concerns. The condition of Cytus is also perfect. The time right now. . . . . . 00: 01: 12. . . . . . It' s time. \" The emotion samples are now sufficient. After almost 3 years, it' s time for Ivy to awake her bonded sister, Vanessa. The system inside A. R. C. ' s Library core can be considered as an undirected graph with infinite number of processing nodes, numbered with all positive integers ( 1, 2, 3, . . . ) . The node with a number x ( x > 1 ) , is directly connected with a node with number x/ f( x) , with f( x) being the lowest prime divisor of x . Vanessa' s mind is divided into n fragments. Due to more than 500 years of coma, the fragments have been scattered: the i - th fragment is now located at the node with a number k_ i! ( a factorial of k_ i ) . To maximize the chance of successful awakening, Ivy decides to place the samples in a node P , so that the total length of paths from each fragment to P is smallest possible. If there are multiple fragments located at the same node, the path from that node to P needs to be counted multiple times. In the world of zeros and ones, such a requirement is very simple for Ivy. Not longer than a second later, she has already figured out such a node. But for a mere human like you, is this still possible? For simplicity, please answer the minimal sum of paths' lengths from every fragment to the emotion samples' assembly node P .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 number of fragments of Vanessa' s mind. The second line contains n integers: k_ 1, k_ 2, . . . , k_ n ( 0 \u2264 k_ i \u2264 5000 ) , denoting the nodes where fragments of Vanessa' s mind are located: the i - th fragment is at the node with a number k_ i! .",
    "output": "Print a single integer, denoting the minimal sum of path from every fragment to the node with the emotion samples ( a. k. a. node P ) . As a reminder, if there are multiple fragments at the same node, the distance from that node to P needs to be counted multiple times as well.",
    "note": "Considering the first 24 nodes of the system, the node network will look as follows ( the nodes 1! , 2! , 3! , 4! are drawn bold) : For the first example, Ivy will place the emotion samples at the node 1 . From here: The distance from Vanessa' s first fragment to the node 1 is 1 . The distance from Vanessa' s second fragment to the node 1 is 0 . The distance from Vanessa' s third fragment to the node 1 is 4 . The total length is 5 . For the second example, the assembly node will be 6 . From here: The distance from Vanessa' s first fragment to the node 6 is 0 . The distance from Vanessa' s second fragment to the node 6 is 2 . The distance from Vanessa' s third fragment to the node 6 is 2 . The distance from Vanessa' s fourth fragment to the node 6 is again 2 . The total path length is 6 .",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "math",
      "number theory",
      "trees"
    ],
    "id": "1292D"
  },
  {
    "title": "Coffee Varieties (easy version)",
    "url": "https://codeforces.com/problemset/problem/1291/F",
    "history": "This is the easy version of the problem. You can find the hard version in the Div. 1 contest. Both versions only differ in the number of times you can ask your friend to taste coffee. This is an interactive problem. You' re considering moving to another city, where one of your friends already lives. There are n cafe\u0301s in this city, where n is a power of two. The i - th cafe\u0301 produces a single variety of coffee a_ i . As you' re a coffee- lover, before deciding to move or not, you want to know the number d of distinct varieties of coffees produced in this city. You don' t know the values a_ 1, . . . , a_ n . Fortunately, your friend has a memory of size k , where k is a power of two. Once per day, you can ask him to taste a cup of coffee produced by the cafe\u0301 c , and he will tell you if he tasted a similar coffee during the last k days. You can also ask him to take a medication that will reset his memory. He will forget all previous cups of coffee tasted. You can reset his memory at most 30 000 times. More formally, the memory of your friend is a queue S . Doing a query on cafe\u0301 c will: Tell you if a_ c is in S ; Add a_ c at the back of S ; If | S| > k , pop the front element of S . Doing a reset request will pop all elements out of S . Your friend can taste at most 2n^ 2k cups of coffee in total. Find the diversity d ( number of distinct values in the array a ) . Note that asking your friend to reset his memory does not count towards the number of times you ask your friend to taste a cup of coffee. In some test cases the behavior of the interactor is adaptive. It means that the array a may be not fixed before the start of the interaction and may depend on your queries. It is guaranteed that at any moment of the interaction, there is at least one array a consistent with all the answers given so far. InteractionYou begin the interaction by reading n and k . To ask your friend to taste a cup of coffee produced by the cafe\u0301 c , in a separate line output? c Where c must satisfy 1 \u2264 c \u2264 n . Don' t forget to flush, to get the answer. In response, you will receive a single letter Y ( yes) or N ( no) , telling you if variety a_ c is one of the last k varieties of coffee in his memory. To reset the memory of your friend, in a separate line output the single letter R in upper case. You can do this operation at most 30 000 times. When you determine the number d of different coffee varieties, output! d In case your query is invalid, you asked more than 2n^ 2/ k queries of type ? or you asked more than 30 000 queries of type R, the program will print the letter E and will finish interaction. You will receive a Wrong Answer verdict. Make sure to exit immediately to avoid getting other verdicts. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Hack formatThe first line should contain the word fixedThe second line should contain two integers n and k , separated by space ( 1 \u2264 k \u2264 n \u2264 1024 , k and n are powers of two) . It must hold that 2n^ 2k\u2264 20 000 . The third line should contain n integers a_ 1, a_ 2, . . . , a_ n , separated by spaces ( 1 \u2264 a_ i \u2264 n ) .",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 1024 , k and n are powers of two) . It is guaranteed that 2n^ 2k\u2264 20 000 .",
    "output": "",
    "note": "In the first example, the array is a = [ 1, 4, 1, 3] . The city produces 3 different varieties of coffee ( 1 , 3 and 4 ) . The successive varieties of coffee tasted by your friend are 1, 4, 1, 3, 3, 1, 4 ( bold answers correspond to Y answers) . Note that between the two ? 4 asks, there is a reset memory request R, so the answer to the second ? 4 ask is N. Had there been no reset memory request, the answer to the second ? 4 ask is Y. In the second example, the array is a = [ 1, 2, 3, 4, 5, 6, 6, 6] . The city produces 6 different varieties of coffee. The successive varieties of coffee tasted by your friend are 2, 6, 4, 5, 2, 5 .",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1291F"
  },
  {
    "title": "Coffee Varieties (hard version)",
    "url": "https://codeforces.com/problemset/problem/1290/D",
    "history": "This is the hard version of the problem. You can find the easy version in the Div. 2 contest. Both versions only differ in the number of times you can ask your friend to taste coffee. This is an interactive problem. You' re considering moving to another city, where one of your friends already lives. There are n cafe\u0301s in this city, where n is a power of two. The i - th cafe\u0301 produces a single variety of coffee a_ i . As you' re a coffee- lover, before deciding to move or not, you want to know the number d of distinct varieties of coffees produced in this city. You don' t know the values a_ 1, . . . , a_ n . Fortunately, your friend has a memory of size k , where k is a power of two. Once per day, you can ask him to taste a cup of coffee produced by the cafe\u0301 c , and he will tell you if he tasted a similar coffee during the last k days. You can also ask him to take a medication that will reset his memory. He will forget all previous cups of coffee tasted. You can reset his memory at most 30 000 times. More formally, the memory of your friend is a queue S . Doing a query on cafe\u0301 c will: Tell you if a_ c is in S ; Add a_ c at the back of S ; If | S| > k , pop the front element of S . Doing a reset request will pop all elements out of S . Your friend can taste at most 3n^ 22k cups of coffee in total. Find the diversity d ( number of distinct values in the array a ) . Note that asking your friend to reset his memory does not count towards the number of times you ask your friend to taste a cup of coffee. In some test cases the behavior of the interactor is adaptive. It means that the array a may be not fixed before the start of the interaction and may depend on your queries. It is guaranteed that at any moment of the interaction, there is at least one array a consistent with all the answers given so far. InteractionYou begin the interaction by reading n and k . To ask your friend to taste a cup of coffee produced by the cafe\u0301 c , in a separate line output? c Where c must satisfy 1 \u2264 c \u2264 n . Don' t forget to flush, to get the answer. In response, you will receive a single letter Y ( yes) or N ( no) , telling you if variety a_ c is one of the last k varieties of coffee in his memory. To reset the memory of your friend, in a separate line output the single letter R in upper case. You can do this operation at most 30 000 times. When you determine the number d of different coffee varieties, output! d In case your query is invalid, you asked more than 3n^ 2/ 2k queries of type ? or you asked more than 30 000 queries of type R, the program will print the letter E and will finish interaction. You will receive a Wrong Answer verdict. Make sure to exit immediately to avoid getting other verdicts. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Hack formatThe first line should contain the word fixedThe second line should contain two integers n and k , separated by space ( 1 \u2264 k \u2264 n \u2264 1024 , k and n are powers of two) . It must hold that 3n^ 22k\u2264 15 000 . The third line should contain n integers a_ 1, a_ 2, . . . , a_ n , separated by spaces ( 1 \u2264 a_ i \u2264 n ) .",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 1024 , k and n are powers of two) . It is guaranteed that 3n^ 22k\u2264 15 000 .",
    "output": "",
    "note": "In the first example, the array is a = [ 1, 4, 1, 3] . The city produces 3 different varieties of coffee ( 1 , 3 and 4 ) . The successive varieties of coffee tasted by your friend are 1, 4, 1, 3, 3, 1, 4 ( bold answers correspond to Y answers) . Note that between the two ? 4 asks, there is a reset memory request R, so the answer to the second ? 4 ask is N. Had there been no reset memory request, the answer to the second ? 4 ask is Y. In the second example, the array is a = [ 1, 2, 3, 4, 5, 6, 6, 6] . The city produces 6 different varieties of coffee. The successive varieties of coffee tasted by your friend are 2, 6, 4, 5, 2, 5 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "interactive"
    ],
    "id": "1290D"
  },
  {
    "title": "Prefix Enlightenment",
    "url": "https://codeforces.com/problemset/problem/1290/C",
    "history": "There are n lamps on a line, numbered from 1 to n . Each one has an initial state off ( 0 ) or on ( 1 ) . You' re given k subsets A_ 1, . . . , A_ k of { 1, 2, . . . , n} , such that the intersection of any three subsets is empty. In other words, for all 1 \u2264 i_ 1 < i_ 2 < i_ 3 \u2264 k , A_ i_ 1\u2229 A_ i_ 2\u2229 A_ i_ 3 = \u2205 . In one operation, you can choose one of these k subsets and switch the state of all lamps in it. It is guaranteed that, with the given subsets, it' s possible to make all lamps be simultaneously on using this type of operation. Let m_ i be the minimum number of operations you have to do in order to make the i first lamps be simultaneously on. Note that there is no condition upon the state of other lamps ( between i+ 1 and n ) , they can be either off or on. You have to compute m_ i for all 1 \u2264 i \u2264 n .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 3 \u00b7 10^ 5 ) . The second line contains a binary string of length n , representing the initial state of each lamp ( the lamp i is off if s_ i = 0 , on if s_ i = 1 ) . The description of each one of the k subsets follows, in the following format: The first line of the description contains a single integer c ( 1 \u2264 c \u2264 n ) \u2014 the number of elements in the subset. The second line of the description contains c distinct integers x_ 1, . . . , x_ c ( 1 \u2264 x_ i \u2264 n ) \u2014 the elements of the subset. It is guaranteed that: The intersection of any three subsets is empty; It' s possible to make all lamps be simultaneously on using some operations.",
    "output": "You must output n lines. The i - th line should contain a single integer m_ i \u2014 the minimum number of operations required to make the lamps 1 to i be simultaneously on.",
    "note": "In the first example: For i = 1 , we can just apply one operation on A_ 1 , the final states will be 1010110 ; For i = 2 , we can apply operations on A_ 1 and A_ 3 , the final states will be 1100110 ; For i \u2265 3 , we can apply operations on A_ 1 , A_ 2 and A_ 3 , the final states will be 1111111 . In the second example: For i \u2264 6 , we can just apply one operation on A_ 2 , the final states will be 11111101 ; For i \u2265 7 , we can apply operations on A_ 1, A_ 3, A_ 4, A_ 6 , the final states will be 11111111 .",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1290C"
  },
  {
    "title": "Numbers on Tree",
    "url": "https://codeforces.com/problemset/problem/1286/B",
    "history": "Evlampiy was gifted a rooted tree. The vertices of the tree are numbered from 1 to n . Each of its vertices also has an integer a_ i written on it. For each vertex i , Evlampiy calculated c_ i \u2014 the number of vertices j in the subtree of vertex i , such that a_ j < a_ i . Illustration for the second example, the first integer is a_ i and the integer in parentheses is c_ i After the new year, Evlampiy could not remember what his gift was! He remembers the tree and the values of c_ i , but he completely forgot which integers a_ i were written on the vertices. Help him to restore initial integers!",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of vertices in the tree. The next n lines contain descriptions of vertices: the i - th line contains two integers p_ i and c_ i ( 0 \u2264 p_ i \u2264 n ; 0 \u2264 c_ i \u2264 n- 1 ) , where p_ i is the parent of vertex i or 0 if vertex i is root, and c_ i is the number of vertices j in the subtree of vertex i , such that a_ j < a_ i . It is guaranteed that the values of p_ i describe a rooted tree with n vertices.",
    "output": "If a solution exists, in the first line print \" YES\" , and in the second line output n integers a_ i ( 1 \u2264 a_ i \u226410^ 9) . If there are several solutions, output any of them. One can prove that if there is a solution, then there is also a solution in which all a_ i are between 1 and 10^ 9 . If there are no solutions, print \" NO\" .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1286B"
  },
  {
    "title": "Delete a Segment",
    "url": "https://codeforces.com/problemset/problem/1285/E",
    "history": "There are n segments on a Ox axis [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] . Segment [ l, r] covers all points from l to r inclusive, so all x such that l \u2264 x \u2264 r . Segments can be placed arbitrarily \u2014 be inside each other, coincide and so on. Segments can degenerate into points, that is l_ i= r_ i is possible. Union of the set of segments is such a set of segments which covers exactly the same set of points as the original set. For example: if n= 3 and there are segments [ 3, 6] , [ 100, 100] , [ 5, 8] then their union is 2 segments: [ 3, 8] and [ 100, 100] ; if n= 5 and there are segments [ 1, 2] , [ 2, 3] , [ 4, 5] , [ 4, 6] , [ 6, 6] then their union is 2 segments: [ 1, 3] and [ 4, 6] . Obviously, a union is a set of pairwise non- intersecting segments. You are asked to erase exactly one segment of the given n so that the number of segments in the union of the rest n- 1 segments is maximum possible. For example, if n= 4 and there are segments [ 1, 4] , [ 2, 3] , [ 3, 6] , [ 5, 7] , then: erasing the first segment will lead to [ 2, 3] , [ 3, 6] , [ 5, 7] remaining, which have 1 segment in their union; erasing the second segment will lead to [ 1, 4] , [ 3, 6] , [ 5, 7] remaining, which have 1 segment in their union; erasing the third segment will lead to [ 1, 4] , [ 2, 3] , [ 5, 7] remaining, which have 2 segments in their union; erasing the fourth segment will lead to [ 1, 4] , [ 2, 3] , [ 3, 6] remaining, which have 1 segment in their union. Thus, you are required to erase the third segment to get answer 2 . Write a program that will find the maximum number of segments in the union of n- 1 segments if you erase any of the given n segments. Note that if there are multiple equal segments in the given set, then you can erase only one of them anyway. So the set after erasing will have exactly n- 1 segments.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then the descriptions of t test cases follow. The first of each test case contains a single integer n ( 2 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of segments in the given set. Then n lines follow, each contains a description of a segment \u2014 a pair of integers l_ i , r_ i ( - 10^ 9 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) , where l_ i and r_ i are the coordinates of the left and right borders of the i - th segment, respectively. The segments are given in an arbitrary order. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "Print t integers \u2014 the answers to the t given test cases in the order of input. The answer is the maximum number of segments in the union of n- 1 segments if you erase any of the given n segments.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dp",
      "graphs",
      "sortings",
      "trees",
      "two pointers"
    ],
    "id": "1285E"
  },
  {
    "title": "Seollal",
    "url": "https://codeforces.com/problemset/problem/1284/G",
    "history": "It is only a few days until Seollal ( Korean Lunar New Year) , and Jaehyun has invited his family to his garden. There are kids among the guests. To make the gathering more fun for the kids, Jaehyun is going to run a game of hide- and- seek. The garden can be represented by a n \u00d7 m grid of unit cells. Some ( possibly zero) cells are blocked by rocks, and the remaining cells are free. Two cells are neighbors if they share an edge. Each cell has up to 4 neighbors: two in the horizontal direction and two in the vertical direction. Since the garden is represented as a grid, we can classify the cells in the garden as either \" black\" or \" white\" . The top- left cell is black, and two cells which are neighbors must be different colors. Cell indices are 1- based, so the top- left corner of the garden is cell ( 1, 1) . Jaehyun wants to turn his garden into a maze by placing some walls between two cells. Walls can only be placed between neighboring cells. If the wall is placed between two neighboring cells a and b , then the two cells a and b are not neighboring from that point. One can walk directly between two neighboring cells if and only if there is no wall directly between them. A maze must have the following property. For each pair of free cells in the maze, there must be exactly one simple path between them. A simple path between cells a and b is a sequence of free cells in which the first cell is a , the last cell is b , all cells are distinct, and any two consecutive cells are neighbors which are not directly blocked by a wall. At first, kids will gather in cell ( 1, 1) , and start the hide- and- seek game. A kid can hide in a cell if and only if that cell is free, it is not ( 1, 1) , and has exactly one free neighbor. Jaehyun planted roses in the black cells, so it' s dangerous if the kids hide there. So Jaehyun wants to create a maze where the kids can only hide in white cells. You are given the map of the garden as input. Your task is to help Jaehyun create a maze.",
    "input": "Your program will be judged in multiple test cases. The first line contains the number of test cases t . ( 1 \u2264 t \u2264 100 ) . Afterward, t test cases with the described format will be given. The first line of a test contains two integers n, m ( 2 \u2264 n, m \u2264 20 ) , the size of the grid. In the next n line of a test contains a string of length m , consisting of the following characters ( without any whitespace) : O: A free cell. X: A rock. It is guaranteed that the first cell ( cell ( 1, 1) ) is free, and every free cell is reachable from ( 1, 1) . If t \u2265 2 is satisfied, then the size of the grid will satisfy n \u2264 10, m \u2264 10 . In other words, if any grid with size n > 10 or m > 10 is given as an input, then it will be the only input on the test case ( t = 1 ) .",
    "output": "For each test case, print the following: If there are no possible mazes, print a single line NO. Otherwise, print a single line YES, followed by a grid of size ( 2n- 1) \u00d7 ( 2m- 1) denoting the found maze. The rules for displaying the maze follows. All cells are indexed in 1- base. For all 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m , if the cell ( i, j) is free cell, print ' O' in the cell ( 2i- 1, 2j- 1) . Otherwise, print ' X' in the cell ( 2i- 1, 2j- 1) . For all 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m- 1 , if the neighboring cell ( i, j) , ( i, j+ 1) have wall blocking it, print ' ' in the cell ( 2i- 1, 2j) . Otherwise, print any printable character except spaces in the cell ( 2i- 1, 2j) . A printable character has an ASCII code in range [ 32, 126] : This includes spaces and alphanumeric characters. For all 1 \u2264 i \u2264 n- 1, 1 \u2264 j \u2264 m , if the neighboring cell ( i, j) , ( i+ 1, j) have wall blocking it, print ' ' in the cell ( 2i, 2j- 1) . Otherwise, print any printable character except spaces in the cell ( 2i, 2j- 1) For all 1 \u2264 i \u2264 n- 1, 1 \u2264 j \u2264 m- 1 , print any printable character in the cell ( 2i, 2j) . Please, be careful about trailing newline characters or spaces. Each row of the grid should contain exactly 2m- 1 characters, and rows should be separated by a newline character. Trailing spaces must not be omitted in a row.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "1284G"
  },
  {
    "title": "New Year and Social Network",
    "url": "https://codeforces.com/problemset/problem/1284/F",
    "history": "Donghyun' s new social network service ( SNS) contains n users numbered 1, 2, . . . , n . Internally, their network is a tree graph, so there are n- 1 direct connections between each user. Each user can reach every other users by using some sequence of direct connections. From now on, we will denote this primary network as T_ 1 . To prevent a possible server breakdown, Donghyun created a backup network T_ 2 , which also connects the same n users via a tree graph. If a system breaks down, exactly one edge e \u2208 T_ 1 becomes unusable. In this case, Donghyun will protect the edge e by picking another edge f \u2208 T_ 2 , and add it to the existing network. This new edge should make the network be connected again. Donghyun wants to assign a replacement edge f \u2208 T_ 2 for as many edges e \u2208 T_ 1 as possible. However, since the backup network T_ 2 is fragile, f \u2208 T_ 2 can be assigned as the replacement edge for at most one edge in T_ 1 . With this restriction, Donghyun wants to protect as many edges in T_ 1 as possible. Formally, let E( T) be an edge set of the tree T . We consider a bipartite graph with two parts E( T_ 1) and E( T_ 2) . For e \u2208 E( T_ 1) , f \u2208 E( T_ 2) , there is an edge connecting { e, f} if and only if graph T_ 1 - { e} + { f} is a tree. You should find a maximum matching in this bipartite graph.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 250 000 ) , the number of users. In the next n- 1 lines, two integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in T_ 1 . In the next n- 1 lines, two integers c_ i , d_ i ( 1 \u2264 c_ i, d_ i \u2264 n ) are given. Those two numbers denote the indices of the vertices connected by the corresponding edge in T_ 2 . It is guaranteed that both edge sets form a tree of size n .",
    "output": "In the first line, print the number m ( 0 \u2264 m < n ) , the maximum number of edges that can be protected. In the next m lines, print four integers a_ i, b_ i, c_ i, d_ i . Those four numbers denote that the edge ( a_ i, b_ i) in T_ 1 is will be replaced with an edge ( c_ i, d_ i) in T_ 2 . All printed edges should belong to their respective network, and they should link to distinct edges in their respective network. If one removes an edge ( a_ i, b_ i) from T_ 1 and adds edge ( c_ i, d_ i) from T_ 2 , the network should remain connected. The order of printing the edges or the order of vertices in each edge does not matter. If there are several solutions, you can print any.",
    "note": "",
    "topics": [
      "data structures",
      "graph matchings",
      "graphs",
      "math",
      "trees"
    ],
    "id": "1284F"
  },
  {
    "title": "Christmas Trees",
    "url": "https://codeforces.com/problemset/problem/1283/D",
    "history": "There are n Christmas trees on an infinite number line. The i - th tree grows at the position x_ i . All x_ i are guaranteed to be distinct. Each integer point can be either occupied by the Christmas tree, by the human or not occupied at all. Non- integer points cannot be occupied by anything. There are m people who want to celebrate Christmas. Let y_ 1, y_ 2, . . . , y_ m be the positions of people ( note that all values x_ 1, x_ 2, . . . , x_ n, y_ 1, y_ 2, . . . , y_ m should be distinct and all y_ j should be integer) . You want to find such an arrangement of people that the value \u2211_ j= 1^ mmin_ i= 1^ n| x_ i - y_ j| is the minimum possible ( in other words, the sum of distances to the nearest Christmas tree for all people should be minimized) . In other words, let d_ j be the distance from the j - th human to the nearest Christmas tree ( d_ j = min_ i= 1^ n | y_ j - x_ i| ) . Then you need to choose such positions y_ 1, y_ 2, . . . , y_ m that \u2211_ j= 1^ m d_ j is the minimum possible.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of Christmas trees and the number of people. The second line of the input contains n integers x_ 1, x_ 2, . . . , x_ n ( - 10^ 9 \u2264 x_ i \u2264 10^ 9 ) , where x_ i is the position of the i - th Christmas tree. It is guaranteed that all x_ i are distinct.",
    "output": "In the first line print one integer res \u2014 the minimum possible value of \u2211_ j= 1^ mmin_ i= 1^ n| x_ i - y_ j| ( in other words, the sum of distances to the nearest Christmas tree for all people) . In the second line print m integers y_ 1, y_ 2, . . . , y_ m ( - 2 \u00b7 10^ 9 \u2264 y_ j \u2264 2 \u00b7 10^ 9 ) , where y_ j is the position of the j - th human. All y_ j should be distinct and all values x_ 1, x_ 2, . . . , x_ n, y_ 1, y_ 2, . . . , y_ m should be distinct. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1283D"
  },
  {
    "title": "The Cake Is a Lie",
    "url": "https://codeforces.com/problemset/problem/1282/E",
    "history": "We are committed to the well being of all participants. Therefore, instead of the problem, we suggest you enjoy a piece of cake. Uh oh. Somebody cut the cake. We told them to wait for you, but they did it anyway. There is still some left, though, if you hurry back. Of course, before you taste the cake, you thought about how the cake was cut. It is known that the cake was originally a regular n - sided polygon, each vertex of which had a unique number from 1 to n . The vertices were numbered in random order. Each piece of the cake is a triangle. The cake was cut into n - 2 pieces as follows: each time one cut was made with a knife ( from one vertex to another) such that exactly one triangular piece was separated from the current cake, and the rest continued to be a convex polygon. In other words, each time three consecutive vertices of the polygon were selected and the corresponding triangle was cut off. A possible process of cutting the cake is presented in the picture below. Example of 6- sided cake slicing. You are given a set of n- 2 triangular pieces in random order. The vertices of each piece are given in random order \u2014 clockwise or counterclockwise. Each piece is defined by three numbers \u2014 the numbers of the corresponding n - sided cake vertices. For example, for the situation in the picture above, you could be given a set of pieces: [ 3, 6, 5] , [ 5, 2, 4] , [ 5, 4, 6] , [ 6, 3, 1] . You are interested in two questions. What was the enumeration of the n - sided cake vertices? In what order were the pieces cut? Formally, you have to find two permutations p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) and q_ 1, q_ 2, . . . , q_ n - 2 ( 1 \u2264 q_ i \u2264 n - 2 ) such that if the cake vertices are numbered with the numbers p_ 1, p_ 2, . . . , p_ n in order clockwise or counterclockwise, then when cutting pieces of the cake in the order q_ 1, q_ 2, . . . , q_ n - 2 always cuts off a triangular piece so that the remaining part forms one convex polygon. For example, in the picture above the answer permutations could be: p= [ 2, 4, 6, 1, 3, 5] ( or any of its cyclic shifts, or its reversal and after that any cyclic shift) and q= [ 2, 4, 1, 3] . Write a program that, based on the given triangular pieces, finds any suitable permutations p and q .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then there are t independent sets of input data. The first line of each set consists of a single integer n ( 3 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices in the cake. The following n - 2 lines describe the numbers of the pieces vertices: each line consists of three different integers a, b, c ( 1 \u2264 a, b, c \u2264 n ) \u2014 the numbers of the pieces vertices of cake given in random order. The pieces are given in random order. It is guaranteed that the answer to each of the tests exists. It is also guaranteed that the sum of n for all test cases does not exceed 10^ 5 .",
    "output": "Print 2t lines \u2014 answers to given t test cases in the order in which they are written in the input. Each answer should consist of 2 lines. In the first line of an answer on a test case print n distinct numbers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the numbers of the cake vertices in clockwise or counterclockwise order. In the second line of an answer on a test case print n - 2 distinct numbers q_ 1, q_ 2, . . . , q_ n - 2 ( 1 \u2264 q_ i \u2264 n - 2 ) \u2014 the order of cutting pieces of the cake. The number of a piece of the cake corresponds to its number in the input. If there are several answers, print any. It is guaranteed that the answer to each of the tests exists.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs"
    ],
    "id": "1282E"
  },
  {
    "title": "Jeremy Bearimy",
    "url": "https://codeforces.com/problemset/problem/1280/C",
    "history": "Welcome! Everything is fine. You have arrived in The Medium Place, the place between The Good Place and The Bad Place. You are assigned a task that will either make people happier or torture them for eternity. You have a list of k pairs of people who have arrived in a new inhabited neighborhood. You need to assign each of the 2k people into one of the 2k houses. Each person will be the resident of exactly one house, and each house will have exactly one resident. Of course, in the neighborhood, it is possible to visit friends. There are 2k - 1 roads, each of which connects two houses. It takes some time to traverse a road. We will specify the amount of time it takes in the input. The neighborhood is designed in such a way that from anyone' s house, there is exactly one sequence of distinct roads you can take to any other house. In other words, the graph with the houses as vertices and the roads as edges is a tree. The truth is, these k pairs of people are actually soulmates. We index them from 1 to k . We denote by f( i) the amount of time it takes for the i - th pair of soulmates to go to each other' s houses. As we have said before, you will need to assign each of the 2k people into one of the 2k houses. You have two missions, one from the entities in The Good Place and one from the entities of The Bad Place. Here they are: The first mission, from The Good Place, is to assign the people into the houses such that the sum of f( i) over all pairs i is minimized. Let' s define this minimized sum as G . This makes sure that soulmates can easily and efficiently visit each other; The second mission, from The Bad Place, is to assign the people into the houses such that the sum of f( i) over all pairs i is maximized. Let' s define this maximized sum as B . This makes sure that soulmates will have a difficult time to visit each other. What are the values of G and B ?",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 500 ) denoting the number of test cases. The next lines contain descriptions of the test cases. The first line of each test case contains a single integer k denoting the number of pairs of people ( 1 \u2264 k \u2264 10^ 5 ) . The next 2k - 1 lines describe the roads; the i - th of them contains three space- separated integers a_ i, b_ i, t_ i which means that the i - th road connects the a_ i - th and b_ i - th houses with a road that takes t_ i units of time to traverse ( 1 \u2264 a_ i, b_ i \u2264 2k , a_ i = \u0338 b_ i , 1 \u2264 t_ i \u2264 10^ 6 ) . It is guaranteed that the given roads define a tree structure. It is guaranteed that the sum of the k in a single file is at most 3 \u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing two space- separated integers G and B .",
    "note": "For the sample test case, we have a minimum sum equal to G = 15 . One way this can be achieved is with the following assignment: The first pair of people get assigned to houses 5 and 6 , giving us f( 1) = 5 ; The second pair of people get assigned to houses 1 and 4 , giving us f( 2) = 6 ; The third pair of people get assigned to houses 3 and 2 , giving us f( 3) = 4 . Note that the sum of the f( i) is 5 + 6 + 4 = 15 . We also have a maximum sum equal to B = 33 . One way this can be achieved is with the following assignment: The first pair of people get assigned to houses 1 and 4 , giving us f( 1) = 6 ; The second pair of people get assigned to houses 6 and 2 , giving us f( 2) = 14 ; The third pair of people get assigned to houses 3 and 5 , giving us f( 3) = 13 . Note that the sum of the f( i) is 6 + 14 + 13 = 33 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1280C"
  },
  {
    "title": "Segment Tree",
    "url": "https://codeforces.com/problemset/problem/1278/D",
    "history": "As the name of the task implies, you are asked to do some work with segments and trees. Recall that a tree is a connected undirected graph such that there is exactly one simple path between every pair of its vertices. You are given n segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] , l_ i < r_ i for every i . It is guaranteed that all segments' endpoints are integers, and all endpoints are unique \u2014 there is no pair of segments such that they start in the same point, end in the same point or one starts in the same point the other one ends. Let' s generate a graph with n vertices from these segments. Vertices v and u are connected by an edge if and only if segments [ l_ v, r_ v] and [ l_ u, r_ u] intersect and neither of it lies fully inside the other one. For example, pairs ( [ 1, 3] , [ 2, 4] ) and ( [ 5, 10] , [ 3, 7] ) will induce the edges but pairs ( [ 1, 2] , [ 3, 4] ) and ( [ 5, 7] , [ 3, 10] ) will not. Determine if the resulting graph is a tree or not.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of segments. The i - th of the next n lines contain the description of the i - th segment \u2014 two integers l_ i and r_ i ( 1 \u2264 l_ i < r_ i \u2264 2n ) . It is guaranteed that all segments borders are pairwise distinct.",
    "output": "Print \" YES\" if the resulting graph is a tree and \" NO\" otherwise.",
    "note": "The graph corresponding to the first example: The graph corresponding to the second example: The graph corresponding to the third example:",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1278D"
  },
  {
    "title": "Two Fairs",
    "url": "https://codeforces.com/problemset/problem/1276/B",
    "history": "There are n cities in Berland and some pairs of them are connected by two- way roads. It is guaranteed that you can pass from any city to any other, moving along the roads. Cities are numerated from 1 to n . Two fairs are currently taking place in Berland \u2014 they are held in two different cities a and b ( 1 \u2264 a, b \u2264 n ; a b ) . Find the number of pairs of cities x and y ( x a, x b, y a, y b ) such that if you go from x to y you will have to go through both fairs ( the order of visits doesn' t matter) . Formally, you need to find the number of pairs of cities x, y such that any path from x to y goes through a and b ( in any order) . Print the required number of pairs. The order of two cities in a pair does not matter, that is, the pairs ( x, y) and ( y, x) must be taken into account only once.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 4\u00b710^ 4 ) \u2014 the number of test cases in the input. Next, t test cases are specified. The first line of each test case contains four integers n , m , a and b ( 4 \u2264 n \u2264 2\u00b710^ 5 , n - 1 \u2264 m \u2264 5\u00b710^ 5 , 1 \u2264 a, b \u2264 n , a b ) \u2014 numbers of cities and roads in Berland and numbers of two cities where fairs are held, respectively. The following m lines contain descriptions of roads between cities. Each of road description contains a pair of integers u_ i, v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) \u2014 numbers of cities connected by the road. Each road is bi- directional and connects two different cities. It is guaranteed that from any city you can pass to any other by roads. There can be more than one road between a pair of cities. The sum of the values of n for all sets of input data in the test does not exceed 2\u00b710^ 5 . The sum of the values of m for all sets of input data in the test does not exceed 5\u00b710^ 5 .",
    "output": "Print t integers \u2014 the answers to the given test cases in the order they are written in the input.",
    "note": "",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1276B"
  },
  {
    "title": "Nearest Opposite Parity",
    "url": "https://codeforces.com/problemset/problem/1272/E",
    "history": "You are given an array a consisting of n integers. In one move, you can jump from the position i to the position i - a_ i ( if 1 \u2264 i - a_ i ) or to the position i + a_ i ( if i + a_ i \u2264 n ) . For each position i from 1 to n you want to know the minimum the number of moves required to reach any position j such that a_ j has the opposite parity from a_ i ( i. e. if a_ i is odd then a_ j has to be even and vice versa) .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the i - th element of a .",
    "output": "Print n integers d_ 1, d_ 2, . . . , d_ n , where d_ i is the minimum the number of moves required to reach any position j such that a_ j has the opposite parity from a_ i ( i. e. if a_ i is odd then a_ j has to be even and vice versa) or - 1 if it is impossible to reach such a position.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1272E"
  },
  {
    "title": "Subset with Zero Sum",
    "url": "https://codeforces.com/problemset/problem/1270/G",
    "history": "You are given n integers a_ 1, a_ 2, . . . , a_ n , such that for each 1\u2264 i \u2264 n holds i- n\u2264 a_ i\u2264 i- 1 . Find some nonempty subset of these integers, whose sum is equal to 0 . It can be shown that such a subset exists under given constraints. If there are several possible subsets with zero- sum, you can find any of them.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 6 ) . The description of the test cases follows. The first line of each test case contains a single integer n ( 1\u2264 n \u2264 10^ 6 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( i- n \u2264 a_ i \u2264 i- 1 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, output two lines. In the first line, output s ( 1\u2264 s \u2264 n ) \u2014 the number of elements in your subset. In the second line, output s integers i_ 1, i_ 2, . . . , i_ s ( 1\u2264 i_ k \u2264 n ) . All integers have to be pairwise different, and a_ i_ 1 + a_ i_ 2 + . . . + a_ i_ s has to be equal to 0 . If there are several possible subsets with zero- sum, you can find any of them.",
    "note": "In the first example, we get sum is a_ 1 = 0 . In the second example, we get sum is a_ 1 + a_ 4 + a_ 3 + a_ 2 = 0 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "math"
    ],
    "id": "1270G"
  },
  {
    "title": "Invertation in Tournament",
    "url": "https://codeforces.com/problemset/problem/1268/D",
    "history": "You are given a tournament \u2014 complete directed graph. In one operation you can pick any vertex v and change the direction of all edges with v on one of the ends ( i. e all edges u \u2192 v change their orientation to v \u2192 u and vice versa) . You want to make the tournament strongly connected with the smallest possible number of such operations if it is possible. Also, if it is possible, you need to find the number of ways to make this number of operations to make graph strongly connected ( two ways are different if for some i vertex that we chose on i - th operation in one way is different from vertex that we chose on i - th operation in another way) . You only need to find this value modulo 998 244 353 .",
    "input": "The first line of input contains one integer n ( 3 \u2264 n \u2264 2000 ) : the number of vertices in the tournament. Following n lines contain a description of the given tournament, each of them contains a binary string of length n . If j - th character of i - th string is equal to ' 1' , then the graph has an edge i \u2192 j . It is guaranteed that there are no edges i \u2192 i and the graph has exactly one edge among i \u2192 j and j \u2192 i for different i and j .",
    "output": "If it is not possible to convert tournament to strongly connected with the given operations, output \" - 1\" . Otherwise, output two integers: the smallest number of operations that you need to make the given graph strongly connected and the number of ways to do this number of operations to make graph strongly connected, modulo 998 244 353 .",
    "note": "",
    "topics": [
      "brute force",
      "divide and conquer",
      "graphs",
      "math"
    ],
    "id": "1268D"
  },
  {
    "title": "Red-Blue Graph",
    "url": "https://codeforces.com/problemset/problem/1266/H",
    "history": "There is a directed graph on n vertices numbered 1 through n where each vertex ( except n ) has two outgoing arcs, red and blue. At any point in time, exactly one of the arcs is active for each vertex. Initially, all blue arcs are active and there is a token located at vertex 1 . In one second, the vertex with token first switches its active arcs \u2014 the inactive arc becomes active and vice versa. Then, the token is moved along the active arc. When the token reaches the vertex n , it stops. It is guaranteed that n is reachable via arcs from every vertex. You are given q queries. Each query contains a state of the graph \u2014 a pair ( v, s) of the following form: v is the vertex where the token is currently located; s is a string consisting of n - 1 characters. The i - th character corresponds to the color of the active edge leading from the i - th vertex ( the character is ' R' if red arc is active, otherwise the character is ' B' ) . For each query, determine whether the given state is reachable from the initial state and the first time this configuration appears. Note that the two operations ( change active arc and traverse it) are atomic \u2014 a state is not considered reached if it appears after changing the active arc but before traversing it.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 58 ) \u2014 the number of vertices. n- 1 lines follow, i - th of contains two space separated integers b_ i and r_ i ( 1 \u2264 b_ i, r_ i \u2264 n ) representing a blue arc ( i, b_ i) and red arc ( i, r_ i) , respectively. It is guaranteed that vertex n is reachable from every vertex. The next line contains a single integer q ( 1 \u2264 q \u2264 5000 ) \u2014 the number of queries. Then q lines with queries follow. The j - th of these lines contains an integer v ( 1 \u2264 v < n ) and a string s of length n- 1 consiting only of characters ' R' and ' B' . The i - th of these characters is ' R' if the red arc going from i is active and ' B' otherwise.",
    "output": "Output q lines, each containing answer to a single query. If the state in the i - th query is unreachable, output the integer - 1 . Otherwise, output t_ i \u2014 the first time when the state appears ( measured in seconds, starting from the initial state of the graph which appears in time 0 ) .",
    "note": "The graph in the first example is depticed in the figure below. The first 19 queries denote the journey of the token. On the 19 - th move the token would reach the vertex 6 . The last two queries show states that are unreachable.",
    "topics": [
      "dp",
      "graphs",
      "math",
      "matrices",
      "meet-in-the-middle"
    ],
    "id": "1266H"
  },
  {
    "title": "Almost Same Distance",
    "url": "https://codeforces.com/problemset/problem/1266/F",
    "history": "Let G be a simple graph. Let W be a non- empty subset of vertices. Then W is almost- k - uniform if for each pair of distinct vertices u, v \u2208 W the distance between u and v is either k or k+ 1 . You are given a tree on n vertices. For each i between 1 and n , find the maximum size of an almost- i - uniform set.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2013 the number of vertices of the tree. Then n- 1 lines follows, the i - th of which consisting of two space separated integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) meaning that there is an edge between vertices u_ i and v_ i . It is guaranteed that the given graph is tree.",
    "output": "Output a single line containing n space separated integers a_ i , where a_ i is the maximum size of an almost- i - uniform set.",
    "note": "Consider the first example. The only maximum almost- 1 - uniform set is { 1, 2, 3, 4} . One of the maximum almost- 2 - uniform sets is or { 2, 3, 5} , another one is { 2, 3, 4} . A maximum almost- 3 - uniform set is any pair of vertices on distance 3 . Any single vertex is an almost- k - uniform set for k \u2265 1 . In the second sample there is an almost- 2 - uniform set of size 4 , and that is { 2, 3, 5, 6} .",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "1266F"
  },
  {
    "title": "Decreasing Debts",
    "url": "https://codeforces.com/problemset/problem/1266/D",
    "history": "There are n people in this world, conveniently numbered 1 through n . They are using burles to buy goods and services. Occasionally, a person might not have enough currency to buy what he wants or needs, so he borrows money from someone else, with the idea that he will repay the loan later with interest. Let d( a, b) denote the debt of a towards b , or 0 if there is no such debt. Sometimes, this becomes very complex, as the person lending money can run into financial troubles before his debtor is able to repay his debt, and finds himself in the need of borrowing money. When this process runs for a long enough time, it might happen that there are so many debts that they can be consolidated. There are two ways this can be done: Let d( a, b) > 0 and d( c, d) > 0 such that a = \u0338 c or b = \u0338 d . We can decrease the d( a, b) and d( c, d) by z and increase d( c, b) and d( a, d) by z , where 0 < z \u2264min( d( a, b) , d( c, d) ) . Let d( a, a) > 0 . We can set d( a, a) to 0 . The total debt is defined as the sum of all debts: \u03a3_ d = \u2211_ a, b d( a, b) Your goal is to use the above rules in any order any number of times, to make the total debt as small as possible. Note that you don' t have to minimise the number of non- zero debts, only the total debt.",
    "input": "The first line contains two space separated integers n ( 1 \u2264 n \u2264 10^ 5 ) and m ( 0 \u2264 m \u2264 3\u00b7 10^ 5 ) , representing the number of people and the number of debts, respectively. m lines follow, each of which contains three space separated integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i = \u0338 v_ i ) , d_ i ( 1 \u2264 d_ i \u2264 10^ 9 ) , meaning that the person u_ i borrowed d_ i burles from person v_ i .",
    "output": "On the first line print an integer m' ( 0 \u2264 m' \u2264 3\u00b7 10^ 5 ) , representing the number of debts after the consolidation. It can be shown that an answer always exists with this additional constraint. After that print m' lines, i - th of which contains three space separated integers u_ i, v_ i, d_ i , meaning that the person u_ i owes the person v_ i exactly d_ i burles. The output must satisfy 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i and 0 < d_ i \u2264 10^ 18 . For each pair i = \u0338 j , it should hold that u_ i = \u0338 u_ j or v_ i = \u0338 v_ j . In other words, each pair of people can be included at most once in the output.",
    "note": "In the first example the optimal sequence of operations can be the following: Perform an operation of the first type with a = 1 , b = 2 , c = 2 , d = 3 and z = 5 . The resulting debts are: d( 1, 2) = 5 , d( 2, 2) = 5 , d( 1, 3) = 5 , all other debts are 0 ; Perform an operation of the second type with a = 2 . The resulting debts are: d( 1, 2) = 5 , d( 1, 3) = 5 , all other debts are 0 . In the second example the optimal sequence of operations can be the following: Perform an operation of the first type with a = 1 , b = 2 , c = 3 , d = 1 and z = 10 . The resulting debts are: d( 3, 2) = 10 , d( 2, 3) = 15 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the first type with a = 2 , b = 3 , c = 3 , d = 2 and z = 10 . The resulting debts are: d( 2, 2) = 10 , d( 3, 3) = 10 , d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 2 . The resulting debts are: d( 3, 3) = 10 , d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 3 . The resulting debts are: d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 1 . The resulting debts are: d( 2, 3) = 5 , all other debts are 0 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1266D"
  },
  {
    "title": "Economic Difficulties",
    "url": "https://codeforces.com/problemset/problem/1263/F",
    "history": "An electrical grid in Berland palaces consists of 2 grids: main and reserve. Wires in palaces are made of expensive material, so selling some of them would be a good idea! Each grid ( main and reserve) has a head node ( its number is 1 ) . Every other node gets electricity from the head node. Each node can be reached from the head node by a unique path. Also, both grids have exactly n nodes, which do not spread electricity further. In other words, every grid is a rooted directed tree on n leaves with a root in the node, which number is 1 . Each tree has independent enumeration and nodes from one grid are not connected with nodes of another grid. Also, the palace has n electrical devices. Each device is connected with one node of the main grid and with one node of the reserve grid. Devices connect only with nodes, from which electricity is not spread further ( these nodes are the tree' s leaves) . Each grid' s leaf is connected with exactly one device. In this example the main grid contains 6 nodes ( the top tree) and the reserve grid contains 4 nodes ( the lower tree) . There are 3 devices with numbers colored in blue. It is guaranteed that the whole grid ( two grids and n devices) can be shown in this way ( like in the picture above) : main grid is a top tree, whose wires are directed ' from the top to the down' , reserve grid is a lower tree, whose wires are directed ' from the down to the top' , devices \u2014 horizontal row between two grids, which are numbered from 1 to n from the left to the right, wires between nodes do not intersect. Formally, for each tree exists a depth- first search from the node with number 1 , that visits leaves in order of connection to devices 1, 2, . . . , n ( firstly, the node, that is connected to the device 1 , then the node, that is connected to the device 2 , etc. ) . Businessman wants to sell ( remove) maximal amount of wires so that each device will be powered from at least one grid ( main or reserve) . In other words, for each device should exist at least one path to the head node ( in the main grid or the reserve grid) , which contains only nodes from one grid.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of devices in the palace. The next line contains an integer a ( 1 + n \u2264 a \u2264 1000 + n ) \u2014 the amount of nodes in the main grid. Next line contains a - 1 integers p_ i ( 1 \u2264 p_ i \u2264 a ) . Each integer p_ i means that the main grid contains a wire from p_ i - th node to ( i + 1) - th. The next line contains n integers x_ i ( 1 \u2264 x_ i \u2264 a ) \u2014 the number of a node in the main grid that is connected to the i - th device. The next line contains an integer b ( 1 + n \u2264 b \u2264 1000 + n ) \u2014 the amount of nodes in the reserve grid. Next line contains b - 1 integers q_ i ( 1 \u2264 q_ i \u2264 b ) . Each integer q_ i means that the reserve grid contains a wire from q_ i - th node to ( i + 1) - th. The next line contains n integers y_ i ( 1 \u2264 y_ i \u2264 b ) \u2014 the number of a node in the reserve grid that is connected to the i - th device. It is guaranteed that each grid is a tree, which has exactly n leaves and each leaf is connected with one device. Also, it is guaranteed, that for each tree exists a depth- first search from the node 1 , that visits leaves in order of connection to devices.",
    "output": "Print a single integer \u2014 the maximal amount of wires that can be cut so that each device is powered.",
    "note": "For the first example, the picture below shows one of the possible solutions ( wires that can be removed are marked in red) : The second and the third examples can be seen below:",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "flows",
      "graphs",
      "trees"
    ],
    "id": "1263F"
  },
  {
    "title": "Secret Passwords",
    "url": "https://codeforces.com/problemset/problem/1263/D",
    "history": "One unknown hacker wants to get the admin' s password of AtForces testing system, to get problems from the next contest. To achieve that, he sneaked into the administrator' s office and stole a piece of paper with a list of n passwords \u2014 strings, consists of small Latin letters. Hacker went home and started preparing to hack AtForces. He found that the system contains only passwords from the stolen list and that the system determines the equivalence of the passwords a and b as follows: two passwords a and b are equivalent if there is a letter, that exists in both a and b ; two passwords a and b are equivalent if there is a password c from the list, which is equivalent to both a and b . If a password is set in the system and an equivalent one is applied to access the system, then the user is accessed into the system. For example, if the list contain passwords \" a\" , \" b\" , \" ab\" , \" d\" , then passwords \" a\" , \" b\" , \" ab\" are equivalent to each other, but the password \" d\" is not equivalent to any other password from list. In other words, if: admin' s password is \" b\" , then you can access to system by using any of this passwords: \" a\" , \" b\" , \" ab\" ; admin' s password is \" d\" , then you can access to system by using only \" d\" . Only one password from the list is the admin' s password from the testing system. Help hacker to calculate the minimal number of passwords, required to guaranteed access to the system. Keep in mind that the hacker does not know which password is set in the system.",
    "input": "The first line contain integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 number of passwords in the list. Next n lines contains passwords from the list \u2013 non- empty strings s_ i , with length at most 50 letters. Some of the passwords may be equal. It is guaranteed that the total length of all passwords does not exceed 10^ 6 letters. All of them consist only of lowercase Latin letters.",
    "output": "In a single line print the minimal number of passwords, the use of which will allow guaranteed to access the system.",
    "note": "In the second example hacker need to use any of the passwords to access the system.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1263D"
  },
  {
    "title": "Fridge Lockers",
    "url": "https://codeforces.com/problemset/problem/1255/B",
    "history": "Hanh lives in a shared apartment. There are n people ( including Hanh) living there, each has a private fridge. n fridges are secured by several steel chains. Each steel chain connects two different fridges and is protected by a digital lock. The owner of a fridge knows passcodes of all chains connected to it. A fridge can be open only if all chains connected to it are unlocked. For example, if a fridge has no chains connected to it at all, then any of n people can open it. For exampe, in the picture there are n= 4 people and 5 chains. The first person knows passcodes of two chains: 1- 4 and 1- 2 . The fridge 1 can be open by its owner ( the person 1 ) , also two people 2 and 4 ( acting together) can open it. The weights of these fridges are a_ 1, a_ 2, . . . , a_ n . To make a steel chain connecting fridges u and v , you have to pay a_ u + a_ v dollars. Note that the landlord allows you to create multiple chains connecting the same pair of fridges. Hanh' s apartment landlord asks you to create exactly m steel chains so that all fridges are private. A fridge is private if and only if, among n people living in the apartment, only the owner can open it ( i. e. no other person acting alone can do it) . In other words, the fridge i is not private if there exists the person j ( i j ) that the person j can open the fridge i . For example, in the picture all the fridges are private. On the other hand, if there are n= 2 fridges and only one chain ( which connects them) then both fridges are not private ( both fridges can be open not only by its owner but also by another person) . Of course, the landlord wants to minimize the total cost of all steel chains to fulfill his request. Determine whether there exists any way to make exactly m chains, and if yes, output any solution that minimizes the total cost.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases T ( 1 \u2264 T \u2264 10 ) . Then the descriptions of the test cases follow. The first line of each test case contains two integers n , m ( 2 \u2264 n \u2264 1000 , 1 \u2264 m \u2264 n ) \u2014 the number of people living in Hanh' s apartment and the number of steel chains that the landlord requires, respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 4 ) \u2014 weights of all fridges.",
    "output": "For each test case: If there is no solution, print a single integer - 1 . Otherwise, print a single integer c \u2014 the minimum total cost. The i - th of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) , meaning that the i - th steel chain connects fridges u_ i and v_ i . An arbitrary number of chains can be between a pair of fridges. If there are multiple answers, print any.",
    "note": "",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": "1255B"
  },
  {
    "title": "Cheap Robot",
    "url": "https://codeforces.com/problemset/problem/1253/F",
    "history": "You' re given a simple, undirected, connected, weighted graph with n nodes and m edges. Nodes are numbered from 1 to n . There are exactly k centrals ( recharge points) , which are nodes 1, 2, . . . , k . We consider a robot moving into this graph, with a battery of capacity c , not fixed by the constructor yet. At any time, the battery contains an integer amount x of energy between 0 and c inclusive. Traversing an edge of weight w_ i is possible only if x \u2265 w_ i , and costs w_ i energy points ( x : = x - w_ i ) . Moreover, when the robot reaches a central, its battery is entirely recharged ( x : = c ) . You' re given q independent missions, the i - th mission requires to move the robot from central a_ i to central b_ i . For each mission, you should tell the minimum capacity required to acheive it.",
    "input": "The first line contains four integers n , m , k and q ( 2 \u2264 k \u2264 n \u2264 10^ 5 and 1 \u2264 m, q \u2264 3 \u00b7 10^ 5 ) . The i - th of the next m lines contains three integers u_ i , v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i , 1 \u2264 w_ i \u2264 10^ 9 ) , that mean that there' s an edge between nodes u and v , with a weight w_ i . It is guaranteed that the given graph is simple ( there is no self- loop, and there is at most one edge between every pair of nodes) and connected. The i - th of the next q lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 k , a_ i = \u0338 b_ i ) .",
    "output": "You have to output q lines, where the i - th line contains a single integer : the minimum capacity required to acheive the i - th mission.",
    "note": "In the first example, the graph is the chain 10 - 9 - 2^ C - 4 - 1^ C - 5 - 7 - 3^ C - 8 - 6 , where centrals are nodes 1 , 2 and 3 . For the mission ( 2, 3) , there is only one simple path possible. Here is a simulation of this mission when the capacity is 12 . The robot begins on the node 2 , with c = 12 energy points. The robot uses an edge of weight 4 . The robot reaches the node 4 , with 12 - 4 = 8 energy points. The robot uses an edge of weight 8 . The robot reaches the node 1 with 8 - 8 = 0 energy points. The robot is on a central, so its battery is recharged. He has now c = 12 energy points. The robot uses an edge of weight 2 . The robot is on the node 5 , with 12 - 2 = 10 energy points. The robot uses an edge of weight 3 . The robot is on the node 7 , with 10 - 3 = 7 energy points. The robot uses an edge of weight 2 . The robot is on the node 3 , with 7 - 2 = 5 energy points. The robot is on a central, so its battery is recharged. He has now c = 12 energy points. End of the simulation. Note that if value of c was lower than 12 , we would have less than 8 energy points on node 4 , and we would be unable to use the edge 4 \u2194 1 of weight 8 . Hence 12 is the minimum capacity required to acheive the mission. \u2014The graph of the second example is described here ( centrals are red nodes) : The robot can acheive the mission ( 3, 1) with a battery of capacity c = 38 , using the path 3 \u2192 9 \u2192 8 \u2192 7 \u2192 2 \u2192 7 \u2192 6 \u2192 5 \u2192 4 \u2192 1 The robot can acheive the mission ( 2, 3) with a battery of capacity c = 15 , using the path 2 \u2192 7 \u2192 8 \u2192 9 \u2192 3",
    "topics": [
      "binary search",
      "dsu",
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "1253F"
  },
  {
    "title": "Harmonious Graph",
    "url": "https://codeforces.com/problemset/problem/1253/D",
    "history": "You' re given an undirected graph with n nodes and m edges. Nodes are numbered from 1 to n . The graph is considered harmonious if and only if the following property holds: For every triple of integers ( l, m, r) such that 1 \u2264 l < m < r \u2264 n , if there exists a path going from node l to node r , then there exists a path going from node l to node m . In other words, in a harmonious graph, if from a node l we can reach a node r through edges ( l < r ) , then we should able to reach nodes ( l+ 1) , ( l+ 2) , . . . , ( r- 1) too. What is the minimum number of edges we need to add to make the graph harmonious?",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 200 000 and 1 \u2264 m \u2264 200 000 ) . The i - th of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i ) , that mean that there' s an edge between nodes u and v . It is guaranteed that the given graph is simple ( there is no self- loop, and there is at most one edge between every pair of nodes) .",
    "output": "Print the minimum number of edges we have to add to the graph to make it harmonious.",
    "note": "In the first example, the given graph is not harmonious ( for instance, 1 < 6 < 7 , node 1 can reach node 7 through the path 1 \u2192 2 \u2192 7 , but node 1 can' t reach node 6 ) . However adding the edge ( 2, 4) is sufficient to make it harmonious. In the second example, the given graph is already harmonious.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1253D"
  },
  {
    "title": "Road Construction",
    "url": "https://codeforces.com/problemset/problem/1252/L",
    "history": "There are N cities in the country of Numbata, numbered from 1 to N . Currently, there is no road connecting them. Therefore, each of these N cities proposes a road candidate to be constructed. City i likes to connect with city A_ i , so city i proposes to add a direct bidirectional road connecting city i and city A_ i . It is guaranteed that no two cities like to connect with each other. In other words, there is no pair of integers i and j where A_ i = j and A_ j = i . It is also guaranteed that any pair of cities are connected by a sequence of road proposals. In other words, if all proposed roads are constructed, then any pair of cities are connected by a sequence of constructed road. City i also prefers the road to be constructed using a specific material. Each material can be represented by an integer ( for example, 0 for asphalt, 1 for wood, etc. ) . The material that can be used for the road connecting city i and city A_ i is represented by an array B_ i containing M_ i integers: [ ( B_ i) _ 1, ( B_ i) _ 2, . . . , ( B_ i) _ M_ i] . This means that the road connecting city i and city A_ i can be constructed with either of the material in B_ i . There are K workers to construct the roads. Each worker is only familiar with one material, thus can only construct a road with a specific material. In particular, the i^ th worker can only construct a road with material C_ i . Each worker can only construct at most one road. You want to assign each worker to construct a road such that any pair of cities are connected by a sequence of constructed road.",
    "input": "Input begins with a line containing two integers: N K ( 3 \u2264 N \u2264 2000 ; 1 \u2264 K \u2264 2000 ) representing the number of cities and the number of workers, respectively. The next N lines each contains several integers: A_ i M_ i ( B_ i) _ 1 , ( B_ i) _ 2 , \u22ef , ( B_ i) _ M_ i ( 1 \u2264 A_ i \u2264 N ; A_ i i ; 1 \u2264 M_ i \u2264 10 000 ; 0 \u2264 ( B_ i) _ 1 < ( B_ i) _ 2 < . . . < ( B_ i) _ M_ i\u2264 10^ 9 ) representing the bidirectional road that city i likes to construct. It is guaranteed that the sum of M_ i does not exceed 10 000 . It is also guaranteed that no two cities like to connect with each other and any pair of cities are connected by a sequence of road proposals. The next line contains K integers: C_ i ( 0 \u2264 C_ i \u2264 10^ 9 ) representing the material that is familiarized by the workers.",
    "output": "If it is not possible to assign each worker to construct a road such that any pair of cities are connected by a sequence of constructed road, simply output - 1 in a line. Otherwise, for each worker in the same order as input, output in a line two integers ( separated by a single space) : u and v in any order. This means that the worker constructs a direct bidirectional road connecting city u and v . If the worker does not construct any road, output \" 0 0\" ( without quotes) instead. Each pair of cities can only be assigned to at most one worker. You may output any assignment as long as any pair of cities are connected by a sequence of constructed road.",
    "note": "Explanation for the sample input/ output # 1We can assign the workers to construct the following roads: The first worker constructs a road connecting city 1 and city 2 . The second worker constructs a road connecting city 2 and city 3 . The third worker constructs a road connecting city 3 and city 4 . The fourth worker does not construct any road. The fifth worker constructs a road connecting city 4 and city 2 . Therefore, any pair of cities are now connected by a sequence of constructed road. Explanation for the sample input/ output # 2There is no worker that can construct a road connecting city 1 , thus city 1 is certainly isolated.",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1252L"
  },
  {
    "title": "Wires",
    "url": "https://codeforces.com/problemset/problem/1250/N",
    "history": "Polycarpus has a complex electronic device. The core of this device is a circuit board. The board has 10^ 9 contact points which are numbered from 1 to 10^ 9 . Also there are n wires numbered from 1 to n , each connecting two distinct contact points on the board. An electric signal can pass between wires A and B if: either both wires share the same contact point; or there is a sequence of wires starting with A and ending with B , and each pair of adjacent wires in the sequence share a contact point. The picture shows a circuit board with 5 wires. Contact points with numbers 2, 5, 7, 8, 10, 13 are used. Here an electrical signal can pass from wire 2 to wire 3 , but not to wire 1 . Currently the circuit board is broken. Polycarpus thinks that the board could be fixed if the wires were re- soldered so that a signal could pass between any pair of wires. It takes 1 minute for Polycarpus to re- solder an end of a wire. I. e. it takes one minute to change one of the two contact points for a wire. Any contact point from range [ 1, 10^ 9] can be used as a new contact point. A wire' s ends must always be soldered to distinct contact points. Both wire' s ends can be re- solded, but that will require two actions and will take 2 minutes in total. Find the minimum amount of time Polycarpus needs to re- solder wires so that a signal can pass between any pair of wires. Also output an optimal sequence of wire re- soldering.",
    "input": "The input contains one or several test cases. The first input line contains a single integer t \u2014 number of test cases. Then, t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of wires. The following n lines describe wires, each line containing two space- separated integers x_ i, y_ i ( 1 \u2264 x_ i, y_ i \u2264 10^ 9 , x_ i = \u0338 y_ i ) \u2014 contact points connected by the i - th wire. A couple of contact points can be connected with more than one wire. Sum of values of n across all test cases does not exceed 10^ 5 .",
    "output": "For each test case first print one line with a single integer k \u2014 the minimum number of minutes needed to re- solder wires so that a signal can pass between any pair of wires. In the following k lines print the description of re- solderings. Each re- soldering should be described by three integers w_ j, a_ j, b_ j ( 1 \u2264 w_ j \u2264 n , 1 \u2264 a_ j, b_ j \u2264 10^ 9 ) . Such triple means that during the j - th re- soldering an end of the w_ j - th wire, which was soldered to contact point a_ j , becomes soldered to contact point b_ j instead. After each re- soldering of a wire it must connect two distinct contact points. If there are multiple optimal re- solderings, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1250N"
  },
  {
    "title": "Projectors",
    "url": "https://codeforces.com/problemset/problem/1250/K",
    "history": "There are n lectures and m seminars to be conducted today at the Faculty of Approximate Sciences. The i - th lecture starts at a_ i and ends at b_ i ( formally, time of the lecture spans an interval [ a_ i, b_ i) , the right bound is exclusive) . The j - th seminar starts at p_ j and ends at q_ j ( similarly, time of the seminar spans an interval [ p_ j, q_ j) , the right bound is exclusive) . There are x HD- projectors numbered from 1 to x and y ordinary projectors numbered from x + 1 to x + y available at the faculty. Projectors should be distributed in such a way that: an HD- projector is used in each lecture; some projector ( ordinary or HD) is used in each seminar; a projector ( ordinary or HD) can only be used in one event at the same moment of time; if a projector is selected for an event, it is used there for the whole duration of the event; a projector can be reused in some following event, if it starts not earlier than current event finishes. You are to find such distribution of projectors, if it exists. Again, note that the right bound of the event' s time range is not inclusive: if some event starts exactly when another event finishes, the projector can be reused ( suppose that it is instantly transported to the location of the event) .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 300 ) \u2014 the number of test cases. Each test case starts with a line containing four integers n, m, x, y ( 0 \u2264 n, m, x, y \u2264 300 ; n+ m> 0 , x + y > 0 ) \u2014 the number of lectures, the number of seminars, the number of HD projectors and the number of ordinary projectors, respectively. The next n lines describe lectures. Each line contains two integers a_ i , b_ i ( 1 \u2264 a_ i < b_ i \u2264 10^ 6 ) \u2014 the start time ( inclusive) and finish time ( exclusive) of the i - th lecture. The next m lines describe seminars. Each line contains two integers p_ j , q_ j ( 1 \u2264 p_ j < q_ j \u2264 10^ 6 ) \u2014 the start time ( inclusive) and finish time ( exclusive) of the j - th seminar.",
    "output": "For each test case, print YES if it is possible to distribute projectors in order to meet all requirements, or NO otherwise. In case of positive answer, output one additional line containing n + m integers. The first n integers should be not less than 1 and not greater than x , and the i - th of them should be the index of HD projector used in the i - th lecture. The last m integers should be not less than 1 and not greater than x + y , and the j - th of them should be the index of projector used in the j - th seminar. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1250K"
  },
  {
    "title": "The Coronation",
    "url": "https://codeforces.com/problemset/problem/1250/E",
    "history": "The coronation of King Berl XXII is soon! The whole royal family, including n daughters of Berl XXII, will be present. The King has ordered his jeweler to assemble n beautiful necklaces, so each of the princesses could wear exactly one necklace during the ceremony \u2014 and now these necklaces are finished. Each necklace consists of m gems attached to a gold chain. There are two types of gems used in the necklaces \u2014 emeralds and sapphires. So, each necklace can be represented by a sequence of m gems ( listed from left to right) , and each gem is either an emerald or a sapphire. Formally, the i - th necklace can be represented by a binary string s_ i of length m ; if the j - th character of s_ i is 0, then the j - th gem in the i - th necklace is an emerald; otherwise, this gem is a sapphire. Now, looking at the necklaces, the King is afraid that some of his daughters may envy the other daughters' necklaces. He wants all necklaces to look similar. Two necklaces are considered similar if there are at least k positions where these necklaces contain the same type of gems. For example, if there is a necklace represented by a sequence 01010111 and a necklace represented by a sequence 01100000, then there are 3 positions where these necklaces contain the same type of gems ( both first gems are emeralds, both second gems are sapphires, and both fifth gems are emeralds) . So if k = 3 , these necklaces are similar, and if k = 4 , they are not similar. The King thinks that if two of his daughters notice that their necklaces are not similar, then they may have a conflict \u2014 and, obviously, he doesn' t want any conflicts during the coronation! So Berl XXII wants to tell some of his daughters to wear their necklaces backward. If a necklace is worn backward, then the sequence of gems in this necklace is reversed. For example, if a necklace is represented by a sequence 01100, then, if worn backward, it would be represented by a sequence 00110. The King wants to find the minimum number of necklaces to be worn backward during the coronation so that there are no conflicts. Berl XXII is too busy with preparation for the coronation, so he ordered you to resolve this issue for him. Help him \u2014 and he will give you a truly royal reward!",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases. Then the test cases follow. Each test case begins with a line containing three integers n , m and k ( 2 \u2264 n \u2264 50 , 1 \u2264 k \u2264 m \u2264 50 ) \u2014 the number of necklaces, the number of gems in each necklace, and the minimum number of positions where two necklaces have to have the same type of gems in order to look similar, respectively. Then n lines follow, the i - th of them contains a binary string s_ i of length m representing the i - th necklace.",
    "output": "For each test case, print the answer as follows. If it is impossible to avoid the conflict, print - 1 on a single line. In this case you should not output anything else for that test case. Otherwise, the first line of the test case answer should contain the single integer d \u2014 the minimum number of necklaces that are to be worn backward. The second line of the test case answer should contain the numbers of these necklaces ( integers from 1 to n ) in any order. If d = 0 then leave the second line of the test case answer empty. If there are multiple answers, you may print any of them.",
    "note": "",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": "1250E"
  },
  {
    "title": "Shichikuji and Power Grid",
    "url": "https://codeforces.com/problemset/problem/1245/D",
    "history": "Shichikuji is the new resident deity of the South Black Snail Temple. Her first job is as follows: There are n new cities located in Prefecture X. Cities are numbered from 1 to n . City i is located x_ i km North of the shrine and y_ i km East of the shrine. It is possible that ( x_ i, y_ i) = ( x_ j, y_ j) even when i j . Shichikuji must provide electricity to each city either by building a power station in that city, or by making a connection between that city and another one that already has electricity. So the City has electricity if it has a power station in it or it is connected to a City which has electricity by a direct connection or via a chain of connections. Building a power station in City i will cost c_ i yen; Making a connection between City i and City j will cost k_ i + k_ j yen per km of wire used for the connection. However, wires can only go the cardinal directions ( North, South, East, West) . Wires can cross each other. Each wire must have both of its endpoints in some cities. If City i and City j are connected by a wire, the wire will go through any shortest path from City i to City j . Thus, the length of the wire if City i and City j are connected is | x_ i - x_ j| + | y_ i - y_ j| km. Shichikuji wants to do this job spending as little money as possible, since according to her, there isn' t really anything else in the world other than money. However, she died when she was only in fifth grade so she is not smart enough for this. And thus, the new resident deity asks for your help. And so, you have to provide Shichikuji with the following information: minimum amount of yen needed to provide electricity to all cities, the cities in which power stations will be built, and the connections to be made. If there are multiple ways to choose the cities and the connections to obtain the construction of minimum price, then print any of them.",
    "input": "First line of input contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of cities. Then, n lines follow. The i - th line contains two space- separated integers x_ i ( 1 \u2264 x_ i \u2264 10^ 6 ) and y_ i ( 1 \u2264 y_ i \u2264 10^ 6 ) \u2014 the coordinates of the i - th city. The next line contains n space- separated integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the cost of building a power station in the i - th city. The last line contains n space- separated integers k_ 1, k_ 2, . . . , k_ n ( 1 \u2264 k_ i \u2264 10^ 9 ) .",
    "output": "In the first line print a single integer, denoting the minimum amount of yen needed. Then, print an integer v \u2014 the number of power stations to be built. Next, print v space- separated integers, denoting the indices of cities in which a power station will be built. Each number should be from 1 to n and all numbers should be pairwise distinct. You can print the numbers in arbitrary order. After that, print an integer e \u2014 the number of connections to be made. Finally, print e pairs of integers a and b ( 1 \u2264 a, b \u2264 n , a b ) , denoting that a connection between City a and City b will be made. Each unordered pair of cities should be included at most once ( for each ( a, b) there should be no more ( a, b) or ( b, a) pairs) . You can print the pairs in arbitrary order. If there are multiple ways to choose the cities and the connections to obtain the construction of minimum price, then print any of them.",
    "note": "For the answers given in the samples, refer to the following diagrams ( cities with power stations are colored green, other cities are colored blue, and wires are colored red) : For the first example, the cost of building power stations in all cities is 3 + 2 + 3 = 8 . It can be shown that no configuration costs less than 8 yen. For the second example, the cost of building a power station in City 2 is 2. The cost of connecting City 1 and City 2 is 2 \u00b7 ( 3 + 2) = 10 . The cost of connecting City 2 and City 3 is 3 \u00b7 ( 2 + 3) = 15 . Thus the total cost is 2 + 10 + 15 = 27 . It can be shown that no configuration costs less than 27 yen.",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1245D"
  },
  {
    "title": "Paint the Tree",
    "url": "https://codeforces.com/problemset/problem/1244/D",
    "history": "You are given a tree consisting of n vertices. A tree is an undirected connected acyclic graph. Example of a tree. You have to paint each vertex into one of three colors. For each vertex, you know the cost of painting it in every color. You have to paint the vertices so that any path consisting of exactly three distinct vertices does not contain any vertices with equal colors. In other words, let' s consider all triples ( x, y, z) such that x = \u0338 y, y = \u0338 z, x = \u0338 z , x is connected by an edge with y , and y is connected by an edge with z . The colours of x , y and z should be pairwise distinct. Let' s call a painting which meets this condition good. You have to calculate the minimum cost of a good painting and find one of the optimal paintings. If there is no good painting, report about it.",
    "input": "The first line contains one integer n ( 3 \u2264 n \u2264 100 000) \u2014 the number of vertices. The second line contains a sequence of integers c_ 1, 1, c_ 1, 2, . . . , c_ 1, n ( 1 \u2264 c_ 1, i\u2264 10^ 9) , where c_ 1, i is the cost of painting the i - th vertex into the first color. The third line contains a sequence of integers c_ 2, 1, c_ 2, 2, . . . , c_ 2, n ( 1 \u2264 c_ 2, i\u2264 10^ 9) , where c_ 2, i is the cost of painting the i - th vertex into the second color. The fourth line contains a sequence of integers c_ 3, 1, c_ 3, 2, . . . , c_ 3, n ( 1 \u2264 c_ 3, i\u2264 10^ 9) , where c_ 3, i is the cost of painting the i - th vertex into the third color. Then ( n - 1) lines follow, each containing two integers u_ j and v_ j ( 1 \u2264 u_ j, v_ j \u2264 n, u_ j = \u0338 v_ j) \u2014 the numbers of vertices connected by the j - th undirected edge. It is guaranteed that these edges denote a tree.",
    "output": "If there is no good painting, print - 1 . Otherwise, print the minimum cost of a good painting in the first line. In the second line print n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 3) , where the i - th integer should denote the color of the i - th vertex. If there are multiple good paintings with minimum cost, print any of them.",
    "note": "All vertices should be painted in different colors in the first example. The optimal way to do it is to paint the first vertex into color 1 , the second vertex \u2014 into color 3 , and the third vertex \u2014 into color 2 . The cost of this painting is 3 + 2 + 1 = 6 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dp",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "1244D"
  },
  {
    "title": "Planar Perimeter",
    "url": "https://codeforces.com/problemset/problem/1242/E",
    "history": "Ujan has finally cleaned up his house and now wants to decorate the interior. He decided to place a beautiful carpet that would really tie the guest room together. He is interested in carpets that are made up of polygonal patches such that each side of a patch is either a side of another ( different) patch, or is an exterior side of the whole carpet. In other words, the carpet can be represented as a planar graph, where each patch corresponds to a face of the graph, each face is a simple polygon. The perimeter of the carpet is the number of the exterior sides. Ujan considers a carpet beautiful if it consists of f patches, where the i - th patch has exactly a_ i sides, and the perimeter is the smallest possible. Find an example of such a carpet, so that Ujan can order it!",
    "input": "The first line of input contains a single integer f ( 1 \u2264 f \u2264 10^ 5 ) , the number of patches in the carpet. The next line contains f integers a_ 1, . . . , a_ f ( 3 \u2264 a_ i \u2264 3\u00b7 10^ 5 ) , the number of sides of the patches. The total number of the sides of the patches a_ 1 + . . . + a_ f does not exceed 3\u00b710^ 5 .",
    "output": "Output the description of the carpet as a graph. First, output a single integer n ( 3 \u2264 n \u2264 3 \u00b7 10^ 5 ) , the total number of vertices in your graph ( the vertices must be numbered from 1 to n ) . Then output f lines containing the description of the faces. The i - th line should describe the i - th face and contain a_ i distinct integers v_ i, 1, . . . , v_ i, a_ i ( 1 \u2264 v_ i, j\u2264 n ) , which means that the vertices v_ i, j and v_ i, ( j a_ i) + 1 are connected by an edge for any 1 \u2264 j \u2264 a_ i . The graph should be planar and satisfy the restrictions described in the problem statement. Its perimeter should be the smallest possible. There should be no double edges or self- loops in the graph. The graph should be connected. Note that a solution always exists; if there are multiple solutions, output any of them.",
    "note": "In the first sample, the two triangular faces are connected by a single edge, which results in the minimum perimeter 4 . The figure shows one possible configuration for the second sample. The minimum perimeter in this case is 3 .",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1242E"
  },
  {
    "title": "Sum Balance",
    "url": "https://codeforces.com/problemset/problem/1242/C",
    "history": "Ujan has a lot of numbers in his boxes. He likes order and balance, so he decided to reorder the numbers. There are k boxes numbered from 1 to k . The i - th box contains n_ i integer numbers. The integers can be negative. All of the integers are distinct. Ujan is lazy, so he will do the following reordering of the numbers exactly once. He will pick a single integer from each of the boxes, k integers in total. Then he will insert the chosen numbers \u2014 one integer in each of the boxes, so that the number of integers in each box is the same as in the beginning. Note that he may also insert an integer he picked from a box back into the same box. Ujan will be happy if the sum of the integers in each box is the same. Can he achieve this and make the boxes perfectly balanced, like all things should be?",
    "input": "The first line contains a single integer k ( 1 \u2264 k \u2264 15 ) , the number of boxes. The i - th of the next k lines first contains a single integer n_ i ( 1 \u2264 n_ i \u2264 5 000 ) , the number of integers in box i . Then the same line contains n_ i integers a_ i, 1, . . . , a_ i, n_ i ( | a_ i, j| \u2264 10^ 9 ) , the integers in the i - th box. It is guaranteed that all a_ i, j are distinct.",
    "output": "If Ujan cannot achieve his goal, output \" No\" in a single line. Otherwise in the first line output \" Yes\" , and then output k lines. The i - th of these lines should contain two integers c_ i and p_ i . This means that Ujan should pick the integer c_ i from the i - th box and place it in the p_ i - th box afterwards. If there are multiple solutions, output any of those. You can print each letter in any case ( upper or lower) .",
    "note": "In the first sample, Ujan can put the number 7 in the 2 nd box, the number 2 in the 3 rd box, the number 5 in the 1 st box and keep the number 10 in the same 4 th box. Then the boxes will contain numbers { 1, 5, 4} , { 3, 7} , { 8, 2} and { 10} . The sum in each box then is equal to 10 . In the second sample, it is not possible to pick and redistribute the numbers in the required way. In the third sample, one can swap the numbers - 20 and - 10 , making the sum in each box equal to - 10 .",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "1242C"
  },
  {
    "title": "0-1 MST",
    "url": "https://codeforces.com/problemset/problem/1242/B",
    "history": "Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph. It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1 ; exactly m edges have weight 1 , and all others have weight 0 . Since Ujan doesn' t really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. ( The weight of a spanning tree is the sum of all its edges. ) Can you find the answer for Ujan so he stops procrastinating?",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264min( n( n- 1) / 2, 10^ 5) ) , the number of vertices and the number of edges of weight 1 in the graph. The i - th of the next m lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i = \u0338 b_ i ) , the endpoints of the i - th edge of weight 1 . It is guaranteed that no edge appears twice in the input.",
    "output": "Output a single integer, the weight of the minimum spanning tree of the graph.",
    "note": "The graph from the first sample is shown below. Dashed edges have weight 0 , other edges have weight 1 . One of the minimum spanning trees is highlighted in orange and has total weight 2 . In the second sample, all edges have weight 0 so any spanning tree has total weight 0 .",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "sortings"
    ],
    "id": "1242B"
  },
  {
    "title": "Football",
    "url": "https://codeforces.com/problemset/problem/1240/F",
    "history": "There are n football teams in the world. The Main Football Organization ( MFO) wants to host at most m games. MFO wants the i - th game to be played between the teams a_ i and b_ i in one of the k stadiums. Let s_ ij be the numbers of games the i - th team played in the j - th stadium. MFO does not want a team to have much more games in one stadium than in the others. Therefore, for each team i , the absolute difference between the maximum and minimum among s_ i1, s_ i2, . . . , s_ ik should not exceed 2 . Each team has w_ i \u2014 the amount of money MFO will earn for each game of the i - th team. If the i - th team plays l games, MFO will earn w_ i \u00b7 l . MFO needs to find what games in what stadiums they need to host in order to earn as much money as possible, not violating the rule they set. However, this problem is too complicated for MFO. Therefore, they are asking you to help them.",
    "input": "The first line contains three integers n , m , k ( 3 \u2264 n \u2264 100 , 0 \u2264 m \u2264 1 000 , 1 \u2264 k \u2264 1 000 ) \u2014 the number of teams, the number of games, and the number of stadiums. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 1 000 ) \u2014 the amount of money MFO will earn for each game of the i - th game. Each of the following m lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i = \u0338 b_ i ) \u2014 the teams that can play the i - th game. It is guaranteed that each pair of teams can play at most one game.",
    "output": "For each game in the same order, print t_ i ( 1 \u2264 t_ i \u2264 k ) \u2014 the number of the stadium, in which a_ i and b_ i will play the game. If the i - th game should not be played, t_ i should be equal to 0 . If there are multiple answers, print any.",
    "note": "One of possible solutions to the example is shown below:",
    "topics": [
      "graphs"
    ],
    "id": "1240F"
  },
  {
    "title": "Swiper, no swiping!",
    "url": "https://codeforces.com/problemset/problem/1239/F",
    "history": "I' m the Map, I' m the Map! I' m the MAP! ! ! MapIn anticipation of new adventures Boots wanted to do a good deed. After discussion with the Map and Backpack, they decided to gift Dora a connected graph. After a long search, Boots chose t graph' s variants, which Dora might like. However fox Swiper wants to spoil his plan. The Swiper knows, that Dora now is only able to count up to 3 , so he has came up with a following idea. He wants to steal some non- empty set of vertices, so that the Dora won' t notice the loss. He has decided to steal some non- empty set of vertices, so that after deletion of the stolen vertices and edges adjacent to them, every remaining vertex wouldn' t change it' s degree modulo 3 . The degree of a vertex is the number of edges it is adjacent to. It would' ve been suspicious to steal all the vertices, so Swiper needs another plan. Boots are sure, that the crime can not be allowed. However they are afraid, that they won' t be able to handle this alone. So Boots decided to ask for your help. Please determine for every graph' s variant whether the Swiper can perform the theft or not.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 000 ) \u2014 the number of graph variants. The first line of each variant contains integers n , m ( 1 \u2264 n \u2264 500 000 , 0 \u2264 m \u2264 500 000 ) , the number of vertexes and edges in the graph. Then m lines follow, each containing integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) , the indices of the vertices connected with a corresponding edge. It' s guaranteed, that the graph is connected and doesn' t contain multiple edges or self- loops. It' s guaranteed, that the sum of n over all variants is at most 500 000 and that the sum of m over all variants is at most 500 000 . Descriptions of graph' s variants are separated with an empty line.",
    "output": "For each variant: In case the answer exists, print \" Yes\" and then the answer itself. The first line should contain an integer c ( 1 < c < n ) , the number of vertices the Crook can steal, without Dora noticing the loss. On the next line print c distinct integers, the indices of the graph' s vertices in arbitrary order. Otherwise print \" No\" . In case there are several correct ways to steal the vertices, print any of them. Please note, that it' s not required to maximize the number of stolen vertices.",
    "note": "The picture below shows the third variant from the example test. The set of the vertices the Crook can steal is denoted with bold.",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": "1239F"
  },
  {
    "title": "Catowice City",
    "url": "https://codeforces.com/problemset/problem/1239/D",
    "history": "In the Catowice city next weekend the cat contest will be held. However, the jury members and the contestants haven' t been selected yet. There are n residents and n cats in the Catowice, and each resident has exactly one cat living in his house. The residents and cats are numbered with integers from 1 to n , where the i - th cat is living in the house of i - th resident. Each Catowice resident is in friendship with several cats, including the one living in his house. In order to conduct a contest, at least one jury member is needed and at least one cat contestant is needed. Of course, every jury member should know none of the contestants. For the contest to be successful, it' s also needed that the number of jury members plus the number of contestants is equal to n . Please help Catowice residents to select the jury and the contestants for the upcoming competition, or determine that it' s impossible to do.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 100 000 ) , the number of test cases. Then description of t test cases follow, where each description is as follows: The first line contains integers n and m ( 1 \u2264 n \u2264 m \u2264 10^ 6 ) , the number of Catowice residents and the number of friendship pairs between residents and cats. Each of the next m lines contains integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) , denoting that a_ i - th resident is acquaintances with b_ i - th cat. It' s guaranteed that each pair of some resident and some cat is listed at most once. It' s guaranteed, that for every i there exists a pair between i - th resident and i - th cat. Different test cases are separated with an empty line. It' s guaranteed, that the sum of n over all test cases is at most 10^ 6 and that the sum of m over all test cases is at most 10^ 6 .",
    "output": "For every test case print: \" No\" , if it' s impossible to select the jury and contestants. Otherwise print \" Yes\" . In the second line print two integers j and p ( 1 \u2264 j , 1 \u2264 p , j + p = n ) \u2014 the number of jury members and the number of contest participants. In the third line print j distinct integers from 1 to n , the indices of the residents forming a jury. In the fourth line print p distinct integers from 1 to n , the indices of the cats, which will participate in the contest. In case there are several correct answers, print any of them.",
    "note": "In the first test case, we can select the first and the third resident as a jury. Both of them are not acquaintances with a second cat, so we can select it as a contestant. In the second test case, we can select the second resident as a jury. He is not an acquaintances with a first and a third cat, so they can be selected as contestants. In the third test case, the only resident is acquaintances with the only cat, so they can' t be in the contest together. So it' s not possible to make a contest with at least one jury and at least one cat. In the fourth test case, each resident is acquaintances with every cat, so it' s again not possible to make a contest with at least one jury and at least one cat.",
    "topics": [
      "2-sat",
      "dfs and similar",
      "graph matchings",
      "graphs"
    ],
    "id": "1239D"
  },
  {
    "title": "The Maximum Subtree",
    "url": "https://codeforces.com/problemset/problem/1238/F",
    "history": "Assume that you have k one- dimensional segments s_ 1, s_ 2, . . . s_ k ( each segment is denoted by two integers \u2014 its endpoints) . Then you can build the following graph on these segments. The graph consists of k vertexes, and there is an edge between the i - th and the j - th vertexes ( i = \u0338 j ) if and only if the segments s_ i and s_ j intersect ( there exists at least one point that belongs to both of them) . For example, if s_ 1 = [ 1, 6] , s_ 2 = [ 8, 20] , s_ 3 = [ 4, 10] , s_ 4 = [ 2, 13] , s_ 5 = [ 17, 18] , then the resulting graph is the following: A tree of size m is good if it is possible to choose m one- dimensional segments so that the graph built on these segments coincides with this tree. You are given a tree, you have to find its good subtree with maximum possible size. Recall that a subtree is a connected subgraph of a tree. Note that you have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 15 \u00b7 10^ 4 ) \u2014 the number of the queries. The first line of each query contains one integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. Each of the next n - 1 lines contains two integers x and y ( 1 \u2264 x, y \u2264 n ) denoting an edge between vertices x and y . It is guaranteed that the given graph is a tree. It is guaranteed that the sum of all n does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the maximum size of a good subtree of the given tree.",
    "note": "In the first query there is a good subtree of size 8 . The vertices belonging to this subtree are 9, 4, 10, 2, 5, 1, 6, 3 .",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1238F"
  },
  {
    "title": "Alice and the Cactus",
    "url": "https://codeforces.com/problemset/problem/1236/F",
    "history": "Alice recently found some cactuses growing near her house! After several months, more and more cactuses appeared and soon they blocked the road. So Alice wants to clear them. A cactus is a connected undirected graph. No edge of this graph lies on more than one simple cycle. Let' s call a sequence of different nodes of the graph x_ 1, x_ 2, . . . , x_ k a simple cycle, if k \u2265 3 and all pairs of nodes x_ 1 and x_ 2 , x_ 2 and x_ 3 , . . . , x_ k- 1 and x_ k , x_ k and x_ 1 are connected with edges. Edges ( x_ 1, x_ 2) , ( x_ 2, x_ 3) , . . . , ( x_ k- 1, x_ k) , ( x_ k, x_ 1) lies on this simple cycle. There are so many cactuses, so it seems hard to destroy them. But Alice has magic. When she uses the magic, every node of the cactus will be removed independently with the probability 1/ 2 . When a node is removed, the edges connected to it are also removed. Now Alice wants to test her magic. She has picked a cactus with n nodes and m edges. Let X[ S] ( where S is a subset of the removed nodes) be the number of connected components in the remaining graph after removing nodes of set S . Before she uses magic, she wants to know the variance of random variable X , if all nodes of the graph have probability 1/ 2 to be removed and all n of these events are independent. By the definition the variance is equal to E[ ( X - E[ X] ) ^ 2] , where E[ X] is the expected value of X . Help her and calculate this value by modulo 10^ 9+ 7 . Formally, let M = 10^ 9 + 7 ( a prime number) . It can be shown that the answer can be expressed as an irreducible fraction p/ q , where p and q are integers and q \u2261\u03380 M . Output the integer equal to p \u00b7 q^ - 1 M . In other words, find such an integer x that 0 \u2264 x < M and x \u00b7 q \u2261 p M .",
    "input": "The first line contains two integers n and m , separated by space ( 1 \u2264 n \u2264 5 \u00b7 10^ 5, n - 1 \u2264 m \u2264 5 \u00b7 10^ 5 ) \u2014 the number of nodes and edges in the cactus. The following m lines contain two numbers u and v each, separated by space ( 1 \u2264 u, v \u2264 n, u = \u0338 v ) meaning that there is an edge between the nodes u and v . It is guaranteed that there are no loops and multiple edges in the graph and the given graph is cactus.",
    "output": "Print one integer \u2014 the variance of the number of connected components in the remaining graph, after removing a set of nodes such that each node has probability 1/ 2 to be removed and all these events are independent. This value should be found by modulo 10^ 9+ 7 .",
    "note": "In the first sample, the answer is 7/ 64 . If all nodes are removed the value of X is equal to 0 , otherwise, it is equal to 1 . So, the expected value of X is equal to 0\u00d71/ 8+ 1\u00d77/ 8= 7/ 8 . So, the variance of X is equal to ( 0 - 7/ 8) ^ 2\u00d71/ 8+ ( 1- 7/ 8) ^ 2\u00d77/ 8 = ( 7/ 8) ^ 2\u00d71/ 8+ ( 1/ 8) ^ 2\u00d77/ 8 = 7/ 64 . In the second sample, the answer is 1/ 4 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "math",
      "probabilities"
    ],
    "id": "1236F"
  },
  {
    "title": "Complete Tripartite",
    "url": "https://codeforces.com/problemset/problem/1228/D",
    "history": "You have a simple undirected graph consisting of n vertices and m edges. The graph doesn' t contain self- loops, there is at most one edge between a pair of vertices. The given graph can be disconnected. Let' s make a definition. Let v_ 1 and v_ 2 be two some nonempty subsets of vertices that do not intersect. Let f( v_ 1, v_ 2) be true if and only if all the conditions are satisfied: There are no edges with both endpoints in vertex set v_ 1 . There are no edges with both endpoints in vertex set v_ 2 . For every two vertices x and y such that x is in v_ 1 and y is in v_ 2 , there is an edge between x and y . Create three vertex sets ( v_ 1 , v_ 2 , v_ 3 ) which satisfy the conditions below; All vertex sets should not be empty. Each vertex should be assigned to only one vertex set. f( v_ 1, v_ 2) , f( v_ 2, v_ 3) , f( v_ 3, v_ 1) are all true. Is it possible to create such three vertex sets? If it' s possible, print matching vertex set for each vertex.",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264min( 3 \u00b7 10^ 5, n( n- 1) / 2) ) \u2014 the number of vertices and edges in the graph. The i - th of the next m lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i b_ i\u2264 n ) \u2014 it means there is an edge between a_ i and b_ i . The graph doesn' t contain self- loops, there is at most one edge between a pair of vertices. The given graph can be disconnected.",
    "output": "If the answer exists, print n integers. i - th integer means the vertex set number ( from 1 to 3 ) of i - th vertex. Otherwise, print - 1 . If there are multiple answers, print any.",
    "note": "In the first example, if v_ 1 = { 1 } , v_ 2 = { 2, 3 } , and v_ 3 = { 4, 5, 6 } then vertex sets will satisfy all conditions. But you can assign vertices to vertex sets in a different way; Other answers like \" 2 3 3 1 1 1\" will be accepted as well. In the second example, it' s impossible to make such vertex sets.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "hashing",
      "implementation"
    ],
    "id": "1228D"
  },
  {
    "title": "Arson In Berland Forest",
    "url": "https://codeforces.com/problemset/problem/1227/E",
    "history": "The Berland Forest can be represented as an infinite cell plane. Every cell contains a tree. That is, contained before the recent events. A destructive fire raged through the Forest, and several trees were damaged by it. Precisely speaking, you have a n \u00d7 m rectangle map which represents the damaged part of the Forest. The damaged trees were marked as \" X\" while the remaining ones were marked as \" . \" . You are sure that all burnt trees are shown on the map. All the trees outside the map are undamaged. The firemen quickly extinguished the fire, and now they are investigating the cause of it. The main version is that there was an arson: at some moment of time ( let' s consider it as 0 ) some trees were set on fire. At the beginning of minute 0 , only the trees that were set on fire initially were burning. At the end of each minute, the fire spread from every burning tree to each of 8 neighboring trees. At the beginning of minute T , the fire was extinguished. The firemen want to find the arsonists as quickly as possible. The problem is, they know neither the value of T ( how long the fire has been raging) nor the coordinates of the trees that were initially set on fire. They want you to find the maximum value of T ( to know how far could the arsonists escape) and a possible set of trees that could be initially set on fire. Note that you' d like to maximize value T but the set of trees can be arbitrary.",
    "input": "The first line contains two integer n and m ( 1 \u2264 n, m \u2264 10^ 6 , 1 \u2264 n \u00b7 m \u2264 10^ 6 ) \u2014 the sizes of the map. Next n lines contain the map. The i - th line corresponds to the i - th row of the map and contains m - character string. The j - th character of the i - th string is \" X\" if the corresponding tree is burnt and \" . \" otherwise. It' s guaranteed that the map contains at least one \" X\" .",
    "output": "In the first line print the single integer T \u2014 the maximum time the Forest was on fire. In the next n lines print the certificate: the map ( n \u00d7 m rectangle) where the trees that were set on fire are marked as \" X\" and all other trees are marked as \" . \" .",
    "note": "",
    "topics": [
      "binary search",
      "graphs",
      "graphs",
      "shortest paths"
    ],
    "id": "1227E"
  },
  {
    "title": "Tourism",
    "url": "https://codeforces.com/problemset/problem/1220/E",
    "history": "Alex decided to go on a touristic trip over the country. For simplicity let' s assume that the country has n cities and m bidirectional roads connecting them. Alex lives in city s and initially located in it. To compare different cities Alex assigned each city a score w_ i which is as high as interesting city seems to Alex. Alex believes that his trip will be interesting only if he will not use any road twice in a row. That is if Alex came to city v from city u , he may choose as the next city in the trip any city connected with v by the road, except for the city u . Your task is to help Alex plan his city in a way that maximizes total score over all cities he visited. Note that for each city its score is counted at most once, even if Alex been there several times during his trip.",
    "input": "First line of input contains two integers n and m , ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) which are numbers of cities and roads in the country. Second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 9 ) which are scores of all cities. The following m lines contain description of the roads. Each of these m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) which are cities connected by this road. It is guaranteed that there is at most one direct road between any two cities, no city is connected to itself by the road and, finally, it is possible to go from any city to any other one using only roads. The last line contains single integer s ( 1 \u2264 s \u2264 n ) , which is the number of the initial city.",
    "output": "Output single integer which is the maximum possible sum of scores of visited cities.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1220E"
  },
  {
    "title": "Alpha planetary system",
    "url": "https://codeforces.com/problemset/problem/1218/G",
    "history": "Three planets X , Y and Z within the Alpha planetary system are inhabited with an advanced civilization. The spaceports of these planets are connected by interplanetary space shuttles. The flight scheduler should decide between 1 , 2 and 3 return flights for every existing space shuttle connection. Since the residents of Alpha are strong opponents of the symmetry, there is a strict rule that any two of the spaceports connected by a shuttle must have a different number of flights. For every pair of connected spaceports, your goal is to propose a number 1 , 2 or 3 for each shuttle flight, so that for every two connected spaceports the overall number of flights differs. You may assume that: 1) Every planet has at least one spaceport 2) There exist only shuttle flights between spaceports of different planets 3) For every two spaceports there is a series of shuttle flights enabling traveling between them4) Spaceports are not connected by more than one shuttle",
    "input": "The first row of the input is the integer number N ( 3 \u2264 N \u2264 100 000) , representing overall number of spaceports. The second row is the integer number M ( 2 \u2264 M \u2264 100 000) representing number of shuttle flight connections. Third row contains N characters from the set { X, Y, Z} . Letter on I^ th position indicates on which planet is situated spaceport I . For example, \" XYYXZZ\" indicates that the spaceports 0 and 3 are located at planet X , spaceports 1 and 2 are located at Y , and spaceports 4 and 5 are at Z . Starting from the fourth row, every row contains two integer numbers separated by a whitespace. These numbers are natural numbers smaller than N and indicate the numbers of the spaceports that are connected. For example, \" 12 15 \" indicates that there is a shuttle flight between spaceports 12 and 15 .",
    "output": "The same representation of shuttle flights in separate rows as in the input, but also containing a third number from the set { 1, 2, 3} standing for the number of shuttle flights between these spaceports.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "shortest paths"
    ],
    "id": "1218G"
  },
  {
    "title": "Xor Spanning Tree",
    "url": "https://codeforces.com/problemset/problem/1218/D",
    "history": "In the galaxy far far away is the ancient interplanetary republic of Bubbleland, consisting of N planets. Between them, there are M bidirectional wormholes, each connecting a pair of planets. Bubbleland is a very centralized republic, having a capital planet Whiteplanet, from which any another planet can be reached using these wormholes. It is also guaranteed that no wormhole connects planet to itself and that no two different wormholes connect same pair of planets. We call a path that begins at one planet, visits other planets and each of them at most once and returns to starting point a tour. Interplanetary Safety Regulations guarantee that each planet belongs to at most one tour and that there are at most 42 tours. After many eons of usage, wormholes need to be repaired and each wormhole has the cost W_ i which needs to be payed for reparation. Unfortunately, the Senate of Bubbleland is short on budget. Therefore, they have decided only to fix as many wormholes as they need in order to have all planets reachable from capital and to pay as little money as they have to for this repair. However the way in which the Senate calculates the cost is different. Cost of the set of reparations is binary xor of costs of each individual reparation, that is if reparations to be made have costs A_ 1, A_ 2, . . . , A_ k , the cost of entire set is A_ 1\u2295 A_ 2\u2295 . . . \u2295 A_ k . Now the Senate would like to know how much money do they have to pay and also the number of different ways to achieve that cost modulo 1000000007 .",
    "input": "First line of input contains two numbers N ( 1 \u2264 N \u2264 100. 000) , the number of planets and M ( 1 \u2264 M \u2264 100. 041) , the number of wormholes. Following M lines contain three numbers U, V ( 1 \u2264 U = \u0338 V \u2264 N) and W ( 1 \u2264 W \u2264 100. 000) , meaning that there exists a wormhole connecting planets U and V , with repair cost of W .",
    "output": "Output two numbers, the smallest possible cost of entire reparation and the number of different valid reparations with that cost modulo 1000000007 .",
    "note": "We can repair wormholes 1 , 2 , 3 , 5 and 6 , paying 5 \u2295 1\u2295 2 \u2295 3 \u2295 4= 1 , one can check that this is the cheapest repair in which all of the planets are connected and the only valid repair with that cost.",
    "topics": [
      "divide and conquer",
      "fft",
      "graphs"
    ],
    "id": "1218D"
  },
  {
    "title": "BubbleReactor",
    "url": "https://codeforces.com/problemset/problem/1218/A",
    "history": "You are in charge of the BubbleReactor. It consists of N BubbleCores connected with N lines of electrical wiring. Each electrical wiring connects two distinct BubbleCores. There are no BubbleCores connected with more than one line of electrical wiring. Your task is to start the BubbleReactor by starting each BubbleCore. In order for a BubbleCore to be started it needs to be receiving power from a directly connected BubbleCore which is already started. However, you can kick- start one BubbleCore manually without needing power. It is guaranteed that all BubbleCores can be started. Before the BubbleCore boot up procedure its potential is calculated as the number of BubbleCores it can power on ( the number of inactive BubbleCores which are connected to it directly or with any number of inactive BubbleCores in between, itself included) Start the BubbleReactor so that the sum of all BubbleCores' potentials is maximum.",
    "input": "First line contains one integer N ( 3 \u2264 N \u2264 15. 000) , the number of BubbleCores. The following N lines contain two integers U, V ( 0 \u2264 U = \u0338 V < N) denoting that there exists electrical wiring between BubbleCores U and V .",
    "output": "Single integer, the maximum sum of all BubbleCores' potentials.",
    "note": "If we start by kickstarting BubbleCup 8 and then turning on cores 7, 2, 1, 3, 0, 9, 4, 5, 6 in that order we get potentials 10 + 9 + 8 + 7 + 6 + 5 + 1 + 3 + 1 + 1 = 51",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "1218A"
  },
  {
    "title": "Forced Online Queries Problem",
    "url": "https://codeforces.com/problemset/problem/1217/F",
    "history": "You are given an undirected graph with n vertices numbered from 1 to n . Initially there are no edges. You are asked to perform some queries on the graph. Let last be the answer to the latest query of the second type, it is set to 0 before the first such query. Then the queries are the following: 1 x y ( 1 \u2264 x, y \u2264 n , x y ) \u2014 add an undirected edge between the vertices ( x + last - 1) mod n + 1 and ( y + last - 1) mod n + 1 if it doesn' t exist yet, otherwise remove it; 2 x y ( 1 \u2264 x, y \u2264 n , x y ) \u2014 check if there exists a path between the vertices ( x + last - 1) mod n + 1 and ( y + last - 1) mod n + 1 , which goes only through currently existing edges, and set last to 1 if so and 0 otherwise. Good luck!",
    "input": "The first line contains two integer numbers n and m ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and the number of queries, respectively. Each of the following m lines contains a query of one of two aforementioned types. It is guaranteed that there is at least one query of the second type.",
    "output": "Print a string, consisting of characters ' 0' and ' 1' . The i - th character should be the answer to the i - th query of the second type. Therefore the length of the string should be equal to the number of queries of the second type.",
    "note": "The converted queries in the first example are: 1 1 2 1 1 3 2 3 2 1 3 5 2 4 5 1 2 4 2 3 4 1 2 4 2 5 4 The converted queries in the second example are: 1 1 2 1 2 3 1 3 1 2 1 3 1 1 3 2 3 1 1 2 3 2 2 3 2 1 2",
    "topics": [
      "data structures",
      "divide and conquer",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1217F"
  },
  {
    "title": "Coloring Edges",
    "url": "https://codeforces.com/problemset/problem/1217/D",
    "history": "You are given a directed graph with n vertices and m directed edges without self- loops or multiple edges. Let' s denote the k - coloring of a digraph as following: you color each edge in one of k colors. The k - coloring is good if and only if there no cycle formed by edges of same color. Find a good k - coloring of given digraph with minimum possible k .",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 5000 , 1 \u2264 m \u2264 5000 ) \u2014 the number of vertices and edges in the digraph, respectively. Next m lines contain description of edges \u2014 one per line. Each edge is a pair of integers u and v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 there is directed edge from u to v in the graph. It is guaranteed that each ordered pair ( u, v) appears in the list of edges at most once.",
    "output": "In the first line print single integer k \u2014 the number of used colors in a good k - coloring of given graph. In the second line print m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ i \u2264 k ) , where c_ i is a color of the i - th edge ( in order as they are given in the input) . If there are multiple answers print any of them ( you still have to minimize k ) .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "1217D"
  },
  {
    "title": "Petya and Construction Set",
    "url": "https://codeforces.com/problemset/problem/1214/E",
    "history": "It' s Petya' s birthday party and his friends have presented him a brand new \" Electrician- n \" construction set, which they are sure he will enjoy as he always does with weird puzzles they give him. Construction set \" Electrician- n \" consists of 2n - 1 wires and 2n light bulbs. Each bulb has its own unique index that is an integer from 1 to 2n , while all wires look the same and are indistinguishable. In order to complete this construction set one has to use each of the wires to connect two distinct bulbs. We define a chain in a completed construction set as a sequence of distinct bulbs of length at least two, such that every two consecutive bulbs in this sequence are directly connected by a wire. Completed construction set configuration is said to be correct if a resulting network of bulbs and wires has a tree structure, i. e. any two distinct bulbs are the endpoints of some chain. Petya was assembling different configurations for several days, and he noticed that sometimes some of the bulbs turn on. After a series of experiments he came up with a conclusion that bulbs indexed 2i and 2i - 1 turn on if the chain connecting them consists of exactly d_ i wires. Moreover, the following important condition holds: the value of d_ i is never greater than n . Petya did his best but was not able to find a configuration that makes all bulbs to turn on, so he seeks your assistance. Please, find out a configuration that makes all bulbs shine. It is guaranteed that such configuration always exists.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the parameter of a construction set that defines the number of bulbs and the number of wires. Next line contains n integers d_ 1, d_ 2, . . . , d_ n ( 1 \u2264 d_ i \u2264 n ) , where d_ i stands for the number of wires the chain between bulbs 2i and 2i - 1 should consist of.",
    "output": "Print 2n - 1 lines. The i - th of them should contain two distinct integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 2n , a_ i b_ i ) \u2014 indices of bulbs connected by a wire. If there are several possible valid answer you can print any of them.",
    "note": "Answer for the first sample test. Answer for the second sample test.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1214E"
  },
  {
    "title": "Path Queries",
    "url": "https://codeforces.com/problemset/problem/1213/G",
    "history": "You are given a weighted tree consisting of n vertices. Recall that a tree is a connected graph without cycles. Vertices u_ i and v_ i are connected by an edge with weight w_ i . You are given m queries. The i - th query is given as an integer q_ i . In this query you need to calculate the number of pairs of vertices ( u, v) ( u < v ) such that the maximum weight of an edge on a simple path between u and v doesn' t exceed q_ i .",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree and the number of queries. Each of the next n - 1 lines describes an edge of the tree. Edge i is denoted by three integers u_ i , v_ i and w_ i \u2014 the labels of vertices it connects ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) and the weight of the edge ( 1 \u2264 w_ i \u2264 2 \u00b7 10^ 5 ) . It is guaranteed that the given edges form a tree. The last line of the input contains m integers q_ 1, q_ 2, . . . , q_ m ( 1 \u2264 q_ i \u2264 2 \u00b7 10^ 5 ) , where q_ i is the maximum weight of an edge in the i - th query.",
    "output": "Print m integers \u2014 the answers to the queries. The i - th value should be equal to the number of pairs of vertices ( u, v) ( u < v ) such that the maximum weight of an edge on a simple path between u and v doesn' t exceed q_ i . Queries are numbered from 1 to m in the order of the input.",
    "note": "The picture shows the tree from the first example:",
    "topics": [
      "divide and conquer",
      "dsu",
      "graphs",
      "sortings",
      "trees"
    ],
    "id": "1213G"
  },
  {
    "title": "Unstable String Sort",
    "url": "https://codeforces.com/problemset/problem/1213/F",
    "history": "Authors have come up with the string s consisting of n lowercase Latin letters. You are given two permutations of its indices ( not necessary equal) p and q ( both of length n ) . Recall that the permutation is the array of length n which contains each integer from 1 to n exactly once. For all i from 1 to n- 1 the following properties hold: s[ p_ i] \u2264 s[ p_ i + 1] and s[ q_ i] \u2264 s[ q_ i + 1] . It means that if you will write down all characters of s in order of permutation indices, the resulting string will be sorted in the non- decreasing order. Your task is to restore any such string s of length n consisting of at least k distinct lowercase Latin letters which suits the given permutations. If there are multiple answers, you can print any of them.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 26 ) \u2014 the length of the string and the number of distinct characters required. The second line of the input contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct integers from 1 to n ) \u2014 the permutation p . The third line of the input contains n integers q_ 1, q_ 2, . . . , q_ n ( 1 \u2264 q_ i \u2264 n , all q_ i are distinct integers from 1 to n ) \u2014 the permutation q .",
    "output": "If it is impossible to find the suitable string, print \" NO\" on the first line. Otherwise print \" YES\" on the first line and string s on the second line. It should consist of n lowercase Latin letters, contain at least k distinct characters and suit the given permutations. If there are multiple answers, you can print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1213F"
  },
  {
    "title": "Unusual Graph",
    "url": "https://codeforces.com/problemset/problem/1211/I",
    "history": "Ivan on his birthday was presented with array of non- negative integers a_ 1, a_ 2, . . . , a_ n . He immediately noted that all a_ i satisfy the condition 0 \u2264 a_ i \u2264 15 . Ivan likes graph theory very much, so he decided to transform his sequence to the graph. There will be n vertices in his graph, and vertices u and v will present in the graph if and only if binary notations of integers a_ u and a_ v are differ in exactly one bit ( in other words, a_ u \u2295 a_ v = 2^ k for some integer k \u2265 0 . Where \u2295 is Bitwise XOR) . A terrible thing happened in a couple of days, Ivan forgot his sequence a , and all that he remembers is constructed graph! Can you help him, and find any sequence a_ 1, a_ 2, . . . , a_ n , such that graph constructed by the same rules that Ivan used will be the same as his graph?",
    "input": "The first line of input contain two integers n, m ( 1 \u2264 n \u2264 500, 0 \u2264 m \u2264n( n- 1) / 2 ) : number of vertices and edges in Ivan' s graph. Next m lines contain the description of edges: i - th line contain two integers u_ i, v_ i ( 1 \u2264 u_ i, v_ i \u2264 n; u_ i = \u0338 v_ i ) , describing undirected edge connecting vertices u_ i and v_ i in the graph. It is guaranteed that there are no multiple edges in the graph. It is guaranteed that there exists some solution for the given graph.",
    "output": "Output n space- separated integers, a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 15 ) . Printed numbers should satisfy the constraints: edge between vertices u and v present in the graph if and only if a_ u \u2295 a_ v = 2^ k for some integer k \u2265 0 . It is guaranteed that there exists some solution for the given graph. If there are multiple possible solutions, you can output any.",
    "note": "",
    "topics": [
      "*special",
      "graphs"
    ],
    "id": "1211I"
  },
  {
    "title": "kotlinkotlinkotlinkotlin...",
    "url": "https://codeforces.com/problemset/problem/1211/F",
    "history": "Polycarp really likes writing the word \" kotlin\" . He wrote this word several times in a row without spaces. For example, he could write the string like \" kotlinkotlinkotlinkotlin\" . Polycarp sliced ( cut) the written string into n pieces and mixed them. As a result, he has n strings s_ 1, s_ 2, . . . , s_ n and he can arrange them in the right order, concatenate ( join) all of them and get a string like \" kotlinkotlin. . . kotlin\" . Help Polycarp to find the right order of strings s_ 1, s_ 2, . . . , s_ n , so that if he writes the strings in this order, he will get the word \" kotlin\" or the sequence of this word. Pay attention that you must use all given strings and you must use each string only once.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of Polycarp' s strings. Next lines of the input contain n Polycarp' s strings. Total sum of their lengths doesn' t exceed 3\u00b710^ 5 . It' s guaranteed that there is the right order of arrangement the strings that if you concatenate them into one string, you will get some non- empty sequence of the word \" kotlin\" .",
    "output": "Print n different integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) , where p_ i is an index of the string that should be the i - th in a required concatenation. In other words, the result of concatenation s_ p_ 1+ s_ p_ 2+ . . . + s_ p_ n must be in the form \" kotlinkotlin. . . kotlin\" . If there are many solutions, print any of them.",
    "note": "",
    "topics": [
      "*special",
      "graphs",
      "implementation",
      "strings"
    ],
    "id": "1211F"
  },
  {
    "title": "Konrad and Company Evaluation",
    "url": "https://codeforces.com/problemset/problem/1210/D",
    "history": "Konrad is a Human Relations consultant working for VoltModder, a large electrical equipment producer. Today, he has been tasked with evaluating the level of happiness in the company. There are n people working for VoltModder, numbered from 1 to n . Each employee earns a different amount of money in the company \u2014 initially, the i - th person earns i rubles per day. On each of q following days, the salaries will be revised. At the end of the i - th day, employee v_ i will start earning n+ i rubles per day and will become the best- paid person in the company. The employee will keep his new salary until it gets revised again. Some pairs of people don' t like each other. This creates a great psychological danger in the company. Formally, if two people a and b dislike each other and a earns more money than b , employee a will brag about this to b . A dangerous triple is a triple of three employees a , b and c , such that a brags to b , who in turn brags to c . If a dislikes b , then b dislikes a . At the beginning of each day, Konrad needs to evaluate the number of dangerous triples in the company. Can you help him do it?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100 000 , 0 \u2264 m \u2264 100 000 ) \u2014 the number of employees in the company and the number of pairs of people who don' t like each other. Each of the following m lines contains two integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i = \u0338 b_ i ) denoting that employees a_ i and b_ i hate each other ( that is, a_ i dislikes b_ i and b_ i dislikes a_ i ) . Each such relationship will be mentioned exactly once. The next line contains an integer q ( 0 \u2264 q \u2264 100 000 ) \u2014 the number of salary revisions. The i - th of the following q lines contains a single integer v_ i ( 1 \u2264 v_ i \u2264 n ) denoting that at the end of the i - th day, employee v_ i will earn the most.",
    "output": "Output q + 1 integers. The i - th of them should contain the number of dangerous triples in the company at the beginning of the i - th day.",
    "note": "Consider the first sample test. The i - th row in the following image shows the structure of the company at the beginning of the i - th day. A directed edge from a to b denotes that employee a brags to employee b . The dangerous triples are marked by highlighted edges.",
    "topics": [
      "graphs"
    ],
    "id": "1210D"
  },
  {
    "title": "Anadi and Domino",
    "url": "https://codeforces.com/problemset/problem/1210/A",
    "history": "Anadi has a set of dominoes. Every domino has two parts, and each part contains some dots. For every a and b such that 1 \u2264 a \u2264 b \u2264 6 , there is exactly one domino with a dots on one half and b dots on the other half. The set contains exactly 21 dominoes. Here is an exact illustration of his set: Also, Anadi has an undirected graph without self- loops and multiple edges. He wants to choose some dominoes and place them on the edges of this graph. He can use at most one domino of each type. Each edge can fit at most one domino. It' s not necessary to place a domino on each edge of the graph. When placing a domino on an edge, he also chooses its direction. In other words, one half of any placed domino must be directed toward one of the endpoints of the edge and the other half must be directed toward the other endpoint. There' s a catch: if there are multiple halves of dominoes directed toward the same vertex, each of these halves must contain the same number of dots. How many dominoes at most can Anadi place on the edges of his graph?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 7 , 0 \u2264 m \u2264n\u00b7( n- 1) / 2 ) \u2014 the number of vertices and the number of edges in the graph. The next m lines contain two integers each. Integers in the i - th line are a_ i and b_ i ( 1 \u2264 a, b \u2264 n , a = \u0338 b ) and denote that there is an edge which connects vertices a_ i and b_ i . The graph might be disconnected. It' s however guaranteed that the graph doesn' t contain any self- loops, and that there is at most one edge between any pair of vertices.",
    "output": "Output one integer which denotes the maximum number of dominoes which Anadi can place on the edges of the graph.",
    "note": "Here is an illustration of Anadi' s graph from the first sample test: And here is one of the ways to place a domino on each of its edges: Note that each vertex is faced by the halves of dominoes with the same number of dots. For instance, all halves directed toward vertex 1 have three dots.",
    "topics": [
      "brute force",
      "graphs"
    ],
    "id": "1210A"
  },
  {
    "title": "Koala and Notebook",
    "url": "https://codeforces.com/problemset/problem/1209/F",
    "history": "Koala Land consists of m bidirectional roads connecting n cities. The roads are numbered from 1 to m by order in input. It is guaranteed, that one can reach any city from every other city. Koala starts traveling from city 1 . Whenever he travels on a road, he writes its number down in his notebook. He doesn' t put spaces between the numbers, so they all get concatenated into a single number. Before embarking on his trip, Koala is curious about the resulting number for all possible destinations. For each possible destination, what is the smallest number he could have written for it? Since these numbers may be quite large, print their remainders modulo 10^ 9+ 7 . Please note, that you need to compute the remainder of the minimum possible number, not the minimum possible remainder.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 10^ 5, n - 1 \u2264 m \u2264 10^ 5 ) , the number of cities and the number of roads, respectively. The i - th of the following m lines contains integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) , representing a bidirectional road between cities x_ i and y_ i . It is guaranteed, that for any pair of cities there is at most one road connecting them, and that one can reach any city from every other city.",
    "output": "Print n - 1 integers, the answer for every city except for the first city. The i - th integer should be equal to the smallest number he could have written for destination i+ 1 . Since this number may be large, output its remainder modulo 10^ 9+ 7 .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths",
      "strings",
      "trees"
    ],
    "id": "1209F"
  },
  {
    "title": "Cow and Snacks",
    "url": "https://codeforces.com/problemset/problem/1209/D",
    "history": "The legendary Farmer John is throwing a huge party, and animals from all over the world are hanging out at his house. His guests are hungry, so he instructs his cow Bessie to bring out the snacks! Moo! There are n snacks flavors, numbered with integers 1, 2, . . . , n . Bessie has n snacks, one snack of each flavor. Every guest has exactly two favorite flavors. The procedure for eating snacks will go as follows: First, Bessie will line up the guests in some way. Then in this order, guests will approach the snacks one by one. Each guest in their turn will eat all remaining snacks of their favorite flavor. In case no favorite flavors are present when a guest goes up, they become very sad. Help Bessie to minimize the number of sad guests by lining the guests in an optimal way.",
    "input": "The first line contains integers n and k ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 10^ 5 ) , the number of snacks and the number of guests. The i - th of the following k lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) , favorite snack flavors of the i - th guest.",
    "output": "Output one integer, the smallest possible number of sad guests.",
    "note": "In the first example, Bessie can order the guests like this: 3, 1, 2, 4 . Guest 3 goes first and eats snacks 1 and 4 . Then the guest 1 goes and eats the snack 2 only, because the snack 1 has already been eaten. Similarly, the guest 2 goes up and eats the snack 3 only. All the snacks are gone, so the guest 4 will be sad. In the second example, one optimal ordering is 2, 1, 3, 5, 4 . All the guests will be satisfied.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1209D"
  },
  {
    "title": "Shortest Cycle",
    "url": "https://codeforces.com/problemset/problem/1205/B",
    "history": "You are given n integer numbers a_ 1, a_ 2, . . . , a_ n . Consider graph on n nodes, in which nodes i , j ( i= \u0338 j ) are connected if and only if, a_ i AND a_ j= \u0338 0 , where AND denotes the bitwise AND operation. Find the length of the shortest cycle in this graph or determine that it doesn' t have cycles at all.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 number of numbers. The second line contains n integer numbers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 18 ) .",
    "output": "If the graph doesn' t have any cycles, output - 1 . Else output the length of the shortest cycle.",
    "note": "In the first example, the shortest cycle is ( 9, 3, 6, 28) . In the second example, the shortest cycle is ( 5, 12, 9) . The graph has no cycles in the third example.",
    "topics": [
      "bitmasks",
      "brute force",
      "graphs",
      "shortest paths"
    ],
    "id": "1205B"
  },
  {
    "title": "Anna, Svyatoslav and Maps",
    "url": "https://codeforces.com/problemset/problem/1204/C",
    "history": "The main characters have been omitted to be short. You are given a directed unweighted graph without loops with n vertexes and a path in it ( that path is not necessary simple) given by a sequence p_ 1, p_ 2, . . . , p_ m of m vertexes; for each 1 \u2264 i < m there is an arc from p_ i to p_ i+ 1 . Define the sequence v_ 1, v_ 2, . . . , v_ k of k vertexes as good, if v is a subsequence of p , v_ 1 = p_ 1 , v_ k = p_ m , and p is one of the shortest paths passing through the vertexes v_ 1 , . . . , v_ k in that order. A sequence a is a subsequence of a sequence b if a can be obtained from b by deletion of several ( possibly, zero or all) elements. It is obvious that the sequence p is good but your task is to find the shortest good subsequence. If there are multiple shortest good subsequences, output any of them.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of vertexes in a graph. The next n lines define the graph by an adjacency matrix: the j - th character in the i - st line is equal to 1 if there is an arc from vertex i to the vertex j else it is equal to 0 . It is guaranteed that the graph doesn' t contain loops. The next line contains a single integer m ( 2 \u2264 m \u2264 10^ 6 ) \u2014 the number of vertexes in the path. The next line contains m integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 n ) \u2014 the sequence of vertexes in the path. It is guaranteed that for any 1 \u2264 i < m there is an arc from p_ i to p_ i+ 1 .",
    "output": "In the first line output a single integer k ( 2 \u2264 k \u2264 m ) \u2014 the length of the shortest good subsequence. In the second line output k integers v_ 1 , . . . , v_ k ( 1 \u2264 v_ i \u2264 n ) \u2014 the vertexes in the subsequence. If there are multiple shortest subsequences, print any. Any two consecutive numbers should be distinct.",
    "note": "Below you can see the graph from the first example: The given path is passing through vertexes 1 , 2 , 3 , 4 . The sequence 1- 2- 4 is good because it is the subsequence of the given path, its first and the last elements are equal to the first and the last elements of the given path respectively, and the shortest path passing through vertexes 1 , 2 and 4 in that order is 1- 2- 3- 4 . Note that subsequences 1- 4 and 1- 3- 4 aren' t good because in both cases the shortest path passing through the vertexes of these sequences is 1- 3- 4 . In the third example, the graph is full so any sequence of vertexes in which any two consecutive elements are distinct defines a path consisting of the same number of vertexes. In the fourth example, the paths 1- 2- 4 and 1- 3- 4 are the shortest paths passing through the vertexes 1 and 4 .",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1204C"
  },
  {
    "title": "Knightmare (hard)",
    "url": "https://codeforces.com/problemset/problem/1201/E2",
    "history": "This is an interactive problem. Alice and Bob are playing a game on the chessboard of size n \u00d7 m where n and m are even. The rows are numbered from 1 to n and the columns are numbered from 1 to m . There are two knights on the chessboard. A white one initially is on the position ( x_ 1, y_ 1) , while the black one is on the position ( x_ 2, y_ 2) . Alice will choose one of the knights to play with, and Bob will use the other one. The Alice and Bob will play in turns and whoever controls the white knight starts the game. During a turn, the player must move their knight adhering the chess rules. That is, if the knight is currently on the position ( x, y) , it can be moved to any of those positions ( as long as they are inside the chessboard) : ( x+ 1, y+ 2) , ( x+ 1, y- 2) , ( x- 1, y+ 2) , ( x- 1, y- 2) , ( x+ 2, y+ 1) , ( x+ 2, y- 1) , ( x- 2, y+ 1) , ( x- 2, y- 1) . We all know that knights are strongest in the middle of the board. Both knight have a single position they want to reach: the owner of the white knight wins if it captures the black knight or if the white knight is at ( n/ 2, m/ 2) and this position is not under attack of the black knight at this moment; The owner of the black knight wins if it captures the white knight or if the black knight is at ( n/ 2+ 1, m/ 2) and this position is not under attack of the white knight at this moment. Formally, the player who captures the other knight wins. The player who is at its target square ( ( n/ 2, m/ 2) for white, ( n/ 2+ 1, m/ 2) for black) and this position is not under opponent' s attack, also wins. A position is under attack of a knight if it can move into this position. Capturing a knight means that a player moves their knight to the cell where the opponent' s knight is. If Alice made 350 moves and nobody won, the game is a draw. Alice is unsure in her chess skills, so she asks you for a help. Choose a knight and win the game for her. It can be shown, that Alice always has a winning strategy. InteractionThe interaction starts with two integers n and m ( 6 \u2264 n, m \u2264 1000 , n and m are even) \u2014 the dimensions of the chessboard. The second line contains four integers x_ 1, y_ 1, x_ 2, y_ 2 ( 1 \u2264 x_ 1, x_ 2 \u2264 n , 1 \u2264 y_ 1, y_ 2 \u2264 m ) \u2014 the positions of the white and the black knight. It is guaranteed that the two knights have different starting positions. It is also guaranteed that none of the knights are in their own target square in the beginning of the game ( however, they can be on the opponent' s target position) . Your program should reply with either \" WHITE\" or \" BLACK\" , depending on the knight you want to play with. In case you select the white knight, you start the game. During every your turn, you need to print two integers: x and y , the position to move the knight. If you won the game by this turn, you must terminate your program immediately. After every turn of the opponent, you will receive two integers: x and y , the position where Bob moved his knight. If your last move was illegal or you lost the game after jury' s turn, or you made 350 moves, and haven' t won, you will receive \" - 1 - 1\" . In such cases, you should terminate your program and then you will get a Wrong Answer verdict. After printing anything, do not forget to output the end of line and flush the output. Otherwise, you might get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Hacks are disabled for this problem. Jury' s program is adaptive: the moves of jury may depend on the moves made by your program.",
    "input": "",
    "output": "",
    "note": "In the first example, the white knight can reach it' s target square in one move. In the second example black knight wins, no matter what white knight moves.",
    "topics": [
      "graphs",
      "interactive",
      "shortest paths"
    ],
    "id": "1201E2"
  },
  {
    "title": "Knightmare (easy)",
    "url": "https://codeforces.com/problemset/problem/1201/E1",
    "history": "This problem only differs from the next problem in constraints. This is an interactive problem. Alice and Bob are playing a game on the chessboard of size n \u00d7 m where n and m are even. The rows are numbered from 1 to n and the columns are numbered from 1 to m . There are two knights on the chessboard. A white one initially is on the position ( x_ 1, y_ 1) , while the black one is on the position ( x_ 2, y_ 2) . Alice will choose one of the knights to play with, and Bob will use the other one. The Alice and Bob will play in turns and whoever controls the white knight starts the game. During a turn, the player must move their knight adhering the chess rules. That is, if the knight is currently on the position ( x, y) , it can be moved to any of those positions ( as long as they are inside the chessboard) : ( x+ 1, y+ 2) , ( x+ 1, y- 2) , ( x- 1, y+ 2) , ( x- 1, y- 2) , ( x+ 2, y+ 1) , ( x+ 2, y- 1) , ( x- 2, y+ 1) , ( x- 2, y- 1) . We all know that knights are strongest in the middle of the board. Both knight have a single position they want to reach: the owner of the white knight wins if it captures the black knight or if the white knight is at ( n/ 2, m/ 2) and this position is not under attack of the black knight at this moment; The owner of the black knight wins if it captures the white knight or if the black knight is at ( n/ 2+ 1, m/ 2) and this position is not under attack of the white knight at this moment. Formally, the player who captures the other knight wins. The player who is at its target square ( ( n/ 2, m/ 2) for white, ( n/ 2+ 1, m/ 2) for black) and this position is not under opponent' s attack, also wins. A position is under attack of a knight if it can move into this position. Capturing a knight means that a player moves their knight to the cell where the opponent' s knight is. If Alice made 350 moves and nobody won, the game is a draw. Alice is unsure in her chess skills, so she asks you for a help. Choose a knight and win the game for her. It can be shown, that Alice always has a winning strategy. InteractionThe interaction starts with two integers n and m ( 6 \u2264 n, m \u2264 40 , n and m are even) \u2014 the dimensions of the chessboard. The second line contains four integers x_ 1, y_ 1, x_ 2, y_ 2 ( 1 \u2264 x_ 1, x_ 2 \u2264 n , 1 \u2264 y_ 1, y_ 2 \u2264 m ) \u2014 the positions of the white and the black knight. It is guaranteed that the two knights have different starting positions. It is also guaranteed that none of the knights are in their own target square in the beginning of the game ( however, they can be on the opponent' s target position) . Your program should reply with either \" WHITE\" or \" BLACK\" , depending on the knight you want to play with. In case you select the white knight, you start the game. During every your turn, you need to print two integers: x and y , the position to move the knight. If you won the game by this turn, you must terminate your program immediately. After every turn of the opponent, you will receive two integers: x and y , the position where Bob moved his knight. If your last move was illegal or you lost the game after jury' s turn, or you made 350 moves, and haven' t won, you will receive \" - 1 - 1\" . In such cases, you should terminate your program and then you will get a Wrong Answer verdict. After printing anything, do not forget to output the end of line and flush the output. Otherwise, you might get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Hacks are disabled for this problem. Jury' s program is adaptive: the moves of jury may depend on the moves made by your program.",
    "input": "",
    "output": "",
    "note": "In the first example, the white knight can reach it' s target square in one move. In the second example black knight wins, no matter what white knight moves.",
    "topics": [
      "graphs",
      "interactive",
      "shortest paths"
    ],
    "id": "1201E1"
  },
  {
    "title": "Graph Traveler",
    "url": "https://codeforces.com/problemset/problem/1200/F",
    "history": "Gildong is experimenting with an interesting machine Graph Traveler. In Graph Traveler, there is a directed graph consisting of n vertices numbered from 1 to n . The i - th vertex has m_ i outgoing edges that are labeled as e_ i[ 0] , e_ i[ 1] , . . . , e_ i[ m_ i- 1] , each representing the destination vertex of the edge. The graph can have multiple edges and self- loops. The i - th vertex also has an integer k_ i written on itself. A travel on this graph works as follows. Gildong chooses a vertex to start from, and an integer to start with. Set the variable c to this integer. After arriving at the vertex i , or when Gildong begins the travel at some vertex i , add k_ i to c . The next vertex is e_ i[ x] where x is an integer 0 \u2264 x \u2264 m_ i- 1 satisfying x \u2261 c m_ i . Go to the next vertex and go back to step 2. It' s obvious that a travel never ends, since the 2nd and the 3rd step will be repeated endlessly. For example, assume that Gildong starts at vertex 1 with c = 5 , and m_ 1 = 2 , e_ 1[ 0] = 1 , e_ 1[ 1] = 2 , k_ 1 = - 3 . Right after he starts at vertex 1 , c becomes 2 . Since the only integer x ( 0 \u2264 x \u2264 1 ) where x \u2261 c m_ i is 0 , Gildong goes to vertex e_ 1[ 0] = 1 . After arriving at vertex 1 again, c becomes - 1 . The only integer x satisfying the conditions is 1 , so he goes to vertex e_ 1[ 1] = 2 , and so on. Since Gildong is quite inquisitive, he' s going to ask you q queries. He wants to know how many distinct vertices will be visited infinitely many times, if he starts the travel from a certain vertex with a certain value of c . Note that you should not count the vertices that will be visited only finite times.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 1000 ) , the number of vertices in the graph. The second line contains n integers. The i - th integer is k_ i ( - 10^ 9 \u2264 k_ i \u2264 10^ 9 ) , the integer written on the i - th vertex. Next 2 \u00b7 n lines describe the edges of each vertex. The ( 2 \u00b7 i + 1) - st line contains an integer m_ i ( 1 \u2264 m_ i \u2264 10 ) , the number of outgoing edges of the i - th vertex. The ( 2 \u00b7 i + 2) - nd line contains m_ i integers e_ i[ 0] , e_ i[ 1] , . . . , e_ i[ m_ i- 1] , each having an integer value between 1 and n , inclusive. Next line contains an integer q ( 1 \u2264 q \u2264 10^ 5 ) , the number of queries Gildong wants to ask. Next q lines contains two integers x and y ( 1 \u2264 x \u2264 n , - 10^ 9 \u2264 y \u2264 10^ 9 ) each, which mean that the start vertex is x and the starting value of c is y .",
    "output": "For each query, print the number of distinct vertices that will be visited infinitely many times, if Gildong starts at vertex x with starting integer y .",
    "note": "The first example can be shown like the following image: Three integers are marked on i - th vertex: i , k_ i , and m_ i respectively. The outgoing edges are labeled with an integer representing the edge number of i - th vertex. The travel for each query works as follows. It is described as a sequence of phrases, each in the format \" vertex ( c after k_ i added) \" . 1( 0) \u2192 2( 0) \u2192 2( 0) \u2192. . . 2( 0) \u2192 2( 0) \u2192. . . 3( - 1) \u2192 1( - 1) \u2192 3( - 1) \u2192. . . 4( - 2) \u2192 2( - 2) \u2192 2( - 2) \u2192. . . 1( 1) \u2192 3( 1) \u2192 4( 1) \u2192 1( 1) \u2192. . . 1( 5) \u2192 3( 5) \u2192 1( 5) \u2192. . . The second example is same as the first example, except that the vertices have non- zero values. Therefore the answers to the queries also differ from the first example. The queries for the second example works as follows: 1( 4) \u2192 2( - 1) \u2192 2( - 6) \u2192. . . 2( - 5) \u2192 2( - 10) \u2192. . . 3( - 4) \u2192 1( 0) \u2192 2( - 5) \u2192 2( - 10) \u2192. . . 4( - 3) \u2192 1( 1) \u2192 3( - 2) \u2192 4( - 3) \u2192. . . 1( 5) \u2192 3( 2) \u2192 1( 6) \u2192 2( 1) \u2192 2( - 4) \u2192. . . 1( 9) \u2192 3( 6) \u2192 2( 1) \u2192 2( - 4) \u2192. . .",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "implementation",
      "math",
      "number theory"
    ],
    "id": "1200F"
  },
  {
    "title": "Rectangle Painting 2",
    "url": "https://codeforces.com/problemset/problem/1198/E",
    "history": "There is a square grid of size n \u00d7 n . Some cells are colored in black, all others are colored in white. In one operation you can select some rectangle and color all its cells in white. It costs min( h, w) to color a rectangle of size h \u00d7 w . You are to make all cells white for minimum total cost. The square is large, so we give it to you in a compressed way. The set of black cells is the union of m rectangles.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 9 , 0 \u2264 m \u2264 50 ) \u2014 the size of the square grid and the number of black rectangles. Each of the next m lines contains 4 integers x_ i1 y_ i1 x_ i2 y_ i2 ( 1 \u2264 x_ i1\u2264 x_ i2\u2264 n , 1 \u2264 y_ i1\u2264 y_ i2\u2264 n ) \u2014 the coordinates of the bottom- left and the top- right corner cells of the i - th black rectangle. The rectangles may intersect.",
    "output": "Print a single integer \u2014 the minimum total cost of painting the whole square in white.",
    "note": "The examples and some of optimal solutions are shown on the pictures below.",
    "topics": [
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": "1198E"
  },
  {
    "title": "Matching vs  Independent Set",
    "url": "https://codeforces.com/problemset/problem/1198/C",
    "history": "You are given a graph with 3 \u00b7 n vertices and m edges. You are to find a matching of n edges, or an independent set of n vertices. A set of edges is called a matching if no two edges share an endpoint. A set of vertices is called an independent set if no two vertices are connected with an edge.",
    "input": "The first line contains a single integer T \u2265 1 \u2014 the number of graphs you need to process. The description of T graphs follows. The first line of description of a single graph contains two integers n and m , where 3 \u00b7 n is the number of vertices, and m is the number of edges in the graph ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264 5 \u00b7 10^ 5 ) . Each of the next m lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 3 \u00b7 n ) , meaning that there is an edge between vertices v_ i and u_ i . It is guaranteed that there are no self- loops and no multiple edges in the graph. It is guaranteed that the sum of all n over all graphs in a single test does not exceed 10^ 5 , and the sum of all m over all graphs in a single test does not exceed 5 \u00b7 10^ 5 .",
    "output": "Print your answer for each of the T graphs. Output your answer for a single graph in the following format. If you found a matching of size n , on the first line print \" Matching\" ( without quotes) , and on the second line print n integers \u2014 the indices of the edges in the matching. The edges are numbered from 1 to m in the input order. If you found an independent set of size n , on the first line print \" IndSet\" ( without quotes) , and on the second line print n integers \u2014 the indices of the vertices in the independent set. If there is no matching and no independent set of the specified size, print \" Impossible\" ( without quotes) . You can print edges and vertices in any order. If there are several solutions, print any. In particular, if there are both a matching of size n , and an independent set of size n , then you should print exactly one of such matchings or exactly one of such independent sets.",
    "note": "The first two graphs are same, and there are both a matching of size 1 and an independent set of size 1. Any of these matchings and independent sets is a correct answer. The third graph does not have a matching of size 2, however, there is an independent set of size 2. Moreover, there is an independent set of size 5: 2 3 4 5 6. However such answer is not correct, because you are asked to find an independent set ( or matching) of size exactly n . The fourth graph does not have an independent set of size 2, but there is a matching of size 2.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1198C"
  },
  {
    "title": "Gang Up",
    "url": "https://codeforces.com/problemset/problem/1187/G",
    "history": "The leader of some very secretive organization has decided to invite all other members to a meeting. All members of the organization live in the same town which can be represented as n crossroads connected by m two- directional streets. The meeting will be held in the leader' s house near the crossroad 1 . There are k members of the organization invited to the meeting; i - th of them lives near the crossroad a_ i . All members of the organization receive the message about the meeting at the same moment and start moving to the location where the meeting is held. In the beginning of each minute each person is located at some crossroad. He or she can either wait a minute at this crossroad, or spend a minute to walk from the current crossroad along some street to another crossroad ( obviously, it is possible to start walking along the street only if it begins or ends at the current crossroad) . In the beginning of the first minute each person is at the crossroad where he or she lives. As soon as a person reaches the crossroad number 1 , he or she immediately comes to the leader' s house and attends the meeting. Obviously, the leader wants all other members of the organization to come up as early as possible. But, since the organization is very secretive, the leader does not want to attract much attention. Let' s denote the discontent of the leader as follows initially the discontent is 0 ; whenever a person reaches the crossroad number 1 , the discontent of the leader increases by c \u00b7 x , where c is some fixed constant, and x is the number of minutes it took the person to reach the crossroad number 1 ; whenever x members of the organization walk along the same street at the same moment in the same direction, dx^ 2 is added to the discontent, where d is some fixed constant. This is not cumulative: for example, if two persons are walking along the same street in the same direction at the same moment, then 4d is added to the discontent, not 5d . Before sending a message about the meeting, the leader can tell each member of the organization which path they should choose and where they should wait. Help the leader to establish a plan for every member of the organization so they all reach the crossroad 1 , and the discontent is minimized.",
    "input": "The first line of the input contains five integer numbers n , m , k , c and d ( 2 \u2264 n \u2264 50 , n - 1 \u2264 m \u2264 50 , 1 \u2264 k, c, d \u2264 50 ) \u2014 the number of crossroads, the number of streets, the number of persons invited to the meeting and the constants affecting the discontent, respectively. The second line contains k numbers a_ 1 , a_ 2 , . . . , a_ k ( 2 \u2264 a_ i \u2264 n ) \u2014 the crossroads where the members of the organization live. Then m lines follow, each denoting a bidirectional street. Each line contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) denoting a street connecting crossroads x_ i and y_ i . There may be multiple streets connecting the same pair of crossroads. It is guaranteed that every crossroad can be reached from every other crossroad using the given streets.",
    "output": "Print one integer: the minimum discontent of the leader after everyone reaches crossroad 1 .",
    "note": "The best course of action in the first test is the following: the first person goes along the street 2 to the crossroad 2 , then goes along the street 1 to the crossroad 1 and attends the meeting; the second person waits one minute on the crossroad 3 , then goes along the street 2 to the crossroad 2 , then goes along the street 1 to the crossroad 1 and attends the meeting; the third person waits two minutes on the crossroad 3 , then goes along the street 2 to the crossroad 2 , then goes along the street 1 to the crossroad 1 and attends the meeting; the fourth person waits three minutes on the crossroad 3 , then goes along the street 2 to the crossroad 2 , then goes along the street 1 to the crossroad 1 and attends the meeting.",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1187G"
  },
  {
    "title": "Daleks' Invasion (hard)",
    "url": "https://codeforces.com/problemset/problem/1184/E3",
    "history": "With your help, Heidi has prepared a plan of trap placement and defence. Yet suddenly, the Doctor popped out of the TARDIS and told her that he had spied on the Daleks' preparations, and there is more of them than ever. Desperate times require desperate measures, so Heidi is going to risk meeting with the Daleks and she will consider placing a trap along any Corridor. This means she needs your help again in calculating E_ max( c) \u2013 the largest e \u2264 10^ 9 such that if we changed the energy requirement of c to e , then the Daleks might use c in their invasion \u2013 but this time for all Time Corridors.",
    "input": "First line: number n of destinations, number m of corridors ( 2 \u2264 n \u2264 10^ 5 , n - 1 \u2264 m \u2264 10^ 6 ) . The next m lines: destinations a , b and energy e ( 1 \u2264 a, b \u2264 n , a = \u0338 b , 0 \u2264 e \u2264 10^ 9 ) . No pair { a, b} will repeat. The graph is guaranteed to be connected. It is not guaranteed that all energy requirements e are distinct, or that the minimum spanning tree is unique.",
    "output": "Output m lines, each containing one integer: E_ max( c_ i) for the i - th Corridor c_ i from the input.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1184E3"
  },
  {
    "title": "Daleks' Invasion (medium)",
    "url": "https://codeforces.com/problemset/problem/1184/E2",
    "history": "After a successful field test, Heidi is considering deploying a trap along some Corridor, possibly not the first one. She wants to avoid meeting the Daleks inside the Time Vortex, so for abundance of caution she considers placing the traps only along those Corridors that are not going to be used according to the current Daleks' plan \u2013 which is to use a minimum spanning tree of Corridors. Heidi knows that all energy requirements for different Corridors are now different, and that the Daleks have a single unique plan which they are intending to use. Your task is to calculate the number E_ max( c) , which is defined in the same way as in the easy version \u2013 i. e. , the largest e \u2264 10^ 9 such that if we changed the energy of corridor c to e , the Daleks might use it \u2013 but now for every corridor that Heidi considers.",
    "input": "The first line: number n of destinations, number m of Time Corridors ( 2 \u2264 n \u2264 10^ 5 , n - 1 \u2264 m \u2264 10^ 6 ) . The next m lines: destinations a , b and energy e ( 1 \u2264 a, b \u2264 n , a = \u0338 b , 0 \u2264 e \u2264 10^ 9 ) . No pair { a, b} will repeat. The graph is guaranteed to be connected. All energy requirements e are distinct.",
    "output": "Output m- ( n- 1) lines, each containing one integer: E_ max( c_ i) for the i - th Corridor c_ i from the input that is not part of the current Daleks' plan ( minimum spanning tree) .",
    "note": "If m = n- 1 , then you need not output anything.",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "1184E2"
  },
  {
    "title": "Daleks' Invasion (easy)",
    "url": "https://codeforces.com/problemset/problem/1184/E1",
    "history": "Heidi found out that the Daleks have created a network of bidirectional Time Corridors connecting different destinations ( at different times! ) . She suspects that they are planning another invasion on the entire Space and Time. In order to counter the invasion, she plans to deploy a trap in the Time Vortex, along a carefully chosen Time Corridor. She knows that tinkering with the Time Vortex is dangerous, so she consulted the Doctor on how to proceed. She has learned the following: Different Time Corridors require different amounts of energy to keep stable. Daleks are unlikely to use all corridors in their invasion. They will pick a set of Corridors that requires the smallest total energy to maintain, yet still makes ( time) travel possible between any two destinations ( for those in the know: they will use a minimum spanning tree) . Setting the trap may modify the energy required to keep the Corridor stable. Heidi decided to carry out a field test and deploy one trap, placing it along the first Corridor. But she needs to know whether the Daleks are going to use this corridor after the deployment of the trap. She gives you a map of Time Corridors ( an undirected graph) with energy requirements for each Corridor. For a Corridor c , E_ max( c) is the largest e \u2264 10^ 9 such that if we changed the required amount of energy of c to e , then the Daleks may still be using c in their invasion ( that is, it belongs to some minimum spanning tree) . Your task is to calculate E_ max( c_ 1) for the Corridor c_ 1 that Heidi plans to arm with a trap, which is the first edge in the graph.",
    "input": "The first line contains integers n and m ( 2 \u2264 n \u2264 10^ 5 , n - 1 \u2264 m \u2264 10^ 6 ) , number of destinations to be invaded and the number of Time Corridors. Each of the next m lines describes a Corridor: destinations a , b and energy e ( 1 \u2264 a, b \u2264 n , a = \u0338 b , 0 \u2264 e \u2264 10^ 9 ) . It' s guaranteed, that no pair { a, b} will repeat and that the graph is connected \u2014 that is, it is possible to travel between any two destinations using zero or more Time Corridors.",
    "output": "Output a single integer: E_ max( c_ 1) for the first Corridor c_ 1 from the input.",
    "note": "After the trap is set, the new energy requirement for the first Corridor may be either smaller, larger, or equal to the old energy requiremenet. In the example, if the energy of the first Corridor is set to 4 or less, then the Daleks may use the set of Corridors { { 1, 2 } , { 2, 3 } } ( in particular, if it were set to less than 4 , then this would be the only set of Corridors that they would use) . However, if it is larger than 4 , then they will instead use the set { { 2, 3} , { 3, 1} } .",
    "topics": [
      "graphs",
      "trees"
    ],
    "id": "1184E1"
  },
  {
    "title": "The Doctor Meets Vader (Medium)",
    "url": "https://codeforces.com/problemset/problem/1184/B2",
    "history": "Thanks to the Doctor' s help, the rebels managed to steal enough gold to launch a full- scale attack on the Empire! However, Darth Vader is looking for revenge and wants to take back his gold. The rebels have hidden the gold in various bases throughout the galaxy. Darth Vader and the Empire are looking to send out their spaceships to attack these bases. The galaxy can be represented as an undirected graph with n planets ( nodes) and m wormholes ( edges) , each connecting two planets. A total of s empire spaceships and b rebel bases are located at different planets in the galaxy. Each spaceship is given a location x , denoting the index of the planet on which it is located, an attacking strength a , and a certain amount of fuel f . Each base is given a location x , and a defensive strength d . A spaceship can attack a base if both of these conditions hold: the spaceship' s attacking strength is greater or equal than the defensive strength of the base the spaceship' s fuel is greater or equal to the shortest distance, computed as the number of wormholes, between the spaceship' s planet and the base' s planet Vader is very particular about his attacking formations. He requires that each spaceship is to attack at most one base and that each base is to be attacked by at most one spaceship. Vader knows that the rebels have hidden k gold in each base, so he will assign the spaceships to attack bases in such a way that maximizes the number of bases attacked. Therefore, for each base that is attacked, the rebels lose k gold. However, the rebels have the ability to create any number of dummy bases. With the Doctor' s help, these bases would exist beyond space and time, so all spaceship can reach them and attack them. Moreover, a dummy base is designed to seem irresistible: that is, it will always be attacked by some spaceship. Of course, dummy bases do not contain any gold, but creating such a dummy base costs h gold. What is the minimum gold the rebels can lose if they create an optimal number of dummy bases?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100 , 0 \u2264 m \u2264 10000 ) , the number of nodes and the number of edges, respectively. The next m lines contain two integers u and v ( 1 \u2264 u , v \u2264 n ) denoting an undirected edge between the two nodes. The next line contains four integers s , b , k and h ( 1 \u2264 s , b \u2264 1000 , 0 \u2264 k , h \u2264 10^ 9 ) , the number of spaceships, the number of bases, the cost of having a base attacked, and the cost of creating a dummy base, respectively. The next s lines contain three integers x , a , f ( 1 \u2264 x \u2264 n , 0 \u2264 a , f \u2264 10^ 9 ) , denoting the location, attack, and fuel of the spaceship. The next b lines contain two integers x , d ( 1 \u2264 x \u2264 n , 0 \u2264 d \u2264 10^ 9 ) , denoting the location and defence of the base.",
    "output": "Print a single integer, the minimum cost in terms of gold.",
    "note": "One way to minimize the cost is to build 4 dummy bases, for a total cost of 4 \u00d7 3 = 12 . One empire spaceship will be assigned to attack each of these dummy bases, resulting in zero actual bases attacked.",
    "topics": [
      "flows",
      "graph matchings",
      "graphs",
      "shortest paths",
      "sortings"
    ],
    "id": "1184B2"
  },
  {
    "title": "Subsequences (easy version)",
    "url": "https://codeforces.com/problemset/problem/1183/E",
    "history": "The only difference between the easy and the hard versions is constraints. A subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string \" abaca\" the following strings are subsequences: \" abaca\" , \" aba\" , \" aaa\" , \" a\" and \" \" ( empty string) . But the following strings are not subsequences: \" aabaca\" , \" cb\" and \" bcaa\" . You are given a string s consisting of n lowercase Latin letters. In one move you can take any subsequence t of the given string and add it to the set S . The set S can' t contain duplicates. This move costs n - | t| , where | t| is the length of the added subsequence ( i. e. the price equals to the number of the deleted characters) . Your task is to find out the minimum possible total cost to obtain a set S of size k or report that it is impossible to do so.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n, k \u2264 100 ) \u2014 the length of the string and the size of the set, correspondingly. The second line of the input contains a string s consisting of n lowercase Latin letters.",
    "output": "Print one integer \u2014 if it is impossible to obtain the set S of size k , print - 1. Otherwise, print the minimum possible total cost to do it.",
    "note": "In the first example we can generate S = \" asdf\" , \" asd\" , \" adf\" , \" asf\" , \" sdf\" . The cost of the first element in S is 0 and the cost of the others is 1 . So the total cost of S is 4 .",
    "topics": [
      "dp",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "1183E"
  },
  {
    "title": "Stock Exchange",
    "url": "https://codeforces.com/problemset/problem/1178/H",
    "history": "Warning: This problem has an unusual memory limit! Bob decided that he will not waste his prime years implementing GUI forms for a large corporation and instead will earn his supper on the Stock Exchange Reykjavik. The Stock Exchange Reykjavik is the only actual stock exchange in the world. The only type of transaction is to take a single share of stock x and exchange it for a single share of stock y , provided that the current price of share x is at least the current price of share y . There are 2n stocks listed on the SER that are of interest to Bob, numbered from 1 to 2n . Bob owns a single share of stocks 1 through n and would like to own a single share of each of n+ 1 through 2n some time in the future. Bob managed to forecast the price of each stock \u2014 in time t \u2265 0 , the stock i will cost a_ i \u00b7\u230a t \u230b + b_ i . The time is currently t = 0 . Help Bob find the earliest moment in time in which he can own a single share of each of n+ 1 through 2n , and the minimum number of stock exchanges he has to perform in order to do that. You may assume that the Stock Exchange has an unlimited amount of each stock at any point in time.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2200 ) \u2014 the number stocks currently owned by Bob. Each of the next 2n lines contains integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 9 ) , representing the stock price of stock i .",
    "output": "If it is impossible for Bob to achieve his goal, output a single integer - 1 . Otherwise, output two integers T and E , where T is the minimum time in which he can achieve his goal, and E is the minimum number of exchanges in which he can achieve his goal at time T .",
    "note": "In the first example, Bob simply waits until time t = 3 , when both stocks cost exactly the same amount. In the second example, the optimum strategy is to exchange stock 2 for stock 1 at time t = 1 , then exchange one share of stock 1 for stock 3 at time t = 5 ( where both cost 15 ) and then at time t = 6 exchange the second on for the stock number 4 ( when they cost 18 and 17 , respectively) . Note that he can achieve his goal also with only two exchanges, but this would take total time of t = 9 , when he would finally be able to exchange the share number 2 for the share number 3 . In the third example, Bob can never achieve his goal, as the second stock is always strictly more expensive than the first one.",
    "topics": [
      "binary search",
      "flows",
      "graphs"
    ],
    "id": "1178H"
  },
  {
    "title": "Cover it!",
    "url": "https://codeforces.com/problemset/problem/1176/E",
    "history": "You are given an undirected unweighted connected graph consisting of n vertices and m edges. It is guaranteed that there are no self- loops or multiple edges in the given graph. Your task is to choose at most \u230an/ 2\u230b vertices in this graph so each unchosen vertex is adjacent ( in other words, connected by an edge) to at least one of chosen vertices. It is guaranteed that the answer exists. If there are multiple answers, you can print any. You will be given multiple independent queries to answer.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then t queries follow. The first line of each query contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n - 1 \u2264 m \u2264 min( 2 \u00b7 10^ 5, n( n- 1) / 2) ) \u2014 the number of vertices and the number of edges, respectively. The following m lines denote edges: edge i is represented by a pair of integers v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , u_ i v_ i ) , which are the indices of vertices connected by the edge. There are no self- loops or multiple edges in the given graph, i. e. for each pair ( v_ i, u_ i ) there are no other pairs ( v_ i, u_ i ) or ( u_ i, v_ i ) in the list of edges, and for each pair ( v_ i, u_ i ) the condition v_ i u_ i is satisfied. It is guaranteed that the given graph is connected. It is guaranteed that \u2211 m \u2264 2 \u00b7 10^ 5 over all queries.",
    "output": "For each query print two lines. In the first line print k ( 1 \u2264\u230an/ 2\u230b ) \u2014 the number of chosen vertices. In the second line print k distinct integers c_ 1, c_ 2, . . . , c_ k in any order, where c_ i is the index of the i - th chosen vertex. It is guaranteed that the answer exists. If there are multiple answers, you can print any.",
    "note": "In the first query any vertex or any pair of vertices will suffice. Note that you don' t have to minimize the number of chosen vertices. In the second query two vertices can be enough ( vertices 2 and 4 ) but three is also ok.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "1176E"
  },
  {
    "title": "Recover it!",
    "url": "https://codeforces.com/problemset/problem/1176/D",
    "history": "Authors guessed an array a consisting of n integers; each integer is not less than 2 and not greater than 2 \u00b7 10^ 5 . You don' t know the array a , but you know the array b which is formed from it with the following sequence of operations: Firstly, let the array b be equal to the array a ; Secondly, for each i from 1 to n : if a_ i is a prime number, then one integer p_ a_ i is appended to array b , where p is an infinite sequence of prime numbers ( 2, 3, 5, . . . ) ; otherwise ( if a_ i is not a prime number) , the greatest divisor of a_ i which is not equal to a_ i is appended to b ; Then the obtained array of length 2n is shuffled and given to you in the input. Here p_ a_ i means the a_ i - th prime number. The first prime p_ 1 = 2 , the second one is p_ 2 = 3 , and so on. Your task is to recover any suitable array a that forms the given array b . It is guaranteed that the answer exists ( so the array b is obtained from some suitable array a ) . If there are multiple answers, you can print any.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains 2n integers b_ 1, b_ 2, . . . , b_ 2n ( 2 \u2264 b_ i \u2264 2750131 ) , where b_ i is the i - th element of b . 2750131 is the 199999 - th prime number.",
    "output": "In the only line of the output print n integers a_ 1, a_ 2, . . . , a_ n ( 2 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) in any order \u2014 the array a from which the array b can be obtained using the sequence of moves given in the problem statement. If there are multiple answers, you can print any.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "number theory",
      "sortings"
    ],
    "id": "1176D"
  },
  {
    "title": "Ehab and the Big Finale",
    "url": "https://codeforces.com/problemset/problem/1174/F",
    "history": "This is an interactive problem. You' re given a tree consisting of n nodes, rooted at node 1 . A tree is a connected graph with no cycles. We chose a hidden node x . In order to find this node, you can ask queries of two types: d u ( 1 \u2264 u \u2264 n ) . We will answer with the distance between nodes u and x . The distance between two nodes is the number of edges in the shortest path between them. s u ( 1 \u2264 u \u2264 n ) . We will answer with the second node on the path from u to x . However, there' s a plot twist. If u is not an ancestor of x , you' ll receive \" Wrong answer\" verdict! Node a is called an ancestor of node b if a b and the shortest path from node 1 to node b passes through node a . Note that in this problem a node is not an ancestor of itself. Can you find x in no more than 36 queries? The hidden node is fixed in each test beforehand and does not depend on your queries. InteractionTo ask a question, print it in one of the formats above: d u ( 1 \u2264 u \u2264 n ) , or s u ( 1 \u2264 u \u2264 n ) . After each question, you should read the answer: either the distance or the second vertex on the path, as mentioned in the legend. If we answer with - 1 instead of a valid answer, that means you exceeded the number of queries, made an invalid query, or violated the condition in the second type of queries. Exit immediately after receiving - 1 and you will see Wrong answer verdict. Otherwise, you can get an arbitrary verdict because your solution will continue to read from a closed stream. After printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; See the documentation for other languages. Hacks: The first line should contain two integers n and x ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 x \u2264 n ) . Each of the next n- 1 lines should contain two integers u and v ( 1 \u2264 u, v \u2264 n ) that mean there is an edge between nodes u and v . The edges must form a tree.",
    "input": "The first line contains the integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of nodes in the tree. Each of the next n- 1 lines contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 n ) that mean there' s an edge between nodes u and v . It' s guaranteed that the given graph is a tree.",
    "output": "To print the answer, print \" ! x\" ( without quotes) .",
    "note": "In the first example, the hidden node is node 5 . We first ask about the distance between node x and node 2 . The answer is 3 , so node x is either 4 or 5 . We then ask about the second node in the path from node 3 to node x . Note here that node 3 is an ancestor of node 5 . We receive node 5 as the answer. Finally, we report that the hidden node is node 5 .",
    "topics": [
      "constructive algorithms",
      "divide and conquer",
      "graphs",
      "implementation",
      "interactive",
      "trees"
    ],
    "id": "1174F"
  },
  {
    "title": "Graph Decomposition",
    "url": "https://codeforces.com/problemset/problem/1170/G",
    "history": "You are given an undirected graph consisting of n vertices and m edges. Recall that a cycle is a path that starts and ends in the same vertex. A cycle in a graph is called simple if it contains each vertex ( except the starting and ending one) no more than once ( the starting and the ending one is contained always twice) . Note that loops are considered to be simple cycles. In one move you can choose any simple cycle in this graph and erase the edges corresponding to this cycle ( corresponding vertices remain in the graph) . It is allowed to erase the loop or two copies of the same edge ( take a look at examples) . Your problem is to apply some sequence of moves to obtain the graph without edges. It is not necessary to minimize the number of cycles. If it is impossible, print \" NO\" .",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges in the graph. The next m lines contain edges of the graph. The i - th line contains the i - th edge x_ i, y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) , where x_ i and y_ i are vertices connected by the i - th edge. The graph can contain loops or multiple edges.",
    "output": "If it is impossible to decompose the given graph into simple cycles, print \" NO\" in the first line. Otherwise print \" YES\" in the first line. In the second line print k \u2014 the number of simple cycles in the graph decomposition. In the next k lines print cycles themselves. The j - th line should contain the j - th cycle. First, print c_ j \u2014 the number of vertices in the j - th cycle. Then print the cycle as a sequence of vertices. All neighbouring ( adjacent) vertices in the printed path should be connected by an edge that isn' t contained in other cycles.",
    "note": "The picture corresponding to the first example:",
    "topics": [
      "*special",
      "graphs"
    ],
    "id": "1170G"
  },
  {
    "title": "Pairs",
    "url": "https://codeforces.com/problemset/problem/1169/B",
    "history": "Toad Ivan has m pairs of integers, each integer is between 1 and n , inclusive. The pairs are ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ m, b_ m) . He asks you to check if there exist two integers x and y ( 1 \u2264 x < y \u2264 n ) such that in each given pair at least one integer is equal to x or y .",
    "input": "The first line contains two space- separated integers n and m ( 2 \u2264 n \u2264 300 000 , 1 \u2264 m \u2264 300 000 ) \u2014 the upper bound on the values of integers in the pairs, and the number of given pairs. The next m lines contain two integers each, the i - th of them contains two space- separated integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n, a_ i = \u0338 b_ i ) \u2014 the integers in the i - th pair.",
    "output": "Output \" YES\" if there exist two integers x and y ( 1 \u2264 x < y \u2264 n ) such that in each given pair at least one integer is equal to x or y . Otherwise, print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first example, you can' t choose any x , y because for each such pair you can find a given pair where both numbers are different from chosen integers. In the second example, you can choose x= 2 and y= 4 . In the third example, you can choose x= 1 and y= 2 .",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": "1169B"
  },
  {
    "title": "News Distribution",
    "url": "https://codeforces.com/problemset/problem/1167/C",
    "history": "In some social network, there are n users communicating with each other in m groups of friends. Let' s analyze the process of distributing some news between users. Initially, some user x receives the news from some source. Then he or she sends the news to his or her friends ( two users are friends if there is at least one group such that both of them belong to this group) . Friends continue sending the news to their friends, and so on. The process ends when there is no pair of friends such that one of them knows the news, and another one doesn' t know. For each user x you have to determine what is the number of users that will know the news if initially only user x starts distributing it.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 5 \u00b7 10^ 5 ) \u2014 the number of users and the number of groups of friends, respectively. Then m lines follow, each describing a group of friends. The i - th line begins with integer k_ i ( 0 \u2264 k_ i \u2264 n ) \u2014 the number of users in the i - th group. Then k_ i distinct integers follow, denoting the users belonging to the i - th group. It is guaranteed that \u2211_ i = 1^ m k_ i \u2264 5 \u00b7 10^ 5 .",
    "output": "Print n integers. The i - th integer should be equal to the number of users that will know the news if user i starts distributing it.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "1167C"
  },
  {
    "title": "Vicky's Delivery Service",
    "url": "https://codeforces.com/problemset/problem/1166/F",
    "history": "In a magical land there are n cities conveniently numbered 1, 2, . . . , n . Some pairs of these cities are connected by magical colored roads. Magic is unstable, so at any time, new roads may appear between two cities. Vicky the witch has been tasked with performing deliveries between some pairs of cities. However, Vicky is a beginner, so she can only complete a delivery if she can move from her starting city to her destination city through a double rainbow. A double rainbow is a sequence of cities c_ 1, c_ 2, . . . , c_ k satisfying the following properties: For each i with 1 \u2264 i \u2264 k - 1 , the cities c_ i and c_ i + 1 are connected by a road. For each i with 1 \u2264 i \u2264k - 1/ 2 , the roads connecting c_ 2i with c_ 2i - 1 and c_ 2i + 1 have the same color. For example if k = 5 , the road between c_ 1 and c_ 2 must be the same color as the road between c_ 2 and c_ 3 , and the road between c_ 3 and c_ 4 must be the same color as the road between c_ 4 and c_ 5 . Vicky has a list of events in chronological order, where each event is either a delivery she must perform, or appearance of a new road. Help her determine which of her deliveries she will be able to complete.",
    "input": "The first line contains four integers n , m , c , and q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m, c, q \u2264 10^ 5 ) , denoting respectively the number of cities, the number of roads initially present, the number of different colors the roads can take, and the number of events. Each of the following m lines contains three integers x , y , and z ( 1 \u2264 x, y \u2264 n , 1 \u2264 z \u2264 c ) , describing that there initially exists a bidirectional road with color z between cities x and y . Then q lines follow, describing the events. Each event is one of the following two types: + x y z ( 1 \u2264 x, y \u2264 n , 1 \u2264 z \u2264 c ) , meaning a road with color z appears between cities x and y ; ? x y ( 1 \u2264 x, y \u2264 n ) , meaning you should determine whether Vicky can make a delivery starting at city x and ending at city y . It is guaranteed that x = \u0338 y . It is guaranteed that at any moment, there is at most one road connecting any pair of cities, and that no road connects a city to itself. It is guaranteed that the input contains at least one event of the second type.",
    "output": "For each event of the second type, print a single line containing \" Yes\" ( without quotes) if the delivery can be made, or a single line containing \" No\" ( without quotes) otherwise.",
    "note": "The following picture corresponds to the sample. For her first delivery, Vicky can use the sequence 1, 2, 3, 4 which is a double rainbow. However, she cannot complete the second delivery, as she can only reach city 3 . After adding the road between cities 1 and 3 , she can now complete a delivery from city 4 to city 1 by using the double rainbow 4, 3, 1.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "hashing"
    ],
    "id": "1166F"
  },
  {
    "title": "Indecisive Taxi Fee",
    "url": "https://codeforces.com/problemset/problem/1163/F",
    "history": "In the city of Capypaland where Kuro and Shiro resides, there are n towns numbered from 1 to n and there are m bidirectional roads numbered from 1 to m connecting them. The i - th road connects towns u_ i and v_ i . Since traveling between the towns is quite difficult, the taxi industry is really popular here. To survive the harsh competition, each taxi company has to find a distinctive trait for their customers. Kuro is the owner of a taxi company. He has decided to introduce a new fee model for his taxi brand, where the fee for each ride is not calculated based on the trip length, but on the sum of the prices of the roads traveled. The price for each of the m roads has been decided by Kuro himself. As of now, the price for the road i is w_ i and hence the fee for a taxi ride traveling through roads e_ 1, e_ 2, . . . , e_ k is \u2211_ i= 1^ k w_ e_ i . However, Kuro himself is an indecisive person, so he has drafted q plans to change the road price. Each of the plans will be based on the original prices w_ i , except for a single road t_ j , the price of which is changed to x_ j . Note, that the plans are independent of each other. Shiro is a regular customer of the Kuro' s taxi brand since she uses the taxi to travel from town 1 to town n every day. Since she' s so a regular customer, Kuro decided to show her all his q plans before publishing them to the public. Now, Shiro wants to know the lowest fee she must pay to travel from the town 1 to the town n for each Kuro' s plan.",
    "input": "The first line contains three integers n , m and q ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of towns, the number of roads, and the number of plans that Kuro has drafted respectively. The i - th of the next m contains three integers u_ i , v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 9 , u_ i v_ i ) \u2014 two endpoints and the original price of the i - th road. It is guaranteed, that there is at least one way to travel from town 1 to town n using these m bidirectional roads. Each of the next q lines contains two integers t_ j and x_ j ( 1 \u2264 t_ j \u2264 m, 1 \u2264 x_ j \u2264 10^ 9 ) \u2014 the index of the road Kuro has planned to change and its new price respectively.",
    "output": "Print q integers \u2014 the lowest fee Shiro must pay to get from town 1 to town n in each of those q plans.",
    "note": "In the first example, the original overview of Capypaland looks like this, where the number next to each road denotes the original prices of the roads, The overview of the first plan, The lowest fee Shiro must pay in this plan is 4 , which corresponds to the path 1 \u2192 4 . The overview of the second plan, The lowest fee Shiro must pay in this plan is 2 , which corresponds to the path 1 \u2192 3 \u2192 4 . The overview of the third plan, The lowest fee Shiro must pay in this plan is 5 , which corresponds to the path 1 \u2192 2 \u2192 4 .",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "1163F"
  },
  {
    "title": "Magical Permutation",
    "url": "https://codeforces.com/problemset/problem/1163/E",
    "history": "Kuro has just learned about permutations and he is really excited to create a new permutation type. He has chosen n distinct positive integers and put all of them in a set S . Now he defines a magical permutation to be: A permutation of integers from 0 to 2^ x - 1 , where x is a non- negative integer. The bitwise xor of any two consecutive elements in the permutation is an element in S . Since Kuro is really excited about magical permutations, he wants to create the longest magical permutation possible. In other words, he wants to find the largest non- negative integer x such that there is a magical permutation of integers from 0 to 2^ x - 1 . Since he is a newbie in the subject, he wants you to help him find this value of x and also the magical permutation for that x .",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the set S . The next line contains n distinct integers S_ 1, S_ 2, . . . , S_ n ( 1 \u2264 S_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the elements in the set S .",
    "output": "In the first line print the largest non- negative integer x , such that there is a magical permutation of integers from 0 to 2^ x - 1 . Then print 2^ x integers describing a magical permutation of integers from 0 to 2^ x - 1 . If there are multiple such magical permutations, print any of them.",
    "note": "In the first example, 0, 1, 3, 2 is a magical permutation since: 0 \u2295 1 = 1 \u2208 S 1 \u2295 3 = 2 \u2208 S 3 \u2295 2 = 1 \u2208 S Where \u2295 denotes bitwise xor operation.",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "data structures",
      "graphs",
      "math"
    ],
    "id": "1163E"
  },
  {
    "title": "Permutation recovery",
    "url": "https://codeforces.com/problemset/problem/1158/C",
    "history": "Vasya has written some permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , so for all 1 \u2264 i \u2264 n it is true that 1 \u2264 p_ i \u2264 n and all p_ 1, p_ 2, . . . , p_ n are different. After that he wrote n numbers next_ 1, next_ 2, . . . , next_ n . The number next_ i is equal to the minimal index i < j \u2264 n , such that p_ j > p_ i . If there is no such j let' s let' s define as next_ i = n + 1 . In the evening Vasya went home from school and due to rain, his notebook got wet. Now it is impossible to read some written numbers. Permutation and some values next_ i are completely lost! If for some i the value next_ i is lost, let' s say that next_ i = - 1 . You are given numbers next_ 1, next_ 2, . . . , next_ n ( maybe some of them are equal to - 1 ) . Help Vasya to find such permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , that he can write it to the notebook and all numbers next_ i , which are not equal to - 1 , will be correct.",
    "input": "The first line contains one integer t \u2014 the number of test cases ( 1 \u2264 t \u2264 100 000 ) . Next 2 \u00b7 t lines contains the description of test cases, two lines for each. The first line contains one integer n \u2014 the length of the permutation, written by Vasya ( 1 \u2264 n \u2264 500 000 ) . The second line contains n integers next_ 1, next_ 2, . . . , next_ n , separated by spaces ( next_ i = - 1 or i < next_ i \u2264 n + 1 ) . It is guaranteed, that the sum of n in all test cases doesn' t exceed 500 000 . In hacks you can only use one test case, so T = 1 .",
    "output": "Print T lines, in i - th of them answer to the i - th test case. If there is no such permutations p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , that Vasya could write, print the only number - 1 . In the other case print n different integers p_ 1, p_ 2, . . . , p_ n , separated by spaces ( 1 \u2264 p_ i \u2264 n ) . All defined values of next_ i which are not equal to - 1 should be computed correctly p_ 1, p_ 2, . . . , p_ n using defenition given in the statement of the problem. If there exists more than one solution you can find any of them.",
    "note": "In the first test case for permutation p = [ 1, 2, 3] Vasya should write next = [ 2, 3, 4] , because each number in permutation is less than next. It' s easy to see, that it is the only satisfying permutation. In the third test case, any permutation can be the answer because all numbers next_ i are lost. In the fourth test case, there is no satisfying permutation, so the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1158C"
  },
  {
    "title": "Optimizer",
    "url": "https://codeforces.com/problemset/problem/1156/G",
    "history": "Let' s analyze a program written on some strange programming language. The variables in this language have names consisting of 1 to 4 characters, and each character is a lowercase or an uppercase Latin letter, or a digit. There is an extra constraint that the first character should not be a digit. There are four types of operations in the program, each denoted by one of the characters: , ^ , # or . Each line of the program has one of the following formats: < lvalue> = < rvalue> , where < lvalue> and < rvalue> are valid variable names; < lvalue> = < arg1> < op> < arg2> , where < lvalue> , < arg1> and < arg2> are valid variable names, and < op> is an operation character. The program is executed line- by- line, and the result of execution is stored in a variable having the name res. If res is never assigned in the program, then the result will be equal to the value of res before running the program. Two programs are called equivalent if no matter which operations do characters, ^ , # and denote ( but, obviously, performing the same operation on the same arguments gives the same result) and which values do variables have before execution of program, the value of res after running the first program is equal to the value of res after running the second program ( the programs are executed independently) . You are given a program consisting of n lines. Your task is to write a program consisting of minimum possible number of lines that is equivalent to the program you are given.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of lines in the program. Then n lines follow \u2014 the program itself. Each line corresponds to the format described in the statement and has no extra whitespaces.",
    "output": "In the first line print k \u2014 the minimum number of lines in the equivalent program. Then print k lines without any whitespaces \u2014 an equivalent program having exactly k lines, in the same format it is described in the statement.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "hashing",
      "implementation"
    ],
    "id": "1156G"
  },
  {
    "title": "Delivery Oligopoly",
    "url": "https://codeforces.com/problemset/problem/1155/F",
    "history": "The whole delivery market of Berland is controlled by two rival companies: BerEx and BerPS. They both provide fast and reliable delivery services across all the cities of Berland. The map of Berland can be represented as an undirected graph. The cities are vertices and the roads are edges between them. Each pair of cities has no more than one road between them. Each road connects different cities. BerEx and BerPS are so competitive that for each pair of cities ( v, u) they have set up their paths from v to u in such a way that these two paths don' t share a single road. It is guaranteed that it was possible. Now Berland government decided to cut down the road maintenance cost by abandoning some roads. Obviously, they want to maintain as little roads as possible. However, they don' t want to break the entire delivery system. So BerEx and BerPS should still be able to have their paths between every pair of cities non- intersecting. What is the minimal number of roads Berland government can maintain? More formally, given a 2- edge connected undirected graph, what is the minimum number of edges that can be left in it so that the resulting graph is also 2- edge connected?",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 14 , n \u2264 m \u2264n( n - 1) / 2 ) \u2014 the number of cities and the number of roads between them. Each of the next m lines contains two integers v and u ( 1 \u2264 v, u \u2264 n , v u ) \u2014 the cities connected by the next road. It is guaranteed that each pair of cities has no more than one road between them. It is guaranteed that each pair of cities have at least two paths between them that don' t share a single road.",
    "output": "The first line should contain a single integer k \u2014 the minimum number of roads Berland government can maintain so that BerEx and BerPS are still able to have their paths between every pair of cities non- intersecting. The next k lines should contain the list of roads which are being maintained. Each line of form \" v u \" , where v and u are cities connected by the next road. If there are multiple lists of minimum size, print any of them. The order of roads in the list doesn' t matter.",
    "note": "Here are graphs from the examples, red edges are the maintained ones.",
    "topics": [
      "brute force",
      "dp",
      "graphs"
    ],
    "id": "1155F"
  },
  {
    "title": "Neko and Flashback",
    "url": "https://codeforces.com/problemset/problem/1152/E",
    "history": "A permutation of length k is a sequence of k integers from 1 to k containing each integer exactly once. For example, the sequence [ 3, 1, 2] is a permutation of length 3 . When Neko was five, he thought of an array a of n positive integers and a permutation p of length n - 1 . Then, he performed the following: Constructed an array b of length n- 1 , where b_ i = min( a_ i, a_ i+ 1) . Constructed an array c of length n- 1 , where c_ i = max( a_ i, a_ i+ 1) . Constructed an array b' of length n- 1 , where b' _ i = b_ p_ i . Constructed an array c' of length n- 1 , where c' _ i = c_ p_ i . For example, if the array a was [ 3, 4, 6, 5, 7] and permutation p was [ 2, 4, 1, 3] , then Neko would have constructed the following arrays: b = [ 3, 4, 5, 5] c = [ 4, 6, 6, 7] b' = [ 4, 5, 3, 5] c' = [ 6, 7, 4, 6] Then, he wrote two arrays b' and c' on a piece of paper and forgot about it. 14 years later, when he was cleaning up his room, he discovered this old piece of paper with two arrays b' and c' written on it. However he can' t remember the array a and permutation p he used. In case Neko made a mistake and there is no array a and permutation p resulting in such b' and c' , print - 1. Otherwise, help him recover any possible array a .",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of elements in array a . The second line contains n- 1 integers b' _ 1, b' _ 2, . . . , b' _ n- 1 ( 1 \u2264 b' _ i \u2264 10^ 9 ) . The third line contains n- 1 integers c' _ 1, c' _ 2, . . . , c' _ n- 1 ( 1 \u2264 c' _ i \u2264 10^ 9 ) .",
    "output": "If Neko made a mistake and there is no array a and a permutation p leading to the b' and c' , print - 1. Otherwise, print n positive integers a_ i ( 1 \u2264 a_ i \u2264 10^ 9 ) , denoting the elements of the array a . If there are multiple possible solutions, print any of them.",
    "note": "The first example is explained is the problem statement. In the third example, for a = [ 3, 4, 5, 2, 1, 4, 3, 2] , a possible permutation p is [ 7, 1, 5, 4, 3, 2, 6] . In that case, Neko would have constructed the following arrays: b = [ 3, 4, 2, 1, 1, 3, 2] c = [ 4, 5, 5, 2, 4, 4, 3] b' = [ 2, 3, 1, 1, 2, 4, 3] c' = [ 3, 4, 4, 2, 5, 5, 4]",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "1152E"
  },
  {
    "title": "Election Promises",
    "url": "https://codeforces.com/problemset/problem/1149/E",
    "history": "In Byteland, there are two political parties fighting for seats in the Parliament in the upcoming elections: Wrong Answer Party and Time Limit Exceeded Party. As they want to convince as many citizens as possible to cast their votes on them, they keep promising lower and lower taxes. There are n cities in Byteland, connected by m one- way roads. Interestingly enough, the road network has no cycles \u2014 it' s impossible to start in any city, follow a number of roads, and return to that city. Last year, citizens of the i - th city had to pay h_ i bourles of tax. Parties will now alternately hold the election conventions in various cities. If a party holds a convention in city v , the party needs to decrease the taxes in this city to a non- negative integer amount of bourles. However, at the same time they can arbitrarily modify the taxes in each of the cities that can be reached from v using a single road. The only condition that must be fulfilled that the tax in each city has to remain a non- negative integer amount of bourles. The first party to hold the convention is Wrong Answer Party. It' s predicted that the party to hold the last convention will win the election. Can Wrong Answer Party win regardless of Time Limit Exceeded Party' s moves?",
    "input": "The first line of the input contains two integers n , m ( 1 \u2264 n \u2264 200 000 , 0 \u2264 m \u2264 200 000 ) \u2014 the number of cities and roads in Byteland. The next line contains n space- separated integers h_ 1, h_ 2, . . . , h_ n ( 0 \u2264 h_ i \u2264 10^ 9 ) ; h_ i denotes the amount of taxes paid in the i - th city. Each of the following m lines contains two integers ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , and describes a one- way road leading from the city u to the city v . There will be no cycles in the road network. No two roads will connect the same pair of cities. We can show that the conventions cannot be held indefinitely for any correct test case.",
    "output": "If Wrong Answer Party can win the election, output WIN in the first line of your output. In this case, you' re additionally asked to produce any convention allowing the party to win regardless of the opponent' s actions. The second line should contain n non- negative integers h' _ 1, h' _ 2, . . . , h' _ n ( 0 \u2264 h' _ i \u2264 2 \u00b7 10^ 18 ) describing the amount of taxes paid in consecutive cities after the convention. If there are multiple answers, output any. We guarantee that if the party has any winning move, there exists a move after which no city has to pay more than 2 \u00b7 10^ 18 bourles. If the party cannot assure their victory, output LOSE in the first and only line of the output.",
    "note": "In the first example, Wrong Answer Party should hold the convention in the city 1 . The party will decrease the taxes in this city to 1 bourle. As the city 2 is directly reachable from 1 , we can arbitrarily modify the taxes in this city. The party should change the tax to 5 bourles. It can be easily proved that Time Limit Exceeded cannot win the election after this move if Wrong Answer Party plays optimally. The second example test presents the situation we created after a single move in the previous test; as it' s Wrong Answer Party' s move now, the party cannot win. In the third test, we should hold the convention in the first city. This allows us to change the taxes in any city to any desired value; we can for instance decide to set all the taxes to zero, which allows the Wrong Answer Party to win the election immediately.",
    "topics": [
      "games",
      "graphs"
    ],
    "id": "1149E"
  },
  {
    "title": "Abandoning Roads",
    "url": "https://codeforces.com/problemset/problem/1149/D",
    "history": "Codefortia is a small island country located somewhere in the West Pacific. It consists of n settlements connected by m bidirectional gravel roads. Curiously enough, the beliefs of the inhabitants require the time needed to pass each road to be equal either to a or b seconds. It' s guaranteed that one can go between any pair of settlements by following a sequence of roads. Codefortia was recently struck by the financial crisis. Therefore, the king decided to abandon some of the roads so that: it will be possible to travel between each pair of cities using the remaining roads only, the sum of times required to pass each remaining road will be minimum possible ( in other words, remaining roads must form minimum spanning tree, using the time to pass the road as its weight) , among all the plans minimizing the sum of times above, the time required to travel between the king' s residence ( in settlement 1 ) and the parliament house ( in settlement p ) using the remaining roads only will be minimum possible. The king, however, forgot where the parliament house was. For each settlement p = 1, 2, . . . , n , can you tell what is the minimum time required to travel between the king' s residence and the parliament house ( located in settlement p ) after some roads are abandoned?",
    "input": "The first line of the input contains four integers n , m , a and b ( 2 \u2264 n \u2264 70 , n - 1 \u2264 m \u2264 200 , 1 \u2264 a < b \u2264 10^ 7 ) \u2014 the number of settlements and gravel roads in Codefortia, and two possible travel times. Each of the following lines contains three integers u, v, c ( 1 \u2264 u, v \u2264 n , u = \u0338 v , c \u2208{ a, b} ) denoting a single gravel road between the settlements u and v , which requires c minutes to travel. You can assume that the road network is connected and has no loops or multiedges.",
    "output": "Output a single line containing n integers. The p - th of them should denote the minimum possible time required to travel from 1 to p after the selected roads are abandoned. Note that for each p you can abandon a different set of roads.",
    "note": "The minimum possible sum of times required to pass each road in the first example is 85 \u2014 exactly one of the roads with passing time 25 must be abandoned. Note that after one of these roads is abandoned, it' s now impossible to travel between settlements 1 and 3 in time 50 .",
    "topics": [
      "brute force",
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1149D"
  },
  {
    "title": "Gold Experience",
    "url": "https://codeforces.com/problemset/problem/1148/G",
    "history": "Consider an undirected graph G with n vertices. There is a value a_ i in each vertex. Two vertices i and j are connected with an edge if and only if gcd( a_ i, a_ j) > 1 , where gcd( x, y) denotes the greatest common divisor ( GCD) of integers x and y . Consider a set of vertices. Let' s call a vertex in this set fair if it is connected with an edge with all other vertices in this set. You need to find a set of k vertices ( where k is a given integer, 2 \u00b7 k \u2264 n ) where all vertices are fair or all vertices are not fair. One can show that such a set always exists.",
    "input": "The first line contains integers n and k ( 6 \u2264 2 \u00b7 k \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices and parameter k . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 2 \u2264 a_ i \u2264 10^ 7 ) \u2014 the values in the vertices.",
    "output": "Print exactly k distinct integers \u2014 the indices of the vertices in the chosen set in any order.",
    "note": "In the first test case, set { 2, 4, 5} is an example of set where no vertices are fair. The vertex 2 does not share an edge with vertex 4 since gcd( 15, 8) = 1 . The vertex 4 does not share an edge with vertex 2 . The vertex 5 does not share an edge with vertex 2 . In the second test case, set { 8, 5, 6, 4} is an example of a set where all vertices are fair.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math",
      "number theory",
      "probabilities"
    ],
    "id": "1148G"
  },
  {
    "title": "Palindrome XOR",
    "url": "https://codeforces.com/problemset/problem/1147/D",
    "history": "You are given a string s consisting of characters \" 1\" , \" 0\" , and \" ? \" . The first character of s is guaranteed to be \" 1\" . Let m be the number of characters in s . Count the number of ways we can choose a pair of integers a, b that satisfies the following: 1 \u2264 a < b < 2^ m When written without leading zeros, the base- 2 representations of a and b are both palindromes. The base- 2 representation of bitwise XOR of a and b matches the pattern s . We say that t matches s if the lengths of t and s are the same and for every i , the i - th character of t is equal to the i - th character of s , or the i - th character of s is \" ? \" . Compute this count modulo 998244353 .",
    "input": "The first line contains a single string s ( 1 \u2264 | s| \u2264 1 000 ) . s consists only of characters \" 1\" , \" 0\" and \" ? \" . It is guaranteed that the first character of s is a \" 1\" .",
    "output": "Print a single integer, the count of pairs that satisfy the conditions modulo 998244353 .",
    "note": "For the first example, the pairs in base- 2 are ( 111, 10001) , ( 11, 10101) , ( 1001, 11111) .",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "1147D"
  },
  {
    "title": "Hide and Seek",
    "url": "https://codeforces.com/problemset/problem/1147/A",
    "history": "Alice and Bob are playing a game on a line with n cells. There are n cells labeled from 1 through n . For each i from 1 to n- 1 , cells i and i+ 1 are adjacent. Alice initially has a token on some cell on the line, and Bob tries to guess where it is. Bob guesses a sequence of line cell numbers x_ 1, x_ 2, . . . , x_ k in order. In the i - th question, Bob asks Alice if her token is currently on cell x_ i . That is, Alice can answer either \" YES\" or \" NO\" to each Bob' s question. At most one time in this process, before or after answering a question, Alice is allowed to move her token from her current cell to some adjacent cell. Alice acted in such a way that she was able to answer \" NO\" to all of Bob' s questions. Note that Alice can even move her token before answering the first question or after answering the last question. Alice can also choose to not move at all. You are given n and Bob' s questions x_ 1, . . . , x_ k . You would like to count the number of scenarios that let Alice answer \" NO\" to all of Bob' s questions. Let ( a, b) denote a scenario where Alice starts at cell a and ends at cell b . Two scenarios ( a_ i, b_ i) and ( a_ j, b_ j) are different if a_ i = \u0338 a_ j or b_ i = \u0338 b_ j .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 10^ 5 ) \u2014 the number of cells and the number of questions Bob asked. The second line contains k integers x_ 1, x_ 2, . . . , x_ k ( 1 \u2264 x_ i \u2264 n ) \u2014 Bob' s questions.",
    "output": "Print a single integer, the number of scenarios that let Alice answer \" NO\" to all of Bob' s questions.",
    "note": "The notation ( i, j) denotes a scenario where Alice starts at cell i and ends at cell j . In the first example, the valid scenarios are ( 1, 2) , ( 2, 1) , ( 2, 2) , ( 2, 3) , ( 3, 2) , ( 3, 3) , ( 3, 4) , ( 4, 3) , ( 4, 5) . For example, ( 3, 4) is valid since Alice can start at cell 3 , stay there for the first three questions, then move to cell 4 after the last question. ( 4, 5) is valid since Alice can start at cell 4 , stay there for the first question, the move to cell 5 for the next two questions. Note that ( 4, 5) is only counted once, even though there are different questions that Alice can choose to do the move, but remember, we only count each pair of starting and ending positions once. In the second example, Alice has no valid scenarios. In the last example, all ( i, j) where | i- j| \u2264 1 except for ( 42, 42) are valid scenarios.",
    "topics": [
      "graphs"
    ],
    "id": "1147A"
  },
  {
    "title": "Vus the Cossack and a Graph",
    "url": "https://codeforces.com/problemset/problem/1186/F",
    "history": "Vus the Cossack has a simple graph with n vertices and m edges. Let d_ i be a degree of the i - th vertex. Recall that a degree of the i - th vertex is the number of conected edges to the i - th vertex. He needs to remain not more than \u2308n+ m/ 2\u2309 edges. Let f_ i be the degree of the i - th vertex after removing. He needs to delete them in such way so that \u2308d_ i/ 2\u2309\u2264 f_ i for each i . In other words, the degree of each vertex should not be reduced more than twice. Help Vus to remain the needed edges!",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 6 , 0 \u2264 m \u2264 10^ 6 ) \u2014 the number of vertices and edges respectively. Each of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) \u2014 vertices between which there is an edge. It is guaranteed that the graph does not have loops and multiple edges. It is possible to show that the answer always exists.",
    "output": "In the first line, print one integer k ( 0 \u2264 k \u2264\u2308n+ m/ 2\u2309 ) \u2014 the number of edges which you need to remain. In each of the next k lines, print two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) \u2014 the vertices, the edge between which, you need to remain. You can not print the same edge more than once.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1186F"
  },
  {
    "title": "Zoning Restrictions",
    "url": "https://codeforces.com/problemset/problem/1146/G",
    "history": "You are planning to build housing on a street. There are n spots available on the street on which you can build a house. The spots are labeled from 1 to n from left to right. In each spot, you can build a house with an integer height between 0 and h . In each spot, if a house has height a , you can gain a^ 2 dollars from it. The city has m zoning restrictions though. The i - th restriction says that if the tallest house from spots l_ i to r_ i is strictly more than x_ i , you must pay a fine of c_ i . You would like to build houses to maximize your profit ( sum of dollars gained minus fines) . Determine the maximum profit possible.",
    "input": "The first line contains three integers n, h, m ( 1 \u2264 n, h, m \u2264 50 ) \u2014 the number of spots, the maximum height, and the number of restrictions, respectively. Each of the next m lines contains four integers l_ i, r_ i, x_ i, c_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 0 \u2264 x_ i \u2264 h , 1 \u2264 c_ i \u2264 5 000 ) .",
    "output": "Print a single integer denoting the maximum profit you can make.",
    "note": "In the first example, it' s optimal to build houses with heights [ 1, 3, 2] . We get a gain of 1^ 2+ 3^ 2+ 2^ 2 = 14 . We don' t violate any restrictions, so there are no fees, so the total profit is 14 - 0 = 14 . In the second example, it' s optimal to build houses with heights [ 10, 8, 8, 10] . We get a gain of 10^ 2+ 8^ 2+ 8^ 2+ 10^ 2 = 328 , and we violate the second restriction for a fee of 39 , thus the total profit is 328- 39 = 289 . Note that even though there isn' t a restriction on building 1 , we must still limit its height to be at most 10 .",
    "topics": [
      "dp",
      "flows",
      "graphs"
    ],
    "id": "1146G"
  },
  {
    "title": "Tree Diameter",
    "url": "https://codeforces.com/problemset/problem/1146/C",
    "history": "There is a weighted tree with n nodes and n- 1 edges. The nodes are conveniently labeled from 1 to n . The weights are positive integers at most 100 . Define the distance between two nodes to be the sum of edges on the unique path between the nodes. You would like to find the diameter of the tree. Diameter is the maximum distance between a pair of nodes. Unfortunately, the tree isn' t given to you, but you can ask some questions about it. In one question, you can specify two nonempty disjoint sets of nodes p and q , and the judge will return the maximum distance between a node in p and a node in q . In the words, maximum distance between x and y , where x \u2208 p and y \u2208 q . After asking not more than 9 questions, you must report the maximum distance between any pair of nodes. InteractionEach test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1 000 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of nodes in the tree. To ask a question, print \" k_ 1 k_ 2 a_ 1 a_ 2 . . . a_ k_ 1 b_ 1 b_ 2 . . . b_ k_ 2 \" ( k_ 1, k_ 2 \u2265 1 and k_ 1+ k_ 2 \u2264 n ) . These two sets must be nonempty and disjoint. The judge will respond with a single integer max_ p, q dist( a_ p, b_ q) . If you ever get a result of - 1 ( because you printed an invalid query) , exit immediately to avoid getting other verdicts. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. When you are ready to answer, print \" - 1 d \" , where d is the maximum shortest distance over all pairs of nodes. You can only ask at most 9 questions per test case. Hack FormatTo hack, use the following format. Note that you can only hack with one test case. The first line should contain a single integer t ( t= 1 ) . The second line should contain a single integer n ( 2 \u2264 n \u2264 100 ) . Each of the next n- 1 lines should contain three integers a_ i, b_ i, c_ i ( 1\u2264 a_ i, b_ i\u2264 n , 1 \u2264 c_ i \u2264 100 ) . This denotes an undirected edge between nodes a_ i and b_ i with weight c_ i . These edges must form a tree.",
    "input": "",
    "output": "",
    "note": "In the first example, the first tree looks as follows: In the first question, we have p = 1 , and q = 2, 3, 4, 5 . The maximum distance between a node in p and a node in q is 9 ( the distance between nodes 1 and 5 ) . The second tree is a tree with two nodes with an edge with weight 99 between them.",
    "topics": [
      "bitmasks",
      "graphs",
      "interactive"
    ],
    "id": "1146C"
  },
  {
    "title": "Graph Without Long Directed Paths",
    "url": "https://codeforces.com/problemset/problem/1144/F",
    "history": "You are given a connected undirected graph consisting of n vertices and m edges. There are no self- loops or multiple edges in the given graph. You have to direct its edges in such a way that the obtained directed graph does not contain any paths of length two or greater ( where the length of path is denoted as the number of traversed edges) .",
    "input": "The first line contains two integer numbers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n - 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and edges, respectively. The following m lines contain edges: edge i is given as a pair of vertices u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) . There are no multiple edges in the given graph, i. e. for each pair ( u_ i, v_ i ) there are no other pairs ( u_ i, v_ i ) and ( v_ i, u_ i ) in the list of edges. It is also guaranteed that the given graph is connected ( there is a path between any pair of vertex in the given graph) .",
    "output": "If it is impossible to direct edges of the given graph in such a way that the obtained directed graph does not contain paths of length at least two, print \" NO\" in the first line. Otherwise print \" YES\" in the first line, and then print any suitable orientation of edges: a binary string ( the string consisting only of ' 0' and ' 1' ) of length m . The i - th element of this string should be ' 0' if the i - th edge of the graph should be directed from u_ i to v_ i , and ' 1' otherwise. Edges are numbered in the order they are given in the input.",
    "note": "The picture corresponding to the first example: And one of possible answers:",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "1144F"
  },
  {
    "title": "Pink Floyd",
    "url": "https://codeforces.com/problemset/problem/1142/E",
    "history": "This is an interactive task. Scientists are about to invent a new optimization for the Floyd- Warshall algorithm, which will allow it to work in linear time. There is only one part of the optimization still unfinished. It is well known that the Floyd- Warshall algorithm takes a graph with n nodes and exactly one edge between each pair of nodes. The scientists have this graph, what is more, they have directed each edge in one of the two possible directions. To optimize the algorithm, exactly m edges are colored in pink color and all the rest are colored in green. You know the direction of all m pink edges, but the direction of green edges is unknown to you. In one query you can ask the scientists about the direction of exactly one green edge, however, you can perform at most 2 \u00b7 n such queries. Your task is to find the node from which every other node can be reached by a path consisting of edges of same color. Be aware that the scientists may have lied that they had fixed the direction of all edges beforehand, so their answers may depend on your queries. InteractionTo ask the direction of the green edge between nodes a and b , print \" ? \" , a and b in single line, separated by the space characters. In answer to this read a single integer, which will be 1 if the edge is directed from a to b and 0 if the edge is directed from b to a . You can ask at most 2 \u00b7 n queries, otherwise you will get Wrong Answer. After printing a query do not forget to output end of line and flush the output. Otherwise you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Answer - 1 instead of 0 or 1 means that you made an invalid query or exceeded the query limit. Exit immediately after receiving - 1 and you will see Wrong answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream. HacksHacks should be formatted as follows. The first line should contain two integers n and m ( 1 \u2264 n \u2264 300 , 0 \u2264 m \u2264 n \u00b7 ( n - 1) / 2 ) \u2014 the number of nodes and number of pink edges. The next m lines should describe the pink edges, the i - th line should contain 2 integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i b_ i ) , which means that there is a pink edge from a_ i to b_ i . All unordered pairs ( a_ i, b_ i) should be distinct. The next ( n \u00b7 ( n - 1) / 2 - m) lines should describe the green edges, the i - th line should contain two integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i b_ i ) ) , which means that there is a green edge from a_ i to b_ i . All unordered pairs of ( a_ i, b_ i) should be distinct and should also be different from the pairs for the pink edges.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100 000 , 0 \u2264 m \u2264 100 000 ) \u2014 the number of nodes and the number of pink edges. The next m lines describe the pink edges, the i - th of these lines contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) \u2014 the start and the end of the i - th pink edge. It is guaranteed, that all unordered pairs ( u_ i, v_ i) are distinct.",
    "output": "When you found the answer, print \" ! \" and the number of the node from which every other node can be reached by a single- colored path.",
    "note": "In the example above the answer for the query \" ? 1 3\" is 0, so the edge is directed from 3 to 1. The answer for the query \" ? 4 2\" is 1, so the edge is directed from 4 to 2. The answer for the query \" ? 3 2\" is 1, so the edge is directed from 3 to 2. So there are green paths from node 3 to nodes 1 and 2 and there is a pink path from node 3 to node 4.",
    "topics": [
      "graphs",
      "interactive"
    ],
    "id": "1142E"
  },
  {
    "title": "Privatization of Roads in Treeland",
    "url": "https://codeforces.com/problemset/problem/1141/G",
    "history": "Treeland consists of n cities and n- 1 roads. Each road is bidirectional and connects two distinct cities. From any city you can get to any other city by roads. Yes, you are right \u2014 the country' s topology is an undirected tree. There are some private road companies in Treeland. The government decided to sell roads to the companies. Each road will belong to one company and a company can own multiple roads. The government is afraid to look unfair. They think that people in a city can consider them unfair if there is one company which owns two or more roads entering the city. The government wants to make such privatization that the number of such cities doesn' t exceed k and the number of companies taking part in the privatization is minimal. Choose the number of companies r such that it is possible to assign each road to one company in such a way that the number of cities that have two or more roads of one company is at most k . In other words, if for a city all the roads belong to the different companies then the city is good. Your task is to find the minimal r that there is such assignment to companies from 1 to r that the number of cities which are not good doesn' t exceed k . The picture illustrates the first example ( n= 6, k= 2 ) . The answer contains r= 2 companies. Numbers on the edges denote edge indices. Edge colors mean companies: red corresponds to the first company, blue corresponds to the second company. The gray vertex ( number 3 ) is not good. The number of such vertices ( just one) doesn' t exceed k= 2 . It is impossible to have at most k= 2 not good cities in case of one company.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 200000, 0 \u2264 k \u2264 n - 1 ) \u2014 the number of cities and the maximal number of cities which can have two or more roads belonging to one company. The following n- 1 lines contain roads, one road per line. Each line contains a pair of integers x_ i , y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) , where x_ i , y_ i are cities connected with the i - th road.",
    "output": "In the first line print the required r ( 1 \u2264 r \u2264 n - 1 ) . In the second line print n- 1 numbers c_ 1, c_ 2, . . . , c_ n- 1 ( 1 \u2264 c_ i \u2264 r ) , where c_ i is the company to own the i - th road. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1141G"
  },
  {
    "title": "Maximize Mex",
    "url": "https://codeforces.com/problemset/problem/1139/E",
    "history": "There are n students and m clubs in a college. The clubs are numbered from 1 to m . Each student has a potential p_ i and is a member of the club with index c_ i . Initially, each student is a member of exactly one club. A technical fest starts in the college, and it will run for the next d days. There is a coding competition every day in the technical fest. Every day, in the morning, exactly one student of the college leaves their club. Once a student leaves their club, they will never join any club again. Every day, in the afternoon, the director of the college will select one student from each club ( in case some club has no members, nobody is selected from that club) to form a team for this day' s coding competition. The strength of a team is the mex of potentials of the students in the team. The director wants to know the maximum possible strength of the team for each of the coming d days. Thus, every day the director chooses such team, that the team strength is maximized. The mex of the multiset S is the smallest non- negative integer that is not present in S . For example, the mex of the { 0, 1, 1, 2, 4, 5, 9} is 3 , the mex of { 1, 2, 3} is 0 and the mex of \u2205 ( empty set) is 0 .",
    "input": "The first line contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 5000 ) , the number of students and the number of clubs in college. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i < 5000 ) , where p_ i is the potential of the i - th student. The third line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 m ) , which means that i - th student is initially a member of the club with index c_ i . The fourth line contains an integer d ( 1 \u2264 d \u2264 n ) , number of days for which the director wants to know the maximum possible strength of the team. Each of the next d lines contains an integer k_ i ( 1 \u2264 k_ i \u2264 n ) , which means that k_ i - th student lefts their club on the i - th day. It is guaranteed, that the k_ i - th student has not left their club earlier.",
    "output": "For each of the d days, print the maximum possible strength of the team on that day.",
    "note": "Consider the first example: On the first day, student 3 leaves their club. Now, the remaining students are 1 , 2 , 4 and 5 . We can select students 1 , 2 and 4 to get maximum possible strength, which is 3 . Note, that we can' t select students 1 , 2 and 5 , as students 2 and 5 belong to the same club. Also, we can' t select students 1 , 3 and 4 , since student 3 has left their club. On the second day, student 2 leaves their club. Now, the remaining students are 1 , 4 and 5 . We can select students 1 , 4 and 5 to get maximum possible strength, which is 1 . On the third day, the remaining students are 1 and 5 . We can select students 1 and 5 to get maximum possible strength, which is 1 . On the fourth day, the remaining student is 1 . We can select student 1 to get maximum possible strength, which is 1 . On the fifth day, no club has students and so the maximum possible strength is 0 .",
    "topics": [
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": "1139E"
  },
  {
    "title": "Edgy Trees",
    "url": "https://codeforces.com/problemset/problem/1139/C",
    "history": "You are given a tree ( a connected undirected graph without cycles) of n vertices. Each of the n - 1 edges of the tree is colored in either black or red. You are also given an integer k . Consider sequences of k vertices. Let' s call a sequence [ a_ 1, a_ 2, . . . , a_ k] good if it satisfies the following criterion: We will walk a path ( possibly visiting same edge/ vertex multiple times) on the tree, starting from a_ 1 and ending at a_ k . Start at a_ 1 , then go to a_ 2 using the shortest path between a_ 1 and a_ 2 , then go to a_ 3 in a similar way, and so on, until you travel the shortest path between a_ k- 1 and a_ k . If you walked over at least one black edge during this process, then the sequence is good. Consider the tree on the picture. If k= 3 then the following sequences are good: [ 1, 4, 7] , [ 5, 5, 3] and [ 2, 3, 7] . The following sequences are not good: [ 1, 4, 6] , [ 5, 5, 5] , [ 3, 7, 3] . There are n^ k sequences of vertices, count how many of them are good. Since this number can be quite large, print it modulo 10^ 9+ 7 .",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 10^ 5 , 2 \u2264 k \u2264 100 ) , the size of the tree and the length of the vertex sequence. Each of the next n - 1 lines contains three integers u_ i , v_ i and x_ i ( 1 \u2264 u_ i, v_ i \u2264 n , x_ i \u2208{ 0, 1} ) , where u_ i and v_ i denote the endpoints of the corresponding edge and x_ i is the color of this edge ( 0 denotes red edge and 1 denotes black edge) .",
    "output": "Print the number of good sequences modulo 10^ 9 + 7 .",
    "note": "In the first example, all sequences ( 4^ 4 ) of length 4 except the following are good: [ 1, 1, 1, 1] [ 2, 2, 2, 2] [ 3, 3, 3, 3] [ 4, 4, 4, 4] In the second example, all edges are red, hence there aren' t any good sequences.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "math",
      "trees"
    ],
    "id": "1139C"
  },
  {
    "title": "Museums Tour",
    "url": "https://codeforces.com/problemset/problem/1137/C",
    "history": "In the country N , there are n cities connected by m one- way roads. Although this country seems unremarkable, there are two interesting facts about it. At first, a week lasts d days here. At second, there is exactly one museum in each city of the country N . Travel agency \" Open museums\" is developing a new program for tourists interested in museums. Agency' s employees know which days each of the museums is open. The tour should start in the capital \u2014 the city number 1 , and the first day of the tour must be on the first day of a week. Each day a tourist will be in some city, watching the exposition in its museum ( in case museum is open today) , and by the end of the day, the tour either ends or the tourist goes into another city connected by a road with the current one. The road system of N is designed in such a way that traveling by a road always takes one night and also all the roads are one- way. It' s allowed to visit a city multiple times during the trip. You should develop such route for the trip that the number of distinct museums, possible to visit during it, is maximum.",
    "input": "The first line contains three integers n , m and d ( 1 \u2264 n \u2264 100 000 , 0 \u2264 m \u2264 100 000 , 1 \u2264 d \u2264 50 ) , the number of cities, the number of roads and the number of days in a week. Each of next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) , denoting a one- way road from the city u_ i to the city v_ i . The next n lines contain the museums' schedule. The schedule of the museum located in the i - th city is described in the i - th of these lines. Each line consists of exactly d characters \" 0\" or \" 1\" , the j - th character of the string equals to \" 1\" if the museum is open at the j - th day of a week, and \" 0\" , otherwise. It' s guaranteed that for each pair of cities ( u, v) there exists no more than one road leading from u to v .",
    "output": "Print a single integer \u2014 the maximum number of distinct museums, that it' s possible to visit, starting a trip in the first city on the first day of the week.",
    "note": "Explanation of the first example The maximum number of distinct museums to visit is 3 . It' s possible to visit 3 museums, for example, in the way described below. Day 1. Now it' s the 1st day of a week, and the tourist is in the city 1 . The museum there is closed. At night the tourist goes to the city number 2 . Day 2. Now it' s the 2nd day of a week, and the tourist is in the city 2 . The museum there is open, and the tourist visits it. At night the tourist goes to the city number 4 . Day 3. Now it' s the 3rd day of a week, and the tourist is in the city 4 . The museum there is open, and the tourist visits it. At night the tourist goes to the city number 1 . Day 4. Now it' s the 1st day of a week, and the tourist is in the city 1 . The museum there is closed. At night the tourist goes to the city number 2 . Day 5. Now it' s the 2nd of a week number 2 , and the tourist is in the city 2 . The museum there is open, but the tourist has already visited it. At night the tourist goes to the city number 3 . Day 6. Now it' s the 3rd day of a week, and the tourist is in the city 3 . The museum there is open, and the tourist visits it. After this, the tour is over. Explanation of the second example The maximum number of distinct museums to visit is 2 . It' s possible to visit 2 museums, for example, in the way described below. Day 1. Now it' s the 1st day of a week, and the tourist is in the city 1 . The museum there is open, and the tourist visits it. At night the tourist goes to the city number 2 . Day 2. Now it' s the 2nd day of a week, and the tourist is in the city 2 . The museum there is closed. At night the tourist goes to the city number 3 . Day 3. Now it' s the 3rd day of a week, and the tourist is in the city 3 . The museum there is open, and the tourist visits it. After this, the tour is over.",
    "topics": [
      "dp",
      "graphs",
      "implementation"
    ],
    "id": "1137C"
  },
  {
    "title": "Spanning Tree with One Fixed Degree",
    "url": "https://codeforces.com/problemset/problem/1133/F2",
    "history": "You are given an undirected unweighted connected graph consisting of n vertices and m edges. It is guaranteed that there are no self- loops or multiple edges in the given graph. Your task is to find any spanning tree of this graph such that the degree of the first vertex ( vertex with label 1 on it) is equal to D ( or say that there are no such spanning trees) . Recall that the degree of a vertex is the number of edges incident to it.",
    "input": "The first line contains three integers n , m and D ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n - 1 \u2264 m \u2264 min( 2 \u00b7 10^ 5, n( n- 1) / 2) , 1 \u2264 D < n ) \u2014 the number of vertices, the number of edges and required degree of the first vertex, respectively. The following m lines denote edges: edge i is represented by a pair of integers v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , u_ i v_ i ) , which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ( v_ i, u_ i ) there are no other pairs ( v_ i, u_ i ) or ( u_ i, v_ i ) in the list of edges, and for each pair ( v_ i, u_ i) the condition v_ i u_ i is satisfied.",
    "output": "If there is no spanning tree satisfying the condition from the problem statement, print \" NO\" in the first line. Otherwise print \" YES\" in the first line and then print n- 1 lines describing the edges of a spanning tree such that the degree of the first vertex ( vertex with label 1 on it) is equal to D . Make sure that the edges of the printed spanning tree form some subset of the input edges ( order doesn' t matter and edge ( v, u) is considered the same as the edge ( u, v) ) . If there are multiple possible answers, print any of them.",
    "note": "The picture corresponding to the first and second examples: The picture corresponding to the third example:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1133F2"
  },
  {
    "title": "Spanning Tree with Maximum Degree",
    "url": "https://codeforces.com/problemset/problem/1133/F1",
    "history": "You are given an undirected unweighted connected graph consisting of n vertices and m edges. It is guaranteed that there are no self- loops or multiple edges in the given graph. Your task is to find any spanning tree of this graph such that the maximum degree over all vertices is maximum possible. Recall that the degree of a vertex is the number of edges incident to it.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n - 1 \u2264 m \u2264 min( 2 \u00b7 10^ 5, n( n- 1) / 2) ) \u2014 the number of vertices and edges, respectively. The following m lines denote edges: edge i is represented by a pair of integers v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , u_ i v_ i ) , which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ( v_ i, u_ i ) there are no other pairs ( v_ i, u_ i ) or ( u_ i, v_ i ) in the list of edges, and for each pair ( v_ i, u_ i) the condition v_ i u_ i is satisfied.",
    "output": "Print n- 1 lines describing the edges of a spanning tree such that the maximum degree over all vertices is maximum possible. Make sure that the edges of the printed spanning tree form some subset of the input edges ( order doesn' t matter and edge ( v, u) is considered the same as the edge ( u, v) ) . If there are multiple possible answers, print any of them.",
    "note": "Picture corresponding to the first example: In this example the number of edges of spanning tree incident to the vertex 3 is 3 . It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer. Picture corresponding to the second example: In this example the number of edges of spanning tree incident to the vertex 1 is 3 . It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer. Picture corresponding to the third example: In this example the number of edges of spanning tree incident to the vertex 2 is 4 . It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer. But because this example is symmetric, we can choose almost the same spanning tree but with vertex 5 instead of 2 .",
    "topics": [
      "graphs"
    ],
    "id": "1133F1"
  },
  {
    "title": "Gourmet choice",
    "url": "https://codeforces.com/problemset/problem/1131/D",
    "history": "Mr. Apple, a gourmet, works as editor- in- chief of a gastronomic periodical. He travels around the world, tasting new delights of famous chefs from the most fashionable restaurants. Mr. Apple has his own signature method of review \u2014 in each restaurant Mr. Apple orders two sets of dishes on two different days. All the dishes are different, because Mr. Apple doesn' t like to eat the same food. For each pair of dishes from different days he remembers exactly which was better, or that they were of the same quality. After this the gourmet evaluates each dish with a positive integer. Once, during a revision of a restaurant of Celtic medieval cuisine named \u00abPoisson\u00bb, that serves chestnut soup with fir, warm soda bread, spicy lemon pie and other folk food, Mr. Apple was very pleasantly surprised the gourmet with its variety of menu, and hence ordered too much. Now he' s confused about evaluating dishes. The gourmet tasted a set of n dishes on the first day and a set of m dishes on the second day. He made a table a of size n \u00d7 m , in which he described his impressions. If, according to the expert, dish i from the first set was better than dish j from the second set, then a_ ij is equal to \" > \" , in the opposite case a_ ij is equal to \" < \" . Dishes also may be equally good, in this case a_ ij is \" = \" . Now Mr. Apple wants you to help him to evaluate every dish. Since Mr. Apple is very strict, he will evaluate the dishes so that the maximal number used is as small as possible. But Mr. Apple also is very fair, so he never evaluates the dishes so that it goes against his feelings. In other words, if a_ ij is \" < \" , then the number assigned to dish i from the first set should be less than the number of dish j from the second set, if a_ ij is \" > \" , then it should be greater, and finally if a_ ij is \" = \" , then the numbers should be the same. Help Mr. Apple to evaluate each dish from both sets so that it is consistent with his feelings, or determine that this is impossible.",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the number of dishes in both days. Each of the next n lines contains a string of m symbols. The j - th symbol on i - th line is a_ ij . All strings consist only of \" < \" , \" > \" and \" = \" .",
    "output": "The first line of output should contain \" Yes\" , if it' s possible to do a correct evaluation for all the dishes, or \" No\" otherwise. If case an answer exist, on the second line print n integers \u2014 evaluations of dishes from the first set, and on the third line print m integers \u2014 evaluations of dishes from the second set.",
    "note": "In the first sample, all dishes of the first day are better than dishes of the second day. So, the highest score will be 2 , for all dishes of the first day. In the third sample, the table is contradictory \u2014 there is no possible evaluation of the dishes that satisfies it.",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1131D"
  },
  {
    "title": "Power Tree",
    "url": "https://codeforces.com/problemset/problem/1120/D",
    "history": "You are given a rooted tree with n vertices, the root of the tree is the vertex 1 . Each vertex has some non- negative price. A leaf of the tree is a non- root vertex that has degree 1 . Arkady and Vasily play a strange game on the tree. The game consists of three stages. On the first stage Arkady buys some non- empty set of vertices of the tree. On the second stage Vasily puts some integers into all leaves of the tree. On the third stage Arkady can perform several ( possibly none) operations of the following kind: choose some vertex v he bought on the first stage and some integer x , and then add x to all integers in the leaves in the subtree of v . The integer x can be positive, negative of zero. A leaf a is in the subtree of a vertex b if and only if the simple path between a and the root goes through b . Arkady' s task is to make all integers in the leaves equal to zero. What is the minimum total cost s he has to pay on the first stage to guarantee his own win independently of the integers Vasily puts on the second stage? Also, we ask you to find all such vertices that there is an optimal ( i. e. with cost s ) set of vertices containing this one such that Arkady can guarantee his own win buying this set on the first stage.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 200 000 ) \u2014 the number of vertices in the tree. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 10^ 9 ) , where c_ i is the price of the i - th vertex. Each of the next n - 1 lines contains two integers a and b ( 1 \u2264 a, b \u2264 n ) , denoting an edge of the tree.",
    "output": "In the first line print two integers: the minimum possible cost s Arkady has to pay to guarantee his own win, and the number of vertices k that belong to at least one optimal set. In the second line print k distinct integers in increasing order the indices of the vertices that belong to at least one optimal set.",
    "note": "In the second example all sets of two vertices are optimal. So, each vertex is in at least one optimal set.",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1120D"
  },
  {
    "title": "Tree",
    "url": "https://codeforces.com/problemset/problem/1111/E",
    "history": "You are given a tree with n nodes and q queries. Every query starts with three integers k , m and r , followed by k nodes of the tree a_ 1, a_ 2, . . . , a_ k . To answer a query, assume that the tree is rooted at r . We want to divide the k given nodes into at most m groups such that the following conditions are met: Each node should be in exactly one group and each group should have at least one node. In any group, there should be no two distinct nodes such that one node is an ancestor ( direct or indirect) of the other. You need to output the number of ways modulo 10^ 9+ 7 for every query.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 5 ) \u2014 the number of vertices in the tree and the number of queries, respectively. Each of the next n- 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n, u v ) , denoting an edge connecting vertex u and vertex v . It is guaranteed that the given graph is a tree. Each of the next q lines starts with three integers k , m and r ( 1 \u2264 k, r \u2264 n , 1 \u2264 m \u2264 min( 300, k) ) \u2014 the number of nodes, the maximum number of groups and the root of the tree for the current query, respectively. They are followed by k distinct integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) , denoting the nodes of the current query. It is guaranteed that the sum of k over all queries does not exceed 10^ 5 .",
    "output": "Print q lines, where the i - th line contains the answer to the i - th query.",
    "note": "Consider the first example. In the first query, we have to divide the three given nodes ( 7 , 4 and 3 ) , into the maximum of three groups assuming that the tree is rooted at 2 . When the tree is rooted at 2 , 4 is an ancestor of both 3 and 7 . So we can' t put all the nodes into one group. There is only 1 way to divide the given nodes into two groups, which are [ 4] and [ 3, 7] . Also, there is only one way to divide the given nodes into three groups, which are [ 7] , [ 4] and [ 3] . So, there are total 2 ways to divide the given nodes into a maximum of three groups. In the second query, when the tree is rooted at 4 , 6 is an ancestor of 2 and 2 is an ancestor of 1 . So, we can' t put all the given nodes into one group.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "1111E"
  },
  {
    "title": "MST Unification",
    "url": "https://codeforces.com/problemset/problem/1108/F",
    "history": "You are given an undirected weighted connected graph with n vertices and m edges without loops and multiple edges. The i - th edge is e_ i = ( u_ i, v_ i, w_ i) ; the distance between vertices u_ i and v_ i along the edge e_ i is w_ i ( 1 \u2264 w_ i ) . The graph is connected, i. e. for any pair of vertices, there is at least one path between them consisting only of edges of the given graph. A minimum spanning tree ( MST) in case of positive weights is a subset of the edges of a connected weighted undirected graph that connects all the vertices together and has minimum total cost among all such subsets ( total cost is the sum of costs of chosen edges) . You can modify the given graph. The only operation you can perform is the following: increase the weight of some edge by 1 . You can increase the weight of each edge multiple ( possibly, zero) times. Suppose that the initial MST cost is k . Your problem is to increase weights of some edges with minimum possible number of operations in such a way that the cost of MST in the obtained graph remains k , but MST is unique ( it means that there is only one way to choose MST in the obtained graph) . Your problem is to calculate the minimum number of operations required to do it.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, n - 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges in the initial graph. The next m lines contain three integers each. The i - th line contains the description of the i - th edge e_ i . It is denoted by three integers u_ i, v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i v_ i, 1 \u2264 w \u2264 10^ 9 ) , where u_ i and v_ i are vertices connected by the i - th edge and w_ i is the weight of this edge. It is guaranteed that the given graph doesn' t contain loops and multiple edges ( i. e. for each i from 1 to m u_ i v_ i and for each unordered pair of vertices ( u, v) there is at most one edge connecting this pair of vertices) . It is also guaranteed that the given graph is connected.",
    "output": "Print one integer \u2014 the minimum number of operations to unify MST of the initial graph without changing the cost of MST.",
    "note": "The picture corresponding to the first example: You can, for example, increase weight of the edge ( 1, 6) or ( 6, 3) by 1 to unify MST. The picture corresponding to the last example: You can, for example, increase weights of edges ( 1, 5) and ( 2, 4) by 1 to unify MST.",
    "topics": [
      "binary search",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1108F"
  },
  {
    "title": "Vasya and Endless Credits",
    "url": "https://codeforces.com/problemset/problem/1107/F",
    "history": "Vasya wants to buy himself a nice new car. Unfortunately, he lacks some money. Currently he has exactly 0 burles. However, the local bank has n credit offers. Each offer can be described with three numbers a_ i , b_ i and k_ i . Offers are numbered from 1 to n . If Vasya takes the i - th offer, then the bank gives him a_ i burles at the beginning of the month and then Vasya pays bank b_ i burles at the end of each month for the next k_ i months ( including the month he activated the offer) . Vasya can take the offers any order he wants. Each month Vasya can take no more than one credit offer. Also each credit offer can not be used more than once. Several credits can be active at the same time. It implies that Vasya pays bank the sum of b_ i over all the i of active credits at the end of each month. Vasya wants to buy a car in the middle of some month. He just takes all the money he currently has and buys the car of that exact price. Vasya don' t really care what he' ll have to pay the bank back after he buys a car. He just goes out of the country on his car so that the bank can' t find him anymore. What is the maximum price that car can have?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 500 ) \u2014 the number of credit offers. Each of the next n lines contains three integers a_ i , b_ i and k_ i ( 1 \u2264 a_ i, b_ i, k_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the maximum price of the car.",
    "note": "In the first example, the following sequence of offers taken is optimal: 4 \u2192 3. The amount of burles Vasya has changes the following way: 5 \u2192 32 \u2192 - 86 \u2192 . . . . He takes the money he has in the middle of the second month ( 32 burles) and buys the car. The negative amount of money means that Vasya has to pay the bank that amount of burles. In the second example, the following sequence of offers taken is optimal: 3 \u2192 1 \u2192 2. The amount of burles Vasya has changes the following way: 0 \u2192 300 \u2192 338 \u2192 1337 \u2192 236 \u2192 - 866 \u2192 . . . .",
    "topics": [
      "dp",
      "flows",
      "graph matchings",
      "graphs",
      "sortings"
    ],
    "id": "1107F"
  },
  {
    "title": "Lunar New Year and a Wander",
    "url": "https://codeforces.com/problemset/problem/1106/D",
    "history": "Lunar New Year is approaching, and Bob decides to take a wander in a nearby park. The park can be represented as a connected graph with n nodes and m bidirectional edges. Initially Bob is at the node 1 and he records 1 on his notebook. He can wander from one node to another through those bidirectional edges. Whenever he visits a node not recorded on his notebook, he records it. After he visits all nodes at least once, he stops wandering, thus finally a permutation of nodes a_ 1, a_ 2, . . . , a_ n is recorded. Wandering is a boring thing, but solving problems is fascinating. Bob wants to know the lexicographically smallest sequence of nodes he can record while wandering. Bob thinks this problem is trivial, and he wants you to solve it. A sequence x is lexicographically smaller than a sequence y if and only if one of the following holds: x is a prefix of y , but x y ( this is impossible in this problem as all considered sequences have the same length) ; in the first position where x and y differ, the sequence x has a smaller element than the corresponding element in y .",
    "input": "The first line contains two positive integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) , denoting the number of nodes and edges, respectively. The following m lines describe the bidirectional edges in the graph. The i - th of these lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) , representing the nodes the i - th edge connects. Note that the graph can have multiple edges connecting the same two nodes and self- loops. It is guaranteed that the graph is connected.",
    "output": "Output a line containing the lexicographically smallest sequence a_ 1, a_ 2, . . . , a_ n Bob can record.",
    "note": "In the first sample, Bob' s optimal wandering path could be 1 \u2192 2 \u2192 1 \u2192 3 . Therefore, Bob will obtain the sequence { 1, 2, 3} , which is the lexicographically smallest one. In the second sample, Bob' s optimal wandering path could be 1 \u2192 4 \u2192 3 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 5 . Therefore, Bob will obtain the sequence { 1, 4, 3, 2, 5} , which is the lexicographically smallest one.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1106D"
  },
  {
    "title": "Kilani and the Game",
    "url": "https://codeforces.com/problemset/problem/1105/D",
    "history": "Kilani is playing a game with his friends. This game can be represented as a grid of size n \u00d7 m , where each cell is either empty or blocked, and every player has one or more castles in some cells ( there are no two castles in one cell) . The game is played in rounds. In each round players expand turn by turn: firstly, the first player expands, then the second player expands and so on. The expansion happens as follows: for each castle the player owns now, he tries to expand into the empty cells nearby. The player i can expand from a cell with his castle to the empty cell if it' s possible to reach it in at most s_ i ( where s_ i is player' s expansion speed) moves to the left, up, right or down without going through blocked cells or cells occupied by some other player' s castle. The player examines the set of cells he can expand to and builds a castle in each of them at once. The turned is passed to the next player after that. The game ends when no player can make a move. You are given the game field and speed of the expansion for each player. Kilani wants to know for each player how many cells he will control ( have a castle their) after the game ends.",
    "input": "The first line contains three integers n , m and p ( 1 \u2264 n, m \u2264 1000 , 1 \u2264 p \u2264 9 ) \u2014 the size of the grid and the number of players. The second line contains p integers s_ i ( 1 \u2264 s \u2264 10^ 9 ) \u2014 the speed of the expansion for every player. The following n lines describe the game grid. Each of them consists of m symbols, where ' . ' denotes an empty cell, ' # ' denotes a blocked cell and digit x ( 1 \u2264 x \u2264 p ) denotes the castle owned by player x . It is guaranteed, that each player has at least one castle on the grid.",
    "output": "Print p integers \u2014 the number of cells controlled by each player after the game ends.",
    "note": "The picture below show the game before it started, the game after the first round and game after the second round in the first example: In the second example, the first player is \" blocked\" so he will not capture new cells for the entire game. All other player will expand up during the first two rounds and in the third round only the second player will move to the left.",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "1105D"
  },
  {
    "title": "Johnny Solving",
    "url": "https://codeforces.com/problemset/problem/1103/C",
    "history": "Today is tuesday, that means there is a dispute in JOHNNY SOLVING team again: they try to understand who is Johnny and who is Solving. That' s why guys asked Umnik to help them. Umnik gave guys a connected graph with n vertices without loops and multiedges, such that a degree of any vertex is at least 3 , and also he gave a number 1 \u2264 k \u2264 n . Because Johnny is not too smart, he promised to find a simple path with length at least n/ k in the graph. In reply, Solving promised to find k simple by vertices cycles with representatives, such that: Length of each cycle is at least 3 . Length of each cycle is not divisible by 3 . In each cycle must be a representative - vertex, which belongs only to this cycle among all printed cycles. You need to help guys resolve the dispute, for that you need to find a solution for Johnny: a simple path with length at least n/ k ( n is not necessarily divided by k ) , or solution for Solving: k cycles that satisfy all the conditions above. If there is no any solution - print - 1 .",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 k \u2264 n \u2264 2. 5 \u00b7 10^ 5, 1 \u2264 m \u2264 5 \u00b7 10^ 5 ) Next m lines describe edges of the graph in format v , u ( 1 \u2264 v, u \u2264 n ) . It' s guaranteed that v = \u0338 u and all m pairs are distinct. It' s guaranteed that a degree of each vertex is at least 3 .",
    "output": "Print PATH in the first line, if you solve problem for Johnny. In the second line print the number of vertices in the path c ( c \u2265n/ k ) . And in the third line print vertices describing the path in route order. Print CYCLES in the first line, if you solve problem for Solving. In the following lines describe exactly k cycles in the following format: in the first line print the size of the cycle c ( c \u2265 3 ) . In the second line print the cycle in route order. Also, the first vertex in the cycle must be a representative. Print - 1 if there is no any solution. The total amount of printed numbers in the output must be at most 10^ 6 . It' s guaranteed, that if exists any solution then there is a correct output satisfies this restriction.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "math"
    ],
    "id": "1103C"
  },
  {
    "title": "Elongated Matrix",
    "url": "https://codeforces.com/problemset/problem/1102/F",
    "history": "You are given a matrix a , consisting of n rows and m columns. Each cell contains an integer in it. You can change the order of rows arbitrarily ( including leaving the initial order) , but you can' t change the order of cells in a row. After you pick some order of rows, you traverse the whole matrix the following way: firstly visit all cells of the first column from the top row to the bottom one, then the same for the second column and so on. During the traversal you write down the sequence of the numbers on the cells in the same order you visited them. Let that sequence be s_ 1, s_ 2, . . . , s_ nm . The traversal is k - acceptable if for all i ( 1 \u2264 i \u2264 nm - 1 ) | s_ i - s_ i + 1| \u2265 k . Find the maximum integer k such that there exists some order of rows of matrix a that it produces a k - acceptable traversal.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 16 , 1 \u2264 m \u2264 10^ 4 , 2 \u2264 nm ) \u2014 the number of rows and the number of columns, respectively. Each of the next n lines contains m integers ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the description of the matrix.",
    "output": "Print a single integer k \u2014 the maximum number such that there exists some order of rows of matrix a that it produces an k - acceptable traversal.",
    "note": "In the first example you can rearrange rows as following to get the 5 - acceptable traversal: 5 310 84 39 9Then the sequence s will be [ 5, 10, 4, 9, 3, 8, 3, 9] . Each pair of neighbouring elements have at least k = 5 difference between them. In the second example the maximum k = 0 , any order is 0 - acceptable. In the third example the given order is already 3 - acceptable, you can leave it as it is.",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "dp",
      "graphs"
    ],
    "id": "1102F"
  },
  {
    "title": "Andrew and Taxi",
    "url": "https://codeforces.com/problemset/problem/1100/E",
    "history": "Andrew prefers taxi to other means of transport, but recently most taxi drivers have been acting inappropriately. In order to earn more money, taxi drivers started to drive in circles. Roads in Andrew' s city are one- way, and people are not necessary able to travel from one part to another, but it pales in comparison to insidious taxi drivers. The mayor of the city decided to change the direction of certain roads so that the taxi drivers wouldn' t be able to increase the cost of the trip endlessly. More formally, if the taxi driver is on a certain crossroads, they wouldn' t be able to reach it again if he performs a nonzero trip. Traffic controllers are needed in order to change the direction the road goes. For every road it is known how many traffic controllers are needed to change the direction of the road to the opposite one. It is allowed to change the directions of roads one by one, meaning that each traffic controller can participate in reversing two or more roads. You need to calculate the minimum number of traffic controllers that you need to hire to perform the task and the list of the roads that need to be reversed.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 100 000 , 1 \u2264 m \u2264 100 000 ) \u2014 the number of crossroads and the number of roads in the city, respectively. Each of the following m lines contain three integers u_ i , v_ i and c_ i ( 1 \u2264 u_ i, v_ i\u2264 n , 1 \u2264 c_ i\u2264 10^ 9 , u_ i v_ i ) \u2014 the crossroads the road starts at, the crossroads the road ends at and the number of traffic controllers required to reverse this road.",
    "output": "In the first line output two integers the minimal amount of traffic controllers required to complete the task and amount of roads k which should be reversed. k should not be minimized. In the next line output k integers separated by spaces \u2014 numbers of roads, the directions of which should be reversed. The roads are numerated from 1 in the order they are written in the input. If there are many solutions, print any of them.",
    "note": "There are two simple cycles in the first example: 1 \u2192 5 \u2192 2 \u2192 1 and 2 \u2192 3 \u2192 4 \u2192 5 \u2192 2 . One traffic controller can only reverse the road 2 \u2192 1 and he can' t destroy the second cycle by himself. Two traffic controllers can reverse roads 2 \u2192 1 and 2 \u2192 3 which would satisfy the condition. In the second example one traffic controller can' t destroy the cycle 1 \u2192 3 \u2192 2 \u2192 1 . With the help of three controllers we can, for example, reverse roads 1 \u2192 3 , 2 \u2192 4 , 1 \u2192 5 .",
    "topics": [
      "binary search",
      "dfs and similar",
      "graphs"
    ],
    "id": "1100E"
  },
  {
    "title": "Construct a tree",
    "url": "https://codeforces.com/problemset/problem/1098/C",
    "history": "Misha walked through the snowy forest and he was so fascinated by the trees to decide to draw his own tree! Misha would like to construct a rooted tree with n vertices, indexed from 1 to n , where the root has index 1. Every other vertex has a parent p_ i , and i is called a child of vertex p_ i . Vertex u belongs to the subtree of vertex v iff v is reachable from u while iterating over the parents ( u , p_ u , p_ p_ u , . . . ) . Clearly, v belongs to its own subtree, and the number of vertices in the subtree is called the size of the subtree. Misha is only interested in trees where every vertex belongs to the subtree of vertex 1 . Below there is a tree with 6 vertices. The subtree of vertex 2 contains vertices 2 , 3 , 4 , 5 . Hence the size of its subtree is 4 . The branching coefficient of the tree is defined as the maximum number of children in any vertex. For example, for the tree above the branching coefficient equals 2 . Your task is to construct a tree with n vertices such that the sum of the subtree sizes for all vertices equals s , and the branching coefficient is minimum possible.",
    "input": "The only input line contains two integers n and s \u2014 the number of vertices in the tree and the desired sum of the subtree sizes ( 2 \u2264 n \u2264 10^ 5 ; 1 \u2264 s \u2264 10^ 10 ) .",
    "output": "If the required tree does not exist, output \u00abNo\u00bb. Otherwise output \u00abYes\u00bb on the first line, and in the next one output integers p_ 2 , p_ 3 , . . . , p_ n , where p_ i denotes the parent of vertex i .",
    "note": "Below one can find one of the possible solutions for the first sample case. The sum of subtree sizes equals 3 + 1 + 1 = 5 , and the branching coefficient equals 2 . Below one can find one of the possible solutions for the third sample case. The sum of subtree sizes equals 6 + 3 + 2 + 1 + 2 + 1 = 15 , and the branching coefficient equals 2 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1098C"
  },
  {
    "title": "Make It Connected",
    "url": "https://codeforces.com/problemset/problem/1095/F",
    "history": "You are given an undirected graph consisting of n vertices. A number is written on each vertex; the number on vertex i is a_ i . Initially there are no edges in the graph. You may add some edges to this graph, but you have to pay for them. The cost of adding an edge between vertices x and y is a_ x + a_ y coins. There are also m special offers, each of them is denoted by three numbers x , y and w , and means that you can add an edge connecting vertices x and y and pay w coins for it. You don' t have to use special offers: if there is a pair of vertices x and y that has a special offer associated with it, you still may connect these two vertices paying a_ x + a_ y coins for it. What is the minimum number of coins you have to spend to make the graph connected? Recall that a graph is connected if it' s possible to get from any vertex to any other vertex using only the edges belonging to this graph.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the graph and the number of special offers, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) \u2014 the numbers written on the vertices. Then m lines follow, each containing three integers x , y and w ( 1 \u2264 x, y \u2264 n , 1 \u2264 w \u2264 10^ 12 , x y ) denoting a special offer: you may add an edge connecting vertex x and vertex y , and this edge will cost w coins.",
    "output": "Print one integer \u2014 the minimum number of coins you have to pay to make the graph connected.",
    "note": "In the first example it is possible to connect 1 to 2 using special offer 2 , and then 1 to 3 without using any offers. In next two examples the optimal answer may be achieved without using special offers.",
    "topics": [
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1095F"
  },
  {
    "title": "Beautiful Graph",
    "url": "https://codeforces.com/problemset/problem/1093/D",
    "history": "You are given an undirected unweighted graph consisting of n vertices and m edges. You have to write a number on each vertex of the graph. Each number should be 1 , 2 or 3 . The graph becomes beautiful if for each edge the sum of numbers on vertices connected by this edge is odd. Calculate the number of possible ways to write numbers 1 , 2 and 3 on vertices so the graph becomes beautiful. Since this number may be large, print it modulo 998244353 . Note that you have to write exactly one number on each vertex. The graph does not have any self- loops or multiple edges.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 5 ) \u2014 the number of tests in the input. The first line of each test contains two integers n and m ( 1 \u2264 n \u2264 3 \u00b7 10^ 5, 0 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges, respectively. Next m lines describe edges: i - th line contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n; u_ i = \u0338 v_ i ) \u2014 indices of vertices connected by i - th edge. It is guaranteed that \u2211_ i= 1^ t n \u2264 3 \u00b7 10^ 5 and \u2211_ i= 1^ t m \u2264 3 \u00b7 10^ 5 .",
    "output": "For each test print one line, containing one integer \u2014 the number of possible ways to write numbers 1 , 2 , 3 on the vertices of given graph so it becomes beautiful. Since answers may be large, print them modulo 998244353 .",
    "note": "Possible ways to distribute numbers in the first test: the vertex 1 should contain 1 , and 2 should contain 2 ; the vertex 1 should contain 3 , and 2 should contain 2 ; the vertex 1 should contain 2 , and 2 should contain 1 ; the vertex 1 should contain 2 , and 2 should contain 3 . In the second test there is no way to distribute numbers.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "1093D"
  },
  {
    "title": "New Year and the Acquaintance Estimation",
    "url": "https://codeforces.com/problemset/problem/1091/E",
    "history": "Bob is an active user of the social network Faithbug. On this network, people are able to engage in a mutual friendship. That is, if a is a friend of b , then b is also a friend of a . Each user thus has a non- negative amount of friends. This morning, somebody anonymously sent Bob the following link: graph realization problem and Bob wants to know who that was. In order to do that, he first needs to know how the social network looks like. He investigated the profile of every other person on the network and noted down the number of his friends. However, he neglected to note down the number of his friends. Help him find out how many friends he has. Since there may be many possible answers, print all of them.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) , the number of people on the network excluding Bob. The second line contains n numbers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) , with a_ i being the number of people that person i is a friend of.",
    "output": "Print all possible values of a_ n+ 1 \u2014 the amount of people that Bob can be friend of, in increasing order. If no solution exists, output - 1 .",
    "note": "In the first test case, the only solution is that everyone is friends with everyone. That is why Bob should have 3 friends. In the second test case, there are three possible solutions ( apart from symmetries) : a is friend of b , c is friend of d , and Bob has no friends, or a is a friend of b and both c and d are friends with Bob, or Bob is friends of everyone. The third case is impossible to solve, as the second person needs to be a friend with everybody, but the first one is a complete stranger.",
    "topics": [
      "binary search",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1091E"
  },
  {
    "title": "Petya and Graph",
    "url": "https://codeforces.com/problemset/problem/1082/G",
    "history": "Petya has a simple graph ( that is, a graph without loops or multiple edges) consisting of n vertices and m edges. The weight of the i - th vertex is a_ i . The weight of the i - th edge is w_ i . A subgraph of a graph is some set of the graph vertices and some set of the graph edges. The set of edges must meet the condition: both ends of each edge from the set must belong to the chosen set of vertices. The weight of a subgraph is the sum of the weights of its edges, minus the sum of the weights of its vertices. You need to find the maximum weight of subgraph of given graph. The given graph does not contain loops and multiple edges.",
    "input": "The first line contains two numbers n and m ( 1 \u2264 n \u2264 10^ 3, 0 \u2264 m \u2264 10^ 3 ) - the number of vertices and edges in the graph, respectively. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) - the weights of the vertices of the graph. The following m lines contain edges: the i - e edge is defined by a triple of integers v_ i, u_ i, w_ i ( 1 \u2264 v_ i, u_ i \u2264 n, 1 \u2264 w_ i \u2264 10^ 9, v_ i = \u0338 u_ i ) . This triple means that between the vertices v_ i and u_ i there is an edge of weight w_ i . It is guaranteed that the graph does not contain loops and multiple edges.",
    "output": "Print one integer \u2014 the maximum weight of the subgraph of the given graph.",
    "note": "In the first test example, the optimal subgraph consists of the vertices 1, 3, 4 and has weight 4 + 4 + 5 - ( 1 + 2 + 2) = 8 . In the second test case, the optimal subgraph is empty.",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1082G"
  },
  {
    "title": "Maximum Diameter Graph",
    "url": "https://codeforces.com/problemset/problem/1082/D",
    "history": "Graph constructive problems are back! This time the graph you are asked to build should match the following properties. The graph is connected if and only if there exists a path between every pair of vertices. The diameter ( aka \" longest shortest path\" ) of a connected undirected graph is the maximum number of edges in the shortest path between any pair of its vertices. The degree of a vertex is the number of edges incident to it. Given a sequence of n integers a_ 1, a_ 2, . . . , a_ n construct a connected undirected graph of n vertices such that: the graph contains no self- loops and no multiple edges; the degree d_ i of the i - th vertex doesn' t exceed a_ i ( i. e. d_ i \u2264 a_ i ) ; the diameter of the graph is maximum possible. Output the resulting graph or report that no solution exists.",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 500 ) \u2014 the number of vertices in the graph. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n - 1 ) \u2014 the upper limits to vertex degrees.",
    "output": "Print \" NO\" if no graph can be constructed under the given conditions. Otherwise print \" YES\" and the diameter of the resulting graph in the first line. The second line should contain a single integer m \u2014 the number of edges in the resulting graph. The i - th of the next m lines should contain two integers v_ i, u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , v_ i = \u0338 u_ i ) \u2014 the description of the i - th edge. The graph should contain no multiple edges \u2014 for each pair ( x, y) you output, you should output no more pairs ( x, y) or ( y, x) .",
    "note": "Here are the graphs for the first two example cases. Both have diameter of 2 . d_ 1 = 1 \u2264 a_ 1 = 2 d_ 2 = 2 \u2264 a_ 2 = 2 d_ 3 = 1 \u2264 a_ 3 = 2 d_ 1 = 1 \u2264 a_ 1 = 1 d_ 2 = 4 \u2264 a_ 2 = 4 d_ 3 = 1 \u2264 a_ 3 = 1 d_ 4 = 1 \u2264 a_ 4 = 1",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "1082D"
  },
  {
    "title": "Maximum Distance",
    "url": "https://codeforces.com/problemset/problem/1081/D",
    "history": "Chouti was tired of the tedious homework, so he opened up an old programming problem he created years ago. You are given a connected undirected graph with n vertices and m weighted edges. There are k special vertices: x_ 1, x_ 2, . . . , x_ k . Let' s define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them. For each special vertex, find another special vertex which is farthest from it ( in terms of the previous paragraph, i. e. the corresponding distance is maximum possible) and output the distance between them. The original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 k \u2264 n \u2264 10^ 5 , n- 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of vertices, the number of edges and the number of special vertices. The second line contains k distinct integers x_ 1, x_ 2, . . . , x_ k ( 1 \u2264 x_ i \u2264 n ) . Each of the following m lines contains three integers u , v and w ( 1 \u2264 u, v \u2264 n, 1 \u2264 w \u2264 10^ 9 ) , denoting there is an edge between u and v of weight w . The given graph is undirected, so an edge ( u, v) can be used in the both directions. The graph may have multiple edges and self- loops. It is guaranteed, that the graph is connected.",
    "output": "The first and only line should contain k integers. The i - th integer is the distance between x_ i and the farthest special vertex from it.",
    "note": "In the first example, the distance between vertex 1 and 2 equals to 2 because one can walk through the edge of weight 2 connecting them. So the distance to the farthest node for both 1 and 2 equals to 2 . In the second example, one can find that distance between 1 and 2 , distance between 1 and 3 are both 3 and the distance between 2 and 3 is 2 . The graph may have multiple edges between and self- loops, as in the first example.",
    "topics": [
      "dsu",
      "graphs",
      "shortest paths",
      "sortings"
    ],
    "id": "1081D"
  },
  {
    "title": "Edge Deletion",
    "url": "https://codeforces.com/problemset/problem/1076/D",
    "history": "You are given an undirected connected weighted graph consisting of n vertices and m edges. Let' s denote the length of the shortest path from vertex 1 to vertex i as d_ i . You have to erase some edges of the graph so that at most k edges remain. Let' s call a vertex i good if there still exists a path from 1 to i with length d_ i after erasing the edges. Your goal is to erase the edges in such a way that the number of good vertices is maximized.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 m \u2264 3 \u00b7 10^ 5 , n - 1 \u2264 m , 0 \u2264 k \u2264 m ) \u2014 the number of vertices and edges in the graph, and the maximum number of edges that can be retained in the graph, respectively. Then m lines follow, each containing three integers x , y , w ( 1 \u2264 x, y \u2264 n , x y , 1 \u2264 w \u2264 10^ 9 ) , denoting an edge connecting vertices x and y and having weight w . The given graph is connected ( any vertex can be reached from any other vertex) and simple ( there are no self- loops, and for each unordered pair of vertices there exists at most one edge connecting these vertices) .",
    "output": "In the first line print e \u2014 the number of edges that should remain in the graph ( 0 \u2264 e \u2264 k ) . In the second line print e distinct integers from 1 to m \u2014 the indices of edges that should remain in the graph. Edges are numbered in the same order they are given in the input. The number of good vertices should be as large as possible.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1076D"
  },
  {
    "title": "Privatization of Roads in Berland",
    "url": "https://codeforces.com/problemset/problem/1070/I",
    "history": "There are n cities and m two- way roads in Berland, each road connecting two distinct cities. Recently the Berland government has made a tough decision to transfer ownership of the roads to private companies. In total, there are 100500 private companies in Berland, numbered by integers from 1 to 100500 . After the privatization, every road should belong to exactly one company. The anti- monopoly committee demands that after the privatization each company can own at most two roads. The urbanists of Berland also stated their opinion: each city should be adjacent to the roads owned by at most k companies. Help the government to distribute the roads between the companies so that both conditions are satisfied. That is, each company gets at most two roads, and each city has roads of at most k distinct companies adjacent to it.",
    "input": "Input contains one or several test cases. The first line contains an integer t ( 1 \u2264 t \u2264 300 ) \u2014 the number of test cases in the input. Solve test cases separately, test cases are completely independent and do not affect each other. The following lines describe the test cases. Each case starts with a line consisting of three space- separated integers n , m and k ( 2 \u2264 n \u2264 600 , 1 \u2264 m \u2264 600 , 1 \u2264 k \u2264 n - 1 ) \u2014 the number of cities, the number of roads and the maximum diversity of the roads adjacent to a city. Then m lines follow, each having a pair of space- separated integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ; a_ i b_ i ) . It means that the i - th road connects cities a_ i and b_ i . All roads are two- way. There is at most one road between a pair of the cities. The sum of n values for all test cases doesn' t exceed 600 . The sum of m values for all test cases doesn' t exceed 600 .",
    "output": "Print t lines: the i - th line should contain the answer for the i - th test case. For a test case, print a sequence of integers c_ 1, c_ 2, . . . , c_ m separated by space, where c_ i ( 1 \u2264 c_ i \u2264 100500 ) is the company which owns the i - th road in your plan. If there are multiple solutions, output any of them. If there is no solution for a test case, print c_ 1= c_ 2= . . . = c_ m= 0 .",
    "note": "",
    "topics": [
      "flows",
      "graph matchings",
      "graphs"
    ],
    "id": "1070I"
  },
  {
    "title": "Find a Number",
    "url": "https://codeforces.com/problemset/problem/1070/A",
    "history": "You are given two positive integers d and s . Find minimal positive integer n which is divisible by d and has sum of digits equal to s .",
    "input": "The first line contains two positive integers d and s ( 1 \u2264 d \u2264 500, 1 \u2264 s \u2264 5000 ) separated by space.",
    "output": "Print the required number or - 1 if it doesn' t exist.",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "number theory",
      "shortest paths"
    ],
    "id": "1070A"
  },
  {
    "title": "Colored Rooks",
    "url": "https://codeforces.com/problemset/problem/1068/C",
    "history": "Ivan is a novice painter. He has n dyes of different colors. He also knows exactly m pairs of colors which harmonize with each other. Ivan also enjoy playing chess. He has 5000 rooks. He wants to take k rooks, paint each of them in one of n colors and then place this k rooks on a chessboard of size 10^ 9\u00d7 10^ 9 . Let' s call the set of rooks on the board connected if from any rook we can get to any other rook in this set moving only through cells with rooks from this set. Assume that rooks can jump over other rooks, in other words a rook can go to any cell which shares vertical and to any cell which shares horizontal. Ivan wants his arrangement of rooks to have following properties: For any color there is a rook of this color on a board; For any color the set of rooks of this color is connected; For any two different colors a b union of set of rooks of color a and set of rooks of color b is connected if and only if this two colors harmonize with each other. Please help Ivan find such an arrangement.",
    "input": "The first line of input contains 2 integers n , m ( 1 \u2264 n \u2264 100 , 0 \u2264 m \u2264 min( 1000, n( n- 1) / 2) ) \u2014 number of colors and number of pairs of colors which harmonize with each other. In next m lines pairs of colors which harmonize with each other are listed. Colors are numbered from 1 to n . It is guaranteed that no pair occurs twice in this list.",
    "output": "Print n blocks, i - th of them describes rooks of i - th color. In the first line of block print one number a_ i ( 1 \u2264 a_ i\u2264 5000 ) \u2014 number of rooks of color i . In each of next a_ i lines print two integers x and y ( 1 \u2264 x, y \u2264 10^ 9 ) \u2014 coordinates of the next rook. All rooks must be on different cells. Total number of rooks must not exceed 5000 . It is guaranteed that the solution exists.",
    "note": "Rooks arrangements for all three examples ( red is color 1 , green is color 2 and blue is color 3 ) .",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1068C"
  },
  {
    "title": "Multihedgehog",
    "url": "https://codeforces.com/problemset/problem/1067/B",
    "history": "Someone give a strange birthday present to Ivan. It is hedgehog \u2014 connected undirected graph in which one vertex has degree at least 3 ( we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k - multihedgehog. Let us define k - multihedgehog as follows: 1 - multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1. For all k \u2265 2 , k - multihedgehog is ( k- 1) - multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v , create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. Thereby k - multihedgehog is a tree. Ivan made k - multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k - multihedgehog.",
    "input": "First line of input contains 2 integers n , k ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) \u2014 number of vertices and hedgehog parameter. Next n- 1 lines contains two integers u v ( 1 \u2264 u, v \u2264 n; u v ) \u2014 indices of vertices connected by edge. It is guaranteed that given graph is a tree.",
    "output": "Print \" Yes\" ( without quotes) , if given graph is k - multihedgehog, and \" No\" ( without quotes) otherwise.",
    "note": "2- multihedgehog from the first example looks like this: Its center is vertex 13 . Hedgehogs created on last step are: [ 4 ( center) , 1, 2, 3] , [ 6 ( center) , 7, 8, 9] , [ 5 ( center) , 10, 11, 12, 13] . Tree from second example is not a hedgehog because degree of center should be at least 3 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1067B"
  },
  {
    "title": "Vasya and Isolated Vertices",
    "url": "https://codeforces.com/problemset/problem/1065/B",
    "history": "Vasya has got an undirected graph consisting of n vertices and m edges. This graph doesn' t contain any self- loops or multiple edges. Self- loop is an edge connecting a vertex to itself. Multiple edges are a pair of edges such that they connect the same pair of vertices. Since the graph is undirected, the pair of edges ( 1, 2) and ( 2, 1) is considered to be multiple edges. Isolated vertex of the graph is a vertex such that there is no edge connecting this vertex to any other vertex. Vasya wants to know the minimum and maximum possible number of isolated vertices in an undirected graph consisting of n vertices and m edges.",
    "input": "The only line contains two integers n and m ( 1 \u2264 n \u2264 10^ 5, 0 \u2264 m \u2264n ( n - 1) / 2) . It is guaranteed that there exists a graph without any self- loops or multiple edges with such number of vertices and edges.",
    "output": "In the only line print two numbers min and max \u2014 the minimum and maximum number of isolated vertices, respectively.",
    "note": "In the first example it is possible to construct a graph with 0 isolated vertices: for example, it should contain edges ( 1, 2) and ( 3, 4) . To get one isolated vertex, we may construct a graph with edges ( 1, 2) and ( 1, 3) . In the second example the graph will always contain exactly one isolated vertex.",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1065B"
  },
  {
    "title": "Labyrinth",
    "url": "https://codeforces.com/problemset/problem/1063/B",
    "history": "You are playing some computer game. One of its levels puts you in a maze consisting of n lines, each of which contains m cells. Each cell either is free or is occupied by an obstacle. The starting cell is in the row r and column c. In one step you can move one square up, left, down or right, if the target cell is not occupied by an obstacle. You can' t move beyond the boundaries of the labyrinth. Unfortunately, your keyboard is about to break, so you can move left no more than x times and move right no more than y times. There are no restrictions on the number of moves up and down since the keys used to move up and down are in perfect condition. Now you would like to determine for each cell whether there exists a sequence of moves that will put you from the starting cell to this particular one. How many cells of the board have this property?",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 2000) \u2014 the number of rows and the number columns in the labyrinth respectively. The second line contains two integers r, c ( 1 \u2264 r \u2264 n, 1 \u2264 c \u2264 m) \u2014 index of the row and index of the column that define the starting cell. The third line contains two integers x, y ( 0 \u2264 x, y \u2264 109) \u2014 the maximum allowed number of movements to the left and to the right respectively. The next n lines describe the labyrinth. Each of them has length of m and consists only of symbols ' . ' and ' * ' . The j- th character of the i- th line corresponds to the cell of labyrinth at row i and column j. Symbol ' . ' denotes the free cell, while symbol ' * ' denotes the cell with an obstacle. It is guaranteed, that the starting cell contains no obstacles.",
    "output": "Print exactly one integer \u2014 the number of cells in the labyrinth, which are reachable from starting cell, including the starting cell itself.",
    "note": "Cells, reachable in the corresponding example, are marked with ' + ' . First example: + + + . . + * * * . + + + * * * + + + . Second example: . + + . . + * . . + + . . + + .",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "1063B"
  },
  {
    "title": "Upgrading Cities",
    "url": "https://codeforces.com/problemset/problem/1062/F",
    "history": "There are n cities in the kingdom X , numbered from 1 through n . People travel between cities by some one- way roads. As a passenger, JATC finds it weird that from any city u , he can' t start a trip in it and then return back to it using the roads of the kingdom. That is, the kingdom can be viewed as an acyclic graph. Being annoyed by the traveling system, JATC decides to meet the king and ask him to do something. In response, the king says that he will upgrade some cities to make it easier to travel. Because of the budget, the king will only upgrade those cities that are important or semi- important. A city u is called important if for every city v = \u0338 u , there is either a path from u to v or a path from v to u . A city u is called semi- important if it is not important and we can destroy exactly one city v = \u0338 u so that u becomes important. The king will start to act as soon as he finds out all those cities. Please help him to speed up the process.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 300 000 , 1 \u2264 m \u2264 300 000 ) \u2014 the number of cities and the number of one- way roads. Next m lines describe the road system of the kingdom. Each of them contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i ) , denoting one- way road from u_ i to v_ i . It is guaranteed, that the kingdoms' roads make an acyclic graph, which doesn' t contain multiple edges and self- loops.",
    "output": "Print a single integer \u2014 the number of cities that the king has to upgrade.",
    "note": "In the first example: Starting at the city 1 we can reach all the other cities, except for the city 6 . Also, from the city 6 we cannot reach the city 1 . Therefore, if we destroy the city 6 then the city 1 will become important. So 1 is a semi- important city. For city 2 , the set of cities that cannot reach 2 and cannot be reached by 2 is { 6} . Therefore, destroying city 6 will make the city 2 important. So city 2 is also semi- important. For city 3 , the set is { 5, 6} . As you can see, destroying either city 5 or 6 will not make the city 3 important. Therefore, it is neither important nor semi- important. For city 4 , the set is empty. So 4 is an important city. The set for city 5 is { 3, 6} and the set for city 6 is { 3, 5} . Similarly to city 3 , both of them are not important nor semi- important. The city 7 is important since we can reach it from all other cities. So we have two important cities ( 4 and 7 ) and two semi- important cities ( 1 and 2 ) . In the second example, the important cities are 1 and 4 . The semi- important cities are 2 and 3 .",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "1062F"
  },
  {
    "title": "Fun with Integers",
    "url": "https://codeforces.com/problemset/problem/1062/D",
    "history": "You are given a positive integer n greater or equal to 2 . For every pair of integers a and b ( 2 \u2264 | a| , | b| \u2264 n ) , you can transform a into b if and only if there exists an integer x such that 1 < | x| and ( a \u00b7 x = b or b \u00b7 x = a ) , where | x| denotes the absolute value of x . After such a transformation, your score increases by | x| points and you are not allowed to transform a into b nor b into a anymore. Initially, you have a score of 0 . You can start at any integer and transform it as many times as you like. What is the maximum score you can achieve?",
    "input": "A single line contains a single integer n ( 2 \u2264 n \u2264 100 000 ) \u2014 the given integer described above.",
    "output": "Print an only integer \u2014 the maximum score that can be achieved with the transformations. If it is not possible to perform even a single transformation for all possible starting integers, print 0 .",
    "note": "In the first example, the transformations are 2 \u2192 4 \u2192 ( - 2) \u2192 ( - 4) \u2192 2 . In the third example, it is impossible to perform even a single transformation.",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "1062D"
  },
  {
    "title": "Politics",
    "url": "https://codeforces.com/problemset/problem/1061/E",
    "history": "There are n cities in the country. Two candidates are fighting for the post of the President. The elections are set in the future, and both candidates have already planned how they are going to connect the cities with roads. Both plans will connect all cities using n - 1 roads only. That is, each plan can be viewed as a tree. Both of the candidates had also specified their choice of the capital among n cities ( x for the first candidate and y for the second candidate) , which may or may not be same. Each city has a potential of building a port ( one city can have at most one port) . Building a port in i - th city brings a_ i amount of money. However, each candidate has his specific demands. The demands are of the form: k x , which means that the candidate wants to build exactly x ports in the subtree of the k - th city of his tree ( the tree is rooted at the capital of his choice) . Find out the maximum revenue that can be gained while fulfilling all demands of both candidates, or print - 1 if it is not possible to do. It is additionally guaranteed, that each candidate has specified the port demands for the capital of his choice.",
    "input": "The first line contains integers n , x and y ( 1 \u2264 n \u2264 500 , 1 \u2264 x, y \u2264 n ) \u2014 the number of cities, the capital of the first candidate and the capital of the second candidate respectively. Next line contains integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 000 ) \u2014 the revenue gained if the port is constructed in the corresponding city. Each of the next n - 1 lines contains integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) , denoting edges between cities in the tree of the first candidate. Each of the next n - 1 lines contains integers u' _ i and v' _ i ( 1 \u2264 u' _ i, v' _ i \u2264 n , u' _ i v' _ i ) , denoting edges between cities in the tree of the second candidate. Next line contains an integer q_ 1 ( 1 \u2264 q_ 1 \u2264 n ) , denoting the number of demands of the first candidate. Each of the next q_ 1 lines contains two integers k and x ( 1 \u2264 k \u2264 n , 1 \u2264 x \u2264 n ) \u2014 the city number and the number of ports in its subtree. Next line contains an integer q_ 2 ( 1 \u2264 q_ 2 \u2264 n ) , denoting the number of demands of the second candidate. Each of the next q_ 2 lines contain two integers k and x ( 1 \u2264 k \u2264 n , 1 \u2264 x \u2264 n ) \u2014 the city number and the number of ports in its subtree. It is guaranteed, that given edges correspond to valid trees, each candidate has given demand about each city at most once and that each candidate has specified the port demands for the capital of his choice. That is, the city x is always given in demands of the first candidate and city y is always given in the demands of the second candidate.",
    "output": "Print exactly one integer \u2014 the maximum possible revenue that can be gained, while satisfying demands of both candidates, or - 1 if it is not possible to satisfy all of the demands.",
    "note": "In the first example, it is optimal to build ports in cities 2 , 3 and 4 , which fulfills all demands of both candidates and gives revenue equal to 2 + 3 + 4 = 9 . In the second example, it is optimal to build ports in cities 2 and 3 , which fulfills all demands of both candidates and gives revenue equal to 99 + 99 = 198 . In the third example, it is not possible to build ports in such way, that all demands of both candidates are specified, hence the answer is - 1.",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1061E"
  },
  {
    "title": "Take Metro",
    "url": "https://codeforces.com/problemset/problem/1056/G",
    "history": "Having problems with tram routes in the morning, Arkady decided to return home by metro. Fortunately for Arkady, there is only one metro line in the city. Unfortunately for Arkady, the line is circular. It means that the stations are enumerated from 1 to n and there is a tunnel between any pair of consecutive stations as well as between the station 1 and the station n . Trains that go in clockwise direction visit the stations in order 1 \u2192 2 \u2192 3 \u2192. . . \u2192 n \u2192 1 while the trains that go in the counter- clockwise direction visit the stations in the reverse order. The stations that have numbers from 1 to m have interior mostly in red colors while the stations that have numbers from m + 1 to n have blue interior. Arkady entered the metro at station s and decided to use the following algorithm to choose his way home. Initially he has a positive integer t in his mind. If the current station has red interior, he takes a clockwise- directed train, otherwise he takes a counter- clockwise- directed train. He rides exactly t stations on the train and leaves the train. He decreases t by one. If t is still positive, he returns to step 2 . Otherwise he exits the metro. You have already realized that this algorithm most probably won' t bring Arkady home. Find the station he will exit the metro at so that you can continue helping him.",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 10^ 5 , 1 \u2264 m < n ) \u2014 the total number of stations and the number of stations that have red interior. The second line contains two integers s and t ( 1 \u2264 s \u2264 n , 1 \u2264 t \u2264 10^ 12 ) \u2014 the starting station and the initial value of t .",
    "output": "Output the only integer \u2014 the station where Arkady will exit the metro.",
    "note": "Consider the first example. There are 10 stations and the first 4 of them are red. Arkady starts at station 3 with value t = 1 , so just rides 1 station in clockwise direction and ends up on the station 4 . In the second example the metro is same as in the first example, but Arkady starts at station 3 with value t = 5 . It is a red station so he rides 5 stations in clockwise direction and leaves the train at station 8 . It is a blue station, so he rides 4 stations in counter- clockwise direction and leaves at station 4 . It is a red station, so he rides 3 stations in clockwise direction and leaves at station 7 . It is a blue station, so he rides 2 stations in counter- clockwise direction and leaves at station 5 . It is a blue station, so he rides 1 station in counter- clockwise direction and leaves at station 4 . Now t = 0 , so Arkady exits metro at the station 4 .",
    "topics": [
      "brute force",
      "data structures",
      "graphs"
    ],
    "id": "1056G"
  },
  {
    "title": "Decorate Apple Tree",
    "url": "https://codeforces.com/problemset/problem/1056/D",
    "history": "There is one apple tree in Arkady' s garden. It can be represented as a set of junctions connected with branches so that there is only one way to reach any junctions from any other one using branches. The junctions are enumerated from 1 to n , the junction 1 is called the root. A subtree of a junction v is a set of junctions u such that the path from u to the root must pass through v . Note that v itself is included in a subtree of v . A leaf is such a junction that its subtree contains exactly one junction. The New Year is coming, so Arkady wants to decorate the tree. He will put a light bulb of some color on each leaf junction and then count the number happy junctions. A happy junction is such a junction t that all light bulbs in the subtree of t have different colors. Arkady is interested in the following question: for each k from 1 to n , what is the minimum number of different colors needed to make the number of happy junctions be greater than or equal to k ?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of junctions in the tree. The second line contains n - 1 integers p_ 2 , p_ 3 , . . . , p_ n ( 1 \u2264 p_ i < i ) , where p_ i means there is a branch between junctions i and p_ i . It is guaranteed that this set of branches forms a tree.",
    "output": "Output n integers. The i - th of them should be the minimum number of colors needed to make the number of happy junctions be at least i .",
    "note": "In the first example for k = 1 and k = 2 we can use only one color: the junctions 2 and 3 will be happy. For k = 3 you have to put the bulbs of different colors to make all the junctions happy. In the second example for k = 4 you can, for example, put the bulbs of color 1 in junctions 2 and 4 , and a bulb of color 2 into junction 5 . The happy junctions are the ones with indices 2 , 3 , 4 and 5 then.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1056D"
  },
  {
    "title": "Metro",
    "url": "https://codeforces.com/problemset/problem/1055/A",
    "history": "Alice has a birthday today, so she invited home her best friend Bob. Now Bob needs to find a way to commute to the Alice' s home. In the city in which Alice and Bob live, the first metro line is being built. This metro line contains n stations numbered from 1 to n . Bob lives near the station with number 1 , while Alice lives near the station with number s . The metro line has two tracks. Trains on the first track go from the station 1 to the station n and trains on the second track go in reverse direction. Just after the train arrives to the end of its track, it goes to the depot immediately, so it is impossible to travel on it after that. Some stations are not yet open at all and some are only partially open \u2014 for each station and for each track it is known whether the station is closed for that track or not. If a station is closed for some track, all trains going in this track' s direction pass the station without stopping on it. When the Bob got the information on opened and closed stations, he found that traveling by metro may be unexpectedly complicated. Help Bob determine whether he can travel to the Alice' s home by metro or he should search for some other transport.",
    "input": "The first line contains two integers n and s ( 2 \u2264 s \u2264 n \u2264 1000 ) \u2014 the number of stations in the metro and the number of the station where Alice' s home is located. Bob lives at station 1 . Next lines describe information about closed and open stations. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( a_ i = 0 or a_ i = 1 ) . If a_ i = 1 , then the i - th station is open on the first track ( that is, in the direction of increasing station numbers) . Otherwise the station is closed on the first track. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( b_ i = 0 or b_ i = 1 ) . If b_ i = 1 , then the i - th station is open on the second track ( that is, in the direction of decreasing station numbers) . Otherwise the station is closed on the second track.",
    "output": "Print \" YES\" ( quotes for clarity) if Bob will be able to commute to the Alice' s home by metro and \" NO\" ( quotes for clarity) otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In the first example, all stations are opened, so Bob can simply travel to the station with number 3 . In the second example, Bob should travel to the station 5 first, switch to the second track and travel to the station 4 then. In the third example, Bob simply can' t enter the train going in the direction of Alice' s home.",
    "topics": [
      "graphs"
    ],
    "id": "1055A"
  },
  {
    "title": "The Shortest Statement",
    "url": "https://codeforces.com/problemset/problem/1051/F",
    "history": "You are given a weighed undirected connected graph, consisting of n vertices and m edges. You should answer q queries, the i - th query is to find the shortest distance between vertices u_ i and v_ i .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5, m - n \u2264 20) \u2014 the number of vertices and edges in the graph. Next m lines contain the edges: the i - th edge is a triple of integers v_ i, u_ i, d_ i ( 1 \u2264 u_ i, v_ i \u2264 n, 1 \u2264 d_ i \u2264 10^ 9, u_ i = \u0338 v_ i) . This triple means that there is an edge between vertices u_ i and v_ i of weight d_ i . It is guaranteed that graph contains no self- loops and multiple edges. The next line contains a single integer q ( 1 \u2264 q \u2264 10^ 5) \u2014 the number of queries. Each of the next q lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n) \u2014 descriptions of the queries. Pay attention to the restriction m - n \u2264 20 .",
    "output": "Print q lines. The i - th line should contain the answer to the i - th query \u2014 the shortest distance between vertices u_ i and v_ i .",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "1051F"
  },
  {
    "title": "Hyperspace Highways",
    "url": "https://codeforces.com/problemset/problem/1045/C",
    "history": "In an unspecified solar system, there are N planets. A space government company has recently hired space contractors to build M bidirectional HyperspaceTM highways, each connecting two different planets. The primary objective, which was to make sure that every planet can be reached from any other planet taking only HyperspaceTM highways, has been completely fulfilled. Unfortunately, lots of space contractors had friends and cousins in the Space Board of Directors of the company, so the company decided to do much more than just connecting all planets. In order to make spending enormous amounts of space money for HyperspaceTM highways look neccessary, they decided to enforce a strict rule on the HyperspaceTM highway network: whenever there is a way to travel through some planets and return to the starting point without travelling through any planet twice, every pair of planets on the itinerary should be directly connected by a HyperspaceTM highway. In other words, the set of planets in every simple cycle induces a complete subgraph. You are designing a HyperspaceTM navigational app, and the key technical problem you are facing is finding the minimal number of HyperspaceTM highways one needs to use to travel from planet A to planet B . As this problem is too easy for Bubble Cup, here is a harder task: your program needs to do it for Q pairs of planets.",
    "input": "The first line contains three positive integers N ( 1\u2264 N\u2264 100 000 ) , M ( 1\u2264 M\u2264 500 000 ) and Q ( 1\u2264 Q\u2264 200 000 ) , denoting the number of planets, the number of HyperspaceTM highways, and the number of queries, respectively. Each of the following M lines contains a highway: highway i is given by two integers u_ i and v_ i ( 1 \u2264 u_ i < v_ i \u2264 N ) , meaning the planets u_ i and v_ i are connected by a HyperspaceTM highway. It is guaranteed that the network of planets and HyperspaceTM highways forms a simple connected graph. Each of the following Q lines contains a query: query j is given by two integers a_ j and b_ j ( 1 \u2264 a_ j < b_ j \u2264 N ) , meaning we are interested in the minimal number of HyperspaceTM highways one needs to take to travel from planet a_ j to planet b_ j .",
    "output": "Output Q lines: the j - th line of output should contain the minimal number of HyperspaceTM highways one needs to take to travel from planet a_ j to planet b_ j .",
    "note": "The graph from the second sample:",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1045C"
  },
  {
    "title": "Last chance",
    "url": "https://codeforces.com/problemset/problem/1045/A",
    "history": "It is the year 2969. 1000 years have passed from the moon landing. Meanwhile, the humanity colonized the HyperspaceTM and lived in harmony. Until we realized that we were not alone. Not too far away from the Earth, the massive fleet of aliens' spaceships is preparing to attack the Earth. For the first time in a while, the humanity is in real danger. Crisis and panic are everywhere. The scientists from all around the solar system have met and discussed the possible solutions. However, no progress has been made. The Earth' s last hope is YOU! Fortunately, the Earth is equipped with very powerful defense systems made by MDCS. There are N aliens' spaceships which form the line. The defense system consists of three types of weapons: SQL rockets \u2013 every SQL rocket can destroy at most one spaceship in the given set. Cognition beams \u2013 every Cognition beam has an interval [ l, r] and can destroy at most one spaceship in that interval. OMG bazooka \u2013 every OMG bazooka has three possible targets, however, each bazooka can destroy either zero or exactly two spaceships. In addition, due to the smart targeting system, the sets of the three possible targets of any two different OMG bazookas are disjoint ( that means that every ship is targeted with at most one OMG bazooka) . Your task is to make a plan of the attack which will destroy the largest possible number of spaceships. Every destroyed spaceship should be destroyed with exactly one weapon.",
    "input": "The first line contains two integers: the number of your weapons N ( 1\u2264 N\u2264 5000) and the number of spaceships M ( 1\u2264 M\u2264 5000) . In the next N lines, each line starts with one integer that represents type ( either 0, 1 or 2) . If the type is 0, then the weapon is SQL rocket, the rest of the line contains strictly positive number K ( \u2211K\u2264 100 000) and array k_ i ( 1\u2264 k_ i\u2264 M) of K integers. If the type is 1, then the weapon is Cognition beam, the rest of the line contains integers l and r ( 1\u2264 l\u2264 r\u2264 M) . If the type is 2 then the weapon is OMG bazooka, the rest of the line contains distinct numbers a , b and c ( 1 \u2264 a, b, c \u2264 M) .",
    "output": "The first line should contain the maximum number of destroyed spaceships \u2014 X . In the next X lines, every line should contain two numbers A and B , where A is an index of the weapon and B is an index of the spaceship which was destroyed by the weapon A .",
    "note": "SQL rocket can destroy only 4th spaceship. OMG Bazooka can destroy two of 1st, 4th or 5th spaceship, and Cognition beam can destroy any spaceship from the interval [ 1, 4] . The maximum number of destroyed spaceship is 4, and one possible plan is that SQL rocket should destroy 4th spaceship, OMG bazooka should destroy 1st and 5th spaceship and Cognition beam should destroy 2nd spaceship.",
    "topics": [
      "data structures",
      "flows",
      "graph matchings",
      "graphs",
      "trees"
    ],
    "id": "1045A"
  },
  {
    "title": "Leaf Sets",
    "url": "https://codeforces.com/problemset/problem/1042/F",
    "history": "You are given an undirected tree, consisting of n vertices. The vertex is called a leaf if it has exactly one vertex adjacent to it. The distance between some pair of vertices is the number of edges in the shortest path between them. Let' s call some set of leaves beautiful if the maximum distance between any pair of leaves in it is less or equal to k . You want to split all leaves into non- intersecting beautiful sets. What is the minimal number of sets in such a split?",
    "input": "The first line contains two integers n and k ( 3 \u2264 n \u2264 10^ 6 , 1 \u2264 k \u2264 10^ 6 ) \u2014 the number of vertices in the tree and the maximum distance between any pair of leaves in each beautiful set. Each of the next n - 1 lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 n ) \u2014 the description of the i - th edge. It is guaranteed that the given edges form a tree.",
    "output": "Print a single integer \u2014 the minimal number of beautiful sets the split can have.",
    "note": "Here is the graph for the first example:",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1042F"
  },
  {
    "title": "Tree Reconstruction",
    "url": "https://codeforces.com/problemset/problem/1041/E",
    "history": "Monocarp has drawn a tree ( an undirected connected acyclic graph) and then has given each vertex an index. All indices are distinct numbers from 1 to n . For every edge e of this tree, Monocarp has written two numbers: the maximum indices of the vertices of the two components formed if the edge e ( and only this edge) is erased from the tree. Monocarp has given you a list of n - 1 pairs of numbers. He wants you to provide an example of a tree that will produce the said list if this tree exists. If such tree does not exist, say so.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 1 000 ) \u2014 the number of vertices in the tree. Each of the next n- 1 lines contains two integers a_ i and b_ i each ( 1 \u2264 a_ i < b_ i \u2264 n ) \u2014 the maximal indices of vertices in the components formed if the i - th edge is removed.",
    "output": "If there is no such tree that can produce the given list of pairs, print \" NO\" ( without quotes) . Otherwise print \" YES\" ( without quotes) in the first line and the edges of the tree in the next n - 1 lines. Each of the last n - 1 lines should contain two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) \u2014 vertices connected by an edge. Note: The numeration of edges doesn' t matter for this task. Your solution will be considered correct if your tree produces the same pairs as given in the input file ( possibly reordered) . That means that you can print the edges of the tree you reconstructed in any order.",
    "note": "Possible tree from the first example. Dotted lines show edges you need to remove to get appropriate pairs.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy"
    ],
    "id": "1041E"
  },
  {
    "title": "Network Safety",
    "url": "https://codeforces.com/problemset/problem/1039/C",
    "history": "The Metropolis computer network consists of n servers, each has an encryption key in the range from 0 to 2^ k - 1 assigned to it. Let c_ i be the encryption key assigned to the i - th server. Additionally, m pairs of servers are directly connected via a data communication channel. Because of the encryption algorithms specifics, a data communication channel can only be considered safe if the two servers it connects have distinct encryption keys. The initial assignment of encryption keys is guaranteed to keep all data communication channels safe. You have been informed that a new virus is actively spreading across the internet, and it is capable to change the encryption key of any server it infects. More specifically, the virus body contains some unknown number x in the same aforementioned range, and when server i is infected, its encryption key changes from c_ i to c_ i \u2295 x , where \u2295 denotes the bitwise XOR operation. Sadly, you know neither the number x nor which servers of Metropolis are going to be infected by the dangerous virus, so you have decided to count the number of such situations in which all data communication channels remain safe. Formally speaking, you need to find the number of pairs ( A, x) , where A is some ( possibly empty) subset of the set of servers and x is some number in the range from 0 to 2^ k - 1 , such that when all servers from the chosen subset A and none of the others are infected by a virus containing the number x , all data communication channels remain safe. Since this number can be quite big, you are asked to find its remainder modulo 10^ 9 + 7 .",
    "input": "The first line of input contains three integers n , m and k ( 1 \u2264 n \u2264 500 000 , 0 \u2264 m \u2264min( n( n - 1) / 2, 500 000) , 0 \u2264 k \u2264 60 ) \u2014 the number of servers, the number of pairs of servers directly connected by a data communication channel, and the parameter k , which defines the range of possible values for encryption keys. The next line contains n integers c_ i ( 0 \u2264 c_ i \u2264 2^ k - 1 ) , the i - th of which is the encryption key used by the i - th server. The next m lines contain two integers u_ i and v_ i each ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) denoting that those servers are connected by a data communication channel. It is guaranteed that each pair of servers appears in this list at most once.",
    "output": "The only output line should contain a single integer \u2014 the number of safe infections of some subset of servers by a virus with some parameter, modulo 10^ 9 + 7 .",
    "note": "Consider the first example. Possible values for the number x contained by the virus are 0 , 1 , 2 and 3 . For values 0 , 2 and 3 the virus can infect any subset of the set of servers, which gives us 16 pairs for each values. A virus containing the number 1 can infect either all of the servers, or none. This gives us 16 + 2 + 16 + 16 = 50 pairs in total.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "math",
      "sortings"
    ],
    "id": "1039C"
  },
  {
    "title": "Maximum Matching",
    "url": "https://codeforces.com/problemset/problem/1038/E",
    "history": "You are given n blocks, each of them is of the form [ color _ 1 | value| color _ 2 ] , where the block can also be flipped to get [ color _ 2 | value| color _ 1 ] . A sequence of blocks is called valid if the touching endpoints of neighboring blocks have the same color. For example, the sequence of three blocks A, B and C is valid if the left color of the B is the same as the right color of the A and the right color of the B is the same as the left color of C. The value of the sequence is defined as the sum of the values of the blocks in this sequence. Find the maximum possible value of the valid sequence that can be constructed from the subset of the given blocks. The blocks from the subset can be reordered and flipped if necessary. Each block can be used at most once in the sequence.",
    "input": "The first line of input contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of given blocks. Each of the following n lines describes corresponding block and consists of color_ 1, i , value_ i and color_ 2, i ( 1 \u2264color_ 1, i, color_ 2, i\u2264 4 , 1 \u2264value_ i \u2264 100 000 ) .",
    "output": "Print exactly one integer \u2014 the maximum total value of the subset of blocks, which makes a valid sequence.",
    "note": "In the first example, it is possible to form a valid sequence from all blocks. One of the valid sequences is the following: [ 4| 2| 1] [ 1| 32| 2] [ 2| 8| 3] [ 3| 16| 3] [ 3| 4| 4] [ 4| 1| 2] The first block from the input ( [ 2| 1| 4] \u2192 [ 4| 1| 2] ) and second ( [ 1| 2| 4] \u2192 [ 4| 2| 1] ) are flipped. In the second example, the optimal answers can be formed from the first three blocks as in the following ( the second or the third block from the input is flipped) : [ 2| 100000| 1] [ 1| 100000| 1] [ 1| 100000| 2] In the third example, it is not possible to form a valid sequence of two or more blocks, so the answer is a sequence consisting only of the first block since it is the block with the largest value.",
    "topics": [
      "bitmasks",
      "brute force",
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "1038E"
  },
  {
    "title": "Trips",
    "url": "https://codeforces.com/problemset/problem/1037/E",
    "history": "There are n persons who initially don' t know each other. On each morning, two of them, who were not friends before, become friends. We want to plan a trip for every evening of m days. On each trip, you have to select a group of people that will go on the trip. For every person, one of the following should hold: Either this person does not go on the trip, Or at least k of his friends also go on the trip. Note that the friendship is not transitive. That is, if a and b are friends and b and c are friends, it does not necessarily imply that a and c are friends. For each day, find the maximum number of people that can go on the trip on that day.",
    "input": "The first line contains three integers n , m , and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 2 \u00b7 10^ 5 , 1 \u2264 k < n ) \u2014 the number of people, the number of days and the number of friends each person on the trip should have in the group. The i - th ( 1 \u2264 i \u2264 m ) of the next m lines contains two integers x and y ( 1\u2264 x, y\u2264 n , x y ) , meaning that persons x and y become friends on the morning of day i . It is guaranteed that x and y were not friends before.",
    "output": "Print exactly m lines, where the i - th of them ( 1\u2264 i\u2264 m ) contains the maximum number of people that can go on the trip on the evening of the day i .",
    "note": "In the first example, 1, 2, 3 can go on day 3 and 4 . In the second example, 2, 4, 5 can go on day 4 and 5 . 1, 2, 4, 5 can go on day 6 and 7 . 1, 2, 3, 4, 5 can go on day 8 . In the third example, 1, 2, 5 can go on day 5 . 1, 2, 3, 5 can go on day 6 and 7 .",
    "topics": [
      "graphs"
    ],
    "id": "1037E"
  },
  {
    "title": "Valid BFS?",
    "url": "https://codeforces.com/problemset/problem/1037/D",
    "history": "The BFS algorithm is defined as follows. Consider an undirected graph with vertices numbered from 1 to n . Initialize q as a new queue containing only vertex 1 , mark the vertex 1 as used. Extract a vertex v from the head of the queue q . Print the index of vertex v . Iterate in arbitrary order through all such vertices u that u is a neighbor of v and is not marked yet as used. Mark the vertex u as used and insert it into the tail of the queue q . If the queue is not empty, continue from step 2. Otherwise finish. Since the order of choosing neighbors of each vertex can vary, it turns out that there may be multiple sequences which BFS can print. In this problem you need to check whether a given sequence corresponds to some valid BFS traversal of the given tree starting from vertex 1 . The tree is an undirected graph, such that there is exactly one simple path between any two vertices.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) which denotes the number of nodes in the tree. The following n - 1 lines describe the edges of the tree. Each of them contains two integers x and y ( 1 \u2264 x, y \u2264 n ) \u2014 the endpoints of the corresponding edge of the tree. It is guaranteed that the given graph is a tree. The last line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the sequence to check.",
    "output": "Print \" Yes\" ( quotes for clarity) if the sequence corresponds to some valid BFS traversal of the given tree and \" No\" ( quotes for clarity) otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "Both sample tests have the same tree in them. In this tree, there are two valid BFS orderings: 1, 2, 3, 4 , 1, 3, 2, 4 . The ordering 1, 2, 4, 3 doesn' t correspond to any valid BFS order.",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "1037D"
  },
  {
    "title": "Hidden Bipartite Graph",
    "url": "https://codeforces.com/problemset/problem/1033/E",
    "history": "Bob has a simple undirected connected graph ( without self- loops and multiple edges) . He wants to learn whether his graph is bipartite ( that is, you can paint all vertices of the graph into two colors so that there is no edge connecting two vertices of the same color) or not. As he is not very good at programming, he asked Alice for help. He does not want to disclose his graph to Alice, but he agreed that Alice can ask him some questions about the graph. The only question that Alice can ask is the following: she sends s \u2014 a subset of vertices of the original graph. Bob answers with the number of edges that have both endpoints in s . Since he doesn' t want Alice to learn too much about the graph, he allows her to ask no more than 20000 questions. Furthermore, he suspects that Alice might introduce false messages to their communication channel, so when Alice finally tells him whether the graph is bipartite or not, she also needs to provide a proof \u2014 either the partitions themselves or a cycle of odd length. Your task is to help Alice to construct the queries, find whether the graph is bipartite. InteractionFirst, read an integer n ( 1\u2264 n\u2264 600 ) \u2014 the number of vertices in Bob' s graph. To make a query, print two lines. First of which should be in the format \" ? k\" ( 1 \u2264 k \u2264 n ) , where k is the size of the set to be queried. The second line should contain k space separated distinct integers s_ 1, s_ 2, . . . , s_ k ( 1 \u2264 s_ i \u2264 n ) \u2014 the vertices of the queried set. After each query read a single integer m ( 0 \u2264 m \u2264n( n- 1) / 2 ) \u2014 the number of edges between the vertices of the set { s_ i} . You are not allowed to ask more than 20000 queries. If m = - 1 , it means that you asked more queries than allowed, or asked an invalid query. Your program should immediately terminate ( for example, by calling exit( 0) ) . You will receive Wrong Answer; it means that you asked more queries than allowed, or asked an invalid query. If you ignore this, you can get other verdicts since your program will continue to read from a closed stream. After printing a query do not forget to print end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. When you know the answer, you need to print it. The format of the answer depends on whether the graph is bipartite or not. If the graph is bipartite, print two lines. The first should contain the letter \" Y\" ( short for \" YES\" ) followed by a space, and then a single integer s ( 0 \u2264 s \u2264 n ) \u2014 the number of vertices in one of the partitions. Second line should contain s integers a_ 1, a_ 2, . . . , a_ s \u2014 vertices belonging to the first partition. All a_ i must be distinct, and all edges in the main graph must have exactly one endpoint in the set { a_ i} . If the graph is not bipartite, print two lines. The first should contain the letter \" N\" ( short for \" NO\" ) followed by a space, and then a single integer l ( 3 \u2264 l \u2264 n ) \u2014 the length of one simple cycle of odd length. Second line should contain l integers c_ 1, c_ 2, . . . , c_ l \u2014 the vertices along the cycle. It must hold that for all 1 \u2264 i \u2264 l , there is an edge { c_ i, c_ ( i l) + 1} in the main graph, and all c_ i are distinct. If there are multiple possible answers, you may print any of them. Hacks format For hacks, use the following format: The first line contains two integers n and m ( 1 \u2264 n \u2264 600, 0 \u2264 m \u2264n( n- 1) / 2) \u2014 the number of vertices and edges of the graph, respectively. Each of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n) mean that there is an edge between u_ i and v_ i . There must not be any multiple edges, no loops, and the graph must be connected. For example, you need to use this test to get the first sample: 4 44 11 33 22 4",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 600 ) \u2014 the number of vertices in Bob' s graph.",
    "output": "",
    "note": "In the first case, Alice learns that there are 4 edges in the whole graph. Over the course of the next three queries, she learns that vertex 1 has two neighbors: 3 and 4 . She then learns that while vertex 2 is adjacent to 4 , the vertex 3 isn' t adjacent to 4 . There is only one option for the remaining edge, and that is ( 2, 3) . This means that the graph is a cycle on four vertices, with ( 1, 2) being one partition and ( 3, 4) being the second. Here, it would be also valid to output \" 3 4\" on the second line. In the second case, we also have a graph on four vertices and four edges. In the second query, Alice learns that there are three edges among vertices ( 1, 2, 4) . The only way this could possibly happen is that those form a triangle. As the triangle is not bipartite, Alice can report it as a proof. Notice that she does not learn where the fourth edge is, but she is able to answer Bob correctly anyway.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "interactive"
    ],
    "id": "1033E"
  },
  {
    "title": "King Escape",
    "url": "https://codeforces.com/problemset/problem/1033/A",
    "history": "Alice and Bob are playing chess on a huge chessboard with dimensions n \u00d7 n . Alice has a single piece left \u2014 a queen, located at ( a_ x, a_ y) , while Bob has only the king standing at ( b_ x, b_ y) . Alice thinks that as her queen is dominating the chessboard, victory is hers. But Bob has made a devious plan to seize the victory for himself \u2014 he needs to march his king to ( c_ x, c_ y) in order to claim the victory for himself. As Alice is distracted by her sense of superiority, she no longer moves any pieces around, and it is only Bob who makes any turns. Bob will win if he can move his king from ( b_ x, b_ y) to ( c_ x, c_ y) without ever getting in check. Remember that a king can move to any of the 8 adjacent squares. A king is in check if it is on the same rank ( i. e. row) , file ( i. e. column) , or diagonal as the enemy queen. Find whether Bob can win or not.",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 1000 ) \u2014 the dimensions of the chessboard. The second line contains two integers a_ x and a_ y ( 1 \u2264 a_ x, a_ y \u2264 n ) \u2014 the coordinates of Alice' s queen. The third line contains two integers b_ x and b_ y ( 1 \u2264 b_ x, b_ y \u2264 n ) \u2014 the coordinates of Bob' s king. The fourth line contains two integers c_ x and c_ y ( 1 \u2264 c_ x, c_ y \u2264 n ) \u2014 the coordinates of the location that Bob wants to get to. It is guaranteed that Bob' s king is currently not in check and the target location is not in check either. Furthermore, the king is not located on the same square as the queen ( i. e. a_ x = \u0338 b_ x or a_ y = \u0338 b_ y ) , and the target does coincide neither with the queen' s position ( i. e. c_ x = \u0338 a_ x or c_ y = \u0338 a_ y ) nor with the king' s position ( i. e. c_ x = \u0338 b_ x or c_ y = \u0338 b_ y ) .",
    "output": "Print \" YES\" ( without quotes) if Bob can get from ( b_ x, b_ y) to ( c_ x, c_ y) without ever getting in check, otherwise print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the diagrams below, the squares controlled by the black queen are marked red, and the target square is marked blue. In the first case, the king can move, for instance, via the squares ( 2, 3) and ( 3, 2) . Note that the direct route through ( 2, 2) goes through check. In the second case, the queen watches the fourth rank, and the king has no means of crossing it. In the third case, the queen watches the third file.",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "1033A"
  },
  {
    "title": "Familiar Operations",
    "url": "https://codeforces.com/problemset/problem/1031/F",
    "history": "You are given two positive integers a and b . There are two possible operations: multiply one of the numbers by some prime p ; divide one of the numbers on its prime factor p . What is the minimum number of operations required to obtain two integers having the same number of divisors? You are given several such pairs, you need to find the answer for each of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of pairs of integers for which you are to find the answer. Each of the next t lines contain two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 6 ) .",
    "output": "Output t lines \u2014 the i - th of them should contain the answer for the pair a_ i , b_ i .",
    "note": "These are the numbers with equal number of divisors, which are optimal to obtain in the sample test case: ( 27, 10) , 4 divisors ( 100, 1156) , 9 divisors ( 220, 140) , 12 divisors ( 17, 19) , 2 divisors ( 12, 18) , 6 divisors ( 50, 32) , 6 divisors ( 224, 1925) , 12 divisors Note that there can be several optimal pairs of numbers.",
    "topics": [
      "brute force",
      "graphs",
      "math"
    ],
    "id": "1031F"
  },
  {
    "title": "Tree with Small Distances",
    "url": "https://codeforces.com/problemset/problem/1029/E",
    "history": "You are given an undirected tree consisting of n vertices. An undirected tree is a connected undirected graph with n - 1 edges. Your task is to add the minimum number of edges in such a way that the length of the shortest path from the vertex 1 to any other vertex is at most 2 . Note that you are not allowed to add loops and multiple edges.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The following n - 1 lines contain edges: edge i is given as a pair of vertices u_ i, v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) . It is guaranteed that the given edges form a tree. It is guaranteed that there are no loops and multiple edges in the given edges.",
    "output": "Print a single integer \u2014 the minimum number of edges you have to add in order to make the shortest distance from the vertex 1 to any other vertex at most 2 . Note that you are not allowed to add loops and multiple edges.",
    "note": "The tree corresponding to the first example: The answer is 2 , some of the possible answers are the following: [ ( 1, 5) , ( 1, 6) ] , [ ( 1, 4) , ( 1, 7) ] , [ ( 1, 6) , ( 1, 7) ] . The tree corresponding to the second example: The answer is 0 . The tree corresponding to the third example: The answer is 1 , only one possible way to reach it is to add the edge ( 1, 3) .",
    "topics": [
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1029E"
  },
  {
    "title": "Session in BSU",
    "url": "https://codeforces.com/problemset/problem/1027/F",
    "history": "Polycarp studies in Berland State University. Soon he will have to take his exam. He has to pass exactly n exams. For the each exam i there are known two days: a_ i \u2014 day of the first opportunity to pass the exam, b_ i \u2014 day of the second opportunity to pass the exam ( a_ i < b_ i ) . Polycarp can pass at most one exam during each day. For each exam Polycarp chooses by himself which day he will pass this exam. He has to pass all the n exams. Polycarp wants to pass all the exams as soon as possible. Print the minimum index of day by which Polycarp can pass all the n exams, or print - 1 if he cannot pass all the exams at all.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of exams. The next n lines contain two integers each: a_ i and b_ i ( 1 \u2264 a_ i < b_ i \u2264 10^ 9 ) , where a_ i is the number of day of the first passing the i - th exam and b_ i is the number of day of the second passing the i - th exam.",
    "output": "If Polycarp cannot pass all the n exams, print - 1. Otherwise print the minimum index of day by which Polycarp can do that.",
    "note": "",
    "topics": [
      "binary search",
      "dfs and similar",
      "dsu",
      "graph matchings",
      "graphs"
    ],
    "id": "1027F"
  },
  {
    "title": "Mouse Hunt",
    "url": "https://codeforces.com/problemset/problem/1027/D",
    "history": "Medicine faculty of Berland State University has just finished their admission campaign. As usual, about 80% of applicants are girls and majority of them are going to live in the university dormitory for the next 4 ( hopefully) years. The dormitory consists of n rooms and a single mouse! Girls decided to set mouse traps in some rooms to get rid of the horrible monster. Setting a trap in room number i costs c_ i burles. Rooms are numbered from 1 to n . Mouse doesn' t sit in place all the time, it constantly runs. If it is in room i in second t then it will run to room a_ i in second t + 1 without visiting any other rooms inbetween ( i = a_ i means that mouse won' t leave room i ) . It' s second 0 in the start. If the mouse is in some room with a mouse trap in it, then the mouse get caught into this trap. That would have been so easy if the girls actually knew where the mouse at. Unfortunately, that' s not the case, mouse can be in any room from 1 to n at second 0 . What it the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from?",
    "input": "The first line contains as single integers n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rooms in the dormitory. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 4 ) \u2014 c_ i is the cost of setting the trap in room number i . The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 a_ i is the room the mouse will run to the next second after being in room i .",
    "output": "Print a single integer \u2014 the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.",
    "note": "In the first example it is enough to set mouse trap in rooms 1 and 4 . If mouse starts in room 1 then it gets caught immideately. If mouse starts in any other room then it eventually comes to room 4 . In the second example it is enough to set mouse trap in room 2 . If mouse starts in room 2 then it gets caught immideately. If mouse starts in any other room then it runs to room 2 in second 1 . Here are the paths of the mouse from different starts from the third example: 1 \u2192 2 \u2192 2 \u2192. . . ; 2 \u2192 2 \u2192. . . ; 3 \u2192 2 \u2192 2 \u2192. . . ; 4 \u2192 3 \u2192 2 \u2192 2 \u2192. . . ; 5 \u2192 6 \u2192 7 \u2192 6 \u2192. . . ; 6 \u2192 7 \u2192 6 \u2192. . . ; 7 \u2192 6 \u2192 7 \u2192. . . ; So it' s enough to set traps in rooms 2 and 6 .",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "1027D"
  },
  {
    "title": "Mobile Phone Network",
    "url": "https://codeforces.com/problemset/problem/1023/F",
    "history": "You are managing a mobile phone network, and want to offer competitive prices to connect a network. The network has n nodes. Your competitor has already offered some connections between some nodes, with some fixed prices. These connections are bidirectional. There are initially m connections the competitor is offering. The i - th connection your competitor is offering will connect nodes fa_ i and fb_ i and costs fw_ i . You have a list of k connections that you want to offer. It is guaranteed that this set of connection does not form any cycle. The j - th of these connections will connect nodes ga_ j and gb_ j . These connections are also bidirectional. The cost of these connections have not been decided yet. You can set the prices of these connections to any arbitrary integer value. These prices are set independently for each connection. After setting the prices, the customer will choose such n - 1 connections that all nodes are connected in a single network and the total cost of chosen connections is minimum possible. If there are multiple ways to choose such networks, the customer will choose an arbitrary one that also maximizes the number of your connections in it. You want to set prices in such a way such that all your k connections are chosen by the customer, and the sum of prices of your connections is maximized. Print the maximum profit you can achieve, or - 1 if it is unbounded.",
    "input": "The first line of input will contain three integers n , k and m ( 1 \u2264 n, k, m \u2264 5 \u00b7 10^ 5, k \u2264 n- 1 ) , the number of nodes, the number of your connections, and the number of competitor connections, respectively. The next k lines contain two integers ga_ i and gb_ i ( 1 \u2264 ga_ i, gb_ i \u2264 n , ga_ i = \u0338 gb_ i ) , representing one of your connections between nodes ga_ i and gb_ i . Your set of connections is guaranteed to be acyclic. The next m lines contain three integers each, fa_ i , fb_ i and fw_ i ( 1 \u2264 fa_ i, fb_ i \u2264 n , fa_ i = \u0338 fb_ i , 1 \u2264 fw_ i \u2264 10^ 9 ) , denoting one of your competitor' s connections between nodes fa_ i and fb_ i with cost fw_ i . None of these connections connects a node to itself, and no pair of these connections connect the same pair of nodes. In addition, these connections are given by non- decreasing order of cost ( that is, fw_ i- 1\u2264 fw_ i for all valid i ) . Note that there may be some connections that appear in both your set and your competitor' s set ( though no connection will appear twice in one of this sets) . It is guaranteed that the union of all of your connections and your competitor' s connections form a connected network.",
    "output": "Print a single integer, the maximum possible profit you can achieve if you set the prices on your connections appropriately. If the profit is unbounded, print - 1 .",
    "note": "In the first sample, it' s optimal to give connection 1- 3 cost 3 , connection 1- 2 cost 3 , and connection 3- 4 cost 8 . In this case, the cheapest connected network has cost 14 , and the customer will choose one that chooses all of your connections. In the second sample, as long as your first connection costs 30 or less, the customer chooses both your connections no matter what is the cost of the second connection, so you can get unbounded profit in this case.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "1023F"
  },
  {
    "title": "Badge",
    "url": "https://codeforces.com/problemset/problem/1020/B",
    "history": "In Summer Informatics School, if a student doesn' t behave well, teachers make a hole in his badge. And today one of the teachers caught a group of n students doing yet another trick. Let' s assume that all these students are numbered from 1 to n . The teacher came to student a and put a hole in his badge. The student, however, claimed that the main culprit is some other student p_ a . After that, the teacher came to student p_ a and made a hole in his badge as well. The student in reply said that the main culprit was student p_ p_ a . This process went on for a while, but, since the number of students was finite, eventually the teacher came to the student, who already had a hole in his badge. After that, the teacher put a second hole in the student' s badge and decided that he is done with this process, and went to the sauna. You don' t know the first student who was caught by the teacher. However, you know all the numbers p_ i . Your task is to find out for every student a , who would be the student with two holes in the badge if the first caught student was a .",
    "input": "The first line of the input contains the only integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of the naughty students. The second line contains n integers p_ 1 , . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) , where p_ i indicates the student who was reported to the teacher by student i .",
    "output": "For every student a from 1 to n print which student would receive two holes in the badge, if a was the first student caught by the teacher.",
    "note": "The picture corresponds to the first example test case. When a = 1 , the teacher comes to students 1 , 2 , 3 , 2 , in this order, and the student 2 is the one who receives a second hole in his badge. When a = 2 , the teacher comes to students 2 , 3 , 2 , and the student 2 gets a second hole in his badge. When a = 3 , the teacher will visit students 3 , 2 , 3 with student 3 getting a second hole in his badge. For the second example test case it' s clear that no matter with whom the teacher starts, that student would be the one who gets the second hole in his badge.",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs"
    ],
    "id": "1020B"
  },
  {
    "title": "Sergey's problem",
    "url": "https://codeforces.com/problemset/problem/1019/C",
    "history": "Sergey just turned five years old! When he was one year old, his parents gave him a number; when he was two years old, his parents gave him an array of integers. On his third birthday he received a string. When he was four, his mother woke him up in a quiet voice, wished him to be a good boy and gave him a rooted tree. Today he celebrates his birthday again! He found a directed graph without loops as a present from his parents. Since Sergey is a very curious boy, he immediately came up with a thing to do. He decided to find a set Q of vertices in this graph, such that no two vertices x, y \u2208 Q are connected by an edge, and it is possible to reach any vertex z \u2208\u0338 Q from some vertex of Q in no more than two moves. After a little thought, Sergey was able to solve this task. Can you solve it too? A vertex y is reachable from a vertex x in at most two moves if either there is a directed edge ( x, y) , or there exist two directed edges ( x, z) and ( z, y) for some vertex z .",
    "input": "The first line of input contains two positive integers n and m ( 1 \u2264 n \u2264 1 000 000 , 1 \u2264 m \u2264 1 000 000 ) \u2014 the number of vertices and the number of edges in the directed graph. Each of the following m lines describes a corresponding edge. Each one contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i b_ i ) \u2014 the beginning and the end of the i - th edge. The graph may contain multiple edges between the same pair of vertices.",
    "output": "First print the number k \u2014 the number of selected vertices. Then print k distinct integers \u2014 the indices of the selected vertices. If multiple answers exist you can output any of them. In particular, you don' t have to minimize the number of vertices in the set. It is guaranteed, that there is always at least one valid set.",
    "note": "In the first sample, the vertices 1, 3, 4, 5 are not connected. The vertex 2 is reachable from vertex 1 by one edge. In the second sample, it is possible to reach the vertex 1 in one move and the vertex 2 in two moves. The following pictures illustrate sample tests and their answers.",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1019C"
  },
  {
    "title": "Chemical table",
    "url": "https://codeforces.com/problemset/problem/1012/B",
    "history": "Innopolis University scientists continue to investigate the periodic table. There are n\u00b7m known elements and they form a periodic table: a rectangle with n rows and m columns. Each element can be described by its coordinates ( r, c) ( 1 \u2264 r \u2264 n, 1 \u2264 c \u2264 m) in the table. Recently scientists discovered that for every four different elements in this table that form a rectangle with sides parallel to the sides of the table, if they have samples of three of the four elements, they can produce a sample of the fourth element using nuclear fusion. So if we have elements in positions ( r1, c1) , ( r1, c2) , ( r2, c1) , where r1 = \u0338 r2 and c1 = \u0338 c2, then we can produce element ( r2, c2) . Samples used in fusion are not wasted and can be used again in future fusions. Newly crafted elements also can be used in future fusions. Innopolis University scientists already have samples of q elements. They want to obtain samples of all n\u00b7m elements. To achieve that, they will purchase some samples from other laboratories and then produce all remaining elements using an arbitrary number of nuclear fusions in some order. Help them to find the minimal number of elements they need to purchase.",
    "input": "The first line contains three integers n, m, q ( 1 \u2264 n, m \u2264 200 000; 0 \u2264 q \u2264 min( n\u00b7m, 200 000) ) , the chemical table dimensions and the number of elements scientists already have. The following q lines contain two integers ri, ci ( 1 \u2264 ri \u2264 n, 1 \u2264 ci \u2264 m) , each describes an element that scientists already have. All elements in the input are different.",
    "output": "Print the minimal number of elements to be purchased.",
    "note": "For each example you have a picture which illustrates it. The first picture for each example describes the initial set of element samples available. Black crosses represent elements available in the lab initially. The second picture describes how remaining samples can be obtained. Red dashed circles denote elements that should be purchased from other labs ( the optimal solution should minimize the number of red circles) . Blue dashed circles are elements that can be produced with nuclear fusion. They are numbered in order in which they can be produced. Test 1We can use nuclear fusion and get the element from three other samples, so we don' t need to purchase anything. Test 2We cannot use any nuclear fusion at all as there is only one row, so we have to purchase all missing elements. Test 3There are several possible solutions. One of them is illustrated below. Note that after purchasing one element marked as red it' s still not possible to immidiately produce the middle element in the bottom row ( marked as 4) . So we produce the element in the left- top corner first ( marked as 1) , and then use it in future fusions.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "matrices"
    ],
    "id": "1012B"
  },
  {
    "title": "Tree",
    "url": "https://codeforces.com/problemset/problem/1010/F",
    "history": "The Main Martian Tree grows on Mars. It is a binary tree ( a rooted tree, with no more than two sons at each vertex) with n vertices, where the root vertex has the number 1 . Its fruits are the Main Martian Fruits. It' s summer now, so this tree does not have any fruit yet. Autumn is coming soon, and leaves and branches will begin to fall off the tree. It is clear, that if a vertex falls off the tree, then its entire subtree will fall off too. In addition, the root will remain on the tree. Formally: the tree will have some connected subset of vertices containing the root. After that, the fruits will grow on the tree ( only at those vertices which remain) . Exactly x fruits will grow in the root. The number of fruits in each remaining vertex will be not less than the sum of the numbers of fruits in the remaining sons of this vertex. It is allowed, that some vertices will not have any fruits. Natasha wondered how many tree configurations can be after the described changes. Since this number can be very large, output it modulo 998244353 . Two configurations of the resulting tree are considered different if one of these two conditions is true: they have different subsets of remaining vertices; they have the same subset of remaining vertices, but there is a vertex in this subset where they have a different amount of fruits.",
    "input": "The first line contains two integers: n and x ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 x \u2264 10^ 18 ) \u2014 the size of the tree and the number of fruits in the root. The i - th of the following ( n- 1) lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) \u2014 vertices connected by the i - th edge of the tree. It is guaranteed that the input data describes a correct binary tree with the root at the vertex 1 .",
    "output": "Print one number \u2014 the number of configurations of the resulting tree modulo 998244353 .",
    "note": "Consider the first example. There are 2 fruits at the vertex 1 . The following 13 options are possible: there is no vertex 2 , there is no vertex 3 ; there is no vertex 2 , there are no fruits at the vertex 3 ; there is no vertex 2 , there is 1 fruit at the vertex 3 ; there is no vertex 2 , there are 2 fruits at the vertex 3 ; there are no fruits at the vertex 2 , there is no vertex 3 ; there are no fruits at the vertex 2 , there are no fruits at the vertex 3 ; there are no fruits at the vertex 2 , there is 1 fruit at the vertex 3 ; there are no fruits at the vertex 2 , there are 2 fruits at the vertex 3 ; there is 1 fruit at the vertex 2 , there is no vertex 3 ; there is 1 fruit at the vertex 2 , there are no fruits at the vertex 3 ; there is 1 fruit at the vertex 2 , there is 1 fruit at the vertex 3 ; there are 2 fruits at the vertex 2 , there is no vertex 3 ; there are 2 fruits at the vertex 2 , there are no fruits at the vertex 3 . Consider the second example. There are 5 fruits at the vertex 1 . The following 7 options are possible: there is no vertex 2 ; there are no fruits at the vertex 2 ; there is 1 fruit at the vertex 2 ; there are 2 fruits at the vertex 2 ; there are 3 fruits at the vertex 2 ; there are 4 fruits at the vertex 2 ; there are 5 fruits at the vertex 2 .",
    "topics": [
      "fft",
      "graphs",
      "trees"
    ],
    "id": "1010F"
  },
  {
    "title": "Mars rover",
    "url": "https://codeforces.com/problemset/problem/1010/D",
    "history": "Natasha travels around Mars in the Mars rover. But suddenly it broke down, namely \u2014 the logical scheme inside it. The scheme is an undirected tree ( connected acyclic graph) with a root in the vertex 1 , in which every leaf ( excluding root) is an input, and all other vertices are logical elements, including the root, which is output. One bit is fed to each input. One bit is returned at the output. There are four types of logical elements: AND ( 2 inputs) , OR ( 2 inputs) , XOR ( 2 inputs) , NOT ( 1 input) . Logical elements take values from their direct descendants ( inputs) and return the result of the function they perform. Natasha knows the logical scheme of the Mars rover, as well as the fact that only one input is broken. In order to fix the Mars rover, she needs to change the value on this input. For each input, determine what the output will be if Natasha changes this input.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 6 ) \u2014 the number of vertices in the graph ( both inputs and elements) . The i - th of the next n lines contains a description of i - th vertex: the first word \" AND\" , \" OR\" , \" XOR\" , \" NOT\" or \" IN\" ( means the input of the scheme) is the vertex type. If this vertex is \" IN\" , then the value of this input follows ( 0 or 1 ) , otherwise follow the indices of input vertices of this element: \" AND\" , \" OR\" , \" XOR\" have 2 inputs, whereas \" NOT\" has 1 input. The vertices are numbered from one. It is guaranteed that input data contains a correct logical scheme with an output produced by the vertex 1 .",
    "output": "Print a string of characters ' 0' and ' 1' ( without quotes) \u2014 answers to the problem for each input in the ascending order of their vertex indices.",
    "note": "The original scheme from the example ( before the input is changed) : Green indicates bits ' 1' , yellow indicates bits ' 0' . If Natasha changes the input bit 2 to 0 , then the output will be 1 . If Natasha changes the input bit 3 to 0 , then the output will be 0 . If Natasha changes the input bit 6 to 1 , then the output will be 1 . If Natasha changes the input bit 8 to 0 , then the output will be 1 . If Natasha changes the input bit 9 to 0 , then the output will be 0 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "1010D"
  },
  {
    "title": "Allowed Letters",
    "url": "https://codeforces.com/problemset/problem/1009/G",
    "history": "Polycarp has just launched his new startup idea. The niche is pretty free and the key vector of development sounds really promising, so he easily found himself some investors ready to sponsor the company. However, he is yet to name the startup! Actually, Polycarp has already came up with the name but some improvement to it will never hurt. So now he wants to swap letters at some positions in it to obtain the better name. It isn' t necessary for letters to be adjacent. In addition, each of the investors has chosen some index in the name and selected a set of letters that can go there. Indices chosen by different investors are pairwise distinct. If some indices aren' t chosen by any investor then any letter can go there. Finally, Polycarp is sure that the smallest lexicographically name is the best. ( Like why do you think Google decided to become Alphabet? ) More formally, you are given a string consisting of lowercase Latin letters from \" a\" to \" f\" . You can swap letters at any positions arbitrary number of times ( zero swaps is also possible) . What is the smallest lexicographically name you can obtain such that the letter at every position is among the allowed letters? If Polycarp can' t produce any valid name then print \" Impossible\" .",
    "input": "The first line is the string s ( 1 \u2264 | s| \u2264 10^ 5 ) \u2014 the name Polycarp has came up with. The string consists only of lowercase Latin letters from \" a\" to \" f\" . The second line contains a single integer m ( 0 \u2264 m \u2264 | s| ) \u2014 the number of investors. The i - th of the next m lines contain an integer number pos_ i and a non- empty string of allowed characters for pos_ i ( 1 \u2264 pos_ i \u2264 | s| ) . Each string contains pairwise distinct letters from \" a\" to \" f\" . pos_ 1, pos_ 2, . . . , pos_ m are pairwise distinct. If any position of the string doesn' t appear in the investors demands then any letter can go in this position.",
    "output": "If Polycarp can' t produce any valid name then print \" Impossible\" . Otherwise print the smallest lexicographically name Polycarp can obtain by swapping letters in string s such that the letter at every position is among the allowed ones.",
    "note": "",
    "topics": [
      "bitmasks",
      "flows",
      "graph matchings",
      "graphs",
      "greedy"
    ],
    "id": "1009G"
  },
  {
    "title": "Relatively Prime Graph",
    "url": "https://codeforces.com/problemset/problem/1009/D",
    "history": "Let' s call an undirected graph G = ( V, E) relatively prime if and only if for each edge ( v, u) \u2208 E GCD( v, u) = 1 ( the greatest common divisor of v and u is 1 ) . If there is no edge between some pair of vertices v and u then the value of GCD( v, u) doesn' t matter. The vertices are numbered from 1 to | V| . Construct a relatively prime graph with n vertices and m edges such that it is connected and it contains neither self- loops nor multiple edges. If there exists no valid graph with the given number of vertices and edges then output \" Impossible\" . If there are multiple answers then print any of them.",
    "input": "The only line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of vertices and the number of edges.",
    "output": "If there exists no valid graph with the given number of vertices and edges then output \" Impossible\" . Otherwise print the answer in the following format: The first line should contain the word \" Possible\" . The i - th of the next m lines should contain the i - th edge ( v_ i, u_ i) of the resulting graph ( 1 \u2264 v_ i, u_ i \u2264 n, v_ i = \u0338 u_ i ) . For each pair ( v, u) there can be no more pairs ( v, u) or ( u, v) . The vertices are numbered from 1 to n . If there are multiple answers then print any of them.",
    "note": "Here is the representation of the graph from the first example:",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1009D"
  },
  {
    "title": "Military Problem",
    "url": "https://codeforces.com/problemset/problem/1006/E",
    "history": "In this problem you will have to help Berland army with organizing their command delivery system. There are n officers in Berland army. The first officer is the commander of the army, and he does not have any superiors. Every other officer has exactly one direct superior. If officer a is the direct superior of officer b , then we also can say that officer b is a direct subordinate of officer a . Officer x is considered to be a subordinate ( direct or indirect) of officer y if one of the following conditions holds: officer y is the direct superior of officer x ; the direct superior of officer x is a subordinate of officer y . For example, on the picture below the subordinates of the officer 3 are: 5, 6, 7, 8, 9 . The structure of Berland army is organized in such a way that every officer, except for the commander, is a subordinate of the commander of the army. Formally, let' s represent Berland army as a tree consisting of n vertices, in which vertex u corresponds to officer u . The parent of vertex u corresponds to the direct superior of officer u . The root ( which has index 1 ) corresponds to the commander of the army. Berland War Ministry has ordered you to give answers on q queries, the i - th query is given as ( u_ i, k_ i) , where u_ i is some officer, and k_ i is a positive integer. To process the i - th query imagine how a command from u_ i spreads to the subordinates of u_ i . Typical DFS ( depth first search) algorithm is used here. Suppose the current officer is a and he spreads a command. Officer a chooses b \u2014 one of his direct subordinates ( i. e. a child in the tree) who has not received this command yet. If there are many such direct subordinates, then a chooses the one having minimal index. Officer a gives a command to officer b . Afterwards, b uses exactly the same algorithm to spread the command to its subtree. After b finishes spreading the command, officer a chooses the next direct subordinate again ( using the same strategy) . When officer a cannot choose any direct subordinate who still hasn' t received this command, officer a finishes spreading the command. Let' s look at the following example: If officer 1 spreads a command, officers receive it in the following order: [ 1, 2, 3, 5 , 6, 8, 7, 9, 4] . If officer 3 spreads a command, officers receive it in the following order: [ 3, 5, 6, 8, 7, 9] . If officer 7 spreads a command, officers receive it in the following order: [ 7, 9] . If officer 9 spreads a command, officers receive it in the following order: [ 9] . To answer the i - th query ( u_ i, k_ i) , construct a sequence which describes the order in which officers will receive the command if the u_ i - th officer spreads it. Return the k_ i - th element of the constructed list or - 1 if there are fewer than k_ i elements in it. You should process queries independently. A query doesn' t affect the following queries.",
    "input": "The first line of the input contains two integers n and q ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of officers in Berland army and the number of queries. The second line of the input contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) , where p_ i is the index of the direct superior of the officer having the index i . The commander has index 1 and doesn' t have any superiors. The next q lines describe the queries. The i - th query is given as a pair ( u_ i, k_ i ) ( 1 \u2264 u_ i, k_ i \u2264 n ) , where u_ i is the index of the officer which starts spreading a command, and k_ i is the index of the required officer in the command spreading sequence.",
    "output": "Print q numbers, where the i - th number is the officer at the position k_ i in the list which describes the order in which officers will receive the command if it starts spreading from officer u_ i . Print \" - 1\" if the number of officers which receive the command is less than k_ i . You should process queries independently. They do not affect each other.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1006E"
  },
  {
    "title": "Berland and the Shortest Paths",
    "url": "https://codeforces.com/problemset/problem/1005/F",
    "history": "There are n cities in Berland. Some pairs of cities are connected by roads. All roads are bidirectional. Each road connects two different cities. There is at most one road between a pair of cities. The cities are numbered from 1 to n . It is known that, from the capital ( the city with the number 1 ) , you can reach any other city by moving along the roads. The President of Berland plans to improve the country' s road network. The budget is enough to repair exactly n- 1 roads. The President plans to choose a set of n- 1 roads such that: it is possible to travel from the capital to any other city along the n- 1 chosen roads, if d_ i is the number of roads needed to travel from the capital to city i , moving only along the n- 1 chosen roads, then d_ 1 + d_ 2 + . . . + d_ n is minimized ( i. e. as minimal as possible) . In other words, the set of n- 1 roads should preserve the connectivity of the country, and the sum of distances from city 1 to all cities should be minimized ( where you can only use the n- 1 chosen roads) . The president instructed the ministry to prepare k possible options to choose n- 1 roads so that both conditions above are met. Write a program that will find k possible ways to choose roads for repair. If there are fewer than k ways, then the program should output all possible valid ways to choose roads.",
    "input": "The first line of the input contains integers n , m and k ( 2 \u2264 n \u2264 2\u00b710^ 5, n- 1 \u2264 m \u2264 2\u00b710^ 5, 1 \u2264 k \u2264 2\u00b710^ 5 ) , where n is the number of cities in the country, m is the number of roads and k is the number of options to choose a set of roads for repair. It is guaranteed that m \u00b7 k \u2264 10^ 6 . The following m lines describe the roads, one road per line. Each line contains two integers a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i b_ i ) \u2014 the numbers of the cities that the i - th road connects. There is at most one road between a pair of cities. The given set of roads is such that you can reach any city from the capital.",
    "output": "Print t ( 1 \u2264 t \u2264 k ) \u2014 the number of ways to choose a set of roads for repair. Recall that you need to find k different options; if there are fewer than k of them, then you need to find all possible different valid options. In the following t lines, print the options, one per line. Print an option as a string of m characters where the j - th character is equal to ' 1' if the j - th road is included in the option, and is equal to ' 0' if the road is not included. The roads should be numbered according to their order in the input. The options can be printed in any order. All the t lines should be different. Since it is guaranteed that m \u00b7 k \u2264 10^ 6 , the total length of all the t lines will not exceed 10^ 6 . If there are several answers, output any of them.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "1005F"
  },
  {
    "title": "Tree Constructing",
    "url": "https://codeforces.com/problemset/problem/1003/E",
    "history": "You are given three integers n , d and k . Your task is to construct an undirected tree on n vertices with diameter d and degree of each vertex at most k , or say that it is impossible. An undirected tree is a connected undirected graph with n - 1 edges. Diameter of a tree is the maximum length of a simple path ( a path in which each vertex appears at most once) between all pairs of vertices of this tree. Degree of a vertex is the number of edges incident to this vertex ( i. e. for a vertex u it is the number of edges ( u, v) that belong to the tree, where v is any other vertex of a tree) .",
    "input": "The first line of the input contains three integers n , d and k ( 1 \u2264 n, d, k \u2264 4 \u00b7 10^ 5 ) .",
    "output": "If there is no tree satisfying the conditions above, print only one word \" NO\" ( without quotes) . Otherwise in the first line print \" YES\" ( without quotes) , and then print n - 1 lines describing edges of a tree satisfying the conditions above. Vertices of the tree must be numbered from 1 to n . You can print edges and vertices connected by an edge in any order. If there are multiple answers, print any of them. 1",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1003E"
  },
  {
    "title": "We Need More Bosses",
    "url": "https://codeforces.com/problemset/problem/1000/E",
    "history": "Your friend is developing a computer game. He has already decided how the game world should look like \u2014 it should consist of n locations connected by m two- way passages. The passages are designed in such a way that it should be possible to get from any location to any other location. Of course, some passages should be guarded by the monsters ( if you just can go everywhere without any difficulties, then it' s not fun, right? ) . Some crucial passages will be guarded by really fearsome monsters, requiring the hero to prepare for battle and designing his own tactics of defeating them ( commonly these kinds of monsters are called bosses) . And your friend wants you to help him place these bosses. The game will start in location s and end in location t , but these locations are not chosen yet. After choosing these locations, your friend will place a boss in each passage such that it is impossible to get from s to t without using this passage. Your friend wants to place as much bosses as possible ( because more challenges means more fun, right? ) , so he asks you to help him determine the maximum possible number of bosses, considering that any location can be chosen as s or as t .",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , n - 1 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of locations and passages, respectively. Then m lines follow, each containing two integers x and y ( 1 \u2264 x, y \u2264 n , x y ) describing the endpoints of one of the passages. It is guaranteed that there is no pair of locations directly connected by two or more passages, and that any location is reachable from any other location.",
    "output": "Print one integer \u2014 the maximum number of bosses your friend can place, considering all possible choices for s and t .",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "1000E"
  },
  {
    "title": "Reachability from the Capital",
    "url": "https://codeforces.com/problemset/problem/999/E",
    "history": "There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one- way. What is the minimum number of new roads that need to be built to make all the cities reachable from the capital? New roads will also be one- way.",
    "input": "The first line of input consists of three integers n , m and s ( 1 \u2264 n \u2264 5000, 0 \u2264 m \u2264 5000, 1 \u2264 s \u2264 n ) \u2014 the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n . The following m lines contain roads: road i is given as a pair of cities u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) . For each pair of cities ( u, v) , there can be at most one road from u to v . Roads in opposite directions between a pair of cities are allowed ( i. e. from u to v and from v to u ) .",
    "output": "Print one integer \u2014 the minimum number of extra roads needed to make all the cities reachable from city s . If all the cities are already reachable from s , print 0.",
    "note": "The first example is illustrated by the following: For example, you can add roads ( 6, 4 ) , ( 7, 9 ) , ( 1, 7 ) to make all the cities reachable from s = 1 . The second example is illustrated by the following: In this example, you can add any one of the roads ( 5, 1 ) , ( 5, 2 ) , ( 5, 3 ) , ( 5, 4 ) to make all the cities reachable from s = 5 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "999E"
  },
  {
    "title": "Number Clicker",
    "url": "https://codeforces.com/problemset/problem/995/E",
    "history": "Allen is playing Number Clicker on his phone. He starts with an integer u on the screen. Every second, he can press one of 3 buttons. Turn u \u2192 u+ 1 p . Turn u \u2192 u+ p- 1 p . Turn u \u2192 u^ p- 2p . Allen wants to press at most 200 buttons and end up with v on the screen. Help him!",
    "input": "The first line of the input contains 3 positive integers: u, v, p ( 0 \u2264 u, v \u2264 p- 1 , 3 \u2264 p \u2264 10^ 9 + 9 ) . p is guaranteed to be prime.",
    "output": "On the first line, print a single integer l , the number of button presses. On the second line, print integers c_ 1, . . . , c_ l , the button presses. For 1 \u2264 i \u2264l , 1 \u2264 c_ i \u2264 3 . We can show that the answer always exists.",
    "note": "In the first example the integer on the screen changes as 1 \u2192 2 \u2192 3 . In the second example the integer on the screen changes as 3 \u2192 2 .",
    "topics": [
      "divide and conquer",
      "graphs",
      "meet-in-the-middle",
      "number theory"
    ],
    "id": "995E"
  },
  {
    "title": "Graph And Its Complement",
    "url": "https://codeforces.com/problemset/problem/990/D",
    "history": "Given three numbers n, a, b . You need to find an adjacency matrix of such an undirected graph that the number of components in it is equal to a , and the number of components in its complement is b . The matrix must be symmetric, and all digits on the main diagonal must be zeroes. In an undirected graph loops ( edges from a vertex to itself) are not allowed. It can be at most one edge between a pair of vertices. The adjacency matrix of an undirected graph is a square matrix of size n consisting only of \" 0\" and \" 1\" , where n is the number of vertices of the graph and the i - th row and the i - th column correspond to the i - th vertex of the graph. The cell ( i, j) of the adjacency matrix contains 1 if and only if the i - th and j - th vertices in the graph are connected by an edge. A connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting this pair of vertices, but adding any other vertex to X violates this rule. The complement or inverse of a graph G is a graph H on the same vertices such that two distinct vertices of H are adjacent if and only if they are not adjacent in G .",
    "input": "In a single line, three numbers are given n, a, b ( 1 \u2264 n \u2264 1000, 1 \u2264 a, b \u2264 n) : is the number of vertexes of the graph, the required number of connectivity components in it, and the required amount of the connectivity component in it' s complement.",
    "output": "If there is no graph that satisfies these constraints on a single line, print \" NO\" ( without quotes) . Otherwise, on the first line, print \" YES\" ( without quotes) . In each of the next n lines, output n digits such that j - th digit of i - th line must be 1 if and only if there is an edge between vertices i and j in G ( and 0 otherwise) . Note that the matrix must be symmetric, and all digits on the main diagonal must be zeroes. If there are several matrices that satisfy the conditions \u2014 output any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "990D"
  },
  {
    "title": "A Mist of Florescence",
    "url": "https://codeforces.com/problemset/problem/989/C",
    "history": "As the boat drifts down the river, a wood full of blossoms shows up on the riverfront. \" I' ve been here once, \" Mino exclaims with delight, \" it' s breathtakingly amazing. \" \" What is it like? \" \" Look, Kanno, you' ve got your paintbrush, and I' ve got my words. Have a try, shall we? \" There are four kinds of flowers in the wood, Amaranths, Begonias, Centaureas and Dianthuses. The wood can be represented by a rectangular grid of n rows and m columns. In each cell of the grid, there is exactly one type of flowers. According to Mino, the numbers of connected components formed by each kind of flowers are a , b , c and d respectively. Two cells are considered in the same connected component if and only if a path exists between them that moves between cells sharing common edges and passes only through cells containing the same flowers. You are to help Kanno depict such a grid of flowers, with n and m arbitrarily chosen under the constraints given below. It can be shown that at least one solution exists under the constraints of this problem. Note that you can choose arbitrary n and m under the constraints below, they are not given in the input.",
    "input": "The first and only line of input contains four space- separated integers a , b , c and d ( 1 \u2264 a, b, c, d \u2264 100 ) \u2014 the required number of connected components of Amaranths, Begonias, Centaureas and Dianthuses, respectively.",
    "output": "In the first line, output two space- separated integers n and m ( 1 \u2264 n, m \u2264 50 ) \u2014 the number of rows and the number of columns in the grid respectively. Then output n lines each consisting of m consecutive English letters, representing one row of the grid. Each letter should be among ' A' , ' B' , ' C' and ' D' , representing Amaranths, Begonias, Centaureas and Dianthuses, respectively. In case there are multiple solutions, print any. You can output each letter in either case ( upper or lower) .",
    "note": "In the first example, each cell of Amaranths, Begonias and Centaureas forms a connected component, while all the Dianthuses form one.",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "989C"
  },
  {
    "title": "Oppa Funcan Style Remastered",
    "url": "https://codeforces.com/problemset/problem/986/F",
    "history": "Surely you have seen insane videos by South Korean rapper PSY, such as \" Gangnam Style\" , \" Gentleman\" and \" Daddy\" . You might also hear that PSY has been recording video \" Oppa Funcan Style\" two years ago ( unfortunately we couldn' t find it on the internet) . We will remind you what this hit looked like ( you can find original description here) : On the ground there are n platforms, which are numbered with integers from 1 to n , on i - th platform there is a dancer with number i . Further, every second all the dancers standing on the platform with number i jump to the platform with the number f( i) . The moving rule f is selected in advance and is not changed throughout the clip. The duration of the clip was k seconds and the rule f was chosen in such a way that after k seconds all dancers were in their initial positions ( i. e. the i - th dancer stood on the platform with the number i ) . That allowed to loop the clip and collect even more likes. PSY knows that enhanced versions of old artworks become more and more popular every day. So he decided to release a remastered- version of his video. In his case \" enhanced version\" means even more insanity, so the number of platforms can be up to 10^ 18 ! But the video director said that if some dancer stays on the same platform all the time, then the viewer will get bored and will turn off the video immediately. Therefore, for all x from 1 to n f( x) = \u0338 x must hold. Big part of classic video' s success was in that looping, so in the remastered version all dancers should return to their initial positions in the end of the clip as well. PSY hasn' t decided on the exact number of platforms and video duration yet, so he asks you to check if there is a good rule f for different options.",
    "input": "In the first line of input there is one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of options for n and k to check. In the next t lines the options are given: each option is described with two integers n and k ( 1 \u2264 n \u2264 10^ 18 , 1 \u2264 k \u2264 10^ 15 ) \u2014 the number of dancers and the duration in seconds. It is guaranteed that the number of different values of k in one test is not greater than 50 .",
    "output": "Print t lines. If the i - th option of the video is feasible, print \" YES\" ( without quotes) in i - th line, otherwise print \" NO\" ( without quotes) .",
    "note": "",
    "topics": [
      "graphs",
      "math",
      "number theory",
      "shortest paths"
    ],
    "id": "986F"
  },
  {
    "title": "AND Graph",
    "url": "https://codeforces.com/problemset/problem/986/C",
    "history": "You are given a set of size m with integer elements between 0 and 2^ n- 1 inclusive. Let' s build an undirected graph on these integers in the following way: connect two integers x and y with an edge if and only if x & y = 0 . Here & is the bitwise AND operation. Count the number of connected components in that graph.",
    "input": "In the first line of input there are two integers n and m ( 0 \u2264 n \u2264 22 , 1 \u2264 m \u2264 2^ n ) . In the second line there are m integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i < 2^ n ) \u2014 the elements of the set. All a_ i are distinct.",
    "output": "Print the number of connected components.",
    "note": "Graph from first sample: Graph from second sample:",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "986C"
  },
  {
    "title": "Fair",
    "url": "https://codeforces.com/problemset/problem/986/A",
    "history": "Some company is going to hold a fair in Byteland. There are n towns in Byteland and m two- way roads between towns. Of course, you can reach any town from any other town using roads. There are k types of goods produced in Byteland and every town produces only one type. To hold a fair you have to bring at least s different types of goods. It costs d( u, v) coins to bring goods from town u to town v where d( u, v) is the length of the shortest path from u to v . Length of a path is the number of roads in this path. The organizers will cover all travel expenses but they can choose the towns to bring goods from. Now they want to calculate minimum expenses to hold a fair in each of n towns.",
    "input": "There are 4 integers n , m , k , s in the first line of input ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264 10^ 5 , 1 \u2264 s \u2264 k \u2264 min( n, 100) ) \u2014 the number of towns, the number of roads, the number of different types of goods, the number of different types of goods necessary to hold a fair. In the next line there are n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 k ) , where a_ i is the type of goods produced in the i - th town. It is guaranteed that all integers between 1 and k occur at least once among integers a_ i . In the next m lines roads are described. Each road is described by two integers u v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 the towns connected by this road. It is guaranteed that there is no more than one road between every two towns. It is guaranteed that you can go from any town to any other town via roads.",
    "output": "Print n numbers, the i - th of them is the minimum number of coins you need to spend on travel expenses to hold a fair in town i . Separate numbers with spaces.",
    "note": "Let' s look at the first sample. To hold a fair in town 1 you can bring goods from towns 1 ( 0 coins) , 2 ( 1 coin) and 4 ( 1 coin) . Total numbers of coins is 2 . Town 2 : Goods from towns 2 ( 0 ) , 1 ( 1 ) , 3 ( 1 ) . Sum equals 2 . Town 3 : Goods from towns 3 ( 0 ) , 2 ( 1 ) , 4 ( 1 ) . Sum equals 2 . Town 4 : Goods from towns 4 ( 0 ) , 1 ( 1 ) , 5 ( 1 ) . Sum equals 2 . Town 5 : Goods from towns 5 ( 0 ) , 4 ( 1 ) , 3 ( 2 ) . Sum equals 3 .",
    "topics": [
      "graphs",
      "greedy",
      "number theory",
      "shortest paths"
    ],
    "id": "986A"
  },
  {
    "title": "Elevator",
    "url": "https://codeforces.com/problemset/problem/983/C",
    "history": "You work in a big office. It is a 9 floor building with an elevator that can accommodate up to 4 people. It is your responsibility to manage this elevator. Today you are late, so there are queues on some floors already. For each person you know the floor where he currently is and the floor he wants to reach. Also, you know the order in which people came to the elevator. According to the company' s rules, if an employee comes to the elevator earlier than another one, he has to enter the elevator earlier too ( even if these employees stay on different floors) . Note that the employees are allowed to leave the elevator in arbitrary order. The elevator has two commands: Go up or down one floor. The movement takes 1 second. Open the doors on the current floor. During this operation all the employees who have reached their destination get out of the elevator. Then all the employees on the floor get in the elevator in the order they are queued up while it doesn' t contradict the company' s rules and there is enough space in the elevator. Each employee spends 1 second to get inside and outside the elevator. Initially the elevator is empty and is located on the floor 1. You are interested what is the minimum possible time you need to spend to deliver all the employees to their destination. It is not necessary to return the elevator to the floor 1.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of employees. The i- th of the next n lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 9, ai = \u0338 bi) \u2014 the floor on which an employee initially is, and the floor he wants to reach. The employees are given in the order they came to the elevator.",
    "output": "Print a single integer \u2014 the minimal possible time in seconds.",
    "note": "Explaination for the first sample t = 0 t = 2 t = 3 t = 5 t = 6 t = 7 t = 9 t = 10",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "983C"
  },
  {
    "title": "The Meeting Place Cannot Be Changed",
    "url": "https://codeforces.com/problemset/problem/982/F",
    "history": "Petr is a detective in Braginsk. Somebody stole a huge amount of money from a bank and Petr is to catch him. Somebody told Petr that some luxurious car moves along the roads without stopping. Petr knows that it is the robbers who drive the car. The roads in Braginsk are one- directional and each of them connects two intersections. Petr wants to select one intersection such that if the robbers continue to drive the roads indefinitely, they will sooner or later come to that intersection. The initial position of the robbers is unknown. Find such an intersection that fits the requirements.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 10^ 5 , 2 \u2264 m \u2264 5 \u00b7 10^ 5 ) \u2014 the number of intersections and the number of directed roads in Braginsk, respectively. Each of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) \u2014 the start and finish of the i - th directed road. It is guaranteed that the robbers can move along the roads indefinitely.",
    "output": "Print a single integer k \u2014 the intersection Petr needs to choose. If there are multiple answers, print any. If there are no such intersections, print - 1 .",
    "note": "In the first example the robbers can move, for example, along the following routes: ( 1- 2- 3- 1) , ( 3- 4- 5- 3) , ( 1- 2- 3- 4- 5- 3- 1) . We can show that if Petr chooses the 3 - rd intersection, he will eventually meet the robbers independently of their route.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "982F"
  },
  {
    "title": "Cut 'em all!",
    "url": "https://codeforces.com/problemset/problem/982/C",
    "history": "You' re given a tree with n vertices. Your task is to determine the maximum possible number of edges that can be removed in such a way that all the remaining connected components will have even size.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) denoting the size of the tree. The next n - 1 lines contain two integers u , v ( 1 \u2264 u, v \u2264 n ) each, describing the vertices connected by the i - th edge. It' s guaranteed that the given edges form a tree.",
    "output": "Output a single integer k \u2014 the maximum number of edges that can be removed to leave all connected components with even size, or - 1 if it is impossible to remove edges in order to satisfy this property.",
    "note": "In the first example you can remove the edge between vertices 1 and 4 . The graph after that will have two connected components with two vertices in each. In the second example you can' t remove edges in such a way that all components have even number of vertices, so the answer is - 1 .",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "982C"
  },
  {
    "title": "Cactus to Tree",
    "url": "https://codeforces.com/problemset/problem/980/F",
    "history": "You are given a special connected undirected graph where each vertex belongs to at most one simple cycle. Your task is to remove as many edges as needed to convert this graph into a tree ( connected graph with no cycles) . For each node, independently, output the maximum distance between it and a leaf in the resulting tree, assuming you were to remove the edges in a way that minimizes this distance.",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n \u2264 5\u00b7 10^ 5 ) , the number of nodes and the number of edges, respectively. Each of the following m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u v ) , and represents an edge connecting the two nodes u and v . Each pair of nodes is connected by at most one edge. It is guaranteed that the given graph is connected and each vertex belongs to at most one simple cycle.",
    "output": "Print n space- separated integers, the i - th integer represents the maximum distance between node i and a leaf if the removed edges were chosen in a way that minimizes this distance.",
    "note": "In the first sample, a possible way to minimize the maximum distance from vertex 1 is by removing the marked edges in the following image: Note that to minimize the answer for different nodes, you can remove different edges.",
    "topics": [
      "dp",
      "graphs",
      "trees"
    ],
    "id": "980F"
  },
  {
    "title": "Cyclic Components",
    "url": "https://codeforces.com/problemset/problem/977/E",
    "history": "You are given an undirected graph consisting of n vertices and m edges. Your task is to find the number of connected components which are cycles. Here are some definitions of graph theory. An undirected graph consists of two sets: set of nodes ( called vertices) and set of edges. Each edge connects a pair of vertices. All edges are bidirectional ( i. e. if a vertex a is connected with a vertex b , a vertex b is also connected with a vertex a ) . An edge can' t connect vertex with itself, there is at most one edge between a pair of vertices. Two vertices u and v belong to the same connected component if and only if there is at least one path along edges connecting u and v . A connected component is a cycle if and only if its vertices can be reordered in such a way that: the first vertex is connected with the second vertex by an edge, the second vertex is connected with the third vertex by an edge, . . . the last vertex is connected with the first vertex by an edge, all the described edges of a cycle are distinct. A cycle doesn' t contain any other edges except described above. By definition any cycle contains three or more vertices. There are 6 connected components, 2 of them are cycles: [ 7, 10, 16] and [ 5, 11, 9, 15] .",
    "input": "The first line contains two integer numbers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 number of vertices and edges. The following m lines contains edges: edge i is given as a pair of vertices v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , u_ i v_ i ) . There is no multiple edges in the given graph, i. e. for each pair ( v_ i, u_ i ) there no other pairs ( v_ i, u_ i ) and ( u_ i, v_ i ) in the list of edges.",
    "output": "Print one integer \u2014 the number of connected components which are also cycles.",
    "note": "In the first example only component [ 3, 4, 5] is also a cycle. The illustration above corresponds to the second example.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "977E"
  },
  {
    "title": "Minimal k-covering",
    "url": "https://codeforces.com/problemset/problem/976/F",
    "history": "You are given a bipartite graph G = ( U, V, E) , U is the set of vertices of the first part, V is the set of vertices of the second part and E is the set of edges. There might be multiple edges. Let' s call some subset of its edges k- covering iff the graph has each of its vertices incident to at least k edges. Minimal k- covering is such a k- covering that the size of the subset is minimal possible. Your task is to find minimal k- covering for each , where minDegree is the minimal degree of any vertex in graph G.",
    "input": "The first line contains three integers n1, n2 and m ( 1 \u2264 n1, n2 \u2264 2000, 0 \u2264 m \u2264 2000) \u2014 the number of vertices in the first part, the number of vertices in the second part and the number of edges, respectively. The i- th of the next m lines contain two integers ui and vi ( 1 \u2264 ui \u2264 n1, 1 \u2264 vi \u2264 n2) \u2014 the description of the i- th edge, ui is the index of the vertex in the first part and vi is the index of the vertex in the second part.",
    "output": "For each print the subset of edges ( minimal k- covering) in separate line. The first integer cntk of the k- th line is the number of edges in minimal k- covering of the graph. Then cntk integers follow \u2014 original indices of the edges which belong to the minimal k- covering, these indices should be pairwise distinct. Edges are numbered 1 through m in order they are given in the input.",
    "note": "",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "976F"
  },
  {
    "title": "Degree Set",
    "url": "https://codeforces.com/problemset/problem/976/D",
    "history": "You are given a sequence of n positive integers d1, d2, . . . , dn ( d1 < d2 < . . . < dn) . Your task is to construct an undirected graph such that: there are exactly dn + 1 vertices; there are no self- loops; there are no multiple edges; there are no more than 106 edges; its degree set is equal to d. Vertices should be numbered 1 through ( dn + 1) . Degree sequence is an array a with length equal to the number of vertices in a graph such that ai is the number of vertices adjacent to i- th vertex. Degree set is a sorted in increasing order sequence of all distinct values from the degree sequence. It is guaranteed that there exists such a graph that all the conditions hold, and it contains no more than 106 edges. Print the resulting graph.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 300) \u2014 the size of the degree set. The second line contains n integers d1, d2, . . . , dn ( 1 \u2264 di \u2264 1000, d1 < d2 < . . . < dn) \u2014 the degree set.",
    "output": "In the first line print one integer m ( 1 \u2264 m \u2264 106) \u2014 the number of edges in the resulting graph. It is guaranteed that there exists such a graph that all the conditions hold and it contains no more than 106 edges. Each of the next m lines should contain two integers vi and ui ( 1 \u2264 vi, ui \u2264 dn + 1) \u2014 the description of the i- th edge.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "976D"
  },
  {
    "title": "Simple Cycles Edges",
    "url": "https://codeforces.com/problemset/problem/962/F",
    "history": "You are given an undirected graph, consisting of n vertices and m edges. The graph does not necessarily connected. Guaranteed, that the graph does not contain multiple edges ( more than one edges between a pair of vertices) or loops ( edges from a vertex to itself) . A cycle in a graph is called a simple, if it contains each own vertex exactly once. So simple cycle doesn' t allow to visit a vertex more than once in a cycle. Determine the edges, which belong to exactly on one simple cycle.",
    "input": "The first line contain two integers n and m ( 1 \u2264 n \u2264 100 000 , 0 \u2264 m \u2264min( n \u00b7 ( n - 1) / 2, 100 000) ) \u2014 the number of vertices and the number of edges. Each of the following m lines contain two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the description of the edges.",
    "output": "In the first line print the number of edges, which belong to exactly one simple cycle. In the second line print the indices of edges, which belong to exactly one simple cycle, in increasing order. The edges are numbered from one in the same order as they are given in the input.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "962F"
  },
  {
    "title": "Pathwalks",
    "url": "https://codeforces.com/problemset/problem/960/F",
    "history": "You are given a directed graph with n nodes and m edges, with all edges having a certain weight. There might be multiple edges and self loops, and the graph can also be disconnected. You need to choose a path ( possibly passing through same vertices multiple times) in the graph such that the weights of the edges are in strictly increasing order, and these edges come in the order of input. Among all such paths, you need to find the the path that has the maximum possible number of edges, and report this value. Please note that the edges picked don' t have to be consecutive in the input.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100000, 1 \u2264 m \u2264 100000) \u2014 the number of vertices and edges in the graph, respectively. m lines follows. The i- th of these lines contains three space separated integers ai, bi and wi ( 1 \u2264 ai, bi \u2264 n, 0 \u2264 wi \u2264 100000) , denoting an edge from vertex ai to vertex bi having weight wi",
    "output": "Print one integer in a single line \u2014 the maximum number of edges in the path.",
    "note": "The answer for the first sample input is 2: . Note that you cannot traverse because edge appears earlier in the input than the other two edges and hence cannot be picked/ traversed after either of the other two edges. In the second sample, it' s optimal to pick 1- st, 3- rd and 5- th edges to get the optimal answer: .",
    "topics": [
      "data structures",
      "dp",
      "graphs"
    ],
    "id": "960F"
  },
  {
    "title": "Mahmoud and Ehab and the xor-MST",
    "url": "https://codeforces.com/problemset/problem/959/E",
    "history": "Ehab is interested in the bitwise- xor operation and the special graphs. Mahmoud gave him a problem that combines both. He has a complete graph consisting of n vertices numbered from 0 to n - 1. For all 0 \u2264 u < v < n, vertex u and vertex v are connected with an undirected edge that has weight ( where is the bitwise- xor operation) . Can you find the weight of the minimum spanning tree of that graph? You can read about complete graphs in https: / / en. wikipedia. org/ wiki/ Complete_ graphYou can read about the minimum spanning tree in https: / / en. wikipedia. org/ wiki/ Minimum_ spanning_ treeThe weight of the minimum spanning tree is the sum of the weights on the edges included in it.",
    "input": "The only line contains an integer n ( 2 \u2264 n \u2264 1012) , the number of vertices in the graph.",
    "output": "The only line contains an integer x, the weight of the graph' s minimum spanning tree.",
    "note": "In the first sample: The weight of the minimum spanning tree is 1+ 2+ 1= 4.",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "959E"
  },
  {
    "title": "Maximum Control (medium)",
    "url": "https://codeforces.com/problemset/problem/958/B2",
    "history": "The Resistance is trying to take control over as many planets of a particular solar system as possible. Princess Heidi is in charge of the fleet, and she must send ships to some planets in order to maximize the number of controlled planets. The Galaxy contains N planets, connected by bidirectional hyperspace tunnels in such a way that there is a unique path between every pair of the planets. A planet is controlled by the Resistance if there is a Resistance ship in its orbit, or if the planet lies on the shortest path between some two planets that have Resistance ships in their orbits. Heidi has not yet made up her mind as to how many ships to use. Therefore, she is asking you to compute, for every K = 1, 2, 3, . . . , N, the maximum number of planets that can be controlled with a fleet consisting of K ships.",
    "input": "The first line of the input contains an integer N ( 1 \u2264 N \u2264 105) \u2013 the number of planets in the galaxy. The next N - 1 lines describe the hyperspace tunnels between the planets. Each of the N - 1 lines contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 N) indicating that there is a bidirectional hyperspace tunnel between the planets u and v. It is guaranteed that every two planets are connected by a path of tunnels, and that each tunnel connects a different pair of planets.",
    "output": "On a single line, print N space- separated integers. The K- th number should correspond to the maximum number of planets that can be controlled by the Resistance using a fleet of K ships.",
    "note": "Consider the first example. If K = 1, then Heidi can only send one ship to some planet and control it. However, for K \u2265 2, sending ships to planets 1 and 3 will allow the Resistance to control all planets.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "958B2"
  },
  {
    "title": "Fight Against Traffic",
    "url": "https://codeforces.com/problemset/problem/954/D",
    "history": "Little town Nsk consists of n junctions connected by m bidirectional roads. Each road connects two distinct junctions and no two roads connect the same pair of junctions. It is possible to get from any junction to any other junction by these roads. The distance between two junctions is equal to the minimum possible number of roads on a path between them. In order to improve the transportation system, the city council asks mayor to build one new road. The problem is that the mayor has just bought a wonderful new car and he really enjoys a ride from his home, located near junction s to work located near junction t. Thus, he wants to build a new road in such a way that the distance between these two junctions won' t decrease. You are assigned a task to compute the number of pairs of junctions that are not connected by the road, such that if the new road between these two junctions is built the distance between s and t won' t decrease.",
    "input": "The firt line of the input contains integers n, m, s and t ( 2 \u2264 n \u2264 1000, 1 \u2264 m \u2264 1000, 1 \u2264 s, t \u2264 n, s = \u0338 t) \u2014 the number of junctions and the number of roads in Nsk, as well as the indices of junctions where mayors home and work are located respectively. The i- th of the following m lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) , meaning that this road connects junctions ui and vi directly. It is guaranteed that there is a path between any two junctions and no two roads connect the same pair of junctions.",
    "output": "Print one integer \u2014 the number of pairs of junctions not connected by a direct road, such that building a road between these two junctions won' t decrease the distance between junctions s and t.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "954D"
  },
  {
    "title": "Data Center Maintenance",
    "url": "https://codeforces.com/problemset/problem/949/C",
    "history": "BigData Inc. is a corporation that has n data centers indexed from 1 to n that are located all over the world. These data centers provide storage for client data ( you can figure out that client data is really big! ) . Main feature of services offered by BigData Inc. is the access availability guarantee even under the circumstances of any data center having an outage. Such a guarantee is ensured by using the two- way replication. Two- way replication is such an approach for data storage that any piece of data is represented by two identical copies that are stored in two different data centers. For each of m company clients, let us denote indices of two different data centers storing this client data as ci, 1 and ci, 2. In order to keep data centers operational and safe, the software running on data center computers is being updated regularly. Release cycle of BigData Inc. is one day meaning that the new version of software is being deployed to the data center computers each day. Data center software update is a non- trivial long process, that is why there is a special hour- long time frame that is dedicated for data center maintenance. During the maintenance period, data center computers are installing software updates, and thus they may be unavailable. Consider the day to be exactly h hours long. For each data center there is an integer uj ( 0 \u2264 uj \u2264 h - 1) defining the index of an hour of day, such that during this hour data center j is unavailable due to maintenance. Summing up everything above, the condition uci, 1 = \u0338 uci, 2 should hold for each client, or otherwise his data may be unaccessible while data centers that store it are under maintenance. Due to occasional timezone change in different cities all over the world, the maintenance time in some of the data centers may change by one hour sometimes. Company should be prepared for such situation, that is why they decided to conduct an experiment, choosing some non- empty subset of data centers, and shifting the maintenance time for them by an hour later ( i. e. if uj = h - 1, then the new maintenance hour would become 0, otherwise it would become uj + 1) . Nonetheless, such an experiment should not break the accessibility guarantees, meaning that data of any client should be still available during any hour of a day after the data center maintenance times are changed. Such an experiment would provide useful insights, but changing update time is quite an expensive procedure, that is why the company asked you to find out the minimum number of data centers that have to be included in an experiment in order to keep the data accessibility guarantees.",
    "input": "The first line of input contains three integers n, m and h ( 2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000, 2 \u2264 h \u2264 100 000) , the number of company data centers, number of clients and the day length of day measured in hours. The second line of input contains n integers u1, u2, . . . , un ( 0 \u2264 uj < h) , j- th of these numbers is an index of a maintenance hour for data center j. Each of the next m lines contains two integers ci, 1 and ci, 2 ( 1 \u2264 ci, 1, ci, 2 \u2264 n, ci, 1 = \u0338 ci, 2) , defining the data center indices containing the data of client i. It is guaranteed that the given maintenance schedule allows each client to access at least one copy of his data at any moment of day.",
    "output": "In the first line print the minimum possible number of data centers k ( 1 \u2264 k \u2264 n) that have to be included in an experiment in order to keep the data available for any client. In the second line print k distinct integers x1, x2, . . . , xk ( 1 \u2264 xi \u2264 n) , the indices of data centers whose maintenance time will be shifted by one hour later. Data center indices may be printed in any order. If there are several possible answers, it is allowed to print any of them. It is guaranteed that at there is at least one valid choice of data centers.",
    "note": "Consider the first sample test. The given answer is the only way to conduct an experiment involving the only data center. In such a scenario the third data center has a maintenance during the hour 1, and no two data centers storing the information of the same client have maintenance at the same hour. On the other hand, for example, if we shift the maintenance time on hour later for the first data center, then the data of clients 1 and 3 will be unavailable during the hour 0.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "949C"
  },
  {
    "title": "Protect Sheep",
    "url": "https://codeforces.com/problemset/problem/948/A",
    "history": "Bob is a farmer. He has a large pasture with many sheep. Recently, he has lost some of them due to wolf attacks. He thus decided to place some shepherd dogs in such a way that all his sheep are protected. The pasture is a rectangle consisting of R \u00d7 C cells. Each cell is either empty, contains a sheep, a wolf or a dog. Sheep and dogs always stay in place, but wolves can roam freely around the pasture, by repeatedly moving to the left, right, up or down to a neighboring cell. When a wolf enters a cell with a sheep, it consumes it. However, no wolf can enter a cell with a dog. Initially there are no dogs. Place dogs onto the pasture in such a way that no wolf can reach any sheep, or determine that it is impossible. Note that since you have many dogs, you do not need to minimize their number.",
    "input": "First line contains two integers R ( 1 \u2264 R \u2264 500) and C ( 1 \u2264 C \u2264 500) , denoting the number of rows and the numbers of columns respectively. Each of the following R lines is a string consisting of exactly C characters, representing one row of the pasture. Here, ' S' means a sheep, ' W' a wolf and ' . ' an empty cell.",
    "output": "If it is impossible to protect all sheep, output a single line with the word \" No\" . Otherwise, output a line with the word \" Yes\" . Then print R lines, representing the pasture after placing dogs. Again, ' S' means a sheep, ' W' a wolf, ' D' is a dog and ' . ' an empty space. You are not allowed to move, remove or add a sheep or a wolf. If there are multiple solutions, you may print any of them. You don' t have to minimize the number of dogs.",
    "note": "In the first example, we can split the pasture into two halves, one containing wolves and one containing sheep. Note that the sheep at ( 2, 1) is safe, as wolves cannot move diagonally. In the second example, there are no empty spots to put dogs that would guard the lone sheep. In the third example, there are no wolves, so the task is very easy. We put a dog in the center to observe the peacefulness of the meadow, but the solution would be correct even without him.",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "948A"
  },
  {
    "title": "Love Rescue",
    "url": "https://codeforces.com/problemset/problem/939/D",
    "history": "Valya and Tolya are an ideal pair, but they quarrel sometimes. Recently, Valya took offense at her boyfriend because he came to her in t- shirt with lettering that differs from lettering on her pullover. Now she doesn' t want to see him and Tolya is seating at his room and crying at her photos all day long. This story could be very sad but fairy godmother ( Tolya' s grandmother) decided to help them and restore their relationship. She secretly took Tolya' s t- shirt and Valya' s pullover and wants to make the letterings on them same. In order to do this, for one unit of mana she can buy a spell that can change some letters on the clothes. Your task is calculate the minimum amount of mana that Tolya' s grandmother should spend to rescue love of Tolya and Valya. More formally, letterings on Tolya' s t- shirt and Valya' s pullover are two strings with same length n consisting only of lowercase English letters. Using one unit of mana, grandmother can buy a spell of form ( c1, c2) ( where c1 and c2 are some lowercase English letters) , which can arbitrary number of times transform a single letter c1 to c2 and vise- versa on both Tolya' s t- shirt and Valya' s pullover. You should find the minimum amount of mana that grandmother should spend to buy a set of spells that can make the letterings equal. In addition you should output the required set of spells.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the length of the letterings. The second line contains a string with length n, consisting of lowercase English letters \u2014 the lettering on Valya' s pullover. The third line contains the lettering on Tolya' s t- shirt in the same format.",
    "output": "In the first line output a single integer \u2014 the minimum amount of mana t required for rescuing love of Valya and Tolya. In the next t lines output pairs of space- separated lowercase English letters \u2014 spells that Tolya' s grandmother should buy. Spells and letters in spells can be printed in any order. If there are many optimal answers, output any.",
    "note": "In first example it' s enough to buy two spells: ( ' a' , ' d' ) and ( ' b' , ' a' ) . Then first letters will coincide when we will replace letter ' a' with ' d' . Second letters will coincide when we will replace ' b' with ' a' . Third letters will coincide when we will at first replace ' b' with ' a' and then ' a' with ' d' .",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "strings"
    ],
    "id": "939D"
  },
  {
    "title": "Love Triangle",
    "url": "https://codeforces.com/problemset/problem/939/A",
    "history": "As you could know there are no male planes nor female planes. However, each plane on Earth likes some other plane. There are n planes on Earth, numbered from 1 to n, and the plane with number i likes the plane with number fi, where 1 \u2264 fi \u2264 n and fi = \u0338 i. We call a love triangle a situation in which plane A likes plane B, plane B likes plane C and plane C likes plane A. Find out if there is any love triangle on Earth.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5000) \u2014 the number of planes. The second line contains n integers f1, f2, . . . , fn ( 1 \u2264 fi \u2264 n, fi = \u0338 i) , meaning that the i- th plane likes the fi- th.",
    "output": "Output \u00abYES\u00bb if there is a love triangle consisting of planes on Earth. Otherwise, output \u00abNO\u00bb. You can output any letter in lower case or in upper case.",
    "note": "In first example plane 2 likes plane 4, plane 4 likes plane 1, plane 1 likes plane 2 and that is a love triangle. In second example there are no love triangles.",
    "topics": [
      "graphs"
    ],
    "id": "939A"
  },
  {
    "title": "Shortest Path Queries",
    "url": "https://codeforces.com/problemset/problem/938/G",
    "history": "You are given an undirected connected graph with weighted edges. The length of some path between two vertices is the bitwise xor of weights of all edges belonging to this path ( if some edge is traversed more than once, then it is included in bitwise xor the same number of times) . There are three types of queries you have to process: 1 x y d \u2014 add an edge connecting vertex x to vertex y with weight d. It is guaranteed that there is no edge connecting x to y before this query; 2 x y \u2014 remove an edge connecting vertex x to vertex y. It is guaranteed that there was such edge in the graph, and the graph stays connected after this query; 3 x y \u2014 calculate the length of the shortest path ( possibly non- simple) from vertex x to vertex y. Print the answers for all queries of type 3.",
    "input": "The first line contains two numbers n and m ( 1 \u2264 n, m \u2264 200000) \u2014 the number of vertices and the number of edges in the graph, respectively. Then m lines follow denoting the edges of the graph. Each line contains three integers x, y and d ( 1 \u2264 x < y \u2264 n, 0 \u2264 d \u2264 230 - 1) . Each pair ( x, y) is listed at most once. The initial graph is connected. Then one line follows, containing an integer q ( 1 \u2264 q \u2264 200000) \u2014 the number of queries you have to process. Then q lines follow, denoting queries in the following form: 1 x y d ( 1 \u2264 x < y \u2264 n, 0 \u2264 d \u2264 230 - 1) \u2014 add an edge connecting vertex x to vertex y with weight d. It is guaranteed that there is no edge connecting x to y before this query; 2 x y ( 1 \u2264 x < y \u2264 n) \u2014 remove an edge connecting vertex x to vertex y. It is guaranteed that there was such edge in the graph, and the graph stays connected after this query; 3 x y ( 1 \u2264 x < y \u2264 n) \u2014 calculate the length of the shortest path ( possibly non- simple) from vertex x to vertex y. It is guaranteed that at least one query has type 3.",
    "output": "Print the answers for all queries of type 3 in the order they appear in input.",
    "note": "",
    "topics": [
      "bitmasks",
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "938G"
  },
  {
    "title": "Buy a Ticket",
    "url": "https://codeforces.com/problemset/problem/938/D",
    "history": "Musicians of a popular band \" Flayer\" have announced that they are going to \" make their exit\" with a world tour. Of course, they will visit Berland as well. There are n cities in Berland. People can travel between cities using two- directional train routes; there are exactly m routes, i- th route can be used to go from city vi to city ui ( and from ui to vi) , and it costs wi coins to use this route. Each city will be visited by \" Flayer\" , and the cost of the concert ticket in i- th city is ai coins. You have friends in every city of Berland, and they, knowing about your programming skills, asked you to calculate the minimum possible number of coins they have to pay to visit the concert. For every city i you have to compute the minimum number of coins a person from city i has to spend to travel to some city j ( or possibly stay in city i) , attend a concert there, and return to city i ( if j = \u0338 i) . Formally, for every you have to calculate , where d( i, j) is the minimum number of coins you have to spend to travel from city i to city j. If there is no way to reach city j from city i, then we consider d( i, j) to be infinitely large.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2\u00b7105, 1 \u2264 m \u2264 2\u00b7105) . Then m lines follow, i- th contains three integers vi, ui and wi ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui, 1 \u2264 wi \u2264 1012) denoting i- th train route. There are no multiple train routes connecting the same pair of cities, that is, for each ( v, u) neither extra ( v, u) nor ( u, v) present in input. The next line contains n integers a1, a2, . . . ak ( 1 \u2264 ai \u2264 1012) \u2014 price to attend the concert in i- th city.",
    "output": "Print n integers. i- th of them must be equal to the minimum number of coins a person from city i has to spend to travel to some city j ( or possibly stay in city i) , attend a concert there, and return to city i ( if j = \u0338 i) .",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "938D"
  },
  {
    "title": "Sleepy Game",
    "url": "https://codeforces.com/problemset/problem/936/B",
    "history": "Petya and Vasya arranged a game. The game runs by the following rules. Players have a directed graph consisting of n vertices and m edges. One of the vertices contains a chip. Initially the chip is located at vertex s. Players take turns moving the chip along some edge of the graph. Petya goes first. Player who can' t move the chip loses. If the game lasts for 106 turns the draw is announced. Vasya was performing big laboratory work in \" Spelling and parts of speech\" at night before the game, so he fell asleep at the very beginning of the game. Petya decided to take the advantage of this situation and make both Petya' s and Vasya' s moves. Your task is to help Petya find out if he can win the game or at least draw a tie.",
    "input": "The first line of input contain two integers n and m \u2014 the number of vertices and the number of edges in the graph ( 2 \u2264 n \u2264 105, 0 \u2264 m \u2264 2\u00b7105) . The next n lines contain the information about edges of the graph. i- th line ( 1 \u2264 i \u2264 n) contains nonnegative integer ci \u2014 number of vertices such that there is an edge from i to these vertices and ci distinct integers ai, j \u2014 indices of these vertices ( 1 \u2264 ai, j \u2264 n, ai, j = \u0338 i) . It is guaranteed that the total sum of ci equals to m. The next line contains index of vertex s \u2014 the initial position of the chip ( 1 \u2264 s \u2264 n) .",
    "output": "If Petya can win print \u00abWin\u00bb in the first line. In the next line print numbers v1, v2, . . . , vk ( 1 \u2264 k \u2264 106) \u2014 the sequence of vertices Petya should visit for the winning. Vertex v1 should coincide with s. For i = 1. . . k - 1 there should be an edge from vi to vi + 1 in the graph. There must be no possible move from vertex vk. The sequence should be such that Petya wins the game. If Petya can' t win but can draw a tie, print \u00abDraw\u00bb in the only line. Otherwise print \u00abLose\u00bb.",
    "note": "In the first example the graph is the following: Initially the chip is located at vertex 1. In the first move Petya moves the chip to vertex 2, after that he moves it to vertex 4 for Vasya. After that he moves to vertex 5. Now it is Vasya' s turn and there is no possible move, so Petya wins. In the second example the graph is the following: Initially the chip is located at vertex 2. The only possible Petya' s move is to go to vertex 1. After that he has to go to 3 for Vasya. Now it' s Petya' s turn but he has no possible move, so Petya loses. In the third example the graph is the following: Petya can' t win, but he can move along the cycle, so the players will draw a tie.",
    "topics": [
      "dfs and similar",
      "dp",
      "games",
      "graphs"
    ],
    "id": "936B"
  },
  {
    "title": "A Colourful Prospect",
    "url": "https://codeforces.com/problemset/problem/933/C",
    "history": "Firecrackers scare Nian the monster, but they' re wayyyyy too noisy! Maybe fireworks make a nice complement. Little Tommy is watching a firework show. As circular shapes spread across the sky, a splendid view unfolds on the night of Lunar New Year' s eve. A wonder strikes Tommy. How many regions are formed by the circles on the sky? We consider the sky as a flat plane. A region is a connected part of the plane with positive area, whose bound consists of parts of bounds of the circles and is a curve or several curves without self- intersections, and that does not contain any curve other than its boundaries. Note that exactly one of the regions extends infinitely.",
    "input": "The first line of input contains one integer n ( 1 \u2264 n \u2264 3) , denoting the number of circles. The following n lines each contains three space- separated integers x, y and r ( - 10 \u2264 x, y \u2264 10, 1 \u2264 r \u2264 10) , describing a circle whose center is ( x, y) and the radius is r. No two circles have the same x, y and r at the same time.",
    "output": "Print a single integer \u2014 the number of regions on the plane.",
    "note": "For the first example, For the second example, For the third example,",
    "topics": [
      "geometry",
      "graphs"
    ],
    "id": "933C"
  },
  {
    "title": "Peculiar apple-tree",
    "url": "https://codeforces.com/problemset/problem/930/A",
    "history": "In Arcady' s garden there grows a peculiar apple- tree that fruits one time per year. Its peculiarity can be explained in following way: there are n inflorescences, numbered from 1 to n. Inflorescence number 1 is situated near base of tree and any other inflorescence with number i ( i > 1) is situated at the top of branch, which bottom is pi- th inflorescence and pi < i. Once tree starts fruiting, there appears exactly one apple in each inflorescence. The same moment as apples appear, they start to roll down along branches to the very base of tree. Each second all apples, except ones in first inflorescence simultaneously roll down one branch closer to tree base, e. g. apple in a- th inflorescence gets to pa- th inflorescence. Apples that end up in first inflorescence are gathered by Arcady in exactly the same moment. Second peculiarity of this tree is that once two apples are in same inflorescence they annihilate. This happens with each pair of apples, e. g. if there are 5 apples in same inflorescence in same time, only one will not be annihilated and if there are 8 apples, all apples will be annihilated. Thus, there can be no more than one apple in each inflorescence in each moment of time. Help Arcady with counting number of apples he will be able to collect from first inflorescence during one harvest.",
    "input": "First line of input contains single integer number n ( 2 \u2264 n \u2264 100 000) \u2014 number of inflorescences. Second line of input contains sequence of n - 1 integer numbers p2, p3, . . . , pn ( 1 \u2264 pi < i) , where pi is number of inflorescence into which the apple from i- th inflorescence rolls down.",
    "output": "Single line of output should contain one integer number: amount of apples that Arcady will be able to collect from first inflorescence during one harvest.",
    "note": "In first example Arcady will be able to collect only one apple, initially situated in 1st inflorescence. In next second apples from 2nd and 3rd inflorescences will roll down and annihilate, and Arcady won' t be able to collect them. In the second example Arcady will be able to collect 3 apples. First one is one initially situated in first inflorescence. In a second apple from 2nd inflorescence will roll down to 1st ( Arcady will collect it) and apples from 3rd, 4th, 5th inflorescences will roll down to 2nd. Two of them will annihilate and one not annihilated will roll down from 2- nd inflorescence to 1st one in the next second and Arcady will collect it.",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "930A"
  },
  {
    "title": "Dependency management",
    "url": "https://codeforces.com/problemset/problem/928/C",
    "history": "Polycarp is currently developing a project in Vaja language and using a popular dependency management system called Vamen. From Vamen' s point of view both Vaja project and libraries are treated projects for simplicity. A project in Vaja has its own uniqie non- empty name consisting of lowercase latin letters with length not exceeding 10 and version \u2014 positive integer from 1 to 106. Each project ( keep in mind that it is determined by both its name and version) might depend on other projects. For sure, there are no cyclic dependencies. You' re given a list of project descriptions. The first of the given projects is the one being developed by Polycarp at this moment. Help Polycarp determine all projects that his project depends on ( directly or via a certain chain) . It' s possible that Polycarp' s project depends on two different versions of some project. In this case collision resolving is applied, i. e. for each such project the system chooses the version that minimizes the distance from it to Polycarp' s project. If there are several options, the newer ( with the maximum version) is preferred. This version is considered actual; other versions and their dependencies are ignored. More formal, choose such a set of projects of minimum possible size that the following conditions hold: Polycarp' s project is chosen; Polycarp' s project depends ( directly or indirectly) on all other projects in the set; no two projects share the name; for each project x that some other project in the set depends on we have either x or some y with other version and shorter chain to Polycarp' s project chosen. In case of ties the newer one is chosen. Output all Polycarp' s project' s dependencies ( Polycarp' s project itself should' t be printed) in lexicographical order.",
    "input": "The first line contains an only integer n ( 1 \u2264 n \u2264 1 000) \u2014 the number of projects in Vaja. The following lines contain the project descriptions. Each project is described by a line consisting of its name and version separated by space. The next line gives the number of direct dependencies ( from 0 to n - 1) and the dependencies themselves ( one in a line) in arbitrary order. Each dependency is specified by its name and version. The projects are also given in arbitrary order, but the first of them is always Polycarp' s. Project descriptions are separated by one empty line. Refer to samples for better understanding. It' s guaranteed that there are no cyclic dependencies.",
    "output": "Output all Polycarp' s project' s dependencies in lexicographical order.",
    "note": "The first sample is given in the pic below. Arrow from A to B means that B directly depends on A. Projects that Polycarp' s project \u00aba\u00bb ( version 3) depends on are painted black. The second sample is again given in the pic below. Arrow from A to B means that B directly depends on A. Projects that Polycarp' s project \u00abcodehorses\u00bb ( version 5) depends on are paint it black. Note that \u00abextra 1\u00bb is chosen instead of \u00abextra 3\u00bb since \u00abmashadb 1\u00bb and all of its dependencies are ignored due to \u00abmashadb 2\u00bb.",
    "topics": [
      "*special",
      "graphs",
      "implementation"
    ],
    "id": "928C"
  },
  {
    "title": "Public Service",
    "url": "https://codeforces.com/problemset/problem/923/F",
    "history": "There are N cities in Bob' s country connected by roads. Some pairs of cities are connected by public transport. There are two competing transport companies \u2014 Boblines operating buses and Bobrail running trains. When traveling from A to B, a passenger always first selects the mode of transport ( either bus or train) , and then embarks on a journey. For every pair of cities, there are exactly two ways of how to travel between them without visiting any city more than once \u2014 one using only bus routes, and the second using only train routes. Furthermore, there is no pair of cities that is directly connected by both a bus route and a train route. You obtained the plans of each of the networks. Unfortunately, each of the companies uses different names for the same cities. More precisely, the bus company numbers the cities using integers from 1 to N, while the train company uses integers between N + 1 and 2N. Find one possible mapping between those two numbering schemes, such that no pair of cities is connected directly by both a bus route and a train route. Note that this mapping has to map different cities to different cities.",
    "input": "The first line contains an integer N ( 2 \u2264 N \u2264 10000) , the number of cities. N - 1 lines follow, representing the network plan of Boblines. Each contains two integers u and v ( 1 \u2264 u, v \u2264 N) , meaning that there is a bus route between cities u and v. N - 1 lines follow, representing the network plan of Bobrail. Each contains two integers u and v ( N + 1 \u2264 u, v \u2264 2N) , meaning that there is a train route between cities u and v.",
    "output": "If there is no solution, output a single line with the word \" No\" . If a solution exists, output two lines. On the first line, there should be the word \" Yes\" . On the second line, there should be N integers P1, P2, . . . , PN ( N + 1 \u2264 Pi \u2264 2N) \u2014 the mapping between the two numbering schemes. More precisely, for i = \u0338 j it should be Pi = \u0338 Pj, and for every direct bus route ( i, j) , there is no direct train route between ( Pi, Pj) . If there are multiple solutions, you may print any of them.",
    "note": "The first sample ( bus lines in red and rail lines in blue) :",
    "topics": [
      "constructive algorithms",
      "graphs",
      "trees"
    ],
    "id": "923F"
  },
  {
    "title": "Connected Components?",
    "url": "https://codeforces.com/problemset/problem/920/E",
    "history": "You are given an undirected graph consisting of n vertices and edges. Instead of giving you the edges that exist in the graph, we give you m unordered pairs ( x, y) such that there is no edge between x and y, and if some pair of vertices is not listed in the input, then there is an edge between these vertices. You have to find the number of connected components in the graph and the size of each component. A connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting these vertices, but adding any other vertex to X violates this rule.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 200000, ) . Then m lines follow, each containing a pair of integers x and y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) denoting that there is no edge between x and y. Each pair is listed at most once; ( x, y) and ( y, x) are considered the same ( so they are never listed in the same test) . If some pair of vertices is not listed in the input, then there exists an edge between those vertices.",
    "output": "Firstly print k \u2014 the number of connected components in this graph. Then print k integers \u2014 the sizes of components. You should output these integers in non- descending order.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "920E"
  },
  {
    "title": "A Game With Numbers",
    "url": "https://codeforces.com/problemset/problem/919/F",
    "history": "Imagine that Alice is playing a card game with her friend Bob. They both have exactly 8 cards and there is an integer on each card, ranging from 0 to 4 . In each round, Alice or Bob in turns choose two cards from different players, let them be a and b , where a is the number on the player' s card, and b is the number on the opponent' s card. It is necessary that a \u00b7 b 0 . Then they calculate c = ( a + b) 5 and replace the number a with c . The player who ends up with numbers on all 8 cards being 0 , wins. Now Alice wants to know who wins in some situations. She will give you her cards' numbers, Bob' s cards' numbers and the person playing the first round. Your task is to determine who wins if both of them choose the best operation in their rounds.",
    "input": "The first line contains one positive integer T ( 1 \u2264 T \u2264 100 000 ) , denoting the number of situations you need to consider. The following lines describe those T situations. For each situation: The first line contains a non- negative integer f ( 0 \u2264 f \u2264 1 ) , where f = 0 means that Alice plays first and f = 1 means Bob plays first. The second line contains 8 non- negative integers a_ 1, a_ 2, . . . , a_ 8 ( 0 \u2264 a_ i \u2264 4 ) , describing Alice' s cards. The third line contains 8 non- negative integers b_ 1, b_ 2, . . . , b_ 8 ( 0 \u2264 b_ i \u2264 4 ) , describing Bob' s cards. We guarantee that if f= 0 , we have \u2211_ i= 1^ 8a_ i 0 . Also when f= 1 , \u2211_ i= 1^ 8b_ i 0 holds.",
    "output": "Output T lines. For each situation, determine who wins. Output \" Alice\" ( without quotes) if Alice wins. \" Bob\" ( without quotes) if Bob wins. \" Deal\" ( without quotes) if it gets into a deal, i. e. no one wins.",
    "note": "In the first situation, Alice has all her numbers 0 . So she wins immediately. In the second situation, Bob picks the numbers 4 and 1 . Because we have ( 4 + 1) 5 = 0 , Bob wins after this operation. In the third situation, Alice picks the numbers 1 and 4 . She wins after this operation. In the fourth situation, we can prove that it falls into a loop.",
    "topics": [
      "games",
      "graphs",
      "shortest paths"
    ],
    "id": "919F"
  },
  {
    "title": "Substring",
    "url": "https://codeforces.com/problemset/problem/919/D",
    "history": "You are given a graph with n nodes and m directed edges. One lowercase letter is assigned to each node. We define a path' s value as the number of the most frequently occurring letter. For example, if letters on a path are \" abaca\" , then the value of that path is 3 . Your task is find a path whose value is the largest.",
    "input": "The first line contains two positive integers n, m ( 1 \u2264 n, m \u2264 300 000 ) , denoting that the graph has n nodes and m directed edges. The second line contains a string s with only lowercase English letters. The i - th character is the letter assigned to the i - th node. Then m lines follow. Each line contains two integers x, y ( 1 \u2264 x, y \u2264 n ) , describing a directed edge from x to y . Note that x can be equal to y and there can be multiple edges between x and y . Also the graph can be not connected.",
    "output": "Output a single line with a single integer denoting the largest value. If the value can be arbitrarily large, output - 1 instead.",
    "note": "In the first sample, the path with largest value is 1 \u2192 3 \u2192 4 \u2192 5 . The value is 3 because the letter ' a' appears 3 times.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "919D"
  },
  {
    "title": "MADMAX",
    "url": "https://codeforces.com/problemset/problem/917/B",
    "history": "As we all know, Max is the best video game player among her friends. Her friends were so jealous of hers, that they created an actual game just to prove that she' s not the best at games. The game is played on a directed acyclic graph ( a DAG) with n vertices and m edges. There' s a character written on each edge, a lowercase English letter. Max and Lucas are playing the game. Max goes first, then Lucas, then Max again and so on. Each player has a marble, initially located at some vertex. Each player in his/ her turn should move his/ her marble along some edge ( a player can move the marble from vertex v to vertex u if there' s an outgoing edge from v to u) . If the player moves his/ her marble from vertex v to vertex u, the \" character\" of that round is the character written on the edge from v to u. There' s one additional rule; the ASCII code of character of round i should be greater than or equal to the ASCII code of character of round i - 1 ( for i > 1) . The rounds are numbered for both players together, i. e. Max goes in odd numbers, Lucas goes in even numbers. The player that can' t make a move loses the game. The marbles may be at the same vertex at the same time. Since the game could take a while and Lucas and Max have to focus on finding Dart, they don' t have time to play. So they asked you, if they both play optimally, who wins the game? You have to determine the winner of the game for all initial positions of the marbles.",
    "input": "The first line of input contains two integers n and m ( 2 \u2264 n \u2264 100, ) . The next m lines contain the edges. Each line contains two integers v, u and a lowercase English letter c, meaning there' s an edge from v to u written c on it ( 1 \u2264 v, u \u2264 n, v = \u0338 u) . There' s at most one edge between any pair of vertices. It is guaranteed that the graph is acyclic.",
    "output": "Print n lines, a string of length n in each one. The j- th character in i- th line should be ' A' if Max will win the game in case her marble is initially at vertex i and Lucas' s marble is initially at vertex j, and ' B' otherwise.",
    "note": "Here' s the graph in the first sample test case: Here' s the graph in the second sample test case:",
    "topics": [
      "dfs and similar",
      "dp",
      "games",
      "graphs"
    ],
    "id": "917B"
  },
  {
    "title": "Jamie and Interesting Graph",
    "url": "https://codeforces.com/problemset/problem/916/C",
    "history": "Jamie has recently found undirected weighted graphs with the following properties very interesting: The graph is connected and contains exactly n vertices and m edges. All edge weights are integers and are in range [ 1, 109] inclusive. The length of shortest path from 1 to n is a prime number. The sum of edges' weights in the minimum spanning tree ( MST) of the graph is a prime number. The graph contains no loops or multi- edges. If you are not familiar with some terms from the statement you can find definitions of them in notes section. Help Jamie construct any graph with given number of vertices and edges that is interesting!",
    "input": "First line of input contains 2 integers n, m \u2014 the required number of vertices and edges.",
    "output": "In the first line output 2 integers sp, mstw ( 1 \u2264 sp, mstw \u2264 1014) \u2014 the length of the shortest path and the sum of edges' weights in the minimum spanning tree. In the next m lines output the edges of the graph. In each line output 3 integers u, v, w ( 1 \u2264 u, v \u2264 n, 1 \u2264 w \u2264 109) describing the edge connecting u and v and having weight w.",
    "note": "The graph of sample 1: Shortest path sequence: 1, 2, 3, 4. MST edges are marked with an asterisk ( * ) . Definition of terms used in the problem statement: A shortest path in an undirected graph is a sequence of vertices ( v1, v2, . . . , vk) such that vi is adjacent to vi + 1 1 \u2264 i < k and the sum of weight is minimized where w( i, j) is the edge weight between i and j. ( https: / / en. wikipedia. org/ wiki/ Shortest_ path_ problem) A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. ( https: / / en. wikipedia. org/ wiki/ Prime_ number) A minimum spanning tree ( MST) is a subset of the edges of a connected, edge- weighted undirected graph that connects all the vertices together, without any cycles and with the minimum possible total edge weight. ( https: / / en. wikipedia. org/ wiki/ Minimum_ spanning_ tree) https: / / en. wikipedia. org/ wiki/ Multiple_ edges",
    "topics": [
      "constructive algorithms",
      "graphs",
      "shortest paths"
    ],
    "id": "916C"
  },
  {
    "title": "Imbalance Value of a Tree",
    "url": "https://codeforces.com/problemset/problem/915/F",
    "history": "You are given a tree T consisting of n vertices. A number is written on each vertex; the number written on vertex i is ai. Let' s denote the function I( x, y) as the difference between maximum and minimum value of ai on a simple path connecting vertices x and y. Your task is to calculate .",
    "input": "The first line contains one integer number n ( 1 \u2264 n \u2264 106) \u2014 the number of vertices in the tree. The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) \u2014 the numbers written on the vertices. Then n - 1 lines follow. Each line contains two integers x and y denoting an edge connecting vertex x and vertex y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) . It is guaranteed that these edges denote a tree.",
    "output": "Print one number equal to .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "915F"
  },
  {
    "title": "Almost Acyclic Graph",
    "url": "https://codeforces.com/problemset/problem/915/D",
    "history": "You are given a directed graph consisting of n vertices and m edges ( each edge is directed, so it can be traversed in only one direction) . You are allowed to remove at most one edge from it. Can you make this graph acyclic by removing at most one edge from it? A directed graph is called acyclic iff it doesn' t contain any cycle ( a non- empty path that starts and ends in the same vertex) .",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 500, 1 \u2264 m \u2264 min( n( n - 1) , 100000) ) \u2014 the number of vertices and the number of edges, respectively. Then m lines follow. Each line contains two integers u and v denoting a directed edge going from vertex u to vertex v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) . Each ordered pair ( u, v) is listed at most once ( there is at most one directed edge from u to v) .",
    "output": "If it is possible to make this graph acyclic by removing at most one edge, print YES. Otherwise, print NO.",
    "note": "In the first example you can remove edge , and the graph becomes acyclic. In the second example you have to remove at least two edges ( for example, and ) in order to make the graph acyclic.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "915D"
  },
  {
    "title": "Strongly Connected Tournament",
    "url": "https://codeforces.com/problemset/problem/913/F",
    "history": "There is a chess tournament in All- Right- City. n players were invited to take part in the competition. The tournament is held by the following rules: Initially, each player plays one game with every other player. There are no ties; After that, the organizers build a complete directed graph with players as vertices. For every pair of players there is exactly one directed edge between them: the winner of their game is the startpoint of this edge and the loser is the endpoint; After that, the organizers build a condensation of this graph. The condensation of this graph is an acyclic complete graph, therefore it has the only Hamiltonian path which consists of strongly connected components of initial graph A1 \u2192 A2 \u2192 . . . \u2192 Ak. The players from the first component A1 are placed on the first places, the players from the component A2 are placed on the next places, and so on. To determine exact place of each player in a strongly connected component, all the procedures from 1 to 5 are repeated recursively inside each component, i. e. for every i = 1, 2, . . . , k players from the component Ai play games with each other again, and so on; If a component consists of a single player, then he has no more rivals, his place is already determined and the process stops. The players are enumerated with integers from 1 to n. The enumeration was made using results of a previous tournament. It is known that player i wins player j ( i < j) with probability p. You need to help to organize the tournament. Find the expected value of total number of games played by all the players. It can be shown that the answer can be represented as , where P and Q are coprime integers and . Print the value of P\u00b7Q - 1 modulo 998244353. If you are not familiar with any of the terms above, you can read about them here.",
    "input": "The first line of input contains a single integer n ( 2 \u2264 n \u2264 2000) \u2014 the number of players. The second line contains two integers a and b ( 1 \u2264 a < b \u2264 100) \u2014 the numerator and the denominator of fraction .",
    "output": "In the only line print the expected value of total number of games played by all the players. Print the answer using the format above.",
    "note": "In the first example the expected value is 4. In the second example the expected value is . In the third example the expected value is .",
    "topics": [
      "dp",
      "graphs",
      "math",
      "probabilities"
    ],
    "id": "913F"
  },
  {
    "title": "Fishes",
    "url": "https://codeforces.com/problemset/problem/912/D",
    "history": "While Grisha was celebrating New Year with Ded Moroz, Misha gifted Sasha a small rectangular pond of size n \u00d7 m, divided into cells of size 1 \u00d7 1, inhabited by tiny evil fishes ( no more than one fish per cell, otherwise they' ll strife! ) . The gift bundle also includes a square scoop of size r \u00d7 r, designed for fishing. If the lower- left corner of the scoop- net is located at cell ( x, y) , all fishes inside the square ( x, y) . . . ( x + r - 1, y + r - 1) get caught. Note that the scoop- net should lie completely inside the pond when used. Unfortunately, Sasha is not that skilled in fishing and hence throws the scoop randomly. In order to not frustrate Sasha, Misha decided to release k fishes into the empty pond in such a way that the expected value of the number of caught fishes is as high as possible. Help Misha! In other words, put k fishes in the pond into distinct cells in such a way that when the scoop- net is placed into a random position among ( n - r + 1) \u00b7( m - r + 1) possible positions, the average number of caught fishes is as high as possible.",
    "input": "The only line contains four integers n, m, r, k ( 1 \u2264 n, m \u2264 105, 1 \u2264 r \u2264 min( n, m) , 1 \u2264 k \u2264 min( n\u00b7m, 105) ) .",
    "output": "Print a single number \u2014 the maximum possible expected number of caught fishes. You answer is considered correct, is its absolute or relative error does not exceed 10 - 9. Namely, let your answer be a, and the jury' s answer be b. Your answer is considered correct, if .",
    "note": "In the first example you can put the fishes in cells ( 2, 1) , ( 2, 2) , ( 2, 3) . In this case, for any of four possible positions of the scoop- net ( highlighted with light green) , the number of fishes inside is equal to two, and so is the expected value.",
    "topics": [
      "data structures",
      "graphs",
      "greedy",
      "probabilities",
      "shortest paths"
    ],
    "id": "912D"
  },
  {
    "title": "Tree Destruction",
    "url": "https://codeforces.com/problemset/problem/911/F",
    "history": "You are given an unweighted tree with n vertices. Then n - 1 following operations are applied to the tree. A single operation consists of the following steps: choose two leaves; add the length of the simple path between them to the answer; remove one of the chosen leaves from the tree. Initial answer ( before applying operations) is 0. Obviously after n - 1 such operations the tree will consist of a single vertex. Calculate the maximal possible answer you can achieve, and construct a sequence of operations that allows you to achieve this answer!",
    "input": "The first line contains one integer number n ( 2 \u2264 n \u2264 2\u00b7105) \u2014 the number of vertices in the tree. Next n - 1 lines describe the edges of the tree in form ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . It is guaranteed that given graph is a tree.",
    "output": "In the first line print one integer number \u2014 maximal possible answer. In the next n - 1 lines print the operations in order of their applying in format ai, bi, ci, where ai, bi \u2014 pair of the leaves that are chosen in the current operation ( 1 \u2264 ai, bi \u2264 n) , ci ( 1 \u2264 ci \u2264 n, ci = ai or ci = bi) \u2014 choosen leaf that is removed from the tree in the current operation. See the examples for better understanding.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "911F"
  },
  {
    "title": "Coprocessor",
    "url": "https://codeforces.com/problemset/problem/909/E",
    "history": "You are given a program you want to execute as a set of tasks organized in a dependency graph. The dependency graph is a directed acyclic graph: each task can depend on results of one or several other tasks, and there are no directed circular dependencies between tasks. A task can only be executed if all tasks it depends on have already completed. Some of the tasks in the graph can only be executed on a coprocessor, and the rest can only be executed on the main processor. In one coprocessor call you can send it a set of tasks which can only be executed on it. For each task of the set, all tasks on which it depends must be either already completed or be included in the set. The main processor starts the program execution and gets the results of tasks executed on the coprocessor automatically. Find the minimal number of coprocessor calls which are necessary to execute the given program.",
    "input": "The first line contains two space- separated integers N ( 1 \u2264 N \u2264 105) \u2014 the total number of tasks given, and M ( 0 \u2264 M \u2264 105) \u2014 the total number of dependencies between tasks. The next line contains N space- separated integers . If Ei = 0, task i can only be executed on the main processor, otherwise it can only be executed on the coprocessor. The next M lines describe the dependencies between tasks. Each line contains two space- separated integers T1 and T2 and means that task T1 depends on task T2 ( T1 = \u0338 T2) . Tasks are indexed from 0 to N - 1. All M pairs ( T1, T2) are distinct. It is guaranteed that there are no circular dependencies between tasks.",
    "output": "Output one line containing an integer \u2014 the minimal number of coprocessor calls necessary to execute the program.",
    "note": "In the first test, tasks 1 and 3 can only be executed on the coprocessor. The dependency graph is linear, so the tasks must be executed in order 3 - > 2 - > 1 - > 0. You have to call coprocessor twice: first you call it for task 3, then you execute task 2 on the main processor, then you call it for for task 1, and finally you execute task 0 on the main processor. In the second test, tasks 0, 1 and 2 can only be executed on the coprocessor. Tasks 1 and 2 have no dependencies, and task 0 depends on tasks 1 and 2, so all three tasks 0, 1 and 2 can be sent in one coprocessor call. After that task 3 is executed on the main processor.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "909E"
  },
  {
    "title": "New Year and Rainbow Roads",
    "url": "https://codeforces.com/problemset/problem/908/F",
    "history": "Roy and Biv have a set of n points on the infinite number line. Each point has one of 3 colors: red, green, or blue. Roy and Biv would like to connect all the points with some edges. Edges can be drawn between any of the two of the given points. The cost of an edge is equal to the distance between the two points it connects. They want to do this in such a way that they will both see that all the points are connected ( either directly or indirectly) . However, there is a catch: Roy cannot see the color red and Biv cannot see the color blue. Therefore, they have to choose the edges in such a way that if all the red points are removed, the remaining blue and green points are connected ( and similarly, if all the blue points are removed, the remaining red and green points are connected) . Help them compute the minimum cost way to choose edges to satisfy the above constraints.",
    "input": "The first line will contain an integer n ( 1 \u2264 n \u2264 300 000) , the number of points. The next n lines will contain two tokens pi and ci ( pi is an integer, 1 \u2264 pi \u2264 109, ci is a uppercase English letter ' R' , ' G' or ' B' ) , denoting the position of the i- th point and the color of the i- th point. ' R' means red, ' G' denotes green, and ' B' means blue. The positions will be in strictly increasing order.",
    "output": "Print a single integer, the minimum cost way to solve the problem.",
    "note": "In the first sample, it is optimal to draw edges between the points ( 1, 2) , ( 1, 4) , ( 3, 4) . These have costs 4, 14, 5, respectively.",
    "topics": [
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "908F"
  },
  {
    "title": "Party",
    "url": "https://codeforces.com/problemset/problem/906/C",
    "history": "Arseny likes to organize parties and invite people to it. However, not only friends come to his parties, but friends of his friends, friends of friends of his friends and so on. That' s why some of Arseny' s guests can be unknown to him. He decided to fix this issue using the following procedure. At each step he selects one of his guests A, who pairwise introduces all of his friends to each other. After this action any two friends of A become friends. This process is run until all pairs of guests are friends. Arseny doesn' t want to spend much time doing it, so he wants to finish this process using the minimum number of steps. Help Arseny to do it.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 22; ) \u2014 the number of guests at the party ( including Arseny) and the number of pairs of people which are friends. Each of the next m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n; u = \u0338 v) , which means that people with numbers u and v are friends initially. It' s guaranteed that each pair of friends is described not more than once and the graph of friendship is connected.",
    "output": "In the first line print the minimum number of steps required to make all pairs of guests friends. In the second line print the ids of guests, who are selected at each step. If there are multiple solutions, you can output any of them.",
    "note": "In the first test case there is no guest who is friend of all other guests, so at least two steps are required to perform the task. After second guest pairwise introduces all his friends, only pairs of guests ( 4, 1) and ( 4, 2) are not friends. Guest 3 or 5 can introduce them. In the second test case guest number 1 is a friend of all guests, so he can pairwise introduce all guests in one step.",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "graphs"
    ],
    "id": "906C"
  },
  {
    "title": "Yet Another Maxflow Problem",
    "url": "https://codeforces.com/problemset/problem/903/G",
    "history": "In this problem you will have to deal with a very special network. The network consists of two parts: part A and part B. Each part consists of n vertices; i- th vertex of part A is denoted as Ai, and i- th vertex of part B is denoted as Bi. For each index i ( 1 \u2264 i < n) there is a directed edge from vertex Ai to vertex Ai + 1, and from Bi to Bi + 1, respectively. Capacities of these edges are given in the input. Also there might be several directed edges going from part A to part B ( but never from B to A) . You have to calculate the maximum flow value from A1 to Bn in this network. Capacities of edges connecting Ai to Ai + 1 might sometimes change, and you also have to maintain the maximum flow value after these changes. Apart from that, the network is fixed ( there are no changes in part B, no changes of edges going from A to B, and no edge insertions or deletions) . Take a look at the example and the notes to understand the structure of the network better.",
    "input": "The first line contains three integer numbers n, m and q ( 2 \u2264 n, m \u2264 2\u00b7105, 0 \u2264 q \u2264 2\u00b7105) \u2014 the number of vertices in each part, the number of edges going from A to B and the number of changes, respectively. Then n - 1 lines follow, i- th line contains two integers xi and yi denoting that the edge from Ai to Ai + 1 has capacity xi and the edge from Bi to Bi + 1 has capacity yi ( 1 \u2264 xi, yi \u2264 109) . Then m lines follow, describing the edges from A to B. Each line contains three integers x, y and z denoting an edge from Ax to By with capacity z ( 1 \u2264 x, y \u2264 n, 1 \u2264 z \u2264 109) . There might be multiple edges from Ax to By. And then q lines follow, describing a sequence of changes to the network. i- th line contains two integers vi and wi, denoting that the capacity of the edge from Avi to Avi + 1 is set to wi ( 1 \u2264 vi < n, 1 \u2264 wi \u2264 109) .",
    "output": "Firstly, print the maximum flow value in the original network. Then print q integers, i- th of them must be equal to the maximum flow value after i- th change.",
    "note": "This is the original network in the example:",
    "topics": [
      "data structures",
      "flows",
      "graphs"
    ],
    "id": "903G"
  },
  {
    "title": "Weighting a Tree",
    "url": "https://codeforces.com/problemset/problem/901/D",
    "history": "You are given a connected undirected graph with n vertices and m edges. The vertices are enumerated from 1 to n. You are given n integers c1, c2, . . . , cn, each of them is between - n and n, inclusive. It is also guaranteed that the parity of cv equals the parity of degree of vertex v. The degree of a vertex is the number of edges connected to it. You are to write a weight between - 2\u00b7n2 and 2\u00b7n2 ( inclusive) on each edge in such a way, that for each vertex v the sum of weights on edges connected to this vertex is equal to cv, or determine that this is impossible.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105, n - 1 \u2264 m \u2264 105) \u2014 the number of vertices and the number of edges. The next line contains n integers c1, c2, . . . , cn ( - n \u2264 ci \u2264 n) , where ci is the required sum of weights of edges connected to vertex i. It is guaranteed that the parity of ci equals the parity of degree of vertex i. The next m lines describe edges of the graph. The i- th of these lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , meaning that the i- th edge connects vertices ai and bi. It is guaranteed that the given graph is connected and does not contain loops and multiple edges.",
    "output": "If there is no solution, print \" NO\" . Otherwise print \" YES\" and then m lines, the i- th of them is the weight of the i- th edge wi ( - 2\u00b7n2 \u2264 wi \u2264 2\u00b7n2) .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "901D"
  },
  {
    "title": "Bipartite Segments",
    "url": "https://codeforces.com/problemset/problem/901/C",
    "history": "You are given an undirected graph with n vertices. There are no edge- simple cycles with the even length in it. In other words, there are no cycles of even length that pass each edge at most once. Let' s enumerate vertices from 1 to n. You have to answer q queries. Each query is described by a segment of vertices [ l; r] , and you have to count the number of its subsegments [ x; y] ( l \u2264 x \u2264 y \u2264 r) , such that if we delete all vertices except the segment of vertices [ x; y] ( including x and y) and edges between them, the resulting graph is bipartite.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 3\u00b7105, 1 \u2264 m \u2264 3\u00b7105) \u2014 the number of vertices and the number of edges in the graph. The next m lines describe edges in the graph. The i- th of these lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , denoting an edge between vertices ai and bi. It is guaranteed that this graph does not contain edge- simple cycles of even length. The next line contains a single integer q ( 1 \u2264 q \u2264 3\u00b7105) \u2014 the number of queries. The next q lines contain queries. The i- th of these lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 n) \u2014 the query parameters.",
    "output": "Print q numbers, each in new line: the i- th of them should be the number of subsegments [ x; y] ( li \u2264 x \u2264 y \u2264 ri) , such that the graph that only includes vertices from segment [ x; y] and edges between them is bipartite.",
    "note": "The first example is shown on the picture below: For the first query, all subsegments of [ 1; 3] , except this segment itself, are suitable. For the first query, all subsegments of [ 4; 6] , except this segment itself, are suitable. For the third query, all subsegments of [ 1; 6] are suitable, except [ 1; 3] , [ 1; 4] , [ 1; 5] , [ 1; 6] , [ 2; 6] , [ 3; 6] , [ 4; 6] . The second example is shown on the picture below:",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "two pointers"
    ],
    "id": "901C"
  },
  {
    "title": "Dividing the numbers",
    "url": "https://codeforces.com/problemset/problem/899/C",
    "history": "Petya has n integers: 1, 2, 3, . . . , n. He wants to split these integers in two non- empty groups in such a way that the absolute difference of sums of integers in each group is as small as possible. Help Petya to split the integers. Each of n integers should be exactly in one group.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 60 000) \u2014 the number of integers Petya has.",
    "output": "Print the smallest possible absolute difference in the first line. In the second line print the size of the first group, followed by the integers in that group. You can print these integers in arbitrary order. If there are multiple answers, print any of them.",
    "note": "In the first example you have to put integers 1 and 4 in the first group, and 2 and 3 in the second. This way the sum in each group is 5, and the absolute difference is 0. In the second example there are only two integers, and since both groups should be non- empty, you have to put one integer in the first group and one in the second. This way the absolute difference of sums of integers in each group is 1.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math"
    ],
    "id": "899C"
  },
  {
    "title": "Ralph and Mushrooms",
    "url": "https://codeforces.com/problemset/problem/894/E",
    "history": "Ralph is going to collect mushrooms in the Mushroom Forest. There are m directed paths connecting n trees in the Mushroom Forest. On each path grow some mushrooms. When Ralph passes a path, he collects all the mushrooms on the path. The Mushroom Forest has a magical fertile ground where mushrooms grow at a fantastic speed. New mushrooms regrow as soon as Ralph finishes mushroom collection on a path. More specifically, after Ralph passes a path the i- th time, there regrow i mushrooms less than there was before this pass. That is, if there is initially x mushrooms on a path, then Ralph will collect x mushrooms for the first time, x - 1 mushrooms the second time, x - 1 - 2 mushrooms the third time, and so on. However, the number of mushrooms can never be less than 0. For example, let there be 9 mushrooms on a path initially. The number of mushrooms that can be collected from the path is 9, 8, 6 and 3 when Ralph passes by from first to fourth time. From the fifth time and later Ralph can' t collect any mushrooms from the path ( but still can pass it) . Ralph decided to start from the tree s. How many mushrooms can he collect using only described paths?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 106, 0 \u2264 m \u2264 106) , representing the number of trees and the number of directed paths in the Mushroom Forest, respectively. Each of the following m lines contains three integers x, y and w ( 1 \u2264 x, y \u2264 n, 0 \u2264 w \u2264 108) , denoting a path that leads from tree x to tree y with w mushrooms initially. There can be paths that lead from a tree to itself, and multiple paths between the same pair of trees. The last line contains a single integer s ( 1 \u2264 s \u2264 n) \u2014 the starting position of Ralph.",
    "output": "Print an integer denoting the maximum number of the mushrooms Ralph can collect during his route.",
    "note": "In the first sample Ralph can pass three times on the circle and collect 4 + 4 + 3 + 3 + 1 + 1 = 16 mushrooms. After that there will be no mushrooms for Ralph to collect. In the second sample, Ralph can go to tree 3 and collect 8 mushrooms on the path from tree 1 to tree 3.",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "894E"
  },
  {
    "title": "Rumor",
    "url": "https://codeforces.com/problemset/problem/893/C",
    "history": "Vova promised himself that he would never play computer games. . . But recently Firestorm \u2014 a well- known game developing company \u2014 published their newest game, World of Farcraft, and it became really popular. Of course, Vova started playing it. Now he tries to solve a quest. The task is to come to a settlement named Overcity and spread a rumor in it. Vova knows that there are n characters in Overcity. Some characters are friends to each other, and they share information they got. Also Vova knows that he can bribe each character so he or she starts spreading the rumor; i- th character wants ci gold in exchange for spreading the rumor. When a character hears the rumor, he tells it to all his friends, and they start spreading the rumor to their friends ( for free) , and so on. The quest is finished when all n characters know the rumor. What is the minimum amount of gold Vova needs to spend in order to finish the quest? Take a look at the notes if you think you haven' t understood the problem completely.",
    "input": "The first line contains two integer numbers n and m ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105) \u2014 the number of characters in Overcity and the number of pairs of friends. The second line contains n integer numbers ci ( 0 \u2264 ci \u2264 109) \u2014 the amount of gold i- th character asks to start spreading the rumor. Then m lines follow, each containing a pair of numbers ( xi, yi) which represent that characters xi and yi are friends ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) . It is guaranteed that each pair is listed at most once.",
    "output": "Print one number \u2014 the minimum amount of gold Vova has to spend in order to finish the quest.",
    "note": "In the first example the best decision is to bribe the first character ( he will spread the rumor to fourth character, and the fourth one will spread it to fifth) . Also Vova has to bribe the second and the third characters, so they know the rumor. In the second example Vova has to bribe everyone. In the third example the optimal decision is to bribe the first, the third, the fifth, the seventh and the ninth characters.",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "893C"
  },
  {
    "title": "Envy",
    "url": "https://codeforces.com/problemset/problem/891/C",
    "history": "For a connected undirected weighted graph G, MST ( minimum spanning tree) is a subgraph of G that contains all of G' s vertices, is a tree, and sum of its edges is minimum possible. You are given a graph G. If you run a MST algorithm on graph it would give you only one MST and it causes other edges to become jealous. You are given some queries, each query contains a set of edges of graph G, and you should determine whether there is a MST containing all these edges or not.",
    "input": "The first line contains two integers n, m ( 2 \u2264 n, m \u2264 5\u00b7105, n - 1 \u2264 m) \u2014 the number of vertices and edges in the graph and the number of queries. The i- th of the next m lines contains three integers ui, vi, wi ( ui = \u0338 vi, 1 \u2264 wi \u2264 5\u00b7105) \u2014 the endpoints and weight of the i- th edge. There can be more than one edges between two vertices. It' s guaranteed that the given graph is connected. The next line contains a single integer q ( 1 \u2264 q \u2264 5\u00b7105) \u2014 the number of queries. q lines follow, the i- th of them contains the i- th query. It starts with an integer ki ( 1 \u2264 ki \u2264 n - 1) \u2014 the size of edges subset and continues with ki distinct space- separated integers from 1 to m \u2014 the indices of the edges. It is guaranteed that the sum of ki for 1 \u2264 i \u2264 q does not exceed 5\u00b7105.",
    "output": "For each query you should print \" YES\" ( without quotes) if there' s a MST containing these edges and \" NO\" ( of course without quotes again) otherwise.",
    "note": "This is the graph of sample: Weight of minimum spanning tree on this graph is 6. MST with edges ( 1, 3, 4, 6) , contains all of edges from the first query, so answer on the first query is \" YES\" . Edges from the second query form a cycle of length 3, so there is no spanning tree including these three edges. Thus, answer is \" NO\" .",
    "topics": [
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "891C"
  },
  {
    "title": "Connecting Vertices",
    "url": "https://codeforces.com/problemset/problem/888/F",
    "history": "There are n points marked on the plane. The points are situated in such a way that they form a regular polygon ( marked points are its vertices, and they are numbered in counter- clockwise order) . You can draw n - 1 segments, each connecting any two marked points, in such a way that all points have to be connected with each other ( directly or indirectly) . But there are some restrictions. Firstly, some pairs of points cannot be connected directly and have to be connected undirectly. Secondly, the segments you draw must not intersect in any point apart from the marked points ( that is, if any two segments intersect and their intersection is not a marked point, then the picture you have drawn is invalid) . How many ways are there to connect all vertices with n - 1 segments? Two ways are considered different iff there exist some pair of points such that a segment is drawn between them in the first way of connection, but it is not drawn between these points in the second one. Since the answer might be large, output it modulo 109 + 7.",
    "input": "The first line contains one number n ( 3 \u2264 n \u2264 500) \u2014 the number of marked points. Then n lines follow, each containing n elements. ai, j ( j- th element of line i) is equal to 1 iff you can connect points i and j directly ( otherwise ai, j = 0) . It is guaranteed that for any pair of points ai, j = aj, i, and for any point ai, i = 0.",
    "output": "Print the number of ways to connect points modulo 109 + 7.",
    "note": "",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "888F"
  },
  {
    "title": "Restoration of string",
    "url": "https://codeforces.com/problemset/problem/886/D",
    "history": "A substring of some string is called the most frequent, if the number of its occurrences is not less than number of occurrences of any other substring. You are given a set of strings. A string ( not necessarily from this set) is called good if all elements of the set are the most frequent substrings of this string. Restore the non- empty good string with minimum length. If several such strings exist, restore lexicographically minimum string. If there are no good strings, print \" NO\" ( without quotes) . A substring of a string is a contiguous subsequence of letters in the string. For example, \" ab\" , \" c\" , \" abc\" are substrings of string \" abc\" , while \" ac\" is not a substring of that string. The number of occurrences of a substring in a string is the number of starting positions in the string where the substring occurs. These occurrences could overlap. String a is lexicographically smaller than string b, if a is a prefix of b, or a has a smaller letter at the first position where a and b differ.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of strings in the set. Each of the next n lines contains a non- empty string consisting of lowercase English letters. It is guaranteed that the strings are distinct. The total length of the strings doesn' t exceed 105.",
    "output": "Print the non- empty good string with minimum length. If several good strings exist, print lexicographically minimum among them. Print \" NO\" ( without quotes) if there are no good strings.",
    "note": "One can show that in the first sample only two good strings with minimum length exist: \" cfmailru\" and \" mailrucf\" . The first string is lexicographically minimum.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "886D"
  },
  {
    "title": "Anti-Palindromize",
    "url": "https://codeforces.com/problemset/problem/884/F",
    "history": "A string a of length m is called antipalindromic iff m is even, and for each i ( 1 \u2264 i \u2264 m) ai = \u0338 am - i + 1. Ivan has a string s consisting of n lowercase Latin letters; n is even. He wants to form some string t that will be an antipalindromic permutation of s. Also Ivan has denoted the beauty of index i as bi, and the beauty of t as the sum of bi among all indices i such that si = ti. Help Ivan to determine maximum possible beauty of t he can get.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 100, n is even) \u2014 the number of characters in s. The second line contains the string s itself. It consists of only lowercase Latin letters, and it is guaranteed that its letters can be reordered to form an antipalindromic string. The third line contains n integer numbers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 100) , where bi is the beauty of index i.",
    "output": "Print one number \u2014 the maximum possible beauty of t.",
    "note": "",
    "topics": [
      "flows",
      "graphs",
      "greedy"
    ],
    "id": "884F"
  },
  {
    "title": "Orientation of Edges",
    "url": "https://codeforces.com/problemset/problem/883/G",
    "history": "Vasya has a graph containing both directed ( oriented) and undirected ( non- oriented) edges. There can be multiple edges between a pair of vertices. Vasya has picked a vertex s from the graph. Now Vasya wants to create two separate plans: to orient each undirected edge in one of two possible directions to maximize number of vertices reachable from vertex s; to orient each undirected edge in one of two possible directions to minimize number of vertices reachable from vertex s. In each of two plans each undirected edge must become directed. For an edge chosen directions can differ in two plans. Help Vasya find the plans.",
    "input": "The first line contains three integers n, m and s ( 2 \u2264 n \u2264 3\u00b7105, 1 \u2264 m \u2264 3\u00b7105, 1 \u2264 s \u2264 n) \u2014 number of vertices and edges in the graph, and the vertex Vasya has picked. The following m lines contain information about the graph edges. Each line contains three integers ti, ui and vi ( 1 \u2264 ti \u2264 2, 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 edge type and vertices connected by the edge. If ti = 1 then the edge is directed and goes from the vertex ui to the vertex vi. If ti = 2 then the edge is undirected and it connects the vertices ui and vi. It is guaranteed that there is at least one undirected edge in the graph.",
    "output": "The first two lines should describe the plan which maximizes the number of reachable vertices. The lines three and four should describe the plan which minimizes the number of reachable vertices. A description of each plan should start with a line containing the number of reachable vertices. The second line of a plan should consist of f symbols ' + ' and ' - ' , where f is the number of undirected edges in the initial graph. Print ' + ' as the j- th symbol of the string if the j- th undirected edge ( u, v) from the input should be oriented from u to v. Print ' - ' to signify the opposite direction ( from v to u) . Consider undirected edges to be numbered in the same order they are given in the input. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "883G"
  },
  {
    "title": "Berland Army",
    "url": "https://codeforces.com/problemset/problem/883/B",
    "history": "There are n military men in the Berland army. Some of them have given orders to other military men by now. Given m pairs ( xi, yi) , meaning that the military man xi gave the i- th order to another military man yi. It is time for reform! The Berland Ministry of Defence plans to introduce ranks in the Berland army. Each military man should be assigned a rank \u2014 integer number between 1 and k, inclusive. Some of them have been already assigned a rank, but the rest of them should get a rank soon. Help the ministry to assign ranks to the rest of the army so that: for each of m orders it is true that the rank of a person giving the order ( military man xi) is strictly greater than the rank of a person receiving the order ( military man yi) ; for each rank from 1 to k there is at least one military man with this rank.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n \u2264 2\u00b7105, 0 \u2264 m \u2264 2\u00b7105, 1 \u2264 k \u2264 2\u00b7105) \u2014 number of military men in the Berland army, number of orders and number of ranks. The second line contains n integers r1, r2, . . . , rn, where ri > 0 ( in this case 1 \u2264 ri \u2264 k) means that the i- th military man has been already assigned the rank ri; ri = 0 means the i- th military man doesn' t have a rank yet. The following m lines contain orders one per line. Each order is described with a line containing two integers xi, yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) . This line means that the i- th order was given by the military man xi to the military man yi. For each pair ( x, y) of military men there could be several orders from x to y.",
    "output": "Print n integers, where the i- th number is the rank of the i- th military man. If there are many solutions, print any of them. If there is no solution, print the only number - 1.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "883B"
  },
  {
    "title": "Tournament",
    "url": "https://codeforces.com/problemset/problem/878/C",
    "history": "Recently a tournament in k kinds of sports has begun in Berland. Vasya wants to make money on the bets. The scheme of the tournament is very mysterious and not fully disclosed. Competitions are held back to back, each of them involves two sportsmen who have not left the tournament yet. Each match can be held in any of the k kinds of sport. Loser leaves the tournament. The last remaining sportsman becomes the winner. Apart of this, the scheme can be arbitrary, it is not disclosed in advance. Vasya knows powers of sportsmen in each kind of sport. He believes that the sportsmen with higher power always wins. The tournament is held every year, and each year one new participant joins it. In the first tournament, only one sportsman has participated, in the second there were two sportsmen, and so on. Vasya has been watching the tournament for the last n years. Help him to find the number of possible winners for each of the n tournaments.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 5\u00b7104, 1 \u2264 k \u2264 10) \u2014 the number of tournaments and the number of kinds of sport, respectively. Each of the next n lines contains k integers si1, si2, . . . , sik ( 1 \u2264 sij \u2264 109) , where sij is the power of the i- th sportsman in the j- th kind of sport. The sportsman with higher powers always wins. It' s guaranteed that for any kind of sport all of these powers are distinct.",
    "output": "For each of the n tournaments output the number of contenders who can win.",
    "note": "In the first sample: In the first tournament there is only one sportsman, and he is the winner. In the second tournament, there are two sportsmen, and everyone can defeat another, depending on kind of sports. In the third tournament, the third sportsman in the strongest in both kinds of sports, so he is the winner regardless of the scheme.",
    "topics": [
      "data structures",
      "graphs"
    ],
    "id": "878C"
  },
  {
    "title": "Olya and Energy Drinks",
    "url": "https://codeforces.com/problemset/problem/877/D",
    "history": "Olya loves energy drinks. She loves them so much that her room is full of empty cans from energy drinks. Formally, her room can be represented as a field of n \u00d7 m cells, each cell of which is empty or littered with cans. Olya drank a lot of energy drink, so now she can run k meters per second. Each second she chooses one of the four directions ( up, down, left or right) and runs from 1 to k meters in this direction. Of course, she can only run through empty cells. Now Olya needs to get from cell ( x1, y1) to cell ( x2, y2) . How many seconds will it take her if she moves optimally? It' s guaranteed that cells ( x1, y1) and ( x2, y2) are empty. These cells can coincide.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m, k \u2264 1000) \u2014 the sizes of the room and Olya' s speed. Then n lines follow containing m characters each, the i- th of them contains on j- th position \" # \" , if the cell ( i, j) is littered with cans, and \" . \" otherwise. The last line contains four integers x1, y1, x2, y2 ( 1 \u2264 x1, x2 \u2264 n, 1 \u2264 y1, y2 \u2264 m) \u2014 the coordinates of the first and the last cells.",
    "output": "Print a single integer \u2014 the minimum time it will take Olya to get from ( x1, y1) to ( x2, y2) . If it' s impossible to get from ( x1, y1) to ( x2, y2) , print - 1.",
    "note": "In the first sample Olya should run 3 meters to the right in the first second, 2 meters down in the second second and 3 meters to the left in the third second. In second sample Olya should run to the right for 3 seconds, then down for 2 seconds and then to the left for 3 seconds. Olya does not recommend drinking energy drinks and generally believes that this is bad.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "877D"
  },
  {
    "title": "Royal Questions",
    "url": "https://codeforces.com/problemset/problem/875/F",
    "history": "In a medieval kingdom, the economic crisis is raging. Milk drops fall, Economic indicators are deteriorating every day, money from the treasury disappear. To remedy the situation, King Charles Sunnyface decided make his n sons- princes marry the brides with as big dowry as possible. In search of candidates, the king asked neighboring kingdoms, and after a while several delegations arrived with m unmarried princesses. Receiving guests, Karl learned that the dowry of the i th princess is wi of golden coins. Although the action takes place in the Middle Ages, progressive ideas are widespread in society, according to which no one can force a princess to marry a prince whom she does not like. Therefore, each princess has an opportunity to choose two princes, for each of which she is ready to become a wife. The princes were less fortunate, they will obey the will of their father in the matter of choosing a bride. Knowing the value of the dowry and the preferences of each princess, Charles wants to play weddings in such a way that the total dowry of the brides of all his sons would be as great as possible. At the same time to marry all the princes or princesses is not necessary. Each prince can marry no more than one princess, and vice versa, each princess can marry no more than one prince. Help the king to organize the marriage of his sons in the most profitable way for the treasury.",
    "input": "The first line contains two integers n, m ( 2 \u2264 n \u2264 200 000, 1 \u2264 m \u2264 200 000) \u2014 number of princes and princesses respectively. Each of following m lines contains three integers ai, bi, wi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 wi \u2264 10 000) \u2014 number of princes, which i- th princess is ready to marry and the value of her dowry.",
    "output": "Print the only integer \u2014 the maximum number of gold coins that a king can get by playing the right weddings.",
    "note": "",
    "topics": [
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "875F"
  },
  {
    "title": "National Property",
    "url": "https://codeforces.com/problemset/problem/875/C",
    "history": "You all know that the Library of Bookland is the largest library in the world. There are dozens of thousands of books in the library. Some long and uninteresting story was removed. . . The alphabet of Bookland is so large that its letters are denoted by positive integers. Each letter can be small or large, the large version of a letter x is denoted by x' . BSCII encoding, which is used everywhere in Bookland, is made in that way so that large letters are presented in the order of the numbers they are denoted by, and small letters are presented in the order of the numbers they are denoted by, but all large letters are before all small letters. For example, the following conditions hold: 2 < 3, 2' < 3' , 3' < 2. A word x1, x2, . . . , xa is not lexicographically greater than y1, y2, . . . , yb if one of the two following conditions holds: a \u2264 b and x1 = y1, . . . , xa = ya, i. e. the first word is the prefix of the second word; there is a position 1 \u2264 j \u2264 min( a, b) , such that x1 = y1, . . . , xj - 1 = yj - 1 and xj < yj, i. e. at the first position where the words differ the first word has a smaller letter than the second word has. For example, the word \" 3' 7 5\" is before the word \" 2 4' 6\" in lexicographical order. It is said that sequence of words is in lexicographical order if each word is not lexicographically greater than the next word in the sequence. Denis has a sequence of words consisting of small letters only. He wants to change some letters to large ( let' s call this process a capitalization) in such a way that the sequence of words is in lexicographical order. However, he soon realized that for some reason he can' t change a single letter in a single word. He only can choose a letter and change all of its occurrences in all words to large letters. He can perform this operation any number of times with arbitrary letters of Bookland' s alphabet. Help Denis to choose which letters he needs to capitalize ( make large) in order to make the sequence of words lexicographically ordered, or determine that it is impossible. Note that some words can be equal.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000) \u2014 the number of words and the number of letters in Bookland' s alphabet, respectively. The letters of Bookland' s alphabet are denoted by integers from 1 to m. Each of the next n lines contains a description of one word in format li, si, 1, si, 2, . . . , si, li ( 1 \u2264 li \u2264 100 000, 1 \u2264 si, j \u2264 m) , where li is the length of the word, and si, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence. It is guaranteed that the total length of all words is not greater than 100 000.",
    "output": "In the first line print \" Yes\" ( without quotes) , if it is possible to capitalize some set of letters in such a way that the sequence of words becomes lexicographically ordered. Otherwise, print \" No\" ( without quotes) . If the required is possible, in the second line print k \u2014 the number of letters Denis has to capitalize ( make large) , and in the third line print k distinct integers \u2014 these letters. Note that you don' t need to minimize the value k. You can print the letters in any order. If there are multiple answers, print any of them.",
    "note": "In the first example after Denis makes letters 2 and 3 large, the sequence looks like the following: 2' 1 1 3' 2' 1 1 The condition 2' < 1 holds, so the first word is not lexicographically larger than the second word. The second word is the prefix of the third word, so the are in lexicographical order. As the first letters of the third and the fourth words are the same, and 3' < 1, then the third word is not lexicographically larger than the fourth word. In the second example the words are in lexicographical order from the beginning, so Denis can do nothing. In the third example there is no set of letters such that if Denis capitalizes them, the sequence becomes lexicographically ordered.",
    "topics": [
      "2-sat",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "875C"
  },
  {
    "title": "Restore the Tree",
    "url": "https://codeforces.com/problemset/problem/871/E",
    "history": "Petya had a tree consisting of n vertices numbered with integers from 1 to n. Accidentally he lost his tree. Petya remembers information about k vertices: distances from each of them to each of the n tree vertices. Your task is to restore any tree that satisfies the information that Petya remembers or report that such tree doesn' t exist.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 30 000, 1 \u2264 k \u2264 min( 200, n) ) \u2014 the number of vertices in the tree and the number of vertices about which Petya remembers distance information. The following k lines contain remembered information. The i- th line contains n integers di, 1, di, 2, . . . , di, n ( 0 \u2264 di, j \u2264 n - 1) , where di, j \u2014 the distance to j- th vertex from the i- th vertex that Petya remembers.",
    "output": "If there are no suitable trees, print - 1. In the other case, print n - 1 lines: each line should contain two vertices connected by edge in the required tree. You can print edges and vertices in an edge in any order. The tree vertices are enumerated from 1 to n. If there are many solutions print any of them.",
    "note": "Picture for the first sample:",
    "topics": [
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "871E"
  },
  {
    "title": "Points, Lines and Ready-made Titles",
    "url": "https://codeforces.com/problemset/problem/870/E",
    "history": "You are given n distinct points on a plane with integral coordinates. For each point you can either draw a vertical line through it, draw a horizontal line through it, or do nothing. You consider several coinciding straight lines as a single one. How many distinct pictures you can get? Print the answer modulo 109 + 7.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of points. n lines follow. The ( i + 1) - th of these lines contains two integers xi, yi ( - 109 \u2264 xi, yi \u2264 109) \u2014 coordinates of the i- th point. It is guaranteed that all points are distinct.",
    "output": "Print the number of possible distinct pictures modulo 109 + 7.",
    "note": "In the first example there are two vertical and two horizontal lines passing through the points. You can get pictures with any subset of these lines. For example, you can get the picture containing all four lines in two ways ( each segment represents a line containing it) . The first way: The second way: In the second example you can work with two points independently. The number of pictures is 32 = 9.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "870E"
  },
  {
    "title": "The Overdosing Ubiquity",
    "url": "https://codeforces.com/problemset/problem/869/D",
    "history": "The fundamental prerequisite for justice is not to be correct, but to be strong. That' s why justice is always the victor. The Cinderswarm Bee. Koyomi knows it. The bees, according to their nature, live in a tree. To be more specific, a complete binary tree with n nodes numbered from 1 to n. The node numbered 1 is the root, and the parent of the i- th ( 2 \u2264 i \u2264 n) node is . Note that, however, all edges in the tree are undirected. Koyomi adds m extra undirected edges to the tree, creating more complication to trick the bees. And you' re here to count the number of simple paths in the resulting graph, modulo 109 + 7. A simple path is an alternating sequence of adjacent nodes and undirected edges, which begins and ends with nodes and does not contain any node more than once. Do note that a single node is also considered a valid simple path under this definition. Please refer to the examples and notes below for instances.",
    "input": "The first line of input contains two space- separated integers n and m ( 1 \u2264 n \u2264 109, 0 \u2264 m \u2264 4) \u2014 the number of nodes in the tree and the number of extra edges respectively. The following m lines each contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) \u2014 describing an undirected extra edge whose endpoints are u and v. Note that there may be multiple edges between nodes in the resulting graph.",
    "output": "Output one integer \u2014 the number of simple paths in the resulting graph, modulo 109 + 7.",
    "note": "In the first example, the paths are: ( 1) ; ( 2) ; ( 3) ; ( 1, 2) ; ( 2, 1) ; ( 1, 3) ; ( 3, 1) ; ( 2, 1, 3) ; ( 3, 1, 2) . ( For the sake of clarity, the edges between nodes are omitted since there are no multiple edges in this case. ) In the second example, the paths are: ( 1) ; ( 1, 2) ; ( 1, 2, 3) ; ( 1, 3) ; ( 1, 3, 2) ; and similarly for paths starting with 2 and 3. ( 5 \u00d7 3 = 15 paths in total. ) In the third example, the paths are: ( 1) ; ( 2) ; any undirected edge connecting the two nodes travelled in either direction. ( 2 + 5 \u00d7 2 = 12 paths in total. )",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs"
    ],
    "id": "869D"
  },
  {
    "title": "Policeman and a Tree",
    "url": "https://codeforces.com/problemset/problem/868/E",
    "history": "You are given a tree ( a connected non- oriented graph without cycles) with vertices numbered from 1 to n, and the length of the i- th edge is wi. In the vertex s there is a policeman, in the vertices x1, x2, . . . , xm ( xj = \u0338 s) m criminals are located. The policeman can walk along the edges with speed 1, the criminals can move with arbitrary large speed. If a criminal at some moment is at the same point as the policeman, he instantly gets caught by the policeman. Determine the time needed for the policeman to catch all criminals, assuming everybody behaves optimally ( i. e. the criminals maximize that time, the policeman minimizes that time) . Everybody knows positions of everybody else at any moment of time.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 50) \u2014 the number of vertices in the tree. The next n - 1 lines contain three integers each: ui, vi, wi ( 1 \u2264 ui, vi \u2264 n, 1 \u2264 wi \u2264 50) denoting edges and their lengths. It is guaranteed that the given graph is a tree. The next line contains single integer s ( 1 \u2264 s \u2264 n) \u2014 the number of vertex where the policeman starts. The next line contains single integer m ( 1 \u2264 m \u2264 50) \u2014 the number of criminals. The next line contains m integers x1, x2, . . . , xm ( 1 \u2264 xj \u2264 n, xj = \u0338 s) \u2014 the number of vertices where the criminals are located. xj are not necessarily distinct.",
    "output": "If the policeman can' t catch criminals, print single line \" Terrorists win\" ( without quotes) . Otherwise, print single integer \u2014 the time needed to catch all criminals.",
    "note": "In the first example one of the optimal scenarios is the following. The criminal number 2 moves to vertex 3, the criminal 4 \u2014 to vertex 4. The policeman goes to vertex 4 and catches two criminals. After that the criminal number 1 moves to the vertex 2. The policeman goes to vertex 3 and catches criminal 2, then goes to the vertex 2 and catches the remaining criminal.",
    "topics": [
      "dp",
      "graphs",
      "trees"
    ],
    "id": "868E"
  },
  {
    "title": "Hex Dyslexia",
    "url": "https://codeforces.com/problemset/problem/865/E",
    "history": "Copying large hexadecimal ( base 16) strings by hand can be error prone, but that doesn' t stop people from doing it. You' ve discovered a bug in the code that was likely caused by someone making a mistake when copying such a string. You suspect that whoever copied the string did not change any of the digits in the string, nor the length of the string, but may have permuted the digits arbitrarily. For example, if the original string was 0abc they may have changed it to a0cb or 0bca, but not abc or 0abb. Unfortunately you don' t have access to the original string nor the copied string, but you do know the length of the strings and their numerical absolute difference. You will be given this difference as a hexadecimal string S, which has been zero- extended to be equal in length to the original and copied strings. Determine the smallest possible numerical value of the original string.",
    "input": "Input will contain a hexadecimal string S consisting only of digits 0 to 9 and lowercase English letters from a to f, with length at most 14. At least one of the characters is non- zero.",
    "output": "If it is not possible, print \" NO\" ( without quotes) . Otherwise, print the lowercase hexadecimal string corresponding to the smallest possible numerical value, including any necessary leading zeros for the length to be correct.",
    "note": "The numerical value of a hexadecimal string is computed by multiplying each digit by successive powers of 16, starting with the rightmost digit, which is multiplied by 160. Hexadecimal digits representing values greater than 9 are represented by letters: a = 10, b = 11, c = 12, d = 13, e = 14, f = 15. For example, the numerical value of 0f1e is 0\u00b7163 + 15\u00b7162 + 1\u00b7161 + 14\u00b7160 = 3870, the numerical value of 00f1 is 0\u00b7163 + 0\u00b7162 + 15\u00b7161 + 1\u00b7160 = 241, and the numerical value of 100f is 1\u00b7163 + 0\u00b7162 + 0\u00b7161 + 15\u00b7160 = 4111. Since 3870 + 241 = 4111 and 00f1 is a permutation of 100f, 00f1 is a valid answer to the second test case.",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "graphs"
    ],
    "id": "865E"
  },
  {
    "title": "Cities Excursions",
    "url": "https://codeforces.com/problemset/problem/864/F",
    "history": "There are n cities in Berland. Some pairs of them are connected with m directed roads. One can use only these roads to move from one city to another. There are no roads that connect a city to itself. For each pair of cities ( x, y) there is at most one road from x to y. A path from city s to city t is a sequence of cities p1, p2, . . . , pk, where p1 = s, pk = t, and there is a road from city pi to city pi + 1 for each i from 1 to k - 1. The path can pass multiple times through each city except t. It can' t pass through t more than once. A path p from s to t is ideal if it is the lexicographically minimal such path. In other words, p is ideal path from s to t if for any other path q from s to t pi < qi, where i is the minimum integer such that pi = \u0338 qi. There is a tourist agency in the country that offers q unusual excursions: the j- th excursion starts at city sj and ends in city tj. For each pair sj, tj help the agency to study the ideal path from sj to tj. Note that it is possible that there is no ideal path from sj to tj. This is possible due to two reasons: there is no path from sj to tj; there are paths from sj to tj, but for every such path p there is another path q from sj to tj, such that pi > qi, where i is the minimum integer for which pi = \u0338 qi. The agency would like to know for the ideal path from sj to tj the kj- th city in that path ( on the way from sj to tj) . For each triple sj, tj, kj ( 1 \u2264 j \u2264 q) find if there is an ideal path from sj to tj and print the kj- th city in that path, if there is any.",
    "input": "The first line contains three integers n, m and q ( 2 \u2264 n \u2264 3000, 0 \u2264 m \u2264 3000, 1 \u2264 q \u2264 4\u00b7105) \u2014 the number of cities, the number of roads and the number of excursions. Each of the next m lines contains two integers xi and yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) , denoting that the i- th road goes from city xi to city yi. All roads are one- directional. There can' t be more than one road in each direction between two cities. Each of the next q lines contains three integers sj, tj and kj ( 1 \u2264 sj, tj \u2264 n, sj = \u0338 tj, 1 \u2264 kj \u2264 3000) .",
    "output": "In the j- th line print the city that is the kj- th in the ideal path from sj to tj. If there is no ideal path from sj to tj, or the integer kj is greater than the length of this path, print the string ' - 1' ( without quotes) in the j- th line.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "864F"
  },
  {
    "title": "1-2-3",
    "url": "https://codeforces.com/problemset/problem/863/C",
    "history": "Ilya is working for the company that constructs robots. Ilya writes programs for entertainment robots, and his current project is \" Bob\" , a new- generation game robot. Ilya' s boss wants to know his progress so far. Especially he is interested if Bob is better at playing different games than the previous model, \" Alice\" . So now Ilya wants to compare his robots' performance in a simple game called \" 1- 2- 3\" . This game is similar to the \" Rock- Paper- Scissors\" game: both robots secretly choose a number from the set 1, 2, 3 and say it at the same moment. If both robots choose the same number, then it' s a draw and noone gets any points. But if chosen numbers are different, then one of the robots gets a point: 3 beats 2, 2 beats 1 and 1 beats 3. Both robots' programs make them choose their numbers in such a way that their choice in ( i + 1) - th game depends only on the numbers chosen by them in i- th game. Ilya knows that the robots will play k games, Alice will choose number a in the first game, and Bob will choose b in the first game. He also knows both robots' programs and can tell what each robot will choose depending on their choices in previous game. Ilya doesn' t want to wait until robots play all k games, so he asks you to predict the number of points they will have after the final game.",
    "input": "The first line contains three numbers k, a, b ( 1 \u2264 k \u2264 1018, 1 \u2264 a, b \u2264 3) . Then 3 lines follow, i- th of them containing 3 numbers Ai, 1, Ai, 2, Ai, 3, where Ai, j represents Alice' s choice in the game if Alice chose i in previous game and Bob chose j ( 1 \u2264 Ai, j \u2264 3) . Then 3 lines follow, i- th of them containing 3 numbers Bi, 1, Bi, 2, Bi, 3, where Bi, j represents Bob' s choice in the game if Alice chose i in previous game and Bob chose j ( 1 \u2264 Bi, j \u2264 3) .",
    "output": "Print two numbers. First of them has to be equal to the number of points Alice will have, and second of them must be Bob' s score after k games.",
    "note": "In the second example game goes like this: The fourth and the seventh game are won by Bob, the first game is draw and the rest are won by Alice.",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": "863C"
  },
  {
    "title": "Mahmoud and Ehab and the bipartiteness",
    "url": "https://codeforces.com/problemset/problem/862/B",
    "history": "Mahmoud and Ehab continue their adventures! As everybody in the evil land knows, Dr. Evil likes bipartite graphs, especially trees. A tree is a connected acyclic graph. A bipartite graph is a graph, whose vertices can be partitioned into 2 sets in such a way, that for each edge ( u, v) that belongs to the graph, u and v belong to different sets. You can find more formal definitions of a tree and a bipartite graph in the notes section below. Dr. Evil gave Mahmoud and Ehab a tree consisting of n nodes and asked them to add edges to it in such a way, that the graph is still bipartite. Besides, after adding these edges the graph should be simple ( doesn' t contain loops or multiple edges) . What is the maximum number of edges they can add? A loop is an edge, which connects a node with itself. Graph doesn' t contain multiple edges when for each pair of nodes there is no more than one edge between them. A cycle and a loop aren' t the same .",
    "input": "The first line of input contains an integer n \u2014 the number of nodes in the tree ( 1 \u2264 n \u2264 105) . The next n - 1 lines contain integers u and v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) \u2014 the description of the edges of the tree. It' s guaranteed that the given graph is a tree.",
    "output": "Output one integer \u2014 the maximum number of edges that Mahmoud and Ehab can add to the tree while fulfilling the conditions.",
    "note": "Tree definition: https: / / en. wikipedia. org/ wiki/ Tree_ ( graph_ theory) Bipartite graph definition: https: / / en. wikipedia. org/ wiki/ Bipartite_ graphIn the first test case the only edge that can be added in such a way, that graph won' t contain loops or multiple edges is ( 2, 3) , but adding this edge will make the graph non- bipartite so the answer is 0. In the second test case Mahmoud and Ehab can add edges ( 1, 4) and ( 2, 5) .",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "862B"
  },
  {
    "title": "Desk Disorder",
    "url": "https://codeforces.com/problemset/problem/859/E",
    "history": "A new set of desks just arrived, and it' s about time! Things were getting quite cramped in the office. You' ve been put in charge of creating a new seating chart for the engineers. The desks are numbered, and you sent out a survey to the engineering team asking each engineer the number of the desk they currently sit at, and the number of the desk they would like to sit at ( which may be the same as their current desk) . Each engineer must either remain where they sit, or move to the desired seat they indicated in the survey. No two engineers currently sit at the same desk, nor may any two engineers sit at the same desk in the new seating arrangement. How many seating arrangements can you create that meet the specified requirements? The answer may be very large, so compute it modulo 1000000007 = 109 + 7.",
    "input": "Input will begin with a line containing N ( 1 \u2264 N \u2264 100000) , the number of engineers. N lines follow, each containing exactly two integers. The i- th line contains the number of the current desk of the i- th engineer and the number of the desk the i- th engineer wants to move to. Desks are numbered from 1 to 2\u00b7N. It is guaranteed that no two engineers sit at the same desk.",
    "output": "Print the number of possible assignments, modulo 1000000007 = 109 + 7.",
    "note": "These are the possible assignments for the first example: 1 5 3 7 1 2 3 7 5 2 3 7 1 5 7 3 1 2 7 3 5 2 7 3",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "859E"
  },
  {
    "title": "Wizard's Tour",
    "url": "https://codeforces.com/problemset/problem/858/F",
    "history": "All Berland residents are waiting for an unprecedented tour of wizard in his Blue Helicopter over the cities of Berland! It is well- known that there are n cities in Berland, some pairs of which are connected by bidirectional roads. Each pair of cities is connected by no more than one road. It is not guaranteed that the road network is connected, i. e. it is possible that you can' t reach some city from some other. The tour will contain several episodes. In each of the episodes: the wizard will disembark at some city x from the Helicopter; he will give a performance and show a movie for free at the city x; he will drive to some neighboring city y using a road; he will give a performance and show a movie for free at the city y; he will drive to some neighboring to y city z; he will give a performance and show a movie for free at the city z; he will embark the Helicopter and fly away from the city z. It is known that the wizard doesn' t like to use roads, so he agrees to use each road at most once ( regardless of direction) . In other words, for road between a and b he only can drive once from a to b, or drive once from b to a, or do not use this road at all. The wizards wants to plan as many episodes as possible without violation the above rules. Help the wizard! Please note that the wizard can visit the same city multiple times, the restriction is on roads only.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 2\u00b7105, 0 \u2264 m \u2264 2\u00b7105) \u2014 the number of cities and the number of roads in Berland, respectively. The roads description follow, one in each line. Each description is a pair of two integers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , where ai and bi are the ids of the cities connected by the i- th road. It is guaranteed that there are no two roads connecting the same pair of cities. Every road is bidirectional. The cities are numbered from 1 to n. It is possible that the road network in Berland is not connected.",
    "output": "In the first line print w \u2014 the maximum possible number of episodes. The next w lines should contain the episodes in format x, y, z \u2014 the three integers denoting the ids of the cities in the order of the wizard' s visits.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "858F"
  },
  {
    "title": "Harry Vs Voldemort",
    "url": "https://codeforces.com/problemset/problem/855/G",
    "history": "After destroying all of Voldemort' s Horcruxes, Harry and Voldemort are up for the final battle. They each cast spells from their wands and the spells collide. The battle scene is Hogwarts, which can be represented in the form of a tree. There are, in total, n places in Hogwarts joined using n - 1 undirected roads. Ron, who was viewing this battle between Harry and Voldemort, wondered how many triplets of places ( u, v, w) are there such that if Harry is standing at place u and Voldemort is standing at place v, their spells collide at a place w. This is possible for a triplet only when u, v and w are distinct, and there exist paths from u to w and from v to w which do not pass through the same roads. Now, due to the battle havoc, new paths are being added all the time. You have to tell Ron the answer after each addition. Formally, you are given a tree with n vertices and n - 1 edges. q new edges are being added between the nodes of the tree. After each addition you need to tell the number of triplets ( u, v, w) such that u, v and w are distinct and there exist two paths, one between u and w, another between v and w such that these paths do not have an edge in common.",
    "input": "First line contains an integer n ( 1 \u2264 n \u2264 105) , the number of places in Hogwarts. Each of the next n - 1 lines contains two space separated integers u and v ( 1 \u2264 u, v \u2264 n) indicating a road between places u and v. It is guaranteed that the given roads form a connected tree. Next line contains a single integer q ( 1 \u2264 q \u2264 105) , the number of new edges being added. Each of the next q lines contains two space separated integers u and v ( 1 \u2264 u, v \u2264 n) representing the new road being added. Note that it is possible that a newly added road connects places that were connected by a road before. Also, a newly added road may connect a place to itself.",
    "output": "In the first line print the value for the number of triplets before any changes occurred. After that print q lines, a single integer ansi in each line containing the value for the number of triplets after i- th edge addition.",
    "note": "In the first sample case, for the initial tree, we have ( 1, 3, 2) and ( 3, 1, 2) as the only possible triplets ( u, v, w) . After addition of edge from 2 to 3, we have ( 1, 3, 2) , ( 3, 1, 2) , ( 1, 2, 3) and ( 2, 1, 3) as the possible triplets.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "855G"
  },
  {
    "title": "Dating",
    "url": "https://codeforces.com/problemset/problem/852/I",
    "history": "This story is happening in a town named BubbleLand. There are n houses in BubbleLand. In each of these n houses lives a boy or a girl. People there really love numbers and everyone has their favorite number f. That means that the boy or girl that lives in the i- th house has favorite number equal to fi. The houses are numerated with numbers 1 to n. The houses are connected with n - 1 bidirectional roads and you can travel from any house to any other house in the town. There is exactly one path between every pair of houses. A new dating had agency opened their offices in this mysterious town and the citizens were very excited. They immediately sent q questions to the agency and each question was of the following format: a b \u2014 asking how many ways are there to choose a couple ( boy and girl) that have the same favorite number and live in one of the houses on the unique path from house a to house b. Help the dating agency to answer the questions and grow their business.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) , the number of houses in the town. The second line contains n integers, where the i- th number is 1 if a boy lives in the i- th house or 0 if a girl lives in i- th house. The third line contains n integers, where the i- th number represents the favorite number fi ( 1 \u2264 fi \u2264 109) of the girl or boy that lives in the i- th house. The next n - 1 lines contain information about the roads and the i- th line contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n) which means that there exists road between those two houses. It is guaranteed that it' s possible to reach any house from any other. The following line contains an integer q ( 1 \u2264 q \u2264 105) , the number of queries. Each of the following q lines represents a question and consists of two integers a and b ( 1 \u2264 a, b \u2264 n) .",
    "output": "For each of the q questions output a single number, the answer to the citizens question.",
    "note": "In the first question from house 1 to house 3, the potential couples are ( 1, 3) and ( 6, 3) . In the second question from house 7 to house 5, the potential couples are ( 7, 6) , ( 4, 2) and ( 4, 5) .",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "852I"
  },
  {
    "title": "Tournament Construction",
    "url": "https://codeforces.com/problemset/problem/850/D",
    "history": "Ivan is reading a book about tournaments. He knows that a tournament is an oriented graph with exactly one oriented edge between each pair of vertices. The score of a vertex is the number of edges going outside this vertex. Yesterday Ivan learned Landau' s criterion: there is tournament with scores d1 \u2264 d2 \u2264 . . . \u2264 dn if and only if for all 1 \u2264 k < n and . Now, Ivan wanna solve following problem: given a set of numbers S = a1, a2, . . . , am, is there a tournament with given set of scores? I. e. is there tournament with sequence of scores d1, d2, . . . , dn such that if we remove duplicates in scores, we obtain the required set a1, a2, . . . , am? Find a tournament with minimum possible number of vertices.",
    "input": "The first line contains a single integer m ( 1 \u2264 m \u2264 31) . The next line contains m distinct integers a1, a2, . . . , am ( 0 \u2264 ai \u2264 30) \u2014 elements of the set S. It is guaranteed that all elements of the set are distinct.",
    "output": "If there are no such tournaments, print string \" = ( \" ( without quotes) . Otherwise, print an integer n \u2014 the number of vertices in the tournament. Then print n lines with n characters \u2014 matrix of the tournament. The j- th element in the i- th row should be 1 if the edge between the i- th and the j- th vertices is oriented towards the j- th vertex, and 0 otherwise. The main diagonal should contain only zeros.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "850D"
  },
  {
    "title": "Shake It!",
    "url": "https://codeforces.com/problemset/problem/848/D",
    "history": "A never- ending, fast- changing and dream- like world unfolds, as the secret door opens. A world is an unordered graph G, in whose vertex set V( G) there are two special vertices s( G) and t( G) . An initial world has vertex set s( G) , t( G) and an edge between them. A total of n changes took place in an initial world. In each change, a new vertex w is added into V( G) , an existing edge ( u, v) is chosen, and two edges ( u, w) and ( v, w) are added into E( G) . Note that it' s possible that some edges are chosen in more than one change. It' s known that the capacity of the minimum s- t cut of the resulting graph is m, that is, at least m edges need to be removed in order to make s( G) and t( G) disconnected. Count the number of non- similar worlds that can be built under the constraints, modulo 109 + 7. We define two worlds similar, if they are isomorphic and there is isomorphism in which the s and t vertices are not relabelled. Formally, two worlds G and H are considered similar, if there is a bijection between their vertex sets , such that: f( s( G) ) = s( H) ; f( t( G) ) = t( H) ; Two vertices u and v of G are adjacent in G if and only if f( u) and f( v) are adjacent in H.",
    "input": "The first and only line of input contains two space- separated integers n, m ( 1 \u2264 n, m \u2264 50) \u2014 the number of operations performed and the minimum cut, respectively.",
    "output": "Output one integer \u2014 the number of non- similar worlds that can be built, modulo 109 + 7.",
    "note": "In the first example, the following 6 worlds are pairwise non- similar and satisfy the constraints, with s( G) marked in green, t( G) marked in blue, and one of their minimum cuts in light blue. In the second example, the following 3 worlds satisfy the constraints.",
    "topics": [
      "combinatorics",
      "dp",
      "flows",
      "graphs"
    ],
    "id": "848D"
  },
  {
    "title": "Berland SU Computer Network",
    "url": "https://codeforces.com/problemset/problem/847/L",
    "history": "In the computer network of the Berland State University there are n routers numbered from 1 to n. Some pairs of routers are connected by patch cords. Information can be transmitted over patch cords in both direction. The network is arranged in such a way that communication between any two routers ( directly or through other routers) is possible. There are no cycles in the network, so there is only one path between each pair of routers over patch cords. Unfortunately, the exact topology of the network was lost by administrators. In order to restore it, the following auxiliary information was collected. For each patch cord p, directly connected to the router i, list of routers located behind the patch cord p relatively i is known. In other words, all routers path from which to the router i goes through p are known. So for each router i there are ki lists, where ki is the number of patch cords connected to i. For example, let the network consists of three routers connected in chain 1 - 2 - 3. Then: the router 1: for the single patch cord connected to the first router there is a single list containing two routers: 2 and 3; the router 2: for each of the patch cords connected to the second router there is a list: one list contains the router 1 and the other \u2014 the router 3; the router 3: for the single patch cord connected to the third router there is a single list containing two routers: 1 and 2. Your task is to help administrators to restore the network topology, i. e. to identify all pairs of routers directly connected by a patch cord.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 1000) \u2014 the number of routers in the network. The i- th of the following n lines contains a description of the lists for the router i. The description of each list begins with the number of routers in it. Then the symbol ' : ' follows, and after that the numbers of routers from the list are given. This numbers are separated by comma. Lists are separated by symbol ' - ' . It is guaranteed, that for each router i the total number of routers in its lists equals to n - 1 and all the numbers in lists of each router are distinct. For each router i lists do not contain the number i.",
    "output": "Print - 1 if no solution exists. In the other case print to the first line n - 1 \u2014 the total number of patch cords in the network. In each of the following n - 1 lines print two integers \u2014 the routers which are directly connected by a patch cord. Information about each patch cord must be printed exactly once. Patch cords and routers can be printed in arbitrary order.",
    "note": "The first example is analyzed in the statement. The answer to the second example is shown on the picture. The first router has one list, which contains all other routers. The second router has three lists: the first \u2014 the single router 4, the second \u2014 the single router 1, the third \u2014 two routers 3 and 5. The third router has one list, which contains all other routers. The fourth router also has one list, which contains all other routers. The fifth router has two lists: the first \u2014 the single router 3, the second \u2014 three routers 1, 2 and 4.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "hashing",
      "trees"
    ],
    "id": "847L"
  },
  {
    "title": "Students Initiation",
    "url": "https://codeforces.com/problemset/problem/847/J",
    "history": "Soon the first year students will be initiated into students at the University of Berland. The organizers of the initiation come up with a program for this holiday. In their opinion, it would be good if the first- year students presented small souvenirs to each other. When they voiced this idea to the first- year students, they found out the following: some pairs of the new students already know each other; each new student agrees to give souvenirs only to those with whom they are already familiar; each new student does not want to present too many souvenirs. The organizers have written down all the pairs of first- year friends who are familiar with each other and now want to determine for each new student, whom they should give souvenirs to. In their opinion, in each pair of familiar students exactly one student must present a souvenir to another student. First year students already decided to call the unluckiest the one who will have to present the greatest number of souvenirs. The organizers in return promised that the unluckiest will be unlucky to the minimum possible degree: of course, they will have to present the greatest number of souvenirs compared to the other students, but this number will be as small as possible. Organizers are very busy, and they asked you to determine for each pair of first- year friends who and to whom should present a souvenir.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 5000, 0 \u2264 m \u2264 min( 5000, n\u00b7( n - 1) / 2) ) \u2014 the number of the first year students and the number of pairs of the students that know each other. The students are numbered from 1 to n. Each of the following m lines contains two integers xi, yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) \u2014 the students in each pair. It is guaranteed that each pair is present in the list exactly once. It is also guaranteed that if there is a pair ( xi, yi) in the list, then there is no pair ( yi, xi) .",
    "output": "Print a single integer into the first line \u2014 the smallest number of souvenirs that the unluckiest student will have to present. Following should be m lines, each containing two integers \u2014 the students which are familiar with each other. The first number in the pair must be the student that will present the souvenir to the second student in the pair. Pairs can be printed in any order. If there are many solutions, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "flows",
      "graphs"
    ],
    "id": "847J"
  },
  {
    "title": "Shortest Path Problem?",
    "url": "https://codeforces.com/problemset/problem/845/G",
    "history": "You are given an undirected graph with weighted edges. The length of some path between two vertices is the bitwise xor of weights of all edges belonging to this path ( if some edge is traversed more than once, then it is included in bitwise xor the same number of times) . You have to find the minimum length of path between vertex 1 and vertex n. Note that graph can contain multiple edges and loops. It is guaranteed that the graph is connected.",
    "input": "The first line contains two numbers n and m ( 1 \u2264 n \u2264 100000, n - 1 \u2264 m \u2264 100000) \u2014 the number of vertices and the number of edges, respectively. Then m lines follow, each line containing three integer numbers x, y and w ( 1 \u2264 x, y \u2264 n, 0 \u2264 w \u2264 108) . These numbers denote an edge that connects vertices x and y and has weight w.",
    "output": "Print one number \u2014 the minimum length of path between vertices 1 and n.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "math"
    ],
    "id": "845G"
  },
  {
    "title": "Maximum Flow",
    "url": "https://codeforces.com/problemset/problem/843/E",
    "history": "You are given a directed graph, consisting of n vertices and m edges. The vertices s and t are marked as source and sink correspondingly. Additionally, there are no edges ending at s and there are no edges beginning in t. The graph was constructed in a following way: initially each edge had capacity ci > 0. A maximum flow with source at s and sink at t was constructed in this flow network. Let' s denote fi as the value of flow passing through edge with index i. Next, all capacities ci and flow value fi were erased. Instead, indicators gi were written on edges \u2014 if flow value passing through edge i was positive, i. e. 1 if fi > 0 and 0 otherwise. Using the graph and values gi, find out what is the minimum possible number of edges in the initial flow network that could be saturated ( the passing flow is equal to capacity, i. e. fi = ci) . Also construct the corresponding flow network with maximum flow in it. A flow in directed graph is described by flow values fi on each of the edges so that the following conditions are satisfied: for each vertex, except source and sink, total incoming flow and total outcoming flow are equal, for each edge 0 \u2264 fi \u2264 ci A flow is maximum if the difference between the sum of flow values on edges from the source, and the sum of flow values on edges to the source ( there are no such in this problem) , is maximum possible.",
    "input": "The first line of input data contains four positive integers n, m, s, t ( 2 \u2264 n \u2264 100, 1 \u2264 m \u2264 1000, 1 \u2264 s, t \u2264 n, s = \u0338 t) \u2014 the number of vertices, the number of edges, index of source vertex and index of sink vertex correspondingly. Each of next m lines of input data contain non- negative integers ui, vi, gi ( 1 \u2264 ui, vi \u2264 n, ) \u2014 the beginning of edge i, the end of edge i and indicator, which equals to 1 if flow value passing through edge i was positive and 0 if not. It' s guaranteed that no edge connects vertex with itself. Also it' s guaranteed that there are no more than one edge between each ordered pair of vertices and that there exists at least one network flow that satisfies all the constrains from input data.",
    "output": "In the first line print single non- negative integer k \u2014 minimum number of edges, which should be saturated in maximum flow. In each of next m lines print two integers fi, ci ( 1 \u2264 ci \u2264 109, 0 \u2264 fi \u2264 ci) \u2014 the flow value passing through edge i and capacity of edge i. This data should form a correct maximum flow in flow network. Also there must be exactly k edges with statement fi = ci satisfied. Also statement fi > 0 must be true if and only if gi = 1. If there are several possible answers, print any of them.",
    "note": "The illustration for second sample case. The saturated edges are marked dark, while edges with gi = 0 are marked with dotted line. The integer on edge is the index of this edge in input list.",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "843E"
  },
  {
    "title": "Dynamic Shortest Path",
    "url": "https://codeforces.com/problemset/problem/843/D",
    "history": "You are given a weighted directed graph, consisting of n vertices and m edges. You should answer q queries of two types: 1 v \u2014 find the length of shortest path from vertex 1 to vertex v. 2 c l1 l2 . . . lc \u2014 add 1 to weights of edges with indices l1, l2, . . . , lc.",
    "input": "The first line of input data contains integers n, m, q ( 1 \u2264 n, m \u2264 105, 1 \u2264 q \u2264 2000) \u2014 the number of vertices and edges in the graph, and the number of requests correspondingly. Next m lines of input data contain the descriptions of edges: i- th of them contains description of edge with index i \u2014 three integers ai, bi, ci ( 1 \u2264 ai, bi \u2264 n, 0 \u2264 ci \u2264 109) \u2014 the beginning and the end of edge, and its initial weight correspondingly. Next q lines of input data contain the description of edges in the format described above ( 1 \u2264 v \u2264 n, 1 \u2264 lj \u2264 m) . It' s guaranteed that inside single query all lj are distinct. Also, it' s guaranteed that a total number of edges in all requests of the second type does not exceed 106.",
    "output": "For each query of first type print the length of the shortest path from 1 to v in a separate line. Print - 1, if such path does not exists.",
    "note": "The description of changes of the graph in the first sample case: The description of changes of the graph in the second sample case:",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "843D"
  },
  {
    "title": "Upgrading Tree",
    "url": "https://codeforces.com/problemset/problem/843/C",
    "history": "You are given a tree with n vertices and you are allowed to perform no more than 2n transformations on it. Transformation is defined by three vertices x, y, y' and consists of deleting edge ( x, y) and adding edge ( x, y' ) . Transformation x, y, y' could be performed if all the following conditions are satisfied: There is an edge ( x, y) in the current tree. After the transformation the graph remains a tree. After the deletion of edge ( x, y) the tree would consist of two connected components. Let' s denote the set of nodes in the component containing vertex x by Vx, and the set of nodes in the component containing vertex y by Vy. Then condition | Vx| > | Vy| should be satisfied, i. e. the size of the component with x should be strictly larger than the size of the component with y. You should minimize the sum of squared distances between all pairs of vertices in a tree, which you could get after no more than 2n transformations and output any sequence of transformations leading initial tree to such state. Note that you don' t need to minimize the number of operations. It is necessary to minimize only the sum of the squared distances.",
    "input": "The first line of input contains integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 number of vertices in tree. The next n - 1 lines of input contains integers a and b ( 1 \u2264 a, b \u2264 n, a = \u0338 b) \u2014 the descriptions of edges. It is guaranteed that the given edges form a tree.",
    "output": "In the first line output integer k ( 0 \u2264 k \u2264 2n) \u2014 the number of transformations from your example, minimizing sum of squared distances between all pairs of vertices. In each of the next k lines output three integers x, y, y' \u2014 indices of vertices from the corresponding transformation. Transformations with y = y' are allowed ( even though they don' t change tree) if transformation conditions are satisfied. If there are several possible answers, print any of them.",
    "note": "This is a picture for the second sample. Added edges are dark, deleted edges are dotted.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "math",
      "trees"
    ],
    "id": "843C"
  },
  {
    "title": "Nikita and game",
    "url": "https://codeforces.com/problemset/problem/842/E",
    "history": "Nikita plays a new computer game. There are m levels in this game. In the beginning of each level a new class appears in the game; this class is a child- class of the class yi ( and yi is called parent- class for this new class) . Thus, the classes form a tree. Initially there is only one class with index 1. Changing the class to its neighbour ( child- class or parent- class) in the tree costs 1 coin. You can not change the class back. The cost of changing the class a to the class b is equal to the total cost of class changes on the path from a to b in the class tree. Suppose that at i - th level the maximum cost of changing one class to another is x. For each level output the number of classes such that for each of these classes there exists some other class y, and the distance from this class to y is exactly x.",
    "input": "First line contains one integer number m \u2014 number of queries ( 1 \u2264 m \u2264 3\u00b7105) . Next m lines contain description of queries. i - th line ( 1 \u2264 i \u2264 m) describes the i - th level and contains an integer yi \u2014 the index of the parent- class of class with index i + 1 ( 1 \u2264 yi \u2264 i) .",
    "output": "Suppose that at i - th level the maximum cost of changing one class to another is x. For each level output the number of classes such that for each of these classes there exists some other class y, and the distance from this class to y is exactly x.",
    "note": "",
    "topics": [
      "binary search",
      "dfs and similar",
      "divide and conquer",
      "graphs",
      "trees"
    ],
    "id": "842E"
  },
  {
    "title": "Ilya And The Tree",
    "url": "https://codeforces.com/problemset/problem/842/C",
    "history": "Ilya is very fond of graphs, especially trees. During his last trip to the forest Ilya found a very interesting tree rooted at vertex 1. There is an integer number written on each vertex of the tree; the number written on vertex i is equal to ai. Ilya believes that the beauty of the vertex x is the greatest common divisor of all numbers written on the vertices on the path from the root to x, including this vertex itself. In addition, Ilya can change the number in one arbitrary vertex to 0 or leave all vertices unchanged. Now for each vertex Ilya wants to know the maximum possible beauty it can have. For each vertex the answer must be considered independently. The beauty of the root equals to number written on it.",
    "input": "First line contains one integer number n \u2014 the number of vertices in tree ( 1 \u2264 n \u2264 2\u00b7105) . Next line contains n integer numbers ai ( 1 \u2264 i \u2264 n, 1 \u2264 ai \u2264 2\u00b7105) . Each of next n - 1 lines contains two integer numbers x and y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) , which means that there is an edge ( x, y) in the tree.",
    "output": "Output n numbers separated by spaces, where i- th number equals to maximum possible beauty of vertex i.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "math",
      "number theory",
      "trees"
    ],
    "id": "842C"
  },
  {
    "title": "Leha and another game about graph",
    "url": "https://codeforces.com/problemset/problem/840/B",
    "history": "Leha plays a computer game, where is on each level is given a connected graph with n vertices and m edges. Graph can contain multiple edges, but can not contain self loops. Each vertex has an integer di, which can be equal to 0, 1 or - 1. To pass the level, he needs to find a \u00abgood\u00bb subset of edges of the graph or say, that it doesn' t exist. Subset is called \u00abgood\u00bb, if by by leaving only edges from this subset in the original graph, we obtain the following: for every vertex i, di = - 1 or it' s degree modulo 2 is equal to di. Leha wants to pass the game as soon as possible and ask you to help him. In case of multiple correct answers, print any of them.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 3\u00b7105, n - 1 \u2264 m \u2264 3\u00b7105) \u2014 number of vertices and edges. The second line contains n integers d1, d2, . . . , dn ( - 1 \u2264 di \u2264 1) \u2014 numbers on the vertices. Each of the next m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n) \u2014 edges. It' s guaranteed, that graph in the input is connected.",
    "output": "Print - 1 in a single line, if solution doesn' t exist. Otherwise in the first line k \u2014 number of edges in a subset. In the next k lines indexes of edges. Edges are numerated in order as they are given in the input, starting from 1.",
    "note": "In the first sample we have single vertex without edges. It' s degree is 0 and we can not get 1.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "840B"
  },
  {
    "title": "Mother of Dragons",
    "url": "https://codeforces.com/problemset/problem/839/E",
    "history": "There are n castles in the Lannister' s Kingdom and some walls connect two castles, no two castles are connected by more than one wall, no wall connects a castle to itself. Sir Jaime Lannister has discovered that Daenerys Targaryen is going to attack his kingdom soon. Therefore he wants to defend his kingdom. He has k liters of a strange liquid. He wants to distribute that liquid among the castles, so each castle may contain some liquid ( possibly zero or non- integer number of liters) . After that the stability of a wall is defined as follows: if the wall connects two castles a and b, and they contain x and y liters of that liquid, respectively, then the strength of that wall is x\u00b7y. Your task is to print the maximum possible sum of stabilities of the walls that Sir Jaime Lannister can achieve.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 40, 1 \u2264 k \u2264 1000) . Then n lines follows. The i- th of these lines contains n integers ai, 1, ai, 2, . . . , ai, n ( ) . If castles i and j are connected by a wall, then ai, j = 1. Otherwise it is equal to 0. It is guaranteed that ai, j = aj, i and ai, i = 0 for all 1 \u2264 i, j \u2264 n.",
    "output": "Print the maximum possible sum of stabilities of the walls that Sir Jaime Lannister can achieve. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "In the first sample, we can assign 0. 5, 0. 5, 0 liters of liquid to castles 1, 2, 3, respectively, to get the maximum sum ( 0. 25) . In the second sample, we can assign 1. 0, 1. 0, 1. 0, 1. 0 liters of liquid to castles 1, 2, 3, 4, respectively, to get the maximum sum ( 4. 0)",
    "topics": [
      "brute force",
      "graphs",
      "math",
      "meet-in-the-middle"
    ],
    "id": "839E"
  },
  {
    "title": "Journey",
    "url": "https://codeforces.com/problemset/problem/839/C",
    "history": "There are n cities and n - 1 roads in the Seven Kingdoms, each road connects two cities and we can reach any city from any other by the roads. Theon and Yara Greyjoy are on a horse in the first city, they are starting traveling through the roads. But the weather is foggy, so they can\u2019t see where the horse brings them. When the horse reaches a city ( including the first one) , it goes to one of the cities connected to the current city. But it is a strange horse, it only goes to cities in which they weren' t before. In each such city, the horse goes with equal probabilities and it stops when there are no such cities. Let the length of each road be 1. The journey starts in the city 1. What is the expected length ( expected value of length) of their journey? You can read about expected ( average) value by the link https: / / en. wikipedia. org/ wiki/ Expected_ value.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100000) \u2014 number of cities. Then n - 1 lines follow. The i- th line of these lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 the cities connected by the i- th road. It is guaranteed that one can reach any city from any other by the roads.",
    "output": "Print a number \u2014 the expected length of their journey. The journey starts in the city 1. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if .",
    "note": "In the first sample, their journey may end in cities 3 or 4 with equal probability. The distance to city 3 is 1 and to city 4 is 2, so the expected length is 1. 5. In the second sample, their journey may end in city 4 or 5. The distance to the both cities is 2, so the expected length is 2.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "probabilities",
      "trees"
    ],
    "id": "839C"
  },
  {
    "title": "Roads in the Kingdom",
    "url": "https://codeforces.com/problemset/problem/835/F",
    "history": "In the Kingdom K. , there are n towns numbered with integers from 1 to n. The towns are connected by n bi- directional roads numbered with integers from 1 to n. The i- th road connects the towns ui and vi and its length is li. There is no more than one road between two towns. Also, there are no roads that connect the towns with itself. Let' s call the inconvenience of the roads the maximum of the shortest distances between all pairs of towns. Because of lack of money, it was decided to close down one of the roads so that after its removal it is still possible to reach any town from any other. You have to find the minimum possible inconvenience of the roads after closing down one of the roads.",
    "input": "The first line contains the integer n ( 3 \u2264 n \u2264 2\u00b7105) \u2014 the number of towns and roads. The next n lines contain the roads description. The i- th from these lines contains three integers ui, vi, li ( 1 \u2264 ui, vi \u2264 n, 1 \u2264 li \u2264 109) \u2014 the numbers of towns connected by the i- th road and the length of the i- th road. No road connects a town to itself, no two roads connect the same towns. It' s guaranteed that it' s always possible to close down one of the roads so that all the towns are still reachable from each other.",
    "output": "Print a single integer \u2014 the minimum possible inconvenience of the roads after the refusal from one of the roads.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "835F"
  },
  {
    "title": "Misha, Grisha and Underground",
    "url": "https://codeforces.com/problemset/problem/832/D",
    "history": "Misha and Grisha are funny boys, so they like to use new underground. The underground has n stations connected with n - 1 routes so that each route connects two stations, and it is possible to reach every station from any other. The boys decided to have fun and came up with a plan. Namely, in some day in the morning Misha will ride the underground from station s to station f by the shortest path, and will draw with aerosol an ugly text \" Misha was here\" on every station he will pass through ( including s and f) . After that on the same day at evening Grisha will ride from station t to station f by the shortest path and will count stations with Misha' s text. After that at night the underground workers will wash the texts out, because the underground should be clean. The boys have already chosen three stations a, b and c for each of several following days, one of them should be station s on that day, another should be station f, and the remaining should be station t. They became interested how they should choose these stations s, f, t so that the number Grisha will count is as large as possible. They asked you for help.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 105, 1 \u2264 q \u2264 105) \u2014 the number of stations and the number of days. The second line contains n - 1 integers p2, p3, . . . , pn ( 1 \u2264 pi \u2264 n) . The integer pi means that there is a route between stations pi and i. It is guaranteed that it' s possible to reach every station from any other. The next q lines contains three integers a, b and c each ( 1 \u2264 a, b, c \u2264 n) \u2014 the ids of stations chosen by boys for some day. Note that some of these ids could be same.",
    "output": "Print q lines. In the i- th of these lines print the maximum possible number Grisha can get counting when the stations s, t and f are chosen optimally from the three stations on the i- th day.",
    "note": "In the first example on the first day if s = 1, f = 2, t = 3, Misha would go on the route 1 2, and Grisha would go on the route 3 1 2. He would see the text at the stations 1 and 2. On the second day, if s = 3, f = 2, t = 3, both boys would go on the route 3 1 2. Grisha would see the text at 3 stations. In the second examle if s = 1, f = 3, t = 2, Misha would go on the route 1 2 3, and Grisha would go on the route 2 3 and would see the text at both stations.",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "832D"
  },
  {
    "title": "Perpetual Motion Machine",
    "url": "https://codeforces.com/problemset/problem/830/E",
    "history": "Developer Petr thinks that he invented a perpetual motion machine. Namely, he has a lot of elements, which work in the following way. Each element has one controller that can be set to any non- negative real value. If a controller is set on some value x, then the controller consumes x2 energy units per second. At the same time, any two elements connected by a wire produce y\u00b7z energy units per second, where y and z are the values set on their controllers. Petr has only a limited number of wires, so he has already built some scheme of elements and wires, and is now interested if it' s possible to set the controllers in such a way that the system produces at least as much power as it consumes, and at least one controller is set on the value different from 0. Help him check this, and if it' s possible, find the required integer values that should be set. It is guaranteed that if there exist controllers' settings satisfying the above conditions, then there exist required integer values not greater than 106.",
    "input": "There are several ( at least one) test cases in the input. The first line contains single integer \u2014 the number of test cases. There is an empty line before each test case. The first line of test case contains two integers n and m ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105) \u2014 the number of elements in the scheme and the number of wires. After that, m lines follow, each of them contains two integers a and b ( 1 \u2264 a, b \u2264 n) \u2014 two elements connected by a wire. No element is connected with itself, no two elements are connected by more than one wire. It is guaranteed that the sum of n and the sum of m over all test cases do not exceed 105. For hacks you can only use tests with one test case.",
    "output": "Print answer for each test case. For each test case print \" YES\" if it' s possible to set the controllers in such a way that the consumed power is not greater than the power produced, and the required values on the next line. The settings should be integers from 0 to 106, inclusive, and at least one value should be different from 0. If there are multiple answers, print any of them. If it' s not possible to set the controllers in the required way, print one line \" NO\" .",
    "note": "In the first example it' s possible to set the controllers in the required way, for example, in the following way: set 1 on the first element, set 2 on the second and on the third, set 1 on the fourth. The consumed power is then equal to 12 + 22 + 22 + 12 = 10 energy units per second, the produced power is equal to 1\u00b72 + 2\u00b72 + 2\u00b71 + 2\u00b71 = 10 energy units per second. Thus the answer is \" YES\" . In the second test case it' s not possible to set the controllers in the required way. For example, if we set all controllers to 0. 5, then the consumed powers equals 0. 75 energy units per second, while produced power equals 0. 5 energy units per second.",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "implementation",
      "math",
      "trees"
    ],
    "id": "830E"
  },
  {
    "title": "Singer House",
    "url": "https://codeforces.com/problemset/problem/830/D",
    "history": "It is known that passages in Singer house are complex and intertwined. Let' s define a Singer k- house as a graph built by the following process: take complete binary tree of height k and add edges from each vertex to all its successors, if they are not yet present. Singer 4- house Count the number of non- empty paths in Singer k- house which do not pass the same vertex twice. Two paths are distinct if the sets or the orders of visited vertices are different. Since the answer can be large, output it modulo 109 + 7.",
    "input": "The only line contains single integer k ( 1 \u2264 k \u2264 400) .",
    "output": "Print single integer \u2014 the answer for the task modulo 109 + 7.",
    "note": "There are 9 paths in the first example ( the vertices are numbered on the picture below) : 1, 2, 3, 1- 2, 2- 1, 1- 3, 3- 1, 2- 1- 3, 3- 1- 2. Singer 2- house",
    "topics": [
      "combinatorics",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "830D"
  },
  {
    "title": "Dirty Arkady's Kitchen",
    "url": "https://codeforces.com/problemset/problem/827/F",
    "history": "Arkady likes to walk around his kitchen. His labyrinthine kitchen consists of several important places connected with passages. Unfortunately it happens that these passages are flooded with milk so that it' s impossible to pass through them. Namely, it' s possible to pass through each passage in any direction only during some time interval. The lengths of all passages are equal and Arkady makes through them in one second. For security reasons, Arkady can never stop, also, he can' t change direction while going through a passage. In other words, if he starts walking in some passage, he should reach its end and immediately leave the end. Today Arkady needs to quickly reach important place n from place 1. He plans to exit the place 1 at time moment 0 and reach the place n as early as he can. Please find the minimum time he should spend on his way.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 5\u00b7105, 0 \u2264 m \u2264 5\u00b7105) \u2014 the number of important places and the number of passages, respectively. After that, m lines follow, each of them describe one passage. Each line contains four integers a, b, l and r ( 1 \u2264 a, b \u2264 n, a = \u0338 b, 0 \u2264 l < r \u2264 109) \u2014 the places the passage connects and the time segment during which it' s possible to use this passage.",
    "output": "Print one integer \u2014 minimum time Arkady should spend to reach the destination. If he can' t reach the place n, print - 1.",
    "note": "In the first example Arkady should go through important places 1 \u2192 3 \u2192 4 \u2192 5. In the second example Arkady can' t start his walk because at time moment 0 it' s impossible to use the only passage.",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "827F"
  },
  {
    "title": "Best Edge Weight",
    "url": "https://codeforces.com/problemset/problem/827/D",
    "history": "You are given a connected weighted graph with n vertices and m edges. The graph doesn' t contain loops nor multiple edges. Consider some edge with id i. Let' s determine for this edge the maximum integer weight we can give to it so that it is contained in all minimum spanning trees of the graph if we don' t change the other weights. You are to determine this maximum weight described above for each edge. You should calculate the answer for each edge independently, it means there can' t be two edges with changed weights at the same time.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2\u00b7105, n - 1 \u2264 m \u2264 2\u00b7105) , where n and m are the number of vertices and the number of edges in the graph, respectively. Each of the next m lines contains three integers u, v and c ( 1 \u2264 v, u \u2264 n, v = \u0338 u, 1 \u2264 c \u2264 109) meaning that there is an edge between vertices u and v with weight c.",
    "output": "Print the answer for each edge in the order the edges are given in the input. If an edge is contained in every minimum spanning tree with any weight, print - 1 as the answer.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "827D"
  },
  {
    "title": "Tree Queries",
    "url": "https://codeforces.com/problemset/problem/825/G",
    "history": "You are given a tree consisting of n vertices ( numbered from 1 to n) . Initially all vertices are white. You have to process q queries of two different types: 1 x \u2014 change the color of vertex x to black. It is guaranteed that the first query will be of this type. 2 x \u2014 for the vertex x, find the minimum index y such that the vertex with index y belongs to the simple path from x to some black vertex ( a simple path never visits any vertex more than once) . For each query of type 2 print the answer to it. Note that the queries are given in modified way.",
    "input": "The first line contains two numbers n and q ( 3 \u2264 n, q \u2264 106) . Then n - 1 lines follow, each line containing two numbers xi and yi ( 1 \u2264 xi < yi \u2264 n) and representing the edge between vertices xi and yi. It is guaranteed that these edges form a tree. Then q lines follow. Each line contains two integers ti and zi, where ti is the type of ith query, and zi can be used to restore xi for this query in this way: you have to keep track of the answer to the last query of type 2 ( let' s call this answer last, and initially last = 0) ; then xi = ( zi + last) mod n + 1. It is guaranteed that the first query is of type 1, and there is at least one query of type 2.",
    "output": "For each query of type 2 output the answer to it.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "825G"
  },
  {
    "title": "Minimal Labels",
    "url": "https://codeforces.com/problemset/problem/825/E",
    "history": "You are given a directed acyclic graph with n vertices and m edges. There are no self- loops or multiple edges between any pair of vertices. Graph can be disconnected. You should assign labels to all vertices in such a way that: Labels form a valid permutation of length n \u2014 an integer sequence such that each integer from 1 to n appears exactly once in it. If there exists an edge from vertex v to vertex u then labelv should be smaller than labelu. Permutation should be lexicographically smallest among all suitable. Find such sequence of labels to satisfy all the conditions.",
    "input": "The first line contains two integer numbers n, m ( 2 \u2264 n \u2264 105, 1 \u2264 m \u2264 105) . Next m lines contain two integer numbers v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) \u2014 edges of the graph. Edges are directed, graph doesn' t contain loops or multiple edges.",
    "output": "Print n numbers \u2014 lexicographically smallest correct permutation of labels of vertices.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "825E"
  },
  {
    "title": "Okabe and City",
    "url": "https://codeforces.com/problemset/problem/821/D",
    "history": "Okabe likes to be able to walk through his city on a path lit by street lamps. That way, he doesn' t get beaten up by schoolchildren. Okabe' s city is represented by a 2D grid of cells. Rows are numbered from 1 to n from top to bottom, and columns are numbered 1 to m from left to right. Exactly k cells in the city are lit by a street lamp. It' s guaranteed that the top- left cell is lit. Okabe starts his walk from the top- left cell, and wants to reach the bottom- right cell. Of course, Okabe will only walk on lit cells, and he can only move to adjacent cells in the up, down, left, and right directions. However, Okabe can also temporarily light all the cells in any single row or column at a time if he pays 1 coin, allowing him to walk through some cells not lit initially. Note that Okabe can only light a single row or column at a time, and has to pay a coin every time he lights a new row or column. To change the row or column that is temporarily lit, he must stand at a cell that is lit initially. Also, once he removes his temporary light from a row or column, all cells in that row/ column not initially lit are now not lit. Help Okabe find the minimum number of coins he needs to pay to complete his walk!",
    "input": "The first line of input contains three space- separated integers n, m, and k ( 2 \u2264 n, m, k \u2264 104) . Each of the next k lines contains two space- separated integers ri and ci ( 1 \u2264 ri \u2264 n, 1 \u2264 ci \u2264 m) \u2014 the row and the column of the i- th lit cell. It is guaranteed that all k lit cells are distinct. It is guaranteed that the top- left cell is lit.",
    "output": "Print the minimum number of coins Okabe needs to pay to complete his walk, or - 1 if it' s not possible.",
    "note": "In the first sample test, Okabe can take the path , paying only when moving to ( 2, 3) and ( 4, 4) . In the fourth sample, Okabe can take the path , paying when moving to ( 1, 2) , ( 3, 4) , and ( 5, 4) .",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "821D"
  },
  {
    "title": "Mister B and Flight to the Moon",
    "url": "https://codeforces.com/problemset/problem/819/E",
    "history": "In order to fly to the Moon Mister B just needs to solve the following problem. There is a complete indirected graph with n vertices. You need to cover it with several simple cycles of length 3 and 4 so that each edge is in exactly 2 cycles. We are sure that Mister B will solve the problem soon and will fly to the Moon. Will you?",
    "input": "The only line contains single integer n ( 3 \u2264 n \u2264 300) .",
    "output": "If there is no answer, print - 1. Otherwise, in the first line print k ( 1 \u2264 k \u2264 n2) \u2014 the number of cycles in your solution. In each of the next k lines print description of one cycle in the following format: first print integer m ( 3 \u2264 m \u2264 4) \u2014 the length of the cycle, then print m integers v1, v2, . . . , vm ( 1 \u2264 vi \u2264 n) \u2014 the vertices in the cycle in the traverse order. Each edge should be in exactly two cycles.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "819E"
  },
  {
    "title": "Four Melodies",
    "url": "https://codeforces.com/problemset/problem/818/G",
    "history": "Author note: I think some of you might remember the problem \" Two Melodies\" from Eductational Codeforces Round 22. Now it' s time to make it a bit more difficult! Alice is a composer, and recently she had recorded two tracks that became very popular. Now she has got a lot of fans who are waiting for new tracks. This time Alice wants to form four melodies for her tracks. Alice has a sheet with n notes written on it. She wants to take four such non- empty non- intersecting subsequences that all of them form a melody and sum of their lengths is maximal. Subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Subsequence forms a melody when each two adjacent notes either differ by 1 or are congruent modulo 7. You should write a program which will calculate maximum sum of lengths of such four non- empty non- intersecting subsequences that all of them form a melody.",
    "input": "The first line contains one integer number n ( 4 \u2264 n \u2264 3000) . The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) \u2014 notes written on a sheet.",
    "output": "Print maximum sum of lengths of such four non- empty non- intersecting subsequences that all of them form a melody.",
    "note": "In the first example it is possible to compose 4 melodies by choosing any 4 notes ( and each melody will consist of only one note) . In the second example it is possible to compose one melody with 2 notes \u2014 1, 2. Remaining notes are used in other three melodies ( one note per each melody) .",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "818G"
  },
  {
    "title": "An unavoidable detour for home",
    "url": "https://codeforces.com/problemset/problem/814/E",
    "history": "Those unwilling to return home from a long journey, will be affected by the oddity of the snail and lose their way. Mayoi, the oddity' s carrier, wouldn' t like this to happen, but there' s nothing to do with this before a cure is figured out. For now, she would only like to know the enormous number of possibilities to be faced with if someone gets lost. There are n towns in the region, numbered from 1 to n. The town numbered 1 is called the capital. The traffic network is formed by bidirectional roads connecting pairs of towns. No two roads connect the same pair of towns, and no road connects a town with itself. The time needed to travel through each of the roads is the same. Lost travelers will not be able to find out how the towns are connected, but the residents can help them by providing the following facts: Starting from each town other than the capital, the shortest path ( i. e. the path passing through the minimum number of roads) to the capital exists, and is unique; Let li be the number of roads on the shortest path from town i to the capital, then li \u2265 li - 1 holds for all 2 \u2264 i \u2264 n; For town i, the number of roads connected to it is denoted by di, which equals either 2 or 3. You are to count the number of different ways in which the towns are connected, and give the answer modulo 109 + 7. Two ways of connecting towns are considered different if a pair ( u, v) ( 1 \u2264 u, v \u2264 n) exists such there is a road between towns u and v in one of them but not in the other.",
    "input": "The first line of input contains a positive integer n ( 3 \u2264 n \u2264 50) \u2014 the number of towns. The second line contains n space- separated integers d1, d2, . . . , dn ( 2 \u2264 di \u2264 3) \u2014 the number of roads connected to towns 1, 2, . . . , n, respectively. It is guaranteed that the sum of di over all i is even.",
    "output": "Output one integer \u2014 the total number of different possible ways in which the towns are connected, modulo 109 + 7.",
    "note": "In the first example, the following structure is the only one to satisfy the constraints, the distances from towns 2, 3, 4 to the capital are all 1. In the second example, the following two structures satisfy the constraints.",
    "topics": [
      "combinatorics",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "814E"
  },
  {
    "title": "Bipartite Checking",
    "url": "https://codeforces.com/problemset/problem/813/F",
    "history": "You are given an undirected graph consisting of n vertices. Initially there are no edges in the graph. Also you are given q queries, each query either adds one undirected edge to the graph or removes it. After each query you have to check if the resulting graph is bipartite ( that is, you can paint all vertices of the graph into two colors so that there is no edge connecting two vertices of the same color) .",
    "input": "The first line contains two integers n and q ( 2 \u2264 n, q \u2264 100000) . Then q lines follow. ith line contains two numbers xi and yi ( 1 \u2264 xi < yi \u2264 n) . These numbers describe ith query: if there is an edge between vertices xi and yi, then remove it, otherwise add it.",
    "output": "Print q lines. ith line must contain YES if the graph is bipartite after ith query, and NO otherwise.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "813F"
  },
  {
    "title": "The Tag Game",
    "url": "https://codeforces.com/problemset/problem/813/C",
    "history": "Alice got tired of playing the tag game by the usual rules so she offered Bob a little modification to it. Now the game should be played on an undirected rooted tree of n vertices. Vertex 1 is the root of the tree. Alice starts at vertex 1 and Bob starts at vertex x ( x = \u0338 1) . The moves are made in turns, Bob goes first. In one move one can either stay at the current vertex or travel to the neighbouring one. The game ends when Alice goes to the same vertex where Bob is standing. Alice wants to minimize the total number of moves and Bob wants to maximize it. You should write a program which will determine how many moves will the game last.",
    "input": "The first line contains two integer numbers n and x ( 2 \u2264 n \u2264 2\u00b7105, 2 \u2264 x \u2264 n) . Each of the next n - 1 lines contains two integer numbers a and b ( 1 \u2264 a, b \u2264 n) \u2014 edges of the tree. It is guaranteed that the edges form a valid tree.",
    "output": "Print the total number of moves Alice and Bob will make.",
    "note": "In the first example the tree looks like this: The red vertex is Alice' s starting position, the blue one is Bob' s. Bob will make the game run the longest by standing at the vertex 3 during all the game. So here are the moves: B: stay at vertex 3A: go to vertex 2B: stay at vertex 3A: go to vertex 3In the second example the tree looks like this: The moves in the optimal strategy are: B: go to vertex 3A: go to vertex 2B: go to vertex 4A: go to vertex 3B: stay at vertex 4A: go to vertex 4",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "813C"
  },
  {
    "title": "Sagheer and Kindergarten",
    "url": "https://codeforces.com/problemset/problem/812/D",
    "history": "Sagheer is working at a kindergarten. There are n children and m different toys. These children use well- defined protocols for playing with the toys: Each child has a lovely set of toys that he loves to play with. He requests the toys one after another at distinct moments of time. A child starts playing if and only if he is granted all the toys in his lovely set. If a child starts playing, then sooner or later he gives the toys back. No child keeps the toys forever. Children request toys at distinct moments of time. No two children request a toy at the same time. If a child is granted a toy, he never gives it back until he finishes playing with his lovely set. If a child is not granted a toy, he waits until he is granted this toy. He can' t request another toy while waiting. If two children are waiting for the same toy, then the child who requested it first will take the toy first. Children don' t like to play with each other. That' s why they never share toys. When a child requests a toy, then granting the toy to this child depends on whether the toy is free or not. If the toy is free, Sagheer will give it to the child. Otherwise, the child has to wait for it and can' t request another toy. Children are smart and can detect if they have to wait forever before they get the toys they want. In such case they start crying. In other words, a crying set is a set of children in which each child is waiting for a toy that is kept by another child in the set. Now, we have reached a scenario where all the children made all the requests for their lovely sets, except for one child x that still has one last request for his lovely set. Some children are playing while others are waiting for a toy, but no child is crying, and no one has yet finished playing. If the child x is currently waiting for some toy, he makes his last request just after getting that toy. Otherwise, he makes the request right away. When child x will make his last request, how many children will start crying? You will be given the scenario and q independent queries. Each query will be of the form x y meaning that the last request of the child x is for the toy y. Your task is to help Sagheer find the size of the maximal crying set when child x makes his last request.",
    "input": "The first line contains four integers n, m, k, q ( 1 \u2264 n, m, k, q \u2264 105) \u2014 the number of children, toys, scenario requests and queries. Each of the next k lines contains two integers a, b ( 1 \u2264 a \u2264 n and 1 \u2264 b \u2264 m) \u2014 a scenario request meaning child a requests toy b. The requests are given in the order they are made by children. Each of the next q lines contains two integers x, y ( 1 \u2264 x \u2264 n and 1 \u2264 y \u2264 m) \u2014 the request to be added to the scenario meaning child x will request toy y just after getting the toy he is waiting for ( if any) . It is guaranteed that the scenario requests are consistent and no child is initially crying. All the scenario requests are distinct and no query coincides with a scenario request.",
    "output": "For each query, print on a single line the number of children who will start crying when child x makes his last request for toy y. Please answer all queries independent of each other.",
    "note": "In the first example, child 1 is waiting for toy 2, which child 2 has, while child 2 is waiting for top 3, which child 3 has. When child 3 makes his last request, the toy he requests is held by child 1. Each of the three children is waiting for a toy held by another child and no one is playing, so all the three will start crying. In the second example, at the beginning, child i is holding toy i for 1 \u2264 i \u2264 4. Children 1 and 3 have completed their lovely sets. After they finish playing, toy 3 will be free while toy 1 will be taken by child 2 who has just completed his lovely set. After he finishes, toys 1 and 2 will be free and child 5 will take toy 1. Now: In the first query, child 5 will take toy 3 and after he finishes playing, child 4 can play. In the second query, child 5 will request toy 4 which is held by child 4. At the same time, child 4 is waiting for toy 1 which is now held by child 5. None of them can play and they will start crying.",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "812D"
  },
  {
    "title": "Vladik and Entertaining Flags",
    "url": "https://codeforces.com/problemset/problem/811/E",
    "history": "In his spare time Vladik estimates beauty of the flags. Every flag could be represented as the matrix n \u00d7 m which consists of positive integers. Let' s define the beauty of the flag as number of components in its matrix. We call component a set of cells with same numbers and between any pair of cells from that set there exists a path through adjacent cells from same component. Here is the example of the partitioning some flag matrix into components: But this time he decided to change something in the process. Now he wants to estimate not the entire flag, but some segment. Segment of flag can be described as a submatrix of the flag matrix with opposite corners at ( 1, l) and ( n, r) , where conditions 1 \u2264 l \u2264 r \u2264 m are satisfied. Help Vladik to calculate the beauty for some segments of the given flag.",
    "input": "First line contains three space- separated integers n, m, q ( 1 \u2264 n \u2264 10, 1 \u2264 m, q \u2264 105) \u2014 dimensions of flag matrix and number of segments respectively. Each of next n lines contains m space- separated integers \u2014 description of flag matrix. All elements of flag matrix is positive integers not exceeding 106. Each of next q lines contains two space- separated integers l, r ( 1 \u2264 l \u2264 r \u2264 m) \u2014 borders of segment which beauty Vladik wants to know.",
    "output": "For each segment print the result on the corresponding line.",
    "note": "Partitioning on components for every segment from first test case:",
    "topics": [
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "811E"
  },
  {
    "title": "Vladik and Favorite Game",
    "url": "https://codeforces.com/problemset/problem/811/D",
    "history": "This is an interactive problem. Vladik has favorite game, in which he plays all his free time. Game field could be represented as n \u00d7 m matrix which consists of cells of three types: \u00ab. \u00bb \u2014 normal cell, player can visit it. \u00abF\u00bb \u2014 finish cell, player has to finish his way there to win. There is exactly one cell of this type. \u00ab* \u00bb \u2014 dangerous cell, if player comes to this cell, he loses. Initially player is located in the left top cell with coordinates ( 1, 1) . Player has access to 4 buttons \" U\" , \" D\" , \" L\" , \" R\" , each of them move player up, down, left and right directions respectively. But it\u2019s not that easy! Sometimes friends play game and change functions of buttons. Function of buttons \" L\" and \" R\" could have been swapped, also functions of buttons \" U\" and \" D\" could have been swapped. Note that functions of buttons can be changed only at the beginning of the game. Help Vladik win the game! InteractionYou can press buttons no more than 2\u00b7n\u00b7m times. To press a button you should print \" U\" , \" D\" , \" L\" , \" R\" in new line. It\u2019s necessary to print newline character and flush output. After flushing buffer you should read answer from input data. Answer is the pair of space- separated integers x, y \u2014 new position of player. In case, if there is no cell in direction of moving, position will not change. If after any move player lost, in other words player move to dangerous cell, then x and y will be equal to - 1. If after any move player is in finish or dangerous cell, then you should terminate your program. To finish output buffer ( i. e. for operation flush) right after printing direction and newline you should do next: fflush( stdout) in C+ + System. out. flush( ) in Java stdout. flush( ) in Python flush( output) in Pascal read documentation for other languages. Hacks To perform a hack you should use this format: n m swapLR swapUD a_ 1 a_ 2 . . . a_ n Where n, m \u2014 number of rows and columns in game field. swapLR is equal to 1 in case, when directions \" L\u2019\u2019 and \" R\u2019\u2019 is swapped, and equal to 0 otherwise. swapUD is equal to 1, when directions \" U\u2019\u2019 and \" D\u2019\u2019 is swapped, and equal to 0 otherwise. a1, a2, . . . , an \u2014 description of corresponding rows of game field.",
    "input": "First line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 100) \u2014 number of rows and columns respectively. Each of next n lines contains m characters describing corresponding row of field. Set of characters in field is described above. Guaranteed that cell with coordinates ( 1, 1) is normal and there is at least one way from initial cell to finish cell without dangerous cells.",
    "output": "",
    "note": "In first test case all four directions swapped with their opposite directions. Protocol of interaction In more convenient form: This test could be presenter for hack in following way: 4 3 1 1. . . * * . F* . . . .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "interactive"
    ],
    "id": "811D"
  },
  {
    "title": "Card Game",
    "url": "https://codeforces.com/problemset/problem/808/F",
    "history": "Digital collectible card games have become very popular recently. So Vova decided to try one of these. Vova has n cards in his collection. Each of these cards is characterised by its power pi, magic number ci and level li. Vova wants to build a deck with total power not less than k, but magic numbers may not allow him to do so \u2014 Vova can' t place two cards in a deck if the sum of the magic numbers written on these cards is a prime number. Also Vova cannot use a card if its level is greater than the level of Vova' s character. At the moment Vova' s character' s level is 1. Help Vova to determine the minimum level he needs to reach in order to build a deck with the required total power.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100000) . Then n lines follow, each of these lines contains three numbers that represent the corresponding card: pi, ci and li ( 1 \u2264 pi \u2264 1000, 1 \u2264 ci \u2264 100000, 1 \u2264 li \u2264 n) .",
    "output": "If Vova won' t be able to build a deck with required power, print - 1. Otherwise print the minimum level Vova has to reach in order to build a deck.",
    "note": "",
    "topics": [
      "binary search",
      "flows",
      "graphs"
    ],
    "id": "808F"
  },
  {
    "title": "Fake bullions",
    "url": "https://codeforces.com/problemset/problem/804/F",
    "history": "In Isart people don' t die. There are n gangs of criminals. The i- th gang contains si evil people numerated from 0 to si - 1. Some of these people took part in a big mine robbery and picked one gold bullion each ( these people are given in the input) . That happened 10100 years ago and then all of the gangs escaped to a remote area, far from towns. During the years, they were copying some gold bullions according to an organized plan in order to not get arrested. They constructed a tournament directed graph ( a graph where there is exactly one directed edge between every pair of vertices) of gangs ( the graph is given in the input) . In this graph an edge from u to v means that in the i- th hour the person of the gang u can send a fake gold bullion to person of gang v. He sends it if he has some bullion ( real or fake) , while the receiver doesn' t have any. Thus, at any moment each of the gangsters has zero or one gold bullion. Some of them have real bullions, and some of them have fake ones. In the beginning of this year, the police has finally found the gangs, but they couldn' t catch them, as usual. The police decided to open a jewelry store so that the gangsters would sell the bullions. Thus, every gangster that has a bullion ( fake or real) will try to sell it. If he has a real gold bullion, he sells it without problems, but if he has a fake one, there is a choice of two events that can happen: The person sells the gold bullion successfully. The person is arrested by police. The power of a gang is the number of people in it that successfully sold their bullion. After all selling is done, the police arrests b gangs out of top gangs. Sort the gangs by powers, we call the first a gang top gangs( you can sort the equal powers in each order) . Consider all possible results of selling fake gold bullions and all possible choice of b gangs among the top gangs. Count the number of different sets of these b gangs modulo 109 + 7. Two sets X and Y are considered different if some gang is in X and isn' t in Y.",
    "input": "The first line contains four integers n, a and b ( 1 \u2264 b \u2264 a \u2264 n \u2264 5\u00b7103) \u2014 the number of gangs, the constants a and b from the statement. Then n lines follow, each line contains a string of size n consisting of zeros and ones. The j- th character in the i- th of these lines is equal to 1, then the vertex i have a directed edge to the vertex j. It is guaranteed that aii = 0 and aij + aji = 1 if i = \u0338 j. Then n lines follow, each line starts with the integer si ( 1 \u2264 si \u2264 2\u00b7106) \u2014 the number of gangsters in the i- th gang, and then contains a string of zeros and ones with length si. The j- th character is 0 if the j- th person of the i- th gang had a real gold bullion initially, otherwise it is 1. It is guaranteed that the sum of si does not exceed 2\u00b7106.",
    "output": "Print single integer: the number of different sets of b gangs the police can arrest modulo 109 + 7.",
    "note": "",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "dp",
      "graphs",
      "number theory"
    ],
    "id": "804F"
  },
  {
    "title": "Roma and Poker",
    "url": "https://codeforces.com/problemset/problem/803/E",
    "history": "Each evening Roma plays online poker on his favourite website. The rules of poker on this website are a bit strange: there are always two players in a hand, there are no bets, and the winner takes 1 virtual bourle from the loser. Last evening Roma started to play poker. He decided to spend no more than k virtual bourles \u2014 he will stop immediately if the number of his loses exceeds the number of his wins by k. Also Roma will leave the game if he wins enough money for the evening, i. e. if the number of wins exceeds the number of loses by k. Next morning Roma found a piece of paper with a sequence on it representing his results. Roma doesn' t remember the results exactly, and some characters in the sequence are written in a way such that it' s impossible to recognize this character, so Roma can' t recall whether he won k bourles or he lost. The sequence written by Roma is a string s consisting of characters W ( Roma won the corresponding hand) , L ( Roma lost) , D ( draw) and ? ( unknown result) . Roma wants to restore any valid sequence by changing all ? characters to W, L or D. The sequence is called valid if all these conditions are met: In the end the absolute difference between the number of wins and loses is equal to k; There is no hand such that the absolute difference before this hand was equal to k. Help Roma to restore any such sequence.",
    "input": "The first line contains two numbers n ( the length of Roma' s sequence) and k ( 1 \u2264 n, k \u2264 1000) . The second line contains the sequence s consisting of characters W, L, D and ? . There are exactly n characters in this sequence.",
    "output": "If there is no valid sequence that can be obtained from s by replacing all ? characters by W, L or D, print NO. Otherwise print this sequence. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "803E"
  },
  {
    "title": "April Fools' Problem (medium)",
    "url": "https://codeforces.com/problemset/problem/802/N",
    "history": "The marmots need to prepare k problems for HC2 over n days. Each problem, once prepared, also has to be printed. The preparation of a problem on day i ( at most one per day) costs ai CHF, and the printing of a problem on day i ( also at most one per day) costs bi CHF. Of course, a problem cannot be printed before it has been prepared ( but doing both on the same day is fine) . What is the minimum cost of preparation and printing?",
    "input": "The first line of input contains two space- separated integers n and k ( 1 \u2264 k \u2264 n \u2264 2200) . The second line contains n space- separated integers a1, . . . , an ( ) \u2014 the preparation costs. The third line contains n space- separated integers b1, . . . , bn ( ) \u2014 the printing costs.",
    "output": "Output the minimum cost of preparation and printing k problems \u2014 that is, the minimum possible sum ai1 + ai2 + . . . + aik + bj1 + bj2 + . . . + bjk, where 1 \u2264 i1 < i2 < . . . < ik \u2264 n, 1 \u2264 j1 < j2 < . . . < jk \u2264 n and i1 \u2264 j1, i2 \u2264 j2, . . . , ik \u2264 jk.",
    "note": "In the sample testcase, one optimum solution is to prepare the first problem on day 1 and print it on day 1, prepare the second problem on day 2 and print it on day 4, prepare the third problem on day 3 and print it on day 5, and prepare the fourth problem on day 6 and print it on day 8.",
    "topics": [
      "binary search",
      "flows",
      "graphs"
    ],
    "id": "802N"
  },
  {
    "title": "Send the Fool Further! (easy)",
    "url": "https://codeforces.com/problemset/problem/802/J",
    "history": "Heidi' s friend Jenny is asking Heidi to deliver an important letter to one of their common friends. Since Jenny is Irish, Heidi thinks that this might be a prank. More precisely, she suspects that the message she is asked to deliver states: \" Send the fool further! \" , and upon reading it the recipient will ask Heidi to deliver the same message to yet another friend ( that the recipient has in common with Heidi) , and so on. Heidi believes that her friends want to avoid awkward situations, so she will not be made to visit the same person ( including Jenny) twice. She also knows how much it costs to travel between any two of her friends who know each other. She wants to know: what is the maximal amount of money she will waste on travel if it really is a prank? Heidi' s n friends are labeled 0 through n - 1, and their network of connections forms a tree. In other words, every two of her friends a, b know each other, possibly indirectly ( there is a sequence of friends starting from a and ending on b and such that each two consecutive friends in the sequence know each other directly) , and there are exactly n - 1 pairs of friends who know each other directly. Jenny is given the number 0.",
    "input": "The first line of the input contains the number of friends n ( 3 \u2264 n \u2264 100) . The next n - 1 lines each contain three space- separated integers u, v and c ( 0 \u2264 u, v \u2264 n - 1, 1 \u2264 c \u2264 104) , meaning that u and v are friends ( know each other directly) and the cost for travelling between u and v is c. It is guaranteed that the social network of the input forms a tree.",
    "output": "Output a single integer \u2013 the maximum sum of costs.",
    "note": "In the second example, the worst- case scenario goes like this: Jenny sends Heidi to the friend labeled by number 2 ( incurring a cost of 100) , then friend 2 sends her to friend 1 ( costing Heidi 3) , and finally friend 1 relays her to friend 4 ( incurring an additional cost of 2) .",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "802J"
  },
  {
    "title": "Mike and code of a permutation",
    "url": "https://codeforces.com/problemset/problem/798/E",
    "history": "Mike has discovered a new way to encode permutations. If he has a permutation P = [ p1, p2, . . . , pn] , he will encode it in the following way: Denote by A = [ a1, a2, . . . , an] a sequence of length n which will represent the code of the permutation. For each i from 1 to n sequentially, he will choose the smallest unmarked j ( 1 \u2264 j \u2264 n) such that pi < pj and will assign to ai the number j ( in other words he performs ai = j) and will mark j. If there is no such j, he' ll assign to ai the number - 1 ( he performs ai = - 1) . Mike forgot his original permutation but he remembers its code. Your task is simple: find any permutation such that its code is the same as the code of Mike' s original permutation. You may assume that there will always be at least one valid permutation.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 500 000) \u2014 length of permutation. The second line contains n space- separated integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n or ai = - 1) \u2014 the code of Mike' s permutation. You may assume that all positive values from A are different.",
    "output": "In first and only line print n numbers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 a permutation P which has the same code as the given one. Note that numbers in permutation are distinct.",
    "note": "For the permutation from the first example: i = 1, the smallest j is 2 because p2 = 6 > p1 = 2. i = 2, there is no j because p2 = 6 is the greatest element in the permutation. i = 3, the smallest j is 1 because p1 = 2 > p3 = 1. i = 4, the smallest j is 5 ( 2 was already marked) because p5 = 5 > p4 = 4. i = 5, there is no j because 2 is already marked. i = 6, the smallest j is 4 because p4 = 4 > p6 = 3.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "sortings"
    ],
    "id": "798E"
  },
  {
    "title": "Police Stations",
    "url": "https://codeforces.com/problemset/problem/796/D",
    "history": "Inzane finally found Zane with a lot of money to spare, so they together decided to establish a country of their own. Ruling a country is not an easy job. Thieves and terrorists are always ready to ruin the country' s peace. To fight back, Zane and Inzane have enacted a very effective law: from each city it must be possible to reach a police station by traveling at most d kilometers along the roads. There are n cities in the country, numbered from 1 to n, connected only by exactly n - 1 roads. All roads are 1 kilometer long. It is initially possible to travel from a city to any other city using these roads. The country also has k police stations located in some cities. In particular, the city' s structure satisfies the requirement enforced by the previously mentioned law. Also note that there can be multiple police stations in one city. However, Zane feels like having as many as n - 1 roads is unnecessary. The country is having financial issues, so it wants to minimize the road maintenance cost by shutting down as many roads as possible. Help Zane find the maximum number of roads that can be shut down without breaking the law. Also, help him determine such roads.",
    "input": "The first line contains three integers n, k, and d ( 2 \u2264 n \u2264 3\u00b7105, 1 \u2264 k \u2264 3\u00b7105, 0 \u2264 d \u2264 n - 1) \u2014 the number of cities, the number of police stations, and the distance limitation in kilometers, respectively. The second line contains k integers p1, p2, . . . , pk ( 1 \u2264 pi \u2264 n) \u2014 each denoting the city each police station is located in. The i- th of the following n - 1 lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 the cities directly connected by the road with index i. It is guaranteed that it is possible to travel from one city to any other city using only the roads. Also, it is possible from any city to reach a police station within d kilometers.",
    "output": "In the first line, print one integer s that denotes the maximum number of roads that can be shut down. In the second line, print s distinct integers, the indices of such roads, in any order. If there are multiple answers, print any of them.",
    "note": "In the first sample, if you shut down road 5, all cities can still reach a police station within k = 4 kilometers. In the second sample, although this is the only largest valid set of roads that can be shut down, you can print either 4 5 or 5 4 in the second line.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths",
      "trees"
    ],
    "id": "796D"
  },
  {
    "title": "Labelling Cities",
    "url": "https://codeforces.com/problemset/problem/794/D",
    "history": "Oleg the bank client lives in Bankopolia. There are n cities in Bankopolia and some pair of cities are connected directly by bi- directional roads. The cities are numbered from 1 to n. There are a total of m roads in Bankopolia, the i- th road connects cities ui and vi. It is guaranteed that from each city it is possible to travel to any other city using some of the roads. Oleg wants to give a label to each city. Suppose the label of city i is equal to xi. Then, it must hold that for all pairs of cities ( u, v) the condition | xu - xv| \u2264 1 holds if and only if there is a road connecting u and v. Oleg wonders if such a labeling is possible. Find an example of such labeling if the task is possible and state that it is impossible otherwise.",
    "input": "The first line of input contains two space- separated integers n and m ( 2 \u2264 n \u2264 3\u00b7105, 1 \u2264 m \u2264 3\u00b7105) \u2014 the number of cities and the number of roads. Next, m lines follow. The i- th line contains two space- separated integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 the cities connected by the i- th road. It is guaranteed that there is at most one road between each pair of cities and it is possible to travel from any city to any other city using some roads.",
    "output": "If the required labeling is not possible, output a single line containing the string \" NO\" ( without quotes) . Otherwise, output the string \" YES\" ( without quotes) on the first line. On the next line, output n space- separated integers, x1, x2, . . . , xn. The condition 1 \u2264 xi \u2264 109 must hold for all i, and for all pairs of cities ( u, v) the condition | xu - xv| \u2264 1 must hold if and only if there is a road connecting u and v.",
    "note": "For the first sample, x1 = 2, x2 = 3, x3 = x4 = 1 is a valid labeling. Indeed, ( 3, 4) , ( 1, 2) , ( 1, 3) , ( 1, 4) are the only pairs of cities with difference of labels not greater than 1, and these are precisely the roads of Bankopolia. For the second sample, all pairs of cities have difference of labels not greater than 1 and all pairs of cities have a road connecting them. For the last sample, it is impossible to construct a labeling satisfying the given constraints.",
    "topics": [
      "dfs and similar",
      "graphs",
      "hashing"
    ],
    "id": "794D"
  },
  {
    "title": "Presents in Bankopolis",
    "url": "https://codeforces.com/problemset/problem/793/D",
    "history": "Bankopolis is an incredible city in which all the n crossroads are located on a straight line and numbered from 1 to n along it. On each crossroad there is a bank office. The crossroads are connected with m oriented bicycle lanes ( the i- th lane goes from crossroad ui to crossroad vi) , the difficulty of each of the lanes is known. Oleg the bank client wants to gift happiness and joy to the bank employees. He wants to visit exactly k offices, in each of them he wants to gift presents to the employees. The problem is that Oleg don' t want to see the reaction on his gifts, so he can' t use a bicycle lane which passes near the office in which he has already presented his gifts ( formally, the i- th lane passes near the office on the x- th crossroad if and only if min( ui, vi) < x < max( ui, vi) ) ) . Of course, in each of the offices Oleg can present gifts exactly once. Oleg is going to use exactly k - 1 bicycle lane to move between offices. Oleg can start his path from any office and finish it in any office. Oleg wants to choose such a path among possible ones that the total difficulty of the lanes he will use is minimum possible. Find this minimum possible total difficulty.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 80) \u2014 the number of crossroads ( and offices) and the number of offices Oleg wants to visit. The second line contains single integer m ( 0 \u2264 m \u2264 2000) \u2014 the number of bicycle lanes in Bankopolis. The next m lines contain information about the lanes. The i- th of these lines contains three integers ui, vi and ci ( 1 \u2264 ui, vi \u2264 n, 1 \u2264 ci \u2264 1000) , denoting the crossroads connected by the i- th road and its difficulty.",
    "output": "In the only line print the minimum possible total difficulty of the lanes in a valid path, or - 1 if there are no valid paths.",
    "note": "In the first example Oleg visiting banks by path 1 \u2192 6 \u2192 2 \u2192 4. Path 1 \u2192 6 \u2192 2 \u2192 7 with smaller difficulity is incorrect because crossroad 2 \u2192 7 passes near already visited office on the crossroad 6. In the second example Oleg can visit banks by path 4 \u2192 1 \u2192 3.",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "793D"
  },
  {
    "title": "Igor and his way to work",
    "url": "https://codeforces.com/problemset/problem/793/B",
    "history": "Woken up by the alarm clock Igor the financial analyst hurried up to the work. He ate his breakfast and sat in his car. Sadly, when he opened his GPS navigator, he found that some of the roads in Bankopolis, the city where he lives, are closed due to road works. Moreover, Igor has some problems with the steering wheel, so he can make no more than two turns on his way to his office in bank. Bankopolis looks like a grid of n rows and m columns. Igor should find a way from his home to the bank that has no more than two turns and doesn' t contain cells with road works, or determine that it is impossible and he should work from home. A turn is a change in movement direction. Igor' s car can only move to the left, to the right, upwards and downwards. Initially Igor can choose any direction. Igor is still sleepy, so you should help him.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 1000) \u2014 the number of rows and the number of columns in the grid. Each of the next n lines contains m characters denoting the corresponding row of the grid. The following characters can occur: \" . \" \u2014 an empty cell; \" * \" \u2014 a cell with road works; \" S\" \u2014 the cell where Igor' s home is located; \" T\" \u2014 the cell where Igor' s office is located. It is guaranteed that \" S\" and \" T\" appear exactly once each.",
    "output": "In the only line print \" YES\" if there is a path between Igor' s home and Igor' s office with no more than two turns, and \" NO\" otherwise.",
    "note": "The first sample is shown on the following picture: In the second sample it is impossible to reach Igor' s office using less that 4 turns, thus there exists no path using no more than 2 turns. The path using exactly 4 turns is shown on this picture:",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "793B"
  },
  {
    "title": "The Great Mixing",
    "url": "https://codeforces.com/problemset/problem/788/C",
    "history": "Sasha and Kolya decided to get drunk with Coke, again. This time they have k types of Coke. i- th type is characterised by its carbon dioxide concentration . Today, on the party in honour of Sergiy of Vancouver they decided to prepare a glass of Coke with carbon dioxide concentration . The drink should also be tasty, so the glass can contain only integer number of liters of each Coke type ( some types can be not presented in the glass) . Also, they want to minimize the total volume of Coke in the glass. Carbon dioxide concentration is defined as the volume of carbone dioxide in the Coke divided by the total volume of Coke. When you mix two Cokes, the volume of carbon dioxide sums up, and the total volume of Coke sums up as well. Help them, find the minimal natural number of liters needed to create a glass with carbon dioxide concentration . Assume that the friends have unlimited amount of each Coke type.",
    "input": "The first line contains two integers n, k ( 0 \u2264 n \u2264 1000, 1 \u2264 k \u2264 106) \u2014 carbon dioxide concentration the friends want and the number of Coke types. The second line contains k integers a1, a2, . . . , ak ( 0 \u2264 ai \u2264 1000) \u2014 carbon dioxide concentration of each type of Coke. Some Coke types can have same concentration.",
    "output": "Print the minimal natural number of liter needed to prepare a glass with carbon dioxide concentration , or - 1 if it is impossible.",
    "note": "In the first sample case, we can achieve concentration using one liter of Coke of types and : . In the second case, we can achieve concentration using two liters of type and one liter of type: .",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "788C"
  },
  {
    "title": "Weird journey",
    "url": "https://codeforces.com/problemset/problem/788/B",
    "history": "Little boy Igor wants to become a traveller. At first, he decided to visit all the cities of his motherland \u2014 Uzhlyandia. It is widely known that Uzhlyandia has n cities connected with m bidirectional roads. Also, there are no two roads in the country that connect the same pair of cities, but roads starting and ending in the same city can exist. Igor wants to plan his journey beforehand. Boy thinks a path is good if the path goes over m - 2 roads twice, and over the other 2 exactly once. The good path can start and finish in any city of Uzhlyandia. Now he wants to know how many different good paths are in Uzhlyandia. Two paths are considered different if the sets of roads the paths goes over exactly once differ. Help Igor \u2014 calculate the number of good paths.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 106) \u2014 the number of cities and roads in Uzhlyandia, respectively. Each of the next m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n) that mean that there is road between cities u and v. It is guaranteed that no road will be given in the input twice. That also means that for every city there is no more than one road that connects the city to itself.",
    "output": "Print out the only integer \u2014 the number of good paths in Uzhlyandia.",
    "note": "In first sample test case the good paths are: 2 \u2192 1 \u2192 3 \u2192 1 \u2192 4 \u2192 1 \u2192 5, 2 \u2192 1 \u2192 3 \u2192 1 \u2192 5 \u2192 1 \u2192 4, 2 \u2192 1 \u2192 4 \u2192 1 \u2192 5 \u2192 1 \u2192 3, 3 \u2192 1 \u2192 2 \u2192 1 \u2192 4 \u2192 1 \u2192 5, 3 \u2192 1 \u2192 2 \u2192 1 \u2192 5 \u2192 1 \u2192 4, 4 \u2192 1 \u2192 2 \u2192 1 \u2192 3 \u2192 1 \u2192 5. There are good paths that are same with displayed above, because the sets of roads they pass over once are same: 2 \u2192 1 \u2192 4 \u2192 1 \u2192 3 \u2192 1 \u2192 5, 2 \u2192 1 \u2192 5 \u2192 1 \u2192 3 \u2192 1 \u2192 4, 2 \u2192 1 \u2192 5 \u2192 1 \u2192 4 \u2192 1 \u2192 3, 3 \u2192 1 \u2192 4 \u2192 1 \u2192 2 \u2192 1 \u2192 5, 3 \u2192 1 \u2192 5 \u2192 1 \u2192 2 \u2192 1 \u2192 4, 4 \u2192 1 \u2192 3 \u2192 1 \u2192 2 \u2192 1 \u2192 5, and all the paths in the other direction. Thus, the answer is 6. In the second test case, Igor simply can not walk by all the roads. In the third case, Igor walks once over every road.",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "788B"
  },
  {
    "title": "ALT",
    "url": "https://codeforces.com/problemset/problem/786/E",
    "history": "ALT is a planet in a galaxy called \" Encore\" . Humans rule this planet but for some reason there' s no dog in their planet, so the people there are sad and depressed. Rick and Morty are universal philanthropists and they want to make people in ALT happy. ALT has n cities numbered from 1 to n and n - 1 bidirectional roads numbered from 1 to n - 1. One can go from any city to any other city using these roads. There are two types of people in ALT: Guardians. A guardian lives in a house alongside a road and guards the road. Citizens. A citizen lives in a house inside a city and works in an office in another city. Every person on ALT is either a guardian or a citizen and there' s exactly one guardian alongside each road. Rick and Morty talked to all the people in ALT, and here' s what they got: There are m citizens living in ALT. Citizen number i lives in city number xi and works in city number yi. Every day each citizen will go through all roads along the shortest path from his home to his work. A citizen will be happy if and only if either he himself has a puppy himself or all of guardians along his path to his work has a puppy ( he sees the guardian' s puppy in each road and will be happy) . A guardian is always happy. You need to tell Rick and Morty the minimum number of puppies they need in order to make all people in ALT happy, and also provide an optimal way to distribute these puppies.",
    "input": "The first line of input contains two integers n and m ( 2 \u2264 n \u2264 2 \u00d7 104, 1 \u2264 m \u2264 104) \u2014 number of cities and number of citizens respectively. The next n - 1 lines contain the roads, i- th line contains endpoint of i- th edge, v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) . The next m lines contain the information about citizens. i- th line contains two integers xi and yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) .",
    "output": "In the first line of input print a single integer k, the total number of puppies they need ( 1 \u2264 k \u2264 n) . In the second line print an integer q, the number of puppies to give to citizens, followed by q distinct integers a1, a2, . . . , aq, index of citizens to give puppy to ( 0 \u2264 q \u2264 min( m, k) , 1 \u2264 ai \u2264 m) . In the third line print an integer e, the number of puppies to give to guardians, followed by e distinct integers b1, b2, . . . , be, index of road of guardians to give puppy to ( 0 \u2264 e \u2264 min( n - 1, k) , 1 \u2264 bi \u2264 n - 1) . Sum of q and e should be equal to k.",
    "note": "Map of ALT in the first sample testcase ( numbers written on a road is its index) : Map of ALT in the second sample testcase ( numbers written on a road is its index) :",
    "topics": [
      "data structures",
      "flows",
      "graphs",
      "trees"
    ],
    "id": "786E"
  },
  {
    "title": "Legacy",
    "url": "https://codeforces.com/problemset/problem/786/B",
    "history": "Rick and his co- workers have made a new radioactive formula and a lot of bad guys are after them. So Rick wants to give his legacy to Morty before bad guys catch them. There are n planets in their universe numbered from 1 to n. Rick is in planet number s ( the earth) and he doesn' t know where Morty is. As we all know, Rick owns a portal gun. With this gun he can open one- way portal from a planet he is in to any other planet ( including that planet) . But there are limits on this gun because he' s still using its free trial. By default he can not open any portal by this gun. There are q plans in the website that sells these guns. Every time you purchase a plan you can only use it once but you can purchase it again if you want to use it more. Plans on the website have three types: With a plan of this type you can open a portal from planet v to planet u. With a plan of this type you can open a portal from planet v to any planet with index in range [ l, r] . With a plan of this type you can open a portal from any planet with index in range [ l, r] to planet v. Rick doesn' t known where Morty is, but Unity is going to inform him and he wants to be prepared for when he finds and start his journey immediately. So for each planet ( including earth itself) he wants to know the minimum amount of money he needs to get from earth to that planet.",
    "input": "The first line of input contains three integers n, q and s ( 1 \u2264 n, q \u2264 105, 1 \u2264 s \u2264 n) \u2014 number of planets, number of plans and index of earth respectively. The next q lines contain the plans. Each line starts with a number t, type of that plan ( 1 \u2264 t \u2264 3) . If t = 1 then it is followed by three integers v, u and w where w is the cost of that plan ( 1 \u2264 v, u \u2264 n, 1 \u2264 w \u2264 109) . Otherwise it is followed by four integers v, l, r and w where w is the cost of that plan ( 1 \u2264 v \u2264 n, 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 w \u2264 109) .",
    "output": "In the first and only line of output print n integers separated by spaces. i- th of them should be minimum money to get from earth to i- th planet, or - 1 if it' s impossible to get to that planet.",
    "note": "In the first sample testcase, Rick can purchase 4th plan once and then 2nd plan in order to get to get to planet number 2.",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "786B"
  },
  {
    "title": "Axel and Marston in Bitland",
    "url": "https://codeforces.com/problemset/problem/780/F",
    "history": "A couple of friends, Axel and Marston are travelling across the country of Bitland. There are n towns in Bitland, with some pairs of towns connected by one- directional roads. Each road in Bitland is either a pedestrian road or a bike road. There can be multiple roads between any pair of towns, and may even be a road from a town to itself. However, no pair of roads shares the starting and the destination towns along with their types simultaneously. The friends are now located in the town 1 and are planning the travel route. Axel enjoys walking, while Marston prefers biking. In order to choose a route diverse and equally interesting for both friends, they have agreed upon the following procedure for choosing the road types during the travel: The route starts with a pedestrian route. Suppose that a beginning of the route is written in a string s of letters P ( pedestrain road) and B ( biking road) . Then, the string is appended to s, where stands for the string s with each character changed to opposite ( that is, all pedestrian roads changed to bike roads, and vice versa) . In the first few steps the route will look as follows: P, PB, PBBP, PBBPBPPB, PBBPBPPBBPPBPBBP, and so on. After that the friends start travelling from the town 1 via Bitlandian roads, choosing the next road according to the next character of their route type each time. If it is impossible to choose the next road, the friends terminate their travel and fly home instead. Help the friends to find the longest possible route that can be travelled along roads of Bitland according to the road types choosing procedure described above. If there is such a route with more than 1018 roads in it, print - 1 instead.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 500, 0 \u2264 m \u2264 2n2) \u2014 the number of towns and roads in Bitland respectively. Next m lines describe the roads. i- th of these lines contains three integers vi, ui and ti ( 1 \u2264 vi, ui \u2264 n, 0 \u2264 ti \u2264 1) , where vi and ui denote start and destination towns indices of the i- th road, and ti decribes the type of i- th road ( 0 for a pedestrian road, 1 for a bike road) . It is guaranteed that for each pair of distinct indices i, j such that 1 \u2264 i, j \u2264 m, either vi = \u0338 vj, or ui = \u0338 uj, or ti = \u0338 tj holds.",
    "output": "If it is possible to find a route with length strictly greater than 1018, print - 1. Otherwise, print the maximum length of a suitable path.",
    "note": "In the first sample we can obtain a route of length 3 by travelling along the road 1 from town 1 to town 2, and then following the road 2 twice from town 2 to itself. In the second sample we can obtain an arbitrarily long route by travelling the road 1 first, and then choosing road 2 or 3 depending on the necessary type.",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "matrices"
    ],
    "id": "780F"
  },
  {
    "title": "Underground Lab",
    "url": "https://codeforces.com/problemset/problem/780/E",
    "history": "The evil Bumbershoot corporation produces clones for gruesome experiments in a vast underground lab. On one occasion, the corp cloned a boy Andryusha who was smarter than his comrades. Immediately Andryusha understood that something fishy was going on there. He rallied fellow clones to go on a feud against the evil corp, and they set out to find an exit from the lab. The corp had to reduce to destroy the lab complex. The lab can be pictured as a connected graph with n vertices and m edges. k clones of Andryusha start looking for an exit in some of the vertices. Each clone can traverse any edge once per second. Any number of clones are allowed to be at any vertex simultaneously. Each clone is allowed to stop looking at any time moment, but he must look at his starting vertex at least. The exit can be located at any vertex of the lab, hence each vertex must be visited by at least one clone. Each clone can visit at most vertices before the lab explodes. Your task is to choose starting vertices and searching routes for the clones. Each route can have at most vertices.",
    "input": "The first line contains three integers n, m, and k ( 1 \u2264 n \u2264 2\u00b7105, n - 1 \u2264 m \u2264 2\u00b7105, 1 \u2264 k \u2264 n) \u2014 the number of vertices and edges in the lab, and the number of clones. Each of the next m lines contains two integers xi and yi ( 1 \u2264 xi, yi \u2264 n) \u2014 indices of vertices connected by the respective edge. The graph is allowed to have self- loops and multiple edges. The graph is guaranteed to be connected.",
    "output": "You should print k lines. i- th of these lines must start with an integer ci ( ) \u2014 the number of vertices visited by i- th clone, followed by ci integers \u2014 indices of vertices visited by this clone in the order of visiting. You have to print each vertex every time it is visited, regardless if it was visited earlier or not. It is guaranteed that a valid answer exists.",
    "note": "In the first sample case there is only one clone who may visit vertices in order ( 2, 1, 3) , which fits the constraint of 6 vertices per clone. In the second sample case the two clones can visited vertices in order ( 2, 1, 3) and ( 4, 1, 5) , which fits the constraint of 5 vertices per clone.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "780E"
  },
  {
    "title": "Innokenty and a Football League",
    "url": "https://codeforces.com/problemset/problem/780/D",
    "history": "Innokenty is a president of a new football league in Byteland. The first task he should do is to assign short names to all clubs to be shown on TV next to the score. Of course, the short names should be distinct, and Innokenty wants that all short names consist of three letters. Each club' s full name consist of two words: the team' s name and the hometown' s name, for example, \" DINAMO BYTECITY\" . Innokenty doesn' t want to assign strange short names, so he wants to choose such short names for each club that: the short name is the same as three first letters of the team' s name, for example, for the mentioned club it is \" DIN\" , or, the first two letters of the short name should be the same as the first two letters of the team' s name, while the third letter is the same as the first letter in the hometown' s name. For the mentioned club it is \" DIB\" . Apart from this, there is a rule that if for some club x the second option of short name is chosen, then there should be no club, for which the first option is chosen which is the same as the first option for the club x. For example, if the above mentioned club has short name \" DIB\" , then no club for which the first option is chosen can have short name equal to \" DIN\" . However, it is possible that some club have short name \" DIN\" , where \" DI\" are the first two letters of the team' s name, and \" N\" is the first letter of hometown' s name. Of course, no two teams can have the same short name. Help Innokenty to choose a short name for each of the teams. If this is impossible, report that. If there are multiple answer, any of them will suit Innokenty. If for some team the two options of short name are equal, then Innokenty will formally think that only one of these options is chosen.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 1000) \u2014 the number of clubs in the league. Each of the next n lines contains two words \u2014 the team' s name and the hometown' s name for some club. Both team' s name and hometown' s name consist of uppercase English letters and have length at least 3 and at most 20.",
    "output": "It it is not possible to choose short names and satisfy all constraints, print a single line \" NO\" . Otherwise, in the first line print \" YES\" . Then print n lines, in each line print the chosen short name for the corresponding club. Print the clubs in the same order as they appeared in input. If there are multiple answers, print any of them.",
    "note": "In the first sample Innokenty can choose first option for both clubs. In the second example it is not possible to choose short names, because it is not possible that one club has first option, and the other has second option if the first options are equal for both clubs. In the third example Innokenty can choose the second options for the first two clubs, and the first option for the third club. In the fourth example note that it is possible that the chosen short name for some club x is the same as the first option of another club y if the first options of x and y are different.",
    "topics": [
      "2-sat",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths",
      "strings"
    ],
    "id": "780D"
  },
  {
    "title": "Andryusha and Colored Balloons",
    "url": "https://codeforces.com/problemset/problem/780/C",
    "history": "Andryusha goes through a park each day. The squares and paths between them look boring to Andryusha, so he decided to decorate them. The park consists of n squares connected with ( n - 1) bidirectional paths in such a way that any square is reachable from any other using these paths. Andryusha decided to hang a colored balloon at each of the squares. The baloons' colors are described by positive integers, starting from 1. In order to make the park varicolored, Andryusha wants to choose the colors in a special way. More precisely, he wants to use such colors that if a, b and c are distinct squares that a and b have a direct path between them, and b and c have a direct path between them, then balloon colors on these three squares are distinct. Andryusha wants to use as little different colors as possible. Help him to choose the colors!",
    "input": "The first line contains single integer n ( 3 \u2264 n \u2264 2\u00b7105) \u2014 the number of squares in the park. Each of the next ( n - 1) lines contains two integers x and y ( 1 \u2264 x, y \u2264 n) \u2014 the indices of two squares directly connected by a path. It is guaranteed that any square is reachable from any other using the paths.",
    "output": "In the first line print single integer k \u2014 the minimum number of colors Andryusha has to use. In the second line print n integers, the i- th of them should be equal to the balloon color on the i- th square. Each of these numbers should be within range from 1 to k.",
    "note": "In the first sample the park consists of three squares: 1 \u2192 3 \u2192 2. Thus, the balloon colors have to be distinct. Illustration for the first sample. In the second example there are following triples of consequently connected squares: 1 \u2192 3 \u2192 2 1 \u2192 3 \u2192 4 1 \u2192 3 \u2192 5 2 \u2192 3 \u2192 4 2 \u2192 3 \u2192 5 4 \u2192 3 \u2192 5 We can see that each pair of squares is encountered in some triple, so all colors have to be distinct. Illustration for the second sample. In the third example there are following triples: 1 \u2192 2 \u2192 3 2 \u2192 3 \u2192 4 3 \u2192 4 \u2192 5 We can see that one or two colors is not enough, but there is an answer that uses three colors only. Illustration for the third sample.",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "780C"
  },
  {
    "title": "Sherlock's bet to Moriarty",
    "url": "https://codeforces.com/problemset/problem/776/F",
    "history": "Sherlock met Moriarty for a final battle of wits. He gave him a regular n sided convex polygon. In addition to it, he gave him certain diagonals to form regions on the polygon. It was guaranteed that the diagonals did not intersect in interior points. He took each of the region and calculated its importance value. Importance value for a region formed by vertices a1, a2, . . . , ax of the polygon will be given by 2a1 + 2a2 + . . . + 2ax. Then, he sorted these regions on the basis of their importance value in ascending order. After that he assigned each region an index from 1 to k, where k is the number of regions, and index of region is its position in the sorted array calculated above. He wants Moriarty to color the regions using not more than 20 colors, such that two regions have same color only if all the simple paths between these two regions have at least one region with color value less than the color value assigned to these regions. Simple path between two regions f and h is a sequence of regions r1, r2, . . . rt such that r1 = f, rt = h, for each 1 \u2264 i < t regions ri and ri + 1 share an edge, and ri = rj if and only if i = j. Moriarty couldn' t answer and asks Sherlock to solve it himself. Help Sherlock in doing so.",
    "input": "First line contains two integers n and m ( 3 \u2264 n \u2264 100000, 0 \u2264 m \u2264 n - 3) , the number of vertices in the polygon and the number of diagonals added. Each of the next m lines contains two integers a and b ( 1 \u2264 a, b \u2264 n) , describing a diagonal between vertices a and b. It is guaranteed that the diagonals are correct, i. e. a and b don' t coincide and are not neighboring. It is guaranteed that the diagonals do not intersect.",
    "output": "Let the number of regions be k. Output k space- separated integers, each between 1 and 20, representing the colors of the regions in the order of increasing importance. If there are multiple answers, print any of them. It can be shown that at least one answer exists.",
    "note": "In 2nd input, regions formed in order after sorting will be ( 1, 2, 3) , ( 1, 3, 4) , ( 1, 4, 5) , ( 1, 5, 6) , i. e, region ( 1, 2, 3) is first region followed by region ( 1, 3, 4) and so on. So, we can color regions 1 and 3 with same color, as region number 2 is on the path from 1 to 3 and it has color 1 which is less than color of 1 and 3, i. e. , color number 2.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "geometry",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "776F"
  },
  {
    "title": "The Door Problem",
    "url": "https://codeforces.com/problemset/problem/776/D",
    "history": "Moriarty has trapped n people in n distinct rooms in a hotel. Some rooms are locked, others are unlocked. But, there is a condition that the people in the hotel can only escape when all the doors are unlocked at the same time. There are m switches. Each switch control doors of some rooms, but each door is controlled by exactly two switches. You are given the initial configuration of the doors. Toggling any switch, that is, turning it ON when it is OFF, or turning it OFF when it is ON, toggles the condition of the doors that this switch controls. Say, we toggled switch 1, which was connected to room 1, 2 and 3 which were respectively locked, unlocked and unlocked. Then, after toggling the switch, they become unlocked, locked and locked. You need to tell Sherlock, if there exists a way to unlock all doors at the same time.",
    "input": "First line of input contains two integers n and m ( 2 \u2264 n \u2264 105, 2 \u2264 m \u2264 105) \u2014 the number of rooms and the number of switches. Next line contains n space- separated integers r1, r2, . . . , rn ( 0 \u2264 ri \u2264 1) which tell the status of room doors. The i- th room is locked if ri = 0, otherwise it is unlocked. The i- th of next m lines contains an integer xi ( 0 \u2264 xi \u2264 n) followed by xi distinct integers separated by space, denoting the number of rooms controlled by the i- th switch followed by the room numbers that this switch controls. It is guaranteed that the room numbers are in the range from 1 to n. It is guaranteed that each door is controlled by exactly two switches.",
    "output": "Output \" YES\" without quotes, if it is possible to open all doors at the same time, otherwise output \" NO\" without quotes.",
    "note": "In the second example input, the initial statuses of the doors are [ 1, 0, 1] ( 0 means locked, 1 \u2014 unlocked) . After toggling switch 3, we get [ 0, 0, 0] that means all doors are locked. Then, after toggling switch 1, we get [ 1, 1, 1] that means all doors are unlocked. It can be seen that for the first and for the third example inputs it is not possible to make all doors unlocked.",
    "topics": [
      "2-sat",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "776D"
  },
  {
    "title": "Perishable Roads",
    "url": "https://codeforces.com/problemset/problem/773/D",
    "history": "In the country of Never, there are n cities and a well- developed road system. There is exactly one bidirectional road between every pair of cities, thus, there are as many as roads! No two roads intersect, and no road passes through intermediate cities. The art of building tunnels and bridges has been mastered by Neverians. An independent committee has evaluated each road of Never with a positive integer called the perishability of the road. The lower the road' s perishability is, the more pleasant it is to drive through this road. It' s the year of transport in Never. It has been decided to build a museum of transport in one of the cities, and to set a single signpost directing to some city ( not necessarily the one with the museum) in each of the other cities. The signposts must satisfy the following important condition: if any Neverian living in a city without the museum starts travelling from that city following the directions of the signposts, then this person will eventually arrive in the city with the museum. Neverians are incredibly positive- minded. If a Neverian travels by a route consisting of several roads, he considers the perishability of the route to be equal to the smallest perishability of all the roads in this route. The government of Never has not yet decided where to build the museum, so they consider all n possible options. The most important is the sum of perishabilities of the routes to the museum city from all the other cities of Never, if the travelers strictly follow the directions of the signposts. The government of Never cares about their citizens, so they want to set the signposts in a way which minimizes this sum. Help them determine the minimum possible sum for all n possible options of the city where the museum can be built.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2000) \u2014 the number of cities in Never. The following n - 1 lines contain the description of the road network. The i- th of these lines contains n - i integers. The j- th integer in the i- th line denotes the perishability of the road between cities i and i + j. All road perishabilities are between 1 and 109, inclusive.",
    "output": "For each city in order from 1 to n, output the minimum possible sum of perishabilities of the routes to this city from all the other cities of Never if the signposts are set in a way which minimizes this sum.",
    "note": "The first example is explained by the picture below. From left to right, there is the initial road network and the optimal directions of the signposts in case the museum is built in city 1, 2 and 3, respectively. The museum city is represented by a blue circle, the directions of the signposts are represented by green arrows. For instance, if the museum is built in city 3, then the signpost in city 1 must be directed to city 3, while the signpost in city 2 must be directed to city 1. Then the route from city 1 to city 3 will have perishability 2, while the route from city 2 to city 3 will have perishability 1. The sum of perishabilities of these routes is 3.",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "773D"
  },
  {
    "title": "Vulnerable Kerbals",
    "url": "https://codeforces.com/problemset/problem/772/C",
    "history": "You are given an integer m, and a list of n distinct integers between 0 and m - 1. You would like to construct a sequence satisfying the properties: Each element is an integer between 0 and m - 1, inclusive. All prefix products of the sequence modulo m are distinct. No prefix product modulo m appears as an element of the input list. The length of the sequence is maximized. Construct any sequence satisfying the properties above.",
    "input": "The first line of input contains two integers n and m ( 0 \u2264 n < m \u2264 200 000) \u2014 the number of forbidden prefix products and the modulus. If n is non- zero, the next line of input contains n distinct integers between 0 and m - 1, the forbidden prefix products. If n is zero, this line doesn' t exist.",
    "output": "On the first line, print the number k, denoting the length of your sequence. On the second line, print k space separated integers, denoting your sequence.",
    "note": "For the first case, the prefix products of this sequence modulo m are [ 1, 2, 3, 4, 0] . For the second case, the prefix products of this sequence modulo m are [ 3, 7, 4, 6, 8, 0] .",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "math",
      "number theory"
    ],
    "id": "772C"
  },
  {
    "title": "Bear and Friendship Condition",
    "url": "https://codeforces.com/problemset/problem/771/A",
    "history": "Bear Limak examines a social network. Its main functionality is that two members can become friends ( then they can talk with each other and share funny pictures) . There are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can' t be a friend with themselves. Let A- B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members ( X, Y, Z) , if X- Y and Y- Z then also X- Z. For example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well. Can you help Limak and check if the network is reasonable? Print \" YES\" or \" NO\" accordingly, without the quotes.",
    "input": "The first line of the input contain two integers n and m ( 3 \u2264 n \u2264 150 000, ) \u2014 the number of members and the number of pairs of members that are friends. The i- th of the next m lines contains two distinct integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . Members ai and bi are friends with each other. No pair of members will appear more than once in the input.",
    "output": "If the given network is reasonable, print \" YES\" in a single line ( without the quotes) . Otherwise, print \" NO\" in a single line ( without the quotes) .",
    "note": "The drawings below show the situation in the first sample ( on the left) and in the second sample ( on the right) . Each edge represents two members that are friends. The answer is \" NO\" in the second sample because members ( 2, 3) are friends and members ( 3, 4) are friends, while members ( 2, 4) are not.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "771A"
  },
  {
    "title": "Online Courses In BSU",
    "url": "https://codeforces.com/problemset/problem/770/C",
    "history": "Now you can take online courses in the Berland State University! Polycarp needs to pass k main online courses of his specialty to get a diploma. In total n courses are availiable for the passage. The situation is complicated by the dependence of online courses, for each course there is a list of those that must be passed before starting this online course ( the list can be empty, it means that there is no limitation) . Help Polycarp to pass the least number of courses in total to get the specialty ( it means to pass all main and necessary courses) . Write a program which prints the order of courses. Polycarp passes courses consistently, he starts the next course when he finishes the previous one. Each course can' t be passed more than once.",
    "input": "The first line contains n and k ( 1 \u2264 k \u2264 n \u2264 105) \u2014 the number of online- courses and the number of main courses of Polycarp' s specialty. The second line contains k distinct integers from 1 to n \u2014 numbers of main online- courses of Polycarp' s specialty. Then n lines follow, each of them describes the next course: the i- th of them corresponds to the course i. Each line starts from the integer ti ( 0 \u2264 ti \u2264 n - 1) \u2014 the number of courses on which the i- th depends. Then there follows the sequence of ti distinct integers from 1 to n \u2014 numbers of courses in random order, on which the i- th depends. It is guaranteed that no course can depend on itself. It is guaranteed that the sum of all values ti doesn' t exceed 105.",
    "output": "Print - 1, if there is no the way to get a specialty. Otherwise, in the first line print the integer m \u2014 the minimum number of online- courses which it is necessary to pass to get a specialty. In the second line print m distinct integers \u2014 numbers of courses which it is necessary to pass in the chronological order of their passage. If there are several answers it is allowed to print any of them.",
    "note": "In the first test firstly you can take courses number 1 and 2, after that you can take the course number 4, then you can take the course number 5, which is the main. After that you have to take only the course number 3, which is the last not passed main course.",
    "topics": [
      "*special",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "770C"
  },
  {
    "title": "Cycle In Maze",
    "url": "https://codeforces.com/problemset/problem/769/C",
    "history": "The Robot is in a rectangular maze of size n \u00d7 m. Each cell of the maze is either empty or occupied by an obstacle. The Robot can move between neighboring cells on the side left ( the symbol \" L\" ) , right ( the symbol \" R\" ) , up ( the symbol \" U\" ) or down ( the symbol \" D\" ) . The Robot can move to the cell only if it is empty. Initially, the Robot is in the empty cell. Your task is to find lexicographically minimal Robot' s cycle with length exactly k, which begins and ends in the cell where the Robot was initially. It is allowed to the Robot to visit any cell many times ( including starting) . Consider that Robot' s way is given as a line which consists of symbols \" L\" , \" R\" , \" U\" and \" D\" . For example, if firstly the Robot goes down, then left, then right and up, it means that his way is written as \" DLRU\" . In this task you don' t need to minimize the length of the way. Find the minimum lexicographical ( in alphabet order as in the dictionary) line which satisfies requirements above.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 106) \u2014 the size of the maze and the length of the cycle. Each of the following n lines contains m symbols \u2014 the description of the maze. If the symbol equals to \" . \" the current cell is empty. If the symbol equals to \" * \" the current cell is occupied by an obstacle. If the symbol equals to \" X\" then initially the Robot is in this cell and it is empty. It is guaranteed that the symbol \" X\" is found in the maze exactly once.",
    "output": "Print the lexicographically minimum Robot' s way with the length exactly k, which starts and ends in the cell where initially Robot is. If there is no such way, print \" IMPOSSIBLE\" ( without quotes) .",
    "note": "In the first sample two cyclic ways for the Robot with the length 2 exist \u2014 \" UD\" and \" RL\" . The second cycle is lexicographically less. In the second sample the Robot should move in the following way: down, left, down, down, left, left, left, right, right, right, up, up, right, up. In the third sample the Robot can' t move to the neighboring cells, because they are occupied by obstacles.",
    "topics": [
      "*special",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "769C"
  },
  {
    "title": "Garland",
    "url": "https://codeforces.com/problemset/problem/767/C",
    "history": "Once at New Year Dima had a dream in which he was presented a fairy garland. A garland is a set of lamps, some pairs of which are connected by wires. Dima remembered that each two lamps in the garland were connected directly or indirectly via some wires. Furthermore, the number of wires was exactly one less than the number of lamps. There was something unusual about the garland. Each lamp had its own brightness which depended on the temperature of the lamp. Temperatures could be positive, negative or zero. Dima has two friends, so he decided to share the garland with them. He wants to cut two different wires so that the garland breaks up into three parts. Each part of the garland should shine equally, i. e. the sums of lamps' temperatures should be equal in each of the parts. Of course, each of the parts should be non- empty, i. e. each part should contain at least one lamp. Help Dima to find a suitable way to cut the garland, or determine that this is impossible. While examining the garland, Dima lifted it up holding by one of the lamps. Thus, each of the lamps, except the one he is holding by, is now hanging on some wire. So, you should print two lamp ids as the answer which denote that Dima should cut the wires these lamps are hanging on. Of course, the lamp Dima is holding the garland by can' t be included in the answer.",
    "input": "The first line contains single integer n ( 3 \u2264 n \u2264 106) \u2014 the number of lamps in the garland. Then n lines follow. The i- th of them contain the information about the i- th lamp: the number lamp ai, it is hanging on ( and 0, if is there is no such lamp) , and its temperature ti ( - 100 \u2264 ti \u2264 100) . The lamps are numbered from 1 to n.",
    "output": "If there is no solution, print - 1. Otherwise print two integers \u2014 the indexes of the lamps which mean Dima should cut the wires they are hanging on. If there are multiple answers, print any of them.",
    "note": "The garland and cuts scheme for the first example:",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "767C"
  },
  {
    "title": "Mahmoud and a Dictionary",
    "url": "https://codeforces.com/problemset/problem/766/D",
    "history": "Mahmoud wants to write a new dictionary that contains n words and relations between them. There are two types of relations: synonymy ( i. e. the two words mean the same) and antonymy ( i. e. the two words mean the opposite) . From time to time he discovers a new relation between two words. He know that if two words have a relation between them, then each of them has relations with the words that has relations with the other. For example, if like means love and love is the opposite of hate, then like is also the opposite of hate. One more example: if love is the opposite of hate and hate is the opposite of like, then love means like, and so on. Sometimes Mahmoud discovers a wrong relation. A wrong relation is a relation that makes two words equal and opposite at the same time. For example if he knows that love means like and like is the opposite of hate, and then he figures out that hate means like, the last relation is absolutely wrong because it makes hate and like opposite and have the same meaning at the same time. After Mahmoud figured out many relations, he was worried that some of them were wrong so that they will make other relations also wrong, so he decided to tell every relation he figured out to his coder friend Ehab and for every relation he wanted to know is it correct or wrong, basing on the previously discovered relations. If it is wrong he ignores it, and doesn' t check with following relations. After adding all relations, Mahmoud asked Ehab about relations between some words based on the information he had given to him. Ehab is busy making a Codeforces round so he asked you for help.",
    "input": "The first line of input contains three integers n, m and q ( 2 \u2264 n \u2264 105, 1 \u2264 m, q \u2264 105) where n is the number of words in the dictionary, m is the number of relations Mahmoud figured out and q is the number of questions Mahmoud asked after telling all relations. The second line contains n distinct words a1, a2, . . . , an consisting of small English letters with length not exceeding 20, which are the words in the dictionary. Then m lines follow, each of them contains an integer t ( 1 \u2264 t \u2264 2) followed by two different words xi and yi which has appeared in the dictionary words. If t = 1, that means xi has a synonymy relation with yi, otherwise xi has an antonymy relation with yi. Then q lines follow, each of them contains two different words which has appeared in the dictionary. That are the pairs of words Mahmoud wants to know the relation between basing on the relations he had discovered. All words in input contain only lowercase English letters and their lengths don' t exceed 20 characters. In all relations and in all questions the two words are different.",
    "output": "First, print m lines, one per each relation. If some relation is wrong ( makes two words opposite and have the same meaning at the same time) you should print \" NO\" ( without quotes) and ignore it, otherwise print \" YES\" ( without quotes) . After that print q lines, one per each question. If the two words have the same meaning, output 1. If they are opposites, output 2. If there is no relation between them, output 3. See the samples for better understanding.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "dsu",
      "graphs"
    ],
    "id": "766D"
  },
  {
    "title": "Timofey and a flat tree",
    "url": "https://codeforces.com/problemset/problem/763/D",
    "history": "Little Timofey has a big tree \u2014 an undirected connected graph with n vertices and no simple cycles. He likes to walk along it. His tree is flat so when he walks along it he sees it entirely. Quite naturally, when he stands on a vertex, he sees the tree as a rooted tree with the root in this vertex. Timofey assumes that the more non- isomorphic subtrees are there in the tree, the more beautiful the tree is. A subtree of a vertex is a subgraph containing this vertex and all its descendants. You should tell Timofey the vertex in which he should stand to see the most beautiful rooted tree. Subtrees of vertices u and v are isomorphic if the number of children of u equals the number of children of v, and their children can be arranged in such a way that the subtree of the first son of u is isomorphic to the subtree of the first son of v, the subtree of the second son of u is isomorphic to the subtree of the second son of v, and so on. In particular, subtrees consisting of single vertex are isomorphic to each other.",
    "input": "First line contains single integer n ( 1 \u2264 n \u2264 105) \u2014 number of vertices in the tree. Each of the next n - 1 lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 105, ui = \u0338 vi) , denoting the vertices the i- th edge connects. It is guaranteed that the given graph is a tree.",
    "output": "Print single integer \u2014 the index of the vertex in which Timofey should stand. If there are many answers, you can print any of them.",
    "note": "In the first example we can stand in the vertex 1 or in the vertex 3 so that every subtree is non- isomorphic. If we stand in the vertex 2, then subtrees of vertices 1 and 3 are isomorphic. In the second example, if we stand in the vertex 1, then only subtrees of vertices 4 and 5 are isomorphic. In the third example, if we stand in the vertex 1, then subtrees of vertices 2, 3, 4, 6, 7 and 8 are isomorphic. If we stand in the vertex 2, than only subtrees of vertices 3, 4, 6, 7 and 8 are isomorphic. If we stand in the vertex 5, then subtrees of vertices 2, 3, 4, 6, 7 and 8 are isomorphic, and subtrees of vertices 1 and 9 are isomorphic as well: 1 9 / / 8 4 2",
    "topics": [
      "data structures",
      "graphs",
      "hashing",
      "shortest paths",
      "trees"
    ],
    "id": "763D"
  },
  {
    "title": "Timofey and a tree",
    "url": "https://codeforces.com/problemset/problem/763/A",
    "history": "Each New Year Timofey and his friends cut down a tree of n vertices and bring it home. After that they paint all the n its vertices, so that the i- th vertex gets color ci. Now it' s time for Timofey birthday, and his mother asked him to remove the tree. Timofey removes the tree in the following way: he takes some vertex in hands, while all the other vertices move down so that the tree becomes rooted at the chosen vertex. After that Timofey brings the tree to a trash can. Timofey doesn' t like it when many colors are mixing together. A subtree annoys him if there are vertices of different color in it. Timofey wants to find a vertex which he should take in hands so that there are no subtrees that annoy him. He doesn' t consider the whole tree as a subtree since he can' t see the color of the root vertex. A subtree of some vertex is a subgraph containing that vertex and all its descendants. Your task is to determine if there is a vertex, taking which in hands Timofey wouldn' t be annoyed.",
    "input": "The first line contains single integer n ( 2 \u2264 n \u2264 105) \u2014 the number of vertices in the tree. Each of the next n - 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) , denoting there is an edge between vertices u and v. It is guaranteed that the given graph is a tree. The next line contains n integers c1, c2, . . . , cn ( 1 \u2264 ci \u2264 105) , denoting the colors of the vertices.",
    "output": "Print \" NO\" in a single line, if Timofey can' t take the tree in such a way that it doesn' t annoy him. Otherwise print \" YES\" in the first line. In the second line print the index of the vertex which Timofey should take in hands. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "763A"
  },
  {
    "title": "Tree nesting",
    "url": "https://codeforces.com/problemset/problem/762/F",
    "history": "You are given two trees ( connected undirected acyclic graphs) S and T. Count the number of subtrees ( connected subgraphs) of S that are isomorphic to tree T. Since this number can get quite large, output it modulo 109 + 7. Two subtrees of tree S are considered different, if there exists a vertex in S that belongs to exactly one of them. Tree G is called isomorphic to tree H if there exists a bijection f from the set of vertices of G to the set of vertices of H that has the following property: if there is an edge between vertices A and B in tree G, then there must be an edge between vertices f( A) and f( B) in tree H. And vice versa \u2014 if there is an edge between vertices A and B in tree H, there must be an edge between f - 1( A) and f - 1( B) in tree G.",
    "input": "The first line contains a single integer | S| ( 1 \u2264 | S| \u2264 1000) \u2014 the number of vertices of tree S. Next | S| - 1 lines contain two integers ui and vi ( 1 \u2264 ui, vi \u2264 | S| ) and describe edges of tree S. The next line contains a single integer | T| ( 1 \u2264 | T| \u2264 12) \u2014 the number of vertices of tree T. Next | T| - 1 lines contain two integers xi and yi ( 1 \u2264 xi, yi \u2264 | T| ) and describe edges of tree T.",
    "output": "On the first line output a single integer \u2014 the answer to the given task modulo 109 + 7.",
    "note": "",
    "topics": [
      "combinatorics",
      "graphs",
      "trees"
    ],
    "id": "762F"
  },
  {
    "title": "Dasha and Puzzle",
    "url": "https://codeforces.com/problemset/problem/761/E",
    "history": "Dasha decided to have a rest after solving the problem. She had been ready to start her favourite activity \u2014 origami, but remembered the puzzle that she could not solve. The tree is a non- oriented connected graph without cycles. In particular, there always are n - 1 edges in a tree with n vertices. The puzzle is to position the vertices at the points of the Cartesian plane with integral coordinates, so that the segments between the vertices connected by edges are parallel to the coordinate axes. Also, the intersection of segments is allowed only at their ends. Distinct vertices should be placed at different points. Help Dasha to find any suitable way to position the tree vertices on the plane. It is guaranteed that if it is possible to position the tree vertices on the plane without violating the condition which is given above, then you can do it by using points with integral coordinates which don' t exceed 1018 in absolute value.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 30) \u2014 the number of vertices in the tree. Each of next n - 1 lines contains two integers ui, vi ( 1 \u2264 ui, vi \u2264 n) that mean that the i- th edge of the tree connects vertices ui and vi. It is guaranteed that the described graph is a tree.",
    "output": "If the puzzle doesn' t have a solution then in the only line print \" NO\" . Otherwise, the first line should contain \" YES\" . The next n lines should contain the pair of integers xi, yi ( | xi| , | yi| \u2264 1018) \u2014 the coordinates of the point which corresponds to the i- th vertex of the tree. If there are several solutions, print any of them.",
    "note": "In the first sample one of the possible positions of tree is:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "761E"
  },
  {
    "title": "Broken Tree",
    "url": "https://codeforces.com/problemset/problem/758/E",
    "history": "You are given a tree that has n vertices, which are numbered from 1 to n, where the vertex number one is the root. Each edge has weight wi and strength pi. Botanist Innokentiy, who is the only member of the jury of the Olympiad in Informatics, doesn' t like broken trees. The tree is broken if there is such an edge the strength of which is less than the sum of weight of subtree' s edges to which it leads. It is allowed to reduce weight of any edge by arbitrary integer value, but then the strength of its edge is reduced by the same value. It means if the weight of the edge is 10, and the strength is 12, then by the reducing the weight by 7 its weight will equal 3, and the strength will equal 5. It is not allowed to increase the weight of the edge. Your task is to get the tree, which is not broken, by reducing the weight of edges of the given tree, and also all edged should have the positive weight, moreover, the total weight of all edges should be as large as possible. It is obvious that the strength of edges can not be negative, however it can equal zero if the weight of the subtree equals zero.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of vertices in the tree. The next n - 1 lines contains the description of edges. Each line contains four integers x, y, w, p ( 1 \u2264 x, y \u2264 n, 1 \u2264 w \u2264 109, 0 \u2264 p \u2264 109) , where x and y \u2014 vertices which connect the edge ( the vertex number x is the parent of the vertex number y) , w and p are the weight and the strength of the edge, accordingly. It is guaranteed that the edges describe the tree with the root in the vertex 1.",
    "output": "If it is impossible to get unbroken tree from the given tree, print - 1 in the only line. Otherwise, the output data should contain n lines: In the first line print the number n \u2014 the number of vertices on the tree. In the next n - 1 lines print the description of edges of the resulting tree. Each line should contain four integers x, y, w, p ( 1 \u2264 x, y \u2264 n, 1 \u2264 w \u2264 109, 0 \u2264 p \u2264 109) , where x and y \u2014 vertices, which the edge connects ( the vertex number x is the parent of the vertex number y) , w and p are the new weight and the strength of the edge, accordingly. Print edges in the same order as they are given in input data: the first two integers of each line should not be changed.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "758E"
  },
  {
    "title": "Can Bash Save the Day?",
    "url": "https://codeforces.com/problemset/problem/757/G",
    "history": "Whoa! You did a great job helping Team Rocket who managed to capture all the Pokemons sent by Bash. Meowth, part of Team Rocket, having already mastered the human language, now wants to become a master in programming as well. He agrees to free the Pokemons if Bash can answer his questions. Initially, Meowth gives Bash a weighted tree containing n nodes and a sequence a1, a2. . . , an which is a permutation of 1, 2, . . . , n. Now, Mewoth makes q queries of one of the following forms: 1 l r v: meaning Bash should report , where dist( a, b) is the length of the shortest path from node a to node b in the given tree. 2 x: meaning Bash should swap ax and ax + 1 in the given sequence. This new sequence is used for later queries. Help Bash to answer the questions!",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 2\u00b7105, 1 \u2264 q \u2264 2\u00b7105) \u2014 the number of nodes in the tree and the number of queries, respectively. The next line contains n space- separated integers \u2014 the sequence a1, a2, . . . , an which is a permutation of 1, 2, . . . , n. Each of the next n - 1 lines contain three space- separated integers u, v, and w denoting that there exists an undirected edge between node u and node v of weight w, ( 1 \u2264 u, v \u2264 n, u = \u0338 v, 1 \u2264 w \u2264 106) . It is guaranteed that the given graph is a tree. Each query consists of two lines. First line contains single integer t, indicating the type of the query. Next line contains the description of the query: t = 1: Second line contains three integers a, b and c ( 1 \u2264 a, b, c < 230) using which l, r and v can be generated using the formula given below: , , . t = 2: Second line contains single integer a ( 1 \u2264 a < 230) using which x can be generated using the formula given below: . The ansi is the answer for the i- th query, assume that ans0 = 0. If the i- th query is of type 2 then ansi = ansi - 1. It is guaranteed that: for each query of type 1: 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 v \u2264 n, for each query of type 2: 1 \u2264 x \u2264 n - 1. The operation means bitwise exclusive OR.",
    "output": "For each query of type 1, output a single integer in a separate line, denoting the answer to the query.",
    "note": "In the sample, the actual queries are the following: 1 1 5 4 1 1 3 3 2 3 2 2 1 1 3 3",
    "topics": [
      "data structures",
      "divide and conquer",
      "graphs",
      "trees"
    ],
    "id": "757G"
  },
  {
    "title": "Team Rocket Rises Again",
    "url": "https://codeforces.com/problemset/problem/757/F",
    "history": "It' s the turn of the year, so Bash wants to send presents to his friends. There are n cities in the Himalayan region and they are connected by m bidirectional roads. Bash is living in city s. Bash has exactly one friend in each of the other cities. Since Bash wants to surprise his friends, he decides to send a Pikachu to each of them. Since there may be some cities which are not reachable from Bash' s city, he only sends a Pikachu to those friends who live in a city reachable from his own city. He also wants to send it to them as soon as possible. He finds out the minimum time for each of his Pikachus to reach its destination city. Since he is a perfectionist, he informs all his friends with the time their gift will reach them. A Pikachu travels at a speed of 1 meters per second. His friends were excited to hear this and would be unhappy if their presents got delayed. Unfortunately Team Rocket is on the loose and they came to know of Bash' s plan. They want to maximize the number of friends who are unhappy with Bash. They do this by destroying exactly one of the other n - 1 cities. This implies that the friend residing in that city dies, so he is unhappy as well. Note that if a city is destroyed, all the roads directly connected to the city are also destroyed and the Pikachu may be forced to take a longer alternate route. Please also note that only friends that are waiting for a gift count as unhappy, even if they die. Since Bash is already a legend, can you help Team Rocket this time and find out the maximum number of Bash' s friends who can be made unhappy by destroying exactly one city.",
    "input": "The first line contains three space separated integers n, m and s ( 2 \u2264 n \u2264 2\u00b7105, , 1 \u2264 s \u2264 n) \u2014 the number of cities and the number of roads in the Himalayan region and the city Bash lives in. Each of the next m lines contain three space- separated integers u, v and w ( 1 \u2264 u, v \u2264 n, u = \u0338 v, 1 \u2264 w \u2264 109) denoting that there exists a road between city u and city v of length w meters. It is guaranteed that no road connects a city to itself and there are no two roads that connect the same pair of cities.",
    "output": "Print a single integer, the answer to the problem.",
    "note": "In the first sample, on destroying the city 2, the length of shortest distance between pairs of cities ( 3, 2) and ( 3, 4) will change. Hence the answer is 2.",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "757F"
  },
  {
    "title": "PolandBall and White-Red graph",
    "url": "https://codeforces.com/problemset/problem/755/E",
    "history": "PolandBall has an undirected simple graph consisting of n vertices. Unfortunately, it has no edges. The graph is very sad because of that. PolandBall wanted to make it happier, adding some red edges. Then, he will add white edges in every remaining place. Therefore, the final graph will be a clique in two colors: white and red. Colorfulness of the graph is a value min( dr, dw) , where dr is the diameter of the red subgraph and dw is the diameter of white subgraph. The diameter of a graph is a largest value d such that shortest path between some pair of vertices in it is equal to d. If the graph is not connected, we consider its diameter to be - 1. PolandBall wants the final graph to be as neat as possible. He wants the final colorfulness to be equal to k. Can you help him and find any graph which satisfies PolandBall' s requests?",
    "input": "The only one input line contains two integers n and k ( 2 \u2264 n \u2264 1000, 1 \u2264 k \u2264 1000) , representing graph' s size and sought colorfulness.",
    "output": "If it' s impossible to find a suitable graph, print - 1. Otherwise, you can output any graph which fulfills PolandBall' s requirements. First, output m \u2014 the number of red edges in your graph. Then, you should output m lines, each containing two integers ai and bi, ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) which means that there is an undirected red edge between vertices ai and bi. Every red edge should be printed exactly once, you can print the edges and the vertices of every edge in arbitrary order. Remember that PolandBall' s graph should remain simple, so no loops or multiple edges are allowed.",
    "note": "In the first sample case, no graph can fulfill PolandBall' s requirements. In the second sample case, red graph is a path from 1 to 5. Its diameter is 4. However, white graph has diameter 2, because it consists of edges 1- 3, 1- 4, 1- 5, 2- 4, 2- 5, 3- 5.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "shortest paths"
    ],
    "id": "755E"
  },
  {
    "title": "PolandBall and Forest",
    "url": "https://codeforces.com/problemset/problem/755/C",
    "history": "PolandBall lives in a forest with his family. There are some trees in the forest. Trees are undirected acyclic graphs with k vertices and k - 1 edges, where k is some integer. Note that one vertex is a valid tree. There is exactly one relative living in each vertex of each tree, they have unique ids from 1 to n. For each Ball i we know the id of its most distant relative living on the same tree. If there are several such vertices, we only know the value of the one with smallest id among those. How many trees are there in the forest? InteractionFrom the technical side, this problem is interactive. However, it should not affect you ( except hacking) since there is no interaction.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 104) \u2014 the number of Balls living in the forest. The second line contains a sequence p1, p2, . . . , pn of length n, where ( 1 \u2264 pi \u2264 n) holds and pi denotes the most distant from Ball i relative living on the same tree. If there are several most distant relatives living on the same tree, pi is the id of one with the smallest id. It' s guaranteed that the sequence p corresponds to some valid forest. Hacking: To hack someone, you should provide a correct forest as a test. The sequence p will be calculated according to the forest and given to the solution you try to hack as input. Use the following format: In the first line, output the integer n ( 1 \u2264 n \u2264 104) \u2014 the number of Balls and the integer m ( 0 \u2264 m < n) \u2014 the total number of edges in the forest. Then m lines should follow. The i- th of them should contain two integers ai and bi and represent an edge between vertices in which relatives ai and bi live. For example, the first sample is written as follows: 5 31 23 44 5",
    "output": "You should output the number of trees in the forest where PolandBall lives.",
    "note": "In the first sample testcase, possible forest is: 1- 2 3- 4- 5. There are 2 trees overall. In the second sample testcase, the only possible graph is one vertex and no edges. Therefore, there is only one tree.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "interactive",
      "trees"
    ],
    "id": "755C"
  },
  {
    "title": "PolandBall and Hypothesis",
    "url": "https://codeforces.com/problemset/problem/755/A",
    "history": "PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: \" There exists such a positive integer n that for each positive integer m number n\u00b7m + 1 is a prime number\" . Unfortunately, PolandBall is not experienced yet and doesn' t know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.",
    "input": "The only number in the input is n ( 1 \u2264 n \u2264 1000) \u2014 number from the PolandBall' s hypothesis.",
    "output": "Output such m that n\u00b7m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 \u2264 m \u2264 103. It is guaranteed the the answer exists.",
    "note": "A prime number ( or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself. For the first sample testcase, 3\u00b71 + 1 = 4. We can output 1. In the second sample testcase, 4\u00b71 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4\u00b72 + 1 = 9, which is not a prime number.",
    "topics": [
      "brute force",
      "graphs",
      "math",
      "number theory"
    ],
    "id": "755A"
  },
  {
    "title": "New Year and Snowy Grid",
    "url": "https://codeforces.com/problemset/problem/750/H",
    "history": "Pay attention to the output section below, where you will see the information about flushing the output. Bearland is a grid with h rows and w columns. Rows are numbered 1 through h from top to bottom. Columns are numbered 1 through w from left to right. Every cell is either allowed ( denoted by ' . ' in the input) or permanently blocked ( denoted by ' # ' ) . Bearland is a cold land, where heavy snow often makes travelling harder. Every day a few allowed cells are temporarily blocked by snow. Note, that this block works only on this particular day and next day any of these cells might be allowed again ( unless there is another temporarily block) . It' s possible to move directly between two cells only if they share a side and none of them is permanently or temporarily blocked. Limak is a little polar bear who lives in Bearland. His house is at the top left cell, while his school is at the bottom right cell. Every day Limak should first go from his house to the school and then return back to his house. Since he gets bored easily, he doesn' t want to visit the same cell twice on one day, except for the cell with his house, where he starts and ends. If Limak can reach a school and return home avoiding revisiting cells, he calls a day interesting. There are q days you must process, one after another. For each of these days you should check if it' s interesting and print \" YES\" or \" NO\" on a separate line. In order to be able to read the description of the next day you should print the answer for the previous one and flush the output. It' s guaranteed that a day with no cells temporarily blocked by snow would be interesting. It' s also guaranteed that cells with Limak' s house and school are never blocked ( neither permanently or temporarily) .",
    "input": "The first line of the input contains three integers h, w and q ( 2 \u2264 h, w \u2264 1000, 1 \u2264 q \u2264 10 000) \u2014 the height and the width of the grid, and the number of days, respectively. Next h lines describe which cells are allowed and which permanently blocked. The i- th line contains a string of length w, describing the i- th row. Every character is either ' . ' ( denoting an allowed cell) or ' # ' ( denoting a permanently blocked cell) . It' s guaranteed that a day with no cells temporarily blocked by snow would be interesting. Then, the description of q days is given. The description of the i- th day starts with a line containing a single integer ki ( 1 \u2264 ki \u2264 10) \u2014 the number of cells that are temporarily blocked by snow on that day. Each of next ki lines contains two integers ri, j and ci, j ( 1 \u2264 ri, j \u2264 h, 1 \u2264 ci, j \u2264 w) , representing a cell at the intersection of the row ri, j and the column ci, j. The given ki cells are distinct and none of them is permanently blocked. Also, none of them contains Limak' s house or school.",
    "output": "For each of q days print \" YES\" if that day is interesting, and otherwise print \" NO\" , both without the quotes. After printing an answer, you have to both print the end- of- line character and flush the output. Then you can proceed to the next day. You can get Idleness Limit Exceeded if you don' t print anything or if you forget to flush the output. To flush you can use ( just after printing a YES/ NO and end- of- line) : fflush( stdout) in C+ + ; System. out. flush( ) in Java; stdout. flush( ) in Python; flush( output) in Pascal; See the documentation for other languages.",
    "note": "In the first sample, there are 4 days. Drawings below show how Limak could go to school and return to his home in the second and the third day ( on the left and on the right respectively) . A permanently blocked cell is painted red, while cells temporarily blocked by snow are painted orange. Black and green arrows should Limak' s way to the school and back to the house respectively. For the second sample, below you can see how the grid looks like on each day, where ' # ' denotes a cell that is blocked, either temporarily or permanently.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "interactive"
    ],
    "id": "750H"
  },
  {
    "title": "Santa Clauses and a Soccer Championship",
    "url": "https://codeforces.com/problemset/problem/748/F",
    "history": "The country Treeland consists of n cities connected with n - 1 bidirectional roads in such a way that it' s possible to reach every city starting from any other city using these roads. There will be a soccer championship next year, and all participants are Santa Clauses. There are exactly 2k teams from 2k different cities. During the first stage all teams are divided into k pairs. Teams of each pair play two games against each other: one in the hometown of the first team, and the other in the hometown of the other team. Thus, each of the 2k cities holds exactly one soccer game. However, it' s not decided yet how to divide teams into pairs. It' s also necessary to choose several cities to settle players in. Organizers tend to use as few cities as possible to settle the teams. Nobody wants to travel too much during the championship, so if a team plays in cities u and v, it wants to live in one of the cities on the shortest path between u and v ( maybe, in u or in v) . There is another constraint also: the teams from one pair must live in the same city. Summarizing, the organizers want to divide 2k teams into pairs and settle them in the minimum possible number of cities m in such a way that teams from each pair live in the same city which lies between their hometowns.",
    "input": "The first line of input contains two integers n and k ( 2 \u2264 n \u2264 2\u00b7105, 2 \u2264 2k \u2264 n) \u2014 the number of cities in Treeland and the number of pairs of teams, respectively. The following n - 1 lines describe roads in Treeland: each of these lines contains two integers a and b ( 1 \u2264 a, b \u2264 n, a = \u0338 b) which mean that there is a road between cities a and b. It' s guaranteed that there is a path between any two cities. The last line contains 2k distinct integers c1, c2, . . . , c2k ( 1 \u2264 ci \u2264 n) , where ci is the hometown of the i- th team. All these numbers are distinct.",
    "output": "The first line of output must contain the only positive integer m which should be equal to the minimum possible number of cities the teams can be settled in. The second line should contain m distinct numbers d1, d2, . . . , dm ( 1 \u2264 di \u2264 n) denoting the indices of the cities where the teams should be settled. The k lines should follow, the j- th of them should contain 3 integers uj, vj and xj, where uj and vj are the hometowns of the j- th pair' s teams, and xj is the city they should live in during the tournament. Each of the numbers c1, c2, . . . , c2k should occur in all uj' s and vj' s exactly once. Each of the numbers xj should belong to d1, d2, . . . , dm. If there are several possible answers, print any of them.",
    "note": "In the first test the orginizers can settle all the teams in the city number 2. The way to divide all teams into pairs is not important, since all requirements are satisfied anyway, because the city 2 lies on the shortest path between every two cities from 2, 4, 5, 6.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "748F"
  },
  {
    "title": "New Roads",
    "url": "https://codeforces.com/problemset/problem/746/G",
    "history": "There are n cities in Berland, each of them has a unique id \u2014 an integer from 1 to n, the capital is the one with id 1. Now there is a serious problem in Berland with roads \u2014 there are no roads. That is why there was a decision to build n - 1 roads so that there will be exactly one simple path between each pair of cities. In the construction plan t integers a1, a2, . . . , at were stated, where t equals to the distance from the capital to the most distant city, concerning new roads. ai equals the number of cities which should be at the distance i from the capital. The distance between two cities is the number of roads one has to pass on the way from one city to another. Also, it was decided that among all the cities except the capital there should be exactly k cities with exactly one road going from each of them. Such cities are dead- ends and can' t be economically attractive. In calculation of these cities the capital is not taken into consideration regardless of the number of roads from it. Your task is to offer a plan of road' s construction which satisfies all the described conditions or to inform that it is impossible.",
    "input": "The first line contains three positive numbers n, t and k ( 2 \u2264 n \u2264 2\u00b7105, 1 \u2264 t, k < n) \u2014 the distance to the most distant city from the capital and the number of cities which should be dead- ends ( the capital in this number is not taken into consideration) . The second line contains a sequence of t integers a1, a2, . . . , at ( 1 \u2264 ai < n) , the i- th number is the number of cities which should be at the distance i from the capital. It is guaranteed that the sum of all the values ai equals n - 1.",
    "output": "If it is impossible to built roads which satisfy all conditions, print - 1. Otherwise, in the first line print one integer n \u2014 the number of cities in Berland. In the each of the next n - 1 line print two integers \u2014 the ids of cities that are connected by a road. Each road should be printed exactly once. You can print the roads and the cities connected by a road in any order. If there are multiple answers, print any of them. Remember that the capital has id 1.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "trees"
    ],
    "id": "746G"
  },
  {
    "title": "Hongcow Builds A Nation",
    "url": "https://codeforces.com/problemset/problem/744/A",
    "history": "Hongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries. The world can be modeled as an undirected graph with n nodes and m edges. k of the nodes are home to the governments of the k countries that make up the world. There is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, there is no path between those two nodes. Any graph that satisfies all of these conditions is stable. Hongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add.",
    "input": "The first line of input will contain three integers n, m and k ( 1 \u2264 n \u2264 1 000, 0 \u2264 m \u2264 100 000, 1 \u2264 k \u2264 n) \u2014 the number of vertices and edges in the graph, and the number of vertices that are homes of the government. The next line of input will contain k integers c1, c2, . . . , ck ( 1 \u2264 ci \u2264 n) . These integers will be pairwise distinct and denote the nodes that are home to the governments in this world. The following m lines of input will contain two integers ui and vi ( 1 \u2264 ui, vi \u2264 n) . This denotes an undirected edge between nodes ui and vi. It is guaranteed that the graph described by the input is stable.",
    "output": "Output a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable.",
    "note": "For the first sample test, the graph looks like this: Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them. For the second sample test, the graph looks like this: We cannot add any more edges to this graph. Note that we are not allowed to add self- loops, and the graph must be simple.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "744A"
  },
  {
    "title": "Chloe and pleasant prizes",
    "url": "https://codeforces.com/problemset/problem/743/D",
    "history": "Generous sponsors of the olympiad in which Chloe and Vladik took part allowed all the participants to choose a prize for them on their own. Christmas is coming, so sponsors decided to decorate the Christmas tree with their prizes. They took n prizes for the contestants and wrote on each of them a unique id ( integer from 1 to n) . A gift i is characterized by integer ai \u2014 pleasantness of the gift. The pleasantness of the gift can be positive, negative or zero. Sponsors placed the gift 1 on the top of the tree. All the other gifts hung on a rope tied to some other gift so that each gift hung on the first gift, possibly with a sequence of ropes and another gifts. Formally, the gifts formed a rooted tree with n vertices. The prize- giving procedure goes in the following way: the participants come to the tree one after another, choose any of the remaining gifts and cut the rope this prize hang on. Note that all the ropes which were used to hang other prizes on the chosen one are not cut. So the contestant gets the chosen gift as well as the all the gifts that hang on it, possibly with a sequence of ropes and another gifts. Our friends, Chloe and Vladik, shared the first place on the olympiad and they will choose prizes at the same time! To keep themselves from fighting, they decided to choose two different gifts so that the sets of the gifts that hang on them with a sequence of ropes and another gifts don' t intersect. In other words, there shouldn' t be any gift that hang both on the gift chosen by Chloe and on the gift chosen by Vladik. From all of the possible variants they will choose such pair of prizes that the sum of pleasantness of all the gifts that they will take after cutting the ropes is as large as possible. Print the maximum sum of pleasantness that Vladik and Chloe can get. If it is impossible for them to choose the gifts without fighting, print Impossible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of gifts. The next line contains n integers a1, a2, . . . , an ( - 109 \u2264 ai \u2264 109) \u2014 the pleasantness of the gifts. The next ( n - 1) lines contain two numbers each. The i- th of these lines contains integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 the description of the tree' s edges. It means that gifts with numbers ui and vi are connected to each other with a rope. The gifts' ids in the description of the ropes can be given in arbirtary order: vi hangs on ui or ui hangs on vi. It is guaranteed that all the gifts hang on the first gift, possibly with a sequence of ropes and another gifts.",
    "output": "If it is possible for Chloe and Vladik to choose prizes without fighting, print single integer \u2014 the maximum possible sum of pleasantness they can get together. Otherwise print Impossible.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "743D"
  },
  {
    "title": "Arpa\u2019s overnight party and Mehrdad\u2019s silent entering",
    "url": "https://codeforces.com/problemset/problem/741/C",
    "history": "Note that girls in Arpa\u2019s land are really attractive. Arpa loves overnight parties. In the middle of one of these parties Mehrdad suddenly appeared. He saw n pairs of friends sitting around a table. i- th pair consisted of a boy, sitting on the ai- th chair, and his girlfriend, sitting on the bi- th chair. The chairs were numbered 1 through 2n in clockwise direction. There was exactly one person sitting on each chair. There were two types of food: Kooft and Zahre- mar. Now Mehrdad wonders, was there any way to serve food for the guests such that: Each person had exactly one type of food, No boy had the same type of food as his girlfriend, Among any three guests sitting on consecutive chairs, there was two of them who had different type of food. Note that chairs 2n and 1 are considered consecutive. Find the answer for the Mehrdad question. If it was possible, find some arrangement of food types that satisfies the conditions.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of pairs of guests. The i- th of the next n lines contains a pair of integers ai and bi ( 1 \u2264 ai, bi \u2264 2n) \u2014 the number of chair on which the boy in the i- th pair was sitting and the number of chair on which his girlfriend was sitting. It' s guaranteed that there was exactly one person sitting on each chair.",
    "output": "If there is no solution, print - 1. Otherwise print n lines, the i- th of them should contain two integers which represent the type of food for the i- th pair. The first integer in the line is the type of food the boy had, and the second integer is the type of food the girl had. If someone had Kooft, print 1, otherwise print 2. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "741C"
  },
  {
    "title": "Alyona and a tree",
    "url": "https://codeforces.com/problemset/problem/739/B",
    "history": "Alyona has a tree with n vertices. The root of the tree is the vertex 1. In each vertex Alyona wrote an positive integer, in the vertex i she wrote ai. Moreover, the girl wrote a positive integer to every edge of the tree ( possibly, different integers on different edges) . Let' s define dist( v, u) as the sum of the integers written on the edges of the simple path from v to u. The vertex v controls the vertex u ( v = \u0338 u) if and only if u is in the subtree of v and dist( v, u) \u2264 au. Alyona wants to settle in some vertex. In order to do this, she wants to know for each vertex v what is the number of vertices u such that v controls u.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 2\u00b7105) . The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 the integers written in the vertices. The next ( n - 1) lines contain two integers each. The i- th of these lines contains integers pi and wi ( 1 \u2264 pi \u2264 n, 1 \u2264 wi \u2264 109) \u2014 the parent of the ( i + 1) - th vertex in the tree and the number written on the edge between pi and ( i + 1) . It is guaranteed that the given graph is a tree.",
    "output": "Print n integers \u2014 the i- th of these numbers should be equal to the number of vertices that the i- th vertex controls.",
    "note": "In the example test case the vertex 1 controls the vertex 3, the vertex 3 controls the vertex 5 ( note that is doesn' t mean the vertex 1 controls the vertex 5) .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "739B"
  },
  {
    "title": "Tanya is 5!",
    "url": "https://codeforces.com/problemset/problem/737/E",
    "history": "Tanya is now five so all her friends gathered together to celebrate her birthday. There are n children on the celebration, including Tanya. The celebration is close to its end, and the last planned attraction is gaming machines. There are m machines in the hall, they are numbered 1 through m. Each of the children has a list of machines he wants to play on. Moreover, for each of the machines he knows the exact time he wants to play on it. For every machine, no more than one child can play on this machine at the same time. It is evening already, so every adult wants to go home. To speed up the process, you can additionally rent second copies of each of the machines. To rent the second copy of the j- th machine, you have to pay pj burles. After you rent a machine, you can use it for as long as you want. How long it will take to make every child play according to his plan, if you have a budget of b burles for renting additional machines? There is only one copy of each machine, so it' s impossible to rent a third machine of the same type. The children can interrupt the game in any moment and continue it later. If the i- th child wants to play on the j- th machine, it is allowed after you rent the copy of the j- th machine that this child would play some part of the time on the j- th machine and some part of the time on its copy ( each of these parts could be empty) . The interruptions and changes take no time and can be performed in any integer moment of time. Of course, a child can' t play on more than one machine at the same time. Remember, that it is not needed to save money ( no one saves money at the expense of children happiness! ) , it is needed to minimize the latest moment of time some child ends his game.",
    "input": "The first line contains three integers n, m and b ( 1 \u2264 n \u2264 40, 1 \u2264 m \u2264 10, 0 \u2264 b \u2264 106) \u2014 the number of children, the number of gaming machines and the budget for renting additional machines. The second line contains m integers p1, p2, . . . , pm ( 1 \u2264 pj \u2264 106) , where pj is the rent price for the second copy of the j- th machine. n lines follow, i- th of them describes the wishes of the i- th child. The line starts with an integer ki ( 0 \u2264 ki \u2264 m) \u2014 the number of machines, the i- th child wants to play on. Then there are ki pairs in the line, the y- th of them is xiy, tiy. It means that, the i- th child wants to play tiy ( 1 \u2264 tiy \u2264 2500) minutes on the xiy- th ( 1 \u2264 xiy \u2264 m) machine. In each of these n lines the values xiy are distinct.",
    "output": "In the first line print the minimum time in which all the children can finish their games. In the second line print a string of length m consisting of zeros and ones. The j- th character is ' 1' , if the copy of j- th machine should be rated, and ' 0' otherwise. In the third line print integer g ( 0 \u2264 g \u2264 106) \u2014 the total number of time segments of continuous playing for all of the children. Then in g lines print the segments as four integers i, j, s, d, meaning that the i- th child was playing on the j- th machine or its copy from the time moment s ( s \u2265 0) for d minutes ( d \u2265 1) . You can print these lines in arbitrary order. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "graph matchings",
      "graphs",
      "greedy",
      "schedules"
    ],
    "id": "737E"
  },
  {
    "title": "Drivers Dissatisfaction",
    "url": "https://codeforces.com/problemset/problem/733/F",
    "history": "In one kingdom there are n cities and m two- way roads. Each road connects a pair of cities, and for each road we know the level of drivers dissatisfaction \u2014 the value wi. For each road we know the value ci \u2014 how many lamziks we should spend to reduce the level of dissatisfaction with this road by one. Thus, to reduce the dissatisfaction with the i- th road by k, we should spend k\u00b7ci lamziks. And it is allowed for the dissatisfaction to become zero or even negative. In accordance with the king' s order, we need to choose n - 1 roads and make them the main roads. An important condition must hold: it should be possible to travel from any city to any other by the main roads. The road ministry has a budget of S lamziks for the reform. The ministry is going to spend this budget for repair of some roads ( to reduce the dissatisfaction with them) , and then to choose the n - 1 main roads. Help to spend the budget in such a way and then to choose the main roads so that the total dissatisfaction with the main roads will be as small as possible. The dissatisfaction with some roads can become negative. It is not necessary to spend whole budget S. It is guaranteed that it is possible to travel from any city to any other using existing roads. Each road in the kingdom is a two- way road.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2\u00b7105, n - 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of cities and the number of roads in the kingdom, respectively. The second line contains m integers w1, w2, . . . , wm ( 1 \u2264 wi \u2264 109) , where wi is the drivers dissatisfaction with the i- th road. The third line contains m integers c1, c2, . . . , cm ( 1 \u2264 ci \u2264 109) , where ci is the cost ( in lamziks) of reducing the dissatisfaction with the i- th road by one. The next m lines contain the description of the roads. The i- th of this lines contain a pair of integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) which mean that the i- th road connects cities ai and bi. All roads are two- way oriented so it is possible to move by the i- th road from ai to bi, and vice versa. It is allowed that a pair of cities is connected by more than one road. The last line contains one integer S ( 0 \u2264 S \u2264 109) \u2014 the number of lamziks which we can spend for reforms.",
    "output": "In the first line print K \u2014 the minimum possible total dissatisfaction with main roads. In each of the next n - 1 lines print two integers x, vx, which mean that the road x is among main roads and the road x, after the reform, has the level of dissatisfaction vx. Consider that roads are numbered from 1 to m in the order as they are given in the input data. The edges can be printed in arbitrary order. If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "733F"
  },
  {
    "title": "Tourist Reform",
    "url": "https://codeforces.com/problemset/problem/732/F",
    "history": "Berland is a tourist country! At least, it can become such \u2014 the government of Berland is confident about this. There are n cities in Berland, some pairs of which are connected by two- ways roads. Each road connects two different cities. In Berland there are no roads which connect the same pair of cities. It is possible to get from any city to any other city using given two- ways roads. According to the reform each road will become one- way. It will be oriented to one of two directions. To maximize the tourist attraction of Berland, after the reform for each city i the value ri will be calculated. It will equal to the number of cities x for which there is an oriented path from the city i to the city x. In other words, ri will equal the number of cities which can be reached from the city i by roads. The government is sure that tourist' s attention will be focused on the minimum value of ri. Help the government of Berland make the reform to maximize the minimum of ri.",
    "input": "The first line contains two integers n, m ( 2 \u2264 n \u2264 400 000, 1 \u2264 m \u2264 400 000) \u2014 the number of cities and the number of roads. The next m lines describe roads in Berland: the j- th of them contains two integers uj and vj ( 1 \u2264 uj, vj \u2264 n, uj = \u0338 vj) , where uj and vj are the numbers of cities which are connected by the j- th road. The cities are numbered from 1 to n. It is guaranteed that it is possible to get from any city to any other by following two- ways roads. In Berland there are no roads which connect the same pair of cities.",
    "output": "In the first line print single integer \u2014 the maximum possible value min1 \u2264 i \u2264 nri after the orientation of roads. The next m lines must contain the description of roads after the orientation: the j- th of them must contain two integers uj, vj, it means that the j- th road will be directed from the city uj to the city vj. Print roads in the same order as they are given in the input data.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "732F"
  },
  {
    "title": "Socks",
    "url": "https://codeforces.com/problemset/problem/731/C",
    "history": "Arseniy is already grown- up and independent. His mother decided to leave him alone for m days and left on a vacation. She have prepared a lot of food, left some money and washed all Arseniy' s clothes. Ten minutes before her leave she realized that it would be also useful to prepare instruction of which particular clothes to wear on each of the days she will be absent. Arseniy' s family is a bit weird so all the clothes is enumerated. For example, each of Arseniy' s n socks is assigned a unique integer from 1 to n. Thus, the only thing his mother had to do was to write down two integers li and ri for each of the days \u2014 the indices of socks to wear on the day i ( obviously, li stands for the left foot and ri for the right) . Each sock is painted in one of k colors. When mother already left Arseniy noticed that according to instruction he would wear the socks of different colors on some days. Of course, that is a terrible mistake cause by a rush. Arseniy is a smart boy, and, by some magical coincidence, he posses k jars with the paint \u2014 one for each of k colors. Arseniy wants to repaint some of the socks in such a way, that for each of m days he can follow the mother' s instructions and wear the socks of the same color. As he is going to be very busy these days he will have no time to change the colors of any socks so he has to finalize the colors now. The new computer game Bota- 3 was just realised and Arseniy can' t wait to play it. What is the minimum number of socks that need their color to be changed in order to make it possible to follow mother' s instructions and wear the socks of the same color during each of m days.",
    "input": "The first line of input contains three integers n, m and k ( 2 \u2264 n \u2264 200 000, 0 \u2264 m \u2264 200 000, 1 \u2264 k \u2264 200 000) \u2014 the number of socks, the number of days and the number of available colors respectively. The second line contain n integers c1, c2, . . . , cn ( 1 \u2264 ci \u2264 k) \u2014 current colors of Arseniy' s socks. Each of the following m lines contains two integers li and ri ( 1 \u2264 li, ri \u2264 n, li = \u0338 ri) \u2014 indices of socks which Arseniy should wear during the i- th day.",
    "output": "Print one integer \u2014 the minimum number of socks that should have their colors changed in order to be able to obey the instructions and not make people laugh from watching the socks of different colors.",
    "note": "In the first sample, Arseniy can repaint the first and the third socks to the second color. In the second sample, there is no need to change any colors.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "731C"
  },
  {
    "title": "Roads Orientation Problem",
    "url": "https://codeforces.com/problemset/problem/730/K",
    "history": "Berland consists of n cities and m bidirectional roads connecting pairs of cities. There is no road connecting a city to itself, and between any pair of cities there is no more than one road. It is possible to reach any city from any other moving along roads. Currently Mr. President is in the city s and his destination is the city t. He plans to move along roads from s to t ( s = \u0338 t) . That' s why Ministry of Fools and Roads has difficult days. The minister is afraid that Mr. President could get into a traffic jam or get lost. Who knows what else can happen! To be sure that everything goes as planned, the minister decided to temporarily make all roads one- way. So each road will be oriented in one of two possible directions. The following conditions must be satisfied: There should be no cycles along roads after orientation. The city s should be the only such city that all its roads are oriented out ( i. e. there are no ingoing roads to the city s and the city s is the only such city) . The city t should be the only such city that all its roads are oriented in ( i. e. there are no outgoing roads from the city t and the city t is the only such city) . Help the minister solve his problem. Write a program to find any such orientation of all roads or report that no solution exists.",
    "input": "Each test in this problem contains one or more test cases to solve. The first line of the input contains positive number T \u2014 the number of cases to solve. Each case starts with a line containing four integers n, m, s and t ( 2 \u2264 n \u2264 4\u00b7105, 1 \u2264 m \u2264 106, 1 \u2264 s, t \u2264 n, s = \u0338 t) \u2014 the number of cities, the number of roads and indices of departure and destination cities. The cities are numbered from 1 to n. The following m lines contain roads, one road per line. Each road is given as two integer numbers xj, yj ( 1 \u2264 xj, yj \u2264 n, xj = \u0338 yj) , which means that the j- th road connects cities xj and yj. There is at most one road between any pair of cities. It is possible to reach any city from any other moving along roads. The sum of values n over all cases in a test doesn' t exceed 4\u00b7105. The sum of values m over all cases in a test doesn' t exceed 106.",
    "output": "For each case print \" Yes\" if the answer exists. In the following m lines print roads in the required directions. You can print roads in arbitrary order. If there are multiple answers, print any of them. Print the only line \" No\" if there is no answer for a case.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "730K"
  },
  {
    "title": "Olympiad in Programming and Sports",
    "url": "https://codeforces.com/problemset/problem/730/I",
    "history": "There are n students at Berland State University. Every student has two skills, each measured as a number: ai \u2014 the programming skill and bi \u2014 the sports skill. It is announced that an Olympiad in programming and sports will be held soon. That' s why Berland State University should choose two teams: one to take part in the programming track and one to take part in the sports track. There should be exactly p students in the programming team and exactly s students in the sports team. A student can' t be a member of both teams. The university management considers that the strength of the university on the Olympiad is equal to the sum of two values: the programming team strength and the sports team strength. The strength of a team is the sum of skills of its members in the corresponding area, so the strength of the programming team is the sum of all ai and the strength of the sports team is the sum of all bi over corresponding team members. Help Berland State University to compose two teams to maximize the total strength of the university on the Olympiad.",
    "input": "The first line contains three positive integer numbers n, p and s ( 2 \u2264 n \u2264 3000, p + s \u2264 n) \u2014 the number of students, the size of the programming team and the size of the sports team. The second line contains n positive integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 3000) , where ai is the programming skill of the i- th student. The third line contains n positive integers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 3000) , where bi is the sports skill of the i- th student.",
    "output": "In the first line, print the the maximum strength of the university on the Olympiad. In the second line, print p numbers \u2014 the members of the programming team. In the third line, print s numbers \u2014 the members of the sports team. The students are numbered from 1 to n as they are given in the input. All numbers printed in the second and in the third lines should be distinct and can be printed in arbitrary order. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "dp",
      "flows",
      "graphs",
      "greedy"
    ],
    "id": "730I"
  },
  {
    "title": "Subordinates",
    "url": "https://codeforces.com/problemset/problem/729/E",
    "history": "There are n workers in a company, each of them has a unique id from 1 to n. Exaclty one of them is a chief, his id is s. Each worker except the chief has exactly one immediate superior. There was a request to each of the workers to tell how how many superiors ( not only immediate) . Worker' s superiors are his immediate superior, the immediate superior of the his immediate superior, and so on. For example, if there are three workers in the company, from which the first is the chief, the second worker' s immediate superior is the first, the third worker' s immediate superior is the second, then the third worker has two superiors, one of them is immediate and one not immediate. The chief is a superior to all the workers except himself. Some of the workers were in a hurry and made a mistake. You are to find the minimum number of workers that could make a mistake.",
    "input": "The first line contains two positive integers n and s ( 1 \u2264 n \u2264 2\u00b7105, 1 \u2264 s \u2264 n) \u2014 the number of workers and the id of the chief. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 n - 1) , where ai is the number of superiors ( not only immediate) the worker with id i reported about.",
    "output": "Print the minimum number of workers that could make a mistake.",
    "note": "In the first example it is possible that only the first worker made a mistake. Then: the immediate superior of the first worker is the second worker, the immediate superior of the third worker is the first worker, the second worker is the chief.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "729E"
  },
  {
    "title": "Xor-matic Number of the Graph",
    "url": "https://codeforces.com/problemset/problem/724/G",
    "history": "You are given an undirected graph, constisting of n vertices and m edges. Each edge of the graph has some non- negative integer written on it. Let' s call a triple ( u, v, s) interesting, if 1 \u2264 u < v \u2264 n and there is a path ( possibly non- simple, i. e. it can visit the same vertices and edges multiple times) between vertices u and v such that xor of all numbers written on the edges of this path is equal to s. When we compute the value s for some path, each edge is counted in xor as many times, as it appear on this path. It' s not hard to prove that there are finite number of such triples. Calculate the sum over modulo 109 + 7 of the values of s over all interesting triples.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 100 000, 0 \u2264 m \u2264 200 000) \u2014 numbers of vertices and edges in the given graph. The follow m lines contain three integers ui, vi and ti ( 1 \u2264 ui, vi \u2264 n, 0 \u2264 ti \u2264 1018, ui = \u0338 vi) \u2014 vertices connected by the edge and integer written on it. It is guaranteed that graph doesn' t contain self- loops and multiple edges.",
    "output": "Print the single integer, equal to the described sum over modulo 109 + 7.",
    "note": "In the first example the are 6 interesting triples: ( 1, 2, 1) ( 1, 3, 2) ( 1, 4, 3) ( 2, 3, 3) ( 2, 4, 2) ( 3, 4, 1) The sum is equal to 1 + 2 + 3 + 3 + 2 + 1 = 12. In the second example the are 12 interesting triples: ( 1, 2, 1) ( 2, 3, 2) ( 1, 3, 3) ( 3, 4, 4) ( 2, 4, 6) ( 1, 4, 7) ( 1, 4, 8) ( 2, 4, 9) ( 3, 4, 11) ( 1, 3, 12) ( 2, 3, 13) ( 1, 2, 14) The sum is equal to 1 + 2 + 3 + 4 + 6 + 7 + 8 + 9 + 11 + 12 + 13 + 14 = 90.",
    "topics": [
      "bitmasks",
      "graphs",
      "math",
      "number theory",
      "trees"
    ],
    "id": "724G"
  },
  {
    "title": "st-Spanning Tree",
    "url": "https://codeforces.com/problemset/problem/723/F",
    "history": "You are given an undirected connected graph consisting of n vertices and m edges. There are no loops and no multiple edges in the graph. You are also given two distinct vertices s and t, and two values ds and dt. Your task is to build any spanning tree of the given graph ( note that the graph is not weighted) , such that the degree of the vertex s doesn' t exceed ds, and the degree of the vertex t doesn' t exceed dt, or determine, that there is no such spanning tree. The spanning tree of the graph G is a subgraph which is a tree and contains all vertices of the graph G. In other words, it is a connected graph which contains n - 1 edges and can be obtained by removing some of the edges from G. The degree of a vertex is the number of edges incident to this vertex.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 200 000, 1 \u2264 m \u2264 min( 400 000, n\u00b7( n - 1) / 2) ) \u2014 the number of vertices and the number of edges in the graph. The next m lines contain the descriptions of the graph' s edges. Each of the lines contains two integers u and v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) \u2014 the ends of the corresponding edge. It is guaranteed that the graph contains no loops and no multiple edges and that it is connected. The last line contains four integers s, t, ds, dt ( 1 \u2264 s, t \u2264 n, s = \u0338 t, 1 \u2264 ds, dt \u2264 n - 1) .",
    "output": "If the answer doesn' t exist print \" No\" ( without quotes) in the only line of the output. Otherwise, in the first line print \" Yes\" ( without quotes) . In the each of the next ( n - 1) lines print two integers \u2014 the description of the edges of the spanning tree. Each of the edges of the spanning tree must be printed exactly once. You can output edges in any order. You can output the ends of each edge in any order. If there are several solutions, print any of them.",
    "note": "",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "723F"
  },
  {
    "title": "One-Way Reform",
    "url": "https://codeforces.com/problemset/problem/723/E",
    "history": "There are n cities and m two- way roads in Berland, each road connects two cities. It is known that there is no more than one road connecting each pair of cities, and there is no road which connects the city with itself. It is possible that there is no way to get from one city to some other city using only these roads. The road minister decided to make a reform in Berland and to orient all roads in the country, i. e. to make each road one- way. The minister wants to maximize the number of cities, for which the number of roads that begins in the city equals to the number of roads that ends in it.",
    "input": "The first line contains a positive integer t ( 1 \u2264 t \u2264 200) \u2014 the number of testsets in the input. Each of the testsets is given in the following way. The first line contains two integers n and m ( 1 \u2264 n \u2264 200, 0 \u2264 m \u2264 n\u00b7( n - 1) / 2) \u2014 the number of cities and the number of roads in Berland. The next m lines contain the description of roads in Berland. Each line contains two integers u and v ( 1 \u2264 u, v \u2264 n) \u2014 the cities the corresponding road connects. It' s guaranteed that there are no self- loops and multiple roads. It is possible that there is no way along roads between a pair of cities. It is guaranteed that the total number of cities in all testset of input data doesn' t exceed 200. Pay attention that for hacks, you can only use tests consisting of one testset, so t should be equal to one.",
    "output": "For each testset print the maximum number of such cities that the number of roads that begins in the city, is equal to the number of roads that ends in it. In the next m lines print oriented roads. First print the number of the city where the road begins and then the number of the city where the road ends. If there are several answers, print any of them. It is allowed to print roads in each test in arbitrary order. Each road should be printed exactly once.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "flows",
      "graphs",
      "greedy"
    ],
    "id": "723E"
  },
  {
    "title": "Lakes in Berland",
    "url": "https://codeforces.com/problemset/problem/723/D",
    "history": "The map of Berland is a rectangle of the size n \u00d7 m, which consists of cells of size 1 \u00d7 1. Each cell is either land or water. The map is surrounded by the ocean. Lakes are the maximal regions of water cells, connected by sides, which are not connected with the ocean. Formally, lake is a set of water cells, such that it' s possible to get from any cell of the set to any other without leaving the set and moving only to cells adjacent by the side, none of them is located on the border of the rectangle, and it' s impossible to add one more water cell to the set such that it will be connected with any other cell. You task is to fill up with the earth the minimum number of water cells so that there will be exactly k lakes in Berland. Note that the initial number of lakes on the map is not less than k.",
    "input": "The first line of the input contains three integers n, m and k ( 1 \u2264 n, m \u2264 50, 0 \u2264 k \u2264 50) \u2014 the sizes of the map and the number of lakes which should be left on the map. The next n lines contain m characters each \u2014 the description of the map. Each of the characters is either ' . ' ( it means that the corresponding cell is water) or ' * ' ( it means that the corresponding cell is land) . It is guaranteed that the map contain at least k lakes.",
    "output": "In the first line print the minimum number of cells which should be transformed from water to land. In the next n lines print m symbols \u2014 the map after the changes. The format must strictly follow the format of the map in the input data ( there is no need to print the size of the map) . If there are several answers, print any of them. It is guaranteed that the answer exists on the given data.",
    "note": "In the first example there are only two lakes \u2014 the first consists of the cells ( 2, 2) and ( 2, 3) , the second consists of the cell ( 4, 3) . It is profitable to cover the second lake because it is smaller. Pay attention that the area of water in the lower left corner is not a lake because this area share a border with the ocean.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "723D"
  },
  {
    "title": "Journey",
    "url": "https://codeforces.com/problemset/problem/721/C",
    "history": "Recently Irina arrived to one of the most famous cities of Berland \u2014 the Berlatov city. There are n showplaces in the city, numbered from 1 to n, and some of them are connected by one- directional roads. The roads in Berlatov are designed in a way such that there are no cyclic routes between showplaces. Initially Irina stands at the showplace 1, and the endpoint of her journey is the showplace n. Naturally, Irina wants to visit as much showplaces as she can during her journey. However, Irina' s stay in Berlatov is limited and she can' t be there for more than T time units. Help Irina determine how many showplaces she may visit during her journey from showplace 1 to showplace n within a time not exceeding T. It is guaranteed that there is at least one route from showplace 1 to showplace n such that Irina will spend no more than T time units passing it.",
    "input": "The first line of the input contains three integers n, m and T ( 2 \u2264 n \u2264 5000, 1 \u2264 m \u2264 5000, 1 \u2264 T \u2264 109) \u2014 the number of showplaces, the number of roads between them and the time of Irina' s stay in Berlatov respectively. The next m lines describes roads in Berlatov. i- th of them contains 3 integers ui, vi, ti ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi, 1 \u2264 ti \u2264 109) , meaning that there is a road starting from showplace ui and leading to showplace vi, and Irina spends ti time units to pass it. It is guaranteed that the roads do not form cyclic routes. It is guaranteed, that there is at most one road between each pair of showplaces.",
    "output": "Print the single integer k ( 2 \u2264 k \u2264 n) \u2014 the maximum number of showplaces that Irina can visit during her journey from showplace 1 to showplace n within time not exceeding T, in the first line. Print k distinct integers in the second line \u2014 indices of showplaces that Irina will visit on her route, in the order of encountering them. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "721C"
  },
  {
    "title": "Matvey's Birthday",
    "url": "https://codeforces.com/problemset/problem/718/E",
    "history": "Today is Matvey' s birthday. He never knows what to ask as a present so friends gave him a string s of length n. This string consists of only first eight English letters: ' a' , ' b' , . . . , ' h' . First question that comes to mind is: who might ever need some string? Matvey is a special boy so he instantly found what to do with this string. He used it to build an undirected graph where vertices correspond to position in the string and there is an edge between distinct positions a and b ( 1 \u2264 a, b \u2264 n) if at least one of the following conditions hold: a and b are neighbouring, i. e. | a - b| = 1. Positions a and b contain equal characters, i. e. sa = sb. Then Matvey decided to find the diameter of this graph. Diameter is a maximum distance ( length of the shortest path) among all pairs of vertices. Also, Matvey wants to find the number of pairs of vertices such that the distance between them is equal to the diameter of the graph. As he is very cool and experienced programmer he managed to solve this problem very fast. Will you do the same?",
    "input": "The first line of the input contains a single integer n ( 2 \u2264 n \u2264 100 000) \u2014 the length of the string. The second line contains the string s itself. It' s guaranteed that s consists of only first eight letters of English alphabet.",
    "output": "Print two integers \u2014 the diameter of the graph and the number of pairs of positions with the distance equal to the diameter.",
    "note": "Consider the second sample. The maximum distance is 2. It' s obtained for pairs ( 1, 4) , ( 2, 4) , ( 4, 6) and ( 4, 7) .",
    "topics": [
      "bitmasks",
      "graphs"
    ],
    "id": "718E"
  },
  {
    "title": "Complete the Permutations",
    "url": "https://codeforces.com/problemset/problem/715/E",
    "history": "ZS the Coder is given two permutations p and q of 1, 2, . . . , n, but some of their elements are replaced with 0. The distance between two permutations p and q is defined as the minimum number of moves required to turn p into q. A move consists of swapping exactly 2 elements of p. ZS the Coder wants to determine the number of ways to replace the zeros with positive integers from the set 1, 2, . . . , n such that p and q are permutations of 1, 2, . . . , n and the distance between p and q is exactly k. ZS the Coder wants to find the answer for all 0 \u2264 k \u2264 n - 1. Can you help him?",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 250) \u2014 the number of elements in the permutations. The second line contains n integers, p1, p2, . . . , pn ( 0 \u2264 pi \u2264 n) \u2014 the permutation p. It is guaranteed that there is at least one way to replace zeros such that p is a permutation of 1, 2, . . . , n. The third line contains n integers, q1, q2, . . . , qn ( 0 \u2264 qi \u2264 n) \u2014 the permutation q. It is guaranteed that there is at least one way to replace zeros such that q is a permutation of 1, 2, . . . , n.",
    "output": "Print n integers, i- th of them should denote the answer for k = i - 1. Since the answer may be quite large, and ZS the Coder loves weird primes, print them modulo 998244353 = 223\u00b77\u00b717 + 1, which is a prime.",
    "note": "In the first sample case, there is the only way to replace zeros so that it takes 0 swaps to convert p into q, namely p = ( 1, 2, 3) , q = ( 1, 2, 3) . There are two ways to replace zeros so that it takes 1 swap to turn p into q. One of these ways is p = ( 1, 2, 3) , q = ( 3, 2, 1) , then swapping 1 and 3 from p transform it into q. The other way is p = ( 1, 3, 2) , q = ( 1, 2, 3) . Swapping 2 and 3 works in this case. Finally, there is one way to replace zeros so that it takes 2 swaps to turn p into q, namely p = ( 1, 3, 2) , q = ( 3, 2, 1) . Then, we can transform p into q like following: .",
    "topics": [
      "combinatorics",
      "fft",
      "graphs",
      "math"
    ],
    "id": "715E"
  },
  {
    "title": "Complete The Graph",
    "url": "https://codeforces.com/problemset/problem/715/B",
    "history": "ZS the Coder has drawn an undirected graph of n vertices numbered from 0 to n - 1 and m edges between them. Each edge of the graph is weighted, each weight is a positive integer. The next day, ZS the Coder realized that some of the weights were erased! So he wants to reassign positive integer weight to each of the edges which weights were erased, so that the length of the shortest path between vertices s and t in the resulting graph is exactly L. Can you help him?",
    "input": "The first line contains five integers n, m, L, s, t ( 2 \u2264 n \u2264 1000, 1 \u2264 m \u2264 10 000, 1 \u2264 L \u2264 109, 0 \u2264 s, t \u2264 n - 1, s = \u0338 t) \u2014 the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively. Then, m lines describing the edges of the graph follow. i- th of them contains three integers, ui, vi, wi ( 0 \u2264 ui, vi \u2264 n - 1, ui = \u0338 vi, 0 \u2264 wi \u2264 109) . ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased. It is guaranteed that there is at most one edge between any pair of vertices.",
    "output": "Print \" NO\" ( without quotes) in the only line if it' s not possible to assign the weights in a required way. Otherwise, print \" YES\" in the first line. Next m lines should contain the edges of the resulting graph, with weights assigned to edges which weights were erased. i- th of them should contain three integers ui, vi and wi, denoting an edge between vertices ui and vi of weight wi. The edges of the new graph must coincide with the ones in the graph from the input. The weights that were not erased must remain unchanged whereas the new weights can be any positive integer not exceeding 1018. The order of the edges in the output doesn' t matter. The length of the shortest path between s and t must be equal to L. If there are multiple solutions, print any of them.",
    "note": "Here' s how the graph in the first sample case looks like : In the first sample case, there is only one missing edge weight. Placing the weight of 8 gives a shortest path from 0 to 4 of length 13. In the second sample case, there is only a single edge. Clearly, the only way is to replace the missing weight with 123456789. In the last sample case, there is no weights to assign but the length of the shortest path doesn' t match the required value, so the answer is \" NO\" .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "graphs",
      "shortest paths"
    ],
    "id": "715B"
  },
  {
    "title": "Directed Roads",
    "url": "https://codeforces.com/problemset/problem/711/D",
    "history": "ZS the Coder and Chris the Baboon has explored Udayland for quite some time. They realize that it consists of n towns numbered from 1 to n. There are n directed roads in the Udayland. i- th of them goes from town i to some other town ai ( ai = \u0338 i) . ZS the Coder can flip the direction of any road in Udayland, i. e. if it goes from town A to town B before the flip, it will go from town B to town A after. ZS the Coder considers the roads in the Udayland confusing, if there is a sequence of distinct towns A1, A2, . . . , Ak ( k > 1) such that for every 1 \u2264 i < k there is a road from town Ai to town Ai + 1 and another road from town Ak to town A1. In other words, the roads are confusing if some of them form a directed cycle of some towns. Now ZS the Coder wonders how many sets of roads ( there are 2n variants) in initial configuration can he choose to flip such that after flipping each road in the set exactly once, the resulting network will not be confusing. Note that it is allowed that after the flipping there are more than one directed road from some town and possibly some towns with no roads leading out of it, or multiple roads between any pair of cities.",
    "input": "The first line of the input contains single integer n ( 2 \u2264 n \u2264 2\u00b7105) \u2014 the number of towns in Udayland. The next line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n, ai = \u0338 i) , ai denotes a road going from town i to town ai.",
    "output": "Print a single integer \u2014 the number of ways to flip some set of the roads so that the resulting whole set of all roads is not confusing. Since this number may be too large, print the answer modulo 109 + 7.",
    "note": "Consider the first sample case. There are 3 towns and 3 roads. The towns are numbered from 1 to 3 and the roads are , , initially. Number the roads 1 to 3 in this order. The sets of roads that ZS the Coder can flip ( to make them not confusing) are 1, 2, 3, 1, 2, 1, 3, 2, 3. Note that the empty set is invalid because if no roads are flipped, then towns 1, 2, 3 is form a directed cycle, so it is confusing. Similarly, flipping all roads is confusing too. Thus, there are a total of 6 possible sets ZS the Coder can flip. The sample image shows all possible ways of orienting the roads from the first sample such that the network is not confusing.",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "graphs",
      "math"
    ],
    "id": "711D"
  },
  {
    "title": "Centroids",
    "url": "https://codeforces.com/problemset/problem/708/C",
    "history": "Tree is a connected acyclic graph. Suppose you are given a tree consisting of n vertices. The vertex of this tree is called centroid if the size of each connected component that appears if this vertex is removed from the tree doesn' t exceed . You are given a tree of size n and can perform no more than one edge replacement. Edge replacement is the operation of removing one edge from the tree ( without deleting incident vertices) and inserting one new edge ( without adding new vertices) in such a way that the graph remains a tree. For each vertex you have to determine if it' s possible to make it centroid by performing no more than one edge replacement.",
    "input": "The first line of the input contains an integer n ( 2 \u2264 n \u2264 400 000) \u2014 the number of vertices in the tree. Each of the next n - 1 lines contains a pair of vertex indices ui and vi ( 1 \u2264 ui, vi \u2264 n) \u2014 endpoints of the corresponding edge.",
    "output": "Print n integers. The i- th of them should be equal to 1 if the i- th vertex can be made centroid by replacing no more than one edge, and should be equal to 0 otherwise.",
    "note": "In the first sample each vertex can be made a centroid. For example, in order to turn vertex 1 to centroid one have to replace the edge ( 2, 3) with the edge ( 1, 3) .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "708C"
  },
  {
    "title": "Bakery",
    "url": "https://codeforces.com/problemset/problem/707/B",
    "history": "Masha wants to open her own bakery and bake muffins in one of the n cities numbered from 1 to n. There are m bidirectional roads, each of whose connects some pair of cities. To bake muffins in her bakery, Masha needs to establish flour supply from some storage. There are only k storages, located in different cities numbered a1, a2, . . . , ak. Unforunately the law of the country Masha lives in prohibits opening bakery in any of the cities which has storage located in it. She can open it only in one of another n - k cities, and, of course, flour delivery should be paid \u2014 for every kilometer of path between storage and bakery Masha should pay 1 ruble. Formally, Masha will pay x roubles, if she will open the bakery in some city b ( ai = \u0338 b for every 1 \u2264 i \u2264 k) and choose a storage in some city s ( s = aj for some 1 \u2264 j \u2264 k) and b and s are connected by some path of roads of summary length x ( if there are more than one path, Masha is able to choose which of them should be used) . Masha is very thrifty and rational. She is interested in a city, where she can open her bakery ( and choose one of k storages and one of the paths between city with bakery and city with storage) and pay minimum possible amount of rubles for flour delivery. Please help Masha find this amount.",
    "input": "The first line of the input contains three integers n, m and k ( 1 \u2264 n, m \u2264 105, 0 \u2264 k \u2264 n) \u2014 the number of cities in country Masha lives in, the number of roads between them and the number of flour storages respectively. Then m lines follow. Each of them contains three integers u, v and l ( 1 \u2264 u, v \u2264 n, 1 \u2264 l \u2264 109, u = \u0338 v) meaning that there is a road between cities u and v of length of l kilometers . If k > 0, then the last line of the input contains k distinct integers a1, a2, . . . , ak ( 1 \u2264 ai \u2264 n) \u2014 the number of cities having flour storage located in. If k = 0 then this line is not presented in the input.",
    "output": "Print the minimum possible amount of rubles Masha should pay for flour delivery in the only line. If the bakery can not be opened ( while satisfying conditions) in any of the n cities, print - 1 in the only line.",
    "note": "Image illustrates the first sample case. Cities with storage located in and the road representing the answer are darkened.",
    "topics": [
      "graphs"
    ],
    "id": "707B"
  },
  {
    "title": "Black Widow",
    "url": "https://codeforces.com/problemset/problem/704/C",
    "history": "Natalia Romanova is trying to test something on the new gun S. H. I. E. L. D gave her. In order to determine the result of the test, she needs to find the number of answers to a certain equation. The equation is of form: Where represents logical OR and represents logical exclusive OR ( XOR) , and vi, j are some boolean variables or their negations. Natalia calls the left side of the equation a XNF formula. Each statement in brackets is called a clause, and vi, j are called literals. In the equation Natalia has, the left side is actually a 2- XNF- 2 containing variables x1, x2, . . . , xm and their negations. An XNF formula is 2- XNF- 2 if: For each 1 \u2264 i \u2264 n, ki \u2264 2, i. e. the size of each clause doesn' t exceed two. Each variable occurs in the formula at most two times ( with negation and without negation in total) . Please note that it' s possible that a variable occurs twice but its negation doesn' t occur in any clause ( or vice versa) . Natalia is given a formula of m variables, consisting of n clauses. Please, make sure to check the samples in order to properly understand how the formula looks like. Natalia is more into fight than theory, so she asked you to tell her the number of answers to this equation. More precisely, you need to find the number of ways to set x1, . . . , xm with true and false ( out of total of 2m ways) so that the equation is satisfied. Since this number can be extremely large, you need to print the answer modulo 109 + 7. Please, note that some variable may appear twice in one clause, or not appear in the equation at all ( but still, setting it to false or true gives different ways to set variables) .",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n, m \u2264 100 000) \u2014 the number of clauses and the number of variables respectively. The next n lines contain the formula. The i- th of them starts with an integer ki \u2014 the number of literals in the i- th clause. It is followed by ki non- zero integers ai, 1, . . . , ai, ki. If ai, j > 0 then vi, j is xai, j otherwise it' s negation of x - ai, j ( 1 \u2264 ki \u2264 2, - m \u2264 ai, j \u2264 m, ai, j = \u0338 0) .",
    "output": "Print the answer modulo 1 000 000 007 ( 109 + 7) in one line.",
    "note": "The equation in the first sample is: The equation in the second sample is: The equation in the third sample is:",
    "topics": [
      "dp",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "704C"
  },
  {
    "title": "Ant Man",
    "url": "https://codeforces.com/problemset/problem/704/B",
    "history": "Scott Lang is at war with Darren Cross. There are n chairs in a hall where they are, numbered with 1, 2, . . . , n from left to right. The i- th chair is located at coordinate xi. Scott is on chair number s and Cross is on chair number e. Scott can jump to all other chairs ( not only neighboring chairs) . He wants to start at his position ( chair number s) , visit each chair exactly once and end up on chair number e with Cross. As we all know, Scott can shrink or grow big ( grow big only to his normal size) , so at any moment of time he can be either small or large ( normal) . The thing is, he can only shrink or grow big while being on a chair ( not in the air while jumping to another chair) . Jumping takes time, but shrinking and growing big takes no time. Jumping from chair number i to chair number j takes | xi - xj| seconds. Also, jumping off a chair and landing on a chair takes extra amount of time. If Scott wants to jump to a chair on his left, he can only be small, and if he wants to jump to a chair on his right he should be large. Jumping off the i- th chair takes: ci extra seconds if he' s small. di extra seconds otherwise ( he' s large) . Also, landing on i- th chair takes: bi extra seconds if he' s small. ai extra seconds otherwise ( he' s large) . In simpler words, jumping from i- th chair to j- th chair takes exactly: | xi - xj| + ci + bj seconds if j < i. | xi - xj| + di + aj seconds otherwise ( j > i) . Given values of x, a, b, c, d find the minimum time Scott can get to Cross, assuming he wants to visit each chair exactly once.",
    "input": "The first line of the input contains three integers n, s and e ( 2 \u2264 n \u2264 5000, 1 \u2264 s, e \u2264 n, s = \u0338 e) \u2014 the total number of chairs, starting and ending positions of Scott. The second line contains n integers x1, x2, . . . , xn ( 1 \u2264 x1 < x2 < . . . < xn \u2264 109) . The third line contains n integers a1, a2, . . . , an ( 1 \u2264 a1, a2, . . . , an \u2264 109) . The fourth line contains n integers b1, b2, . . . , bn ( 1 \u2264 b1, b2, . . . , bn \u2264 109) . The fifth line contains n integers c1, c2, . . . , cn ( 1 \u2264 c1, c2, . . . , cn \u2264 109) . The sixth line contains n integers d1, d2, . . . , dn ( 1 \u2264 d1, d2, . . . , dn \u2264 109) .",
    "output": "Print the minimum amount of time Scott needs to get to the Cross while visiting each chair exactly once.",
    "note": "In the sample testcase, an optimal solution would be . Spent time would be 17 + 24 + 23 + 20 + 33 + 22 = 139.",
    "topics": [
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "704B"
  },
  {
    "title": "Analysis of Pathes in Functional Graph",
    "url": "https://codeforces.com/problemset/problem/702/E",
    "history": "You are given a functional graph. It is a directed graph, in which from each vertex goes exactly one arc. The vertices are numerated from 0 to n - 1. Graph is given as the array f0, f1, . . . , fn - 1, where fi \u2014 the number of vertex to which goes the only arc from the vertex i. Besides you are given array with weights of the arcs w0, w1, . . . , wn - 1, where wi \u2014 the arc weight from i to fi. The graph from the first sample test. Also you are given the integer k ( the length of the path) and you need to find for each vertex two numbers si and mi, where: si \u2014 the sum of the weights of all arcs of the path with length equals to k which starts from the vertex i; mi \u2014 the minimal weight from all arcs on the path with length k which starts from the vertex i. The length of the path is the number of arcs on this path.",
    "input": "The first line contains two integers n, k ( 1 \u2264 n \u2264 105, 1 \u2264 k \u2264 1010) . The second line contains the sequence f0, f1, . . . , fn - 1 ( 0 \u2264 fi < n) and the third \u2014 the sequence w0, w1, . . . , wn - 1 ( 0 \u2264 wi \u2264 108) .",
    "output": "Print n lines, the pair of integers si, mi in each line.",
    "note": "",
    "topics": [
      "data structures",
      "graphs"
    ],
    "id": "702E"
  },
  {
    "title": "Break Up",
    "url": "https://codeforces.com/problemset/problem/700/C",
    "history": "Again, there are hard times in Berland! Many towns have such tensions that even civil war is possible. There are n towns in Reberland, some pairs of which connected by two- way roads. It is not guaranteed that it is possible to reach one town from any other town using these roads. Towns s and t announce the final break of any relationship and intend to rule out the possibility of moving between them by the roads. Now possibly it is needed to close several roads so that moving from s to t using roads becomes impossible. Each town agrees to spend money on closing no more than one road, therefore, the total number of closed roads will be no more than two. Help them find set of no more than two roads such that there will be no way between s and t after closing these roads. For each road the budget required for its closure was estimated. Among all sets find such that the total budget for the closure of a set of roads is minimum.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 1000, 0 \u2264 m \u2264 30 000) \u2014 the number of towns in Berland and the number of roads. The second line contains integers s and t ( 1 \u2264 s, t \u2264 n, s = \u0338 t) \u2014 indices of towns which break up the relationships. Then follow m lines, each of them contains three integers xi, yi and wi ( 1 \u2264 xi, yi \u2264 n, 1 \u2264 wi \u2264 109) \u2014 indices of towns connected by the i- th road, and the budget on its closure. All roads are bidirectional. It is allowed that the pair of towns is connected by more than one road. Roads that connect the city to itself are allowed.",
    "output": "In the first line print the minimum budget required to break up the relations between s and t, if it is allowed to close no more than two roads. In the second line print the value c ( 0 \u2264 c \u2264 2) \u2014 the number of roads to be closed in the found solution. In the third line print in any order c diverse integers from 1 to m \u2014 indices of closed roads. Consider that the roads are numbered from 1 to m in the order they appear in the input. If it is impossible to make towns s and t disconnected by removing no more than 2 roads, the output should contain a single line - 1. If there are several possible answers, you may print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "700C"
  },
  {
    "title": "Connecting Universities",
    "url": "https://codeforces.com/problemset/problem/700/B",
    "history": "Treeland is a country in which there are n towns connected by n - 1 two- way road such that it' s possible to get from any town to any other town. In Treeland there are 2k universities which are located in different towns. Recently, the president signed the decree to connect universities by high- speed network. The Ministry of Education understood the decree in its own way and decided that it was enough to connect each university with another one by using a cable. Formally, the decree will be done! To have the maximum sum in the budget, the Ministry decided to divide universities into pairs so that the total length of the required cable will be maximum. In other words, the total distance between universities in k pairs should be as large as possible. Help the Ministry to find the maximum total distance. Of course, each university should be present in only one pair. Consider that all roads have the same length which is equal to 1.",
    "input": "The first line of the input contains two integers n and k ( 2 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 n / 2) \u2014 the number of towns in Treeland and the number of university pairs. Consider that towns are numbered from 1 to n. The second line contains 2k distinct integers u1, u2, . . . , u2k ( 1 \u2264 ui \u2264 n) \u2014 indices of towns in which universities are located. The next n - 1 line contains the description of roads. Each line contains the pair of integers xj and yj ( 1 \u2264 xj, yj \u2264 n) , which means that the j- th road connects towns xj and yj. All of them are two- way roads. You can move from any town to any other using only these roads.",
    "output": "Print the maximum possible sum of distances in the division of universities into k pairs.",
    "note": "The figure below shows one of possible division into pairs in the first test. If you connect universities number 1 and 6 ( marked in red) and universities number 2 and 5 ( marked in blue) by using the cable, the total distance will equal 6 which will be the maximum sum in this example.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "700B"
  },
  {
    "title": "Fix a Tree",
    "url": "https://codeforces.com/problemset/problem/698/B",
    "history": "A tree is an undirected connected graph without cycles. Let' s consider a rooted undirected tree with n vertices, numbered 1 through n. There are many ways to represent such a tree. One way is to create an array with n integers p1, p2, . . . , pn, where pi denotes a parent of vertex i ( here, for convenience a root is considered its own parent) . For this rooted tree the array p is [ 2, 3, 3, 2] . Given a sequence p1, p2, . . . , pn, one is able to restore a tree: There must be exactly one index r that pr = r. A vertex r is a root of the tree. For all other n - 1 vertices i, there is an edge between vertex i and vertex pi. A sequence p1, p2, . . . , pn is called valid if the described procedure generates some ( any) rooted tree. For example, for n = 3 sequences ( 1, 2, 2) , ( 2, 3, 1) and ( 2, 1, 3) are not valid. You are given a sequence a1, a2, . . . , an, not necessarily valid. Your task is to change the minimum number of elements, in order to get a valid sequence. Print the minimum number of changes and an example of a valid sequence after that number of changes. If there are many valid sequences achievable in the minimum number of changes, print any of them.",
    "input": "The first line of the input contains an integer n ( 2 \u2264 n \u2264 200 000) \u2014 the number of vertices in the tree. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n) .",
    "output": "In the first line print the minimum number of elements to change, in order to get a valid sequence. In the second line, print any valid sequence possible to get from ( a1, a2, . . . , an) in the minimum number of changes. If there are many such sequences, any of them will be accepted.",
    "note": "In the first sample, it' s enough to change one element. In the provided output, a sequence represents a tree rooted in a vertex 4 ( because p4 = 4) , which you can see on the left drawing below. One of other correct solutions would be a sequence 2 3 3 2, representing a tree rooted in vertex 3 ( right drawing below) . On both drawings, roots are painted red. In the second sample, the given sequence is already valid.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "698B"
  },
  {
    "title": "Brain Network (medium)",
    "url": "https://codeforces.com/problemset/problem/690/C2",
    "history": "Further research on zombie thought processes yielded interesting results. As we know from the previous problem, the nervous system of a zombie consists of n brains and m brain connectors joining some pairs of brains together. It was observed that the intellectual abilities of a zombie depend mainly on the topology of its nervous system. More precisely, we define the distance between two brains u and v ( 1 \u2264 u, v \u2264 n) as the minimum number of brain connectors used when transmitting a thought between these two brains. The brain latency of a zombie is defined to be the maximum distance between any two of its brains. Researchers conjecture that the brain latency is the crucial parameter which determines how smart a given zombie is. Help them test this conjecture by writing a program to compute brain latencies of nervous systems. In this problem you may assume that any nervous system given in the input is valid, i. e. , it satisfies conditions ( 1) and ( 2) from the easy version.",
    "input": "The first line of the input contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 100000) denoting the number of brains ( which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects ( 1 \u2264 a, b \u2264 n and a = \u0338 b) .",
    "output": "Print one number \u2013 the brain latency.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "690C2"
  },
  {
    "title": "Mike and Shortcuts",
    "url": "https://codeforces.com/problemset/problem/689/B",
    "history": "Recently, Mike was very busy with studying for exams and contests. Now he is going to chill a bit by doing some sight seeing in the city. City consists of n intersections numbered from 1 to n. Mike starts walking from his house located at the intersection number 1 and goes along some sequence of intersections. Walking from intersection number i to intersection j requires | i - j| units of energy. The total energy spent by Mike to visit a sequence of intersections p1 = 1, p2, . . . , pk is equal to units of energy. Of course, walking would be boring if there were no shortcuts. A shortcut is a special path that allows Mike walking from one intersection to another requiring only 1 unit of energy. There are exactly n shortcuts in Mike' s city, the ith of them allows walking from intersection i to intersection ai ( i \u2264 ai \u2264 ai + 1) ( but not in the opposite direction) , thus there is exactly one shortcut starting at each intersection. Formally, if Mike chooses a sequence p1 = 1, p2, . . . , pk then for each 1 \u2264 i < k satisfying pi + 1 = api and api = \u0338 pi Mike will spend only 1 unit of energy instead of | pi - pi + 1| walking from the intersection pi to intersection pi + 1. For example, if Mike chooses a sequence p1 = 1, p2 = ap1, p3 = ap2, . . . , pk = apk - 1, he spends exactly k - 1 units of total energy walking around them. Before going on his adventure, Mike asks you to find the minimum amount of energy required to reach each of the intersections from his home. Formally, for each 1 \u2264 i \u2264 n Mike is interested in finding minimum possible total energy of some sequence p1 = 1, p2, . . . , pk = i.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 200 000) \u2014 the number of Mike' s city intersection. The second line contains n integers a1, a2, . . . , an ( i \u2264 ai \u2264 n , , describing shortcuts of Mike' s city, allowing to walk from intersection i to intersection ai using only 1 unit of energy. Please note that the shortcuts don' t allow walking in opposite directions ( from ai to i) .",
    "output": "In the only line print n integers m1, m2, . . . , mn, where mi denotes the least amount of total energy required to walk from intersection 1 to intersection i.",
    "note": "In the first sample case desired sequences are: 1: 1; m1 = 0; 2: 1, 2; m2 = 1; 3: 1, 3; m3 = | 3 - 1| = 2. In the second sample case the sequence for any intersection 1 < i is always 1, i and mi = | 1 - i| . In the third sample case \u2014 consider the following intersection sequences: 1: 1; m1 = 0; 2: 1, 2; m2 = | 2 - 1| = 1; 3: 1, 4, 3; m3 = 1 + | 4 - 3| = 2; 4: 1, 4; m4 = 1; 5: 1, 4, 5; m5 = 1 + | 4 - 5| = 2; 6: 1, 4, 6; m6 = 1 + | 4 - 6| = 3; 7: 1, 4, 5, 7; m7 = 1 + | 4 - 5| + 1 = 3.",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "689B"
  },
  {
    "title": "TOF",
    "url": "https://codeforces.com/problemset/problem/687/E",
    "history": "Today Pari gave Arya a cool graph problem. Arya wrote a non- optimal solution for it, because he believes in his ability to optimize non- optimal solutions. In addition to being non- optimal, his code was buggy and he tried a lot to optimize it, so the code also became dirty! He keeps getting Time Limit Exceeds and he is disappointed. Suddenly a bright idea came to his mind! Here is how his dirty code looks like: dfs( v) set count[ v] = count[ v] + 1 if( count[ v] < 1000) foreach u in neighbors[ v] if( visited[ u] is equal to false) dfs( u) break set visited[ v] = truemain( ) input the digraph( ) TOF( ) foreach 1< = i< = n set count[ i] = 0 , visited[ i] = false foreach 1 < = v < = n if( visited[ v] is equal to false) dfs( v) . . . / / And do something cool and magical but we can' t tell you what! He asks you to write the TOF function in order to optimize the running time of the code with minimizing the number of calls of the dfs function. The input is a directed graph and in the TOF function you have to rearrange the edges of the graph in the list neighbors for each vertex. The number of calls of dfs function depends on the arrangement of neighbors of each vertex.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 5000) \u2014 the number of vertices and then number of directed edges in the input graph. Each of the next m lines contains a pair of integers ui and vi ( 1 \u2264 ui, vi \u2264 n) , meaning there is a directed edge in the input graph. You may assume that the graph won' t contain any self- loops and there is at most one edge between any unordered pair of vertices.",
    "output": "Print a single integer \u2014 the minimum possible number of dfs calls that can be achieved with permuting the edges.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "687E"
  },
  {
    "title": "Dividing Kingdom II",
    "url": "https://codeforces.com/problemset/problem/687/D",
    "history": "Long time ago, there was a great kingdom and it was being ruled by The Great Arya and Pari The Great. These two had some problems about the numbers they like, so they decided to divide the great kingdom between themselves. The great kingdom consisted of n cities numbered from 1 to n and m bidirectional roads between these cities, numbered from 1 to m. The i- th road had length equal to wi. The Great Arya and Pari The Great were discussing about destructing some prefix ( all road with numbers less than some x) and suffix ( all roads with numbers greater than some x) of the roads so there will remain only the roads with numbers l, l + 1, . . . , r - 1 and r. After that they will divide the great kingdom into two pieces ( with each city belonging to exactly one piece) such that the hardness of the division is minimized. The hardness of a division is the maximum length of a road such that its both endpoints are in the same piece of the kingdom. In case there is no such road, the hardness of the division is considered to be equal to - 1. Historians found the map of the great kingdom, and they have q guesses about the l and r chosen by those great rulers. Given these data, for each guess li and ri print the minimum possible hardness of the division of the kingdom.",
    "input": "The first line of the input contains three integers n, m and q ( 1 \u2264 n, q \u2264 1000, ) \u2014 the number of cities and roads in the great kingdom, and the number of guesses, respectively. The i- th line of the following m lines contains three integers ui, vi and wi ( 1 \u2264 ui, vi \u2264 n, 0 \u2264 wi \u2264 109) , denoting the road number i connects cities ui and vi and its length is equal wi. It' s guaranteed that no road connects the city to itself and no pair of cities is connected by more than one road. Each of the next q lines contains a pair of integers li and ri ( 1 \u2264 li \u2264 ri \u2264 m) \u2014 a guess from the historians about the remaining roads in the kingdom.",
    "output": "For each guess print the minimum possible hardness of the division in described scenario.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dsu",
      "graphs",
      "sortings"
    ],
    "id": "687D"
  },
  {
    "title": "NP-Hard Problem",
    "url": "https://codeforces.com/problemset/problem/687/A",
    "history": "Recently, Pari and Arya did some research about NP- Hard problems and they found the minimum vertex cover problem very interesting. Suppose the graph G is given. Subset A of its vertices is called a vertex cover of this graph, if for each edge uv there is at least one endpoint of it in this set, i. e. or ( or both) . Pari and Arya have won a great undirected graph as an award in a team contest. Now they have to split it in two parts, but both of them want their parts of the graph to be a vertex cover. They have agreed to give you their graph and you need to find two disjoint subsets of its vertices A and B, such that both A and B are vertex cover or claim it' s impossible. Each vertex should be given to no more than one of the friends ( or you can even keep it for yourself) .",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000) \u2014 the number of vertices and the number of edges in the prize graph, respectively. Each of the next m lines contains a pair of integers ui and vi ( 1 \u2264 ui, vi \u2264 n) , denoting an undirected edge between ui and vi. It' s guaranteed the graph won' t contain any self- loops or multiple edges.",
    "output": "If it' s impossible to split the graph between Pari and Arya as they expect, print \" - 1\" ( without quotes) . If there are two disjoint sets of vertices, such that both sets are vertex cover, print their descriptions. Each description must contain two lines. The first line contains a single integer k denoting the number of vertices in that vertex cover, and the second line contains k integers \u2014 the indices of vertices. Note that because of m \u2265 1, vertex cover cannot be empty.",
    "note": "In the first sample, you can give the vertex number 2 to Arya and vertices numbered 1 and 3 to Pari and keep vertex number 4 for yourself ( or give it someone, if you wish) . In the second sample, there is no way to satisfy both Pari and Arya.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "687A"
  },
  {
    "title": "Travelling Through the Snow Queen's Kingdom",
    "url": "https://codeforces.com/problemset/problem/685/E",
    "history": "Gerda is travelling to the palace of the Snow Queen. The road network consists of n intersections and m bidirectional roads. Roads are numbered from 1 to m. Snow Queen put a powerful spell on the roads to change the weather conditions there. Now, if Gerda steps on the road i at the moment of time less or equal to i, she will leave the road exactly at the moment i. In case she steps on the road i at the moment of time greater than i, she stays there forever. Gerda starts at the moment of time l at the intersection number s and goes to the palace of the Snow Queen, located at the intersection number t. Moreover, she has to be there at the moment r ( or earlier) , before the arrival of the Queen. Given the description of the road network, determine for q queries li, ri, si and ti if it' s possible for Gerda to get to the palace on time.",
    "input": "The first line of the input contains integers n, m and q ( 2 \u2264 n \u2264 1000, 1 \u2264 m, q \u2264 200 000) \u2014 the number of intersections in the road network of Snow Queen' s Kingdom, the number of roads and the number of queries you have to answer. The i- th of the following m lines contains the description of the road number i. The description consists of two integers vi and ui ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui) \u2014 the indices of the intersections connected by the i- th road. It' s possible to get both from vi to ui and from ui to vi using only this road. Each pair of intersection may appear several times, meaning there are several roads connecting this pair. Last q lines contain the queries descriptions. Each of them consists of four integers li, ri, si and ti ( 1 \u2264 li \u2264 ri \u2264 m, 1 \u2264 si, ti \u2264 n, si = \u0338 ti) \u2014 the moment of time Gerda starts her journey, the last moment of time she is allowed to arrive to the palace, the index of the starting intersection and the index of the intersection where palace is located.",
    "output": "For each query print \" Yes\" ( without quotes) if Gerda can be at the Snow Queen palace on time ( not later than ri) or \" No\" ( without quotes) otherwise.",
    "note": "",
    "topics": [
      "bitmasks",
      "brute force",
      "divide and conquer",
      "graphs"
    ],
    "id": "685E"
  },
  {
    "title": "Alyona and the Tree",
    "url": "https://codeforces.com/problemset/problem/682/C",
    "history": "Alyona decided to go on a diet and went to the forest to get some apples. There she unexpectedly found a magic rooted tree with root in the vertex 1, every vertex and every edge of which has a number written on. The girl noticed that some of the tree' s vertices are sad, so she decided to play with them. Let' s call vertex v sad if there is a vertex u in subtree of vertex v such that dist( v, u) > au, where au is the number written on vertex u, dist( v, u) is the sum of the numbers written on the edges on the path from v to u. Leaves of a tree are vertices connected to a single vertex by a single edge, but the root of a tree is a leaf if and only if the tree consists of a single vertex \u2014 root. Thus Alyona decided to remove some of tree leaves until there will be no any sad vertex left in the tree. What is the minimum number of leaves Alyona needs to remove?",
    "input": "In the first line of the input integer n ( 1 \u2264 n \u2264 105) is given \u2014 the number of vertices in the tree. In the second line the sequence of n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) is given, where ai is the number written on vertex i. The next n - 1 lines describe tree edges: ith of them consists of two integers pi and ci ( 1 \u2264 pi \u2264 n, - 109 \u2264 ci \u2264 109) , meaning that there is an edge connecting vertices i + 1 and pi with number ci written on it.",
    "output": "Print the only integer \u2014 the minimum number of leaves Alyona needs to remove such that there will be no any sad vertex left in the tree.",
    "note": "The following image represents possible process of removing leaves from the tree:",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "682C"
  },
  {
    "title": "Gifts by the List",
    "url": "https://codeforces.com/problemset/problem/681/D",
    "history": "Sasha lives in a big happy family. At the Man' s Day all the men of the family gather to celebrate it following their own traditions. There are n men in Sasha' s family, so let' s number them with integers from 1 to n. Each man has at most one father but may have arbitrary number of sons. Man number A is considered to be the ancestor of the man number B if at least one of the following conditions is satisfied: A = B; the man number A is the father of the man number B; there is a man number C, such that the man number A is his ancestor and the man number C is the father of the man number B. Of course, if the man number A is an ancestor of the man number B and A = \u0338 B, then the man number B is not an ancestor of the man number A. The tradition of the Sasha' s family is to give gifts at the Man' s Day. Because giving gifts in a normal way is boring, each year the following happens. A list of candidates is prepared, containing some ( possibly all) of the n men in some order. Each of the n men decides to give a gift. In order to choose a person to give a gift to, man A looks through the list and picks the first man B in the list, such that B is an ancestor of A and gives him a gift. Note that according to definition it may happen that a person gives a gift to himself. If there is no ancestor of a person in the list, he becomes sad and leaves the celebration without giving a gift to anyone. This year you have decided to help in organizing celebration and asked each of the n men, who do they want to give presents to ( this person is chosen only among ancestors) . Are you able to make a list of candidates, such that all the wishes will be satisfied if they give gifts according to the process described above?",
    "input": "In the first line of the input two integers n and m ( 0 \u2264 m < n \u2264 100 000) are given \u2014 the number of the men in the Sasha' s family and the number of family relations in it respectively. The next m lines describe family relations: the ( i + 1) th line consists of pair of integers pi and qi ( 1 \u2264 pi, qi \u2264 n, pi = \u0338 qi) meaning that the man numbered pi is the father of the man numbered qi. It is guaranteed that every pair of numbers appears at most once, that among every pair of two different men at least one of them is not an ancestor of another and that every man has at most one father. The next line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 n) , ith of which means that the man numbered i wants to give a gift to the man numbered ai. It is guaranteed that for every 1 \u2264 i \u2264 n the man numbered ai is an ancestor of the man numbered i.",
    "output": "Print an integer k ( 1 \u2264 k \u2264 n) \u2014 the number of the men in the list of candidates, in the first line. Print then k pairwise different positive integers not exceeding n \u2014 the numbers of the men in the list in an order satisfying every of the men' s wishes, one per line. If there are more than one appropriate lists, print any of them. If there is no appropriate list print - 1 in the only line.",
    "note": "The first sample explanation: if there would be no 1 in the list then the first and the third man' s wishes would not be satisfied ( a1 = a3 = 1) ; if there would be no 2 in the list then the second man wish would not be satisfied ( a2 = 2) ; if 1 would stay before 2 in the answer then the second man would have to give his gift to the first man, but he wants to give it to himself ( a2 = 2) . if, at the other hand, the man numbered 2 would stay before the man numbered 1, then the third man would have to give his gift to the second man, but not to the first ( a3 = 1) .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "681D"
  },
  {
    "title": "Bear and Chase",
    "url": "https://codeforces.com/problemset/problem/679/D",
    "history": "Bearland has n cities, numbered 1 through n. There are m bidirectional roads. The i- th road connects two distinct cities ai and bi. No two roads connect the same pair of cities. It' s possible to get from any city to any other city ( using one or more roads) . The distance between cities a and b is defined as the minimum number of roads used to travel between a and b. Limak is a grizzly bear. He is a criminal and your task is to catch him, or at least to try to catch him. You have only two days ( today and tomorrow) and after that Limak is going to hide forever. Your main weapon is BCD ( Bear Criminal Detector) . Where you are in some city, you can use BCD and it tells you the distance between you and a city where Limak currently is. Unfortunately, BCD can be used only once a day. You don' t know much about Limak' s current location. You assume that he is in one of n cities, chosen uniformly at random ( each city with probability ) . You decided for the following plan: Choose one city and use BCD there. After using BCD you can try to catch Limak ( but maybe it isn' t a good idea) . In this case you choose one city and check it. You win if Limak is there. Otherwise, Limak becomes more careful and you will never catch him ( you loose) . Wait 24 hours to use BCD again. You know that Limak will change his location during that time. In detail, he will choose uniformly at random one of roads from his initial city, and he will use the chosen road, going to some other city. Tomorrow, you will again choose one city and use BCD there. Finally, you will try to catch Limak. You will choose one city and check it. You will win if Limak is there, and loose otherwise. Each time when you choose one of cities, you can choose any of n cities. Let' s say it isn' t a problem for you to quickly get somewhere. What is the probability of finding Limak, if you behave optimally?",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 400, ) \u2014 the number of cities and the number of roads, respectively. Then, m lines follow. The i- th of them contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 cities connected by the i- th road. No two roads connect the same pair of cities. It' s possible to get from any city to any other city.",
    "output": "Print one real number \u2014 the probability of finding Limak, if you behave optimally. Your answer will be considered correct if its absolute error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct if | a - b| \u2264 10 - 6.",
    "note": "In the first sample test, there are three cities and there is a road between every pair of cities. Let' s analyze one of optimal scenarios. Use BCD in city 1. With probability Limak is in this city and BCD tells you that the distance is 0. You should try to catch him now and you win for sure. With probability the distance is 1 because Limak is in city 2 or city 3. In this case you should wait for the second day. You wait and Limak moves to some other city. There is probability that Limak was in city 2 and then went to city 3. that he went from 2 to 1. that he went from 3 to 2. that he went from 3 to 1. Use BCD again in city 1 ( though it' s allowed to use it in some other city) . If the distance is 0 then you' re sure Limak is in this city ( you win) . If the distance is 1 then Limak is in city 2 or city 3. Then you should guess that he is in city 2 ( guessing city 3 would be fine too) . You loose only if Limak was in city 2 first and then he moved to city 3. The probability of loosing is . The answer is .",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "implementation",
      "math",
      "probabilities"
    ],
    "id": "679D"
  },
  {
    "title": "Vanya and Treasure",
    "url": "https://codeforces.com/problemset/problem/677/D",
    "history": "Vanya is in the palace that can be represented as a grid n \u00d7 m. Each room contains a single chest, an the room located in the i- th row and j- th columns contains the chest of type aij. Each chest of type x \u2264 p - 1 contains a key that can open any chest of type x + 1, and all chests of type 1 are not locked. There is exactly one chest of type p and it contains a treasure. Vanya starts in cell ( 1, 1) ( top left corner) . What is the minimum total distance Vanya has to walk in order to get the treasure? Consider the distance between cell ( r1, c1) ( the cell in the row r1 and column c1) and ( r2, c2) is equal to | r1 - r2| + | c1 - c2| .",
    "input": "The first line of the input contains three integers n, m and p ( 1 \u2264 n, m \u2264 300, 1 \u2264 p \u2264 n\u00b7m) \u2014 the number of rows and columns in the table representing the palace and the number of different types of the chests, respectively. Each of the following n lines contains m integers aij ( 1 \u2264 aij \u2264 p) \u2014 the types of the chests in corresponding rooms. It' s guaranteed that for each x from 1 to p there is at least one chest of this type ( that is, there exists a pair of r and c, such that arc = x) . Also, it' s guaranteed that there is exactly one chest of type p.",
    "output": "Print one integer \u2014 the minimum possible total distance Vanya has to walk in order to get the treasure from the chest of type p.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "677D"
  },
  {
    "title": "Theseus and labyrinth",
    "url": "https://codeforces.com/problemset/problem/676/D",
    "history": "Theseus has just arrived to Crete to fight Minotaur. He found a labyrinth that has a form of a rectangular field of size n \u00d7 m and consists of blocks of size 1 \u00d7 1. Each block of the labyrinth has a button that rotates all blocks 90 degrees clockwise. Each block rotates around its center and doesn' t change its position in the labyrinth. Also, each block has some number of doors ( possibly none) . In one minute, Theseus can either push the button in order to rotate all the blocks 90 degrees clockwise or pass to the neighbouring block. Theseus can go from block A to some neighbouring block B only if block A has a door that leads to block B and block B has a door that leads to block A. Theseus found an entrance to labyrinth and is now located in block ( xT, yT) \u2014 the block in the row xT and column yT. Theseus know that the Minotaur is hiding in block ( xM, yM) and wants to know the minimum number of minutes required to get there. Theseus is a hero, not a programmer, so he asks you to help him.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 1000) \u2014 the number of rows and the number of columns in labyrinth, respectively. Each of the following n lines contains m characters, describing the blocks of the labyrinth. The possible characters are: \u00ab+ \u00bb means this block has 4 doors ( one door to each neighbouring block) ; \u00ab- \u00bb means this block has 2 doors \u2014 to the left and to the right neighbours; \u00ab| \u00bb means this block has 2 doors \u2014 to the top and to the bottom neighbours; \u00ab^ \u00bb means this block has 1 door \u2014 to the top neighbour; \u00ab> \u00bb means this block has 1 door \u2014 to the right neighbour; \u00ab< \u00bb means this block has 1 door \u2014 to the left neighbour; \u00abv\u00bb means this block has 1 door \u2014 to the bottom neighbour; \u00abL\u00bb means this block has 3 doors \u2014 to all neighbours except left one; \u00abR\u00bb means this block has 3 doors \u2014 to all neighbours except right one; \u00abU\u00bb means this block has 3 doors \u2014 to all neighbours except top one; \u00abD\u00bb means this block has 3 doors \u2014 to all neighbours except bottom one; \u00ab* \u00bb means this block is a wall and has no doors. Left, right, top and bottom are defined from representing labyrinth as a table, where rows are numbered from 1 to n from top to bottom and columns are numbered from 1 to m from left to right. Next line contains two integers \u2014 coordinates of the block ( xT, yT) ( 1 \u2264 xT \u2264 n, 1 \u2264 yT \u2264 m) , where Theseus is initially located. Last line contains two integers \u2014 coordinates of the block ( xM, yM) ( 1 \u2264 xM \u2264 n, 1 \u2264 yM \u2264 m) , where Minotaur hides. It' s guaranteed that both the block where Theseus starts and the block where Minotaur is hiding have at least one door. Theseus and Minotaur may be initially located at the same block.",
    "output": "If Theseus is not able to get to Minotaur, then print - 1 in the only line of the output. Otherwise, print the minimum number of minutes required to get to the block where Minotaur is hiding.",
    "note": "Assume that Theseus starts at the block ( xT, yT) at the moment 0.",
    "topics": [
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "676D"
  },
  {
    "title": "World Tour",
    "url": "https://codeforces.com/problemset/problem/666/B",
    "history": "A famous sculptor Cicasso goes to a world tour! Well, it is not actually a world- wide. But not everyone should have the opportunity to see works of sculptor, shouldn' t he? Otherwise there will be no any exclusivity. So Cicasso will entirely hold the world tour in his native country \u2014 Berland. Cicasso is very devoted to his work and he wants to be distracted as little as possible. Therefore he will visit only four cities. These cities will be different, so no one could think that he has \" favourites\" . Of course, to save money, he will chose the shortest paths between these cities. But as you have probably guessed, Cicasso is a weird person. Although he doesn' t like to organize exhibitions, he likes to travel around the country and enjoy its scenery. So he wants the total distance which he will travel to be as large as possible. However, the sculptor is bad in planning, so he asks you for help. There are n cities and m one- way roads in Berland. You have to choose four different cities, which Cicasso will visit and also determine the order in which he will visit them. So that the total distance he will travel, if he visits cities in your order, starting from the first city in your list, and ending in the last, choosing each time the shortest route between a pair of cities \u2014 will be the largest. Note that intermediate routes may pass through the cities, which are assigned to the tour, as well as pass twice through the same city. For example, the tour can look like that: . Four cities in the order of visiting marked as overlines: [ 1, 5, 2, 4] . Note that Berland is a high- tech country. So using nanotechnologies all roads were altered so that they have the same length. For the same reason moving using regular cars is not very popular in the country, and it can happen that there are such pairs of cities, one of which generally can not be reached by car from the other one. However, Cicasso is very conservative and cannot travel without the car. Choose cities so that the sculptor can make the tour using only the automobile. It is guaranteed that it is always possible to do.",
    "input": "In the first line there is a pair of integers n and m ( 4 \u2264 n \u2264 3000, 3 \u2264 m \u2264 5000) \u2014 a number of cities and one- way roads in Berland. Each of the next m lines contains a pair of integers ui, vi ( 1 \u2264 ui, vi \u2264 n) \u2014 a one- way road from the city ui to the city vi. Note that ui and vi are not required to be distinct. Moreover, it can be several one- way roads between the same pair of cities.",
    "output": "Print four integers \u2014 numbers of cities which Cicasso will visit according to optimal choice of the route. Numbers of cities should be printed in the order that Cicasso will visit them. If there are multiple solutions, print any of them.",
    "note": "Let d( x, y) be the shortest distance between cities x and y. Then in the example d( 2, 1) = 3, d( 1, 8) = 7, d( 8, 7) = 3. The total distance equals 13.",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "666B"
  },
  {
    "title": "Graph Coloring",
    "url": "https://codeforces.com/problemset/problem/662/B",
    "history": "You are given an undirected graph that consists of n vertices and m edges. Initially, each edge is colored either red or blue. Each turn a player picks a single vertex and switches the color of all edges incident to it. That is, all red edges with an endpoint in this vertex change the color to blue, while all blue edges with an endpoint in this vertex change the color to red. Find the minimum possible number of moves required to make the colors of all edges equal.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 100 000) \u2014 the number of vertices and edges, respectively. The following m lines provide the description of the edges, as the i- th of them contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 the indices of the vertices connected by the i- th edge, and a character ci ( ) providing the initial color of this edge. If ci equals ' R' , then this edge is initially colored red. Otherwise, ci is equal to ' B' and this edge is initially colored blue. It' s guaranteed that there are no self- loops and multiple edges.",
    "output": "If there is no way to make the colors of all edges equal output - 1 in the only line of the output. Otherwise first output k \u2014 the minimum number of moves required to achieve the goal, then output k integers a1, a2, . . . , ak, where ai is equal to the index of the vertex that should be used at the i- th move. If there are multiple optimal sequences of moves, output any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "662B"
  },
  {
    "title": "Polycarp and Hay",
    "url": "https://codeforces.com/problemset/problem/659/F",
    "history": "The farmer Polycarp has a warehouse with hay, which can be represented as an n \u00d7 m rectangular table, where n is the number of rows, and m is the number of columns in the table. Each cell of the table contains a haystack. The height in meters of the hay located in the i- th row and the j- th column is equal to an integer ai, j and coincides with the number of cubic meters of hay in the haystack, because all cells have the size of the base 1 \u00d7 1. Polycarp has decided to tidy up in the warehouse by removing an arbitrary integer amount of cubic meters of hay from the top of each stack. You can take different amounts of hay from different haystacks. Besides, it is allowed not to touch a stack at all, or, on the contrary, to remove it completely. If a stack is completely removed, the corresponding cell becomes empty and no longer contains the stack. Polycarp wants the following requirements to hold after the reorganization: the total amount of hay remaining in the warehouse must be equal to k, the heights of all stacks ( i. e. , cells containing a non- zero amount of hay) should be the same, the height of at least one stack must remain the same as it was, for the stability of the remaining structure all the stacks should form one connected region. The two stacks are considered adjacent if they share a side in the table. The area is called connected if from any of the stack in the area you can get to any other stack in this area, moving only to adjacent stacks. In this case two adjacent stacks necessarily belong to the same area. Help Polycarp complete this challenging task or inform that it is impossible.",
    "input": "The first line of the input contains three integers n, m ( 1 \u2264 n, m \u2264 1000) and k ( 1 \u2264 k \u2264 1018) \u2014 the number of rows and columns of the rectangular table where heaps of hay are lain and the required total number cubic meters of hay after the reorganization. Then n lines follow, each containing m positive integers ai, j ( 1 \u2264 ai, j \u2264 109) , where ai, j is equal to the number of cubic meters of hay making the hay stack on the i- th row and j- th column of the table.",
    "output": "In the first line print \" YES\" ( without quotes) , if Polycarpus can perform the reorganisation and \" NO\" ( without quotes) otherwise. If the answer is \" YES\" ( without quotes) , then in next n lines print m numbers \u2014 the heights of the remaining hay stacks. All the remaining non- zero values should be equal, represent a connected area and at least one of these values shouldn' t be altered. If there are multiple answers, print any of them.",
    "note": "In the first sample non- zero values make up a connected area, their values do not exceed the initial heights of hay stacks. All the non- zero values equal 7, and their number is 5, so the total volume of the remaining hay equals the required value k = 7\u00b75 = 35. At that the stack that is on the second line and third row remained unaltered.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "659F"
  },
  {
    "title": "New Reform",
    "url": "https://codeforces.com/problemset/problem/659/E",
    "history": "Berland has n cities connected by m bidirectional roads. No road connects a city to itself, and each pair of cities is connected by no more than one road. It is not guaranteed that you can get from any city to any other one, using only the existing roads. The President of Berland decided to make changes to the road system and instructed the Ministry of Transport to make this reform. Now, each road should be unidirectional ( only lead from one city to another) . In order not to cause great resentment among residents, the reform needs to be conducted so that there can be as few separate cities as possible. A city is considered separate, if no road leads into it, while it is allowed to have roads leading from this city. Help the Ministry of Transport to find the minimum possible number of separate cities after the reform.",
    "input": "The first line of the input contains two positive integers, n and m \u2014 the number of the cities and the number of roads in Berland ( 2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000) . Next m lines contain the descriptions of the roads: the i- th road is determined by two distinct integers xi, yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) , where xi and yi are the numbers of the cities connected by the i- th road. It is guaranteed that there is no more than one road between each pair of cities, but it is not guaranteed that from any city you can get to any other one, using only roads.",
    "output": "Print a single integer \u2014 the minimum number of separated cities after the reform.",
    "note": "In the first sample the following road orientation is allowed: , , . The second sample: , , , , . The third sample: , , , , .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "659E"
  },
  {
    "title": "Bear and Forgotten Tree 2",
    "url": "https://codeforces.com/problemset/problem/653/E",
    "history": "A tree is a connected undirected graph consisting of n vertices and n - 1 edges. Vertices are numbered 1 through n. Limak is a little polar bear. He once had a tree with n vertices but he lost it. He still remembers something about the lost tree though. You are given m pairs of vertices ( a1, b1) , ( a2, b2) , . . . , ( am, bm) . Limak remembers that for each i there was no edge between ai and bi. He also remembers that vertex 1 was incident to exactly k edges ( its degree was equal to k) . Is it possible that Limak remembers everything correctly? Check whether there exists a tree satisfying the given conditions.",
    "input": "The first line of the input contains three integers n, m and k ( ) \u2014 the number of vertices in Limak' s tree, the number of forbidden pairs of vertices, and the degree of vertex 1, respectively. The i- th of next m lines contains two distinct integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the i- th pair that is forbidden. It' s guaranteed that each pair of vertices will appear at most once in the input.",
    "output": "Print \" possible\" ( without quotes) if there exists at least one tree satisfying the given conditions. Otherwise, print \" impossible\" ( without quotes) .",
    "note": "In the first sample, there are n = 5 vertices. The degree of vertex 1 should be k = 2. All conditions are satisfied for a tree with edges 1 - 5, 5 - 2, 1 - 3 and 3 - 4. In the second sample, Limak remembers that none of the following edges existed: 1 - 2, 1 - 3, 1 - 4, 1 - 5 and 1 - 6. Hence, vertex 1 couldn' t be connected to any other vertex and it implies that there is no suitable tree.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "653E"
  },
  {
    "title": "Delivery Bears",
    "url": "https://codeforces.com/problemset/problem/653/D",
    "history": "Niwel is a little golden bear. As everyone knows, bears live in forests, but Niwel got tired of seeing all the trees so he decided to move to the city. In the city, Niwel took on a job managing bears to deliver goods. The city that he lives in can be represented as a directed graph with n nodes and m edges. Each edge has a weight capacity. A delivery consists of a bear carrying weights with their bear hands on a simple path from node 1 to node n. The total weight that travels across a particular edge must not exceed the weight capacity of that edge. Niwel has exactly x bears. In the interest of fairness, no bear can rest, and the weight that each bear carries must be exactly the same. However, each bear may take different paths if they like. Niwel would like to determine, what is the maximum amount of weight he can deliver ( it' s the sum of weights carried by bears) . Find the maximum weight.",
    "input": "The first line contains three integers n, m and x ( 2 \u2264 n \u2264 50, 1 \u2264 m \u2264 500, 1 \u2264 x \u2264 100 000) \u2014 the number of nodes, the number of directed edges and the number of bears, respectively. Each of the following m lines contains three integers ai, bi and ci ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 ci \u2264 1 000 000) . This represents a directed edge from node ai to bi with weight capacity ci. There are no self loops and no multiple edges from one city to the other city. More formally, for each i and j that i = \u0338 j it' s guaranteed that ai = \u0338 aj or bi = \u0338 bj. It is also guaranteed that there is at least one path from node 1 to node n.",
    "output": "Print one real value on a single line \u2014 the maximum amount of weight Niwel can deliver if he uses exactly x bears. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. Namely: let' s assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct if .",
    "note": "In the first sample, Niwel has three bears. Two bears can choose the path , while one bear can choose the path . Even though the bear that goes on the path can carry one unit of weight, in the interest of fairness, he is restricted to carry 0. 5 units of weight. Thus, the total weight is 1. 5 units overall. Note that even though Niwel can deliver more weight with just 2 bears, he must use exactly 3 bears on this day.",
    "topics": [
      "binary search",
      "flows",
      "graphs"
    ],
    "id": "653D"
  },
  {
    "title": "Pursuit For Artifacts",
    "url": "https://codeforces.com/problemset/problem/652/E",
    "history": "Johnny is playing a well- known computer game. The game are in some country, where the player can freely travel, pass quests and gain an experience. In that country there are n islands and m bridges between them, so you can travel from any island to any other. In the middle of some bridges are lying ancient powerful artifacts. Johnny is not interested in artifacts, but he can get some money by selling some artifact. At the start Johnny is in the island a and the artifact- dealer is in the island b ( possibly they are on the same island) . Johnny wants to find some artifact, come to the dealer and sell it. The only difficulty is that bridges are too old and destroying right after passing over them. Johnnie' s character can' t swim, fly and teleport, so the problem became too difficult. Note that Johnny can' t pass the half of the bridge, collect the artifact and return to the same island. Determine if Johnny can find some artifact and sell it.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 3\u00b7105, 0 \u2264 m \u2264 3\u00b7105) \u2014 the number of islands and bridges in the game. Each of the next m lines contains the description of the bridge \u2014 three integers xi, yi, zi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi, 0 \u2264 zi \u2264 1) , where xi and yi are the islands connected by the i- th bridge, zi equals to one if that bridge contains an artifact and to zero otherwise. There are no more than one bridge between any pair of islands. It is guaranteed that it' s possible to travel between any pair of islands. The last line contains two integers a and b ( 1 \u2264 a, b \u2264 n) \u2014 the islands where are Johnny and the artifact- dealer respectively.",
    "output": "If Johnny can find some artifact and sell it print the only word \" YES\" ( without quotes) . Otherwise print the word \" NO\" ( without quotes) .",
    "note": "",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "652E"
  },
  {
    "title": "Table Compression",
    "url": "https://codeforces.com/problemset/problem/650/C",
    "history": "Little Petya is now fond of data compression algorithms. He has already studied gz, bz, zip algorithms and many others. Inspired by the new knowledge, Petya is now developing the new compression algorithm which he wants to name dis. Petya decided to compress tables. He is given a table a consisting of n rows and m columns that is filled with positive integers. He wants to build the table a' consisting of positive integers such that the relative order of the elements in each row and each column remains the same. That is, if in some row i of the initial table ai, j < ai, k, then in the resulting table a' i, j < a' i, k, and if ai, j = ai, k then a' i, j = a' i, k. Similarly, if in some column j of the initial table ai, j < ap, j then in compressed table a' i, j < a' p, j and if ai, j = ap, j then a' i, j = a' p, j. Because large values require more space to store them, the maximum value in a' should be as small as possible. Petya is good in theory, however, he needs your help to implement the algorithm.",
    "input": "The first line of the input contains two integers n and m ( , the number of rows and the number of columns of the table respectively. Each of the following n rows contain m integers ai, j ( 1 \u2264 ai, j \u2264 109) that are the values in the table.",
    "output": "Output the compressed table in form of n lines each containing m integers. If there exist several answers such that the maximum number in the compressed table is minimum possible, you are allowed to output any of them.",
    "note": "In the first sample test, despite the fact a1, 2 = \u0338 a21, they are not located in the same row or column so they may become equal after the compression.",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "650C"
  },
  {
    "title": "Robot Rapping Results Report",
    "url": "https://codeforces.com/problemset/problem/645/D",
    "history": "While Farmer John rebuilds his farm in an unfamiliar portion of Bovinia, Bessie is out trying some alternative jobs. In her new gig as a reporter, Bessie needs to know about programming competition results as quickly as possible. When she covers the 2016 Robot Rap Battle Tournament, she notices that all of the robots operate under deterministic algorithms. In particular, robot i will beat robot j if and only if robot i has a higher skill level than robot j. And if robot i beats robot j and robot j beats robot k, then robot i will beat robot k. Since rapping is such a subtle art, two robots can never have the same skill level. Given the results of the rap battles in the order in which they were played, determine the minimum number of first rap battles that needed to take place before Bessie could order all of the robots by skill level.",
    "input": "The first line of the input consists of two integers, the number of robots n ( 2 \u2264 n \u2264 100 000) and the number of rap battles m ( ) . The next m lines describe the results of the rap battles in the order they took place. Each consists of two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) , indicating that robot ui beat robot vi in the i- th rap battle. No two rap battles involve the same pair of robots. It is guaranteed that at least one ordering of the robots satisfies all m relations.",
    "output": "Print the minimum k such that the ordering of the robots by skill level is uniquely defined by the first k rap battles. If there exists more than one ordering that satisfies all m relations, output - 1.",
    "note": "In the first sample, the robots from strongest to weakest must be ( 4, 2, 1, 3) , which Bessie can deduce after knowing the results of the first four rap battles. In the second sample, both ( 1, 3, 2) and ( 3, 1, 2) are possible orderings of the robots from strongest to weakest after both rap battles.",
    "topics": [
      "binary search",
      "dp",
      "graphs"
    ],
    "id": "645D"
  },
  {
    "title": "Bear and Two Paths",
    "url": "https://codeforces.com/problemset/problem/643/B",
    "history": "Bearland has n cities, numbered 1 through n. Cities are connected via bidirectional roads. Each road connects two distinct cities. No two roads connect the same pair of cities. Bear Limak was once in a city a and he wanted to go to a city b. There was no direct connection so he decided to take a long walk, visiting each city exactly once. Formally: There is no road between a and b. There exists a sequence ( path) of n distinct cities v1, v2, . . . , vn that v1 = a, vn = b and there is a road between vi and vi + 1 for . On the other day, the similar thing happened. Limak wanted to travel between a city c and a city d. There is no road between them but there exists a sequence of n distinct cities u1, u2, . . . , un that u1 = c, un = d and there is a road between ui and ui + 1 for . Also, Limak thinks that there are at most k roads in Bearland. He wonders whether he remembers everything correctly. Given n, k and four distinct cities a, b, c, d, can you find possible paths ( v1, . . . , vn) and ( u1, . . . , un) to satisfy all the given conditions? Find any solution or print - 1 if it' s impossible.",
    "input": "The first line of the input contains two integers n and k ( 4 \u2264 n \u2264 1000, n - 1 \u2264 k \u2264 2n - 2) \u2014 the number of cities and the maximum allowed number of roads, respectively. The second line contains four distinct integers a, b, c and d ( 1 \u2264 a, b, c, d \u2264 n) .",
    "output": "Print - 1 if it' s impossible to satisfy all the given conditions. Otherwise, print two lines with paths descriptions. The first of these two lines should contain n distinct integers v1, v2, . . . , vn where v1 = a and vn = b. The second line should contain n distinct integers u1, u2, . . . , un where u1 = c and un = d. Two paths generate at most 2n - 2 roads: ( v1, v2) , ( v2, v3) , . . . , ( vn - 1, vn) , ( u1, u2) , ( u2, u3) , . . . , ( un - 1, un) . Your answer will be considered wrong if contains more than k distinct roads or any other condition breaks. Note that ( x, y) and ( y, x) are the same road.",
    "note": "In the first sample test, there should be 7 cities and at most 11 roads. The provided sample solution generates 10 roads, as in the drawing. You can also see a simple path of length n between 2 and 4, and a path between 7 and 3.",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "643B"
  },
  {
    "title": "Bear and Chemistry",
    "url": "https://codeforces.com/problemset/problem/639/F",
    "history": "Limak is a smart brown bear who loves chemistry, reactions and transforming elements. In Bearland ( Limak' s home) there are n elements, numbered 1 through n. There are also special machines, that can transform elements. Each machine is described by two integers ai, bi representing two elements, not necessarily distinct. One can use a machine either to transform an element ai to bi or to transform bi to ai. Machines in Bearland aren' t very resistant and each of them can be used at most once. It is possible that ai = bi and that many machines have the same pair ai, bi. Radewoosh is Limak' s biggest enemy and rival. He wants to test Limak in the chemistry. They will meet tomorrow and both of them will bring all their machines. Limak has m machines but he doesn' t know much about his enemy. They agreed Radewoosh will choose two distinct elements, let' s denote them as x and y. Limak will be allowed to use both his and Radewoosh' s machines. He may use zero or more ( maybe even all) machines to achieve the goal, each machine at most once. Limak will start from an element x and his task will be to first get an element y and then to again get an element x \u2014 then we say that he succeeds. After that Radewoosh would agree that Limak knows the chemistry ( and Radewoosh would go away) . Radewoosh likes some particular non- empty set of favorite elements and he will choose x, y from that set. Limak doesn' t know exactly which elements are in the set and also he doesn' t know what machines Radewoosh has. Limak has heard q gossips ( queries) though and each of them consists of Radewoosh' s machines and favorite elements. For each gossip Limak wonders if he would be able to succeed tomorrow for every pair x, y chosen from the set of favorite elements. If yes then print \" YES\" ( without the quotes) . But if there exists a pair ( x, y) from the given set that Limak wouldn' t be able to succeed then you should print \" NO\" ( without the quotes) .",
    "input": "The first line contains three integers n, m and q ( 1 \u2264 n, q \u2264 300 000, 0 \u2264 m \u2264 300 000) \u2014 the number of elements, the number of Limak' s machines and the number of gossips, respectively. Each of the next m lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n) describing one of Limak' s machines. Then, the description of q gossips follows. The first line of the description of the i- th gossip contains two integers ni and mi ( 1 \u2264 ni \u2264 300 000, 0 \u2264 mi \u2264 300 000) . The second line contains ni distinct integers xi, 1, xi, 2, . . . , xi, ni ( 1 \u2264 xi, j \u2264 n) \u2014 Radewoosh' s favorite elements in the i- th gossip. Note that ni = 1 is allowed, in this case there are no pairs of distinct elements, so Limak automatically wins ( the answer is \" YES\" ) . Then mi lines follow, each containing two integers ai, j, bi, j ( 1 \u2264 ai, j, bi, j) describing one of Radewoosh' s machines in the i- th gossip. The sum of ni over all gossips won' t exceed 300 000. Also, the sum of mi over all gossips won' t exceed 300 000. Important: Because we want you to process the gossips online, in order to know the elements in Radewoosh' s favorite set and elements that his machines can transform, for on each number that denotes them in the input you should use following function: int rotate( int element) element= ( element+ R)",
    "output": "You should print q lines. The i- th of them should contain \" YES\" ( without quotes) if for the i- th gossip for each pair of elements x and y ( in the set xi, 1, xi, 2, . . . , xi, ni) Limak is able to succeed. Otherwise you should print \" NO\" ( without quotes) .",
    "note": "Lets look at first sample: In first gossip Radewoosh' s favorite set is 4, 2 and he has no machines. Limak can tranform element 4 into 2 ( so half of a task is complete) and then 2 into 3, and 3 into 4. Answer is \" YES\" , so R is increased by 1. In second gossip set in the input is denoted by 6, 2 and machine by ( 3, 4) , but R is equal to 1, so set is 1, 3 and machine is ( 4, 5) . Answer is \" NO\" , so R isn' t changed. In third gossip set 6, 4, 3 and machines ( 2, 5) and ( 4, 6) are deciphered to be 1, 5, 4, ( 3, 6) and ( 5, 1) . Consider Radewoosh' s choices: If he chooses elements 1 and 5, then Limak is able to transform 1 into 5, then 6 into 3, 3 into 2 and 2 into 1. If he chooses elements 5 and 4, then Limak is able to transform 5 into 6, 6 into 3, 3 into 4 ( half way already behind him) , 4 into 2, 2 into 1, 1 into 5. If he chooses elements 1 and 4, then Limak is able to transform 1 into 2, 2 into 4, 4 into 3, 3 into 6, 6 into 5 and 5 into 1. So Limak is able to execute task. Answer is \" YES\" and R is increased by 3 ( it' s equal to 4 now) . In last gossip 1, 2 and ( 1, 2) are deciphered to be 5, 6 and ( 5, 6) . Now there are 2 machines ( 5, 6) so Limak is able to execute task again.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "639F"
  },
  {
    "title": "Bear and Forgotten Tree 3",
    "url": "https://codeforces.com/problemset/problem/639/B",
    "history": "A tree is a connected undirected graph consisting of n vertices and n - 1 edges. Vertices are numbered 1 through n. Limak is a little polar bear and Radewoosh is his evil enemy. Limak once had a tree but Radewoosh stolen it. Bear is very sad now because he doesn' t remember much about the tree \u2014 he can tell you only three values n, d and h: The tree had exactly n vertices. The tree had diameter d. In other words, d was the biggest distance between two vertices. Limak also remembers that he once rooted the tree in vertex 1 and after that its height was h. In other words, h was the biggest distance between vertex 1 and some other vertex. The distance between two vertices of the tree is the number of edges on the simple path between them. Help Limak to restore his tree. Check whether there exists a tree satisfying the given conditions. Find any such tree and print its edges in any order. It' s also possible that Limak made a mistake and there is no suitable tree \u2013 in this case print \" - 1\" .",
    "input": "The first line contains three integers n, d and h ( 2 \u2264 n \u2264 100 000, 1 \u2264 h \u2264 d \u2264 n - 1) \u2014 the number of vertices, diameter, and height after rooting in vertex 1, respectively.",
    "output": "If there is no tree matching what Limak remembers, print the only line with \" - 1\" ( without the quotes) . Otherwise, describe any tree matching Limak' s description. Print n - 1 lines, each with two space- separated integers \u2013 indices of vertices connected by an edge. If there are many valid trees, print any of them. You can print edges in any order.",
    "note": "Below you can see trees printed to the output in the first sample and the third sample.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "trees"
    ],
    "id": "639B"
  },
  {
    "title": "Three-dimensional Turtle Super Computer ",
    "url": "https://codeforces.com/problemset/problem/638/D",
    "history": "A super computer has been built in the Turtle Academy of Sciences. The computer consists of n\u00b7m\u00b7k CPUs. The architecture was the paralellepiped of size n \u00d7 m \u00d7 k, split into 1 \u00d7 1 \u00d7 1 cells, each cell contains exactly one CPU. Thus, each CPU can be simultaneously identified as a group of three numbers from the layer number from 1 to n, the line number from 1 to m and the column number from 1 to k. In the process of the Super Computer' s work the CPUs can send each other messages by the famous turtle scheme: CPU ( x, y, z) can send messages to CPUs ( x + 1, y, z) , ( x, y + 1, z) and ( x, y, z + 1) ( of course, if they exist) , there is no feedback, that is, CPUs ( x + 1, y, z) , ( x, y + 1, z) and ( x, y, z + 1) cannot send messages to CPU ( x, y, z) . Over time some CPUs broke down and stopped working. Such CPUs cannot send messages, receive messages or serve as intermediates in transmitting messages. We will say that CPU ( a, b, c) controls CPU ( d, e, f) , if there is a chain of CPUs ( xi, yi, zi) , such that ( x1 = a, y1 = b, z1 = c) , ( xp = d, yp = e, zp = f) ( here and below p is the length of the chain) and the CPU in the chain with number i ( i < p) can send messages to CPU i + 1. Turtles are quite concerned about the denial- proofness of the system of communication between the remaining CPUs. For that they want to know the number of critical CPUs. A CPU ( x, y, z) is critical, if turning it off will disrupt some control, that is, if there are two distinctive from ( x, y, z) CPUs: ( a, b, c) and ( d, e, f) , such that ( a, b, c) controls ( d, e, f) before ( x, y, z) is turned off and stopped controlling it after the turning off.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m, k \u2264 100) \u2014 the dimensions of the Super Computer. Then n blocks follow, describing the current state of the processes. The blocks correspond to the layers of the Super Computer in the order from 1 to n. Each block consists of m lines, k characters in each \u2014 the description of a layer in the format of an m \u00d7 k table. Thus, the state of the CPU ( x, y, z) is corresponded to the z- th character of the y- th line of the block number x. Character \" 1\" corresponds to a working CPU and character \" 0\" corresponds to a malfunctioning one. The blocks are separated by exactly one empty line.",
    "output": "Print a single integer \u2014 the number of critical CPUs, that is, such that turning only this CPU off will disrupt some control.",
    "note": "In the first sample the whole first layer of CPUs is malfunctional. In the second layer when CPU ( 2, 1, 2) turns off, it disrupts the control by CPU ( 2, 1, 3) over CPU ( 2, 1, 1) , and when CPU ( 2, 2, 2) is turned off, it disrupts the control over CPU ( 2, 2, 3) by CPU ( 2, 2, 1) . In the second sample all processors except for the corner ones are critical. In the third sample there is not a single processor controlling another processor, so the answer is 0.",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs"
    ],
    "id": "638D"
  },
  {
    "title": "Road Improvement",
    "url": "https://codeforces.com/problemset/problem/638/C",
    "history": "In Berland there are n cities and n - 1 bidirectional roads. Each road connects some pair of cities, from any city you can get to any other one using only the given roads. In each city there is exactly one repair brigade. To repair some road, you need two teams based in the cities connected by the road to work simultaneously for one day. Both brigades repair one road for the whole day and cannot take part in repairing other roads on that day. But the repair brigade can do nothing on that day. Determine the minimum number of days needed to repair all the roads. The brigades cannot change the cities where they initially are.",
    "input": "The first line of the input contains a positive integer n ( 2 \u2264 n \u2264 200 000) \u2014 the number of cities in Berland. Each of the next n - 1 lines contains two numbers ui, vi, meaning that the i- th road connects city ui and city vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) .",
    "output": "First print number k \u2014 the minimum number of days needed to repair all the roads in Berland. In next k lines print the description of the roads that should be repaired on each of the k days. On the i- th line print first number di \u2014 the number of roads that should be repaired on the i- th day, and then di space- separated integers \u2014 the numbers of the roads that should be repaired on the i- th day. The roads are numbered according to the order in the input, starting from one. If there are multiple variants, you can print any of them.",
    "note": "In the first sample you can repair all the roads in two days, for example, if you repair roads 1 and 2 on the first day and road 3 \u2014 on the second day.",
    "topics": [
      "*special",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "638C"
  },
  {
    "title": "The Chocolate Spree",
    "url": "https://codeforces.com/problemset/problem/633/F",
    "history": "Alice and Bob have a tree ( undirected acyclic connected graph) . There are ai chocolates waiting to be picked up in the i- th vertex of the tree. First, they choose two different vertices as their starting positions ( Alice chooses first) and take all the chocolates contained in them. Then, they alternate their moves, selecting one vertex at a time and collecting all chocolates from this node. To make things more interesting, they decided that one can select a vertex only if he/ she selected a vertex adjacent to that one at his/ her previous turn and this vertex has not been already chosen by any of them during other move. If at any moment one of them is not able to select the node that satisfy all the rules, he/ she will skip his turns and let the other person pick chocolates as long as he/ she can. This goes on until both of them cannot pick chocolates any further. Due to their greed for chocolates, they want to collect as many chocolates as possible. However, as they are friends they only care about the total number of chocolates they obtain together. What is the maximum total number of chocolates they may pick?",
    "input": "The first line of the input contains the single integer n ( 2 \u2264 n \u2264 100 000) \u2014 the number of vertices in the tree. The second line contains n integers ai ( 1 \u2264 ai \u2264 109) , i- th of these numbers stands for the number of chocolates stored at the node i. Then follow n - 1 lines that describe the tree. Each of them contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n) \u2014 indices of vertices connected by the i- th edge.",
    "output": "Print the number of chocolates Alice and Bob can collect together if they behave optimally.",
    "note": "In the first sample, Alice may start at the vertex 9 and Bob at vertex 8. Alice will select vertex 1 and Bob has no options now. Alice selects the vertex 7 and they both stop. In the second sample, both of them will pick either of the nodes alternately.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "633F"
  },
  {
    "title": "Magic Matrix",
    "url": "https://codeforces.com/problemset/problem/632/F",
    "history": "You' re given a matrix A of size n \u00d7 n. Let' s call the matrix with nonnegative elements magic if it is symmetric ( so aij = aji) , aii = 0 and aij \u2264 max( aik, ajk) for all triples i, j, k. Note that i, j, k do not need to be distinct. Determine if the matrix is magic. As the input/ output can reach very huge size it is recommended to use fast input/ output methods: for example, prefer to use scanf/ printf instead of cin/ cout in C+ + , prefer to use BufferedReader/ PrintWriter instead of Scanner/ System. out in Java.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2500) \u2014 the size of the matrix A. Each of the next n lines contains n integers aij ( 0 \u2264 aij < 109) \u2014 the elements of the matrix A. Note that the given matrix not necessarily is symmetric and can be arbitrary.",
    "output": "Print \u201dMAGIC\" ( without quotes) if the given matrix A is magic. Otherwise print \u201dNOT MAGIC\" .",
    "note": "",
    "topics": [
      "brute force",
      "divide and conquer",
      "graphs",
      "matrices",
      "trees"
    ],
    "id": "632F"
  },
  {
    "title": "Bear and Fair Set",
    "url": "https://codeforces.com/problemset/problem/628/F",
    "history": "Limak is a grizzly bear. He is big and dreadful. You were chilling in the forest when you suddenly met him. It' s very unfortunate for you. He will eat all your cookies unless you can demonstrate your mathematical skills. To test you, Limak is going to give you a puzzle to solve. It' s a well- known fact that Limak, as every bear, owns a set of numbers. You know some information about the set: The elements of the set are distinct positive integers. The number of elements in the set is n. The number n is divisible by 5. All elements are between 1 and b, inclusive: bears don' t know numbers greater than b. For each r in 0, 1, 2, 3, 4, the set contains exactly elements that give remainder r when divided by 5. ( That is, there are elements divisible by 5, elements of the form 5k + 1, elements of the form 5k + 2, and so on. ) Limak smiles mysteriously and gives you q hints about his set. The i- th hint is the following sentence: \" If you only look at elements that are between 1 and upToi, inclusive, you will find exactly quantityi such elements in my set. \" In a moment Limak will tell you the actual puzzle, but something doesn' t seem right. . . That smile was very strange. You start to think about a possible reason. Maybe Limak cheated you? Or is he a fair grizzly bear? Given n, b, q and hints, check whether Limak can be fair, i. e. there exists at least one set satisfying the given conditions. If it' s possible then print \u201dfair\" . Otherwise, print \u201dunfair\" .",
    "input": "The first line contains three integers n, b and q ( 5 \u2264 n \u2264 b \u2264 104, 1 \u2264 q \u2264 104, n divisible by 5) \u2014 the size of the set, the upper limit for numbers in the set and the number of hints. The next q lines describe the hints. The i- th of them contains two integers upToi and quantityi ( 1 \u2264 upToi \u2264 b, 0 \u2264 quantityi \u2264 n) .",
    "output": "Print \u201dfair\" if there exists at least one set that has all the required properties and matches all the given hints. Otherwise, print \u201dunfair\" .",
    "note": "In the first example there is only one set satisfying all conditions: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. In the second example also there is only one set satisfying all conditions: 6, 7, 8, 9, 10, 11, 12, 13, 14, 15. Easy to see that there is no set satisfying all conditions from the third example. So Limak lied to you : - (",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "628F"
  },
  {
    "title": "Island Puzzle",
    "url": "https://codeforces.com/problemset/problem/627/F",
    "history": "A remote island chain contains n islands, with some bidirectional bridges between them. The current bridge network forms a tree. In other words, a total of n - 1 bridges connect pairs of islands in a way that it' s possible to reach any island from any other island using the bridge network. The center of each island contains an identical pedestal, and all but one of the islands has a fragile, uniquely colored statue currently held on the pedestal. The remaining island holds only an empty pedestal. The islanders want to rearrange the statues in a new order. To do this, they repeat the following process: first, they choose an island directly adjacent to the island containing an empty pedestal. Then, they painstakingly carry the statue on this island across the adjoining bridge and place it on the empty pedestal. It is often impossible to rearrange statues in the desired order using only the operation described above. The islanders would like to build one additional bridge in order to make this achievable in the fewest number of movements possible. Find the bridge to construct and the minimum number of statue movements necessary to arrange the statues in the desired position.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 200 000) \u2014 the total number of islands. The second line contains n space- separated integers ai ( 0 \u2264 ai \u2264 n - 1) \u2014 the statue currently located on the i- th island. If ai = 0, then the island has no statue. It is guaranteed that the ai are distinct. The third line contains n space- separated integers bi ( 0 \u2264 bi \u2264 n - 1) \u2014 the desired statues of the i- th island. Once again, bi = 0 indicates the island desires no statue. It is guaranteed that the bi are distinct. The next n - 1 lines each contain two distinct space- separated integers ui and vi ( 1 \u2264 ui, vi \u2264 n) \u2014 the endpoints of the i- th bridge. Bridges form a tree, and it is guaranteed that no bridge is listed twice in the input.",
    "output": "Print a single line of integers: If the rearrangement can be done in the existing network, output 0 t, where t is the number of moves necessary to perform the rearrangement. Otherwise, print u, v, and t ( 1 \u2264 u < v \u2264 n) \u2014 the two endpoints of the new bridge, and the minimum number of statue movements needed to perform the rearrangement. If the rearrangement cannot be done no matter how the new bridge is built, print a single line containing - 1.",
    "note": "In the first sample, the islanders can build a bridge connecting islands 1 and 3 and then make the following sequence of moves: first move statue 1 from island 1 to island 2, then move statue 2 from island 3 to island 1, and finally move statue 1 from island 2 to island 3 for a total of 3 moves. In the second sample, the islanders can simply move statue 1 from island 1 to island 2. No new bridges need to be built and only 1 move needs to be made. In the third sample, no added bridge and subsequent movements result in the desired position.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "627F"
  },
  {
    "title": "Preorder Test",
    "url": "https://codeforces.com/problemset/problem/627/D",
    "history": "For his computer science class, Jacob builds a model tree with sticks and balls containing n nodes in the shape of a tree. Jacob has spent ai minutes building the i- th ball in the tree. Jacob' s teacher will evaluate his model and grade Jacob based on the effort he has put in. However, she does not have enough time to search his whole tree to determine this; Jacob knows that she will examine the first k nodes in a DFS- order traversal of the tree. She will then assign Jacob a grade equal to the minimum ai she finds among those k nodes. Though Jacob does not have enough time to rebuild his model, he can choose the root node that his teacher starts from. Furthermore, he can rearrange the list of neighbors of each node in any order he likes. Help Jacob find the best grade he can get on this assignment. A DFS- order traversal is an ordering of the nodes of a rooted tree, built by a recursive DFS- procedure initially called on the root of the tree. When called on a given node v, the procedure does the following: Print v. Traverse the list of neighbors of the node v in order and iteratively call DFS- procedure on each one. Do not call DFS- procedure on node u if you came to node v directly from u.",
    "input": "The first line of the input contains two positive integers, n and k ( 2 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 n) \u2014 the number of balls in Jacob' s tree and the number of balls the teacher will inspect. The second line contains n integers, ai ( 1 \u2264 ai \u2264 1 000 000) , the time Jacob used to build the i- th ball. Each of the next n - 1 lines contains two integers ui, vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) representing a connection in Jacob' s tree between balls ui and vi.",
    "output": "Print a single integer \u2014 the maximum grade Jacob can get by picking the right root of the tree and rearranging the list of neighbors.",
    "note": "In the first sample, Jacob can root the tree at node 2 and order 2' s neighbors in the order 4, 1, 5 ( all other nodes have at most two neighbors) . The resulting preorder traversal is 2, 4, 1, 3, 5, and the minimum ai of the first 3 nodes is 3. In the second sample, it is clear that any preorder traversal will contain node 1 as either its first or second node, so Jacob cannot do better than a grade of 1.",
    "topics": [
      "binary search",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "627D"
  },
  {
    "title": "Graph and String",
    "url": "https://codeforces.com/problemset/problem/623/A",
    "history": "One day student Vasya was sitting on a lecture and mentioned a string s1s2. . . sn, consisting of letters \" a\" , \" b\" and \" c\" that was written on his desk. As the lecture was boring, Vasya decided to complete the picture by composing a graph G with the following properties: G has exactly n vertices, numbered from 1 to n. For all pairs of vertices i and j, where i = \u0338 j, there is an edge connecting them if and only if characters si and sj are either equal or neighbouring in the alphabet. That is, letters in pairs \" a\" - \" b\" and \" b\" - \" c\" are neighbouring, while letters \" a\" - \" c\" are not. Vasya painted the resulting graph near the string and then erased the string. Next day Vasya' s friend Petya came to a lecture and found some graph at his desk. He had heard of Vasya' s adventure and now he wants to find out whether it could be the original graph G, painted by Vasya. In order to verify this, Petya needs to know whether there exists a string s, such that if Vasya used this s he would produce the given graph G.",
    "input": "The first line of the input contains two integers n and m \u2014 the number of vertices and edges in the graph found by Petya, respectively. Each of the next m lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 the edges of the graph G. It is guaranteed, that there are no multiple edges, that is any pair of vertexes appear in this list no more than once.",
    "output": "In the first line print \" Yes\" ( without the quotes) , if the string s Petya is interested in really exists and \" No\" ( without the quotes) otherwise. If the string s exists, then print it on the second line of the output. The length of s must be exactly n, it must consist of only letters \" a\" , \" b\" and \" c\" only, and the graph built using this string must coincide with G. If there are multiple possible answers, you may print any of them.",
    "note": "In the first sample you are given a graph made of two vertices with an edge between them. So, these vertices can correspond to both the same and adjacent letters. Any of the following strings \" aa\" , \" ab\" , \" ba\" , \" bb\" , \" bc\" , \" cb\" , \" cc\" meets the graph' s conditions. In the second sample the first vertex is connected to all three other vertices, but these three vertices are not connected with each other. That means that they must correspond to distinct letters that are not adjacent, but that is impossible as there are only two such letters: a and c.",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "623A"
  },
  {
    "title": "Longtail Hedgehog",
    "url": "https://codeforces.com/problemset/problem/615/B",
    "history": "This Christmas Santa gave Masha a magic picture and a pencil. The picture consists of n points connected by m segments ( they might cross in any way, that doesn' t matter) . No two segments connect the same pair of points, and no segment connects the point to itself. Masha wants to color some segments in order paint a hedgehog. In Mashas mind every hedgehog consists of a tail and some spines. She wants to paint the tail that satisfies the following conditions: Only segments already presented on the picture can be painted; The tail should be continuous, i. e. consists of some sequence of points, such that every two neighbouring points are connected by a colored segment; The numbers of points from the beginning of the tail to the end should strictly increase. Masha defines the length of the tail as the number of points in it. Also, she wants to paint some spines. To do so, Masha will paint all the segments, such that one of their ends is the endpoint of the tail. Masha defines the beauty of a hedgehog as the length of the tail multiplied by the number of spines. Masha wants to color the most beautiful hedgehog. Help her calculate what result she may hope to get. Note that according to Masha' s definition of a hedgehog, one segment may simultaneously serve as a spine and a part of the tail ( she is a little girl after all) . Take a look at the picture for further clarifications.",
    "input": "First line of the input contains two integers n and m( 2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 200 000) \u2014 the number of points and the number segments on the picture respectively. Then follow m lines, each containing two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) \u2014 the numbers of points connected by corresponding segment. It' s guaranteed that no two segments connect the same pair of points.",
    "output": "Print the maximum possible value of the hedgehog' s beauty.",
    "note": "The picture below corresponds to the first sample. Segments that form the hedgehog are painted red. The tail consists of a sequence of points with numbers 1, 2 and 5. The following segments are spines: ( 2, 5) , ( 3, 5) and ( 4, 5) . Therefore, the beauty of the hedgehog is equal to 3\u00b73 = 9.",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "615B"
  },
  {
    "title": "Kingdom and its Cities",
    "url": "https://codeforces.com/problemset/problem/613/D",
    "history": "Meanwhile, the kingdom of K is getting ready for the marriage of the King' s daughter. However, in order not to lose face in front of the relatives, the King should first finish reforms in his kingdom. As the King can not wait for his daughter' s marriage, reforms must be finished as soon as possible. The kingdom currently consists of n cities. Cities are connected by n - 1 bidirectional road, such that one can get from any city to any other city. As the King had to save a lot, there is only one path between any two cities. What is the point of the reform? The key ministries of the state should be relocated to distinct cities ( we call such cities important) . However, due to the fact that there is a high risk of an attack by barbarians it must be done carefully. The King has made several plans, each of which is described by a set of important cities, and now wonders what is the best plan. Barbarians can capture some of the cities that are not important ( the important ones will have enough protection for sure) , after that the captured city becomes impassable. In particular, an interesting feature of the plan is the minimum number of cities that the barbarians need to capture in order to make all the important cities isolated, that is, from all important cities it would be impossible to reach any other important city. Help the King to calculate this characteristic for each of his plan.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 100 000) \u2014 the number of cities in the kingdom. Each of the next n - 1 lines contains two distinct integers ui, vi ( 1 \u2264 ui, vi \u2264 n) \u2014 the indices of the cities connected by the i- th road. It is guaranteed that you can get from any city to any other one moving only along the existing roads. The next line contains a single integer q ( 1 \u2264 q \u2264 100 000) \u2014 the number of King' s plans. Each of the next q lines looks as follows: first goes number ki \u2014 the number of important cities in the King' s plan, ( 1 \u2264 ki \u2264 n) , then follow exactly ki space- separated pairwise distinct numbers from 1 to n \u2014 the numbers of important cities in this plan. The sum of all ki' s does' t exceed 100 000.",
    "output": "For each plan print a single integer \u2014 the minimum number of cities that the barbarians need to capture, or print - 1 if all the barbarians' attempts to isolate important cities will not be effective.",
    "note": "In the first sample, in the first and the third King' s plan barbarians can capture the city 3, and that will be enough. In the second and the fourth plans all their attempts will not be effective. In the second sample the cities to capture are 3 and 5.",
    "topics": [
      "dfs and similar",
      "divide and conquer",
      "dp",
      "graphs",
      "sortings",
      "trees"
    ],
    "id": "613D"
  },
  {
    "title": "Square Root of Permutation",
    "url": "https://codeforces.com/problemset/problem/612/E",
    "history": "A permutation of length n is an array containing each integer from 1 to n exactly once. For example, q = [ 4, 5, 1, 2, 3] is a permutation. For the permutation q the square of permutation is the permutation p that p[ i] = q[ q[ i] ] for each i = 1. . . n. For example, the square of q = [ 4, 5, 1, 2, 3] is p = q2 = [ 2, 3, 4, 5, 1] . This problem is about the inverse operation: given the permutation p you task is to find such permutation q that q2 = p. If there are several such q find any of them.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 106) \u2014 the number of elements in permutation p. The second line contains n distinct integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 the elements of permutation p.",
    "output": "If there is no permutation q such that q2 = p print the number \" - 1\" . If the answer exists print it. The only line should contain n different integers qi ( 1 \u2264 qi \u2264 n) \u2014 the elements of the permutation q. If there are several solutions print any of them.",
    "note": "",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "math"
    ],
    "id": "612E"
  },
  {
    "title": "New Year  and Forgotten Tree",
    "url": "https://codeforces.com/problemset/problem/611/H",
    "history": "A tree is a connected undirected graph with n - 1 edges, where n denotes the number of vertices. Vertices are numbered 1 through n. Limak is a little polar bear. His bear family prepares a New Year tree every year. One year ago their tree was more awesome than usually. Thus, they decided to prepare the same tree in the next year. Limak was responsible for remembering that tree. It would be hard to remember a whole tree. Limak decided to describe it in his notebook instead. He took a pen and wrote n - 1 lines, each with two integers \u2014 indices of two vertices connected by an edge. Now, the New Year is just around the corner and Limak is asked to reconstruct that tree. Of course, there is a problem. He was a very little bear a year ago, and he didn' t know digits and the alphabet, so he just replaced each digit with a question mark \u2014 the only character he knew. That means, for any vertex index in his notes he knows only the number of digits in it. At least he knows there were no leading zeroes. Limak doesn' t want to disappoint everyone. Please, take his notes and reconstruct a New Year tree. Find any tree matching Limak' s records and print its edges in any order. It' s also possible that Limak made a mistake and there is no suitable tree \u2013 in this case print \" - 1\" ( without the quotes) .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 200 000) \u2014 the number of vertices. Each of the next n - 1 lines contains two space- separated non- empty strings, both consisting of questions marks only. No string has more characters than the number of digits in n.",
    "output": "If there is no tree matching Limak' s records, print the only line with \" - 1\" ( without the quotes) . Otherwise, describe any tree matching Limak' s notes. Print n - 1 lines, each with two space- separated integers \u2013 indices of vertices connected by an edge. You can print edges in any order.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "flows",
      "graphs"
    ],
    "id": "611H"
  },
  {
    "title": "Minimum spanning tree for each edge",
    "url": "https://codeforces.com/problemset/problem/609/E",
    "history": "Connected undirected weighted graph without self- loops and multiple edges is given. Graph contains n vertices and m edges. For each edge ( u, v) find the minimal possible weight of the spanning tree that contains the edge ( u, v) . The weight of the spanning tree is the sum of weights of all edges included in spanning tree.",
    "input": "First line contains two integers n and m ( 1 \u2264 n \u2264 2\u00b7105, n - 1 \u2264 m \u2264 2\u00b7105) \u2014 the number of vertices and edges in graph. Each of the next m lines contains three integers ui, vi, wi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi, 1 \u2264 wi \u2264 109) \u2014 the endpoints of the i- th edge and its weight.",
    "output": "Print m lines. i- th line should contain the minimal possible weight of the spanning tree that contains i- th edge. The edges are numbered from 1 to m in order of their appearing in input.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "609E"
  },
  {
    "title": "Lazy Student",
    "url": "https://codeforces.com/problemset/problem/605/B",
    "history": "Student Vladislav came to his programming exam completely unprepared as usual. He got a question about some strange algorithm on a graph \u2014 something that will definitely never be useful in real life. He asked a girl sitting next to him to lend him some cheat papers for this questions and found there the following definition: The minimum spanning tree T of graph G is such a tree that it contains all the vertices of the original graph G, and the sum of the weights of its edges is the minimum possible among all such trees. Vladislav drew a graph with n vertices and m edges containing no loops and multiple edges. He found one of its minimum spanning trees and then wrote for each edge its weight and whether it is included in the found tree or not. Unfortunately, the piece of paper where the graph was painted is gone and the teacher is getting very angry and demands to see the original graph. Help Vladislav come up with a graph so that the information about the minimum spanning tree remains correct.",
    "input": "The first line of the input contains two integers n and m ( ) \u2014 the number of vertices and the number of edges in the graph. Each of the next m lines describes an edge of the graph and consists of two integers aj and bj ( 1 \u2264 aj \u2264 109, bj = 0, 1) . The first of these numbers is the weight of the edge and the second number is equal to 1 if this edge was included in the minimum spanning tree found by Vladislav, or 0 if it was not. It is guaranteed that exactly n - 1 number bj are equal to one and exactly m - n + 1 of them are equal to zero.",
    "output": "If Vladislav has made a mistake and such graph doesn' t exist, print - 1. Otherwise print m lines. On the j- th line print a pair of vertices ( uj, vj) ( 1 \u2264 uj, vj \u2264 n, uj = \u0338 vj) , that should be connected by the j- th edge. The edges are numbered in the same order as in the input. The graph, determined by these edges, must be connected, contain no loops or multiple edges and its edges with bj = 1 must define the minimum spanning tree. In case there are multiple possible solutions, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs"
    ],
    "id": "605B"
  },
  {
    "title": "The Two Routes",
    "url": "https://codeforces.com/problemset/problem/601/A",
    "history": "In Absurdistan, there are n towns ( numbered 1 through n) and m bidirectional railways. There is also an absurdly simple road network \u2014 for each pair of different towns x and y, there is a bidirectional road between towns x and y if and only if there is no railway between them. Travelling to a different town using one railway or one road always takes exactly one hour. A train and a bus leave town 1 at the same time. They both have the same destination, town n, and don' t make any stops on the way ( but they can wait in town n) . The train can move only along railways and the bus can move only along roads. You' ve been asked to plan out routes for the vehicles; each route can use any road/ railway multiple times. One of the most important aspects to consider is safety \u2014 in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town ( except town n) simultaneously. Under these constraints, what is the minimum number of hours needed for both vehicles to reach town n ( the maximum of arrival times of the bus and the train) ? Note, that bus and train are not required to arrive to the town n at the same moment of time, but are allowed to do so.",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 400, 0 \u2264 m \u2264 n( n - 1) / 2) \u2014 the number of towns and the number of railways respectively. Each of the next m lines contains two integers u and v, denoting a railway between towns u and v ( 1 \u2264 u, v \u2264 n, u = \u0338 v) . You may assume that there is at most one railway connecting any two towns.",
    "output": "Output one integer \u2014 the smallest possible time of the later vehicle' s arrival in town n. If it' s impossible for at least one of the vehicles to reach town n, output - 1.",
    "note": "In the first sample, the train can take the route and the bus can take the route . Note that they can arrive at town 4 at the same time. In the second sample, Absurdistan is ruled by railwaymen. There are no roads, so there' s no way for the bus to reach town 4.",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "601A"
  },
  {
    "title": "Edge coloring of bipartite graph",
    "url": "https://codeforces.com/problemset/problem/600/F",
    "history": "You are given an undirected bipartite graph without multiple edges. You should paint the edges of graph to minimal number of colours, so that no two adjacent edges have the same colour.",
    "input": "The first line contains three integers a, b, m ( 1 \u2264 a, b \u2264 1000, 0 \u2264 m \u2264 105) , a is the size of the first part, b is the size of the second part, m is the number of edges in the graph. Each of the next m lines contains two integers x, y ( 1 \u2264 x \u2264 a, 1 \u2264 y \u2264 b) , where x is the number of the vertex in the first part and y is the number of the vertex in the second part. It is guaranteed that there are no multiple edges.",
    "output": "In the first line print integer c \u2014 the minimal number of colours. The second line should contain m integers from 1 to c \u2014 the colours of the edges ( in the order they appear in the input) . If there are several solutions, you can print any one of them.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "600F"
  },
  {
    "title": "Igor In the Museum",
    "url": "https://codeforces.com/problemset/problem/598/D",
    "history": "Igor is in the museum and he wants to see as many pictures as possible. Museum can be represented as a rectangular field of n \u00d7 m cells. Each cell is either empty or impassable. Empty cells are marked with ' . ' , impassable cells are marked with ' * ' . Every two adjacent cells of different types ( one empty and one impassable) are divided by a wall containing one picture. At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one. For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.",
    "input": "First line of the input contains three integers n, m and k ( 3 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 min( n\u00b7m, 100 000) ) \u2014 the museum dimensions and the number of starting positions to process. Each of the next n lines contains m symbols ' . ' , ' * ' \u2014 the description of the museum. It is guaranteed that all border cells are impassable, so Igor can' t go out from the museum. Each of the last k lines contains two integers x and y ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) \u2014 the row and the column of one of Igor' s starting positions respectively. Rows are numbered from top to bottom, columns \u2014 from left to right. It is guaranteed that all starting positions are empty cells.",
    "output": "Print k integers \u2014 the maximum number of pictures, that Igor can see if he starts in corresponding position.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "598D"
  },
  {
    "title": "Wilbur and Strings",
    "url": "https://codeforces.com/problemset/problem/596/E",
    "history": "Wilbur the pig now wants to play with strings. He has found an n by m table consisting only of the digits from 0 to 9 where the rows are numbered 1 to n and the columns are numbered 1 to m. Wilbur starts at some square and makes certain moves. If he is at square ( x, y) and the digit d ( 0 \u2264 d \u2264 9) is written at position ( x, y) , then he must move to the square ( x + ad, y + bd) , if that square lies within the table, and he stays in the square ( x, y) otherwise. Before Wilbur makes a move, he can choose whether or not to write the digit written in this square on the white board. All digits written on the whiteboard form some string. Every time a new digit is written, it goes to the end of the current string. Wilbur has q strings that he is worried about. For each string si, Wilbur wants to know whether there exists a starting position ( x, y) so that by making finitely many moves, Wilbur can end up with the string si written on the white board.",
    "input": "The first line of the input consists of three integers n, m, and q ( 1 \u2264 n, m, q \u2264 200) \u2014 the dimensions of the table and the number of strings to process, respectively. Each of the next n lines contains m digits from 0 and 9 giving the table itself. Then follow 10 lines. The i- th of them contains the values ai - 1 and bi - 1 ( - 200 \u2264 ai, bi \u2264 200) , i. e. the vector that Wilbur uses to make a move from the square with a digit i - 1 in it. There are q lines that follow. The i- th of them will contain a string si consisting only of digits from 0 to 9. It is guaranteed that the total length of these q strings won' t exceed 1 000 000.",
    "output": "For each of the q strings, print \" YES\" if Wilbur can choose x and y in order to finish with this string after some finite number of moves. If it' s impossible, than print \" NO\" for the corresponding string.",
    "note": "In the first sample, there is a 1 by 1 table consisting of the only digit 0. The only move that can be made is staying on the square. The first string can be written on the white board by writing 0 repeatedly. The second string cannot be written as there is no 2 on the table.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "strings"
    ],
    "id": "596E"
  },
  {
    "title": "Happy Tree Party",
    "url": "https://codeforces.com/problemset/problem/593/D",
    "history": "Bogdan has a birthday today and mom gave him a tree consisting of n vertecies. For every edge of the tree i, some number xi was written on it. In case you forget, a tree is a connected non- directed graph without cycles. After the present was granted, m guests consecutively come to Bogdan' s party. When the i- th guest comes, he performs exactly one of the two possible operations: Chooses some number yi, and two vertecies ai and bi. After that, he moves along the edges of the tree from vertex ai to vertex bi using the shortest path ( of course, such a path is unique in the tree) . Every time he moves along some edge j, he replaces his current number yi by , that is, by the result of integer division yi div xj. Chooses some edge pi and replaces the value written in it xpi by some positive integer ci < xpi. As Bogdan cares about his guests, he decided to ease the process. Write a program that performs all the operations requested by guests and outputs the resulting value yi for each i of the first type.",
    "input": "The first line of the input contains integers, n and m ( 2 \u2264 n \u2264 200 000, 1 \u2264 m \u2264 200 000) \u2014 the number of vertecies in the tree granted to Bogdan by his mom and the number of guests that came to the party respectively. Next n - 1 lines contain the description of the edges. The i- th of these lines contains three integers ui, vi and xi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi, 1 \u2264 xi \u2264 1018) , denoting an edge that connects vertecies ui and vi, with the number xi initially written on it. The following m lines describe operations, requested by Bogdan' s guests. Each description contains three or four integers and has one of the two possible forms: 1 ai bi yi corresponds to a guest, who chooses the operation of the first type. 2 pi ci corresponds to a guests, who chooses the operation of the second type. It is guaranteed that all the queries are correct, namely 1 \u2264 ai, bi \u2264 n, 1 \u2264 pi \u2264 n - 1, 1 \u2264 yi \u2264 1018 and 1 \u2264 ci < xpi, where xpi represents a number written on edge pi at this particular moment of time that is not necessarily equal to the initial value xpi, as some decreases may have already been applied to it. The edges are numbered from 1 to n - 1 in the order they appear in the input.",
    "output": "For each guest who chooses the operation of the first type, print the result of processing the value yi through the path from ai to bi.",
    "note": "Initially the tree looks like this: The response to the first query is: = 2After the third edge is changed, the tree looks like this: The response to the second query is: = 4In the third query the initial and final vertex coincide, that is, the answer will be the initial number 20. After the change in the fourth edge the tree looks like this: In the last query the answer will be: = 3",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "math",
      "trees"
    ],
    "id": "593D"
  },
  {
    "title": "Super M",
    "url": "https://codeforces.com/problemset/problem/592/D",
    "history": "Ari the monster is not an ordinary monster. She is the hidden identity of Super M, the Byteforces\u2019 superhero. Byteforces is a country that consists of n cities, connected by n - 1 bidirectional roads. Every road connects exactly two distinct cities, and the whole road system is designed in a way that one is able to go from any city to any other city using only the given roads. There are m cities being attacked by humans. So Ari. . . we meant Super M have to immediately go to each of the cities being attacked to scare those bad humans. Super M can pass from one city to another only using the given roads. Moreover, passing through one road takes her exactly one kron - the time unit used in Byteforces. However, Super M is not on Byteforces now - she is attending a training camp located in a nearby country Codeforces. Fortunately, there is a special device in Codeforces that allows her to instantly teleport from Codeforces to any city of Byteforces. The way back is too long, so for the purpose of this problem teleportation is used exactly once. You are to help Super M, by calculating the city in which she should teleport at the beginning in order to end her job in the minimum time ( measured in krons) . Also, provide her with this time so she can plan her way back to Codeforces.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 123456) - the number of cities in Byteforces, and the number of cities being attacked respectively. Then follow n - 1 lines, describing the road system. Each line contains two city numbers ui and vi ( 1 \u2264 ui, vi \u2264 n) - the ends of the road i. The last line contains m distinct integers - numbers of cities being attacked. These numbers are given in no particular order.",
    "output": "First print the number of the city Super M should teleport to. If there are many possible optimal answers, print the one with the lowest city number. Then print the minimum possible time needed to scare all humans in cities being attacked, measured in Krons. Note that the correct answer is always unique.",
    "note": "In the first sample, there are two possibilities to finish the Super M' s job in 3 krons. They are: and . However, you should choose the first one as it starts in the city with the lower number.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "592D"
  },
  {
    "title": "Three States",
    "url": "https://codeforces.com/problemset/problem/590/C",
    "history": "The famous global economic crisis is approaching rapidly, so the states of Berman, Berance and Bertaly formed an alliance and allowed the residents of all member states to freely pass through the territory of any of them. In addition, it was decided that a road between the states should be built to guarantee so that one could any point of any country can be reached from any point of any other State. Since roads are always expensive, the governments of the states of the newly formed alliance asked you to help them assess the costs. To do this, you have been issued a map that can be represented as a rectangle table consisting of n rows and m columns. Any cell of the map either belongs to one of three states, or is an area where it is allowed to build a road, or is an area where the construction of the road is not allowed. A cell is called passable, if it belongs to one of the states, or the road was built in this cell. From any passable cells you can move up, down, right and left, if the cell that corresponds to the movement exists and is passable. Your task is to construct a road inside a minimum number of cells, so that it would be possible to get from any cell of any state to any cell of any other state using only passable cells. It is guaranteed that initially it is possible to reach any cell of any state from any cell of this state, moving only along its cells. It is also guaranteed that for any state there is at least one cell that belongs to it.",
    "input": "The first line of the input contains the dimensions of the map n and m ( 1 \u2264 n, m \u2264 1000) \u2014 the number of rows and columns respectively. Each of the next n lines contain m characters, describing the rows of the map. Digits from 1 to 3 represent the accessory to the corresponding state. The character ' . ' corresponds to the cell where it is allowed to build a road and the character ' # ' means no construction is allowed in this cell.",
    "output": "Print a single integer \u2014 the minimum number of cells you need to build a road inside in order to connect all the cells of all states. If such a goal is unachievable, print - 1.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "590C"
  },
  {
    "title": "Phillip and Trains",
    "url": "https://codeforces.com/problemset/problem/585/B",
    "history": "The mobile application store has a new game called \" Subway Roller\" . The protagonist of the game Philip is located in one end of the tunnel and wants to get out of the other one. The tunnel is a rectangular field consisting of three rows and n columns. At the beginning of the game the hero is in some cell of the leftmost column. Some number of trains rides towards the hero. Each train consists of two or more neighbouring cells in some row of the field. All trains are moving from right to left at a speed of two cells per second, and the hero runs from left to right at the speed of one cell per second. For simplicity, the game is implemented so that the hero and the trains move in turns. First, the hero moves one cell to the right, then one square up or down, or stays idle. Then all the trains move twice simultaneously one cell to the left. Thus, in one move, Philip definitely makes a move to the right and can move up or down. If at any point, Philip is in the same cell with a train, he loses. If the train reaches the left column, it continues to move as before, leaving the tunnel. Your task is to answer the question whether there is a sequence of movements of Philip, such that he would be able to get to the rightmost column.",
    "input": "Each test contains from one to ten sets of the input data. The first line of the test contains a single integer t ( 1 \u2264 t \u2264 10 for pretests and tests or t = 1 for hacks; see the Notes section for details) \u2014 the number of sets. Then follows the description of t sets of the input data. The first line of the description of each set contains two integers n, k ( 2 \u2264 n \u2264 100, 1 \u2264 k \u2264 26) \u2014 the number of columns on the field and the number of trains. Each of the following three lines contains the sequence of n character, representing the row of the field where the game is on. Philip' s initial position is marked as ' s' , he is in the leftmost column. Each of the k trains is marked by some sequence of identical uppercase letters of the English alphabet, located in one line. Distinct trains are represented by distinct letters. Character ' . ' represents an empty cell, that is, the cell that doesn' t contain either Philip or the trains.",
    "output": "For each set of the input data print on a single line word YES, if it is possible to win the game and word NO otherwise.",
    "note": "In the first set of the input of the first sample Philip must first go forward and go down to the third row of the field, then go only forward, then go forward and climb to the second row, go forward again and go up to the first row. After that way no train blocks Philip' s path, so he can go straight to the end of the tunnel. Note that in this problem the challenges are restricted to tests that contain only one testset.",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "585B"
  },
  {
    "title": "Kefa and Park",
    "url": "https://codeforces.com/problemset/problem/580/C",
    "history": "Kefa decided to celebrate his first big salary by going to the restaurant. He lives by an unusual park. The park is a rooted tree consisting of n vertices with the root at vertex 1. Vertex 1 also contains Kefa' s house. Unfortunaely for our hero, the park also contains cats. Kefa has already found out what are the vertices with cats in them. The leaf vertices of the park contain restaurants. Kefa wants to choose a restaurant where he will go, but unfortunately he is very afraid of cats, so there is no way he will go to the restaurant if the path from the restaurant to his house contains more than m consecutive vertices with cats. Your task is to help Kefa count the number of restaurants where he can go.",
    "input": "The first line contains two integers, n and m ( 2 \u2264 n \u2264 105, 1 \u2264 m \u2264 n) \u2014 the number of vertices of the tree and the maximum number of consecutive vertices with cats that is still ok for Kefa. The second line contains n integers a1, a2, . . . , an, where each ai either equals to 0 ( then vertex i has no cat) , or equals to 1 ( then vertex i has a cat) . Next n - 1 lines contains the edges of the tree in the format \" xi yi\" ( without the quotes) ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) , where xi and yi are the vertices of the tree, connected by an edge. It is guaranteed that the given set of edges specifies a tree.",
    "output": "A single integer \u2014 the number of distinct leaves of a tree the path to which from Kefa' s home contains at most m consecutive vertices with cats.",
    "note": "Let us remind you that a tree is a connected graph on n vertices and n - 1 edge. A rooted tree is a tree with a special vertex called root. In a rooted tree among any two vertices connected by an edge, one vertex is a parent ( the one closer to the root) , and the other one is a child. A vertex is called a leaf, if it has no children. Note to the first sample test: The vertices containing cats are marked red. The restaurants are at vertices 2, 3, 4. Kefa can' t go only to the restaurant located at vertex 2. Note to the second sample test: The restaurants are located at vertices 4, 5, 6, 7. Kefa can' t go to restaurants 6, 7.",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "580C"
  },
  {
    "title": "Bribes",
    "url": "https://codeforces.com/problemset/problem/575/B",
    "history": "Ruritania is a country with a very badly maintained road network, which is not exactly good news for lorry drivers that constantly have to do deliveries. In fact, when roads are maintained, they become one- way. It turns out that it is sometimes impossible to get from one town to another in a legal way \u2013 however, we know that all towns are reachable, though illegally! Fortunately for us, the police tend to be very corrupt and they will allow a lorry driver to break the rules and drive in the wrong direction provided they receive \u2018a small gift\u2019. There is one patrol car for every road and they will request 1000 Ruritanian dinars when a driver drives in the wrong direction. However, being greedy, every time a patrol car notices the same driver breaking the rule, they will charge double the amount of money they requested the previous time on that particular road. Borna is a lorry driver that managed to figure out this bribing pattern. As part of his job, he has to make K stops in some towns all over Ruritania and he has to make these stops in a certain order. There are N towns ( enumerated from 1 to N) in Ruritania and Borna\u2019s initial location is the capital city i. e. town 1. He happens to know which ones out of the N - 1 roads in Ruritania are currently unidirectional, but he is unable to compute the least amount of money he needs to prepare for bribing the police. Help Borna by providing him with an answer and you will be richly rewarded.",
    "input": "The first line contains N, the number of towns in Ruritania. The following N - 1 lines contain information regarding individual roads between towns. A road is represented by a tuple of integers ( a, b, x) , which are separated with a single whitespace character. The numbers a and b represent the cities connected by this particular road, and x is either 0 or 1: 0 means that the road is bidirectional, 1 means that only the a \u2192 b direction is legal. The next line contains K, the number of stops Borna has to make. The final line of input contains K positive integers s1, . . . , sK: the towns Borna has to visit. 1 \u2264 N \u2264 105 1 \u2264 K \u2264 106 1 \u2264 a, b \u2264 N for all roads for all roads 1 \u2264 si \u2264 N for all 1 \u2264 i \u2264 K",
    "output": "The output should contain a single number: the least amount of thousands of Ruritanian dinars Borna should allocate for bribes, modulo 109 + 7.",
    "note": "Borna first takes the route 1 \u2192 5 and has to pay 1000 dinars. After that, he takes the route 5 \u2192 1 \u2192 2 \u2192 3 \u2192 4 and pays nothing this time. However, when he has to return via 4 \u2192 3 \u2192 2 \u2192 1 \u2192 5, he needs to prepare 3000 ( 1000+ 2000) dinars. Afterwards, getting to 2 via 5 \u2192 1 \u2192 2 will cost him nothing. Finally, he doesn' t even have to leave town 2 to get to 2, so there is no need to prepare any additional bribe money. Hence he has to prepare 4000 dinars in total.",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "575B"
  },
  {
    "title": "Bear and Three Musketeers",
    "url": "https://codeforces.com/problemset/problem/574/B",
    "history": "Do you know a story about the three musketeers? Anyway, you will learn about its origins now. Richelimakieu is a cardinal in the city of Bearis. He is tired of dealing with crime by himself. He needs three brave warriors to help him to fight against bad guys. There are n warriors. Richelimakieu wants to choose three of them to become musketeers but it' s not that easy. The most important condition is that musketeers must know each other to cooperate efficiently. And they shouldn' t be too well known because they could be betrayed by old friends. For each musketeer his recognition is the number of warriors he knows, excluding other two musketeers. Help Richelimakieu! Find if it is possible to choose three musketeers knowing each other, and what is minimum possible sum of their recognitions.",
    "input": "The first line contains two space- separated integers, n and m ( 3 \u2264 n \u2264 4000, 0 \u2264 m \u2264 4000) \u2014 respectively number of warriors and number of pairs of warriors knowing each other. i- th of the following m lines contains two space- separated integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . Warriors ai and bi know each other. Each pair of warriors will be listed at most once.",
    "output": "If Richelimakieu can choose three musketeers, print the minimum possible sum of their recognitions. Otherwise, print \" - 1\" ( without the quotes) .",
    "note": "In the first sample Richelimakieu should choose a triple 1, 2, 3. The first musketeer doesn' t know anyone except other two musketeers so his recognition is 0. The second musketeer has recognition 1 because he knows warrior number 4. The third musketeer also has recognition 1 because he knows warrior 4. Sum of recognitions is 0 + 1 + 1 = 2. The other possible triple is 2, 3, 4 but it has greater sum of recognitions, equal to 1 + 1 + 1 = 3. In the second sample there is no triple of warriors knowing each other.",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "hashing"
    ],
    "id": "574B"
  },
  {
    "title": "CNF 2",
    "url": "https://codeforces.com/problemset/problem/571/C",
    "history": "' In Boolean logic, a formula is in conjunctive normal form ( CNF) or clausal normal form if it is a conjunction of clauses, where a clause is a disjunction of literals' ( cited from https: / / en. wikipedia. org/ wiki/ Conjunctive_ normal_ form) In the other words, CNF is a formula of type , where represents a logical \" AND\" ( conjunction) , represents a logical \" OR\" ( disjunction) , and vij are some boolean variables or their negations. Each statement in brackets is called a clause, and vij are called literals. You are given a CNF containing variables x1, . . . , xm and their negations. We know that each variable occurs in at most two clauses ( with negation and without negation in total) . Your task is to determine whether this CNF is satisfiable, that is, whether there are such values of variables where the CNF value is true. If CNF is satisfiable, then you also need to determine the values of the variables at which the CNF is true. It is guaranteed that each variable occurs at most once in each clause.",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of clauses and the number variables, correspondingly. Next n lines contain the descriptions of each clause. The i- th line first contains first number ki ( ki \u2265 1) \u2014 the number of literals in the i- th clauses. Then follow space- separated literals vij ( 1 \u2264 | vij| \u2264 m) . A literal that corresponds to vij is x| vij| either with negation, if vij is negative, or without negation otherwise.",
    "output": "If CNF is not satisfiable, print a single line \" NO\" ( without the quotes) , otherwise print two strings: string \" YES\" ( without the quotes) , and then a string of m numbers zero or one \u2014 the values of variables in satisfying assignment in the order from x1 to xm.",
    "note": "In the first sample test formula is . One of possible answer is x1 = TRUE, x2 = TRUE.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "571C"
  },
  {
    "title": "Tree Requests",
    "url": "https://codeforces.com/problemset/problem/570/D",
    "history": "Roman planted a tree consisting of n vertices. Each vertex contains a lowercase English letter. Vertex 1 is the root of the tree, each of the n - 1 remaining vertices has a parent in the tree. Vertex is connected with its parent by an edge. The parent of vertex i is vertex pi, the parent index is always less than the index of the vertex ( i. e. , pi < i) . The depth of the vertex is the number of nodes on the path from the root to v along the edges. In particular, the depth of the root is equal to 1. We say that vertex u is in the subtree of vertex v, if we can get from u to v, moving from the vertex to the parent. In particular, vertex v is in its subtree. Roma gives you m queries, the i- th of which consists of two numbers vi, hi. Let' s consider the vertices in the subtree vi located at depth hi. Determine whether you can use the letters written at these vertices to make a string that is a palindrome. The letters that are written in the vertexes, can be rearranged in any order to make a palindrome, but all letters should be used.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 500 000) \u2014 the number of nodes in the tree and queries, respectively. The following line contains n - 1 integers p2, p3, . . . , pn \u2014 the parents of vertices from the second to the n- th ( 1 \u2264 pi < i) . The next line contains n lowercase English letters, the i- th of these letters is written on vertex i. Next m lines describe the queries, the i- th line contains two numbers vi, hi ( 1 \u2264 vi, hi \u2264 n) \u2014 the vertex and the depth that appear in the i- th query.",
    "output": "Print m lines. In the i- th line print \" Yes\" ( without the quotes) , if in the i- th query you can make a palindrome from the letters written on the vertices, otherwise print \" No\" ( without the quotes) .",
    "note": "String s is a palindrome if reads the same from left to right and from right to left. In particular, an empty string is a palindrome. Clarification for the sample test. In the first query there exists only a vertex 1 satisfying all the conditions, we can form a palindrome \" z\" . In the second query vertices 5 and 6 satisfy condititions, they contain letters \" \u0441\" and \" d\" respectively. It is impossible to form a palindrome of them. In the third query there exist no vertices at depth 1 and in subtree of 4. We may form an empty palindrome. In the fourth query there exist no vertices in subtree of 6 at depth 1. We may form an empty palindrome. In the fifth query there vertices 2, 3 and 4 satisfying all conditions above, they contain letters \" a\" , \" c\" and \" c\" . We may form a palindrome \" cac\" .",
    "topics": [
      "binary search",
      "bitmasks",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "570D"
  },
  {
    "title": "President and Roads",
    "url": "https://codeforces.com/problemset/problem/567/E",
    "history": "Berland has n cities, the capital is located in city s, and the historic home town of the President is in city t ( s = \u0338 t) . The cities are connected by one- way roads, the travel time for each of the road is a positive integer. Once a year the President visited his historic home town t, for which his motorcade passes along some path from s to t ( he always returns on a personal plane) . Since the president is a very busy man, he always chooses the path from s to t, along which he will travel the fastest. The ministry of Roads and Railways wants to learn for each of the road: whether the President will definitely pass through it during his travels, and if not, whether it is possible to repair it so that it would definitely be included in the shortest path from the capital to the historic home town of the President. Obviously, the road can not be repaired so that the travel time on it was less than one. The ministry of Berland, like any other, is interested in maintaining the budget, so it wants to know the minimum cost of repairing the road. Also, it is very fond of accuracy, so it repairs the roads so that the travel time on them is always a positive integer.",
    "input": "The first lines contain four integers n, m, s and t ( 2 \u2264 n \u2264 105; 1 \u2264 m \u2264 105; 1 \u2264 s, t \u2264 n) \u2014 the number of cities and roads in Berland, the numbers of the capital and of the Presidents' home town ( s = \u0338 t) . Next m lines contain the roads. Each road is given as a group of three integers ai, bi, li ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi; 1 \u2264 li \u2264 106) \u2014 the cities that are connected by the i- th road and the time needed to ride along it. The road is directed from city ai to city bi. The cities are numbered from 1 to n. Each pair of cities can have multiple roads between them. It is guaranteed that there is a path from s to t along the roads.",
    "output": "Print m lines. The i- th line should contain information about the i- th road ( the roads are numbered in the order of appearance in the input) . If the president will definitely ride along it during his travels, the line must contain a single word \" YES\" ( without the quotes) . Otherwise, if the i- th road can be repaired so that the travel time on it remains positive and then president will definitely ride along it, print space- separated word \" CAN\" ( without the quotes) , and the minimum cost of repairing. If we can' t make the road be such that president will definitely ride along it, print \" NO\" ( without the quotes) .",
    "note": "The cost of repairing the road is the difference between the time needed to ride along it before and after the repairing. In the first sample president initially may choose one of the two following ways for a ride: 1 \u2192 2 \u2192 4 \u2192 5 \u2192 6 or 1 \u2192 2 \u2192 3 \u2192 5 \u2192 6.",
    "topics": [
      "dfs and similar",
      "graphs",
      "hashing",
      "shortest paths"
    ],
    "id": "567E"
  },
  {
    "title": "Amr and Chemistry",
    "url": "https://codeforces.com/problemset/problem/558/C",
    "history": "Amr loves Chemistry, and specially doing experiments. He is preparing for a new interesting experiment. Amr has n different types of chemicals. Each chemical i has an initial volume of ai liters. For this experiment, Amr has to mix all the chemicals together, but all the chemicals volumes must be equal first. So his task is to make all the chemicals volumes equal. To do this, Amr can do two different kind of operations. Choose some chemical i and double its current volume so the new volume will be 2ai Choose some chemical i and divide its volume by two ( integer division) so the new volume will be Suppose that each chemical is contained in a vessel of infinite volume. Now Amr wonders what is the minimum number of operations required to make all the chemicals volumes equal?",
    "input": "The first line contains one number n ( 1 \u2264 n \u2264 105) , the number of chemicals. The second line contains n space separated integers ai ( 1 \u2264 ai \u2264 105) , representing the initial volume of the i- th chemical in liters.",
    "output": "Output one integer the minimum number of operations required to make all the chemicals volumes equal.",
    "note": "In the first sample test, the optimal solution is to divide the second chemical volume by two, and multiply the third chemical volume by two to make all the volumes equal 4. In the second sample test, the optimal solution is to divide the first chemical volume by two, and divide the second and the third chemical volumes by two twice to make all the volumes equal 1.",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "math",
      "shortest paths"
    ],
    "id": "558C"
  },
  {
    "title": "Ann and Half-Palindrome",
    "url": "https://codeforces.com/problemset/problem/557/E",
    "history": "Tomorrow Ann takes the hardest exam of programming where she should get an excellent mark. On the last theoretical class the teacher introduced the notion of a half- palindrome. String t is a half- palindrome, if for all the odd positions i ( ) the following condition is held: ti = t| t| - i + 1, where | t| is the length of string t if positions are indexed from 1. For example, strings \" abaa\" , \" a\" , \" bb\" , \" abbbaa\" are half- palindromes and strings \" ab\" , \" bba\" and \" aaabaa\" are not. Ann knows that on the exam she will get string s, consisting only of letters a and b, and number k. To get an excellent mark she has to find the k- th in the lexicographical order string among all substrings of s that are half- palyndromes. Note that each substring in this order is considered as many times as many times it occurs in s. The teachers guarantees that the given number k doesn' t exceed the number of substrings of the given string that are half- palindromes. Can you cope with this problem?",
    "input": "The first line of the input contains string s ( 1 \u2264 | s| \u2264 5000) , consisting only of characters ' a' and ' b' , where | s| is the length of string s. The second line contains a positive integer k \u2014 the lexicographical number of the requested string among all the half- palindrome substrings of the given string s. The strings are numbered starting from one. It is guaranteed that number k doesn' t exceed the number of substrings of the given string that are half- palindromes.",
    "output": "Print a substring of the given string that is the k- th in the lexicographical order of all substrings of the given string that are half- palindromes.",
    "note": "By definition, string a = a1a2. . . an is lexicographically less than string b = b1b2. . . bm, if either a is a prefix of b and doesn' t coincide with b, or there exists such i, that a1 = b1, a2 = b2, . . . ai - 1 = bi - 1, ai < bi. In the first sample half- palindrome substrings are the following strings \u2014 a, a, a, a, aa, aba, abaa, abba, abbabaa, b, b, b, b, baab, bab, bb, bbab, bbabaab ( the list is given in the lexicographical order) .",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "string suffix structures",
      "strings",
      "trees"
    ],
    "id": "557E"
  },
  {
    "title": "Vitaly and Cycle",
    "url": "https://codeforces.com/problemset/problem/557/D",
    "history": "After Vitaly was expelled from the university, he became interested in the graph theory. Vitaly especially liked the cycles of an odd length in which each vertex occurs at most once. Vitaly was wondering how to solve the following problem. You are given an undirected graph consisting of n vertices and m edges, not necessarily connected, without parallel edges and loops. You need to find t \u2014 the minimum number of edges that must be added to the given graph in order to form a simple cycle of an odd length, consisting of more than one vertex. Moreover, he must find w \u2014 the number of ways to add t edges in order to form a cycle of an odd length ( consisting of more than one vertex) . It is prohibited to add loops or parallel edges. Two ways to add edges to the graph are considered equal if they have the same sets of added edges. Since Vitaly does not study at the university, he asked you to help him with this task.",
    "input": "The first line of the input contains two integers n and m ( \u2014 the number of vertices in the graph and the number of edges in the graph. Next m lines contain the descriptions of the edges of the graph, one edge per line. Each edge is given by a pair of integers ai, bi ( 1 \u2264 ai, bi \u2264 n) \u2014 the vertices that are connected by the i- th edge. All numbers in the lines are separated by a single space. It is guaranteed that the given graph doesn' t contain any loops and parallel edges. The graph isn' t necessarily connected.",
    "output": "Print in the first line of the output two space- separated integers t and w \u2014 the minimum number of edges that should be added to the graph to form a simple cycle of an odd length consisting of more than one vertex where each vertex occurs at most once, and the number of ways to do this.",
    "note": "The simple cycle is a cycle that doesn' t contain any vertex twice.",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "graphs",
      "math"
    ],
    "id": "557D"
  },
  {
    "title": "Case of Computer Network",
    "url": "https://codeforces.com/problemset/problem/555/E",
    "history": "Andrewid the Android is a galaxy- known detective. Now he is preparing a defense against a possible attack by hackers on a major computer network. In this network are n vertices, some pairs of vertices are connected by m undirected channels. It is planned to transfer q important messages via this network, the i- th of which must be sent from vertex si to vertex di via one or more channels, perhaps through some intermediate vertices. To protect against attacks a special algorithm was developed. Unfortunately it can be applied only to the network containing directed channels. Therefore, as new channels can' t be created, it was decided for each of the existing undirected channels to enable them to transmit data only in one of the two directions. Your task is to determine whether it is possible so to choose the direction for each channel so that each of the q messages could be successfully transmitted.",
    "input": "The first line contains three integers n, m and q ( 1 \u2264 n, m, q \u2264 2\u00b7105) \u2014 the number of nodes, channels and important messages. Next m lines contain two integers each, vi and ui ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui) , that means that between nodes vi and ui is a channel. Between a pair of nodes can exist more than one channel. Next q lines contain two integers si and di ( 1 \u2264 si, di \u2264 n, si = \u0338 di) \u2014 the numbers of the nodes of the source and destination of the corresponding message. It is not guaranteed that in it initially possible to transmit all the messages.",
    "output": "If a solution exists, print on a single line \" Yes\" ( without the quotes) . Otherwise, print \" No\" ( without the quotes) .",
    "note": "In the first sample test you can assign directions, for example, as follows: 1 \u2192 2, 1 \u2192 3, 3 \u2192 2, 4 \u2192 3. Then the path for for the first message will be 1 \u2192 3, and for the second one \u2014 4 \u2192 3 \u2192 2. In the third sample test you can assign directions, for example, as follows: 1 \u2192 2, 2 \u2192 1, 2 \u2192 3. Then the path for the first message will be 1 \u2192 2 \u2192 3, and for the second one \u2014 2 \u2192 1.",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "555E"
  },
  {
    "title": "Kyoya and Train",
    "url": "https://codeforces.com/problemset/problem/553/E",
    "history": "Kyoya Ootori wants to take the train to get to school. There are n train stations and m one- way train lines going between various stations. Kyoya is currently at train station 1, and the school is at station n. To take a train, he must pay for a ticket, and the train also takes a certain amount of time. However, the trains are not perfect and take random amounts of time to arrive at their destination. If Kyoya arrives at school strictly after t time units, he will have to pay a fine of x. Each train line is described by a ticket price, and a probability distribution on the time the train takes. More formally, train line i has ticket cost ci, and a probability distribution pi, k which denotes the probability that this train will take k time units for all 1 \u2264 k \u2264 t. Amounts of time that each of the trains used by Kyouya takes are mutually independent random values ( moreover, if Kyoya travels along the same train more than once, it is possible for the train to take different amounts of time and those amounts are also independent one from another) . Kyoya wants to get to school by spending the least amount of money in expectation ( for the ticket price plus possible fine for being late) . Of course, Kyoya has an optimal plan for how to get to school, and every time he arrives at a train station, he may recalculate his plan based on how much time he has remaining. What is the expected cost that Kyoya will pay to get to school if he moves optimally?",
    "input": "The first line of input contains four integers n, m, t, x ( 2 \u2264 n \u2264 50, 1 \u2264 m \u2264 100, 1 \u2264 t \u2264 20 000, 0 \u2264 x \u2264 106) . The next 2m lines contain the description of the trains. The 2i- th line will have 3 integers ai, bi, ci, representing a one way train from station ai to bi with ticket cost ci ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 0 \u2264 ci \u2264 106) . There will always be at least one path from any station to the school. The ( 2i + 1) - th line will contain t integers, pi, 1, pi, 2, . . . , pi, t where pi, k / 100000 is the probability that this train will take k units of time to traverse ( 0 \u2264 pi, k \u2264 100 000 for 1 \u2264 k \u2264 t, ) . It is guaranteed that there is no more than one train between each pair of platforms in each of the directions.",
    "output": "Print a single real number that is equal to an optimal expected cost of getting to school. The answer will be considered correct if its relative or absolute error doesn' t exceed 10 - 6.",
    "note": "The optimal strategy in the first case is as follows: First, travel along first train line. With probability 1 / 2 Kyoya will take 1 time unit. Otherwise, Kyoya will take 3 time units. If the train takes 1 time unit, travel along the 4th train line. Kyoya will make it to school in time with probability 1 / 2. Otherwise, if the train takes 3 time units, travel along the 2nd train line. Kyoya will make it to school in time with probability 1 / 10. Since the cost of all train lines are zero, we can just look at the probability that Kyoya will incur the penalty. The probability that Kyoya will have to pay the penalty is 1 / 2 \u00d7 1 / 2 + 1 / 2 \u00d7 9 / 10 = 7 / 10. We can show that no other strategy is strictly better. The optimal strategy in the second case is to travel along 1 \u2192 2 \u2192 4 no matter what. Kyoya will incur the penalty with probability 3 / 4, and the cost of the trains is 200, thus the expected cost is 200. 75.",
    "topics": [
      "dp",
      "fft",
      "graphs",
      "math",
      "probabilities"
    ],
    "id": "553E"
  },
  {
    "title": "Foolpr\u00fcf Security",
    "url": "https://codeforces.com/problemset/problem/1267/F",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "1267F"
  },
  {
    "title": "Linearization",
    "url": "https://codeforces.com/problemset/problem/1090/H",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "1090H"
  },
  {
    "title": "Horseback Riding",
    "url": "https://codeforces.com/problemset/problem/1090/E",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "1090E"
  },
  {
    "title": "Minegraphed",
    "url": "https://codeforces.com/problemset/problem/1089/M",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "1089M"
  },
  {
    "title": "Harder Satisfiability",
    "url": "https://codeforces.com/problemset/problem/1089/H",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "2-sat",
      "dfs and similar",
      "graphs"
    ],
    "id": "1089H"
  },
  {
    "title": "Distance Sum",
    "url": "https://codeforces.com/problemset/problem/1089/D",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "1089D"
  },
  {
    "title": "Bimatching",
    "url": "https://codeforces.com/problemset/problem/1089/B",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "1089B"
  },
  {
    "title": "Nudist Beach",
    "url": "https://codeforces.com/problemset/problem/553/D",
    "history": "Nudist Beach is planning a military operation to attack the Life Fibers. In this operation, they will attack and capture several cities which are currently under the control of the Life Fibers. There are n cities, labeled from 1 to n, and m bidirectional roads between them. Currently, there are Life Fibers in every city. In addition, there are k cities that are fortresses of the Life Fibers that cannot be captured under any circumstances. So, the Nudist Beach can capture an arbitrary non- empty subset of cities with no fortresses. After the operation, Nudist Beach will have to defend the captured cities from counterattack. If they capture a city and it is connected to many Life Fiber controlled cities, it will be easily defeated. So, Nudist Beach would like to capture a set of cities such that for each captured city the ratio of Nudist Beach controlled neighbors among all neighbors of that city is as high as possible. More formally, they would like to capture a non- empty set of cities S with no fortresses of Life Fibers. The strength of a city is defined as ( number of neighbors of x in S) / ( total number of neighbors of x) . Here, two cities are called neighbors if they are connnected with a road. The goal is to maximize the strength of the weakest city in S. Given a description of the graph, and the cities with fortresses, find a non- empty subset that maximizes the strength of the weakest city.",
    "input": "The first line of input contains three integers n, m, k ( 2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000, 1 \u2264 k \u2264 n - 1) . The second line of input contains k integers, representing the cities with fortresses. These cities will all be distinct. The next m lines contain the roads. The i- th of these lines will have 2 integers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . Every city will have at least one road adjacent to it. There is no more than one road between each pair of the cities.",
    "output": "The first line should contain an integer r, denoting the size of an optimum set ( 1 \u2264 r \u2264 n - k) . The second line should contain r integers, denoting the cities in the set. Cities may follow in an arbitrary order. This line should not contain any of the cities with fortresses. If there are multiple possible answers, print any of them.",
    "note": "The first example case achieves a strength of 1/ 2. No other subset is strictly better. The second example case achieves a strength of 1. Note that the subset doesn' t necessarily have to be connected.",
    "topics": [
      "binary search",
      "graphs",
      "greedy"
    ],
    "id": "553D"
  },
  {
    "title": "Love Triangles",
    "url": "https://codeforces.com/problemset/problem/553/C",
    "history": "There are many anime that are about \" love triangles\" : Alice loves Bob, and Charlie loves Bob as well, but Alice hates Charlie. You are thinking about an anime which has n characters. The characters are labeled from 1 to n. Every pair of two characters can either mutually love each other or mutually hate each other ( there is no neutral state) . You hate love triangles ( A- B are in love and B- C are in love, but A- C hate each other) , and you also hate it when nobody is in love. So, considering any three characters, you will be happy if exactly one pair is in love ( A and B love each other, and C hates both A and B) , or if all three pairs are in love ( A loves B, B loves C, C loves A) . You are given a list of m known relationships in the anime. You know for sure that certain pairs love each other, and certain pairs hate each other. You' re wondering how many ways you can fill in the remaining relationships so you are happy with every triangle. Two ways are considered different if two characters are in love in one way but hate each other in the other. Print this count modulo 1 000 000 007.",
    "input": "The first line of input will contain two integers n, m ( 3 \u2264 n \u2264 100 000, 0 \u2264 m \u2264 100 000) . The next m lines will contain the description of the known relationships. The i- th line will contain three integers ai, bi, ci. If ci is 1, then ai and bi are in love, otherwise, they hate each other ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, ) . Each pair of people will be described no more than once.",
    "output": "Print a single integer equal to the number of ways to fill in the remaining pairs so that you are happy with every triangle modulo 1 000 000 007.",
    "note": "In the first sample, the four ways are to: Make everyone love each other Make 1 and 2 love each other, and 3 hate 1 and 2 ( symmetrically, we get 3 ways from this) . In the second sample, the only possible solution is to make 1 and 3 love each other and 2 and 4 hate each other.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "553C"
  },
  {
    "title": "Regular Bridge",
    "url": "https://codeforces.com/problemset/problem/550/D",
    "history": "An undirected graph is called k- regular, if the degrees of all its vertices are equal k. An edge of a connected graph is called a bridge, if after removing it the graph is being split into two connected components. Build a connected undirected k- regular graph containing at least one bridge, or else state that such graph doesn' t exist.",
    "input": "The single line of the input contains integer k ( 1 \u2264 k \u2264 100) \u2014 the required degree of the vertices of the regular graph.",
    "output": "Print \" NO\" ( without quotes) , if such graph doesn' t exist. Otherwise, print \" YES\" in the first line and the description of any suitable graph in the next lines. The description of the made graph must start with numbers n and m \u2014 the number of vertices and edges respectively. Each of the next m lines must contain two integers, a and b ( 1 \u2264 a, b \u2264 n, a = \u0338 b) , that mean that there is an edge connecting the vertices a and b. A graph shouldn' t contain multiple edges and edges that lead from a vertex to itself. A graph must be connected, the degrees of all vertices of the graph must be equal k. At least one edge of the graph must be a bridge. You can print the edges of the graph in any order. You can print the ends of each edge in any order. The constructed graph must contain at most 106 vertices and 106 edges ( it is guaranteed that if at least one graph that meets the requirements exists, then there also exists the graph with at most 106 vertices and at most 106 edges) .",
    "note": "In the sample from the statement there is a suitable graph consisting of two vertices, connected by a single edge.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "550D"
  },
  {
    "title": "Looksery Party",
    "url": "https://codeforces.com/problemset/problem/549/B",
    "history": "The Looksery company, consisting of n staff members, is planning another big party. Every employee has his phone number and the phone numbers of his friends in the phone book. Everyone who comes to the party, sends messages to his contacts about how cool it is. At the same time everyone is trying to spend as much time on the fun as possible, so they send messages to everyone without special thinking, moreover, each person even sends a message to himself or herself. Igor and Max, Looksery developers, started a dispute on how many messages each person gets. Igor indicates n numbers, the i- th of which indicates how many messages, in his view, the i- th employee is going to take. If Igor guesses correctly at least one of these numbers, he wins, otherwise Max wins. You support Max in this debate, so you need, given the contact lists of the employees, to determine whether there is a situation where Igor loses. Specifically, you need to determine which employees should come to the party, and which should not, so after all the visitors send messages to their contacts, each employee received a number of messages that is different from what Igor stated.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100) \u2014 the number of employees of company Looksery. Next n lines contain the description of the contact lists of the employees. The i- th of these lines contains a string of length n, consisting of digits zero and one, specifying the contact list of the i- th employee. If the j- th character of the i- th string equals 1, then the j- th employee is in the i- th employee' s contact list, otherwise he isn' t. It is guaranteed that the i- th character of the i- th line is always equal to 1. The last line contains n space- separated integers: a1, a2, . . . , an ( 0 \u2264 ai \u2264 n) , where ai represents the number of messages that the i- th employee should get according to Igor.",
    "output": "In the first line print a single integer m \u2014 the number of employees who should come to the party so that Igor loses the dispute. In the second line print m space- separated integers \u2014 the numbers of these employees in an arbitrary order. If Igor wins the dispute in any case, print - 1. If there are multiple possible solutions, print any of them.",
    "note": "In the first sample Igor supposes that the first employee will receive 0 messages. Since he isn' t contained in any other contact list he must come to the party in order to receive one message from himself. If he is the only who come to the party then he will receive 1 message, the second employee will receive 0 messages and the third will also receive 1 message. Thereby Igor won' t guess any number. In the second sample if the single employee comes to the party he receives 1 message and Igor wins, so he shouldn' t do it. In the third sample the first employee will receive 2 messages, the second \u2014 3, the third \u2014 2, the fourth \u2014 3.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "549B"
  },
  {
    "title": "Mike and Fish",
    "url": "https://codeforces.com/problemset/problem/547/D",
    "history": "As everyone knows, bears love fish. But Mike is a strange bear; He hates fish! The even more strange thing about him is he has an infinite number of blue and red fish. He has marked n distinct points in the plane. i- th point is point ( xi, yi) . He wants to put exactly one fish in each of these points such that the difference between the number of red fish and the blue fish on each horizontal or vertical line is at most 1. He can' t find a way to perform that! Please help him.",
    "input": "The first line of input contains integer n ( 1 \u2264 n \u2264 2 \u00d7 105) . The next n lines contain the information about the points, i- th line contains two integers xi and yi ( 1 \u2264 xi, yi \u2264 2 \u00d7 105) , the i- th point coordinates. It is guaranteed that there is at least one valid answer.",
    "output": "Print the answer as a sequence of n characters ' r' ( for red) or ' b' ( for blue) where i- th character denotes the color of the fish in the i- th point.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "547D"
  },
  {
    "title": "Soldier and Traveling",
    "url": "https://codeforces.com/problemset/problem/546/E",
    "history": "In the country there are n cities and m bidirectional roads between them. Each city has an army. Army of the i- th city consists of ai soldiers. Now soldiers roam. After roaming each soldier has to either stay in his city or to go to the one of neighboring cities by at moving along at most one road. Check if is it possible that after roaming there will be exactly bi soldiers in the i- th city.",
    "input": "First line of input consists of two integers n and m ( 1 \u2264 n \u2264 100, 0 \u2264 m \u2264 200) . Next line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 100) . Next line contains n integers b1, b2, . . . , bn ( 0 \u2264 bi \u2264 100) . Then m lines follow, each of them consists of two integers p and q ( 1 \u2264 p, q \u2264 n, p = \u0338 q) denoting that there is an undirected road between cities p and q. It is guaranteed that there is at most one road between each pair of cities.",
    "output": "If the conditions can not be met output single word \" NO\" . Otherwise output word \" YES\" and then n lines, each of them consisting of n integers. Number in the i- th line in the j- th column should denote how many soldiers should road from city i to city j ( if i = \u0338 j) or how many soldiers should stay in city i ( if i = j) . If there are several possible answers you may output any of them.",
    "note": "",
    "topics": [
      "flows",
      "graphs",
      "math"
    ],
    "id": "546E"
  },
  {
    "title": "Paths and Trees",
    "url": "https://codeforces.com/problemset/problem/545/E",
    "history": "Little girl Susie accidentally found her elder brother' s notebook. She has many things to do, more important than solving problems, but she found this problem too interesting, so she wanted to know its solution and decided to ask you about it. So, the problem statement is as follows. Let' s assume that we are given a connected weighted undirected graph G = ( V, E) ( here V is the set of vertices, E is the set of edges) . The shortest- path tree from vertex u is such graph G1 = ( V, E1) that is a tree with the set of edges E1 that is the subset of the set of edges of the initial graph E, and the lengths of the shortest paths from u to any vertex to G and to G1 are the same. You are given a connected weighted undirected graph G and vertex u. Your task is to find the shortest- path tree of the given graph from vertex u, the total weight of whose edges is minimum possible.",
    "input": "The first line contains two numbers, n and m ( 1 \u2264 n \u2264 3\u00b7105, 0 \u2264 m \u2264 3\u00b7105) \u2014 the number of vertices and edges of the graph, respectively. Next m lines contain three integers each, representing an edge \u2014 ui, vi, wi \u2014 the numbers of vertices connected by an edge and the weight of the edge ( ui = \u0338 vi, 1 \u2264 wi \u2264 109) . It is guaranteed that graph is connected and that there is no more than one edge between any pair of vertices. The last line of the input contains integer u ( 1 \u2264 u \u2264 n) \u2014 the number of the start vertex.",
    "output": "In the first line print the minimum total weight of the edges of the tree. In the next line print the indices of the edges that are included in the tree, separated by spaces. The edges are numbered starting from 1 in the order they follow in the input. You may print the numbers of the edges in any order. If there are multiple answers, print any of them.",
    "note": "In the first sample there are two possible shortest path trees: with edges 1 \u2013 3 and 2 \u2013 3 ( the total weight is 3) ; with edges 1 \u2013 2 and 2 \u2013 3 ( the total weight is 2) ; And, for example, a tree with edges 1 \u2013 2 and 1 \u2013 3 won' t be a shortest path tree for vertex 3, because the distance from vertex 3 to vertex 2 in this tree equals 3, and in the original graph it is 1.",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "545E"
  },
  {
    "title": "Destroying Roads",
    "url": "https://codeforces.com/problemset/problem/543/B",
    "history": "In some country there are exactly n cities and m bidirectional roads connecting the cities. Cities are numbered with integers from 1 to n. If cities a and b are connected by a road, then in an hour you can go along this road either from city a to city b, or from city b to city a. The road network is such that from any city you can get to any other one by moving along the roads. You want to destroy the largest possible number of roads in the country so that the remaining roads would allow you to get from city s1 to city t1 in at most l1 hours and get from city s2 to city t2 in at most l2 hours. Determine what maximum number of roads you need to destroy in order to meet the condition of your plan. If it is impossible to reach the desired result, print - 1.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 3000, ) \u2014 the number of cities and roads in the country, respectively. Next m lines contain the descriptions of the roads as pairs of integers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . It is guaranteed that the roads that are given in the description can transport you from any city to any other one. It is guaranteed that each pair of cities has at most one road between them. The last two lines contains three integers each, s1, t1, l1 and s2, t2, l2, respectively ( 1 \u2264 si, ti \u2264 n, 0 \u2264 li \u2264 n) .",
    "output": "Print a single number \u2014 the answer to the problem. If the it is impossible to meet the conditions, print - 1.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "shortest paths"
    ],
    "id": "543B"
  },
  {
    "title": "Playing on Graph",
    "url": "https://codeforces.com/problemset/problem/542/E",
    "history": "Vova and Marina love offering puzzles to each other. Today Marina offered Vova to cope with the following task. Vova has a non- directed graph consisting of n vertices and m edges without loops and multiple edges. Let' s define the operation of contraction two vertices a and b that are not connected by an edge. As a result of this operation vertices a and b are deleted and instead of them a new vertex x is added into the graph, and also edges are drawn from it to all vertices that were connected with a or with b ( specifically, if the vertex was connected with both a and b, then also exactly one edge is added from x to it) . Thus, as a result of contraction again a non- directed graph is formed, it contains no loops nor multiple edges, and it contains ( n - 1) vertices. Vova must perform the contraction an arbitrary number of times to transform the given graph into a chain of the maximum length. A chain of length k ( k \u2265 0) is a connected graph whose vertices can be numbered with integers from 1 to k + 1 so that the edges of the graph connect all pairs of vertices ( i, i + 1) ( 1 \u2264 i \u2264 k) and only them. Specifically, the graph that consists of one vertex is a chain of length 0. The vertices that are formed as a result of the contraction are allowed to be used in the following operations of contraction. The picture illustrates the contraction of two vertices marked by red. Help Vova cope with his girlfriend' s task. Find the maximum length of the chain that can be obtained from the resulting graph or else determine that it is impossible to obtain the chain.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 1000, 0 \u2264 m \u2264 100 000) \u2014 the number of vertices and the number of edges in the original graph. Next m lines contain the descriptions of edges in the format ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , which means that there is an edge between vertices ai and bi. It is guaranteed that there is at most one edge between each pair of vertexes.",
    "output": "If it is impossible to obtain a chain from the given graph, print - 1. Otherwise, print the maximum possible number of edges in the resulting chain.",
    "note": "In the first sample test you can contract vertices 4 and 5 and obtain a chain of length 3. In the second sample test it is initially impossible to contract any pair of vertexes, so it is impossible to achieve the desired result. In the third sample test you can contract vertices 1 and 2 and obtain a chain of length 2.",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "542E"
  },
  {
    "title": "Idempotent functions",
    "url": "https://codeforces.com/problemset/problem/542/C",
    "history": "Some time ago Leonid have known about idempotent functions. Idempotent function defined on a set 1, 2, . . . , n is such function , that for any the formula g( g( x) ) = g( x) holds. Let' s denote as f( k) ( x) the function f applied k times to the value x. More formally, f( 1) ( x) = f( x) , f( k) ( x) = f( f( k - 1) ( x) ) for each k > 1. You are given some function . Your task is to find minimum positive integer k such that function f( k) ( x) is idempotent.",
    "input": "In the first line of the input there is a single integer n ( 1 \u2264 n \u2264 200) \u2014 the size of function f domain. In the second line follow f( 1) , f( 2) , . . . , f( n) ( 1 \u2264 f( i) \u2264 n for each 1 \u2264 i \u2264 n) , the values of a function.",
    "output": "Output minimum k such that function f( k) ( x) is idempotent.",
    "note": "In the first sample test function f( x) = f( 1) ( x) is already idempotent since f( f( 1) ) = f( 1) = 1, f( f( 2) ) = f( 2) = 2, f( f( 3) ) = f( 3) = 2, f( f( 4) ) = f( 4) = 4. In the second sample test: function f( x) = f( 1) ( x) isn' t idempotent because f( f( 1) ) = 3 but f( 1) = 2; function f( x) = f( 2) ( x) is idempotent since for any x it is true that f( 2) ( x) = 3, so it is also true that f( 2) ( f( 2) ( x) ) = 3. In the third sample test: function f( x) = f( 1) ( x) isn' t idempotent because f( f( 1) ) = 3 but f( 1) = 2; function f( f( x) ) = f( 2) ( x) isn' t idempotent because f( 2) ( f( 2) ( 1) ) = 2 but f( 2) ( 1) = 3; function f( f( f( x) ) ) = f( 3) ( x) is idempotent since it is identity function: f( 3) ( x) = x for any meaning that the formula f( 3) ( f( 3) ( x) ) = f( 3) ( x) also holds.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math"
    ],
    "id": "542C"
  },
  {
    "title": "Work Group",
    "url": "https://codeforces.com/problemset/problem/533/B",
    "history": "One Big Software Company has n employees numbered from 1 to n. The director is assigned number 1. Every employee of the company except the director has exactly one immediate superior. The director, of course, doesn' t have a superior. We will call person a a subordinates of another person b, if either b is an immediate supervisor of a, or the immediate supervisor of a is a subordinate to person b. In particular, subordinates of the head are all other employees of the company. To solve achieve an Important Goal we need to form a workgroup. Every person has some efficiency, expressed by a positive integer ai, where i is the person' s number. The efficiency of the workgroup is defined as the total efficiency of all the people included in it. The employees of the big software company are obsessed with modern ways of work process organization. Today pair programming is at the peak of popularity, so the workgroup should be formed with the following condition. Each person entering the workgroup should be able to sort all of his subordinates who are also in the workgroup into pairs. In other words, for each of the members of the workgroup the number of his subordinates within the workgroup should be even. Your task is to determine the maximum possible efficiency of the workgroup formed at observing the given condition. Any person including the director of company can enter the workgroup.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 the number of workers of the Big Software Company. Then n lines follow, describing the company employees. The i- th line contains two integers pi, ai ( 1 \u2264 ai \u2264 105) \u2014 the number of the person who is the i- th employee' s immediate superior and i- th employee' s efficiency. For the director p1 = - 1, for all other people the condition 1 \u2264 pi < i is fulfilled.",
    "output": "Print a single integer \u2014 the maximum possible efficiency of the workgroup.",
    "note": "In the sample test the most effective way is to make a workgroup from employees number 1, 2, 4, 5, 6.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "strings",
      "trees"
    ],
    "id": "533B"
  },
  {
    "title": "Data Center Drama",
    "url": "https://codeforces.com/problemset/problem/527/E",
    "history": "The project of a data center of a Big Software Company consists of n computers connected by m cables. Simply speaking, each computer can be considered as a box with multiple cables going out of the box. Very Important Information is transmitted along each cable in one of the two directions. As the data center plan is not yet approved, it wasn' t determined yet in which direction information will go along each cable. The cables are put so that each computer is connected with each one, perhaps through some other computers. The person in charge of the cleaning the data center will be Claudia Ivanova, the janitor. She loves to tie cables into bundles using cable ties. For some reasons, she groups the cables sticking out of a computer into groups of two, and if it isn' t possible, then she gets furious and attacks the computer with the water from the bucket. It should also be noted that due to the specific physical characteristics of the Very Important Information, it is strictly forbidden to connect in one bundle two cables where information flows in different directions. The management of the data center wants to determine how to send information along each cable so that Claudia Ivanova is able to group all the cables coming out of each computer into groups of two, observing the condition above. Since it may not be possible with the existing connections plan, you are allowed to add the minimum possible number of cables to the scheme, and then you need to determine the direction of the information flow for each cable ( yes, sometimes data centers are designed based on the janitors' convenience. . . )",
    "input": "The first line contains two numbers, n and m ( 1 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 200 000) \u2014 the number of computers and the number of the already present cables, respectively. Each of the next lines contains two numbers ai, bi ( 1 \u2264 ai, bi \u2264 n) \u2014 the indices of the computers connected by the i- th cable. The data centers often have a very complex structure, so a pair of computers may have more than one pair of cables between them and some cables may connect a computer with itself.",
    "output": "In the first line print a single number p ( p \u2265 m) \u2014 the minimum number of cables in the final scheme. In each of the next p lines print a pair of numbers ci, di ( 1 \u2264 ci, di \u2264 n) , describing another cable. Such entry means that information will go along a certain cable in direction from ci to di. Among the cables you printed there should be all the cables presented in the original plan in some of two possible directions. It is guaranteed that there is a solution where p doesn' t exceed 500 000. If there are several posible solutions with minimum possible value of p, print any of them.",
    "note": "Picture for the first sample test. The tied pairs of cables are shown going out from the same point. Picture for the second test from the statement. The added cables are drawin in bold. Alternative answer for the second sample test:",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "527E"
  },
  {
    "title": "Arthur and Walls",
    "url": "https://codeforces.com/problemset/problem/525/D",
    "history": "Finally it is a day when Arthur has enough money for buying an apartment. He found a great option close to the center of the city with a nice price. Plan of the apartment found by Arthur looks like a rectangle n \u00d7 m consisting of squares of size 1 \u00d7 1. Each of those squares contains either a wall ( such square is denoted by a symbol \" * \" on the plan) or a free space ( such square is denoted on the plan by a symbol \" . \" ) . Room in an apartment is a maximal connected area consisting of free squares. Squares are considered adjacent if they share a common side. The old Arthur dream is to live in an apartment where all rooms are rectangles. He asks you to calculate minimum number of walls you need to remove in order to achieve this goal. After removing a wall from a square it becomes a free square. While removing the walls it is possible that some rooms unite into a single one.",
    "input": "The first line of the input contains two integers n, m ( 1 \u2264 n, m \u2264 2000) denoting the size of the Arthur apartments. Following n lines each contain m symbols \u2014 the plan of the apartment. If the cell is denoted by a symbol \" * \" then it contains a wall. If the cell is denoted by a symbol \" . \" then it this cell is free from walls and also this cell is contained in some of the rooms.",
    "output": "Output n rows each consisting of m symbols that show how the Arthur apartment plan should look like after deleting the minimum number of walls in order to make each room ( maximum connected area free from walls) be a rectangle. If there are several possible answers, output any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "525D"
  },
  {
    "title": "Reposts",
    "url": "https://codeforces.com/problemset/problem/522/A",
    "history": "One day Polycarp published a funny picture in a social network making a poll about the color of his handle. Many of his friends started reposting Polycarp' s joke to their news feed. Some of them reposted the reposts and so on. These events are given as a sequence of strings \" name1 reposted name2\" , where name1 is the name of the person who reposted the joke, and name2 is the name of the person from whose news feed the joke was reposted. It is guaranteed that for each string \" name1 reposted name2\" user \" name1\" didn' t have the joke in his feed yet, and \" name2\" already had it in his feed by the moment of repost. Polycarp was registered as \" Polycarp\" and initially the joke was only in his feed. Polycarp measures the popularity of the joke as the length of the largest repost chain. Print the popularity of Polycarp' s joke.",
    "input": "The first line of the input contains integer n ( 1 \u2264 n \u2264 200) \u2014 the number of reposts. Next follow the reposts in the order they were made. Each of them is written on a single line and looks as \" name1 reposted name2\" . All the names in the input consist of lowercase or uppercase English letters and/ or digits and have lengths from 2 to 24 characters, inclusive. We know that the user names are case- insensitive, that is, two names that only differ in the letter case correspond to the same social network user.",
    "output": "Print a single integer \u2014 the maximum length of a repost chain.",
    "note": "",
    "topics": [
      "*special",
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "522A"
  },
  {
    "title": "Cycling City",
    "url": "https://codeforces.com/problemset/problem/521/E",
    "history": "You are organizing a cycling race on the streets of the city. The city contains n junctions, some pairs of them are connected by roads; on each road you can move in any direction. No two roads connect the same pair of intersections, and no road connects the intersection with itself. You want the race to be open to both professional athletes and beginner cyclists, and that' s why you will organize the race in three nominations: easy, moderate and difficult; each participant will choose the more suitable nomination. For each nomination you must choose the route \u2014 the chain of junctions, consecutively connected by roads. Routes must meet the following conditions: all three routes should start at the same intersection, and finish at the same intersection ( place of start and finish can' t be the same) ; to avoid collisions, no two routes can have common junctions ( except for the common start and finish) , and can not go along the same road ( irrespective of the driving direction on the road for those two routes) ; no route must pass twice through the same intersection or visit the same road twice ( irrespective of the driving direction on the road for the first and second time of visit) . Preparing for the competition is about to begin, and you need to determine the routes of the race as quickly as possible. The length of the routes is not important, it is only important that all the given requirements were met.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2\u00b7105) \u2014 the number of intersections and roads, respectively. The following m lines contain two integers \u2014 the numbers of the intersections connected by a road ( the intersections are numbered starting with 1) . It is guaranteed that each pair of intersections is connected by no more than one road, and no road connects the intersection to itself. Please note that it is not guaranteed that you can get from any junction to any other one by using the roads.",
    "output": "If it is possible to create the routes, in the first line print \" YES\" . In the next three lines print the descriptions of each of the three routes in the format \" l p1 . . . pl\" , where l is the number of intersections in the route, and p1, . . . , pl are their numbers in the order they follow. The routes must meet all the requirements specified in the statement. If it is impossible to make the routes in accordance with the requirements, print NO.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "521E"
  },
  {
    "title": "Two Buttons",
    "url": "https://codeforces.com/problemset/problem/520/B",
    "history": "Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n. Bob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?",
    "input": "The first and the only line of the input contains two distinct integers n and m ( 1 \u2264 n, m \u2264 104) , separated by a space .",
    "output": "Print a single number \u2014 the minimum number of times one needs to push the button required to get the number m out of number n.",
    "note": "In the first example you need to push the blue button once, and then push the red button once. In the second example, doubling the number is unnecessary, so we need to push the blue button nine times.",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "math",
      "shortest paths"
    ],
    "id": "520B"
  },
  {
    "title": "Fox And Names",
    "url": "https://codeforces.com/problemset/problem/510/C",
    "history": "Fox Ciel is going to publish a paper on FOCS ( Foxes Operated Computer Systems, pronounce: \" Fox\" ) . She heard a rumor: the authors list on the paper is always sorted in the lexicographical order. After checking some examples, she found out that sometimes it wasn' t true. On some papers authors' names weren' t sorted in lexicographical order in normal sense. But it was always true that after some modification of the order of letters in alphabet, the order of authors becomes lexicographical! She wants to know, if there exists an order of letters in Latin alphabet such that the names on the paper she is submitting are following in the lexicographical order. If so, you should find out any such order. Lexicographical order is defined in following way. When we compare s and t, first we find the leftmost position with differing characters: si = \u0338 ti. If there is no such position ( i. e. s is a prefix of t or vice versa) the shortest string is less. Otherwise, we compare characters si and ti according to their order in alphabet.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100) : number of names. Each of the following n lines contain one string namei ( 1 \u2264 | namei| \u2264 100) , the i- th name. Each name contains only lowercase Latin letters. All names are different.",
    "output": "If there exists such order of letters that the given names are sorted lexicographically, output any such order as a permutation of characters ' a' \u2013' z' ( i. e. first output the first letter of the modified alphabet, then the second, and so on) . Otherwise output a single word \" Impossible\" ( without quotes) .",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "sortings"
    ],
    "id": "510C"
  },
  {
    "title": "Tanya and Password",
    "url": "https://codeforces.com/problemset/problem/508/D",
    "history": "While dad was at work, a little girl Tanya decided to play with dad' s password to his secret database. Dad' s password is a string consisting of n + 2 characters. She has written all the possible n three- letter continuous substrings of the password on pieces of paper, one for each piece of paper, and threw the password out. Each three- letter substring was written the number of times it occurred in the password. Thus, Tanya ended up with n pieces of paper. Then Tanya realized that dad will be upset to learn about her game and decided to restore the password or at least any string corresponding to the final set of three- letter strings. You have to help her in this difficult task. We know that dad' s password consisted of lowercase and uppercase letters of the Latin alphabet and digits. Uppercase and lowercase letters of the Latin alphabet are considered distinct.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2\u00b7105) , the number of three- letter substrings Tanya got. Next n lines contain three letters each, forming the substring of dad' s password. Each character in the input is a lowercase or uppercase Latin letter or a digit.",
    "output": "If Tanya made a mistake somewhere during the game and the strings that correspond to the given set of substrings don' t exist, print \" NO\" . If it is possible to restore the string that corresponds to given set of substrings, print \" YES\" , and then print any suitable password option.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "508D"
  },
  {
    "title": "Breaking Good",
    "url": "https://codeforces.com/problemset/problem/507/E",
    "history": "Breaking Good is a new video game which a lot of gamers want to have. There is a certain level in the game that is really difficult even for experienced gamers. Walter William, the main character of the game, wants to join a gang called Los Hermanos ( The Brothers) . The gang controls the whole country which consists of n cities with m bidirectional roads connecting them. There is no road is connecting a city to itself and for any two cities there is at most one road between them. The country is connected, in the other words, it is possible to reach any city from any other city using the given roads. The roads aren' t all working. There are some roads which need some more work to be performed to be completely functioning. The gang is going to rob a bank! The bank is located in city 1. As usual, the hardest part is to escape to their headquarters where the police can' t get them. The gang' s headquarters is in city n. To gain the gang' s trust, Walter is in charge of this operation, so he came up with a smart plan. First of all the path which they are going to use on their way back from city 1 to their headquarters n must be as short as possible, since it is important to finish operation as fast as possible. Then, gang has to blow up all other roads in country that don' t lay on this path, in order to prevent any police reinforcements. In case of non- working road, they don' t have to blow up it as it is already malfunctional. If the chosen path has some roads that doesn' t work they' ll have to repair those roads before the operation. Walter discovered that there was a lot of paths that satisfied the condition of being shortest possible so he decided to choose among them a path that minimizes the total number of affected roads ( both roads that have to be blown up and roads to be repaired) . Can you help Walter complete his task and gain the gang' s trust?",
    "input": "The first line of input contains two integers n, m ( 2 \u2264 n \u2264 105, ) , the number of cities and number of roads respectively. In following m lines there are descriptions of roads. Each description consists of three integers x, y, z ( 1 \u2264 x, y \u2264 n, ) meaning that there is a road connecting cities number x and y. If z = 1, this road is working, otherwise it is not.",
    "output": "In the first line output one integer k, the minimum possible number of roads affected by gang. In the following k lines output three integers describing roads that should be affected. Each line should contain three integers x, y, z ( 1 \u2264 x, y \u2264 n, ) , cities connected by a road and the new state of a road. z = 1 indicates that the road between cities x and y should be repaired and z = 0 means that road should be blown up. You may output roads in any order. Each affected road should appear exactly once. You may output cities connected by a single road in any order. If you output a road, it' s original state should be different from z. After performing all operations accroding to your plan, there should remain working only roads lying on some certain shortest past between city 1 and n. If there are multiple optimal answers output any.",
    "note": "In the first test the only path is 1 - 2In the second test the only shortest path is 1 - 3 - 4In the third test there are multiple shortest paths but the optimal is 1 - 4 - 6 - 8",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "507E"
  },
  {
    "title": "Mr. Kitayuta's Colorful Graph",
    "url": "https://codeforces.com/problemset/problem/506/D",
    "history": "Mr. Kitayuta has just bought an undirected graph with n vertices and m edges. The vertices of the graph are numbered from 1 to n. Each edge, namely edge i, has a color ci, connecting vertex ai and bi. Mr. Kitayuta wants you to process the following q queries. In the i- th query, he gives you two integers - ui and vi. Find the number of the colors that satisfy the following condition: the edges of that color connect vertex ui and vertex vi directly or indirectly.",
    "input": "The first line of the input contains space- separated two integers - n and m( 2 \u2264 n \u2264 105, 1 \u2264 m \u2264 105) , denoting the number of the vertices and the number of the edges, respectively. The next m lines contain space- separated three integers - ai, bi( 1 \u2264 ai < bi \u2264 n) and ci( 1 \u2264 ci \u2264 m) . Note that there can be multiple edges between two vertices. However, there are no multiple edges of the same color between two vertices, that is, if i = \u0338 j, ( ai, bi, ci) = \u0338 ( aj, bj, cj) . The next line contains a integer- q( 1 \u2264 q \u2264 105) , denoting the number of the queries. Then follows q lines, containing space- separated two integers - ui and vi( 1 \u2264 ui, vi \u2264 n) . It is guaranteed that ui = \u0338 vi.",
    "output": "For each query, print the answer in a separate line.",
    "note": "Let' s consider the first sample. The figure above shows the first sample. Vertex 1 and vertex 2 are connected by color 1 and 2. Vertex 3 and vertex 4 are connected by color 3. Vertex 1 and vertex 4 are not connected by any single color.",
    "topics": [
      "brute force",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "506D"
  },
  {
    "title": "Mr. Kitayuta's Colorful Graph",
    "url": "https://codeforces.com/problemset/problem/505/B",
    "history": "Mr. Kitayuta has just bought an undirected graph consisting of n vertices and m edges. The vertices of the graph are numbered from 1 to n. Each edge, namely edge i, has a color ci, connecting vertex ai and bi. Mr. Kitayuta wants you to process the following q queries. In the i- th query, he gives you two integers \u2014 ui and vi. Find the number of the colors that satisfy the following condition: the edges of that color connect vertex ui and vertex vi directly or indirectly.",
    "input": "The first line of the input contains space- separated two integers \u2014 n and m ( 2 \u2264 n \u2264 100, 1 \u2264 m \u2264 100) , denoting the number of the vertices and the number of the edges, respectively. The next m lines contain space- separated three integers \u2014 ai, bi ( 1 \u2264 ai < bi \u2264 n) and ci ( 1 \u2264 ci \u2264 m) . Note that there can be multiple edges between two vertices. However, there are no multiple edges of the same color between two vertices, that is, if i = \u0338 j, ( ai, bi, ci) = \u0338 ( aj, bj, cj) . The next line contains a integer \u2014 q ( 1 \u2264 q \u2264 100) , denoting the number of the queries. Then follows q lines, containing space- separated two integers \u2014 ui and vi ( 1 \u2264 ui, vi \u2264 n) . It is guaranteed that ui = \u0338 vi.",
    "output": "For each query, print the answer in a separate line.",
    "note": "Let' s consider the first sample. The figure above shows the first sample. Vertex 1 and vertex 2 are connected by color 1 and 2. Vertex 3 and vertex 4 are connected by color 3. Vertex 1 and vertex 4 are not connected by any single color.",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs"
    ],
    "id": "505B"
  },
  {
    "title": "New Year Santa Network",
    "url": "https://codeforces.com/problemset/problem/500/D",
    "history": "New Year is coming in Tree World! In this world, as the name implies, there are n cities connected by n - 1 roads, and for any two distinct cities there always exists a path between them. The cities are numbered by integers from 1 to n, and the roads are numbered by integers from 1 to n - 1. Let' s define d( u, v) as total length of roads on the path between city u and city v. As an annual event, people in Tree World repairs exactly one road per year. As a result, the length of one road decreases. It is already known that in the i- th year, the length of the ri- th road is going to become wi, which is shorter than its length before. Assume that the current year is year 1. Three Santas are planning to give presents annually to all the children in Tree World. In order to do that, they need some preparation, so they are going to choose three distinct cities c1, c2, c3 and make exactly one warehouse in each city. The k- th ( 1 \u2264 k \u2264 3) Santa will take charge of the warehouse in city ck. It is really boring for the three Santas to keep a warehouse alone. So, they decided to build an only- for- Santa network! The cost needed to build this network equals to d( c1, c2) + d( c2, c3) + d( c3, c1) dollars. Santas are too busy to find the best place, so they decided to choose c1, c2, c3 randomly uniformly over all triples of distinct numbers from 1 to n. Santas would like to know the expected value of the cost needed to build the network. However, as mentioned, each year, the length of exactly one road decreases. So, the Santas want to calculate the expected after each length change. Help them to calculate the value.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 105) \u2014 the number of cities in Tree World. Next n - 1 lines describe the roads. The i- th line of them ( 1 \u2264 i \u2264 n - 1) contains three space- separated integers ai, bi, li ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 li \u2264 103) , denoting that the i- th road connects cities ai and bi, and the length of i- th road is li. The next line contains an integer q ( 1 \u2264 q \u2264 105) \u2014 the number of road length changes. Next q lines describe the length changes. The j- th line of them ( 1 \u2264 j \u2264 q) contains two space- separated integers rj, wj ( 1 \u2264 rj \u2264 n - 1, 1 \u2264 wj \u2264 103) . It means that in the j- th repair, the length of the rj- th road becomes wj. It is guaranteed that wj is smaller than the current length of the rj- th road. The same road can be repaired several times.",
    "output": "Output q numbers. For each given change, print a line containing the expected cost needed to build the network in Tree World. The answer will be considered correct if its absolute and relative error doesn' t exceed 10 - 6.",
    "note": "Consider the first sample. There are 6 triples: ( 1, 2, 3) , ( 1, 3, 2) , ( 2, 1, 3) , ( 2, 3, 1) , ( 3, 1, 2) , ( 3, 2, 1) . Because n = 3, the cost needed to build the network is always d( 1, 2) + d( 2, 3) + d( 3, 1) for all the triples. So, the expected cost equals to d( 1, 2) + d( 2, 3) + d( 3, 1) .",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "500D"
  },
  {
    "title": "New Year Permutation",
    "url": "https://codeforces.com/problemset/problem/500/B",
    "history": "User ainta has a permutation p1, p2, . . . , pn. As the New Year is coming, he wants to make his permutation as pretty as possible. Permutation a1, a2, . . . , an is prettier than permutation b1, b2, . . . , bn, if and only if there exists an integer k ( 1 \u2264 k \u2264 n) where a1 = b1, a2 = b2, . . . , ak - 1 = bk - 1 and ak < bk all holds. As known, permutation p is so sensitive that it could be only modified by swapping two distinct elements. But swapping two elements is harder than you think. Given an n \u00d7 n binary matrix A, user ainta can swap the values of pi and pj ( 1 \u2264 i, j \u2264 n, i = \u0338 j) if and only if Ai, j = 1. Given the permutation p and the matrix A, user ainta wants to know the prettiest permutation that he can obtain.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 300) \u2014 the size of the permutation p. The second line contains n space- separated integers p1, p2, . . . , pn \u2014 the permutation p that user ainta has. Each integer between 1 and n occurs exactly once in the given permutation. Next n lines describe the matrix A. The i- th line contains n characters ' 0' or ' 1' and describes the i- th row of A. The j- th character of the i- th line Ai, j is the element on the intersection of the i- th row and the j- th column of A. It is guaranteed that, for all integers i, j where 1 \u2264 i < j \u2264 n, Ai, j = Aj, i holds. Also, for all integers i where 1 \u2264 i \u2264 n, Ai, i = 0 holds.",
    "output": "In the first and only line, print n space- separated integers, describing the prettiest permutation that can be obtained.",
    "note": "In the first sample, the swap needed to obtain the prettiest permutation is: ( p1, p7) . In the second sample, the swaps needed to obtain the prettiest permutation is ( p1, p3) , ( p4, p5) , ( p3, p4) . A permutation p is a sequence of integers p1, p2, . . . , pn, consisting of n distinct positive integers, each of them doesn' t exceed n. The i- th element of the permutation p is denoted as pi. The size of the permutation p is denoted as n.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "500B"
  },
  {
    "title": "New Year Transportation",
    "url": "https://codeforces.com/problemset/problem/500/A",
    "history": "New Year is coming in Line World! In this world, there are n cells numbered by integers from 1 to n, as a 1 \u00d7 n board. People live in cells. However, it was hard to move between distinct cells, because of the difficulty of escaping the cell. People wanted to meet people who live in other cells. So, user tncks0121 has made a transportation system to move between these cells, to celebrate the New Year. First, he thought of n - 1 positive integers a1, a2, . . . , an - 1. For every integer i where 1 \u2264 i \u2264 n - 1 the condition 1 \u2264 ai \u2264 n - i holds. Next, he made n - 1 portals, numbered by integers from 1 to n - 1. The i- th ( 1 \u2264 i \u2264 n - 1) portal connects cell i and cell ( i + ai) , and one can travel from cell i to cell ( i + ai) using the i- th portal. Unfortunately, one cannot use the portal backwards, which means one cannot move from cell ( i + ai) to cell i using the i- th portal. It is easy to see that because of condition 1 \u2264 ai \u2264 n - i one can' t leave the Line World using portals. Currently, I am standing at cell 1, and I want to go to cell t. However, I don' t know whether it is possible to go there. Please determine whether I can go to cell t by only using the construted transportation system.",
    "input": "The first line contains two space- separated integers n ( 3 \u2264 n \u2264 3 \u00d7 104) and t ( 2 \u2264 t \u2264 n) \u2014 the number of cells, and the index of the cell which I want to go to. The second line contains n - 1 space- separated integers a1, a2, . . . , an - 1 ( 1 \u2264 ai \u2264 n - i) . It is guaranteed, that using the given transportation system, one cannot leave the Line World.",
    "output": "If I can go to cell t using the transportation system, print \" YES\" . Otherwise, print \" NO\" .",
    "note": "In the first sample, the visited cells are: 1, 2, 4; so we can successfully visit the cell 4. In the second sample, the possible cells to visit are: 1, 2, 4, 6, 7, 8; so we can' t visit the cell 5, which we want to visit.",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "500A"
  },
  {
    "title": "Unbearable Controversy of Being",
    "url": "https://codeforces.com/problemset/problem/489/D",
    "history": "Tomash keeps wandering off and getting lost while he is walking along the streets of Berland. It' s no surprise! In his home town, for any pair of intersections there is exactly one way to walk from one intersection to the other one. The capital of Berland is very different! Tomash has noticed that even simple cases of ambiguity confuse him. So, when he sees a group of four distinct intersections a, b, c and d, such that there are two paths from a to c \u2014 one through b and the other one through d, he calls the group a \" damn rhombus\" . Note that pairs ( a, b) , ( b, c) , ( a, d) , ( d, c) should be directly connected by the roads. Schematically, a damn rhombus is shown on the figure below: Other roads between any of the intersections don' t make the rhombus any more appealing to Tomash, so the four intersections remain a \" damn rhombus\" for him. Given that the capital of Berland has n intersections and m roads and all roads are unidirectional and are known in advance, find the number of \" damn rhombi\" in the city. When rhombi are compared, the order of intersections b and d doesn' t matter.",
    "input": "The first line of the input contains a pair of integers n, m ( 1 \u2264 n \u2264 3000, 0 \u2264 m \u2264 30000) \u2014 the number of intersections and roads, respectively. Next m lines list the roads, one per line. Each of the roads is given by a pair of integers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) \u2014 the number of the intersection it goes out from and the number of the intersection it leads to. Between a pair of intersections there is at most one road in each of the two directions. It is not guaranteed that you can get from any intersection to any other one.",
    "output": "Print the required number of \" damn rhombi\" .",
    "note": "",
    "topics": [
      "brute force",
      "combinatorics",
      "dfs and similar",
      "graphs"
    ],
    "id": "489D"
  },
  {
    "title": "Tourists",
    "url": "https://codeforces.com/problemset/problem/487/E",
    "history": "There are n cities in Cyberland, numbered from 1 to n, connected by m bidirectional roads. The j- th road connects city aj and bj. For tourists, souvenirs are sold in every city of Cyberland. In particular, city i sell it at a price of wi. Now there are q queries for you to handle. There are two types of queries: \" C a w\" : The price in city a is changed to w. \" A a b\" : Now a tourist will travel from city a to b. He will choose a route, he also doesn' t want to visit a city twice. He will buy souvenirs at the city where the souvenirs are the cheapest ( possibly exactly at city a or b) . You should output the minimum possible price that he can buy the souvenirs during his travel. More formally, we can define routes as follow: A route is a sequence of cities [ x1, x2, . . . , xk] , where k is a certain positive integer. For any 1 \u2264 i < j \u2264 k, xi = \u0338 xj. For any 1 \u2264 i < k, there is a road connecting xi and xi + 1. The minimum price of the route is min( wx1, wx2, . . . , wxk) . The required answer is the minimum value of the minimum prices of all valid routes from a to b.",
    "input": "The first line of input contains three integers n, m, q ( 1 \u2264 n, m, q \u2264 105) , separated by a single space. Next n lines contain integers wi ( 1 \u2264 wi \u2264 109) . Next m lines contain pairs of space- separated integers aj and bj ( 1 \u2264 aj, bj \u2264 n, aj = \u0338 bj) . It is guaranteed that there is at most one road connecting the same pair of cities. There is always at least one valid route between any two cities. Next q lines each describe a query. The format is \" C a w\" or \" A a b\" ( 1 \u2264 a, b \u2264 n, 1 \u2264 w \u2264 109) .",
    "output": "For each query of type \" A\" , output the corresponding answer.",
    "note": "For the second sample, an optimal routes are: From 2 to 3 it is [ 2, 3] . From 6 to 4 it is [ 6, 5, 1, 2, 4] . From 6 to 7 it is [ 6, 5, 7] . From 3 to 3 it is [ 3] .",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "487E"
  },
  {
    "title": "Parcels",
    "url": "https://codeforces.com/problemset/problem/480/D",
    "history": "Jaroslav owns a small courier service. He has recently got and introduced a new system of processing parcels. Each parcel is a box, the box has its weight and strength. The system works as follows. It originally has an empty platform where you can put boxes by the following rules: If the platform is empty, then the box is put directly on the platform, otherwise it is put on the topmost box on the platform. The total weight of all boxes on the platform cannot exceed the strength of platform S at any time. The strength of any box of the platform at any time must be no less than the total weight of the boxes that stand above. You can take only the topmost box from the platform. The system receives n parcels, the i- th parcel arrives exactly at time ini, its weight and strength are equal to wi and si, respectively. Each parcel has a value of vi bourles. However, to obtain this value, the system needs to give the parcel exactly at time outi, otherwise Jaroslav will get 0 bourles for it. Thus, Jaroslav can skip any parcel and not put on the platform, formally deliver it at time ini and not get anything for it. Any operation in the problem is performed instantly. This means that it is possible to make several operations of receiving and delivering parcels at the same time and in any order. Please note that the parcel that is delivered at time outi, immediately gets outside of the system, and the following activities taking place at the same time are made \u200b\u200bwithout taking it into consideration. Since the system is very complex, and there are a lot of received parcels, Jaroslav asks you to say what maximum amount of money he can get using his system.",
    "input": "The first line of the input contains two space- separated integers n and S ( 1 \u2264 n \u2264 500, 0 \u2264 S \u2264 1000) . Then n lines follow, the i- th line contains five space- separated integers: ini, outi, wi, si and vi ( 0 \u2264 ini < outi < 2n, 0 \u2264 wi, si \u2264 1000, 1 \u2264 vi \u2264 106) . It is guaranteed that for any i and j ( i = \u0338 j) either ini = \u0338 inj, or outi = \u0338 outj.",
    "output": "Print a single number \u2014 the maximum sum in bourles that Jaroslav can get.",
    "note": "Note to the second sample ( T is the moment in time) : T = 0: The first parcel arrives, we put in on the first platform. T = 1: The second and third parcels arrive, we put the third one on the current top ( i. e. first) parcel on the platform, then we put the secod one on the third one. Now the first parcel holds weight w2 + w3 = 2 and the third parcel holds w2 = 1. T = 2: We deliver the second parcel and get v2 = 1 bourle. Now the first parcel holds weight w3 = 1, the third one holds 0. T = 3: The fourth parcel comes. First we give the third parcel and get v3 = 1 bourle. Now the first parcel holds weight 0. We put the fourth parcel on it \u2014 the first one holds w4 = 2. T = 4: The fifth parcel comes. We cannot put it on the top parcel of the platform as in that case the first parcel will carry weight w4 + w5 = 3, that exceed its strength s1 = 2, that' s unacceptable. We skip the fifth parcel and get nothing for it. T = 5: Nothing happens. T = 6: We deliver the fourth, then the first parcel and get v1 + v4 = 3 bourles for them. Note that you could have skipped the fourth parcel and got the fifth one instead, but in this case the final sum would be 4 bourles.",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "480D"
  },
  {
    "title": "Strongly Connected City",
    "url": "https://codeforces.com/problemset/problem/475/B",
    "history": "Imagine a city with n horizontal streets crossing m vertical streets, forming an ( n - 1) \u00d7 ( m - 1) grid. In order to increase the traffic flow, mayor of the city has decided to make each street one way. This means in each horizontal street, the traffic moves only from west to east or only from east to west. Also, traffic moves only from north to south or only from south to north in each vertical street. It is possible to enter a horizontal street from a vertical street, or vice versa, at their intersection. The mayor has received some street direction patterns. Your task is to check whether it is possible to reach any junction from any other junction in the proposed street direction pattern.",
    "input": "The first line of input contains two integers n and m, ( 2 \u2264 n, m \u2264 20) , denoting the number of horizontal streets and the number of vertical streets. The second line contains a string of length n, made of characters ' < ' and ' > ' , denoting direction of each horizontal street. If the i- th character is equal to ' < ' , the street is directed from east to west otherwise, the street is directed from west to east. Streets are listed in order from north to south. The third line contains a string of length m, made of characters ' ^ ' and ' v' , denoting direction of each vertical street. If the i- th character is equal to ' ^ ' , the street is directed from south to north, otherwise the street is directed from north to south. Streets are listed in order from west to east.",
    "output": "If the given pattern meets the mayor' s criteria, print a single line containing \" YES\" , otherwise print a single line containing \" NO\" .",
    "note": "The figure above shows street directions in the second sample test case.",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "475B"
  },
  {
    "title": "Fedor and Essay",
    "url": "https://codeforces.com/problemset/problem/467/D",
    "history": "After you had helped Fedor to find friends in the \u00abCall of Soldiers 3\u00bb game, he stopped studying completely. Today, the English teacher told him to prepare an essay. Fedor didn' t want to prepare the essay, so he asked Alex for help. Alex came to help and wrote the essay for Fedor. But Fedor didn' t like the essay at all. Now Fedor is going to change the essay using the synonym dictionary of the English language. Fedor does not want to change the meaning of the essay. So the only change he would do: change a word from essay to one of its synonyms, basing on a replacement rule from the dictionary. Fedor may perform this operation any number of times. As a result, Fedor wants to get an essay which contains as little letters \u00abR\u00bb ( the case doesn' t matter) as possible. If there are multiple essays with minimum number of \u00abR\u00bbs he wants to get the one with minimum length ( length of essay is the sum of the lengths of all the words in it) . Help Fedor get the required essay. Please note that in this problem the case of letters doesn' t matter. For example, if the synonym dictionary says that word cat can be replaced with word DOG, then it is allowed to replace the word Cat with the word doG.",
    "input": "The first line contains a single integer m ( 1 \u2264 m \u2264 105) \u2014 the number of words in the initial essay. The second line contains words of the essay. The words are separated by a single space. It is guaranteed that the total length of the words won' t exceed 105 characters. The next line contains a single integer n ( 0 \u2264 n \u2264 105) \u2014 the number of pairs of words in synonym dictionary. The i- th of the next n lines contains two space- separated non- empty words xi and yi. They mean that word xi can be replaced with word yi ( but not vise versa) . It is guaranteed that the total length of all pairs of synonyms doesn' t exceed 5\u00b7105 characters. All the words at input can only consist of uppercase and lowercase letters of the English alphabet.",
    "output": "Print two integers \u2014 the minimum number of letters \u00abR\u00bb in an optimal essay and the minimum length of an optimal essay.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "hashing",
      "strings"
    ],
    "id": "467D"
  },
  {
    "title": "Information Graph",
    "url": "https://codeforces.com/problemset/problem/466/E",
    "history": "There are n employees working in company \" X\" ( let' s number them from 1 to n for convenience) . Initially the employees didn' t have any relationships among each other. On each of m next days one of the following events took place: either employee y became the boss of employee x ( at that, employee x didn' t have a boss before) ; or employee x gets a packet of documents and signs them; then he gives the packet to his boss. The boss signs the documents and gives them to his boss and so on ( the last person to sign the documents sends them to the archive) ; or comes a request of type \" determine whether employee x signs certain documents\" . Your task is to write a program that will, given the events, answer the queries of the described type. At that, it is guaranteed that throughout the whole working time the company didn' t have cyclic dependencies.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of employees and the number of events. Each of the next m lines contains the description of one event ( the events are given in the chronological order) . The first number of the line determines the type of event t ( 1 \u2264 t \u2264 3) . If t = 1, then next follow two integers x and y ( 1 \u2264 x, y \u2264 n) \u2014 numbers of the company employees. It is guaranteed that employee x doesn' t have the boss currently. If t = 2, then next follow integer x ( 1 \u2264 x \u2264 n) \u2014 the number of the employee who got a document packet. If t = 3, then next follow two integers x and i ( 1 \u2264 x \u2264 n; 1 \u2264 i \u2264 [ number of packets that have already been given] ) \u2014 the employee and the number of the document packet for which you need to find out information. The document packets are numbered started from 1 in the chronological order. It is guaranteed that the input has at least one query of the third type.",
    "output": "For each query of the third type print \" YES\" if the employee signed the document package and \" NO\" otherwise. Print all the words without the quotes.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "466E"
  },
  {
    "title": "The Classic Problem",
    "url": "https://codeforces.com/problemset/problem/464/E",
    "history": "You are given a weighted undirected graph on n vertices and m edges. Find the shortest path from vertex s to vertex t or else state that such path doesn' t exist.",
    "input": "The first line of the input contains two space- separated integers \u2014 n and m ( 1 \u2264 n \u2264 105; 0 \u2264 m \u2264 105) . Next m lines contain the description of the graph edges. The i- th line contains three space- separated integers \u2014 ui, vi, xi ( 1 \u2264 ui, vi \u2264 n; 0 \u2264 xi \u2264 105) . That means that vertices with numbers ui and vi are connected by edge of length 2xi ( 2 to the power of xi) . The last line contains two space- separated integers \u2014 the numbers of vertices s and t. The vertices are numbered from 1 to n. The graph contains no multiple edges and self- loops.",
    "output": "In the first line print the remainder after dividing the length of the shortest path by 1000000007 ( 109 + 7) if the path exists, and - 1 if the path doesn' t exist. If the path exists print in the second line integer k \u2014 the number of vertices in the shortest path from vertex s to vertex t; in the third line print k space- separated integers \u2014 the vertices of the shortest path in the visiting order. The first vertex should be vertex s, the last vertex should be vertex t. If there are multiple shortest paths, print any of them.",
    "note": "A path from vertex s to vertex t is a sequence v0, . . . , vk, such that v0 = s, vk = t, and for any i from 0 to k - 1 vertices vi and vi + 1 are connected by an edge. The length of the path is the sum of weights of edges between vi and vi + 1 for all i from 0 to k - 1. The shortest path from s to t is the path which length is minimum among all possible paths from s to t.",
    "topics": [
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "464E"
  },
  {
    "title": "Gargari and Permutations",
    "url": "https://codeforces.com/problemset/problem/463/D",
    "history": "Gargari got bored to play with the bishops and now, after solving the problem about them, he is trying to do math homework. In a math book he have found k permutations. Each of them consists of numbers 1, 2, . . . , n in some order. Now he should find the length of the longest common subsequence of these permutations. Can you help Gargari? You can read about longest common subsequence there: https: / / en. wikipedia. org/ wiki/ Longest_ common_ subsequence_ problem",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 1000; 2 \u2264 k \u2264 5) . Each of the next k lines contains integers 1, 2, . . . , n in some order \u2014 description of the current permutation.",
    "output": "Print the length of the longest common subsequence.",
    "note": "The answer for the first test sample is subsequence [ 1, 2, 3] .",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "implementation"
    ],
    "id": "463D"
  },
  {
    "title": "Little Pony and Summer Sun Celebration",
    "url": "https://codeforces.com/problemset/problem/453/C",
    "history": "Twilight Sparkle learnt that the evil Nightmare Moon would return during the upcoming Summer Sun Celebration after one thousand years of imprisonment on the moon. She tried to warn her mentor Princess Celestia, but the princess ignored her and sent her to Ponyville to check on the preparations for the celebration. Twilight Sparkle wanted to track the path of Nightmare Moon. Unfortunately, she didn' t know the exact path. What she knew is the parity of the number of times that each place Nightmare Moon visited. Can you help Twilight Sparkle to restore any path that is consistent with this information? Ponyville can be represented as an undirected graph ( vertices are places, edges are roads between places) without self- loops and multi- edges. The path can start and end at any place ( also it can be empty) . Each place can be visited multiple times. The path must not visit more than 4n places.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105; 0 \u2264 m \u2264 105) \u2014 the number of places and the number of roads in Ponyville. Each of the following m lines contains two integers ui, vi ( 1 \u2264 ui, vi \u2264 n; ui = \u0338 vi) , these integers describe a road between places ui and vi. The next line contains n integers: x1, x2, . . . , xn ( 0 \u2264 xi \u2264 1) \u2014 the parity of the number of times that each place must be visited. If xi = 0, then the i- th place must be visited even number of times, else it must be visited odd number of times.",
    "output": "Output the number of visited places k in the first line ( 0 \u2264 k \u2264 4n) . Then output k integers \u2014 the numbers of places in the order of path. If xi = 0, then the i- th place must appear in the path even number of times, else i- th place must appear in the path odd number of times. Note, that given road system has no self- loops, therefore any two neighbouring places in the path must be distinct. If there is no required path, output - 1. If there multiple possible paths, you can output any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "453C"
  },
  {
    "title": "Jzzhu and Cities",
    "url": "https://codeforces.com/problemset/problem/449/B",
    "history": "Jzzhu is the president of country A. There are n cities numbered from 1 to n in his country. City 1 is the capital of A. Also there are m roads connecting the cities. One can go from city ui to vi ( and vise versa) using the i- th road, the length of this road is xi. Finally, there are k train routes in the country. One can use the i- th train route to go from capital of the country to city si ( and vise versa) , the length of this route is yi. Jzzhu doesn' t want to waste the money of the country, so he is going to close some of the train routes. Please tell Jzzhu the maximum number of the train routes which can be closed under the following condition: the length of the shortest path from every city to the capital mustn' t change.",
    "input": "The first line contains three integers n, m, k ( 2 \u2264 n \u2264 105; 1 \u2264 m \u2264 3\u00b7105; 1 \u2264 k \u2264 105) . Each of the next m lines contains three integers ui, vi, xi ( 1 \u2264 ui, vi \u2264 n; ui = \u0338 vi; 1 \u2264 xi \u2264 109) . Each of the next k lines contains two integers si and yi ( 2 \u2264 si \u2264 n; 1 \u2264 yi \u2264 109) . It is guaranteed that there is at least one way from every city to the capital. Note, that there can be multiple roads between two cities. Also, there can be multiple routes going to the same city from the capital.",
    "output": "Output a single integer representing the maximum number of the train routes which can be closed.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "449B"
  },
  {
    "title": "Valera and Swaps",
    "url": "https://codeforces.com/problemset/problem/441/D",
    "history": "A permutation p of length n is a sequence of distinct integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) . A permutation is an identity permutation, if for any i the following equation holds pi = i. A swap ( i, j) is the operation that swaps elements pi and pj in the permutation. Let' s assume that f( p) is the minimum number of swaps that you need to make the permutation p an identity permutation. Valera wonders, how he can transform permutation p into any permutation q, such that f( q) = m, using the minimum number of swaps. Help him do that.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3000) \u2014 the length of permutation p. The second line contains n distinct integers p1, p2, . . . , pn ( 1 \u2264 pi \u2264 n) \u2014 Valera' s initial permutation. The last line contains integer m ( 0 \u2264 m < n) .",
    "output": "In the first line, print integer k \u2014 the minimum number of swaps. In the second line, print 2k integers x1, x2, . . . , x2k \u2014 the description of the swap sequence. The printed numbers show that you need to consecutively make swaps ( x1, x2) , ( x3, x4) , . . . , ( x2k - 1, x2k) . If there are multiple sequence swaps of the minimum length, print the lexicographically minimum one.",
    "note": "Sequence x1, x2, . . . , xs is lexicographically smaller than sequence y1, y2, . . . , ys, if there is such integer r ( 1 \u2264 r \u2264 s) , that x1 = y1, x2 = y2, . . . , xr - 1 = yr - 1 and xr < yr.",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "implementation",
      "math",
      "string suffix structures"
    ],
    "id": "441D"
  },
  {
    "title": "The Child and Toy",
    "url": "https://codeforces.com/problemset/problem/437/C",
    "history": "On Children' s Day, the child got a toy from Delayyy as a present. However, the child is so naughty that he can' t wait to destroy the toy. The toy consists of n parts and m ropes. Each rope links two parts, but every pair of parts is linked by at most one rope. To split the toy, the child must remove all its parts. The child can remove a single part at a time, and each remove consume an energy. Let' s define an energy value of part i as vi. The child spend vf1 + vf2 + . . . + vfk energy for removing part i where f1, f2, . . . , fk are the parts that are directly connected to the i- th and haven' t been removed. Help the child to find out, what is the minimum total energy he should spend to remove all n parts.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 1000; 0 \u2264 m \u2264 2000) . The second line contains n integers: v1, v2, . . . , vn ( 0 \u2264 vi \u2264 105) . Then followed m lines, each line contains two integers xi and yi, representing a rope from part xi to part yi ( 1 \u2264 xi, yi \u2264 n; xi = \u0338 yi) . Consider all the parts are numbered from 1 to n.",
    "output": "Output the minimum total energy the child should spend to remove all n parts of the toy.",
    "note": "One of the optimal sequence of actions in the first sample is: First, remove part 3, cost of the action is 20. Then, remove part 2, cost of the action is 10. Next, remove part 4, cost of the action is 10. At last, remove part 1, cost of the action is 0. So the total energy the child paid is 20 + 10 + 10 + 0 = 40, which is the minimum. In the second sample, the child will spend 400 no matter in what order he will remove the parts.",
    "topics": [
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "437C"
  },
  {
    "title": "Dungeons and Candies",
    "url": "https://codeforces.com/problemset/problem/436/C",
    "history": "During the loading of the game \" Dungeons and Candies\" you are required to get descriptions of k levels from the server. Each description is a map of an n \u00d7 m checkered rectangular field. Some cells of the field contain candies ( each cell has at most one candy) . An empty cell is denoted as \" . \" on the map, but if a cell has a candy, it is denoted as a letter of the English alphabet. A level may contain identical candies, in this case the letters in the corresponding cells of the map will be the same. When you transmit information via a network, you want to minimize traffic \u2014 the total size of the transferred data. The levels can be transmitted in any order. There are two ways to transmit the current level A: You can transmit the whole level A. Then you need to transmit n\u00b7m bytes via the network. You can transmit the difference between level A and some previously transmitted level B ( if it exists) ; this operation requires to transmit dA, B\u00b7w bytes, where dA, B is the number of cells of the field that are different for A and B, and w is a constant. Note, that you should compare only the corresponding cells of levels A and B to calculate dA, B. You cannot transform the maps of levels, i. e. rotate or shift them relatively to each other. Your task is to find a way to transfer all the k levels and minimize the traffic.",
    "input": "The first line contains four integers n, m, k, w ( 1 \u2264 n, m \u2264 10; 1 \u2264 k, w \u2264 1000) . Then follows the description of k levels. Each level is described by n lines, each line contains m characters. Each character is either a letter of the English alphabet or a dot ( \" . \" ) . Please note that the case of the letters matters.",
    "output": "In the first line print the required minimum number of transferred bytes. Then print k pairs of integers x1, y1, x2, y2, . . . , xk, yk, describing the way to transfer levels. Pair xi, yi means that level xi needs to be transferred by way yi. If yi equals 0, that means that the level must be transferred using the first way, otherwise yi must be equal to the number of a previously transferred level. It means that you will transfer the difference between levels yi and xi to transfer level xi. Print the pairs in the order of transferring levels. The levels are numbered 1 through k in the order they follow in the input. If there are multiple optimal solutions, you can print any of them.",
    "note": "",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "436C"
  },
  {
    "title": "Points and Segments",
    "url": "https://codeforces.com/problemset/problem/429/E",
    "history": "Iahub isn' t well prepared on geometry problems, but he heard that this year there will be a lot of geometry problems on the IOI selection camp. Scared, Iahub locked himself in the basement and started thinking of new problems of this kind. One of them is the following. Iahub wants to draw n distinct segments [ li, ri] on the OX axis. He can draw each segment with either red or blue. The drawing is good if and only if the following requirement is met: for each point x of the OX axis consider all the segments that contains point x; suppose, that rx red segments and bx blue segments contain point x; for each point x inequality | rx - bx| \u2264 1 must be satisfied. A segment [ l, r] contains a point x if and only if l \u2264 x \u2264 r. Iahub gives you the starting and ending points of all the segments. You have to find any good drawing for him.",
    "input": "The first line of input contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of segments. The i- th of the next n lines contains two integers li and ri ( 0 \u2264 li \u2264 ri \u2264 109) \u2014 the borders of the i- th segment. It' s guaranteed that all the segments are distinct.",
    "output": "If there is no good drawing for a given test, output a single integer - 1. Otherwise output n integers; each integer must be 0 or 1. The i- th number denotes the color of the i- th segment ( 0 is red and 1 is blue) . If there are multiple good drawings you can output any of them.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "429E"
  },
  {
    "title": "Checkposts",
    "url": "https://codeforces.com/problemset/problem/427/C",
    "history": "Your city has n junctions. There are m one- way roads between the junctions. As a mayor of the city, you have to ensure the security of all the junctions. To ensure the security, you have to build some police checkposts. Checkposts can only be built in a junction. A checkpost at junction i can protect junction j if either i = j or the police patrol car can go to j from i and then come back to i. Building checkposts costs some money. As some areas of the city are more expensive than others, building checkpost at some junctions might cost more money than other junctions. You have to determine the minimum possible money needed to ensure the security of all the junctions. Also you have to find the number of ways to ensure the security in minimum price and in addition in minimum number of checkposts. Two ways are different if any of the junctions contains a checkpost in one of them and do not contain in the other.",
    "input": "In the first line, you will be given an integer n, number of junctions ( 1 \u2264 n \u2264 105) . In the next line, n space- separated integers will be given. The ith integer is the cost of building checkpost at the ith junction ( costs will be non- negative and will not exceed 109) . The next line will contain an integer m ( 0 \u2264 m \u2264 3\u00b7105) . And each of the next m lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n; u = \u0338 v) . A pair ui, vi means, that there is a one- way road which goes from ui to vi. There will not be more than one road between two nodes in the same direction.",
    "output": "Print two integers separated by spaces. The first one is the minimum possible money needed to ensure the security of all the junctions. And the second one is the number of ways you can ensure the security modulo 1000000007 ( 109 + 7) .",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "two pointers"
    ],
    "id": "427C"
  },
  {
    "title": "Bug in Code",
    "url": "https://codeforces.com/problemset/problem/420/C",
    "history": "Recently a serious bug has been found in the FOS code. The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who' s bugged the code? Each of the n coders on the meeting said: ' I know for sure that either x or y did it! ' The head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That' s why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects? Note that even if some coder was chosen as a suspect, he can agree with the head' s choice if he named the other chosen coder at the meeting.",
    "input": "The first line contains integers n and p ( 3 \u2264 n \u2264 3\u00b7105; 0 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people. Each of the next n lines contains two integers xi, yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the numbers of coders named by the i- th coder. It is guaranteed that xi = \u0338 i, yi = \u0338 i, xi = \u0338 yi.",
    "output": "Print a single integer \u2013\u2013 the number of possible two- suspect sets. Note that the order of the suspects doesn' t matter, that is, sets ( 1, 2) \u0438 ( 2, 1) are considered identical.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "implementation",
      "two pointers"
    ],
    "id": "420C"
  },
  {
    "title": "Big Problems for Organizers",
    "url": "https://codeforces.com/problemset/problem/418/D",
    "history": "The Finals of the \" Russian Code Cup\" 2214 will be held in n hotels. Two hotels ( let' s assume that they are the main hotels) , will host all sorts of events, and the remaining hotels will accommodate the participants. The hotels are connected by n - 1 roads, you can get from any hotel to any other one. The organizers wonder what is the minimum time all the participants need to get to the main hotels, if each participant goes to the main hotel that is nearest to him and moving between two hotels connected by a road takes one unit of time. The hosts consider various options for the location of the main hotels. For each option help the organizers to find minimal time.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 100000) \u2014 the number of hotels. The next n - 1 lines contain two integers each \u2014 the numbers of the hotels that have a road between them. Consider hotels are numbered from 1 to n. The next line contains an integer m ( 1 \u2264 m \u2264 100000) \u2014 the number of queries. The following m lines contains two distinct integers each \u2014 the numbers of the hotels we assume to be the main.",
    "output": "For each request of the organizers print a single integer \u2014 the time that all participants need to reach the main hotels.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "trees"
    ],
    "id": "418D"
  },
  {
    "title": "Football",
    "url": "https://codeforces.com/problemset/problem/417/C",
    "history": "One day, at the \" Russian Code Cup\" event it was decided to play football as an out of competition event. All participants was divided into n teams and played several matches, two teams could not play against each other more than once. The appointed Judge was the most experienced member \u2014 Pavel. But since he was the wisest of all, he soon got bored of the game and fell asleep. Waking up, he discovered that the tournament is over and the teams want to know the results of all the matches. Pavel didn' t want anyone to discover about him sleeping and not keeping an eye on the results, so he decided to recover the results of all games. To do this, he asked all the teams and learned that the real winner was friendship, that is, each team beat the other teams exactly k times. Help Pavel come up with chronology of the tournir that meets all the conditions, or otherwise report that there is no such table.",
    "input": "The first line contains two integers \u2014 n and k ( 1 \u2264 n, k \u2264 1000) .",
    "output": "In the first line print an integer m \u2014 number of the played games. The following m lines should contain the information about all the matches, one match per line. The i- th line should contain two integers ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) . The numbers ai and bi mean, that in the i- th match the team with number ai won against the team with number bi. You can assume, that the teams are numbered from 1 to n. If a tournir that meets the conditions of the problem does not exist, then print - 1.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "417C"
  },
  {
    "title": "President's Path",
    "url": "https://codeforces.com/problemset/problem/416/E",
    "history": "Good old Berland has n cities and m roads. Each road connects a pair of distinct cities and is bidirectional. Between any pair of cities, there is at most one road. For each road, we know its length. We also know that the President will soon ride along the Berland roads from city s to city t. Naturally, he will choose one of the shortest paths from s to t, but nobody can say for sure which path he will choose. The Minister for Transport is really afraid that the President might get upset by the state of the roads in the country. That is the reason he is planning to repair the roads in the possible President' s path. Making the budget for such an event is not an easy task. For all possible distinct pairs s, t ( s < t) find the number of roads that lie on at least one shortest path from s to t.",
    "input": "The first line of the input contains integers n, m ( 2 \u2264 n \u2264 500, 0 \u2264 m \u2264 n\u00b7( n - 1) / 2) \u2014 the number of cities and roads, correspondingly. Then m lines follow, containing the road descriptions, one description per line. Each description contains three integers xi, yi, li ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi, 1 \u2264 li \u2264 106) , where xi, yi are the numbers of the cities connected by the i- th road and li is its length.",
    "output": "Print the sequence of integers c12, c13, . . . , c1n, c23, c24, . . . , c2n, . . . , cn - 1, n, where cst is the number of roads that can lie on the shortest path from s to t. Print the elements of sequence c in the described order. If the pair of cities s and t don' t have a path between them, then cst = 0.",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "416E"
  },
  {
    "title": "Graph Cutting",
    "url": "https://codeforces.com/problemset/problem/405/E",
    "history": "Little Chris is participating in a graph cutting contest. He' s a pro. The time has come to test his skills to the fullest. Chris is given a simple undirected connected graph with n vertices ( numbered from 1 to n) and m edges. The problem is to cut it into edge- distinct paths of length 2. Formally, Chris has to partition all edges of the graph into pairs in such a way that the edges in a single pair are adjacent and each edge must be contained in exactly one pair. For example, the figure shows a way Chris can cut a graph. The first sample test contains the description of this graph. You are given a chance to compete with Chris. Find a way to cut the given graph or determine that it is impossible!",
    "input": "The first line of input contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) , the number of vertices and the number of edges in the graph. The next m lines contain the description of the graph' s edges. The i- th line contains two space- separated integers ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , the numbers of the vertices connected by the i- th edge. It is guaranteed that the given graph is simple ( without self- loops and multi- edges) and connected. Note: since the size of the input and output could be very large, don' t use slow output techniques in your language. For example, do not use input and output streams ( cin, cout) in C+ + .",
    "output": "If it is possible to cut the given graph into edge- distinct paths of length 2, output lines. In the i- th line print three space- separated integers xi, yi and zi, the description of the i- th path. The graph should contain this path, i. e. , the graph should contain edges ( xi, yi) and ( yi, zi) . Each edge should appear in exactly one path of length 2. If there are multiple solutions, output any of them. If it is impossible to cut the given graph, print \" No solution\" ( without quotes) .",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "405E"
  },
  {
    "title": "Restore Graph",
    "url": "https://codeforces.com/problemset/problem/404/C",
    "history": "Valera had an undirected connected graph without self- loops and multiple edges consisting of n vertices. The graph had an interesting property: there were at most k edges adjacent to each of its vertices. For convenience, we will assume that the graph vertices were indexed by integers from 1 to n. One day Valera counted the shortest distances from one of the graph vertices to all other ones and wrote them out in array d. Thus, element d[ i] of the array shows the shortest distance from the vertex Valera chose to vertex number i. Then something irreparable terrible happened. Valera lost the initial graph. However, he still has the array d. Help him restore the lost graph.",
    "input": "The first line contains two space- separated integers n and k ( 1 \u2264 k < n \u2264 105) . Number n shows the number of vertices in the original graph. Number k shows that at most k edges were adjacent to each vertex in the original graph. The second line contains space- separated integers d[ 1] , d[ 2] , . . . , d[ n] ( 0 \u2264 d[ i] < n) . Number d[ i] shows the shortest distance from the vertex Valera chose to the vertex number i.",
    "output": "If Valera made a mistake in his notes and the required graph doesn' t exist, print in the first line number - 1. Otherwise, in the first line print integer m ( 0 \u2264 m \u2264 106) \u2014 the number of edges in the found graph. In each of the next m lines print two space- separated integers ai and bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , denoting the edge that connects vertices with numbers ai and bi. The graph shouldn' t contain self- loops and multiple edges. If there are multiple possible answers, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "sortings"
    ],
    "id": "404C"
  },
  {
    "title": "Strictly Positive Matrix",
    "url": "https://codeforces.com/problemset/problem/402/E",
    "history": "You have matrix a of size n \u00d7 n. Let' s number the rows of the matrix from 1 to n from top to bottom, let' s number the columns from 1 to n from left to right. Let' s use aij to represent the element on the intersection of the i- th row and the j- th column. Matrix a meets the following two conditions: for any numbers i, j ( 1 \u2264 i, j \u2264 n) the following inequality holds: aij \u2265 0; . Matrix b is strictly positive, if for any numbers i, j ( 1 \u2264 i, j \u2264 n) the inequality bij > 0 holds. You task is to determine if there is such integer k \u2265 1, that matrix ak is strictly positive.",
    "input": "The first line contains integer n ( 2 \u2264 n \u2264 2000) \u2014 the number of rows and columns in matrix a. The next n lines contain the description of the rows of matrix a. The i- th line contains n non- negative integers ai1, ai2, . . . , ain ( 0 \u2264 aij \u2264 50) . It is guaranteed that .",
    "output": "If there is a positive integer k \u2265 1, such that matrix ak is strictly positive, print \" YES\" ( without the quotes) . Otherwise, print \" NO\" ( without the quotes) .",
    "note": "",
    "topics": [
      "graphs",
      "math"
    ],
    "id": "402E"
  },
  {
    "title": "Searching for Graph",
    "url": "https://codeforces.com/problemset/problem/402/C",
    "history": "Let' s call an undirected graph of n vertices p- interesting, if the following conditions fulfill: the graph contains exactly 2n + p edges; the graph doesn' t contain self- loops and multiple edges; for any integer k ( 1 \u2264 k \u2264 n) , any subgraph consisting of k vertices contains at most 2k + p edges. A subgraph of a graph is some set of the graph vertices and some set of the graph edges. At that, the set of edges must meet the condition: both ends of each edge from the set must belong to the chosen set of vertices. Your task is to find a p- interesting graph consisting of n vertices.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 5) \u2014 the number of tests in the input. Next t lines each contains two space- separated integers: n, p ( 5 \u2264 n \u2264 24; p \u2265 0; ) \u2014 the number of vertices in the graph and the interest value for the appropriate test. It is guaranteed that the required graph exists.",
    "output": "For each of the t tests print 2n + p lines containing the description of the edges of a p- interesting graph: the i- th line must contain two space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) \u2014 two vertices, connected by an edge in the resulting graph. Consider the graph vertices numbered with integers from 1 to n. Print the answers to the tests in the order the tests occur in the input. If there are multiple solutions, you can print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs"
    ],
    "id": "402C"
  },
  {
    "title": "Dima and Bacteria",
    "url": "https://codeforces.com/problemset/problem/400/D",
    "history": "Dima took up the biology of bacteria, as a result of his experiments, he invented k types of bacteria. Overall, there are n bacteria at his laboratory right now, and the number of bacteria of type i equals ci. For convenience, we will assume that all the bacteria are numbered from 1 to n. The bacteria of type ci are numbered from to . With the help of special equipment Dima can move energy from some bacteria into some other one. Of course, the use of such equipment is not free. Dima knows m ways to move energy from some bacteria to another one. The way with number i can be described with integers ui, vi and xi mean that this way allows moving energy from bacteria with number ui to bacteria with number vi or vice versa for xi dollars. Dima' s Chef ( Inna) calls the type- distribution correct if there is a way ( may be non- direct) to move energy from any bacteria of the particular type to any other bacteria of the same type ( between any two bacteria of the same type) for zero cost. As for correct type- distribution the cost of moving the energy depends only on the types of bacteria help Inna to determine is the type- distribution correct? If it is, print the matrix d with size k \u00d7 k. Cell d[ i] [ j] of this matrix must be equal to the minimal possible cost of energy- moving from bacteria with type i to bacteria with type j.",
    "input": "The first line contains three integers n, m, k ( 1 \u2264 n \u2264 105; 0 \u2264 m \u2264 105; 1 \u2264 k \u2264 500) . The next line contains k integers c1, c2, . . . , ck ( 1 \u2264 ci \u2264 n) . Each of the next m lines contains three integers ui, vi, xi ( 1 \u2264 ui, vi \u2264 105; 0 \u2264 xi \u2264 104) . It is guaranteed that .",
    "output": "If Dima' s type- distribution is correct, print string \u00abYes\u00bb, and then k lines: in the i- th line print integers d[ i] [ 1] , d[ i] [ 2] , . . . , d[ i] [ k] ( d[ i] [ i] = 0) . If there is no way to move energy from bacteria i to bacteria j appropriate d[ i] [ j] must equal to - 1. If the type- distribution isn' t correct print \u00abNo\u00bb.",
    "note": "",
    "topics": [
      "dsu",
      "graphs",
      "shortest paths"
    ],
    "id": "400D"
  },
  {
    "title": "On Changing Tree",
    "url": "https://codeforces.com/problemset/problem/396/C",
    "history": "You are given a rooted tree consisting of n vertices numbered from 1 to n. The root of the tree is a vertex number 1. Initially all vertices contain number 0. Then come q queries, each query has one of the two types: The format of the query: 1 v x k. In response to the query, you need to add to the number at vertex v number x; to the numbers at the descendants of vertex v at distance 1, add x - k; and so on, to the numbers written in the descendants of vertex v at distance i, you need to add x - ( i\u00b7k) . The distance between two vertices is the number of edges in the shortest path between these vertices. The format of the query: 2 v. In reply to the query you should print the number written in vertex v modulo 1000000007 ( 109 + 7) . Process the queries given in the input.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of vertices in the tree. The second line contains n - 1 integers p2, p3, . . . pn ( 1 \u2264 pi < i) , where pi is the number of the vertex that is the parent of vertex i in the tree. The third line contains integer q ( 1 \u2264 q \u2264 3\u00b7105) \u2014 the number of queries. Next q lines contain the queries, one per line. The first number in the line is type. It represents the type of the query. If type = 1, then next follow space- separated integers v, x, k ( 1 \u2264 v \u2264 n; 0 \u2264 x < 109 + 7; 0 \u2264 k < 109 + 7) . If type = 2, then next follows integer v ( 1 \u2264 v \u2264 n) \u2014 the vertex where you need to find the value of the number.",
    "output": "For each query of the second type print on a single line the number written in the vertex from the query. Print the number modulo 1000000007 ( 109 + 7) .",
    "note": "You can read about a rooted tree here: http: / / en. wikipedia. org/ wiki/ Tree_ ( graph_ theory) .",
    "topics": [
      "data structures",
      "graphs",
      "trees"
    ],
    "id": "396C"
  },
  {
    "title": "Fox and Minimal path",
    "url": "https://codeforces.com/problemset/problem/388/B",
    "history": "Fox Ciel wants to write a task for a programming contest. The task is: \" You are given a simple undirected graph with n vertexes. Each its edge has unit length. You should calculate the number of shortest paths between vertex 1 and vertex 2. \" Same with some writers, she wants to make an example with some certain output: for example, her birthday or the number of her boyfriend. Can you help her to make a test case with answer equal exactly to k?",
    "input": "The first line contains a single integer k ( 1 \u2264 k \u2264 109) .",
    "output": "You should output a graph G with n vertexes ( 2 \u2264 n \u2264 1000) . There must be exactly k shortest paths between vertex 1 and vertex 2 of the graph. The first line must contain an integer n. Then adjacency matrix G with n rows and n columns must follow. Each element of the matrix must be ' N' or ' Y' . If Gij is ' Y' , then graph G has a edge connecting vertex i and vertex j. Consider the graph vertexes are numbered from 1 to n. The graph must be undirected and simple: Gii = ' N' and Gij = Gji must hold. And there must be at least one path between vertex 1 and vertex 2. It' s guaranteed that the answer exists. If there multiple correct answers, you can output any of them.",
    "note": "In first example, there are 2 shortest paths: 1- 3- 2 and 1- 4- 2. In second example, there are 9 shortest paths: 1- 3- 6- 2, 1- 3- 7- 2, 1- 3- 8- 2, 1- 4- 6- 2, 1- 4- 7- 2, 1- 4- 8- 2, 1- 5- 6- 2, 1- 5- 7- 2, 1- 5- 8- 2.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "graphs",
      "implementation",
      "math"
    ],
    "id": "388B"
  },
  {
    "title": "Game with Points",
    "url": "https://codeforces.com/problemset/problem/386/D",
    "history": "You are playing the following game. There are n points on a plane. They are the vertices of a regular n- polygon. Points are labeled with integer numbers from 1 to n. Each pair of distinct points is connected by a diagonal, which is colored in one of 26 colors. Points are denoted by lowercase English letters. There are three stones positioned on three distinct vertices. All stones are the same. With one move you can move the stone to another free vertex along some diagonal. The color of this diagonal must be the same as the color of the diagonal, connecting another two stones. Your goal is to move stones in such way that the only vertices occupied by stones are 1, 2 and 3. You must achieve such position using minimal number of moves. Write a program which plays this game in an optimal way.",
    "input": "In the first line there is one integer n ( 3 \u2264 n \u2264 70) \u2014 the number of points. In the second line there are three space- separated integer from 1 to n \u2014 numbers of vertices, where stones are initially located. Each of the following n lines contains n symbols \u2014 the matrix denoting the colors of the diagonals. Colors are denoted by lowercase English letters. The symbol j of line i denotes the color of diagonal between points i and j. Matrix is symmetric, so j- th symbol of i- th line is equal to i- th symbol of j- th line. Main diagonal is filled with ' * ' symbols because there is no diagonal, connecting point to itself.",
    "output": "If there is no way to put stones on vertices 1, 2 and 3, print - 1 on a single line. Otherwise, on the first line print minimal required number of moves and in the next lines print the description of each move, one move per line. To describe a move print two integers. The point from which to remove the stone, and the point to which move the stone. If there are several optimal solutions, print any of them.",
    "note": "In the first example we can move stone from point 4 to point 1 because this points are connected by the diagonal of color ' a' and the diagonal connection point 2 and 3, where the other stones are located, are connected by the diagonal of the same color. After that stones will be on the points 1, 2 and 3.",
    "topics": [
      "dp",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "386D"
  },
  {
    "title": "Ksenia and Pawns",
    "url": "https://codeforces.com/problemset/problem/382/D",
    "history": "Ksenia has a chessboard of size n \u00d7 m. Each cell of the chessboard contains one of the characters: \" < \" , \" > \" , \" ^ \" , \" v\" , \" # \" . The cells that contain character \" # \" are blocked. We know that all chessboard cells that touch the border are blocked. Ksenia is playing with two pawns on this chessboard. Initially, she puts the pawns on the chessboard. One cell of the chessboard can contain two pawns if and only if the cell is blocked. In other cases two pawns can not stand in one cell. The game begins when Ksenia put pawns on the board. In one move, Ksenia moves each pawn to a side adjacent cell in the direction of arrows painted on the cell on which the corresponding pawn sits ( if the pawn sits on \" # \" , it does not move) . Assume that Ksenia moves pawns simultaneously ( see the second test case) . Of course, Ksenia plays for points. How can one calculate the points per game? Very simply! Let' s count how many movements the first pawn made and how many movements the second pawn made, sum these two numbers \u2014 it will be the resulting score of the game. Ksenia wonders: what is the maximum number of points she can earn ( for that, she should place the pawns optimally well early in the game) . Help her and find that number.",
    "input": "The first line contains two integers, n and m ( 1 \u2264 n, m \u2264 2000) \u2014 the sizes of the board. Each of the following n lines contains m characters \u2013 the board' s description. Each character is one of the characters: \" < \" , \" > \" , \" ^ \" , \" v\" , \" # \" . It is guaranteed that the border cells of the table are blocked cells ( with character \" # \" ) .",
    "output": "If Ksenia can get infinitely many points, print - 1. Otherwise, print the maximum number of points she can get.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "382D"
  },
  {
    "title": "Sereja and Tree",
    "url": "https://codeforces.com/problemset/problem/380/B",
    "history": "Sereja adores trees. Today he came up with a revolutionary new type of binary root trees. His new tree consists of n levels, each vertex is indexed by two integers: the number of the level and the number of the vertex on the current level. The tree root is at level 1, its index is ( 1, 1) . Here is a pseudo code of tree construction. / / the global data are integer arrays cnt[ ] , left[ ] [ ] , right[ ] [ ] cnt[ 1] = 1; fill arrays left[ ] [ ] , right[ ] [ ] with values - 1; for( level = 1; level < n; level = level + 1) cnt[ level + 1] = 0; for( position = 1; position < = cnt[ level] ; position = position + 1) if( the value of position is a power of two) / / that is, 1, 2, 4, 8. . . left[ level] [ position] = cnt[ level + 1] + 1; right[ level] [ position] = cnt[ level + 1] + 2; cnt[ level + 1] = cnt[ level + 1] + 2; else right[ level] [ position] = cnt[ level + 1] + 1; cnt[ level + 1] = cnt[ level + 1] + 1; After the pseudo code is run, cell cnt[ level] contains the number of vertices on level level. Cell left[ level] [ position] contains the number of the vertex on the level level + 1, which is the left child of the vertex with index ( level, position) , or it contains - 1, if the vertex doesn' t have a left child. Similarly, cell right[ level] [ position] is responsible for the right child. You can see how the tree with n = 4 looks like in the notes. Serja loves to make things complicated, so he first made a tree and then added an empty set A( level, position) for each vertex. Then Sereja executes m operations. Each operation is of one of the two following types: The format of the operation is \" 1 t l r x\" . For all vertices level, position ( level = t; l \u2264 position \u2264 r) add value x to set A( level, position) . The format of the operation is \" 2 t v\" . For vertex level, position ( level = t, position = v) , find the union of all sets of vertices that are in the subtree of vertex ( level, position) . Print the size of the union of these sets. Help Sereja execute the operations. In this problem a set contains only distinct values like std: : set in C+ + .",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 7000) . Next m lines contain the descriptions of the operations. The operation of the first type is given by five integers: 1 t l r x ( 1 \u2264 t \u2264 n; 1 \u2264 l \u2264 r \u2264 cnt[ t] ; 1 \u2264 x \u2264 106) . The operation of the second type is given by three integers: 2 t v ( 1 \u2264 t \u2264 n; 1 \u2264 v \u2264 cnt[ t] ) .",
    "output": "For each operation of the second type, print the answer on a single line.",
    "note": "You can find the definitions that are used while working with root trees by this link: http: / / en. wikipedia. org/ wiki/ Tree_ ( graph_ theory) You can see an example of a constructed tree at n = 4 below.",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": "380B"
  },
  {
    "title": "Inna and Dima",
    "url": "https://codeforces.com/problemset/problem/374/C",
    "history": "Inna and Dima bought a table of size n \u00d7 m in the shop. Each cell of the table contains a single letter: \" D\" , \" I\" , \" M\" , \" A\" . Inna loves Dima, so she wants to go through his name as many times as possible as she moves through the table. For that, Inna acts as follows: initially, Inna chooses some cell of the table where letter \" D\" is written; then Inna can move to some side- adjacent table cell that contains letter \" I\" ; then from this cell she can go to one of the side- adjacent table cells that contains the written letter \" M\" ; then she can go to a side- adjacent cell that contains letter \" A\" . Then Inna assumes that she has gone through her sweetheart' s name; Inna' s next move can be going to one of the side- adjacent table cells that contains letter \" D\" and then walk on through name DIMA in the similar manner. Inna never skips a letter. So, from the letter \" D\" she always goes to the letter \" I\" , from the letter \" I\" she always goes the to letter \" M\" , from the letter \" M\" she always goes to the letter \" A\" , and from the letter \" A\" she always goes to the letter \" D\" . Depending on the choice of the initial table cell, Inna can go through name DIMA either an infinite number of times or some positive finite number of times or she can' t go through his name once. Help Inna find out what maximum number of times she can go through name DIMA.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 103) . Then follow n lines that describe Inna and Dima' s table. Each line contains m characters. Each character is one of the following four characters: \" D\" , \" I\" , \" M\" , \" A\" . Note that it is not guaranteed that the table contains at least one letter \" D\" .",
    "output": "If Inna cannot go through name DIMA once, print on a single line \" Poor Dima! \" without the quotes. If there is the infinite number of names DIMA Inna can go through, print \" Poor Inna! \" without the quotes. Otherwise print a single integer \u2014 the maximum number of times Inna can go through name DIMA.",
    "note": "Notes to the samples: In the first test sample, Inna cannot go through name DIMA a single time. In the second test sample, Inna can go through the infinite number of words DIMA. For that, she should move in the clockwise direction starting from the lower right corner. In the third test sample the best strategy is to start from the cell in the upper left corner of the table. Starting from this cell, Inna can go through name DIMA four times.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "implementation"
    ],
    "id": "374C"
  },
  {
    "title": "Rook, Bishop and King",
    "url": "https://codeforces.com/problemset/problem/370/A",
    "history": "Little Petya is learning to play chess. He has already learned how to move a king, a rook and a bishop. Let us remind you the rules of moving chess pieces. A chessboard is 64 square fields organized into an 8 \u00d7 8 table. A field is represented by a pair of integers ( r, c) \u2014 the number of the row and the number of the column ( in a classical game the columns are traditionally indexed by letters) . Each chess piece takes up exactly one field. To make a move is to move a chess piece, the pieces move by the following rules: A rook moves any number of fields horizontally or vertically. A bishop moves any number of fields diagonally. A king moves one field in any direction \u2014 horizontally, vertically or diagonally. The pieces move like that Petya is thinking about the following problem: what minimum number of moves is needed for each of these pieces to move from field ( r1, c1) to field ( r2, c2) ? At that, we assume that there are no more pieces besides this one on the board. Help him solve this problem.",
    "input": "The input contains four integers r1, c1, r2, c2 ( 1 \u2264 r1, c1, r2, c2 \u2264 8) \u2014 the coordinates of the starting and the final field. The starting field doesn' t coincide with the final one. You can assume that the chessboard rows are numbered from top to bottom 1 through 8, and the columns are numbered from left to right 1 through 8.",
    "output": "Print three space- separated integers: the minimum number of moves the rook, the bishop and the king ( in this order) is needed to move from field ( r1, c1) to field ( r2, c2) . If a piece cannot make such a move, print a 0 instead of the corresponding number.",
    "note": "",
    "topics": [
      "graphs",
      "math",
      "shortest paths"
    ],
    "id": "370A"
  },
  {
    "title": "Valera and Fools",
    "url": "https://codeforces.com/problemset/problem/369/D",
    "history": "One fine morning, n fools lined up in a row. After that, they numbered each other with numbers from 1 to n, inclusive. Each fool got a unique number. The fools decided not to change their numbers before the end of the fun. Every fool has exactly k bullets and a pistol. In addition, the fool number i has probability of pi ( in percent) that he kills the fool he shoots at. The fools decided to have several rounds of the fun. Each round of the fun looks like this: each currently living fool shoots at another living fool with the smallest number ( a fool is not stupid enough to shoot at himself) . All shots of the round are perfomed at one time ( simultaneously) . If there is exactly one living fool, he does not shoot. Let' s define a situation as the set of numbers of all the living fools at the some time. We say that a situation is possible if for some integer number j ( 0 \u2264 j \u2264 k) there is a nonzero probability that after j rounds of the fun this situation will occur. Valera knows numbers p1, p2, . . . , pn and k. Help Valera determine the number of distinct possible situations.",
    "input": "The first line contains two integers n, k ( 1 \u2264 n, k \u2264 3000) \u2014 the initial number of fools and the number of bullets for each fool. The second line contains n integers p1, p2, . . . , pn ( 0 \u2264 pi \u2264 100) \u2014 the given probabilities ( in percent) .",
    "output": "Print a single number \u2014 the answer to the problem.",
    "note": "In the first sample, any situation is possible, except for situation 1, 2. In the second sample there is exactly one fool, so he does not make shots. In the third sample the possible situations are 1, 2 ( after zero rounds) and the \" empty\" situation ( after one round) . In the fourth sample, the only possible situation is 1, 2, 3.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "369D"
  },
  {
    "title": "Valera and Elections",
    "url": "https://codeforces.com/problemset/problem/369/C",
    "history": "The city Valera lives in is going to hold elections to the city Parliament. The city has n districts and n - 1 bidirectional roads. We know that from any district there is a path along the roads to any other district. Let' s enumerate all districts in some way by integers from 1 to n, inclusive. Furthermore, for each road the residents decided if it is the problem road or not. A problem road is a road that needs to be repaired. There are n candidates running the elections. Let' s enumerate all candidates in some way by integers from 1 to n, inclusive. If the candidate number i will be elected in the city Parliament, he will perform exactly one promise \u2014 to repair all problem roads on the way from the i- th district to the district 1, where the city Parliament is located. Help Valera and determine the subset of candidates such that if all candidates from the subset will be elected to the city Parliament, all problem roads in the city will be repaired. If there are several such subsets, you should choose the subset consisting of the minimum number of candidates.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 105) \u2014 the number of districts in the city. Then n - 1 lines follow. Each line contains the description of a city road as three positive integers xi, yi, ti ( 1 \u2264 xi, yi \u2264 n, 1 \u2264 ti \u2264 2) \u2014 the districts connected by the i- th bidirectional road and the road type. If ti equals to one, then the i- th road isn' t the problem road; if ti equals to two, then the i- th road is the problem road. It' s guaranteed that the graph structure of the city is a tree.",
    "output": "In the first line print a single non- negative number k \u2014 the minimum size of the required subset of candidates. Then on the second line print k space- separated integers a1, a2, . . . ak \u2014 the numbers of the candidates that form the required subset. If there are multiple solutions, you are allowed to print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "369C"
  },
  {
    "title": "Sereja and the Arrangement of Numbers",
    "url": "https://codeforces.com/problemset/problem/367/C",
    "history": "Let' s call an array consisting of n integer numbers a1, a2, . . . , an, beautiful if it has the following property: consider all pairs of numbers x, y ( x = \u0338 y) , such that number x occurs in the array a and number y occurs in the array a; for each pair x, y must exist some position j ( 1 \u2264 j < n) , such that at least one of the two conditions are met, either aj = x, aj + 1 = y, or aj = y, aj + 1 = x. Sereja wants to build a beautiful array a, consisting of n integers. But not everything is so easy, Sereja' s friend Dima has m coupons, each contains two integers qi, wi. Coupon i costs wi and allows you to use as many numbers qi as you want when constructing the array a. Values qi are distinct. Sereja has no coupons, so Dima and Sereja have made the following deal. Dima builds some beautiful array a of n elements. After that he takes wi rubles from Sereja for each qi, which occurs in the array a. Sereja believed his friend and agreed to the contract, and now he is wondering, what is the maximum amount of money he can pay. Help Sereja, find the maximum amount of money he can pay to Dima.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 2\u00b7106, 1 \u2264 m \u2264 105) . Next m lines contain pairs of integers. The i- th line contains numbers qi, wi ( 1 \u2264 qi, wi \u2264 105) . It is guaranteed that all qi are distinct.",
    "output": "In a single line print maximum amount of money ( in rubles) Sereja can pay. Please, do not use the",
    "note": "In the first sample Sereja can pay 5 rubles, for example, if Dima constructs the following array: [ 1, 2, 1, 2, 2] . There are another optimal arrays for this test. In the third sample Sereja can pay 100 rubles, if Dima constructs the following array: [ 2] .",
    "topics": [
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "367C"
  },
  {
    "title": "Petya and Pipes",
    "url": "https://codeforces.com/problemset/problem/362/E",
    "history": "A little boy Petya dreams of growing up and becoming the Head Berland Plumber. He is thinking of the problems he will have to solve in the future. Unfortunately, Petya is too inexperienced, so you are about to solve one of such problems for Petya, the one he' s the most interested in. The Berland capital has n water tanks numbered from 1 to n. These tanks are connected by unidirectional pipes in some manner. Any pair of water tanks is connected by at most one pipe in each direction. Each pipe has a strictly positive integer width. Width determines the number of liters of water per a unit of time this pipe can transport. The water goes to the city from the main water tank ( its number is 1) . The water must go through some pipe path and get to the sewer tank with cleaning system ( its number is n) . Petya wants to increase the width of some subset of pipes by at most k units in total so that the width of each pipe remains integer. Help him determine the maximum amount of water that can be transmitted per a unit of time from the main tank to the sewer tank after such operation is completed.",
    "input": "The first line contains two space- separated integers n and k ( 2 \u2264 n \u2264 50, 0 \u2264 k \u2264 1000) . Then follow n lines, each line contains n integers separated by single spaces. The i + 1- th row and j- th column contain number cij \u2014 the width of the pipe that goes from tank i to tank j ( 0 \u2264 cij \u2264 106, cii = 0) . If cij = 0, then there is no pipe from tank i to tank j.",
    "output": "Print a single integer \u2014 the maximum amount of water that can be transmitted from the main tank to the sewer tank per a unit of time.",
    "note": "In the first test Petya can increase width of the pipe that goes from the 1st to the 2nd water tank by 7 units. In the second test Petya can increase width of the pipe that goes from the 1st to the 2nd water tank by 4 units, from the 2nd to the 3rd water tank by 3 units, from the 3rd to the 4th water tank by 2 units and from the 4th to 5th water tank by 1 unit.",
    "topics": [
      "flows",
      "graphs",
      "shortest paths"
    ],
    "id": "362E"
  },
  {
    "title": "Fools and Foolproof Roads",
    "url": "https://codeforces.com/problemset/problem/362/D",
    "history": "You must have heard all about the Foolland on your Geography lessons. Specifically, you must know that federal structure of this country has been the same for many centuries. The country consists of n cities, some pairs of cities are connected by bidirectional roads, each road is described by its length li. The fools lived in their land joyfully, but a recent revolution changed the king. Now the king is Vasily the Bear. Vasily divided the country cities into regions, so that any two cities of the same region have a path along the roads between them and any two cities of different regions don' t have such path. Then Vasily decided to upgrade the road network and construct exactly p new roads in the country. Constructing a road goes like this: We choose a pair of distinct cities u, v that will be connected by a new road ( at that, it is possible that there already is a road between these cities) . We define the length of the new road: if cities u, v belong to distinct regions, then the length is calculated as min( 109, S + 1) ( S \u2014 the total length of all roads that exist in the linked regions) , otherwise we assume that the length equals 1000. We build a road of the specified length between the chosen cities. If the new road connects two distinct regions, after construction of the road these regions are combined into one new region. Vasily wants the road constructing process to result in the country that consists exactly of q regions. Your task is to come up with such road constructing plan for Vasily that it meets the requirement and minimizes the total length of the built roads.",
    "input": "The first line contains four integers n ( 1 \u2264 n \u2264 105) , m ( 0 \u2264 m \u2264 105) , p ( 0 \u2264 p \u2264 105) , q ( 1 \u2264 q \u2264 n) \u2014 the number of cities in the Foolland, the number of existing roads, the number of roads that are planned to construct and the required number of regions. Next m lines describe the roads that exist by the moment upgrading of the roads begun. Each of these lines contains three integers xi, yi, li: xi, yi \u2014 the numbers of the cities connected by this road ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) , li \u2014 length of the road ( 1 \u2264 li \u2264 109) . Note that one pair of cities can be connected with multiple roads.",
    "output": "If constructing the roads in the required way is impossible, print a single string \" NO\" ( without the quotes) . Otherwise, in the first line print word \" YES\" ( without the quotes) , and in the next p lines print the road construction plan. Each line of the plan must consist of two distinct integers, giving the numbers of the cities connected by a road. The road must occur in the plan in the order they need to be constructed. If there are multiple optimal solutions, you can print any of them.",
    "note": "Consider the first sample. Before the reform the Foolland consists of four regions. The first region includes cities 1, 2, 3, the second region has cities 4 and 6, the third region has cities 5, 7, 8, the fourth region has city 9. The total length of the roads in these cities is 11, 20, 5 and 0, correspondingly. According to the plan, we first build the road of length 6 between cities 5 and 9, then the road of length 23 between cities 1 and 9. Thus, the total length of the built roads equals 29.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "362D"
  },
  {
    "title": "Levko and Game",
    "url": "https://codeforces.com/problemset/problem/360/E",
    "history": "Levko loves sports pathfinding competitions in his city very much. In order to boost his performance, Levko spends his spare time practicing. The practice is a game. The city consists of n intersections connected by m + k directed roads. Two or more roads can connect the same pair of intersections. Besides, there can be roads leading from an intersection to itself. Levko and Zenyk are playing a game. First Levko stands on intersection s1, and Zenyk stands on intersection s2. They both want to get to intersection f. The person who does it quicker wins. If they get there at the same time, the game ends with a draw. By agreement both players start simultaneously and move with the same speed. Levko wants to win very much. He knows the lengths of all the roads in the city. Also he knows that he can change the lengths of some roads ( there are k such roads at all) if he pays the government. So, the government can change the length of the i- th road to any integer value in the segment [ li, ri] ( both borders inclusive) . Levko wondered if he can reconstruct the roads so as to win the game and whether he can hope for the draw if he cannot win. You should consider that both players play optimally well. It is guaranteed that we can get from intersections s1 and s2 to intersection f.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m \u2264 104, 1 \u2264 k \u2264 100) . The second line contains three integers s1, s2 and f ( 1 \u2264 s1, s2, f \u2264 n) . The next m lines contains the descriptions of the roads that cannot be changed by Levko. Each line contains three integers ai, bi and ci ( 1 \u2264 ai, bi \u2264 n, 1 \u2264 ci \u2264 109) , representing a road from intersection ai to intersection bi of length ci. The next k lines contains the descriptions of the roads that can be changed by Levko. Each line contains four integers ai, bi, li and ri ( 1 \u2264 ai, bi \u2264 n, 1 \u2264 li \u2264 ri \u2264 109) , representing a road from intersection ai to intersection bi, Levko can set the road' s length within limits [ li, ri] . Consider all intersections numbered from 1 to n. It is guaranteed that you can get from intersections s1 and s2 to intersection f.",
    "output": "In the first line print string \" WIN\" ( without the quotes) if Levko can win this game, string \" DRAW\" ( without the quotes) if Levko can end the game with a draw and \" LOSE\" ( without the quotes) if he loses for sure. If the answer is \" WIN\" or \" DRAW\" , then print on the second line k space- separated integers \u2014 the length of the roads Levko sets in the order they occur in the input.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "360E"
  },
  {
    "title": "Dima and Kicks",
    "url": "https://codeforces.com/problemset/problem/358/E",
    "history": "Dima is a good person. In fact, he' s great. But all good things come to an end. . . Seryozha is going to kick Dima just few times. . For this reason he divides the room into unit squares. Now the room is a rectangle n \u00d7 m consisting of unit squares. For the beginning, Seryozha put Dima in a center of some square. Then he started to kick Dima ( it is known, that he kicks Dima at least once) . Each time when Dima is kicked he flyes up and moves into one of four directions ( up, left, right, down) . On each move Dima passes k ( k > 1) unit of the length in the corresponding direction. Seryozha is really kind, so he kicks Dima in such way that Dima never meets the walls ( in other words, Dima never leave the room' s space) . Seryozha is also dynamic character so Dima never flies above the same segment, connecting a pair of adjacent squares, twice. Seryozha kicks Dima for a long time, but Dima is not vindictive \u2014 Dima writes. Dima marked all squares in which he was staying or above which he was flying. Thanks to kicks, Dima does not remember the k value, so he asks you to find all possible values which matches to the Dima' s records.",
    "input": "The first line contains n and m ( 1 \u2264 n, m \u2264 103) \u2014 size of the room. Next n lines goes, each contains m numbers aij \u2014 Dima' s notes: aij = 1, if Dima was staying in the square ( i, j) or was flying above it. Otherwise aij = 0. At least one aij equals 1.",
    "output": "In a single line in accending order print all k ( k > 1) , which matches the Dima' s notes. If there are no such k and Dima invented this story with kicks, print - 1.",
    "note": "",
    "topics": [
      "brute force",
      "dsu",
      "graphs",
      "implementation"
    ],
    "id": "358E"
  },
  {
    "title": "Wrong Floyd",
    "url": "https://codeforces.com/problemset/problem/350/E",
    "history": "Valera conducts experiments with algorithms that search for shortest paths. He has recently studied the Floyd' s algorithm, so it' s time to work with it. Valera' s already written the code that counts the shortest distance between any pair of vertexes in a non- directed connected graph from n vertexes and m edges, containing no loops and multiple edges. Besides, Valera' s decided to mark part of the vertexes. He' s marked exactly k vertexes a1, a2, . . . , ak. Valera' s code is given below. ans[ i] [ j] / / the shortest distance for a pair of vertexes i, ja[ i] / / vertexes, marked by Valerafor( i = 1; i < = n; i+ + ) for( j = 1; j < = n; j+ + ) if ( i = = j) ans[ i] [ j] = 0; else ans[ i] [ j] = INF; / / INF is a very large number for( i = 1; i < = m; i+ + ) read a pair of vertexes u, v that have a non- directed edge between them; ans[ u] [ v] = 1; ans[ v] [ u] = 1; for ( i = 1; i < = k; i+ + ) v = a[ i] ; for( j = 1; j < = n; j+ + ) for( r = 1; r < = n; r+ + ) ans[ j] [ r] = min( ans[ j] [ r] , ans[ j] [ v] + ans[ v] [ r] ) ; Valera has seen that his code is wrong. Help the boy. Given the set of marked vertexes a1, a2, . . . , ak, find such non- directed connected graph, consisting of n vertexes and m edges, for which Valera' s code counts the wrong shortest distance for at least one pair of vertexes ( i, j) . Valera is really keen to get a graph without any loops and multiple edges. If no such graph exists, print - 1.",
    "input": "The first line of the input contains three integers n, m, k ( 3 \u2264 n \u2264 300, 2 \u2264 k \u2264 n , ) \u2014 the number of vertexes, the number of edges and the number of marked vertexes. The second line of the input contains k space- separated integers a1, a2, . . . ak ( 1 \u2264 ai \u2264 n) \u2014 the numbers of the marked vertexes. It is guaranteed that all numbers ai are distinct.",
    "output": "If the graph doesn' t exist, print - 1 on a single line. Otherwise, print m lines, each containing two integers u, v \u2014 the description of the edges of the graph Valera' s been looking for.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "350E"
  },
  {
    "title": "Resort",
    "url": "https://codeforces.com/problemset/problem/350/B",
    "history": "Valera' s finally decided to go on holiday! He packed up and headed for a ski resort. Valera' s fancied a ski trip but he soon realized that he could get lost in this new place. Somebody gave him a useful hint: the resort has n objects ( we will consider the objects indexed in some way by integers from 1 to n) , each object is either a hotel or a mountain. Valera has also found out that the ski resort had multiple ski tracks. Specifically, for each object v, the resort has at most one object u, such that there is a ski track built from object u to object v. We also know that no hotel has got a ski track leading from the hotel to some object. Valera is afraid of getting lost on the resort. So he wants you to come up with a path he would walk along. The path must consist of objects v1, v2, . . . , vk ( k \u2265 1) and meet the following conditions: Objects with numbers v1, v2, . . . , vk - 1 are mountains and the object with number vk is the hotel. For any integer i ( 1 \u2264 i < k) , there is exactly one ski track leading from object vi. This track goes to object vi + 1. The path contains as many objects as possible ( k is maximal) . Help Valera. Find such path that meets all the criteria of our hero!",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 the number of objects. The second line contains n space- separated integers type1, type2, . . . , typen \u2014 the types of the objects. If typei equals zero, then the i- th object is the mountain. If typei equals one, then the i- th object is the hotel. It is guaranteed that at least one object is a hotel. The third line of the input contains n space- separated integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 n) \u2014 the description of the ski tracks. If number ai equals zero, then there is no such object v, that has a ski track built from v to i. If number ai doesn' t equal zero, that means that there is a track built from object ai to object i.",
    "output": "In the first line print k \u2014 the maximum possible path length for Valera. In the second line print k integers v1, v2, . . . , vk \u2014 the path. If there are multiple solutions, you can print any of them.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "350B"
  },
  {
    "title": "Robot Control",
    "url": "https://codeforces.com/problemset/problem/346/D",
    "history": "The boss of the Company of Robot is a cruel man. His motto is \" Move forward Or Die! \" . And that is exactly what his company' s product do. Look at the behavior of the company' s robot when it is walking in the directed graph. This behavior has been called \" Three Laws of Robotics\" : Law 1. The Robot will destroy itself when it visits a vertex of the graph which it has already visited. Law 2. The Robot will destroy itself when it has no way to go ( that is when it reaches a vertex whose out- degree is zero) . Law 3. The Robot will move randomly when it has multiple ways to move ( that is when it reach a vertex whose out- degree is more than one) . Of course, the robot can move only along the directed edges of the graph. Can you imagine a robot behaving like that? That' s why they are sold at a very low price, just for those who are short of money, including mzry1992, of course. mzry1992 has such a robot, and she wants to move it from vertex s to vertex t in a directed graph safely without self- destruction. Luckily, she can send her robot special orders at each vertex. A special order shows the robot which way to move, if it has multiple ways to move ( to prevent random moving of the robot according to Law 3) . When the robot reaches vertex t, mzry1992 takes it off the graph immediately. So you can see that, as long as there exists a path from s to t, she can always find a way to reach the goal ( whatever the vertex t has the outdegree of zero or not) . Sample 2 However, sending orders is expensive, so your task is to find the minimum number of orders mzry1992 needs to send in the worst case. Please note that mzry1992 can give orders to the robot while it is walking on the graph. Look at the first sample to clarify that part of the problem.",
    "input": "The first line contains two integers n ( 1 \u2264 n \u2264 106) \u2014 the number of vertices of the graph, and m ( 1 \u2264 m \u2264 106) \u2014 the number of edges. Then m lines follow, each with two integers ui and vi ( 1 \u2264 ui, vi \u2264 n; vi = \u0338 ui) , these integers denote that there is a directed edge from vertex ui to vertex vi. The last line contains two integers s and t ( 1 \u2264 s, t \u2264 n) . It is guaranteed that there are no multiple edges and self- loops.",
    "output": "If there is a way to reach a goal, print the required minimum number of orders in the worst case. Otherwise, print - 1.",
    "note": "Consider the first test sample. Initially the robot is on vertex 1. So, on the first step the robot can go to vertex 2 or 3. No matter what vertex the robot chooses, mzry1992 must give an order to the robot. This order is to go to vertex 4. If mzry1992 doesn' t give an order to the robot at vertex 2 or 3, the robot can choose the \" bad\" outgoing edge ( return to vertex 1) according Law 3. So, the answer is one.",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "346D"
  },
  {
    "title": "Chain Letter",
    "url": "https://codeforces.com/problemset/problem/345/D",
    "history": "A chain letter is a kind of a message which urges the recipient to forward it to as many contacts as possible, usually with some kind of mystic explanation. Of course, this is only a superstition, and you don' t believe in it, but all your friends do. You know that today there will be one of these letters going around, and you want to know how many times you' ll receive it \u2014 of course, not that you' ll be sending it yourself! You are given an array of strings f with n elements which describes the contacts between you and n - 1 of your friends: j- th character of i- th string ( f[ i] [ j] ) is \" 1\" if people i and j will send messages to each other, and \" 0\" otherwise. Person 1 starts sending the letter to all his contacts; every person who receives the letter for the first time sends it to all his contacts. You are person n, and you don' t forward the letter when you receive it. Calculate the number of copies of this letter you' ll receive.",
    "input": "The first line of the input contains an integer n ( 2 \u2264 n \u2264 50) \u2014 the number of people involved. Next n following lines contain elements of f, strings of length n. Each character in f is either \" 0\" or \" 1\" . It' s guaranteed that two following equations hold: f[ i] [ j] = f[ j] [ i] , f[ i] [ i] = 0, for all i, j ( 1 \u2264 i, j \u2264 n) .",
    "output": "Output a single integer \u2014 the number of copies of the letter you will receive eventually.",
    "note": "In the first case, everybody sends letters to everyone, so you get copies from all three of your friends. In the second case, you don' t know any of these people, so they don' t bother you with their superstitious stuff. In the third case, two of your friends send you copies of the letter but the third friend doesn' t know them so he is unaffected.",
    "topics": [
      "*special",
      "dfs and similar",
      "graphs"
    ],
    "id": "345D"
  },
  {
    "title": "Simple Molecules",
    "url": "https://codeforces.com/problemset/problem/344/B",
    "history": "Mad scientist Mike is busy carrying out experiments in chemistry. Today he will attempt to join three atoms into one molecule. A molecule consists of atoms, with some pairs of atoms connected by atomic bonds. Each atom has a valence number \u2014 the number of bonds the atom must form with other atoms. An atom can form one or multiple bonds with any other atom, but it cannot form a bond with itself. The number of bonds of an atom in the molecule must be equal to its valence number. Mike knows valence numbers of the three atoms. Find a molecule that can be built from these atoms according to the stated rules, or determine that it is impossible.",
    "input": "The single line of the input contains three space- separated integers a, b and c ( 1 \u2264 a, b, c \u2264 106) \u2014 the valence numbers of the given atoms.",
    "output": "If such a molecule can be built, print three space- separated integers \u2014 the number of bonds between the 1- st and the 2- nd, the 2- nd and the 3- rd, the 3- rd and the 1- st atoms, correspondingly. If there are multiple solutions, output any of them. If there is no solution, print \" Impossible\" ( without the quotes) .",
    "note": "The first sample corresponds to the first figure. There are no bonds between atoms 1 and 2 in this case. The second sample corresponds to the second figure. There is one or more bonds between each pair of atoms. The third sample corresponds to the third figure. There is no solution, because an atom cannot form bonds with itself. The configuration in the fourth figure is impossible as each atom must have at least one atomic bond.",
    "topics": [
      "brute force",
      "graphs",
      "math"
    ],
    "id": "344B"
  },
  {
    "title": "Pumping Stations",
    "url": "https://codeforces.com/problemset/problem/343/E",
    "history": "Mad scientist Mike has applied for a job. His task is to manage a system of water pumping stations. The system consists of n pumping stations, which are numbered by integers from 1 to n. Some pairs of stations are connected by bidirectional pipes through which water can flow in either direction ( but only in one at a time) . For each pipe you know its bandwidth \u2014 the maximum number of liters of water that can flow through it in one hour. Each pumping station can pump incoming water from some stations to other stations through the pipes, provided that in one hour the total influx of water to the station is equal to the total outflux of water from the station. It is Mike' s responsibility to pump water between stations. From station a to station b through the pipes ( possibly through other stations) within one hour one can transmit a certain number of liters of water according to the rules described above. During this time, water from other stations can not flow into station a, and can not flow out of the station b. However, any amount of water can flow out of station a or in station b. If a total of x litres of water flows out of the station a in an hour, then Mike gets x bollars more to his salary. To get paid, Mike needs to work for n - 1 days, according to the contract. On the first day he selects two stations v1 and v2, and within one hour he pumps a certain amount of water from v1 to v2. Next, on the i- th day Mike chooses a station vi + 1 that has been never selected before, and pumps a certain amount of water out of the station vi to station vi + 1 for one hour. The quantity of water he pumps on the i- th day does not depend on the amount of water pumped on the ( i - 1) - th day. Mike needs to earn as much bollars as he can for his projects. Help Mike find such a permutation of station numbers v1, v2, . . . , vn so Mike will be able to earn the highest possible salary.",
    "input": "The first line of the input contains two space- separated integers n and m ( 2 \u2264 n \u2264 200, 1 \u2264 m \u2264 1000) \u2014 the number of stations and pipes in the system, accordingly. The i- th of the next m lines contains three space- separated integers ai, bi and ci ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 ci \u2264 100) \u2014 the numbers of stations connected by the i- th pipe and the pipe' s bandwidth, accordingly. It is guaranteed that any two stations are connected by at most one pipe and that there is a pipe path between any two stations.",
    "output": "On the first line print a single integer \u2014 the maximum salary Mike can earn. On the second line print a space- separated permutation of n numbers from 1 to n \u2014 the numbers of stations in the sequence v1, v2, . . . , vn. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "divide and conquer",
      "flows",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "343E"
  },
  {
    "title": "Water Tree",
    "url": "https://codeforces.com/problemset/problem/343/D",
    "history": "Mad scientist Mike has constructed a rooted tree, which consists of n vertices. Each vertex is a reservoir which can be either empty or filled with water. The vertices of the tree are numbered from 1 to n with the root at vertex 1. For each vertex, the reservoirs of its children are located below the reservoir of this vertex, and the vertex is connected with each of the children by a pipe through which water can flow downwards. Mike wants to do the following operations with the tree: Fill vertex v with water. Then v and all its children are filled with water. Empty vertex v. Then v and all its ancestors are emptied. Determine whether vertex v is filled with water at the moment. Initially all vertices of the tree are empty. Mike has already compiled a full list of operations that he wants to perform in order. Before experimenting with the tree Mike decided to run the list through a simulation. Help Mike determine what results will he get after performing all the operations.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 500000) \u2014 the number of vertices in the tree. Each of the following n - 1 lines contains two space- separated numbers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the edges of the tree. The next line contains a number q ( 1 \u2264 q \u2264 500000) \u2014 the number of operations to perform. Each of the following q lines contains two space- separated numbers ci ( 1 \u2264 ci \u2264 3) , vi ( 1 \u2264 vi \u2264 n) , where ci is the operation type ( according to the numbering given in the statement) , and vi is the vertex on which the operation is performed. It is guaranteed that the given graph is a tree.",
    "output": "For each type 3 operation print 1 on a separate line if the vertex is full, and 0 if the vertex is empty. Print the answers to queries in the order in which the queries are given in the input.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "343D"
  },
  {
    "title": "Xenia and Weights",
    "url": "https://codeforces.com/problemset/problem/339/C",
    "history": "Xenia has a set of weights and pan scales. Each weight has an integer weight from 1 to 10 kilos. Xenia is going to play with scales and weights a little. For this, she puts weights on the scalepans, one by one. The first weight goes on the left scalepan, the second weight goes on the right scalepan, the third one goes on the left scalepan, the fourth one goes on the right scalepan and so on. Xenia wants to put the total of m weights on the scalepans. Simply putting weights on the scales is not interesting, so Xenia has set some rules. First, she does not put on the scales two consecutive weights of the same weight. That is, the weight that goes i- th should be different from the ( i + 1) - th weight for any i ( 1 \u2264 i < m) . Second, every time Xenia puts a weight on some scalepan, she wants this scalepan to outweigh the other one. That is, the sum of the weights on the corresponding scalepan must be strictly greater than the sum on the other pan. You are given all types of weights available for Xenia. You can assume that the girl has an infinite number of weights of each specified type. Your task is to help Xenia lay m weights on \u200b\u200bthe scales or to say that it can' t be done.",
    "input": "The first line contains a string consisting of exactly ten zeroes and ones: the i- th ( i \u2265 1) character in the line equals \" 1\" if Xenia has i kilo weights, otherwise the character equals \" 0\" . The second line contains integer m ( 1 \u2264 m \u2264 1000) .",
    "output": "In the first line print \" YES\" , if there is a way to put m weights on the scales by all rules. Otherwise, print in the first line \" NO\" . If you can put m weights on the scales, then print in the next line m integers \u2014 the weights' weights in the order you put them on the scales. If there are multiple solutions, you can print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "339C"
  },
  {
    "title": "Theft of Blueprints",
    "url": "https://codeforces.com/problemset/problem/332/D",
    "history": "Insurgents accidentally got hold of the plan of a top secret research polygon created on a distant planet for the needs of the Galaxy Empire. The insurgents suppose that this polygon is developing new deadly weapon. The polygon consists of n missile silos connected by bidirectional underground passages. The passages are linked to laboratories where research is conducted. Naturally, the passages are guarded severely: the passage between silos i and j is patrolled by ci, j war droids. The insurgents studied the polygon plan and noticed its unusual structure. As it turned out, for any k- element set of silos S there is exactly one silo that is directly connected by a passage with each silo from S ( we' ll call this silo adjacent with S) . Having considered that, the insurgents decided to act as follows: they choose a k- element set of silos S; a group of scouts lands from the air into each silo from S; each group moves along the corresponding passage to the silo, adjacent with S ( as the scouts move, they check out the laboratories and watch for any signs of weapon blueprints) ; in the silo, adjacent with S, the groups get on the ship and fly away. The danger of the operation is the total number of droids that patrol the passages through which the scouts will go. The danger of the operation obviously only depends on the way to choose set S. The insurgents haven' t yet decided on the exact silos to send the scouts to. However, they already want to start preparing the weapons for the scout groups. To do that, the insurgents need to know the mathematical average of the dangers of the operations that correspond to all possible ways to choose set S. Solve this problem to help the insurgents protect the ideals of the Republic!",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 2000, 1 \u2264 k \u2264 n - 1) \u2014 the number of silos and the number of scout groups, correspondingly. The next n - 1 lines describe the polygon plan: the i- th of these lines contains n - i integers ci, i + 1, ci, i + 2, . . . , ci, n \u2014 the number of droids that patrol the corresponding passages ( - 1 \u2264 ci, j \u2264 109; if ci, j = - 1, then silos i and j don' t have a passage between them) . All passages are bidirectional, that is, we can assume that ci, j = cj, i. No passages connect a silo with itself. It is guaranteed that the polygon plan meets the conditions of the problem statement.",
    "output": "Print the average danger of the scouting operation, rounded down to an integer. Note that at the given limits the answer to the problem always fits into the standard integer 64- bit data type. Please do not use the",
    "note": "In the first sample there are 6 one- element sets of silos. For sets 1, 5 the operation danger will equal 8, for sets 3, 6 \u2014 3, for sets 2, 4 \u2014 5. The mathematical average equals . In the second sample there are 3 two- elements sets of silos: 1, 3 ( danger equals 21) , 1, 2 ( danger equals 11) , 2, 3 ( danger equals 10) . The average operation danger equals .",
    "topics": [
      "graphs",
      "math"
    ],
    "id": "332D"
  },
  {
    "title": "Deja Vu",
    "url": "https://codeforces.com/problemset/problem/331/E1",
    "history": "Everybody knows that we have been living in the Matrix for a long time. And in the new seventh Matrix the world is ruled by beavers. So let' s take beaver Neo. Neo has so- called \" deja vu\" outbursts when he gets visions of events in some places he' s been at or is going to be at. Let' s examine the phenomenon in more detail. We can say that Neo' s city is represented by a directed graph, consisting of n shops and m streets that connect the shops. No two streets connect the same pair of shops ( besides, there can' t be one street from A to B and one street from B to A) . No street connects a shop with itself. As Neo passes some streets, he gets visions. No matter how many times he passes street k, every time he will get the same visions in the same order. A vision is a sequence of shops. We know that Neo is going to get really shocked if he passes the way from some shop a to some shop b, possible coinciding with a, such that the list of visited shops in the real life and in the visions coincide. Suggest beaver Neo such path of non- zero length. Or maybe you can even count the number of such paths modulo 1000000007 ( 109 + 7) ? . .",
    "input": "The first line contains integers n and m \u2014 the number of shops and the number of streets, correspondingly, 1 \u2264 n \u2264 50, . Next m lines contain the descriptions of the streets in the following format: xi yi ki v1 v2 . . . vk, where xi and yi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi) are indices of shops connected by a street, ki ( 0 \u2264 ki \u2264 n) is the number of visions on the way from xi to yi; v1, v2, . . . , vk ( 1 \u2264 vi \u2264 n) describe the visions: the numbers of the shops Neo saw. Note that the order of the visions matters. It is guaranteed that the total number of visions on all streets doesn' t exceed 105. to get 50 points, you need to find any ( not necessarily simple) path of length at most 2\u00b7n, that meets the attributes described above ( subproblem E1) ; to get 50 more points, you need to count for each length from 1 to 2\u00b7n the number of paths that have the attribute described above ( subproblem E2) .",
    "output": "Subproblem E1. In the first line print an integer k ( 1 \u2264 k \u2264 2\u00b7n) \u2014 the numbers of shops on Neo' s path. In the next line print k integers \u2014 the number of shops in the order Neo passes them. If the graph doesn' t have such paths or the length of the shortest path includes more than 2\u00b7n shops, print on a single line 0. Subproblem E2. Print 2\u00b7n lines. The i- th line must contain a single integer \u2014 the number of required paths of length i modulo 1000000007 ( 109 + 7) .",
    "note": "The input in both samples are the same. The first sample contains the answer to the first subproblem, the second sample contains the answer to the second subproblem.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "331E1"
  },
  {
    "title": "Escaping on Beaveractor",
    "url": "https://codeforces.com/problemset/problem/331/D2",
    "history": "Don' t put up with what you' re sick of! The Smart Beaver decided to escape from the campus of Beaver Science Academy ( BSA) . BSA is a b \u00d7 b square on a plane. Each point x, y ( 0 \u2264 x, y \u2264 b) belongs to BSA. To make the path quick and funny, the Beaver constructed a Beaveractor, an effective and comfortable types of transport. The campus obeys traffic rules: there are n arrows, parallel to the coordinate axes. The arrows do not intersect and do not touch each other. When the Beaveractor reaches some arrow, it turns in the arrow' s direction and moves on until it either reaches the next arrow or gets outside the campus. The Beaveractor covers exactly one unit of space per one unit of time. You can assume that there are no obstacles to the Beaveractor. The BSA scientists want to transport the brand new Beaveractor to the \" Academic Tractor\" research institute and send the Smart Beaver to do his postgraduate studies and sharpen pencils. They have q plans, representing the Beaveractor' s initial position ( xi, yi) , the initial motion vector wi and the time ti that have passed after the escape started. Your task is for each of the q plans to determine the Smart Beaver' s position after the given time.",
    "input": "The first line contains two integers: the number of traffic rules n and the size of the campus b, 0 \u2264 n, 1 \u2264 b. Next n lines contain the rules. Each line of the rules contains four space- separated integers x0, y0, x1, y1 \u2014 the beginning and the end of the arrow. It is guaranteed that all arrows are parallel to the coordinate axes and have no common points. All arrows are located inside the campus, that is, 0 \u2264 x0, y0, x1, y1 \u2264 b holds. Next line contains integer q \u2014 the number of plans the scientists have, 1 \u2264 q \u2264 105. The i- th plan is represented by two integers, xi, yi are the Beaveractor' s coordinates at the initial time, 0 \u2264 xi, yi \u2264 b, character wi, that takes value U, D, L, R and sets the initial direction up, down, to the left or to the right correspondingly ( the Y axis is directed upwards) , and ti \u2014 the time passed after the escape started, 0 \u2264 ti \u2264 1015. to get 30 points you need to solve the problem with constraints n, b \u2264 30 ( subproblem D1) ; to get 60 points you need to solve the problem with constraints n, b \u2264 1000 ( subproblems D1+ D2) ; to get 100 points you need to solve the problem with constraints n, b \u2264 105 ( subproblems D1+ D2+ D3) .",
    "output": "Print q lines. Each line should contain two integers \u2014 the Beaveractor' s coordinates at the final moment of time for each plan. If the Smart Beaver manages to leave the campus in time ti, print the coordinates of the last point in the campus he visited.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "331D2"
  },
  {
    "title": "Road Construction",
    "url": "https://codeforces.com/problemset/problem/330/B",
    "history": "A country has n cities. Initially, there is no road in the country. One day, the king decides to construct some roads connecting pairs of cities. Roads can be traversed either way. He wants those roads to be constructed in such a way that it is possible to go from each city to any other city by traversing at most two roads. You are also given m pairs of cities \u2014 roads cannot be constructed between these pairs of cities. Your task is to construct the minimum number of roads that still satisfy the above conditions. The constraints will guarantee that this is always possible.",
    "input": "The first line consists of two integers n and m . Then m lines follow, each consisting of two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , which means that it is not possible to construct a road connecting cities ai and bi. Consider the cities are numbered from 1 to n. It is guaranteed that every pair of cities will appear at most once in the input.",
    "output": "You should print an integer s: the minimum number of roads that should be constructed, in the first line. Then s lines should follow, each consisting of two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , which means that a road should be constructed between cities ai and bi. If there are several solutions, you may print any of them.",
    "note": "This is one possible solution of the example: These are examples of wrong solutions: The above solution is wrong because it doesn' t use the minimum number of edges ( 4 vs 3) . In addition, it also tries to construct a road between cities 1 and 3, while the input specifies that it is not allowed to construct a road between the pair. The above solution is wrong because you need to traverse at least 3 roads to go from city 1 to city 3, whereas in your country it must be possible to go from any city to another by traversing at most 2 roads. Finally, the above solution is wrong because it must be possible to go from any city to another, whereas it is not possible in this country to go from city 1 to 3, 2 to 3, and 4 to 3.",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "330B"
  },
  {
    "title": "Block Tower",
    "url": "https://codeforces.com/problemset/problem/327/D",
    "history": "After too much playing on paper, Iahub has switched to computer games. The game he plays is called \" Block Towers\" . It is played in a rectangular grid with n rows and m columns ( it contains n \u00d7 m cells) . The goal of the game is to build your own city. Some cells in the grid are big holes, where Iahub can' t build any building. The rest of cells are empty. In some empty cell Iahub can build exactly one tower of two following types: Blue towers. Each has population limit equal to 100. Red towers. Each has population limit equal to 200. However, it can be built in some cell only if in that moment at least one of the neighbouring cells has a Blue Tower. Two cells are neighbours is they share a side. Iahub is also allowed to destroy a building from any cell. He can do this operation as much as he wants. After destroying a building, the other buildings are not influenced, and the destroyed cell becomes empty ( so Iahub can build a tower in this cell if needed, see the second example for such a case) . Iahub can convince as many population as he wants to come into his city. So he needs to configure his city to allow maximum population possible. Therefore he should find a sequence of operations that builds the city in an optimal way, so that total population limit is as large as possible. He says he' s the best at this game, but he doesn' t have the optimal solution. Write a program that calculates the optimal one, to show him that he' s not as good as he thinks.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 500) . Each of the next n lines contains m characters, describing the grid. The j- th character in the i- th line is ' . ' if you' re allowed to build at the cell with coordinates ( i, j) a tower ( empty cell) or ' # ' if there is a big hole there.",
    "output": "Print an integer k in the first line ( 0 \u2264 k \u2264 106) \u2014 the number of operations Iahub should perform to obtain optimal result. Each of the following k lines must contain a single operation in the following format: \u00abB x y\u00bb ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) \u2014 building a blue tower at the cell ( x, y) ; \u00abR x y\u00bb ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) \u2014 building a red tower at the cell ( x, y) ; \u00abD x y\u00bb ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) \u2014 destroying a tower at the cell ( x, y) . If there are multiple solutions you can output any of them. Note, that you shouldn' t minimize the number of operations.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs"
    ],
    "id": "327D"
  },
  {
    "title": "The Red Button",
    "url": "https://codeforces.com/problemset/problem/325/E",
    "history": "Piegirl found the red button. You have one last chance to change the inevitable end. The circuit under the button consists of n nodes, numbered from 0 to n - 1. In order to deactivate the button, the n nodes must be disarmed in a particular order. Node 0 must be disarmed first. After disarming node i, the next node to be disarmed must be either node ( 2\u00b7i) modulo n or node ( 2\u00b7i) + 1 modulo n. The last node to be disarmed must be node 0. Node 0 must be disarmed twice, but all other nodes must be disarmed exactly once. Your task is to find any such order and print it. If there is no such order, print - 1.",
    "input": "Input consists of a single integer n ( 2 \u2264 n \u2264 105) .",
    "output": "Print an order in which you can to disarm all nodes. If it is impossible, print - 1 instead. If there are multiple orders, print any one of them.",
    "note": "",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "325E"
  },
  {
    "title": "Monsters and Diamonds",
    "url": "https://codeforces.com/problemset/problem/325/C",
    "history": "Piegirl has found a monster and a book about monsters and pies. When she is reading the book, she found out that there are n types of monsters, each with an ID between 1 and n. If you feed a pie to a monster, the monster will split into some number of monsters ( possibly zero) , and at least one colorful diamond. Monsters may be able to split in multiple ways. At the begining Piegirl has exactly one monster. She begins by feeding the monster a pie. She continues feeding pies to monsters until no more monsters are left. Then she collects all the diamonds that were created. You will be given a list of split rules describing the way in which the various monsters can split. Every monster can split in at least one way, and if a monster can split in multiple ways then each time when it splits Piegirl can choose the way it splits. For each monster, determine the smallest and the largest number of diamonds Piegirl can possibly collect, if initially she has a single instance of that monster. Piegirl has an unlimited supply of pies.",
    "input": "The first line contains two integers: m and n ( 1 \u2264 m, n \u2264 105) , the number of possible splits and the number of different monster types. Each of the following m lines contains a split rule. Each split rule starts with an integer ( a monster ID) mi ( 1 \u2264 mi \u2264 n) , and a positive integer li indicating the number of monsters and diamonds the current monster can split into. This is followed by li integers, with positive integers representing a monster ID and - 1 representing a diamond. Each monster will have at least one split rule. Each split rule will have at least one diamond. The sum of li across all split rules will be at most 105.",
    "output": "For each monster, in order of their IDs, print a line with two integers: the smallest and the largest number of diamonds that can possibly be collected by starting with that monster. If Piegirl cannot possibly end up in a state without monsters, print - 1 for both smallest and the largest value. If she can collect an arbitrarily large number of diamonds, print - 2 as the largest number of diamonds. If any number in output exceeds 314000000 ( but is finite) , print 314000000 instead of that number.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "325C"
  },
  {
    "title": "Tournament-graph",
    "url": "https://codeforces.com/problemset/problem/323/B",
    "history": "In this problem you have to build tournament graph, consisting of n vertices, such, that for any oriented pair of vertices ( v, u) ( v = \u0338 u) there exists a path from vertex v to vertex u consisting of no more then two edges. A directed graph without self- loops is a tournament, if there is exactly one edge between any two distinct vertices ( in one out of two possible directions) .",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 1000) , the number of the graph' s vertices.",
    "output": "Print - 1 if there is no graph, satisfying the described conditions. Otherwise, print n lines with n integers in each. The numbers should be separated with spaces. That is adjacency matrix a of the found tournament. Consider the graph vertices to be numbered with integers from 1 to n. Then av, u = 0, if there is no edge from v to u, and av, u = 1 if there is one. As the output graph has to be a tournament, following equalities must be satisfied: av, u + au, v = 1 for each v, u ( 1 \u2264 v, u \u2264 n; v = \u0338 u) ; av, v = 0 for each v ( 1 \u2264 v \u2264 n) .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs"
    ],
    "id": "323B"
  },
  {
    "title": "Ping-Pong (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/320/B",
    "history": "In this problem at each moment you have a set of intervals. You can move from interval ( a, b) from our set to interval ( c, d) from our set if and only if c < a < d or c < b < d. Also there is a path from interval I1 from our set to interval I2 from our set if there is a sequence of successive moves starting from I1 so that we can reach I2. Your program should handle the queries of the following two types: \" 1 x y\" ( x < y) \u2014 add the new interval ( x, y) to the set of intervals. The length of the new interval is guaranteed to be strictly greater than all the previous intervals. \" 2 a b\" ( a = \u0338 b) \u2014 answer the question: is there a path from a- th ( one- based) added interval to b- th ( one- based) added interval? Answer all the queries. Note, that initially you have an empty set of intervals.",
    "input": "The first line of the input contains integer n denoting the number of queries, ( 1 \u2264 n \u2264 100) . Each of the following lines contains a query as described above. All numbers in the input are integers and don' t exceed 109 by their absolute value. It' s guaranteed that all queries are correct.",
    "output": "For each query of the second type print \" YES\" or \" NO\" on a separate line depending on the answer.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "320B"
  },
  {
    "title": "Balance",
    "url": "https://codeforces.com/problemset/problem/317/C",
    "history": "A system of n vessels with water is given. Several pairs of vessels are connected by tubes with transfusion mechanisms. One may transfer an integer amount of liters of water between two vessels connected by such tube ( tube works in both directions) . There might be multiple tubes between two vessels. Total number of tubes equals e. Volume of each vessel equals v liters. Of course, the amount of the water in any vessel cannot exceed v liters in the process of transfusions. Given the initial amounts ai of water in the vessels and the desired amounts bi find a sequence of transfusions that deals with the task. Total number of transfusions must not exceed 2\u00b7n2.",
    "input": "First line of the input contains integers n, v, e ( 1 \u2264 n \u2264 300, 1 \u2264 v \u2264 109, 0 \u2264 e \u2264 50000) . Next two lines contain n integers each: initial ai and the desired amounts bi of water in corresponding vessels ( 0 \u2264 ai, bi \u2264 v) . Next e lines describe one tube each in the format x y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) for a tube between vessels number x and y. There might be multiple tubes between two vessels. You may assume that vessels are numbered from 1 to n in some way.",
    "output": "Print \" NO\" ( without quotes) , if such sequence of transfusions does not exist. Otherwise print any suitable sequence in the following format. On the first line print the total number of transfusions k ( k should not exceed 2\u00b7n2) . In the following k lines print transfusions in the format x y d ( transfusion of d liters from the vessel number x to the vessel number y, x and y must be distinct) . For all transfusions d must be a non- negative integer.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "317C"
  },
  {
    "title": "Fetch the Treasure",
    "url": "https://codeforces.com/problemset/problem/311/C",
    "history": "Rainbow built h cells in a row that are numbered from 1 to h from left to right. There are n cells with treasure. We call each of these n cells \" Treasure Cell\" . The i- th \" Treasure Cell\" is the ai- th cell and the value of treasure in it is ci dollars. Then, Freda went in the first cell. For now, she can go just k cells forward, or return to the first cell. That means Freda was able to reach the 1st, ( k + 1) - th, ( 2\u00b7k + 1) - th, ( 3\u00b7k + 1) - th cells and so on. Then Rainbow gave Freda m operations. Each operation is one of the following three types: Add another method x: she can also go just x cells forward at any moment. For example, initially she has only one method k. If at some moment she has methods a1, a2, . . . , ar then she can reach all the cells with number in form , where vi \u2014 some non- negative integer. Reduce the value of the treasure in the x- th \" Treasure Cell\" by y dollars. In other words, to apply assignment cx = cx - y. Ask the value of the most valuable treasure among the cells Freda can reach. If Freda cannot reach any cell with the treasure then consider the value of the most valuable treasure equal to 0, and do nothing. Otherwise take the most valuable treasure away. If several \" Treasure Cells\" have the most valuable treasure, take the \" Treasure Cell\" with the minimum number ( not necessarily with the minimum number of cell) . After that the total number of cells with a treasure is decreased by one. As a programmer, you are asked by Freda to write a program to answer each query.",
    "input": "The first line of the input contains four integers: h ( 1 \u2264 h \u2264 1018) , n, m ( 1 \u2264 n, m \u2264 105) and k ( 1 \u2264 k \u2264 104) . Each of the next n lines contains two integers: ai ( 1 \u2264 ai \u2264 h) , ci ( 1 \u2264 ci \u2264 109) . That means the i- th \" Treasure Cell\" is the ai- th cell and cost of the treasure in that cell is ci dollars. All the ai are distinct. Each of the next m lines is in one of the three following formats: \" 1 x\" \u2014 an operation of type 1, 1 \u2264 x \u2264 h; \" 2 x y\" \u2014 an operation of type 2, 1 \u2264 x \u2264 n, 0 \u2264 y < cx; \" 3\" \u2014 an operation of type 3. There are at most 20 operations of type 1. It' s guaranteed that at any moment treasure in each cell has positive value. It' s guaranteed that all operations is correct ( no operation can decrease the value of the taken tresure) . Please, do not use the",
    "output": "For each operation of type 3, output an integer indicates the value ( in dollars) of the most valuable treasure among the \" Treasure Cells\" Freda can reach. If there is no such treasure, output 0.",
    "note": "In the sample, there are 10 cells and 3 \" Treasure Cells\" . The first \" Treasure Cell\" is cell 5, having 50 dollars tresure in it. The second \" Treasure Cell\" is cell 7, having 60 dollars tresure in it. The third \" Treasure Cell\" is cell 8, having 100 dollars tresure in it. At first, Freda can only reach cell 1, 3, 5, 7 and 9. In the first operation, we reduce the value in the second \" Treasure Cell\" from 60 to 55. Then the most valuable treasure among the \" Treasure Cells\" she can reach is max( 50, 55) = 55. After the third operation, she can also go 3 cells forward each step, being able to reach cell 1, 3, 4, 5, 6, 7, 8, 9, 10. So the most valuable tresure is 100. Noticed that she took the 55 dollars and 100 dollars treasure away, so the last answer is 50.",
    "topics": [
      "brute force",
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "311C"
  },
  {
    "title": "Minimum Modular",
    "url": "https://codeforces.com/problemset/problem/303/C",
    "history": "You have been given n distinct integers a1, a2, . . . , an. You can remove at most k of them. Find the minimum modular m ( m > 0) , so that for every pair of the remaining integers ( ai, aj) , the following unequality holds: .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 5000, 0 \u2264 k \u2264 4) , which we have mentioned above. The second line contains n distinct integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 106) .",
    "output": "Print a single positive integer \u2014 the minimum m.",
    "note": "",
    "topics": [
      "brute force",
      "graphs",
      "math",
      "number theory"
    ],
    "id": "303C"
  },
  {
    "title": "Yaroslav and Time",
    "url": "https://codeforces.com/problemset/problem/301/B",
    "history": "Yaroslav is playing a game called \" Time\" . The game has a timer showing the lifespan he' s got left. As soon as the timer shows 0, Yaroslav' s character dies and the game ends. Also, the game has n clock stations, station number i is at point ( xi, yi) of the plane. As the player visits station number i, he increases the current time on his timer by ai. The stations are for one- time use only, so if the player visits some station another time, the time on his timer won' t grow. A player spends d\u00b7dist time units to move between stations, where dist is the distance the player has covered and d is some constant. The distance between stations i and j is determined as | xi - xj| + | yi - yj| . Initially, the player is at station number 1, and the player has strictly more than zero and strictly less than one units of time. At station number 1 one unit of money can increase the time on the timer by one time unit ( you can buy only integer number of time units) . Now Yaroslav is wondering, how much money he needs to get to station n. Help Yaroslav. Consider the time to buy and to increase the timer value negligibly small.",
    "input": "The first line contains integers n and d ( 3 \u2264 n \u2264 100, 103 \u2264 d \u2264 105) \u2014 the number of stations and the constant from the statement. The second line contains n - 2 integers: a2, a3, . . . , an - 1 ( 1 \u2264 ai \u2264 103) . The next n lines contain the coordinates of the stations. The i- th of them contains two integers xi, yi ( - 100 \u2264 xi, yi \u2264 100) . It is guaranteed that no two stations are located at the same point.",
    "output": "In a single line print an integer \u2014 the answer to the problem.",
    "note": "",
    "topics": [
      "binary search",
      "graphs",
      "shortest paths"
    ],
    "id": "301B"
  },
  {
    "title": "Coach",
    "url": "https://codeforces.com/problemset/problem/300/B",
    "history": "A programming coach has n students to teach. We know that n is divisible by 3. Let' s assume that all students are numbered from 1 to n, inclusive. Before the university programming championship the coach wants to split all students into groups of three. For some pairs of students we know that they want to be on the same team. Besides, if the i- th student wants to be on the same team with the j- th one, then the j- th student wants to be on the same team with the i- th one. The coach wants the teams to show good results, so he wants the following condition to hold: if the i- th student wants to be on the same team with the j- th, then the i- th and the j- th students must be on the same team. Also, it is obvious that each student must be on exactly one team. Help the coach and divide the teams the way he wants.",
    "input": "The first line of the input contains integers n and m ( 3 \u2264 n \u2264 48, . Then follow m lines, each contains a pair of integers ai, bi ( 1 \u2264 ai < bi \u2264 n) \u2014 the pair ai, bi means that students with numbers ai and bi want to be on the same team. It is guaranteed that n is divisible by 3. It is guaranteed that each pair ai, bi occurs in the input at most once.",
    "output": "If the required division into teams doesn' t exist, print number - 1. Otherwise, print lines. In each line print three integers xi, yi, zi ( 1 \u2264 xi, yi, zi \u2264 n) \u2014 the i- th team. If there are multiple answers, you are allowed to print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs"
    ],
    "id": "300B"
  },
  {
    "title": "Greg and Friends",
    "url": "https://codeforces.com/problemset/problem/295/C",
    "history": "One day Greg and his friends were walking in the forest. Overall there were n people walking, including Greg. Soon he found himself in front of a river. The guys immediately decided to get across the river. Luckily, there was a boat by the river bank, just where the guys were standing. We know that the boat can hold people with the total weight of at most k kilograms. Greg immediately took a piece of paper and listed there the weights of all people in his group ( including himself) . It turned out that each person weights either 50 or 100 kilograms. Now Greg wants to know what minimum number of times the boat needs to cross the river to transport the whole group to the other bank. The boat needs at least one person to navigate it from one bank to the other. As the boat crosses the river, it can have any non- zero number of passengers as long as their total weight doesn' t exceed k. Also Greg is wondering, how many ways there are to transport everybody to the other side in the minimum number of boat rides. Two ways are considered distinct if during some ride they have distinct sets of people on the boat. Help Greg with this problem.",
    "input": "The first line contains two integers n, k ( 1 \u2264 n \u2264 50, 1 \u2264 k \u2264 5000) \u2014 the number of people, including Greg, and the boat' s weight limit. The next line contains n integers \u2014 the people' s weights. A person' s weight is either 50 kilos or 100 kilos. You can consider Greg and his friends indexed in some way.",
    "output": "In the first line print an integer \u2014 the minimum number of rides. If transporting everyone to the other bank is impossible, print an integer - 1. In the second line print the remainder after dividing the number of ways to transport the people in the minimum number of rides by number 1000000007 ( 109 + 7) . If transporting everyone to the other bank is impossible, print integer 0.",
    "note": "In the first test Greg walks alone and consequently, he needs only one ride across the river. In the second test you should follow the plan: transport two 50 kg. people; transport one 50 kg. person back; transport one 100 kg. person; transport one 50 kg. person back; transport two 50 kg. people. That totals to 5 rides. Depending on which person to choose at step 2, we can get two distinct ways.",
    "topics": [
      "combinatorics",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "295C"
  },
  {
    "title": "Greg and Graph",
    "url": "https://codeforces.com/problemset/problem/295/B",
    "history": "Greg has a weighed directed graph, consisting of n vertices. In this graph any pair of distinct vertices has an edge between them in both directions. Greg loves playing with the graph and now he has invented a new game: The game consists of n steps. On the i- th step Greg removes vertex number xi from the graph. As Greg removes a vertex, he also removes all the edges that go in and out of this vertex. Before executing each step, Greg wants to know the sum of lengths of the shortest paths between all pairs of the remaining vertices. The shortest path can go through any remaining vertex. In other words, if we assume that d( i, v, u) is the shortest path between vertices v and u in the graph that formed before deleting vertex xi, then Greg wants to know the value of the following sum: . Help Greg, print the value of the required sum before each step.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 500) \u2014 the number of vertices in the graph. Next n lines contain n integers each \u2014 the graph adjacency matrix: the j- th number in the i- th line aij ( 1 \u2264 aij \u2264 105, aii = 0) represents the weight of the edge that goes from vertex i to vertex j. The next line contains n distinct integers: x1, x2, . . . , xn ( 1 \u2264 xi \u2264 n) \u2014 the vertices that Greg deletes.",
    "output": "Print n integers \u2014 the i- th number equals the required sum before the i- th step. Please, do not use the",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "295B"
  },
  {
    "title": "Network Topology",
    "url": "https://codeforces.com/problemset/problem/292/B",
    "history": "This problem uses a simplified network topology model, please read the problem statement carefully and use it as a formal document as you develop the solution. Polycarpus continues working as a system administrator in a large corporation. The computer network of this corporation consists of n computers, some of them are connected by a cable. The computers are indexed by integers from 1 to n. It' s known that any two computers connected by cable directly or through other computersPolycarpus decided to find out the network' s topology. A network topology is the way of describing the network configuration, the scheme that shows the location and the connections of network devices. Polycarpus knows three main network topologies: bus, ring and star. A bus is the topology that represents a shared cable with all computers connected with it. In the ring topology the cable connects each computer only with two other ones. A star is the topology where all computers of a network are connected to the single central node. Let' s represent each of these network topologies as a connected non- directed graph. A bus is a connected graph that is the only path, that is, the graph where all nodes are connected with two other ones except for some two nodes that are the beginning and the end of the path. A ring is a connected graph, where all nodes are connected with two other ones. A star is a connected graph, where a single central node is singled out and connected with all other nodes. For clarifications, see the picture. ( 1) \u2014 bus, ( 2) \u2014 ring, ( 3) \u2014 star You' ve got a connected non- directed graph that characterizes the computer network in Polycarpus' corporation. Help him find out, which topology type the given network is. If that is impossible to do, say that the network' s topology is unknown.",
    "input": "The first line contains two space- separated integers n and m ( 4 \u2264 n \u2264 105; 3 \u2264 m \u2264 105) \u2014 the number of nodes and edges in the graph, correspondingly. Next m lines contain the description of the graph' s edges. The i- th line contains a space- separated pair of integers xi, yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the numbers of nodes that are connected by the i- the edge. It is guaranteed that the given graph is connected. There is at most one edge between any two nodes. No edge connects a node with itself.",
    "output": "In a single line print the network topology name of the given graph. If the answer is the bus, print \" bus topology\" ( without the quotes) , if the answer is the ring, print \" ring topology\" ( without the quotes) , if the answer is the star, print \" star topology\" ( without the quotes) . If no answer fits, print \" unknown topology\" ( without the quotes) .",
    "note": "",
    "topics": [
      "graphs",
      "implementation"
    ],
    "id": "292B"
  },
  {
    "title": "Greedy Petya",
    "url": "https://codeforces.com/problemset/problem/290/F",
    "history": "Petya is an unexperienced programming contestant. Recently he has come across the following problem: You are given a non- directed graph which consists of n nodes and m edges. Your task is to determine whether the graph contains a Hamiltonian path. Petya wrote a quick bug- free code which he believes solves this problem. After that Petya decided to give this problem for April Fools Day contest. Unfortunately, Petya might have made a mistake, and it' s quite possible that his algorithm is wrong. But this isn' t a good excuse to leave the contest without submitting this problem, is it?",
    "input": "The first line contains two integers n, m ( 1 \u2264 n \u2264 20; 0 \u2264 m \u2264 400) . Next m lines contain pairs of integers vi, ui ( 1 \u2264 vi, ui \u2264 n) .",
    "output": "Follow the format of Petya' s code output.",
    "note": "",
    "topics": [
      "*special",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "290F"
  },
  {
    "title": "Cow Program",
    "url": "https://codeforces.com/problemset/problem/283/B",
    "history": "Farmer John has just given the cows a program to play with! The program contains two integer variables, x and y, and performs the following operations on a sequence a1, a2, . . . , an of positive integers: Initially, x = 1 and y = 0. If, after any step, x \u2264 0 or x > n, the program immediately terminates. The program increases both x and y by a value equal to ax simultaneously. The program now increases y by ax while decreasing x by ax. The program executes steps 2 and 3 ( first step 2, then step 3) repeatedly until it terminates ( it may never terminate) . So, the sequence of executed steps may start with: step 2, step 3, step 2, step 3, step 2 and so on. The cows are not very good at arithmetic though, and they want to see how the program works. Please help them! You are given the sequence a2, a3, . . . , an. Suppose for each i ( 1 \u2264 i \u2264 n - 1) we run the program on the sequence i, a2, a3, . . . , an. For each such run output the final value of y if the program terminates or - 1 if it does not terminate.",
    "input": "The first line contains a single integer, n ( 2 \u2264 n \u2264 2\u00b7105) . The next line contains n - 1 space separated integers, a2, a3, . . . , an ( 1 \u2264 ai \u2264 109) .",
    "output": "Output n - 1 lines. On the i- th line, print the requested value when the program is run on the sequence i, a2, a3, . . . an. Please do not use the",
    "note": "In the first sample For i = 1, x becomes and y becomes 1 + 2 = 3. For i = 2, x becomes and y becomes 2 + 4 = 6. For i = 3, x becomes and y becomes 3 + 1 + 4 = 8.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs"
    ],
    "id": "283B"
  },
  {
    "title": "k-Maximum Subsequence Sum",
    "url": "https://codeforces.com/problemset/problem/280/D",
    "history": "Consider integer sequence a1, a2, . . . , an. You should run queries of two types: The query format is \" 0 i val\" . In reply to this query you should make the following assignment: ai = val. The query format is \" 1 l r k\" . In reply to this query you should print the maximum sum of at most k non- intersecting subsegments of sequence al, al + 1, . . . , ar. Formally, you should choose at most k pairs of integers ( x1, y1) , ( x2, y2) , . . . , ( xt, yt) ( l \u2264 x1 \u2264 y1 < x2 \u2264 y2 < . . . < xt \u2264 yt \u2264 r; t \u2264 k) such that the sum ax1 + ax1 + 1 + . . . + ay1 + ax2 + ax2 + 1 + . . . + ay2 + . . . + axt + axt + 1 + . . . + ayt is as large as possible. Note that you should choose at most k subsegments. Particularly, you can choose 0 subsegments. In this case the described sum considered equal to zero.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) , showing how many numbers the sequence has. The next line contains n integers a1, a2, . . . , an ( | ai| \u2264 500) . The third line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of queries. The next m lines contain the queries in the format, given in the statement. All changing queries fit into limits: 1 \u2264 i \u2264 n, | val| \u2264 500. All queries to count the maximum sum of at most k non- intersecting subsegments fit into limits: 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 k \u2264 20. It is guaranteed that the number of the queries to count the maximum sum of at most k non- intersecting subsegments doesn' t exceed 10000.",
    "output": "For each query to count the maximum sum of at most k non- intersecting subsegments print the reply \u2014 the maximum sum. Print the answers to the queries in the order, in which the queries follow in the input.",
    "note": "In the first query of the first example you can select a single pair ( 1, 9) . So the described sum will be 17. Look at the second query of the first example. How to choose two subsegments? ( 1, 3) and ( 7, 9) ? Definitely not, the sum we could get from ( 1, 3) and ( 7, 9) is 20, against the optimal configuration ( 1, 7) and ( 9, 9) with 25. The answer to the third query is 0, we prefer select nothing if all of the numbers in the given interval are negative.",
    "topics": [
      "data structures",
      "flows",
      "graphs",
      "implementation"
    ],
    "id": "280D"
  },
  {
    "title": "Little Girl and Problem on Trees",
    "url": "https://codeforces.com/problemset/problem/276/E",
    "history": "A little girl loves problems on trees very much. Here' s one of them. A tree is an undirected connected graph, not containing cycles. The degree of node x in the tree is the number of nodes y of the tree, such that each of them is connected with node x by some edge of the tree. Let' s consider a tree that consists of n nodes. We' ll consider the tree' s nodes indexed from 1 to n. The cosidered tree has the following property: each node except for node number 1 has the degree of at most 2. Initially, each node of the tree contains number 0. Your task is to quickly process the requests of two types: Request of form: 0 v x d. In reply to the request you should add x to all numbers that are written in the nodes that are located at the distance of at most d from node v. The distance between two nodes is the number of edges on the shortest path between them. Request of form: 1 v. In reply to the request you should print the current number that is written in node v.",
    "input": "The first line contains integers n ( 2 \u2264 n \u2264 105) and q ( 1 \u2264 q \u2264 105) \u2014 the number of tree nodes and the number of requests, correspondingly. Each of the next n - 1 lines contains two integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) , that show that there is an edge between nodes ui and vi. Each edge' s description occurs in the input exactly once. It is guaranteed that the given graph is a tree that has the property that is described in the statement. Next q lines describe the requests. The request to add has the following format: 0 v x d ( 1 \u2264 v \u2264 n, 1 \u2264 x \u2264 104, 1 \u2264 d < n) . The request to print the node value has the following format: 1 v ( 1 \u2264 v \u2264 n) . The numbers in the lines are separated by single spaces.",
    "output": "For each request to print the node value print an integer \u2014 the reply to the request.",
    "note": "",
    "topics": [
      "data structures",
      "graphs",
      "trees"
    ],
    "id": "276E"
  },
  {
    "title": "Lovely Matrix",
    "url": "https://codeforces.com/problemset/problem/274/D",
    "history": "Lenny had an n \u00d7 m matrix of positive integers. He loved the matrix so much, because each row of the matrix was sorted in non- decreasing order. For the same reason he calls such matrices of integers lovely. One day when Lenny was at school his little brother was playing with Lenny' s matrix in his room. He erased some of the entries of the matrix and changed the order of some of its columns. When Lenny got back home he was very upset. Now Lenny wants to recover his matrix. Help him to find an order for the columns of the matrix so that it' s possible to fill in the erased entries of the matrix to achieve a lovely matrix again. Note, that you can fill the erased entries of the matrix with any integers.",
    "input": "The first line of the input contains two positive integers n and m ( 1 \u2264 n\u00b7m \u2264 105) . Each of the next n lines contains m space- separated integers representing the matrix. An integer - 1 shows an erased entry of the matrix. All other integers ( each of them is between 0 and 109 inclusive) represent filled entries.",
    "output": "If there exists no possible reordering of the columns print - 1. Otherwise the output should contain m integers p1, p2, . . . , pm showing the sought permutation of columns. So, the first column of the lovely matrix will be p1- th column of the initial matrix, the second column of the lovely matrix will be p2- th column of the initial matrix and so on.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "274D"
  },
  {
    "title": "Dima and Horses",
    "url": "https://codeforces.com/problemset/problem/272/E",
    "history": "Dima came to the horse land. There are n horses living in the land. Each horse in the horse land has several enemies ( enmity is a symmetric relationship) . The horse land isn' t very hostile, so the number of enemies of each horse is at most 3. Right now the horse land is going through an election campaign. So the horses trusted Dima to split them into two parts. At that the horses want the following condition to hold: a horse shouldn' t have more than one enemy in its party. Help Dima split the horses into parties. Note that one of the parties can turn out to be empty.",
    "input": "The first line contains two integers n, m \u2014 the number of horses in the horse land and the number of enemy pairs. Next m lines define the enemy pairs. The i- th line contains integers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , which mean that horse ai is the enemy of horse bi. Consider the horses indexed in some way from 1 to n. It is guaranteed that each horse has at most three enemies. No pair of enemies occurs more than once in the input.",
    "output": "Print a line, consisting of n characters: the i- th character of the line must equal \" 0\" , if the horse number i needs to go to the first party, otherwise this character should equal \" 1\" . If there isn' t a way to divide the horses as required, print - 1.",
    "note": "",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "graphs"
    ],
    "id": "272E"
  },
  {
    "title": "Maximum Waterfall",
    "url": "https://codeforces.com/problemset/problem/269/D",
    "history": "Emuskald was hired to design an artificial waterfall according to the latest trends in landscape architecture. A modern artificial waterfall consists of multiple horizontal panels affixed to a wide flat wall. The water flows down the top of the wall from panel to panel until it reaches the bottom of the wall. The wall has height t and has n panels on the wall. Each panel is a horizontal segment at height hi which begins at li and ends at ri. The i- th panel connects the points ( li, hi) and ( ri, hi) of the plane. The top of the wall can be considered a panel connecting the points ( - 109, t) and ( 109, t) . Similarly, the bottom of the wall can be considered a panel connecting the points ( - 109, 0) and ( 109, 0) . No two panels share a common point. Emuskald knows that for the waterfall to be aesthetically pleasing, it can flow from panel i to panel j ( ) only if the following conditions hold: max( li, lj) < min( ri, rj) ( horizontal projections of the panels overlap) ; hj < hi ( panel j is below panel i) ; there is no such panel k ( hj < hk < hi) that the first two conditions hold for the pairs ( i, k) and ( k, j) . Then the flow for is equal to min( ri, rj) - max( li, lj) , the length of their horizontal projection overlap. Emuskald has decided that in his waterfall the water will flow in a single path from top to bottom. If water flows to a panel ( except the bottom of the wall) , the water will fall further to exactly one lower panel. The total amount of water flow in the waterfall is then defined as the minimum horizontal projection overlap between two consecutive panels in the path of the waterfall. Formally: the waterfall consists of a single path of panels ; the flow of the waterfall is the minimum flow in the path . To make a truly great waterfall Emuskald must maximize this water flow, but there are too many panels and he is having a hard time planning his creation. Below is an example of a waterfall Emuskald wants: Help Emuskald maintain his reputation and find the value of the maximum possible water flow.",
    "input": "The first line of input contains two space- separated integers n and t ( 1 \u2264 n \u2264 105, 2 \u2264 t \u2264 109) , the number of the panels excluding the top and the bottom panels, and the height of the wall. Each of the n following lines contain three space- separated integers hi, li and ri ( 0 < hi < t, - 109 \u2264 li < ri \u2264 109) , the height, left and right ends of the i- th panel segment. It is guaranteed that no two segments share a common point.",
    "output": "Output a single integer \u2014 the maximum possible amount of water flow in the desired waterfall.",
    "note": "The first test case corresponds to the picture.",
    "topics": [
      "data structures",
      "dp",
      "graphs",
      "sortings"
    ],
    "id": "269D"
  },
  {
    "title": "Flawed Flow",
    "url": "https://codeforces.com/problemset/problem/269/C",
    "history": "Emuskald considers himself a master of flow algorithms. Now he has completed his most ingenious program yet \u2014 it calculates the maximum flow in an undirected graph. The graph consists of n vertices and m edges. Vertices are numbered from 1 to n. Vertices 1 and n being the source and the sink respectively. However, his max- flow algorithm seems to have a little flaw \u2014 it only finds the flow volume for each edge, but not its direction. Help him find for each edge the direction of the flow through this edges. Note, that the resulting flow should be correct maximum flow. More formally. You are given an undirected graph. For each it' s undirected edge ( ai, bi) you are given the flow volume ci. You should direct all edges in such way that the following conditions hold: for each vertex v ( 1 < v < n) , sum of ci of incoming edges is equal to the sum of ci of outcoming edges; vertex with number 1 has no incoming edges; the obtained directed graph does not have cycles.",
    "input": "The first line of input contains two space- separated integers n and m ( 2 \u2264 n \u2264 2\u00b7105, n - 1 \u2264 m \u2264 2\u00b7105) , the number of vertices and edges in the graph. The following m lines contain three space- separated integers ai, bi and ci ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 ci \u2264 104) , which means that there is an undirected edge from ai to bi with flow volume ci. It is guaranteed that there are no two edges connecting the same vertices; the given graph is connected; a solution always exists.",
    "output": "Output m lines, each containing one integer di, which should be 0 if the direction of the i- th edge is ai \u2192 bi ( the flow goes from vertex ai to vertex bi) and should be 1 otherwise. The edges are numbered from 1 to m in the order they are given in the input. If there are several solutions you can print any of them.",
    "note": "In the first test case, 10 flow units pass through path , and 5 flow units pass directly from source to sink: .",
    "topics": [
      "constructive algorithms",
      "flows",
      "graphs",
      "greedy"
    ],
    "id": "269C"
  },
  {
    "title": "Dominoes",
    "url": "https://codeforces.com/problemset/problem/267/B",
    "history": "You have a set of dominoes. Each domino is a rectangular tile with a line dividing its face into two square ends. Can you put all dominoes in a line one by one from left to right so that any two dominoes touched with the sides that had the same number of points? You can rotate the dominoes, changing the left and the right side ( domino \" 1- 4\" turns into \" 4- 1\" ) .",
    "input": "The first line contains number n ( 1 \u2264 n \u2264 100) . Next n lines contains the dominoes. Each of these lines contains two numbers \u2014 the number of points ( spots) on the left and the right half, correspondingly. The numbers of points ( spots) are non- negative integers from 0 to 6.",
    "output": "Print \" No solution\" , if it is impossible to arrange the dominoes in the required manner. If the solution exists, then describe any way to arrange the dominoes. You put the dominoes from left to right. In each of n lines print the index of the domino to put in the corresponding position and then, after a space, character \" + \" ( if you don' t need to turn the domino) or \" \u2013\" ( if you need to turn it) .",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "267B"
  },
  {
    "title": "BerDonalds",
    "url": "https://codeforces.com/problemset/problem/266/D",
    "history": "BerDonalds, a well- known fast food restaurant, is going to open a cafe in Bertown. The important thing is to choose the new restaurant' s location so that it would be easy to get there. The Bertown road system is represented by n junctions, connected by m bidirectional roads. For each road we know its length. We also know that we can get from any junction to any other one, moving along the roads. Your task is to find such location of the restaurant, that the shortest distance along the roads from the cafe to the farthest junction would be minimum. Note that the restaurant can be located not only on the junction, but at any point of any road.",
    "input": "The first line contains two integers n and m ( ) \u2014 the number of junctions and the number of roads, correspondingly. Then m lines follow, describing all Bertown roads. Each road is described by three integers ai, bi, wi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi; 1 \u2264 wi \u2264 105) , where ai and bi are the numbers of the junctions, connected by the i- th road, and wi is the length of the i- th road. It is guaranteed that each road connects two distinct junctions, there is at most one road between any two junctions, and you can get from any junction to any other one.",
    "output": "Print a single real number \u2014 the shortest distance from the optimal restaurant location to the farthest junction. The answer will be considered correct, if its absolute or relative error doesn' t exceed 10 - 9.",
    "note": "",
    "topics": [
      "graphs",
      "math",
      "shortest paths"
    ],
    "id": "266D"
  },
  {
    "title": "Cycle in Graph",
    "url": "https://codeforces.com/problemset/problem/263/D",
    "history": "You' ve got a undirected graph G, consisting of n nodes. We will consider the nodes of the graph indexed by integers from 1 to n. We know that each node of graph G is connected by edges with at least k other nodes of this graph. Your task is to find in the given graph a simple cycle of length of at least k + 1. A simple cycle of length d ( d > 1) in graph G is a sequence of distinct graph nodes v1, v2, . . . , vd such, that nodes v1 and vd are connected by an edge of the graph, also for any integer i ( 1 \u2264 i < d) nodes vi and vi + 1 are connected by an edge of the graph.",
    "input": "The first line contains three integers n, m, k ( 3 \u2264 n, m \u2264 105; 2 \u2264 k \u2264 n - 1) \u2014 the number of the nodes of the graph, the number of the graph' s edges and the lower limit on the degree of the graph node. Next m lines contain pairs of integers. The i- th line contains integers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) \u2014 the indexes of the graph nodes that are connected by the i- th edge. It is guaranteed that the given graph doesn' t contain any multiple edges or self- loops. It is guaranteed that each node of the graph is connected by the edges with at least k other nodes of the graph.",
    "output": "In the first line print integer r ( r \u2265 k + 1) \u2014 the length of the found cycle. In the next line print r distinct integers v1, v2, . . . , vr ( 1 \u2264 vi \u2264 n) \u2014 the found simple cycle. It is guaranteed that the answer exists. If there are multiple correct answers, you are allowed to print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "263D"
  },
  {
    "title": "Black and White Tree",
    "url": "https://codeforces.com/problemset/problem/260/D",
    "history": "The board has got a painted tree graph, consisting of n nodes. Let us remind you that a non- directed graph is called a tree if it is connected and doesn' t contain any cycles. Each node of the graph is painted black or white in such a manner that there aren' t two nodes of the same color, connected by an edge. Each edge contains its value written on it as a non- negative integer. A bad boy Vasya came up to the board and wrote number sv near each node v \u2014 the sum of values of all edges that are incident to this node. Then Vasya removed the edges and their values from the board. Your task is to restore the original tree by the node colors and numbers sv.",
    "input": "The first line of the input contains a single integer n ( 2 \u2264 n \u2264 105) \u2014 the number of nodes in the tree. Next n lines contain pairs of space- separated integers ci, si ( 0 \u2264 ci \u2264 1, 0 \u2264 si \u2264 109) , where ci stands for the color of the i- th vertex ( 0 is for white, 1 is for black) , and si represents the sum of values of the edges that are incident to the i- th vertex of the tree that is painted on the board.",
    "output": "Print the description of n - 1 edges of the tree graph. Each description is a group of three integers vi, ui, wi ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui, 0 \u2264 wi \u2264 109) , where vi and ui \u2014 are the numbers of the nodes that are connected by the i- th edge, and wi is its value. Note that the following condition must fulfill cvi = \u0338 cui. It is guaranteed that for any input data there exists at least one graph that meets these data. If there are multiple solutions, print any of them. You are allowed to print the edges in any order. As you print the numbers, separate them with spaces.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "260D"
  },
  {
    "title": "Rats",
    "url": "https://codeforces.com/problemset/problem/254/D",
    "history": "Rats have bred to hundreds and hundreds in the basement of the store, owned by Vasily Petrovich. Vasily Petrovich may have not noticed their presence, but they got into the habit of sneaking into the warehouse and stealing food from there. Vasily Petrovich cannot put up with it anymore, he has to destroy the rats in the basement. Since mousetraps are outdated and do not help, and rat poison can poison inattentive people as well as rats, he chose a radical way: to blow up two grenades in the basement ( he does not have more) . In this problem, we will present the shop basement as a rectangular table of n \u00d7 m cells. Some of the cells are occupied by walls, and the rest of them are empty. Vasily has been watching the rats and he found out that at a certain time they go to sleep, and all the time they sleep in the same places. He wants to blow up a grenade when this convenient time comes. On the plan of his basement, he marked cells with sleeping rats in them. Naturally, these cells are not occupied by walls. Grenades can only blow up in a cell that is not occupied by a wall. The blast wave from a grenade distributes as follows. We assume that the grenade blast occurs at time 0. During this initial time only the cell where the grenade blew up gets ' clear' . If at time t some cell is clear, then at time t + 1 those side- neighbouring cells which are not occupied by the walls get clear too ( some of them could have been cleared before) . The blast wave distributes for exactly d seconds, then it dies immediately. An example of a distributing blast wave: Picture 1 shows the situation before the blast, and the following pictures show \" clear\" cells by time 0, 1, 2, 3 and 4. Thus, the blast wave on the picture distributes for d = 4 seconds. Vasily Petrovich wonders, whether he can choose two cells to blast the grenades so as to clear all cells with sleeping rats. Write the program that finds it out.",
    "input": "The first line contains three integers n, m and d, separated by single spaces ( 4 \u2264 n, m \u2264 1000, 1 \u2264 d \u2264 8) . Next n lines contain the table that represents the basement plan. Each row of the table consists of m characters. Character \" X\" means that the corresponding cell is occupied by the wall, character \" . \" represents a empty cell, character \" R\" represents a empty cell with sleeping rats. It is guaranteed that the first and the last row, as well as the first and the last column consist of characters \" X\" . The plan has at least two empty cells. There is at least one cell with sleeping rats.",
    "output": "If it is impossible to blow up all cells with sleeping rats, print a single integer - 1. Otherwise, print four space- separated integers r1, c1, r2, c2, that mean that one grenade should go off in cell ( r1, c1) , and the other one \u2014 in cell ( r2, c2) . Consider the table rows numbered from top to bottom from 1 to n and the table columns \u2014 from left to right from 1 to m. As r1 and r2 represent the row numbers, and c1 and c2 represent the column numbers in the table, they should fit the limits: 1 \u2264 r1, r2 \u2264 n, 1 \u2264 c1, c2 \u2264 m. It is forbidden to blow a grenade twice in the same cell. The blast waves of the grenades can intersect. It is possible that one grenade blast destroys no rats, and the other one destroys all of them.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "254D"
  },
  {
    "title": "Text Editor",
    "url": "https://codeforces.com/problemset/problem/253/C",
    "history": "Vasya is pressing the keys on the keyboard reluctantly, squeezing out his ideas on the classical epos depicted in Homer' s Odysseus. . . How can he explain to his literature teacher that he isn' t going to become a writer? In fact, he is going to become a programmer. So, he would take great pleasure in writing a program, but none \u2014 in writing a composition. As Vasya was fishing for a sentence in the dark pond of his imagination, he suddenly wondered: what is the least number of times he should push a key to shift the cursor from one position to another one? Let' s describe his question more formally: to type a text, Vasya is using the text editor. He has already written n lines, the i- th line contains ai characters ( including spaces) . If some line contains k characters, then this line overall contains ( k + 1) positions where the cursor can stand: before some character or after all characters ( at the end of the line) . Thus, the cursor' s position is determined by a pair of integers ( r, c) , where r is the number of the line and c is the cursor' s position in the line ( the positions are indexed starting from one from the beginning of the line) . Vasya doesn' t use the mouse to move the cursor. He uses keys \" Up\" , \" Down\" , \" Right\" and \" Left\" . When he pushes each of these keys, the cursor shifts in the needed direction. Let' s assume that before the corresponding key is pressed, the cursor was located in the position ( r, c) , then Vasya pushed key: \" Up\" : if the cursor was located in the first line ( r = 1) , then it does not move. Otherwise, it moves to the previous line ( with number r - 1) , to the same position. At that, if the previous line was short, that is, the cursor couldn' t occupy position c there, the cursor moves to the last position of the line with number r - 1; \" Down\" : if the cursor was located in the last line ( r = n) , then it does not move. Otherwise, it moves to the next line ( with number r + 1) , to the same position. At that, if the next line was short, that is, the cursor couldn' t occupy position c there, the cursor moves to the last position of the line with number r + 1; \" Right\" : if the cursor can move to the right in this line ( c < ar + 1) , then it moves to the right ( to position c + 1) . Otherwise, it is located at the end of the line and doesn' t move anywhere when Vasya presses the \" Right\" key; \" Left\" : if the cursor can move to the left in this line ( c > 1) , then it moves to the left ( to position c - 1) . Otherwise, it is located at the beginning of the line and doesn' t move anywhere when Vasya presses the \" Left\" key. You' ve got the number of lines in the text file and the number of characters, written in each line of this file. Find the least number of times Vasya should push the keys, described above, to shift the cursor from position ( r1, c1) to position ( r2, c2) .",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 100) \u2014 the number of lines in the file. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) , separated by single spaces. The third line contains four integers r1, c1, r2, c2 ( 1 \u2264 r1, r2 \u2264 n, 1 \u2264 c1 \u2264 ar1 + 1, 1 \u2264 c2 \u2264 ar2 + 1) .",
    "output": "Print a single integer \u2014 the minimum number of times Vasya should push a key to move the cursor from position ( r1, c1) to position ( r2, c2) .",
    "note": "In the first sample the editor contains four lines. Let' s represent the cursor' s possible positions in the line as numbers. Letter s represents the cursor' s initial position, letter t represents the last one. Then all possible positions of the cursor in the text editor are described by the following table. 12312123s5671t345One of the possible answers in the given sample is: \" Left\" , \" Down\" , \" Left\" .",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "253C"
  },
  {
    "title": "Colorful Graph",
    "url": "https://codeforces.com/problemset/problem/246/D",
    "history": "You' ve got an undirected graph, consisting of n vertices and m edges. We will consider the graph' s vertices numbered with integers from 1 to n. Each vertex of the graph has a color. The color of the i- th vertex is an integer ci. Let' s consider all vertices of the graph, that are painted some color k. Let' s denote a set of such as V( k) . Let' s denote the value of the neighbouring color diversity for color k as the cardinality of the set Q( k) = cu : cu = \u0338 k and there is vertex v belonging to set V( k) such that nodes v and u are connected by an edge of the graph. Your task is to find such color k, which makes the cardinality of set Q( k) maximum. In other words, you want to find the color that has the most diverse neighbours. Please note, that you want to find such color k, that the graph has at least one vertex with such color.",
    "input": "The first line contains two space- separated integers n, m ( 1 \u2264 n, m \u2264 105) \u2014 the number of vertices end edges of the graph, correspondingly. The second line contains a sequence of integers c1, c2, . . . , cn ( 1 \u2264 ci \u2264 105) \u2014 the colors of the graph vertices. The numbers on the line are separated by spaces. Next m lines contain the description of the edges: the i- th line contains two space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) \u2014 the numbers of the vertices, connected by the i- th edge. It is guaranteed that the given graph has no self- loops or multiple edges.",
    "output": "Print the number of the color which has the set of neighbours with the maximum cardinality. It there are multiple optimal colors, print the color with the minimum number. Please note, that you want to find such color, that the graph has at least one vertex with such color.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs"
    ],
    "id": "246D"
  },
  {
    "title": "Suggested Friends",
    "url": "https://codeforces.com/problemset/problem/245/G",
    "history": "Polycarpus works as a programmer in a start- up social network. His boss gave his a task to develop a mechanism for determining suggested friends. Polycarpus thought much about the task and came to the folowing conclusion. Let' s say that all friendship relationships in a social network are given as m username pairs ai, bi ( ai = \u0338 bi) . Each pair ai, bi means that users ai and bi are friends. Friendship is symmetric, that is, if ai is friends with bi, then bi is also friends with ai. User y is a suggested friend for user x, if the following conditions are met: x = \u0338 y; x and y aren' t friends; among all network users who meet the first two conditions, user y has most of all common friends with user x. User z is a common friend of user x and user y ( z = \u0338 x, z = \u0338 y) , if x and z are friends, and y and z are also friends. Your task is to help Polycarpus to implement a mechanism for determining suggested friends.",
    "input": "The first line contains a single integer m ( 1 \u2264 m \u2264 5000) \u2014 the number of pairs of friends in the social network. Next m lines contain pairs of names of the users who are friends with each other. The i- th line contains two space- separated names ai and bi ( ai = \u0338 bi) . The users' names are non- empty and consist of at most 20 uppercase and lowercase English letters. It is guaranteed that each pair of friends occurs only once in the input. For example, the input can' t contain x, y and y, x at the same time. It is guaranteed that distinct users have distinct names. It is guaranteed that each social network user has at least one friend. The last thing guarantees that each username occurs at least once in the input.",
    "output": "In the first line print a single integer n \u2014 the number of network users. In next n lines print the number of suggested friends for each user. In the i- th line print the name of the user ci and the number of his suggested friends di after a space. You can print information about the users in any order.",
    "note": "In the first test case consider user David. Users Mike and Tank have one common friend ( Gerald) with David. User Kate has no common friends with David. That' s why David' s suggested friends are users Mike and Tank.",
    "topics": [
      "brute force",
      "graphs"
    ],
    "id": "245G"
  },
  {
    "title": "Hydra",
    "url": "https://codeforces.com/problemset/problem/243/B",
    "history": "One day Petya got a birthday present from his mom: a book called \" The Legends and Myths of Graph Theory\" . From this book Petya learned about a hydra graph. A non- oriented graph is a hydra, if it has a structure, shown on the figure below. Namely, there are two nodes u and v connected by an edge, they are the hydra' s chest and stomach, correspondingly. The chest is connected with h nodes, which are the hydra' s heads. The stomach is connected with t nodes, which are the hydra' s tails. Note that the hydra is a tree, consisting of h + t + 2 nodes. Also, Petya' s got a non- directed graph G, consisting of n nodes and m edges. Petya got this graph as a last year birthday present from his mom. Graph G contains no self- loops or multiple edges. Now Petya wants to find a hydra in graph G. Or else, to make sure that the graph doesn' t have a hydra.",
    "input": "The first line contains four integers n, m, h, t ( 1 \u2264 n, m \u2264 105, 1 \u2264 h, t \u2264 100) \u2014 the number of nodes and edges in graph G, and the number of a hydra' s heads and tails. Next m lines contain the description of the edges of graph G. The i- th of these lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, a = \u0338 b) \u2014 the numbers of the nodes, connected by the i- th edge. It is guaranteed that graph G contains no self- loops and multiple edges. Consider the nodes of graph G numbered with integers from 1 to n.",
    "output": "If graph G has no hydra, print \" NO\" ( without the quotes) . Otherwise, in the first line print \" YES\" ( without the quotes) . In the second line print two integers \u2014 the numbers of nodes u and v. In the third line print h numbers \u2014 the numbers of the nodes that are the heads. In the fourth line print t numbers \u2014 the numbers of the nodes that are the tails. All printed numbers should be distinct. If there are multiple possible answers, you are allowed to print any of them.",
    "note": "The first sample is depicted on the picture below:",
    "topics": [
      "graphs",
      "sortings"
    ],
    "id": "243B"
  },
  {
    "title": "Dispute",
    "url": "https://codeforces.com/problemset/problem/242/D",
    "history": "Valera has n counters numbered from 1 to n. Some of them are connected by wires, and each of the counters has a special button. Initially, all the counters contain number 0. When you press a button on a certain counter, the value it has increases by one. Also, the values recorded in all the counters, directly connected to it by a wire, increase by one. Valera and Ignat started having a dispute, the dispute is as follows. Ignat thought of a sequence of n integers a1, a2, . . . , an. Valera should choose some set of distinct counters and press buttons on each of them exactly once ( on other counters the buttons won' t be pressed) . If after that there is a counter with the number i, which has value ai, then Valera loses the dispute, otherwise he wins the dispute. Help Valera to determine on which counters he needs to press a button to win the dispute.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) , that denote the number of counters Valera has and the number of pairs of counters connected by wires. Each of the following m lines contains two space- separated integers ui and vi ( 1 \u2264 ui, vi \u2264 n, ui = \u0338 vi) , that mean that counters with numbers ui and vi are connected by a wire. It is guaranteed that each pair of connected counters occurs exactly once in the input. The last line contains n space- separated integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 105) , where ai is the value that Ignat choose for the i- th counter.",
    "output": "If Valera can' t win the dispute print in the first line - 1. Otherwise, print in the first line integer k ( 0 \u2264 k \u2264 n) . In the second line print k distinct space- separated integers \u2014 the numbers of the counters, where Valera should push buttons to win the dispute, in arbitrary order. If there exists multiple answers, you are allowed to print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "242D"
  },
  {
    "title": "King's Path",
    "url": "https://codeforces.com/problemset/problem/242/C",
    "history": "The black king is standing on a chess field consisting of 109 rows and 109 columns. We will consider the rows of the field numbered with integers from 1 to 109 from top to bottom. The columns are similarly numbered with integers from 1 to 109 from left to right. We will denote a cell of the field that is located in the i- th row and j- th column as ( i, j) . You know that some squares of the given chess field are allowed. All allowed cells of the chess field are given as n segments. Each segment is described by three integers ri, ai, bi ( ai \u2264 bi) , denoting that cells in columns from number ai to number bi inclusive in the ri- th row are allowed. Your task is to find the minimum number of moves the king needs to get from square ( x0, y0) to square ( x1, y1) , provided that he only moves along the allowed cells. In other words, the king can be located only on allowed cells on his way. Let us remind you that a chess king can move to any of the neighboring cells in one move. Two cells of a chess field are considered neighboring if they share at least one point.",
    "input": "The first line contains four space- separated integers x0, y0, x1, y1 ( 1 \u2264 x0, y0, x1, y1 \u2264 109) , denoting the initial and the final positions of the king. The second line contains a single integer n ( 1 \u2264 n \u2264 105) , denoting the number of segments of allowed cells. Next n lines contain the descriptions of these segments. The i- th line contains three space- separated integers ri, ai, bi ( 1 \u2264 ri, ai, bi \u2264 109, ai \u2264 bi) , denoting that cells in columns from number ai to number bi inclusive in the ri- th row are allowed. Note that the segments of the allowed cells can intersect and embed arbitrarily. It is guaranteed that the king' s initial and final position are allowed cells. It is guaranteed that the king' s initial and the final positions do not coincide. It is guaranteed that the total length of all given segments doesn' t exceed 105.",
    "output": "If there is no path between the initial and final position along allowed cells, print - 1. Otherwise print a single integer \u2014 the minimum number of moves the king needs to get from the initial position to the final one.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "hashing",
      "shortest paths"
    ],
    "id": "242C"
  },
  {
    "title": "Flights",
    "url": "https://codeforces.com/problemset/problem/241/E",
    "history": "LiLand is a country, consisting of n cities. The cities are numbered from 1 to n. The country is well known because it has a very strange transportation system. There are many one- way flights that make it possible to travel between the cities, but the flights are arranged in a way that once you leave a city you will never be able to return to that city again. Previously each flight took exactly one hour, but recently Lily has become the new manager of transportation system and she wants to change the duration of some flights. Specifically, she wants to change the duration of some flights to exactly 2 hours in such a way that all trips from city 1 to city n take the same time regardless of their path. Your task is to help Lily to change the duration of flights.",
    "input": "First line of the input contains two integer numbers n and m ( 2 \u2264 n \u2264 1000; 1 \u2264 m \u2264 5000) specifying the number of cities and the number of flights. Each of the next m lines contains two integers ai and bi ( 1 \u2264 ai < bi \u2264 n) specifying a one- directional flight from city ai to city bi. It is guaranteed that there exists a way to travel from city number 1 to city number n using the given flights. It is guaranteed that there is no sequence of flights that forms a cyclical path and no two flights are between the same pair of cities.",
    "output": "If it is impossible for Lily to do her task, print \" No\" ( without quotes) on the only line of the output. Otherwise print \" Yes\" ( without quotes) on the first line of output, then print an integer ansi ( 1 \u2264 ansi \u2264 2) to each of the next m lines being the duration of flights in new transportation system. You should print these numbers in the order that flights are given in the input. If there are multiple solutions for the input, output any of them.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "241E"
  },
  {
    "title": "Road Repairs",
    "url": "https://codeforces.com/problemset/problem/240/E",
    "history": "A country named Berland has n cities. They are numbered with integers from 1 to n. City with index 1 is the capital of the country. Some pairs of cities have monodirectional roads built between them. However, not all of them are in good condition. For each road we know whether it needs repairing or not. If a road needs repairing, then it is forbidden to use it. However, the Berland government can repair the road so that it can be used. Right now Berland is being threatened by the war with the neighbouring state. So the capital officials decided to send a military squad to each city. The squads can move only along the existing roads, as there' s no time or money to build new roads. However, some roads will probably have to be repaired in order to get to some cities. Of course the country needs much resources to defeat the enemy, so you want to be careful with what you' re going to throw the forces on. That' s why the Berland government wants to repair the minimum number of roads that is enough for the military troops to get to any city from the capital, driving along good or repaired roads. Your task is to help the Berland government and to find out, which roads need to be repaired.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the number of cities and the number of roads in Berland. Next m lines contain three space- separated integers ai, bi, ci ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 0 \u2264 ci \u2264 1) , describing the road from city ai to city bi. If ci equals 0, than the given road is in a good condition. If ci equals 1, then it needs to be repaired. It is guaranteed that there is not more than one road between the cities in each direction.",
    "output": "If even after all roads are repaired, it is still impossible to get to some city from the capital, print - 1. Otherwise, on the first line print the minimum number of roads that need to be repaired, and on the second line print the numbers of these roads, separated by single spaces. The roads are numbered starting from 1 in the order, in which they are given in the input. If there are multiple sets, consisting of the minimum number of roads to repair to make travelling to any city from the capital possible, print any of them. If it is possible to reach any city, driving along the roads that already are in a good condition, print 0 in the only output line.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "240E"
  },
  {
    "title": "Meeting Her",
    "url": "https://codeforces.com/problemset/problem/238/E",
    "history": "Urpal lives in a big city. He has planned to meet his lover tonight. The city has n junctions numbered from 1 to n. The junctions are connected by m directed streets, all the roads have equal length. Urpal lives in junction a and the date is planned in a restaurant in junction b. He wants to use public transportation to get to junction b. There are k bus transportation companies. At the beginning of every second, a bus from the i- th company chooses a random shortest path between junction si and junction ti and passes through it. There might be no path from si to ti. In that case no bus will leave from si to ti. If a bus passes through a junction where Urpal stands, he can get on the bus. He can also get o\u001bff the bus at any junction along the path. Now Urpal wants to know if it' s possible to go to the date using public transportation in a finite amount of time ( the time of travel is the sum of length of the traveled roads) and what is the minimum number of buses he should take in the worst case. At any moment Urpal knows only his own position and the place where the date will be. When he gets on the bus he knows only the index of the company of this bus. Of course Urpal knows the city map and the the pairs ( si, ti) for each company. Note that Urpal doesn' t know buses velocity.",
    "input": "The first line of the input contains four integers n, m, a, b ( 2 \u2264 n \u2264 100; 0 \u2264 m \u2264 n\u00b7( n - 1) ; 1 \u2264 a, b \u2264 n; a = \u0338 b) . The next m lines contain two integers each ui and vi ( 1 \u2264 ui, vi \u2264 n; ui = \u0338 vi) describing a directed road from junction ui to junction vi. All roads in the input will be distinct. The next line contains an integer k ( 0 \u2264 k \u2264 100) . There will be k lines after this, each containing two integers si and ti ( 1 \u2264 si, ti \u2264 n; si = \u0338 ti) saying there is a bus route starting at si and ending at ti. Please note that there might be no path from si to ti, this case is described in the problem statement.",
    "output": "In the only line of output print the minimum number of buses Urpal should get on on his way in the worst case. If it' s not possible to reach the destination in the worst case print - 1.",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "238E"
  },
  {
    "title": "Build String",
    "url": "https://codeforces.com/problemset/problem/237/E",
    "history": "You desperately need to build some string t. For that you' ve got n more strings s1, s2, . . . , sn. To build string t, you are allowed to perform exactly | t| ( | t| is the length of string t) operations on these strings. Each operation looks like that: choose any non- empty string from strings s1, s2, . . . , sn; choose an arbitrary character from the chosen string and write it on a piece of paper; remove the chosen character from the chosen string. Note that after you perform the described operation, the total number of characters in strings s1, s2, . . . , sn decreases by 1. We are assumed to build string t, if the characters, written on the piece of paper, in the order of performed operations form string t. There are other limitations, though. For each string si you know number ai \u2014 the maximum number of characters you are allowed to delete from string si. You also know that each operation that results in deleting a character from string si, costs i rubles. That is, an operation on string s1 is the cheapest ( it costs 1 ruble) , and the operation on string sn is the most expensive one ( it costs n rubles) . Your task is to count the minimum amount of money ( in rubles) you will need to build string t by the given rules. Consider the cost of building string t to be the sum of prices of the operations you use.",
    "input": "The first line of the input contains string t \u2014 the string that you need to build. The second line contains a single integer n ( 1 \u2264 n \u2264 100) \u2014 the number of strings to which you are allowed to apply the described operation. Each of the next n lines contains a string and an integer. The i- th line contains space- separated string si and integer ai ( 0 \u2264 ai \u2264 100) . Number ai represents the maximum number of characters that can be deleted from string si. All strings in the input only consist of lowercase English letters. All strings are non- empty. The lengths of all strings do not exceed 100 characters.",
    "output": "Print a single number \u2014 the minimum money ( in rubles) you need in order to build string t. If there is no solution, print - 1.",
    "note": "Notes to the samples: In the first sample from the first string you should take characters \" b\" and \" z\" with price 1 ruble, from the second string characters \" a\" , \" e\" \u0438 \" b\" with price 2 rubles. The price of the string t in this case is 2\u00b71 + 3\u00b72 = 8. In the second sample from the first string you should take two characters \" a\" with price 1 ruble, from the second string character \" c\" with price 2 rubles, from the third string two characters \" a\" with price 3 rubles, from the fourth string two characters \" b\" with price 4 rubles. The price of the string t in this case is 2\u00b71 + 1\u00b72 + 2\u00b73 + 2\u00b74 = 18. In the third sample the solution doesn' t exist because there is no character \" y\" in given strings.",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "237E"
  },
  {
    "title": "T-decomposition",
    "url": "https://codeforces.com/problemset/problem/237/D",
    "history": "You' ve got a undirected tree s, consisting of n nodes. Your task is to build an optimal T- decomposition for it. Let' s define a T- decomposition as follows. Let' s denote the set of all nodes s as v. Let' s consider an undirected tree t, whose nodes are some non- empty subsets of v, we' ll call them xi . The tree t is a T- decomposition of s, if the following conditions holds: the union of all xi equals v; for any edge ( a, b) of tree s exists the tree node t, containing both a and b; if the nodes of the tree t xi and xj contain the node a of the tree s, then all nodes of the tree t, lying on the path from xi to xj also contain node a. So this condition is equivalent to the following: all nodes of the tree t, that contain node a of the tree s, form a connected subtree of tree t. There are obviously many distinct trees t, that are T- decompositions of the tree s. For example, a T- decomposition is a tree that consists of a single node, equal to set v. Let' s define the cardinality of node xi as the number of nodes in tree s, containing in the node. Let' s choose the node with the maximum cardinality in t. Let' s assume that its cardinality equals w. Then the weight of T- decomposition t is value w. The optimal T- decomposition is the one with the minimum weight. Your task is to find the optimal T- decomposition of the given tree s that has the minimum number of nodes.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 105) , that denotes the number of nodes in tree s. Each of the following n - 1 lines contains two space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , denoting that the nodes of tree s with indices ai and bi are connected by an edge. Consider the nodes of tree s indexed from 1 to n. It is guaranteed that s is a tree.",
    "output": "In the first line print a single integer m that denotes the number of nodes in the required T- decomposition. Then print m lines, containing descriptions of the T- decomposition nodes. In the i- th ( 1 \u2264 i \u2264 m) of them print the description of node xi of the T- decomposition. The description of each node xi should start from an integer ki, that represents the number of nodes of the initial tree s, that are contained in the node xi. Then you should print ki distinct space- separated integers \u2014 the numbers of nodes from s, contained in xi, in arbitrary order. Then print m - 1 lines, each consisting two integers pi, qi ( 1 \u2264 pi, qi \u2264 m; pi = \u0338 qi) . The pair of integers pi, qi means there is an edge between nodes xpi and xqi of T- decomposition. The printed T- decomposition should be the optimal T- decomposition for the given tree s and have the minimum possible number of nodes among all optimal T- decompositions. If there are multiple optimal T- decompositions with the minimum number of nodes, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "237D"
  },
  {
    "title": "Graph Game",
    "url": "https://codeforces.com/problemset/problem/235/D",
    "history": "In computer science, there is a method called \" Divide And Conquer By Node\" to solve some hard problems about paths on a tree. Let' s desribe how this method works by function: solve( t) ( t is a tree) : Chose a node x ( it' s common to chose weight- center) in tree t. Let' s call this step \" Line A\" . Deal with all paths that pass x. Then delete x from tree t. After that t becomes some subtrees. Apply solve on each subtree. This ends when t has only one node because after deleting it, there' s nothing. Now, WJMZBMR has mistakenly believed that it' s ok to chose any node in \" Line A\" . So he' ll chose a node at random. To make the situation worse, he thinks a \" tree\" should have the same number of edges and nodes! So this procedure becomes like that. Let' s define the variable totalCost. Initially the value of totalCost equal to 0. So, solve( t) ( now t is a graph) : totalCost = totalCost + ( size of t) . The operation \" = \" means assignment. ( Size of t) means the number of nodes in t. Choose a node x in graph t at random ( uniformly among all nodes of t) . Then delete x from graph t. After that t becomes some connected components. Apply solve on each component. He' ll apply solve on a connected graph with n nodes and n edges. He thinks it will work quickly, but it' s very slow. So he wants to know the expectation of totalCost of this procedure. Can you help him?",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 3000) \u2014 the number of nodes and edges in the graph. Each of the next n lines contains two space- separated integers ai, bi ( 0 \u2264 ai, bi \u2264 n - 1) indicating an edge between nodes ai and bi. Consider that the graph nodes are numbered from 0 to ( n - 1) . It' s guaranteed that there are no self- loops, no multiple edges in that graph. It' s guaranteed that the graph is connected.",
    "output": "Print a single real number \u2014 the expectation of totalCost. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6.",
    "note": "Consider the second example. No matter what we choose first, the totalCost will always be 3 + 2 + 1 = 6.",
    "topics": [
      "graphs"
    ],
    "id": "235D"
  },
  {
    "title": "Doe Graphs",
    "url": "https://codeforces.com/problemset/problem/232/C",
    "history": "John Doe decided that some mathematical object must be named after him. So he invented the Doe graphs. The Doe graphs are a family of undirected graphs, each of them is characterized by a single non- negative number \u2014 its order. We' ll denote a graph of order k as D( k) , and we' ll denote the number of vertices in the graph D( k) as | D( k) | . Then let' s define the Doe graphs as follows: D( 0) consists of a single vertex, that has number 1. D( 1) consists of two vertices with numbers 1 and 2, connected by an edge. D( n) for n \u2265 2 is obtained from graphs D( n - 1) and D( n - 2) . D( n - 1) and D( n - 2) are joined in one graph, at that numbers of all vertices of graph D( n - 2) increase by | D( n - 1) | ( for example, vertex number 1 of graph D( n - 2) becomes vertex number 1 + | D( n - 1) | ) . After that two edges are added to the graph: the first one goes between vertices with numbers | D( n - 1) | and | D( n - 1) | + 1, the second one goes between vertices with numbers | D( n - 1) | + 1 and 1. Note that the definition of graph D( n) implies, that D( n) is a connected graph, its vertices are numbered from 1 to | D( n) | . The picture shows the Doe graphs of order 1, 2, 3 and 4, from left to right. John thinks that Doe graphs are that great because for them exists a polynomial algorithm for the search of Hamiltonian path. However, your task is to answer queries of finding the shortest- length path between the vertices ai and bi in the graph D( n) . A path between a pair of vertices u and v in the graph is a sequence of vertices x1, x2, . . . , xk ( k > 1) such, that x1 = u, xk = v, and for any i ( i < k) vertices xi and xi + 1 are connected by a graph edge. The length of path x1, x2, . . . , xk is number ( k - 1) .",
    "input": "The first line contains two integers t and n ( 1 \u2264 t \u2264 105; 1 \u2264 n \u2264 103) \u2014 the number of queries and the order of the given graph. The i- th of the next t lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 1016, ai = \u0338 bi) \u2014 numbers of two vertices in the i- th query. It is guaranteed that ai, bi \u2264 | D( n) | . Please, do not use the",
    "output": "For each query print a single integer on a single line \u2014 the length of the shortest path between vertices ai and bi. Print the answers to the queries in the order, in which the queries are given in the input.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "divide and conquer",
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "232C"
  },
  {
    "title": "Cycles",
    "url": "https://codeforces.com/problemset/problem/232/A",
    "history": "John Doe started thinking about graphs. After some thought he decided that he wants to paint an undirected graph, containing exactly k cycles of length 3. A cycle of length 3 is an unordered group of three distinct graph vertices a, b and c, such that each pair of them is connected by a graph edge. John has been painting for long, but he has not been a success. Help him find such graph. Note that the number of vertices there shouldn' t exceed 100, or else John will have problems painting it.",
    "input": "A single line contains an integer k ( 1 \u2264 k \u2264 105) \u2014 the number of cycles of length 3 in the required graph.",
    "output": "In the first line print integer n ( 3 \u2264 n \u2264 100) \u2014 the number of vertices in the found graph. In each of next n lines print n characters \" 0\" and \" 1\" : the i- th character of the j- th line should equal \" 0\" , if vertices i and j do not have an edge between them, otherwise it should equal \" 1\" . Note that as the required graph is undirected, the i- th character of the j- th line must equal the j- th character of the i- th line. The graph shouldn' t contain self- loops, so the i- th character of the i- th line must equal \" 0\" for all i.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "232A"
  },
  {
    "title": "Cactus",
    "url": "https://codeforces.com/problemset/problem/231/E",
    "history": "A connected undirected graph is called a vertex cactus, if each vertex of this graph belongs to at most one simple cycle. A simple cycle in a undirected graph is a sequence of distinct vertices v1, v2, . . . , vt ( t > 2) , such that for any i ( 1 \u2264 i < t) exists an edge between vertices vi and vi + 1, and also exists an edge between vertices v1 and vt. A simple path in a undirected graph is a sequence of not necessarily distinct vertices v1, v2, . . . , vt ( t > 0) , such that for any i ( 1 \u2264 i < t) exists an edge between vertices vi and vi + 1 and furthermore each edge occurs no more than once. We' ll say that a simple path v1, v2, . . . , vt starts at vertex v1 and ends at vertex vt. You' ve got a graph consisting of n vertices and m edges, that is a vertex cactus. Also, you' ve got a list of k pairs of interesting vertices xi, yi, for which you want to know the following information \u2014 the number of distinct simple paths that start at vertex xi and end at vertex yi. We will consider two simple paths distinct if the sets of edges of the paths are distinct. For each pair of interesting vertices count the number of distinct simple paths between them. As this number can be rather large, you should calculate it modulo 1000000007 ( 109 + 7) .",
    "input": "The first line contains two space- separated integers n, m ( 2 \u2264 n \u2264 105; 1 \u2264 m \u2264 105) \u2014 the number of vertices and edges in the graph, correspondingly. Next m lines contain the description of the edges: the i- th line contains two space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 n) \u2014 the indexes of the vertices connected by the i- th edge. The next line contains a single integer k ( 1 \u2264 k \u2264 105) \u2014 the number of pairs of interesting vertices. Next k lines contain the list of pairs of interesting vertices: the i- th line contains two space- separated numbers xi, yi ( 1 \u2264 xi, yi \u2264 n; xi = \u0338 yi) \u2014 the indexes of interesting vertices in the i- th pair. It is guaranteed that the given graph is a vertex cactus. It is guaranteed that the graph contains no loops or multiple edges. Consider the graph vertices are numbered from 1 to n.",
    "output": "Print k lines: in the i- th line print a single integer \u2014 the number of distinct simple ways, starting at xi and ending at yi, modulo 1000000007 ( 109 + 7) .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "231E"
  },
  {
    "title": "Triangles",
    "url": "https://codeforces.com/problemset/problem/229/C",
    "history": "Alice and Bob don' t play games anymore. Now they study properties of all sorts of graphs together. Alice invented the following task: she takes a complete undirected graph with n vertices, chooses some m edges and keeps them. Bob gets the remaining edges. Alice and Bob are fond of \" triangles\" in graphs, that is, cycles of length 3. That' s why they wonder: what total number of triangles is there in the two graphs formed by Alice and Bob' s edges, correspondingly?",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n \u2264 106, 0 \u2264 m \u2264 106) \u2014 the number of vertices in the initial complete graph and the number of edges in Alice' s graph, correspondingly. Then m lines follow: the i- th line contains two space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , \u2014 the numbers of the two vertices connected by the i- th edge in Alice' s graph. It is guaranteed that Alice' s graph contains no multiple edges and self- loops. It is guaranteed that the initial complete graph also contains no multiple edges and self- loops. Consider the graph vertices to be indexed in some way from 1 to n.",
    "output": "Print a single number \u2014 the total number of cycles of length 3 in Alice and Bob' s graphs together. Please, do not use the",
    "note": "In the first sample Alice has 2 triangles: ( 1, 2, 3) and ( 2, 3, 4) . Bob' s graph has only 1 triangle : ( 1, 4, 5) . That' s why the two graphs in total contain 3 triangles. In the second sample Alice' s graph has only one triangle: ( 1, 2, 3) . Bob' s graph has three triangles: ( 1, 4, 5) , ( 2, 4, 5) and ( 3, 4, 5) . In this case the answer to the problem is 4.",
    "topics": [
      "combinatorics",
      "graphs",
      "math"
    ],
    "id": "229C"
  },
  {
    "title": "Planets",
    "url": "https://codeforces.com/problemset/problem/229/B",
    "history": "Goa' uld Apophis captured Jack O' Neill' s team again! Jack himself was able to escape, but by that time Apophis' s ship had already jumped to hyperspace. But Jack knows on what planet will Apophis land. In order to save his friends, Jack must repeatedly go through stargates to get to this planet. Overall the galaxy has n planets, indexed with numbers from 1 to n. Jack is on the planet with index 1, and Apophis will land on the planet with index n. Jack can move between some pairs of planets through stargates ( he can move in both directions) ; the transfer takes a positive, and, perhaps, for different pairs of planets unequal number of seconds. Jack begins his journey at time 0. It can be that other travellers are arriving to the planet where Jack is currently located. In this case, Jack has to wait for exactly 1 second before he can use the stargate. That is, if at time t another traveller arrives to the planet, Jack can only pass through the stargate at time t + 1, unless there are more travellers arriving at time t + 1 to the same planet. Knowing the information about travel times between the planets, and the times when Jack would not be able to use the stargate on particular planets, determine the minimum time in which he can get to the planet with index n.",
    "input": "The first line contains two space- separated integers: n ( 2 \u2264 n \u2264 105) , the number of planets in the galaxy, and m ( 0 \u2264 m \u2264 105) \u2014 the number of pairs of planets between which Jack can travel using stargates. Then m lines follow, containing three integers each: the i- th line contains numbers of planets ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , which are connected through stargates, and the integer transfer time ( in seconds) ci ( 1 \u2264 ci \u2264 104) between these planets. It is guaranteed that between any pair of planets there is at most one stargate connection. Then n lines follow: the i- th line contains an integer ki ( 0 \u2264 ki \u2264 105) that denotes the number of moments of time when other travellers arrive to the planet with index i. Then ki distinct space- separated integers tij ( 0 \u2264 tij < 109) follow, sorted in ascending order. An integer tij means that at time tij ( in seconds) another traveller arrives to the planet i. It is guaranteed that the sum of all ki does not exceed 105.",
    "output": "Print a single number \u2014 the least amount of time Jack needs to get from planet 1 to planet n. If Jack can' t get to planet n in any amount of time, print number - 1.",
    "note": "In the first sample Jack has three ways to go from planet 1. If he moves to planet 4 at once, he spends 8 seconds. If he transfers to planet 3, he spends 3 seconds, but as other travellers arrive to planet 3 at time 3 and 4, he can travel to planet 4 only at time 5, thus spending 8 seconds in total. But if Jack moves to planet 2, and then \u2014 to planet 4, then he spends a total of only 2 + 5 = 7 seconds. In the second sample one can' t get from planet 1 to planet 3 by moving through stargates.",
    "topics": [
      "binary search",
      "data structures",
      "graphs",
      "shortest paths"
    ],
    "id": "229B"
  },
  {
    "title": "The Road to Berland is Paved With Good Intentions",
    "url": "https://codeforces.com/problemset/problem/228/E",
    "history": "Berland has n cities, some of them are connected by bidirectional roads. For each road we know whether it is asphalted or not. The King of Berland Valera II wants to asphalt all roads of Berland, for that he gathered a group of workers. Every day Valera chooses exactly one city and orders the crew to asphalt all roads that come from the city. The valiant crew fulfilled the King' s order in a day, then workers went home. Unfortunately, not everything is as great as Valera II would like. The main part of the group were gastarbeiters \u2014 illegal immigrants who are enthusiastic but not exactly good at understanding orders in Berlandian. Therefore, having received orders to asphalt the roads coming from some of the city, the group asphalted all non- asphalted roads coming from the city, and vice versa, took the asphalt from the roads that had it. Upon learning of this progress, Valera II was very upset, but since it was too late to change anything, he asked you to make a program that determines whether you can in some way asphalt Berlandian roads in at most n days. Help the king.",
    "input": "The first line contains two space- separated integers n, m \u2014 the number of cities and roads in Berland, correspondingly. Next m lines contain the descriptions of roads in Berland: the i- th line contains three space- separated integers ai, bi, ci ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi; 0 \u2264 ci \u2264 1) . The first two integers ( ai, bi) are indexes of the cities that are connected by the i- th road, the third integer ( ci) equals 1, if the road was initially asphalted, and 0 otherwise. Consider the cities in Berland indexed from 1 to n, and the roads indexed from 1 to m. It is guaranteed that between two Berlandian cities there is not more than one road.",
    "output": "In the first line print a single integer x ( 0 \u2264 x \u2264 n) \u2014 the number of days needed to asphalt all roads. In the second line print x space- separated integers \u2014 the indexes of the cities to send the workers to. Print the cities in the order, in which Valera send the workers to asphalt roads. If there are multiple solutions, print any of them. If there' s no way to asphalt all roads, print \" Impossible\" ( without the quotes) .",
    "note": "",
    "topics": [
      "2-sat",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "228E"
  },
  {
    "title": "Snake",
    "url": "https://codeforces.com/problemset/problem/225/D",
    "history": "Let us remind you the rules of a very popular game called \" Snake\" ( or sometimes \" Boa\" , \" Python\" or \" Worm\" ) . The game field is represented by an n \u00d7 m rectangular table. Some squares of the field are considered impassable ( walls) , all other squares of the fields are passable. You control a snake, the snake consists of segments. Each segment takes up exactly one passable square of the field, but any passable square contains at most one segment. All segments are indexed by integers from 1 to k, where k is the snake' s length. The 1- th segment is the head and the k- th segment is the tail. For any i ( 1 \u2264 i < k) , segments with indexes i and i + 1 are located in the adjacent squares of the field, that is, these squares share a common side. One of the passable field squares contains an apple. The snake' s aim is to reach the apple and eat it ( that is, to position its head in the square with the apple) . The snake moves throughout the game. During one move the snake can move its head to an adjacent field square. All other segments follow the head. That is, each segment number i ( 1 < i \u2264 k) moves to the square that has just had segment number i - 1. Consider that all segments including the head move simultaneously ( see the second test sample) . If the snake' s head moves to an unpassable square or to the square, occupied by its other segment, the snake dies. That' s why we will consider such moves unvalid. Your task is to determine the minimum number of valid moves that the snake needs to reach the apple.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 15) \u2014 the number of rows and columns of the game field. Next n lines describe the game field. Each of these lines contains m characters. Character \" # \" represents a wall, \" . \" is a passable square, \" @ \" is an apple. The snake' s first segment is represented by character \" 1\" , the second one segment \u2014 by character \" 2\" and so on. The game field description doesn' t contain any characters besides \" # ' , \" . \" , \" @ \" and digits ( except 0) . It is guaranteed that the described field is correct. It is guaranteed that the described field contains exactly one apple and exactly one snake, the snake' s length is at least 3 and at most 9.",
    "output": "Print a single integer to the output \u2014 the minimum number of moves needed to reach the apple. If the snake can' t reach the apple, print - 1.",
    "note": "",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "225D"
  },
  {
    "title": "Planar Graph",
    "url": "https://codeforces.com/problemset/problem/223/E",
    "history": "A graph is called planar, if it can be drawn in such a way that its edges intersect only at their vertexes. An articulation point is such a vertex of an undirected graph, that when removed increases the number of connected components of the graph. A bridge is such an edge of an undirected graph, that when removed increases the number of connected components of the graph. You' ve got a connected undirected planar graph consisting of n vertexes, numbered from 1 to n, drawn on the plane. The graph has no bridges, articulation points, loops and multiple edges. You are also given q queries. Each query is a cycle in the graph. The query response is the number of graph vertexes, which ( if you draw a graph and the cycle on the plane) are located either inside the cycle, or on it. Write a program that, given the graph and the queries, will answer each query.",
    "input": "The first line contains two space- separated integers n and m ( 3 \u2264 n, m \u2264 105) \u2014 the number of vertexes and edges of the graph. Next m lines contain the edges of the graph: the i- th line contains two space- separated integers ui and vi ( 1 \u2264 ui, vi \u2264 n) \u2014 the numbers of vertexes, connecting the i- th edge. The next n lines contain the positions of the planar graph vertexes on the plane: the i- th line contains a pair of space- separated integers xi and yi ( | xi| , | yi| \u2264 109) \u2014 the coordinates of the i- th vertex of the graph on the plane. The next line contains integer q ( 1 \u2264 q \u2264 105) \u2014 the number of queries. Then follow q lines that describe the queries: the i- th line contains the sequence of space- separated integers ki, a1, a2, . . . , aki ( 1 \u2264 aj \u2264 n; ki > 2) , where ki is the cycle length in the i- th query, aj are numbers of the vertexes that form a cycle. The numbers of vertexes in the cycle are given in the clockwise or counterclockwise order. The given cycles are simple, that is they cannot go through a graph vertex more than once. The total length of all cycles in all queries does not exceed 105. It is guaranteed that the given graph contains no bridges, articulation points, loops and multiple edges. It is guaranteed that the edge segments can have common points only at the graph' s vertexes.",
    "output": "For each query print a single integer \u2014 the number of vertexes inside the cycle or on it. Print the answers in the order, in which the queries follow in the input. Separate the numbers by spaces.",
    "note": "",
    "topics": [
      "flows",
      "geometry",
      "graphs"
    ],
    "id": "223E"
  },
  {
    "title": "Spider",
    "url": "https://codeforces.com/problemset/problem/223/D",
    "history": "A plane contains a not necessarily convex polygon without self- intersections, consisting of n vertexes, numbered from 1 to n. There is a spider sitting on the border of the polygon, the spider can move like that: Transfer. The spider moves from the point p1 with coordinates ( x1, y1) , lying on the polygon border, to the point p2 with coordinates ( x2, y2) , also lying on the border. The spider can' t go beyond the polygon border as it transfers, that is, the spider' s path from point p1 to point p2 goes along the polygon border. It' s up to the spider to choose the direction of walking round the polygon border ( clockwise or counterclockwise) . Descend. The spider moves from point p1 with coordinates ( x1, y1) to point p2 with coordinates ( x2, y2) , at that points p1 and p2 must lie on one vertical straight line ( x1 = x2) , point p1 must be not lower than point p2 ( y1 \u2265 y2) and segment p1p2 mustn' t have points, located strictly outside the polygon ( specifically, the segment can have common points with the border) . Initially the spider is located at the polygon vertex with number s. Find the length of the shortest path to the vertex number t, consisting of transfers and descends. The distance is determined by the usual Euclidean metric .",
    "input": "The first line contains integer n ( 3 \u2264 n \u2264 105) \u2014 the number of vertexes of the given polygon. Next n lines contain two space- separated integers each \u2014 the coordinates of the polygon vertexes. The vertexes are listed in the counter- clockwise order. The coordinates of the polygon vertexes do not exceed 104 in their absolute value. The last line contains two space- separated integers s and t ( 1 \u2264 s, t \u2264 n) \u2014 the start and the end vertexes of the sought shortest way. Consider the polygon vertexes numbered in the order they are given in the input, that is, the coordinates of the first vertex are located on the second line of the input and the coordinates of the n- th vertex are on the ( n + 1) - th line. It is guaranteed that the given polygon is simple, that is, it contains no self- intersections or self- tangencies.",
    "output": "In the output print a single real number \u2014 the length of the shortest way from vertex s to vertex t. The answer is considered correct, if its absolute or relative error does not exceed 10 - 6.",
    "note": "In the first sample the spider transfers along the side that connects vertexes 1 and 4. In the second sample the spider doesn' t have to transfer anywhere, so the distance equals zero. In the third sample the best strategy for the spider is to transfer from vertex 3 to point ( 2, 3) , descend to point ( 2, 1) , and then transfer to vertex 1.",
    "topics": [
      "geometry",
      "graphs"
    ],
    "id": "223D"
  },
  {
    "title": "Choosing Capital for Treeland",
    "url": "https://codeforces.com/problemset/problem/219/D",
    "history": "The country Treeland consists of n cities, some pairs of them are connected with unidirectional roads. Overall there are n - 1 roads in the country. We know that if we don' t take the direction of the roads into consideration, we can get from any city to any other one. The council of the elders has recently decided to choose the capital of Treeland. Of course it should be a city of this country. The council is supposed to meet in the capital and regularly move from the capital to other cities ( at this stage nobody is thinking about getting back to the capital from these cities) . For that reason if city a is chosen a capital, then all roads must be oriented so that if we move along them, we can get from city a to any other city. For that some roads may have to be inversed. Help the elders to choose the capital so that they have to inverse the minimum number of roads in the country.",
    "input": "The first input line contains integer n ( 2 \u2264 n \u2264 2\u00b7105) \u2014 the number of cities in Treeland. Next n - 1 lines contain the descriptions of the roads, one road per line. A road is described by a pair of integers si, ti ( 1 \u2264 si, ti \u2264 n; si = \u0338 ti) \u2014 the numbers of cities, connected by that road. The i- th road is oriented from city si to city ti. You can consider cities in Treeland indexed from 1 to n.",
    "output": "In the first line print the minimum number of roads to be inversed if the capital is chosen optimally. In the second line print all possible ways to choose the capital \u2014 a sequence of indexes of cities in the increasing order.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "219D"
  },
  {
    "title": "Ice Skating",
    "url": "https://codeforces.com/problemset/problem/217/A",
    "history": "Bajtek is learning to skate on ice. He' s a beginner, so his only mode of transportation is pushing off from a snow drift to the north, east, south or west and sliding until he lands in another snow drift. He has noticed that in this way it' s impossible to get from some snow drifts to some other by any sequence of moves. He now wants to heap up some additional snow drifts, so that he can get from any snow drift to any other one. He asked you to find the minimal number of snow drifts that need to be created. We assume that Bajtek can only heap up snow drifts at integer coordinates.",
    "input": "The first line of input contains a single integer n ( 1 \u2264 n \u2264 100) \u2014 the number of snow drifts. Each of the following n lines contains two integers xi and yi ( 1 \u2264 xi, yi \u2264 1000) \u2014 the coordinates of the i- th snow drift. Note that the north direction coin\u0441ides with the direction of Oy axis, so the east direction coin\u0441ides with the direction of the Ox axis. All snow drift' s locations are distinct.",
    "output": "Output the minimal number of snow drifts that need to be created in order for Bajtek to be able to reach any snow drift from any other one.",
    "note": "",
    "topics": [
      "brute force",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "217A"
  },
  {
    "title": "Privatization",
    "url": "https://codeforces.com/problemset/problem/212/A",
    "history": "There is a developed network of flights between Berland and Beerland. All of them belong to the Berland state company BerAvia. Each flight connects some Berland city with some Beerland city. For each flight airplanes fly in both directions. Changes are coming to Berland \u2014 the state decided to privatize BerAvia, namely, to sell out all flights to t private companies. Each of these companies wants to get the maximal number of flights, so if the Berland flights are sold unevenly, Berland can be accused of partiality. Berland Government decided to sell the flights as evenly as possible between the t companies. The unevenness of the distribution of flights between companies is calculated as follows. For each city i ( both Berland and Beerland) we' ll calculate the value of where aij is the number of flights from city i, which belong to company j. The sum of wi for all cities in both countries is called the unevenness of the distribution. The distribution with the minimal unevenness is the most even one. Help the Berland government come up with the most even distribution plan of selling flights.",
    "input": "The first input line contains four integers n, m, k and t ( 1 \u2264 n, m, t \u2264 200; 1 \u2264 k \u2264 5000) , where n, m are the numbers of cities in Berland and Beerland, correspondingly, k is the number of flights between them, and t is the number of private companies. Next k lines describe the flights, one per line, as pairs of positive integers xi, yi ( 1 \u2264 xi \u2264 n; 1 \u2264 yi \u2264 m) , where xi and yi are the indexes of cities in Berland and Beerland, correspondingly, connected by the i- th flight. There is at most one flight between any pair of cities, each flight connects cities of different countries. The cities in Berland are indexed from 1 to n, and in Beerland \u2014 from 1 to m.",
    "output": "Print the unevenness of the sought plan on the first line. On the second line print a sequence of k integers c1, c2, . . . , ck ( 1 \u2264 ci \u2264 t) , where ci is the index of the company that should buy the i- th flight. Assume that the flights are indexed from 1 to k in the order they appear in the input. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "212A"
  },
  {
    "title": "Trails and Glades",
    "url": "https://codeforces.com/problemset/problem/209/C",
    "history": "Vasya went for a walk in the park. The park has n glades, numbered from 1 to n. There are m trails between the glades. The trails are numbered from 1 to m, where the i- th trail connects glades xi and yi. The numbers of the connected glades may be the same ( xi = yi) , which means that a trail connects a glade to itself. Also, two glades may have several non- intersecting trails between them. Vasya is on glade 1, he wants to walk on all trails of the park exactly once, so that he can eventually return to glade 1. Unfortunately, Vasya does not know whether this walk is possible or not. Help Vasya, determine whether the walk is possible or not. If such walk is impossible, find the minimum number of trails the authorities need to add to the park in order to make the described walk possible. Vasya can shift from one trail to another one only on glades. He can move on the trails in both directions. If Vasya started going on the trail that connects glades a and b, from glade a, then he must finish this trail on glade b.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 106; 0 \u2264 m \u2264 106) \u2014 the number of glades in the park and the number of trails in the park, respectively. Next m lines specify the trails. The i- th line specifies the i- th trail as two space- separated numbers, xi, yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the numbers of the glades connected by this trail.",
    "output": "Print the single integer \u2014 the answer to the problem. If Vasya' s walk is possible without adding extra trails, print 0, otherwise print the minimum number of trails the authorities need to add to the park in order to make Vasya' s walk possible.",
    "note": "In the first test case the described walk is possible without building extra trails. For example, let' s first go on the first trail, then on the second one, and finally on the third one. In the second test case the described walk is impossible without adding extra trails. To make the walk possible, it is enough to add one trail, for example, between glades number one and two.",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "209C"
  },
  {
    "title": "Police Station",
    "url": "https://codeforces.com/problemset/problem/208/C",
    "history": "The Berland road network consists of n cities and of m bidirectional roads. The cities are numbered from 1 to n, where the main capital city has number n, and the culture capital \u2014 number 1. The road network is set up so that it is possible to reach any city from any other one by the roads. Moving on each road in any direction takes the same time. All residents of Berland are very lazy people, and so when they want to get from city v to city u, they always choose one of the shortest paths ( no matter which one) . The Berland government wants to make this country' s road network safer. For that, it is going to put a police station in one city. The police station has a rather strange property: when a citizen of Berland is driving along the road with a police station at one end of it, the citizen drives more carefully, so all such roads are considered safe. The roads, both ends of which differ from the city with the police station, are dangerous. Now the government wonders where to put the police station so that the average number of safe roads for all the shortest paths from the cultural capital to the main capital would take the maximum value.",
    "input": "The first input line contains two integers n and m ( 2 \u2264 n \u2264 100, ) \u2014 the number of cities and the number of roads in Berland, correspondingly. Next m lines contain pairs of integers vi, ui ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui) \u2014 the numbers of cities that are connected by the i- th road. The numbers on a line are separated by a space. It is guaranteed that each pair of cities is connected with no more than one road and that it is possible to get from any city to any other one along Berland roads.",
    "output": "Print the maximum possible value of the average number of safe roads among all shortest paths from the culture capital to the main one. The answer will be considered valid if its absolute or relative inaccuracy does not exceed 10 - 6.",
    "note": "In the first sample you can put a police station in one of the capitals, then each path will have exactly one safe road. If we place the station not in the capital, then the average number of safe roads will also make . In the second sample we can obtain the maximum sought value if we put the station in city 4, then 6 paths will have 2 safe roads each, and one path will have 0 safe roads, so the answer will equal .",
    "topics": [
      "dp",
      "graphs",
      "shortest paths"
    ],
    "id": "208C"
  },
  {
    "title": "Opening Portals",
    "url": "https://codeforces.com/problemset/problem/196/E",
    "history": "Pavel plays a famous computer game. A player is responsible for a whole country and he can travel there freely, complete quests and earn experience. This country has n cities connected by m bidirectional roads of different lengths so that it is possible to get from any city to any other one. There are portals in k of these cities. At the beginning of the game all portals are closed. When a player visits a portal city, the portal opens. Strange as it is, one can teleport from an open portal to an open one. The teleportation takes no time and that enables the player to travel quickly between rather remote regions of the country. At the beginning of the game Pavel is in city number 1. He wants to open all portals as quickly as possible. How much time will he need for that?",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105) that show how many cities and roads are in the game. Each of the next m lines contains the description of a road as three space- separated integers xi, yi, wi ( 1 \u2264 xi, yi \u2264 n, xi = \u0338 yi, 1 \u2264 wi \u2264 109) \u2014 the numbers of the cities connected by the i- th road and the time needed to go from one city to the other one by this road. Any two cities are connected by no more than one road. It is guaranteed that we can get from any city to any other one, moving along the roads of the country. The next line contains integer k ( 1 \u2264 k \u2264 n) \u2014 the number of portals. The next line contains k space- separated integers p1, p2, . . . , pk \u2014 numbers of the cities with installed portals. Each city has no more than one portal.",
    "output": "Print a single number \u2014 the minimum time a player needs to open all portals. Please, do not use the",
    "note": "In the second sample the player has to come to city 2, open a portal there, then go to city 3, open a portal there, teleport back to city 2 and finally finish the journey in city 4.",
    "topics": [
      "dsu",
      "graphs",
      "shortest paths"
    ],
    "id": "196E"
  },
  {
    "title": "Infinite Maze",
    "url": "https://codeforces.com/problemset/problem/196/B",
    "history": "We' ve got a rectangular n \u00d7 m- cell maze. Each cell is either passable, or is a wall ( impassable) . A little boy found the maze and cyclically tiled a plane with it so that the plane became an infinite maze. Now on this plane cell ( x, y) is a wall if and only if cell is a wall. In this problem is a remainder of dividing number a by number b. The little boy stood at some cell on the plane and he wondered whether he can walk infinitely far away from his starting position. From cell ( x, y) he can go to one of the following cells: ( x, y - 1) , ( x, y + 1) , ( x - 1, y) and ( x + 1, y) , provided that the cell he goes to is not a wall.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 1500) \u2014 the height and the width of the maze that the boy used to cyclically tile the plane. Each of the next n lines contains m characters \u2014 the description of the labyrinth. Each character is either a \" # \" , that marks a wall, a \" . \" , that marks a passable cell, or an \" S\" , that marks the little boy' s starting point. The starting point is a passable cell. It is guaranteed that character \" S\" occurs exactly once in the input.",
    "output": "Print \" Yes\" ( without the quotes) , if the little boy can walk infinitely far from the starting point. Otherwise, print \" No\" ( without the quotes) .",
    "note": "In the first sample the little boy can go up for infinitely long as there is a \" clear path\" that goes vertically. He just needs to repeat the following steps infinitely: up, up, left, up, up, right, up. In the second sample the vertical path is blocked. The path to the left doesn' t work, too \u2014 the next \" copy\" of the maze traps the boy.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "196B"
  },
  {
    "title": "Building Forest",
    "url": "https://codeforces.com/problemset/problem/195/E",
    "history": "An oriented weighted forest is an acyclic weighted digraph in which from each vertex at most one edge goes. The root of vertex v of an oriented weighted forest is a vertex from which no edge goes and which can be reached from vertex v moving along the edges of the weighted oriented forest. We denote the root of vertex v as root( v) . The depth of vertex v is the sum of weights of paths passing from the vertex v to its root. Let' s denote the depth of the vertex v as depth( v) . Let' s consider the process of constructing a weighted directed forest. Initially, the forest does not contain vertices. Vertices are added sequentially one by one. Overall, there are n performed operations of adding. The i- th ( i > 0) adding operation is described by a set of numbers ( k, v1, x1, v2, x2, . . . , vk, xk) and means that we should add vertex number i and k edges to the graph: an edge from vertex root( v1) to vertex i with weight depth( v1) + x1, an edge from vertex root( v2) to vertex i with weight depth( v2) + x2 and so on. If k = 0, then only vertex i is added to the graph, there are no added edges. Your task is like this: given the operations of adding vertices, calculate the sum of the weights of all edges of the forest, resulting after the application of all defined operations, modulo 1000000007 ( 109 + 7) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of operations of adding a vertex. Next n lines contain descriptions of the operations, the i- th line contains the description of the operation of adding the i- th vertex in the following format: the first number of a line is an integer k ( 0 \u2264 k \u2264 i - 1) , then follow 2k space- separated integers: v1, x1, v2, x2, . . . , vk, xk ( 1 \u2264 vj \u2264 i - 1, | xj| \u2264 109) . The operations are given in the order, in which they should be applied to the graph. It is guaranteed that sum k of all operations does not exceed 105, also that applying operations of adding vertexes does not result in loops and multiple edges.",
    "output": "Print a single number \u2014 the sum of weights of all edges of the resulting graph modulo 1000000007 ( 109 + 7) .",
    "note": "Conside the first sample: Vertex 1 is added. k = 0, thus no edges are added. Vertex 2 is added. k = 0, thus no edges are added. Vertex 3 is added. k = 1. v1 = 2, x1 = 1. Edge from vertex root( 2) = 2 to vertex 3 with weight depth( 2) + x1 = 0 + 1 = 1 is added. Vertex 4 is added. k = 2. v1 = 1, x1 = 5. Edge from vertex root( 1) = 1 to vertex 4 with weight depth( 1) + x1 = 0 + 5 = 5 is added. v2 = 2, x2 = 2. Edge from vertex root( 2) = 3 to vertex 4 with weight depth( 2) + x1 = 1 + 2 = 3 is added. Vertex 5 is added. k = 1. v1 = 1, x1 = 2. Edge from vertex root( 1) = 4 to vertex 5 with weight depth( 1) + x1 = 5 + 2 = 7 is added. Vertex 6 is added. k = 1. v1 = 3, x1 = 4. Edge from vertex root( 3) = 5 to vertex 6 with weight depth( 3) + x1 = 10 + 4 = 14 is added. The resulting graph is shown on the pictore below:",
    "topics": [
      "data structures",
      "dsu",
      "graphs"
    ],
    "id": "195E"
  },
  {
    "title": "Cutting Figure",
    "url": "https://codeforces.com/problemset/problem/193/A",
    "history": "You' ve gotten an n \u00d7 m sheet of squared paper. Some of its squares are painted. Let' s mark the set of all painted squares as A. Set A is connected. Your task is to find the minimum number of squares that we can delete from set A to make it not connected. A set of painted squares is called connected, if for every two squares a and b from this set there is a sequence of squares from the set, beginning in a and ending in b, such that in this sequence any square, except for the last one, shares a common side with the square that follows next in the sequence. An empty set and a set consisting of exactly one square are connected by definition.",
    "input": "The first input line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 50) \u2014 the sizes of the sheet of paper. Each of the next n lines contains m characters \u2014 the description of the sheet of paper: the j- th character of the i- th line equals either \" # \" , if the corresponding square is painted ( belongs to set A) , or equals \" . \" if the corresponding square is not painted ( does not belong to set A) . It is guaranteed that the set of all painted squares A is connected and isn' t empty.",
    "output": "On the first line print the minimum number of squares that need to be deleted to make set A not connected. If it is impossible, print - 1.",
    "note": "In the first sample you can delete any two squares that do not share a side. After that the set of painted squares is not connected anymore. The note to the second sample is shown on the figure below. To the left there is a picture of the initial set of squares. To the right there is a set with deleted squares. The deleted squares are marked with crosses.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "trees"
    ],
    "id": "193A"
  },
  {
    "title": "Metro Scheme",
    "url": "https://codeforces.com/problemset/problem/191/D",
    "history": "Berland is very concerned with privacy, so almost all plans and blueprints are secret. However, a spy of the neighboring state managed to steal the Bertown subway scheme. The Bertown Subway has n stations, numbered from 1 to n, and m bidirectional tunnels connecting them. All Bertown Subway consists of lines. To be more precise, there are two types of lines: circular and radial. A radial line is a sequence of stations v1, . . . , vk ( k > 1) , where stations vi and vi + 1 ( i < k) are connected by a tunnel and no station occurs in the line more than once ( vi = \u0338 vj for i = \u0338 j) . A loop line is a series of stations, v1, . . . , vk ( k > 2) , where stations vi \u0438 vi + 1 are connected by a tunnel. In addition, stations v1 and vk are also connected by a tunnel. No station is occurs in the loop line more than once. Note that a single station can be passed by any number of lines. According to Berland standards, there can' t be more than one tunnel between two stations and each tunnel belongs to exactly one line. Naturally, each line has at least one tunnel. Between any two stations there is the way along the subway tunnels. In addition, in terms of graph theory, a subway is a vertex cactus: if we consider the subway as a graph in which the stations are the vertexes and the edges are tunnels, then each vertex lies on no more than one simple cycle. Unfortunately, scheme, stolen by the spy, had only the stations and the tunnels. It was impossible to determine to which line every tunnel corresponds. But to sabotage successfully, the spy needs to know what minimum and maximum number of lines may be in the Bertown subway. Help him!",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 3\u00b7105) \u2014 the number of stations and the number of tunnels, correspondingly. Each of the next m lines contain two integers \u2014 the numbers of stations connected by the corresponding tunnel. The stations are numbered with integers from 1 to n. It is guaranteed that the graph that corresponds to the subway has no multiple edges or loops, it is connected and it is a vertex cactus.",
    "output": "Print two numbers \u2014 the minimum and maximum number of lines correspondingly.",
    "note": "The subway scheme with minimum possible number of lines for the second sample is:",
    "topics": [
      "graphs",
      "greedy"
    ],
    "id": "191D"
  },
  {
    "title": "Counter Attack",
    "url": "https://codeforces.com/problemset/problem/190/E",
    "history": "Berland has managed to repel the flatlanders' attack and is now starting the counter attack. Flatland has n cities, numbered from 1 to n, and some pairs of them are connected by bidirectional roads. The Flatlandian maps show roads between cities if and only if there is in fact no road between this pair of cities ( we do not know whether is it a clever spy- proof strategy or just saving ink) . In other words, if two cities are connected by a road on a flatland map, then there is in fact no road between them. The opposite situation is also true: if two cities are not connected by a road on a flatland map, then in fact, there is a road between them. The berlanders got hold of a flatland map. Now Vasya the Corporal is commissioned by General Touristov to find all such groups of flatland cities, that in each group of cities you can get from any city to any other one, moving along the actual roads. Also the cities from different groups are unreachable from each other, moving along the actual roads. Indeed, destroying such groups one by one is much easier than surrounding all Flatland at once! Help the corporal complete this task and finally become a sergeant! Don' t forget that a flatland map shows a road between cities if and only if there is in fact no road between them.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n \u2264 5\u00b7105, 0 \u2264 m \u2264 106) \u2014 the number of cities and the number of roads marked on the flatland map, correspondingly. Next m lines contain descriptions of the cities on the map. The i- th line contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the numbers of cities that are connected by the i- th road on the flatland map. It is guaranteed that each pair of cities occurs in the input no more than once.",
    "output": "On the first line print number k \u2014 the number of groups of cities in Flatland, such that in each group you can get from any city to any other one by flatland roads. At the same time, the cities from different groups should be unreachable by flatland roads. On each of the following k lines first print ti ( 1 \u2264 ti \u2264 n) \u2014 the number of vertexes in the i- th group. Then print space- separated numbers of cities in the i- th group. The order of printing groups and the order of printing numbers in the groups does not matter. The total sum ti for all k groups must equal n.",
    "note": "In the first sample there are roads only between pairs of cities 1- 4 and 2- 3. In the second sample there is no road between cities 1 and 2, but still you can get from one city to the other one through city number 3.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "hashing",
      "sortings"
    ],
    "id": "190E"
  },
  {
    "title": "Battlefield",
    "url": "https://codeforces.com/problemset/problem/182/A",
    "history": "Vasya lagged behind at the University and got to the battlefield. Just joking! He' s simply playing some computer game. The field is a flat platform with n trenches dug on it. The trenches are segments on a plane parallel to the coordinate axes. No two trenches intersect. There is a huge enemy laser far away from Vasya. The laser charges for a seconds, and then shoots continuously for b seconds. Then, it charges for a seconds again. Then it shoots continuously for b seconds again and so on. Vasya knows numbers a and b. He also knows that while the laser is shooting, Vasya must be in the trench, but while the laser is charging, Vasya can safely move around the field. The main thing is to have time to hide in the trench before the shot. If Vasya reaches the trench exactly at the moment when the laser starts shooting, we believe that Vasya managed to hide. Coincidentally, the length of any trench in meters numerically does not exceed b. Initially, Vasya is at point A. He needs to get to point B. Vasya moves at speed 1 meter per second in either direction. You can get in or out of the trench at any its point. Getting in or out of the trench takes no time. It is also possible to move in the trench, without leaving it. What is the minimum time Vasya needs to get from point A to point B, if at the initial time the laser has just started charging? If Vasya cannot get from point A to point B, print - 1. If Vasya reaches point B at the moment when the laser begins to shoot, it is believed that Vasya managed to reach point B.",
    "input": "The first line contains two space- separated integers: a and b ( 1 \u2264 a, b \u2264 1000) , \u2014 the duration of charging and the duration of shooting, in seconds. The second line contains four space- separated integers: Ax, Ay, Bx, By ( - 104 \u2264 Ax, Ay, Bx, By \u2264 104) \u2014 the coordinates of points \u0410 and B. It is guaranteed that points A and B do not belong to any trench. The third line contains a single integer: n ( 1 \u2264 n \u2264 1000) , \u2014 the number of trenches. Each of the following n lines contains four space- separated integers: x1, y1, x2, y2 ( - 104 \u2264 xi, yi \u2264 104) \u2014 the coordinates of ends of the corresponding trench. All coordinates are given in meters. It is guaranteed that for any trench either x1 = x2, or y1 = y2. No two trenches intersect. The length of any trench in meters doesn' t exceed b numerically.",
    "output": "If Vasya can get from point A to point B, print the minimum time he will need for it. Otherwise, print number - 1. The answer will be considered correct if the absolute or relative error does not exceed 10 - 4",
    "note": "",
    "topics": [
      "geometry",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "182A"
  },
  {
    "title": "Party",
    "url": "https://codeforces.com/problemset/problem/177/C2",
    "history": "To celebrate the second ABBYY Cup tournament, the Smart Beaver decided to throw a party. The Beaver has a lot of acquaintances, some of them are friends with each other, and some of them dislike each other. To make party successful, the Smart Beaver wants to invite only those of his friends who are connected by friendship relations, and not to invite those who dislike each other. Both friendship and dislike are mutual feelings. More formally, for each invited person the following conditions should be fulfilled: all his friends should also be invited to the party; the party shouldn' t have any people he dislikes; all people who are invited to the party should be connected with him by friendship either directly or through a chain of common friends of arbitrary length. We' ll say that people a1 and ap are connected through a chain of common friends if there exists a sequence of people a2, a3, . . . , ap - 1 such that all pairs of people ai and ai + 1 ( 1 \u2264 i < p) are friends. Help the Beaver find the maximum number of acquaintances he can invite.",
    "input": "The first line of input contains an integer n \u2014 the number of the Beaver' s acquaintances. The second line contains an integer k \u2014 the number of pairs of friends. Next k lines contain space- separated pairs of integers ui, vi \u2014 indices of people who form the i- th pair of friends. The next line contains an integer m \u2014 the number of pairs of people who dislike each other. Next m lines describe pairs of people who dislike each other in the same format as the pairs of friends were described. Each pair of people is mentioned in the input at most once . In particular, two persons cannot be friends and dislike each other at the same time. The input limitations for getting 30 points are: 2 \u2264 n \u2264 14 The input limitations for getting 100 points are: 2 \u2264 n \u2264 2000",
    "output": "Output a single number \u2014 the maximum number of people that can be invited to the party. If a group of people that meets all the requirements is impossible to select, output 0.",
    "note": "Let' s have a look at the example. Two groups of people can be invited: 1, 2, 3 and 4, 5, thus the answer will be the size of the largest of these groups. Group 6, 7, 8, 9 doesn' t fit, since it includes people 7 and 9 who dislike each other. Group 1, 2, 3, 4, 5 also doesn' t fit, because not all of its members are connected by a chain of common friends ( for example, people 2 and 5 aren' t connected) .",
    "topics": [
      "brute force",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "177C2"
  },
  {
    "title": "Party",
    "url": "https://codeforces.com/problemset/problem/177/C1",
    "history": "To celebrate the second ABBYY Cup tournament, the Smart Beaver decided to throw a party. The Beaver has a lot of acquaintances, some of them are friends with each other, and some of them dislike each other. To make party successful, the Smart Beaver wants to invite only those of his friends who are connected by friendship relations, and not to invite those who dislike each other. Both friendship and dislike are mutual feelings. More formally, for each invited person the following conditions should be fulfilled: all his friends should also be invited to the party; the party shouldn' t have any people he dislikes; all people who are invited to the party should be connected with him by friendship either directly or through a chain of common friends of arbitrary length. We' ll say that people a1 and ap are connected through a chain of common friends if there exists a sequence of people a2, a3, . . . , ap - 1 such that all pairs of people ai and ai + 1 ( 1 \u2264 i < p) are friends. Help the Beaver find the maximum number of acquaintances he can invite.",
    "input": "The first line of input contains an integer n \u2014 the number of the Beaver' s acquaintances. The second line contains an integer k \u2014 the number of pairs of friends. Next k lines contain space- separated pairs of integers ui, vi \u2014 indices of people who form the i- th pair of friends. The next line contains an integer m \u2014 the number of pairs of people who dislike each other. Next m lines describe pairs of people who dislike each other in the same format as the pairs of friends were described. Each pair of people is mentioned in the input at most once . In particular, two persons cannot be friends and dislike each other at the same time. The input limitations for getting 30 points are: 2 \u2264 n \u2264 14 The input limitations for getting 100 points are: 2 \u2264 n \u2264 2000",
    "output": "Output a single number \u2014 the maximum number of people that can be invited to the party. If a group of people that meets all the requirements is impossible to select, output 0.",
    "note": "Let' s have a look at the example. Two groups of people can be invited: 1, 2, 3 and 4, 5, thus the answer will be the size of the largest of these groups. Group 6, 7, 8, 9 doesn' t fit, since it includes people 7 and 9 who dislike each other. Group 1, 2, 3, 4, 5 also doesn' t fit, because not all of its members are connected by a chain of common friends ( for example, people 2 and 5 aren' t connected) .",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "177C1"
  },
  {
    "title": "Gnomes of Might and Magic",
    "url": "https://codeforces.com/problemset/problem/175/F",
    "history": "Vasya plays a popular game the Gnomes of Might and Magic. In this game Vasya manages the kingdom of gnomes, consisting of several castles, connected by bidirectional roads. The kingdom road network has a special form. The kingdom has m main castles a1, a2, . . . , am, which form the Good Path. This path consists of roads between the castles ai, ai + 1 ( 1 \u2264 i < m) as well as the road between am and a1. There are no other roads between the castles of the Good Path. In addition, for each pair of neighboring Good Path castles u and v there is exactly one Evil Shortcut \u2014 a path that goes along the roads leading from the first castle ( u) to the second one ( v) and not having any common vertexes with the Good Path except for the vertexes u and v. It is known that there are no other roads and castles in the kingdom there, that is, every road and every castle lies either on the Good Path or the Evil Shortcut ( castles can lie in both of them) . In addition, no two Evil Shortcuts have any common castles, different than the castles of the Good Path. At the beginning of each week in the kingdom appears one very bad gnome who stands on one of the roads of the kingdom, and begins to rob the corovans going through this road. One road may accumulate multiple very bad gnomes. Vasya cares about his corovans, so sometimes he sends the Mission of Death from one castle to another. Let' s suggest that the Mission of Death should get from castle s to castle t. Then it will move from castle s to castle t, destroying all very bad gnomes, which are on the roads of the Mission' s path. Vasya is so tough that his Mission of Death can destroy any number of gnomes on its way. However, Vasya is very kind, so he always chooses such path between castles s and t, following which he will destroy the smallest number of gnomes. If there are multiple such paths, then Vasya chooses the path that contains the smallest number of roads among them. If there are multiple such paths still, Vasya chooses the lexicographically minimal one among them. Help Vasya to simulate the life of the kingdom in the Gnomes of Might and Magic game. A path is a sequence of castles, such that each pair of the neighboring castles on the path is connected by a road. Also, path x1, x2, . . . , xp is lexicographically less than path y1, y2, . . . , yq, if either p < q and x1 = y1, x2 = y2, . . . , xp = yp, or exists such number r ( r < p, r < q) , that x1 = y1, x2 = y2, . . . , xr = yr and xr + 1 < yr + 1.",
    "input": "The first line contains two integers n and m ( 3 \u2264 m \u2264 n \u2264 100000) \u2014 the number of castles in the kingdom, and the number of castles on the Good Path, respectively. The second line contains m integers, which are numbers of Good Path castles ( the castles are numbered from 1 to n) in the order of occurrence on the Path, starting with some castle. All Good Path castles are different. Each of the following m lines describes an Evil Shortcut. First a line contains an integer ki ( 3 \u2264 ki \u2264 100000) \u2014 the number of castles on the corresponding Evil Shortcut ( with the two castles which are on the Good Path) , followed by a ki integers \u2014 number of castles in the order of occurrence in the given Shortcut. All castles in one Evil Shortcut are different. It is guaranteed that the first and the last castles from the Shortcut are on the Good Path and the first castles in the Evil Shortcuts form the Good Path and are presented in the same order in which the Path was represented on the second line. The next line contains an integer q ( 1 \u2264 q \u2264 100000) \u2014 the number of events in the life of the kingdom. Each of the following q lines describes a single event. An event is described by the symbol cj and two numbers or castles sj and tj ( the character and numbers of castles are separated by a single space) . If the character of cj is equal to \" + \" ( a plus) , it means that a very bad gnome ( probably not the first one) has appeared on the road between castles sj and tj. If cj equals \" ? \" ( a question) , then Vasya sent a Mission of Death from castle sj to castle tj. It is guaranteed that for each request \" + \" , the road between castles sj and tj exists. The events are given in chronological order, starting with the earliest one. Initially there are no very bad gnomes on the roads. All numbers in all lines are separated by single spaces. It is guaranteed that all the given Evil Shortcuts and Good Path fit in the limitations given in the problem statement.",
    "output": "For each query \" ? \" print a single number on a single line \u2014 the number of very bad gnomes destroyed by the corresponding Mission of Death. Print the answers to queries in the chronological order.",
    "note": "In the example after the first four requests there is only one path from castle 1 to castle 2, which does not contain roads with very bad gnomes: 1 6 3 5 2. After a gnome stood on the road ( 2, 5) , the next Mission of Death moves along path 1 2, and destroys the gnome, who was on the road ( 1, 2) . The next Mission of Death follows the same path which is already free of gnomes. After yet another gnome stood on the road ( 1, 2) , the next Mission of Death goes on the path 1 2, and kills the gnome.",
    "topics": [
      "data structures",
      "graphs",
      "implementation",
      "shortest paths"
    ],
    "id": "175F"
  },
  {
    "title": "Deputies",
    "url": "https://codeforces.com/problemset/problem/173/D",
    "history": "The Trinitarian kingdom has exactly n = 3k cities. All of them are located on the shores of river Trissisipi, which flows through the whole kingdom. Some of the cities are located on one side of the river, and all the rest are on the other side. Some cities are connected by bridges built between them. Each bridge connects two cities that are located on the opposite sides of the river. Between any two cities exists no more than one bridge. The recently inaugurated King Tristan the Third is busy distributing his deputies among cities. In total there are k deputies and the king wants to commission each of them to control exactly three cities. However, no deputy can be entrusted to manage the cities, which are connected by a bridge \u2014 the deputy can set a too high fee for travelling over the bridge to benefit his pocket, which is bad for the reputation of the king. Help King Tristan the Third distribute the deputies between the cities, if it is possible.",
    "input": "The first line contains two integers n and m \u2014 the number of cities and bridges ( 3 \u2264 n < 105, n = 3k, 0 \u2264 m \u2264 105) . Next m lines describe the bridges. The i- th line contains two integers ai and bi \u2014 the numbers of cities that are connected by the i- th bridge ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 i \u2264 m) . It is guaranteed that no bridge connects a city with itself and that any two cities are connected with no more than one bridge.",
    "output": "If distributing the deputies in the required manner is impossible, print in a single line \" NO\" ( without the quotes) . Otherwise, in the first line print \" YES\" ( without the quotes) , and in the second line print which deputy should be put in charge of each city. The i- th number should represent the number of the deputy ( from 1 to k) , who should be in charge of city numbered i- th in the input \u2014 overall there should be n numbers. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "173D"
  },
  {
    "title": "Wizards and Bets",
    "url": "https://codeforces.com/problemset/problem/167/E",
    "history": "In some country live wizards. They like to make weird bets. Two wizards draw an acyclic directed graph with n vertices and m edges ( the graph' s vertices are numbered from 1 to n) . A source is a vertex with no incoming edges, and a sink is the vertex with no outgoing edges. Note that a vertex could be the sink and the source simultaneously. In the wizards' graph the number of the sinks and the sources is the same. Wizards numbered the sources in the order of increasing numbers of the vertices from 1 to k. The sinks are numbered from 1 to k in the similar way. To make a bet, they, as are real wizards, cast a spell, which selects a set of k paths from all sources to the sinks in such a way that no two paths intersect at the vertices. In this case, each sink has exactly one path going to it from exactly one source. Let' s suppose that the i- th sink has a path going to it from the ai' s source. Then let' s call pair ( i, j) an inversion if i < j and ai > aj. If the number of inversions among all possible pairs ( i, j) , such that ( 1 \u2264 i < j \u2264 k) , is even, then the first wizard wins ( the second one gives him one magic coin) . Otherwise, the second wizard wins ( he gets one magic coin from the first one) . Our wizards are captured with feverish excitement, so they kept choosing new paths again and again for so long that eventually they have chosen every possible set of paths for exactly once. The two sets of non- intersecting pathes are considered to be different, if and only if there is an edge, which lies at some path in one set and doesn' t lie at any path of another set. To check their notes, they asked you to count the total winnings of the first player for all possible sets of paths modulo a prime number p.",
    "input": "The first line contains three space- separated integers n, m, p ( 1 \u2264 n \u2264 600, 0 \u2264 m \u2264 105, 2 \u2264 p \u2264 109 + 7) . It is guaranteed that p is prime number. Next m lines contain edges of the graph. Each line contains a pair of space- separated integers, ai bi \u2014 an edge from vertex ai to vertex bi. It is guaranteed that the graph is acyclic and that the graph contains the same number of sources and sinks. Please note that the graph can have multiple edges.",
    "output": "Print the answer to the problem \u2014 the total winnings of the first player modulo a prime number p. Please note that the winnings may be negative, but the modulo residue must be non- negative ( see the sample) .",
    "note": "In the first sample, there is exactly one set of paths \u2014 . The number of inversions is 0, which is an even number. Therefore, the first wizard gets 1 coin. In the second sample there is exactly one set of paths \u2014 . There is exactly one inversion. Therefore, the first wizard gets - 1 coin. . In the third sample, there are two sets of paths, which are counted with opposite signs. In the fourth sample there are no set of paths at all. In the fifth sample, there are three sources \u2014 the vertices with the numbers ( 2, 3, 5) and three sinks \u2014 the vertices with numbers ( 1, 2, 4) . For a single set of paths are 2 inversions, that is, their number is even.",
    "topics": [
      "dfs and similar",
      "graphs",
      "math",
      "matrices"
    ],
    "id": "167E"
  },
  {
    "title": "Wizards and Roads",
    "url": "https://codeforces.com/problemset/problem/167/D",
    "history": "In some country live wizards. They love to build cities and roads. The country used to have k cities, the j- th city ( 1 \u2264 j \u2264 k) was located at a point ( xj, yj) . It was decided to create another n - k cities. And the i- th one ( k < i \u2264 n) was created at a point with coordinates ( xi, yi) : xi = ( a\u00b7xi - 1 + b) mod ( 109 + 9) yi = ( c\u00b7yi - 1 + d) mod ( 109 + 9) Here a, b, c, d are primes. Also, a = \u0338 c, b = \u0338 d. After the construction of all n cities, the wizards have noticed something surprising. It turned out that for every two different cities i and j, xi = \u0338 xj and yi = \u0338 yj holds. The cities are built, it' s time to build roads! It was decided to use the most difficult ( and, of course, the most powerful) spell for the construction of roads. Using this spell creates a road between the towns of u, v ( yu > yv) if and only if for any city w which lies strictly inside the corner at the point u, v ( see below) , there is a city s that does not lie in the corner, which is located along the x- coordinate strictly between w and u and simultaneously ys > yv. A corner on the points p2( x2, y2) , p1( x1, y1) ( y1 < y2) is the set of points ( x, y) , for which at least one of the two conditions is fulfilled: min( x1, x2) \u2264 x \u2264 max( x1, x2) and y \u2265 y1 y1 \u2264 y \u2264 y2 and ( x - x2) \u00b7( x1 - x2) \u2265 0 The pictures showing two different corners In order to test the spell, the wizards will apply it to all the cities that lie on the x- coordinate in the interval [ L, R] . After the construction of roads the national government wants to choose the maximum number of pairs of cities connected by the road, so that no city occurs in two or more pairs. Your task is for each m offered variants of values L, R to calculate the maximum number of such pairs after the construction of the roads. Please note that the cities that do not lie in the interval [ L, R] on the x- coordinate, do not affect the construction of roads in any way.",
    "input": "The first line contains two space- separated integers n, k ( 1 \u2264 k \u2264 n \u2264 105, k \u2264 30) . Next k lines contain coordinates of the cities' location points from the first to the k- th one. The j- th line contains space- separated pair of integers xj, yj ( 0 \u2264 xj, yj < 109 + 9) \u2014 coordinates of the j- th city. The next line contains space- separated integers a, b, c, d ( 2 \u2264 a, b, c, d < 109 + 9) . It is guaranteed that those numbers are prime and also that a = \u0338 c, b = \u0338 d. It' s guaranteed, that for every two different cities i and j, xi = \u0338 xj and yi = \u0338 yj holds. The next line contains integer m ( 1 \u2264 m \u2264 105) \u2014 the number of variants to build the roads. Next m lines contain pairs of space- separated integers Li, Ri ( 0 \u2264 Li \u2264 Ri < 109 + 9) \u2014 the variants of choosing the cities to build the roads.",
    "output": "For any pair of numbers Li, Ri print the answer to the problem on a single line. Print the answers for the pairs in the order, in which the pairs are given in the input data.",
    "note": "In the first sample the roads connect the cities in a chain in the order of increasing of x. In the second sample the remaining 5 cities will be located at points ( 5, 11) ; ( 20, 263098) ; ( 65, 292514823) ; ( 200, 76958738) ; ( 605, 622120197) .",
    "topics": [
      "data structures",
      "divide and conquer",
      "graph matchings",
      "graphs",
      "greedy"
    ],
    "id": "167D"
  },
  {
    "title": "Machine Programming",
    "url": "https://codeforces.com/problemset/problem/164/C",
    "history": "One remarkable day company \" X\" received k machines. And they were not simple machines, they were mechanical programmers! This was the last unsuccessful step before switching to android programmers, but that' s another story. The company has now n tasks, for each of them we know the start time of its execution si, the duration of its execution ti, and the company profit from its completion ci. Any machine can perform any task, exactly one at a time. If a machine has started to perform the task, it is busy at all moments of time from si to si + ti - 1, inclusive, and it cannot switch to another task. You are required to select a set of tasks which can be done with these k machines, and which will bring the maximum total profit.",
    "input": "The first line contains two integer numbers n and k ( 1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 50) \u2014 the numbers of tasks and machines, correspondingly. The next n lines contain space- separated groups of three integers si, ti, ci ( 1 \u2264 si, ti \u2264 109, 1 \u2264 ci \u2264 106) , si is the time where they start executing the i- th task, ti is the duration of the i- th task and ci is the profit of its execution.",
    "output": "Print n integers x1, x2, . . . , xn. Number xi should equal 1, if task i should be completed and otherwise it should equal 0. If there are several optimal solutions, print any of them.",
    "note": "In the first sample the tasks need to be executed at moments of time 2 . . . 8, 1 . . . 3 and 4 . . . 4, correspondingly. The first task overlaps with the second and the third ones, so we can execute either task one ( profit 5) or tasks two and three ( profit 6) .",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "164C"
  },
  {
    "title": "Variable, or There and Back Again",
    "url": "https://codeforces.com/problemset/problem/164/A",
    "history": "Life is not easy for the perfectly common variable named Vasya. Wherever it goes, it is either assigned a value, or simply ignored, or is being used! Vasya' s life goes in states of a program. In each state, Vasya can either be used ( for example, to calculate the value of another variable) , or be assigned a value, or ignored. Between some states are directed ( oriented) transitions. A path is a sequence of states v1, v2, . . . , vx, where for any 1 \u2264 i < x exists a transition from vi to vi + 1. Vasya' s value in state v is interesting to the world, if exists path p1, p2, . . . , pk such, that pi = v for some i ( 1 \u2264 i \u2264 k) , in state p1 Vasya gets assigned a value, in state pk Vasya is used and there is no state pi ( except for p1) where Vasya gets assigned a value. Help Vasya, find the states in which Vasya' s value is interesting to the world.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 105) \u2014 the numbers of states and transitions, correspondingly. The second line contains space- separated n integers f1, f2, . . . , fn ( 0 \u2264 fi \u2264 2) , fi described actions performed upon Vasya in state i: 0 represents ignoring, 1 \u2014 assigning a value, 2 \u2014 using. Next m lines contain space- separated pairs of integers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) , each pair represents the transition from the state number ai to the state number bi. Between two states can be any number of transitions.",
    "output": "Print n integers r1, r2, . . . , rn, separated by spaces or new lines. Number ri should equal 1, if Vasya' s value in state i is interesting to the world and otherwise, it should equal 0. The states are numbered from 1 to n in the order, in which they are described in the input.",
    "note": "In the first sample the program states can be used to make the only path in which the value of Vasya interests the world, 1 2 3 4; it includes all the states, so in all of them Vasya' s value is interesting to the world. The second sample the only path in which Vasya' s value is interesting to the world is , \u2014 1 3; state 2 is not included there. In the third sample we cannot make from the states any path in which the value of Vasya would be interesting to the world, so the value of Vasya is never interesting to the world.",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "164A"
  },
  {
    "title": "Edges in MST",
    "url": "https://codeforces.com/problemset/problem/160/D",
    "history": "You are given a connected weighted undirected graph without any loops and multiple edges. Let us remind you that a graph' s spanning tree is defined as an acyclic connected subgraph of the given graph that includes all of the graph' s vertexes. The weight of a tree is defined as the sum of weights of the edges that the given tree contains. The minimum spanning tree ( MST) of a graph is defined as the graph' s spanning tree having the minimum possible weight. For any connected graph obviously exists the minimum spanning tree, but in the general case, a graph' s minimum spanning tree is not unique. Your task is to determine the following for each edge of the given graph: whether it is either included in any MST, or included at least in one MST, or not included in any MST.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105, ) \u2014 the number of the graph' s vertexes and edges, correspondingly. Then follow m lines, each of them contains three integers \u2014 the description of the graph' s edges as \" ai bi wi\" ( 1 \u2264 ai, bi \u2264 n, 1 \u2264 wi \u2264 106, ai = \u0338 bi) , where ai and bi are the numbers of vertexes connected by the i- th edge, wi is the edge' s weight. It is guaranteed that the graph is connected and doesn' t contain loops or multiple edges.",
    "output": "Print m lines \u2014 the answers for all edges. If the i- th edge is included in any MST, print \" any\" ; if the i- th edge is included at least in one MST, print \" at least one\" ; if the i- th edge isn' t included in any MST, print \" none\" . Print the answers for the edges in the order in which the edges are specified in the input.",
    "note": "In the second sample the MST is unique for the given graph: it contains two first edges. In the third sample any two edges form the MST for the given graph. That means that each edge is included at least in one MST.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "sortings"
    ],
    "id": "160D"
  },
  {
    "title": "Clues",
    "url": "https://codeforces.com/problemset/problem/156/D",
    "history": "As Sherlock Holmes was investigating another crime, he found a certain number of clues. Also, he has already found direct links between some of those clues. The direct links between the clues are mutual. That is, the direct link between clues A and B and the direct link between clues B and A is the same thing. No more than one direct link can exist between two clues. Of course Sherlock is able to find direct links between all clues. But it will take too much time and the criminals can use this extra time to hide. To solve the crime, Sherlock needs each clue to be linked to all other clues ( maybe not directly, via some other clues) . Clues A and B are considered linked either if there is a direct link between them or if there is a direct link between A and some other clue C which is linked to B. Sherlock Holmes counted the minimum number of additional direct links that he needs to find to solve the crime. As it turns out, it equals T. Please count the number of different ways to find exactly T direct links between the clues so that the crime is solved in the end. Two ways to find direct links are considered different if there exist two clues which have a direct link in one way and do not have a direct link in the other way. As the number of different ways can turn out rather big, print it modulo k.",
    "input": "The first line contains three space- separated integers n, m, k ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105, 1 \u2264 k \u2264 109) \u2014 the number of clues, the number of direct clue links that Holmes has already found and the divisor for the modulo operation. Each of next m lines contains two integers a and b ( 1 \u2264 a, b \u2264 n, a = \u0338 b) , that represent a direct link between clues. It is guaranteed that any two clues are linked by no more than one direct link. Note that the direct links between the clues are mutual.",
    "output": "Print the single number \u2014 the answer to the problem modulo k.",
    "note": "The first sample only has two clues and Sherlock hasn' t found any direct link between them yet. The only way to solve the crime is to find the link. The second sample has three clues and Sherlock hasn' t found any direct links between them. He has to find two of three possible direct links between clues to solve the crime \u2014 there are 3 ways to do it. The third sample has four clues and the detective has already found one direct link between the first and the fourth clue. There are 8 ways to find two remaining clues to solve the crime.",
    "topics": [
      "combinatorics",
      "graphs"
    ],
    "id": "156D"
  },
  {
    "title": "Double Profiles",
    "url": "https://codeforces.com/problemset/problem/154/C",
    "history": "You have been offered a job in a company developing a large social network. Your first task is connected with searching profiles that most probably belong to the same user. The social network contains n registered profiles, numbered from 1 to n. Some pairs there are friends ( the \" friendship\" relationship is mutual, that is, if i is friends with j, then j is also friends with i) . Let' s say that profiles i and j ( i = \u0338 j) are doubles, if for any profile k ( k = \u0338 i, k = \u0338 j) one of the two statements is true: either k is friends with i and j, or k isn' t friends with either of them. Also, i and j can be friends or not be friends. Your task is to count the number of different unordered pairs ( i, j) , such that the profiles i and j are doubles. Note that the pairs are unordered, that is, pairs ( a, b) and ( b, a) are considered identical.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n \u2264 106, 0 \u2264 m \u2264 106) , \u2014 the number of profiles and the number of pairs of friends, correspondingly. Next m lines contains descriptions of pairs of friends in the format \" v u\" , where v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) are numbers of profiles that are friends with each other. It is guaranteed that each unordered pair of friends occurs no more than once and no profile is friends with itself.",
    "output": "Print the single integer \u2014 the number of unordered pairs of profiles that are doubles. Please do not use the",
    "note": "In the first and second sample any two profiles are doubles. In the third sample the doubles are pairs of profiles ( 1, 3) and ( 2, 4) .",
    "topics": [
      "graphs",
      "hashing",
      "sortings"
    ],
    "id": "154C"
  },
  {
    "title": "Garden",
    "url": "https://codeforces.com/problemset/problem/152/E",
    "history": "Vasya has a very beautiful country garden that can be represented as an n \u00d7 m rectangular field divided into n\u00b7m squares. One beautiful day Vasya remembered that he needs to pave roads between k important squares that contain buildings. To pave a road, he can cover some squares of his garden with concrete. For each garden square we know number aij that represents the number of flowers that grow in the square with coordinates ( i, j) . When a square is covered with concrete, all flowers that grow in the square die. Vasya wants to cover some squares with concrete so that the following conditions were fulfilled: all k important squares should necessarily be covered with concrete from each important square there should be a way to any other important square. The way should go be paved with concrete- covered squares considering that neighboring squares are squares that have a common side the total number of dead plants should be minimum As Vasya has a rather large garden, he asks you to help him.",
    "input": "The first input line contains three integers n, m and k ( 1 \u2264 n, m \u2264 100, n\u00b7m \u2264 200, 1 \u2264 k \u2264 min( n\u00b7m, 7) ) \u2014 the garden' s sizes and the number of the important squares. Each of the next n lines contains m numbers aij ( 1 \u2264 aij \u2264 1000) \u2014 the numbers of flowers in the squares. Next k lines contain coordinates of important squares written as \" x y\" ( without quotes) ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) . The numbers written on one line are separated by spaces. It is guaranteed that all k important squares have different coordinates.",
    "output": "In the first line print the single integer \u2014 the minimum number of plants that die during the road construction. Then print n lines each containing m characters \u2014 the garden' s plan. In this plan use character \" X\" ( uppercase Latin letter X) to represent a concrete- covered square and use character \" . \" ( dot) for a square that isn' t covered with concrete. If there are multiple solutions, print any of them.",
    "note": "",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "152E"
  },
  {
    "title": "Quantity of Strings",
    "url": "https://codeforces.com/problemset/problem/150/B",
    "history": "Just in case somebody missed it: this winter is totally cold in Nvodsk! It is so cold that one gets funny thoughts. For example, let' s say there are strings with the length exactly n, based on the alphabet of size m. Any its substring with length equal to k is a palindrome. How many such strings exist? Your task is to find their quantity modulo 1000000007 ( 109 + 7) . Be careful and don' t miss a string or two! Let us remind you that a string is a palindrome if it can be read the same way in either direction, from the left to the right and from the right to the left.",
    "input": "The first and only line contains three integers: n, m and k ( 1 \u2264 n, m, k \u2264 2000) .",
    "output": "Print a single integer \u2014 the number of strings of the described type modulo 1000000007 ( 109 + 7) .",
    "note": "In the first sample only one string is valid: \" a\" ( let' s denote the only letter of our alphabet as \" a\" ) . In the second sample ( if we denote the alphabet letters as \" a\" and \" b\" ) the following strings are valid: \" aaaaa\" and \" bbbbb\" .",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "graphs",
      "math"
    ],
    "id": "150B"
  },
  {
    "title": "Smile House",
    "url": "https://codeforces.com/problemset/problem/147/B",
    "history": "A smile house is created to raise the mood. It has n rooms. Some of the rooms are connected by doors. For each two rooms ( number i and j) , which are connected by a door, Petya knows their value cij \u2014 the value which is being added to his mood when he moves from room i to room j. Petya wondered whether he can raise his mood infinitely, moving along some cycle? And if he can, then what minimum number of rooms he will need to visit during one period of a cycle?",
    "input": "The first line contains two positive integers n and m ( ) , where n is the number of rooms, and m is the number of doors in the Smile House. Then follows the description of the doors: m lines each containing four integers i, j, cij \u0438 cji ( 1 \u2264 i, j \u2264 n, i = \u0338 j, - 104 \u2264 cij, cji \u2264 104) . It is guaranteed that no more than one door connects any two rooms. No door connects the room with itself.",
    "output": "Print the minimum number of rooms that one needs to visit during one traverse of the cycle that can raise mood infinitely. If such cycle does not exist, print number 0.",
    "note": "Cycle is such a sequence of rooms a1, a2, . . . , ak, that a1 is connected with a2, a2 is connected with a3, . . . , ak - 1 is connected with ak, ak is connected with a1. Some elements of the sequence can coincide, that is, the cycle should not necessarily be simple. The number of rooms in the cycle is considered as k, the sequence' s length. Note that the minimum possible length equals two.",
    "topics": [
      "binary search",
      "graphs",
      "matrices"
    ],
    "id": "147B"
  },
  {
    "title": "Missile Silos",
    "url": "https://codeforces.com/problemset/problem/144/D",
    "history": "A country called Berland consists of n cities, numbered with integer numbers from 1 to n. Some of them are connected by bidirectional roads. Each road has some length. There is a path from each city to any other one by these roads. According to some Super Duper Documents, Berland is protected by the Super Duper Missiles. The exact position of the Super Duper Secret Missile Silos is kept secret but Bob managed to get hold of the information. That information says that all silos are located exactly at a distance l from the capital. The capital is located in the city with number s. The documents give the formal definition: the Super Duper Secret Missile Silo is located at some place ( which is either city or a point on a road) if and only if the shortest distance from this place to the capital along the roads of the country equals exactly l. Bob wants to know how many missile silos are located in Berland to sell the information then to enemy spies. Help Bob.",
    "input": "The first line contains three integers n, m and s ( 2 \u2264 n \u2264 105, , 1 \u2264 s \u2264 n) \u2014 the number of cities, the number of roads in the country and the number of the capital, correspondingly. Capital is the city no. s. Then m lines contain the descriptions of roads. Each of them is described by three integers vi, ui, wi ( 1 \u2264 vi, ui \u2264 n, vi = \u0338 ui, 1 \u2264 wi \u2264 1000) , where vi, ui are numbers of the cities connected by this road and wi is its length. The last input line contains integer l ( 0 \u2264 l \u2264 109) \u2014 the distance from the capital to the missile silos. It is guaranteed that: between any two cities no more than one road exists; each road connects two different cities; from each city there is at least one way to any other city by the roads.",
    "output": "Print the single number \u2014 the number of Super Duper Secret Missile Silos that are located in Berland.",
    "note": "In the first sample the silos are located in cities 3 and 4 and on road ( 1, 3) at a distance 2 from city 1 ( correspondingly, at a distance 1 from city 3) . In the second sample one missile silo is located right in the middle of the road ( 1, 2) . Two more silos are on the road ( 4, 5) at a distance 3 from city 4 in the direction to city 5 and at a distance 3 from city 5 to city 4.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "shortest paths"
    ],
    "id": "144D"
  },
  {
    "title": "Clearing Up",
    "url": "https://codeforces.com/problemset/problem/141/E",
    "history": "After Santa Claus and his assistant Elf delivered all the presents and made all the wishes come true, they returned to the North Pole and found out that it is all covered with snow. Both of them were quite tired and they decided only to remove the snow from the roads connecting huts. The North Pole has n huts connected with m roads. One can go along the roads in both directions. The Elf offered to split: Santa Claus will clear up the wide roads and the Elf will tread out the narrow roads. For each road they decided who will clear it: Santa Claus or the Elf. To minimize the efforts they decided to clear the road so as to fulfill both those conditions: between any two huts should exist exactly one simple path along the cleared roads; Santa Claus and the Elf should clear the same number of roads. At this point Santa Claus and his assistant Elf wondered which roads should they clear up?",
    "input": "The first input line contains two positive integers n and m ( 1 \u2264 n \u2264 103, 1 \u2264 m \u2264 105) \u2014 the number of huts and the number of roads. Then follow m lines, each of them contains a road description: the numbers of huts it connects \u2014 x and y ( 1 \u2264 x, y \u2264 n) and the person responsible for clearing out this road ( \" S\" \u2014 for the Elf or \" M\" for Santa Claus) . It is possible to go on each road in both directions. Note that there can be more than one road between two huts and a road can begin and end in the same hut.",
    "output": "Print \" - 1\" without the quotes if it is impossible to choose the roads that will be cleared by the given rule. Otherwise print in the first line how many roads should be cleared and in the second line print the numbers of those roads ( the roads are numbered from 1 in the order of occurrence in the input) . It is allowed to print the numbers of the roads in any order. Each number should be printed exactly once. As you print the numbers, separate them with spaces.",
    "note": "A path is called simple if all huts on it are pairwise different.",
    "topics": [
      "constructive algorithms",
      "dp",
      "dsu",
      "graphs"
    ],
    "id": "141E"
  },
  {
    "title": "Take-off Ramps",
    "url": "https://codeforces.com/problemset/problem/141/D",
    "history": "Vasya participates in a ski race along the X axis. The start is at point 0, and the finish is at L, that is, at a distance L meters from the start in the positive direction of the axis. Vasya has been training so hard that he can run one meter in exactly one second. Besides, there are n take- off ramps on the track, each ramp is characterized by four numbers: xi represents the ramp' s coordinate di represents from how many meters Vasya will land if he goes down this ramp ti represents the flight time in seconds pi is the number, indicating for how many meters Vasya should gather speed to get ready and fly off the ramp. As Vasya gathers speed, he should ski on the snow ( that is, he should not be flying) , but his speed still equals one meter per second. Vasya is allowed to move in any direction on the X axis, but he is prohibited to cross the start line, that is go to the negative semiaxis. Vasya himself chooses which take- off ramps he will use and in what order, that is, he is not obliged to take off from all the ramps he encounters. Specifically, Vasya can skip the ramp. It is guaranteed that xi + di \u2264 L, that is, Vasya cannot cross the finish line in flight. Vasya can jump from the ramp only in the positive direction of X axis. More formally, when using the i- th ramp, Vasya starts gathering speed at point xi - pi, jumps at point xi, and lands at point xi + di. He cannot use the ramp in opposite direction. Your task is to find the minimum time that Vasya will spend to cover the distance.",
    "input": "The first line contains two integers n and L ( 0 \u2264 n \u2264 105, 1 \u2264 L \u2264 109) . Then n lines contain the descriptions of the ramps, each description is on a single line. Each description is a group of four non- negative integers xi, di, ti, pi ( 0 \u2264 xi \u2264 L, 1 \u2264 di, ti, pi \u2264 109, xi + di \u2264 L) .",
    "output": "Print in the first line the minimum time in seconds Vasya needs to complete the track. Print in the second line k \u2014 the number of take- off ramps that Vasya needs to use, and print on the third line of output k numbers the number the take- off ramps Vasya used in the order in which he used them. Print each number exactly once, separate the numbers with a space. The ramps are numbered starting from 1 in the order in which they are given in the input.",
    "note": "In the first sample, Vasya cannot use ramp 2, because then he will need to gather speed starting from point - 3, which is not permitted by the statement. The optimal option is using ramp 1, the resulting time is: moving to the point of gathering speed + gathering speed until reaching the takeoff ramp + flight time + moving to the finish line = 0 + 5 + 5 + 5 = 15. In the second sample using ramp 1 is not optimal for Vasya as t1 > d1. The optimal option is using ramp 2, the resulting time is: moving to the point of gathering speed + gathering speed until reaching the takeoff ramp + flight time + moving to the finish line = 14 + 1 + 1 + 0 = 16.",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "141D"
  },
  {
    "title": "Swaps",
    "url": "https://codeforces.com/problemset/problem/134/C",
    "history": "There are n players sitting at a round table. All of them have s cards of n colors in total. Besides, initially the first person had cards of only the first color, the second one had cards of only the second color and so on. They can swap the cards by the following rules: as the players swap, a player can give a card of his color only; a player can' t accept a card of a color he already has ( particularly, he can' t take cards of his color, no matter whether he has given out all of them or not) ; during one swap a pair of people swaps cards ( each person gives one card and takes one card) . The aim of all n people is as follows: each of them should give out all the cards he had initially ( that is, all cards of his color) . Your task is to denote whether such sequence of swaps is possible. If the answer is positive, you should list all the swaps.",
    "input": "The first line contains integers n ( 1 \u2264 n \u2264 200000) and s ( 1 \u2264 s \u2264 200000) . The second line contains n numbers, the i- th number stands for how many cards the i- th player has by the moment the game starts. It is possible that a player has no cards initially.",
    "output": "On the first line print \" No\" if such sequence of swaps is impossible. Otherwise, print \" Yes\" . If the answer is positive, next print number k \u2014 the number of the swaps. Then on k lines describe the swaps by pairs of indices of the swapping players. Print the swaps and the numbers of the swaps in any order.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "134C"
  },
  {
    "title": "Bits of merry old England",
    "url": "https://codeforces.com/problemset/problem/132/E",
    "history": "Another feature of Shakespeare language is that the variables are named after characters of plays by Shakespeare, and all operations on them ( value assignment, output etc. ) look like a dialog with other characters. New values of variables are defined in a rather lengthy way, so a programmer should try to minimize their usage. You have to print the given sequence of n integers. To do this, you have m variables and two types of operations on them: variable= integer print( variable) Any of the m variables can be used as variable. Variables are denoted by lowercase letters between \" a\" and \" z\" , inclusive. Any integer number can be used as integer. Let' s say that the penalty for using first type of operations equals to the number of set bits in the number integer. There is no penalty on using second type of operations. Find and output the program which minimizes the penalty for printing the given sequence of numbers.",
    "input": "The first line of input contains integers n and m ( 1 \u2264 n \u2264 250, 1 \u2264 m \u2264 26) . The second line contains the sequence to be printed. Each element of the sequence is an integer between 1 and 109, inclusive. The sequence has to be printed in the given order ( from left to right) .",
    "output": "Output the number of lines in the optimal program and the optimal penalty. Next, output the program itself, one command per line. If there are several programs with minimal penalty, output any of them ( you have only to minimize the penalty) .",
    "note": "",
    "topics": [
      "flows",
      "graphs"
    ],
    "id": "132E"
  },
  {
    "title": "Subway",
    "url": "https://codeforces.com/problemset/problem/131/D",
    "history": "A subway scheme, classic for all Berland cities is represented by a set of n stations connected by n passages, each of which connects exactly two stations and does not pass through any others. Besides, in the classic scheme one can get from any station to any other one along the passages. The passages can be used to move in both directions. Between each pair of stations there is no more than one passage. Berland mathematicians have recently proved a theorem that states that any classic scheme has a ringroad. There can be only one ringroad. In other words, in any classic scheme one can find the only scheme consisting of stations ( where any two neighbouring ones are linked by a passage) and this cycle doesn' t contain any station more than once. This invention had a powerful social impact as now the stations could be compared according to their distance from the ringroad. For example, a citizen could say \" I live in three passages from the ringroad\" and another one could reply \" you loser, I live in one passage from the ringroad\" . The Internet soon got filled with applications that promised to count the distance from the station to the ringroad ( send a text message to a short number. . . ) . The Berland government decided to put an end to these disturbances and start to control the situation. You are requested to write a program that can determine the remoteness from the ringroad for each station by the city subway scheme.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 3000) , n is the number of stations ( and trains at the same time) in the subway scheme. Then n lines contain descriptions of the trains, one per line. Each line contains a pair of integers xi, yi ( 1 \u2264 xi, yi \u2264 n) and represents the presence of a passage from station xi to station yi. The stations are numbered from 1 to n in an arbitrary order. It is guaranteed that xi = \u0338 yi and that no pair of stations contain more than one passage. The passages can be used to travel both ways. It is guaranteed that the given description represents a classic subway scheme.",
    "output": "Print n numbers. Separate the numbers by spaces, the i- th one should be equal to the distance of the i- th station from the ringroad. For the ringroad stations print number 0.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "131D"
  },
  {
    "title": "Students and Shoelaces",
    "url": "https://codeforces.com/problemset/problem/129/B",
    "history": "Anna and Maria are in charge of the math club for junior students. When the club gathers together, the students behave badly. They' ve brought lots of shoe laces to the club and got tied with each other. Specifically, each string ties together two students. Besides, if two students are tied, then the lace connects the first student with the second one as well as the second student with the first one. To restore order, Anna and Maria do the following. First, for each student Anna finds out what other students he is tied to. If a student is tied to exactly one other student, Anna reprimands him. Then Maria gathers in a single group all the students who have been just reprimanded. She kicks them out from the club. This group of students immediately leaves the club. These students takes with them the laces that used to tie them. Then again for every student Anna finds out how many other students he is tied to and so on. And they do so until Anna can reprimand at least one student. Determine how many groups of students will be kicked out of the club.",
    "input": "The first line contains two integers n and m \u2014 the initial number of students and laces ( ) . The students are numbered from 1 to n, and the laces are numbered from 1 to m. Next m lines each contain two integers a and b \u2014 the numbers of students tied by the i- th lace ( 1 \u2264 a, b \u2264 n, a = \u0338 b) . It is guaranteed that no two students are tied with more than one lace. No lace ties a student to himself.",
    "output": "Print the single number \u2014 the number of groups of students that will be kicked out from the club.",
    "note": "In the first sample Anna and Maria won' t kick out any group of students \u2014 in the initial position every student is tied to two other students and Anna won' t be able to reprimand anyone. In the second sample four students are tied in a chain and two more are running by themselves. First Anna and Maria kick out the two students from both ends of the chain ( 1 and 4) , then \u2014 two other students from the chain ( 2 and 3) . At that the students who are running by themselves will stay in the club. In the third sample Anna and Maria will momentarily kick out all students except for the fourth one and the process stops at that point. The correct answer is one.",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "129B"
  },
  {
    "title": "MST Company",
    "url": "https://codeforces.com/problemset/problem/125/E",
    "history": "The MST ( Meaningless State Team) company won another tender for an important state reform in Berland. There are n cities in Berland, some pairs of the cities are connected by roads. Each road has its price. One can move along any road in any direction. The MST team should carry out the repair works on some set of roads such that one can get from any city to any other one moving only along the repaired roads. Moreover, this set should contain exactly k capital roads ( that is, the roads that start or finish in the capital) . The number of the capital is 1. As the budget has already been approved, the MST Company will profit by finding the set with minimum lengths of roads.",
    "input": "The first input line contains three integers n, m, k ( 1 \u2264 n \u2264 5000; 0 \u2264 m \u2264 105; 0 \u2264 k < 5000) , where n is the number of cities in the country, m is the number of roads in the country, k is the number of capital roads in the required set. Then m lines enumerate the roads in question. Each road is specified by three numbers ai, bi, wi ( 1 \u2264 ai, bi \u2264 n; 1 \u2264 w \u2264 105) , where ai, bi are the numbers of cities linked by a road and wi is its length. Between each pair of cities no more than one road exists. There are no roads that start and finish in one city. The capital' s number is 1.",
    "output": "In the first line print the number of roads in the required set. The second line should contain the numbers of roads included in the sought set. If the sought set does not exist, print - 1.",
    "note": "",
    "topics": [
      "binary search",
      "graphs"
    ],
    "id": "125E"
  },
  {
    "title": "Bertown roads",
    "url": "https://codeforces.com/problemset/problem/118/E",
    "history": "Bertown has n junctions and m bidirectional roads. We know that one can get from any junction to any other one by the existing roads. As there were more and more cars in the city, traffic jams started to pose real problems. To deal with them the government decided to make the traffic one- directional on all the roads, thus easing down the traffic. Your task is to determine whether there is a way to make the traffic one- directional so that there still is the possibility to get from any junction to any other one. If the answer is positive, you should also find one of the possible ways to orient the roads.",
    "input": "The first line contains two space- separated integers n and m ( 2 \u2264 n \u2264 105, n - 1 \u2264 m \u2264 3\u00b7105) which represent the number of junctions and the roads in the town correspondingly. Then follow m lines, each containing two numbers which describe the roads in the city. Each road is determined by two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the numbers of junctions it connects. It is guaranteed that one can get from any junction to any other one along the existing bidirectional roads. Each road connects different junctions, there is no more than one road between each pair of junctions.",
    "output": "If there' s no solution, print the single number 0. Otherwise, print m lines each containing two integers pi and qi \u2014 each road' s orientation. That is the traffic flow will move along a one- directional road from junction pi to junction qi. You can print the roads in any order. If there are several solutions to that problem, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "118E"
  },
  {
    "title": "Cycle",
    "url": "https://codeforces.com/problemset/problem/117/C",
    "history": "A tournament is a directed graph without self- loops in which every pair of vertexes is connected by exactly one directed edge. That is, for any two vertexes u and v ( u = \u0338 v) exists either an edge going from u to v, or an edge from v to u. You are given a tournament consisting of n vertexes. Your task is to find there a cycle of length three.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 5000) . Next n lines contain the adjacency matrix A of the graph ( without spaces) . Ai, j = 1 if the graph has an edge going from vertex i to vertex j, otherwise Ai, j = 0. Ai, j stands for the j- th character in the i- th line. It is guaranteed that the given graph is a tournament, that is, Ai, i = 0, Ai, j = \u0338 Aj, i ( 1 \u2264 i, j \u2264 n, i = \u0338 j) .",
    "output": "Print three distinct vertexes of the graph a1, a2, a3 ( 1 \u2264 ai \u2264 n) , such that Aa1, a2 = Aa2, a3 = Aa3, a1 = 1, or \" - 1\" , if a cycle whose length equals three does not exist. If there are several solutions, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "117C"
  },
  {
    "title": "Party",
    "url": "https://codeforces.com/problemset/problem/115/A",
    "history": "A company has n employees numbered from 1 to n. Each employee either has no immediate manager or exactly one immediate manager, who is another employee with a different number. An employee A is said to be the superior of another employee B if at least one of the following is true: Employee A is the immediate manager of employee B Employee B has an immediate manager employee C such that employee A is the superior of employee C. The company will not have a managerial cycle. That is, there will not exist an employee who is the superior of his/ her own immediate manager. Today the company is going to arrange a party. This involves dividing all n employees into several groups: every employee must belong to exactly one group. Furthermore, within any single group, there must not be two employees A and B such that A is the superior of B. What is the minimum number of groups that must be formed?",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of employees. The next n lines contain the integers pi ( 1 \u2264 pi \u2264 n or pi = - 1) . Every pi denotes the immediate manager for the i- th employee. If pi is - 1, that means that the i- th employee does not have an immediate manager. It is guaranteed, that no employee will be the immediate manager of him/ herself ( pi = \u0338 i) . Also, there will be no managerial cycles.",
    "output": "Print a single integer denoting the minimum number of groups that will be formed in the party.",
    "note": "For the first example, three groups are sufficient, for example: Employee 1 Employees 2 and 4 Employees 3 and 5",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "115A"
  },
  {
    "title": "PFAST Inc.",
    "url": "https://codeforces.com/problemset/problem/114/B",
    "history": "When little Petya grew up and entered the university, he started to take part in \u0410\u0421\u041c contests. Later he realized that he doesn' t like how the \u0410\u0421\u041c contests are organised: the team could only have three members ( and he couldn' t take all his friends to the competitions and distribute the tasks between the team members efficiently) , so he decided to organize his own contests PFAST Inc. \u2014 Petr and Friends Are Solving Tasks Corporation. PFAST Inc. rules allow a team to have unlimited number of members. To make this format of contests popular he organised his own tournament. To create the team he will prepare for the contest organised by the PFAST Inc. rules, he chose several volunteers ( up to 16 people) and decided to compile a team from them. Petya understands perfectly that if a team has two people that don' t get on well, then the team will perform poorly. Put together a team with as many players as possible given that all players should get on well with each other.",
    "input": "The first line contains two integer numbers n ( 1 \u2264 n \u2264 16) \u2014 the number of volunteers, and m ( ) \u2014 the number of pairs that do not get on. Next n lines contain the volunteers' names ( each name is a non- empty string consisting of no more than 10 uppercase and/ or lowercase Latin letters) . Next m lines contain two names \u2014 the names of the volunteers who do not get on. The names in pair are separated with a single space. Each pair of volunteers who do not get on occurs exactly once. The strings are case- sensitive. All n names are distinct.",
    "output": "The first output line should contain the single number k \u2014 the number of people in the sought team. Next k lines should contain the names of the sought team' s participants in the lexicographical order. If there are several variants to solve the problem, print any of them. Petya might not be a member of the sought team.",
    "note": "",
    "topics": [
      "bitmasks",
      "brute force",
      "graphs"
    ],
    "id": "114B"
  },
  {
    "title": "Crime Management",
    "url": "https://codeforces.com/problemset/problem/107/D",
    "history": "Zeyad wants to commit n crimes in Egypt and not be punished at the end. There are several types of crimes. For example, bribery is a crime but is not considered such when repeated twice. Therefore, bribery is not considered a crime when repeated an even number of times. Speeding is a crime, but is not considered such when repeated a number of times which is a multiple of five. More specifically, c conditions on crime repetitions are known. Each condition describes the crime type ti and its multiplicity mi. If the number of times Zeyad committed the crime ti is a multiple of mi, Zeyad will not be punished for crime ti. Some crimes may be listed more than once. In this case fulfilling at least one condition for this crime is enough to not be punished for it. Of course, if for certain crime the number of times Zeyad committed it is zero, he is innocent with respect to this crime. Now Zeyad is interested in a number of ways he can commit exactly n crimes without any punishment. The order of commiting the crimes matters. More formally, two ways, sequences w1 and w2, of committing n crimes are equal if w1i = w2i, for all 1 \u2264 i \u2264 n.",
    "input": "The first line contains two integers n and c ( 0 \u2264 n \u2264 1018, 0 \u2264 c \u2264 1000) \u2014 the number of crimes Zeyad would like to commit and the number of conditions he is aware of. Then the definitions for c conditions follow. There are 26 types of crimes. Each crime definition consists of crime type \u2014 a capital Latin letter \u2014 and its multiplicity. The multiplicity of each crime is a positive integer number and the product of all multiplicities does not exceed 123. Some conditions may be repeated in the input more than once. Crime of multiplicity 1 is not yielding any punishment regardless of the number of times it was committed. The strictness of the law is compensated by the fact that it' s non- mandatory. Obviously, if some crime is not listed in the set of conditions, then Zeyad will not consider it, as committing it would unavoidably lead to the punishment. Please, do not use the",
    "output": "Output the number of different ways Zeyad can commit exactly n crimes with no punishment modulo 12345.",
    "note": "In the first test case, the 16 ways are: AAAAA, AAABB, AABAB, AABBA, ABAAB, ABABA, ABBAA, BAAAB, BAABA, BABAA, BBAAA, ABBBB, BABBB, BBABB, BBBAB, BBBBA.",
    "topics": [
      "dp",
      "graphs",
      "matrices"
    ],
    "id": "107D"
  },
  {
    "title": "Dorm Water Supply",
    "url": "https://codeforces.com/problemset/problem/107/A",
    "history": "The German University in Cairo ( GUC) dorm houses are numbered from 1 to n. Underground water pipes connect these houses together. Each pipe has certain direction ( water can flow only in this direction and not vice versa) , and diameter ( which characterizes the maximal amount of water it can handle) . For each house, there is at most one pipe going into it and at most one pipe going out of it. With the new semester starting, GUC student and dorm resident, Lulu, wants to install tanks and taps at the dorms. For every house with an outgoing water pipe and without an incoming water pipe, Lulu should install a water tank at that house. For every house with an incoming water pipe and without an outgoing water pipe, Lulu should install a water tap at that house. Each tank house will convey water to all houses that have a sequence of pipes from the tank to it. Accordingly, each tap house will receive water originating from some tank house. In order to avoid pipes from bursting one week later ( like what happened last semester) , Lulu also has to consider the diameter of the pipes. The amount of water each tank conveys should not exceed the diameter of the pipes connecting a tank to its corresponding tap. Lulu wants to find the maximal amount of water that can be safely conveyed from each tank to its corresponding tap.",
    "input": "The first line contains two space- separated integers n and p ( 1 \u2264 n \u2264 1000, 0 \u2264 p \u2264 n) \u2014 the number of houses and the number of pipes correspondingly. Then p lines follow \u2014 the description of p pipes. The i- th line contains three integers ai bi di, indicating a pipe of diameter di going from house ai to house bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 di \u2264 106) . It is guaranteed that for each house there is at most one pipe going into it and at most one pipe going out of it.",
    "output": "Print integer t in the first line \u2014 the number of tank- tap pairs of houses. For the next t lines, print 3 integers per line, separated by spaces: tanki, tapi, and diameteri, where tanki = \u0338 tapi ( 1 \u2264 i \u2264 t) . Here tanki and tapi are indexes of tank and tap houses respectively, and diameteri is the maximum amount of water that can be conveyed. All the t lines should be ordered ( increasingly) by tanki.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "107A"
  },
  {
    "title": "Cthulhu",
    "url": "https://codeforces.com/problemset/problem/103/B",
    "history": ". . . Once upon a time a man came to the sea. The sea was stormy and dark. The man started to call for the little mermaid to appear but alas, he only woke up Cthulhu. . . Whereas on the other end of the world Pentagon is actively collecting information trying to predict the monster' s behavior and preparing the secret super weapon. Due to high seismic activity and poor weather conditions the satellites haven' t yet been able to make clear shots of the monster. The analysis of the first shot resulted in an undirected graph with n vertices and m edges. Now the world' s best minds are about to determine whether this graph can be regarded as Cthulhu or not. To add simplicity, let' s suppose that Cthulhu looks from the space like some spherical body with tentacles attached to it. Formally, we shall regard as Cthulhu such an undirected graph that can be represented as a set of three or more rooted trees, whose roots are connected by a simple cycle. It is guaranteed that the graph contains no multiple edges and self- loops.",
    "input": "The first line contains two integers \u2014 the number of vertices n and the number of edges m of the graph ( 1 \u2264 n \u2264 100, 0 \u2264 m \u2264 ) . Each of the following m lines contains a pair of integers x and y, that show that an edge exists between vertices x and y ( 1 \u2264 x, y \u2264 n, x = \u0338 y) . For each pair of vertices there will be at most one edge between them, no edge connects a vertex to itself.",
    "output": "Print \" NO\" , if the graph is not Cthulhu and \" FHTAGN! \" if it is.",
    "note": "Let us denote as a simple cycle a set of v vertices that can be numbered so that the edges will only exist between vertices number 1 and 2, 2 and 3, . . . , v - 1 and v, v and 1. A tree is a connected undirected graph consisting of n vertices and n - 1 edges ( n > 0) . A rooted tree is a tree where one vertex is selected to be the root.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "103B"
  },
  {
    "title": "Leaders",
    "url": "https://codeforces.com/problemset/problem/97/E",
    "history": "After a revolution in Berland the new dictator faced an unexpected challenge: the country has to be somehow ruled. The dictator is a very efficient manager, yet he can' t personally give orders to each and every citizen. That' s why he decided to pick some set of leaders he would control. Those leaders will directly order the citizens. However, leadership efficiency turned out to vary from person to person ( i. e. while person A makes an efficient leader, person B may not be that good at it) . That' s why the dictator asked world- famous berland scientists for help. The scientists suggested an innovatory technology \u2014 to make the leaders work in pairs. A relationship graph is some undirected graph whose vertices correspond to people. A simple path is a path with no repeated vertices. Long and frighteningly expensive research showed that a pair of people has maximum leadership qualities if a graph of relationships has a simple path between them with an odd number of edges. The scientists decided to call such pairs of different people leader pairs. Secret services provided the scientists with the relationship graph so that the task is simple \u2014 we have to learn to tell the dictator whether the given pairs are leader pairs or not. Help the scientists cope with the task.",
    "input": "The first line contains integers n and m ( 1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105) \u2014 the number of vertices and edges in the relationship graph correspondingly. Next m lines contain pairs of integers a and b which mean that there is an edge between the a- th and the b- th vertices ( the vertices are numbered starting from 1, 1 \u2264 a, b \u2264 n) . It is guaranteed that the graph has no loops or multiple edges. Next line contains number q ( 1 \u2264 q \u2264 105) \u2014 the number of pairs the scientists are interested in. Next q lines contain these pairs ( in the same format as the edges, the queries can be repeated, a query can contain a pair of the identical vertices) .",
    "output": "For each query print on a single line \" Yes\" if there' s a simple odd path between the pair of people; otherwise, print \" No\" .",
    "note": "Notes to the samples: 1) Between vertices 1 and 2 there are 2 different simple paths in total: 1- 3- 2 and 1- 4- 2. Both of them consist of an even number of edges. 2) Vertices 1 and 3 are connected by an edge, that' s why a simple odd path for them is 1- 3. 5) Vertices 1 and 5 are located in different connected components, there' s no path between them.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "97E"
  },
  {
    "title": "Winning Strategy",
    "url": "https://codeforces.com/problemset/problem/97/C",
    "history": "One university has just found out about a sport programming contest called ACM ICPC v2. 0. This contest doesn' t differ much from the well- known ACM ICPC, for example, the participants are not allowed to take part in the finals more than two times. However, there is one notable difference: the teams in the contest should consist of exactly n participants. Having taken part in several ACM ICPC v2. 0 finals and having not won any medals, the students and the university governors realized that it' s high time they changed something about the preparation process. Specifically, as the first innovation it was decided to change the teams' formation process. Having spent considerable amount of time on studying the statistics of other universities' performance, they managed to receive some interesting information: the dependence between the probability of winning a medal and the number of team members that participated in the finals in the past. More formally, we know n + 1 real numbers p0 \u2264 p1 \u2264 . . . \u2264 pn, where pi is the probability of getting a medal on the finals if the team has i participants of previous finals, and other n - i participants arrived to the finals for the first time. Despite such useful data, the university governors are unable to determine such team forming tactics that would provide the maximum probability of winning a medal at ACM ICPC v2. 0 finals on average ( we are supposed to want to provide such result to the far future and we are also supposed to have an endless supply of students) . And how about you, can you offer such optimal tactic? At the first stage the university governors want to know the value of maximum average probability. More formally, suppose that the university sends a team to the k- th world finals. The team has ak participants of previous finals ( 0 \u2264 ak \u2264 n) . Since each person can participate in the finals no more than twice, the following condition must be true: . Your task is to choose sequence so that the limit \u03a8 exists and it' s value is maximal: As is an infinite sequence, you should only print the maximum value of the \u03a8 limit.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 100) , n is the number of team participants. The second line contains n + 1 real numbers with no more than 6 digits after decimal point pi ( 0 \u2264 i \u2264 n, 0 \u2264 pi \u2264 1) \u2014 the probability of that the team will win a medal if it contains i participants who has already been on the finals. Also the condition pi \u2264 pi + 1 should be fulfilled for all 0 \u2264 i \u2264 n - 1.",
    "output": "Print the only real number \u2014 the expected average number of medals won per year if the optimal strategy is used. The result may have absolute or relative error 10 - 6.",
    "note": "In the second test, no matter what participants the team contains, it is doomed to be successful.",
    "topics": [
      "binary search",
      "graphs",
      "math",
      "shortest paths"
    ],
    "id": "97C"
  },
  {
    "title": "Lucky Country",
    "url": "https://codeforces.com/problemset/problem/95/E",
    "history": "Petya loves lucky numbers. Everybody knows that positive integers are lucky if their decimal representation doesn' t contain digits other than 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. One night Petya was sleeping. He was dreaming of being the president of some island country. The country is represented by islands connected by two- way roads. Between some islands there is no road way, even through other islands, that' s why the country is divided into several regions. More formally, each island belongs to exactly one region, there is a path between any two islands located in the same region; there is no path between any two islands from different regions. A region is lucky if the amount of islands in it is a lucky number. As a real president, Petya first decided to build a presidential palace. Being a lucky numbers' fan, Petya wants to position his palace in one of the lucky regions. However, it is possible that initially the country has no such regions. In this case Petya can build additional roads between different regions, thus joining them. Find the minimum number of roads needed to build to create a lucky region.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 105) . They are the number of islands and the number of roads correspondingly. Next m lines contain road descriptions. Each road is defined by the numbers of islands that it connects: that is, by two integers u and v ( 1 \u2264 u, v \u2264 n) . Some roads can connect an island with itself; there can be more than one road between a pair of islands. Numbers in each line are separated by exactly one space character.",
    "output": "If there' s no solution, output the only number \" - 1\" ( without the quotes) . Otherwise, output the minimum number of roads r that need to be built to get a lucky region.",
    "note": "",
    "topics": [
      "dp",
      "dsu",
      "graphs"
    ],
    "id": "95E"
  },
  {
    "title": "Friends",
    "url": "https://codeforces.com/problemset/problem/94/B",
    "history": "One day Igor K. stopped programming and took up math. One late autumn evening he was sitting at a table reading a book and thinking about something. The following statement caught his attention: \" Among any six people there are either three pairwise acquainted people or three pairwise unacquainted people\" Igor just couldn' t get why the required minimum is 6 people. \" Well, that' s the same for five people, too! \" \u2014 he kept on repeating in his mind. \u2014 \" Let' s take, say, Max, Ilya, Vova \u2014 here, they all know each other! And now let' s add Dima and Oleg to Vova \u2014 none of them is acquainted with each other! Now, that math is just rubbish! \" Igor K. took 5 friends of his and wrote down who of them is friends with whom. Now he wants to check whether it is true for the five people that among them there are either three pairwise acquainted or three pairwise not acquainted people.",
    "input": "The first line contains an integer m ( 0 \u2264 m \u2264 10) , which is the number of relations of acquaintances among the five friends of Igor' s. Each of the following m lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 5; ai = \u0338 bi) , where ( ai, bi) is a pair of acquainted people. It is guaranteed that each pair of the acquaintances is described exactly once. The acquaintance relation is symmetrical, i. e. if x is acquainted with y, then y is also acquainted with x.",
    "output": "Print \" FAIL\" , if among those five people there are no either three pairwise acquainted or three pairwise unacquainted people. Otherwise print \" WIN\" .",
    "note": "",
    "topics": [
      "graphs",
      "implementation",
      "math"
    ],
    "id": "94B"
  },
  {
    "title": "Grocer's Problem",
    "url": "https://codeforces.com/problemset/problem/91/D",
    "history": "Yesterday was a fair in a supermarket' s grocery section. There were n jars with spices on the fair. Before the event the jars were numbered from 1 to n from the left to the right. After the event the jars were moved and the grocer had to sort them by the increasing of the numbers. The grocer has a special machine at his disposal. The machine can take any 5 or less jars and rearrange them in the way the grocer wants. Note that the jars do not have to stand consecutively. For example, from the permutation 2, 6, 5, 4, 3, 1 one can get permutation 1, 2, 3, 4, 5, 6, if pick the jars on the positions 1, 2, 3, 5 and 6. Which minimum number of such operations is needed to arrange all the jars in the order of their numbers' increasing?",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) . The second line contains n space- separated integers ai ( 1 \u2264 ai \u2264 n) \u2014 the i- th number represents the number of a jar that occupies the i- th position. It is guaranteed that all the numbers are distinct.",
    "output": "Print on the first line the least number of operations needed to rearrange all the jars in the order of the numbers' increasing. Then print the description of all actions in the following format. On the first line of the description of one action indicate the number of jars that need to be taken ( k) , on the second line indicate from which positions the jars need to be taken ( b1, b2, . . . , bk) , on the third line indicate the jar' s new order ( c1, c2, . . . , ck) . After the operation is fulfilled the jar from position bi will occupy the position ci. The set ( c1, c2, . . . , ck) should be the rearrangement of the set ( b1, b2, . . . , bk) . If there are multiple solutions, output any.",
    "note": "Let' s consider the first sample. The jars can be sorted within two actions. During the first action we take the jars from positions 1, 3, 6 and 4 and put them so that the jar that used to occupy the position 1 will occupy the position 3 after the operation is completed. The jar from position 3 will end up in position 6, the jar from position 6 will end up in position 4 and the jar from position 4 will end up in position 1. After the first action the order will look like that: 1, 5, 3, 4, 2, 6. During the second operation the jars in positions 2 and 5 will change places.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "91D"
  },
  {
    "title": "Ski Base",
    "url": "https://codeforces.com/problemset/problem/91/C",
    "history": "A ski base is planned to be built in Walrusland. Recently, however, the project is still in the constructing phase. A large land lot was chosen for the construction. It contains n ski junctions, numbered from 1 to n. Initially the junctions aren' t connected in any way. In the constructing process m bidirectional ski roads will be built. The roads are built one after another: first the road number 1 will be built, then the road number 2, and so on. The i- th road connects the junctions with numbers ai and bi. Track is the route with the following properties: The route is closed, that is, it begins and ends in one and the same junction. The route contains at least one road. The route doesn' t go on one road more than once, however it can visit any junction any number of times. Let' s consider the ski base as a non- empty set of roads that can be divided into one or more tracks so that exactly one track went along each road of the chosen set. Besides, each track can consist only of roads from the chosen set. Ski base doesn' t have to be connected. Two ski bases are considered different if they consist of different road sets. After building each new road the Walrusland government wants to know the number of variants of choosing a ski base based on some subset of the already built roads. The government asks you to help them solve the given problem.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105, 1 \u2264 m \u2264 105) . They represent the number of junctions and the number of roads correspondingly. Then on m lines follows the description of the roads in the order in which they were built. Each road is described by a pair of integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 the numbers of the connected junctions. There could be more than one road between a pair of junctions.",
    "output": "Print m lines: the i- th line should represent the number of ways to build a ski base after the end of construction of the road number i. The numbers should be printed modulo 1000000009 ( 109 + 9) .",
    "note": "Let us have 3 junctions and 4 roads between the junctions have already been built ( as after building all the roads in the sample) : 1 and 3, 2 and 3, 2 roads between junctions 1 and 2. The land lot for the construction will look like this: The land lot for the construction will look in the following way: We can choose a subset of roads in three ways: In the first and the second ways you can choose one path, for example, 1 - 2 - 3 - 1. In the first case you can choose one path 1 - 2 - 1.",
    "topics": [
      "combinatorics",
      "dsu",
      "graphs"
    ],
    "id": "91C"
  },
  {
    "title": "Widget Library",
    "url": "https://codeforces.com/problemset/problem/89/B",
    "history": "Vasya writes his own library for building graphical user interface. Vasya called his creation VTK ( VasyaToolKit) . One of the interesting aspects of this library is that widgets are packed in each other. A widget is some element of graphical interface. Each widget has width and height, and occupies some rectangle on the screen. Any widget in Vasya' s library is of type Widget. For simplicity we will identify the widget and its type. Types HBox and VBox are derivatives of type Widget, so they also are types Widget. Widgets HBox and VBox are special. They can store other widgets. Both those widgets can use the pack( ) method to pack directly in itself some other widget. Widgets of types HBox and VBox can store several other widgets, even several equal widgets \u2014 they will simply appear several times. As a result of using the method pack( ) only the link to the packed widget is saved, that is when the packed widget is changed, its image in the widget, into which it is packed, will also change. We shall assume that the widget a is packed in the widget b if there exists a chain of widgets a = c1, c2, . . . , ck = b, k \u2265 2, for which ci is packed directly to ci + 1 for any 1 \u2264 i < k. In Vasya' s library the situation when the widget a is packed in the widget a ( that is, in itself) is not allowed. If you try to pack the widgets into each other in this manner immediately results in an error. Also, the widgets HBox and VBox have parameters border and spacing, which are determined by the methods set_ border( ) and set_ spacing( ) respectively. By default both of these options equal 0. The picture above shows how the widgets are packed into HBox and VBox. At that HBox and VBox automatically change their size depending on the size of packed widgets. As for HBox and VBox, they only differ in that in HBox the widgets are packed horizontally and in VBox \u2014 vertically. The parameter spacing sets the distance between adjacent widgets, and border \u2014 a frame around all packed widgets of the desired width. Packed widgets are placed exactly in the order in which the pack( ) method was called for them. If within HBox or VBox there are no packed widgets, their sizes are equal to 0 \u00d7 0, regardless of the options border and spacing. The construction of all the widgets is performed using a scripting language VasyaScript. The description of the language can be found in the input data. For the final verification of the code Vasya asks you to write a program that calculates the sizes of all the widgets on the source code in the language of VasyaScript.",
    "input": "The first line contains an integer n \u2014 the number of instructions ( 1 \u2264 n \u2264 100) . Next n lines contain instructions in the language VasyaScript \u2014 one instruction per line. There is a list of possible instructions below. \" Widget [ name] ( [ x] , [ y] ) \" \u2014 create a new widget [ name] of the type Widget possessing the width of [ x] units and the height of [ y] units. \" HBox [ name] \" \u2014 create a new widget [ name] of the type HBox. \" VBox [ name] \" \u2014 create a new widget [ name] of the type VBox. \" [ name1] . pack( [ name2] ) \" \u2014 pack the widget [ name2] in the widget [ name1] . At that, the widget [ name1] must be of type HBox or VBox. \" [ name] . set_ border( [ x] ) \" \u2014 set for a widget [ name] the border parameter to [ x] units. The widget [ name] must be of type HBox or VBox. \" [ name] . set_ spacing( [ x] ) \" \u2014 set for a widget [ name] the spacing parameter to [ x] units. The widget [ name] must be of type HBox or VBox. All instructions are written without spaces at the beginning and at the end of the string. The words inside the instruction are separated by exactly one space. There are no spaces directly before the numbers and directly after them. The case matters, for example, \" wiDget x\" is not a correct instruction. The case of the letters is correct in the input data. All names of the widgets consist of lowercase Latin letters and has the length from 1 to 10 characters inclusive. The names of all widgets are pairwise different. All numbers in the script are integers from 0 to 100 inclusiveIt is guaranteed that the above- given script is correct, that is that all the operations with the widgets take place after the widgets are created and no widget is packed in itself. It is guaranteed that the script creates at least one widget.",
    "output": "For each widget print on a single line its name, width and height, separated by spaces. The lines must be ordered lexicographically by a widget' s name. Please, do not use the",
    "note": "In the first sample the widgets are arranged as follows:",
    "topics": [
      "dp",
      "expression parsing",
      "graphs",
      "implementation"
    ],
    "id": "89B"
  },
  {
    "title": "Beautiful Road",
    "url": "https://codeforces.com/problemset/problem/87/D",
    "history": "A long time ago in some country in Asia were civil wars. Each of n cities wanted to seize power. That' s why sometimes one city gathered an army and sent it to campaign against another city. Road making was difficult, so the country had few roads, exactly n - 1. Also you could reach any city from any other city going on those roads. Even during the war the Oriental people remain spiritually rich and appreciate the beauty of nature. And to keep the memory of this great crusade for the centuries to come, they planted one beautiful tree by the road on which the army spent most time. The Oriental people love nature, that' s why if there were several such roads, then one tree was planted by each of them. Recently, when the records of the war were found, it became clear that each city attacked each other one exactly once. There were exactly n( n - 1) attacks in total. Everyone has been wondering what road after those wars became the most beautiful, that is, by which road they planted the largest number of beautiful trees.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) , which represents the number of cities. Next n - 1 lines contain three integers each: the numbers of cities ai, bi ( 1 \u2264 ai, bi \u2264 n) , connected by the i- th road and the number of days di the army spends to go on it ( 1 \u2264 di \u2264 109) . The lengths of several roads may coincide.",
    "output": "Print on the first line two integers \u2014 the number of beautiful trees on the most beautiful road and the number of the most beautiful roads. Print on the second line the list of the most beautiful roads in the sorted order by the numbers' increasing. The roads are numbered from 1 to n - 1 in the order in which they are given in the input data. Please, do not use",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "implementation",
      "sortings",
      "trees"
    ],
    "id": "87D"
  },
  {
    "title": "Guard Towers",
    "url": "https://codeforces.com/problemset/problem/85/E",
    "history": "In a far away kingdom lives a very greedy king. To defend his land, he built n guard towers. Apart from the towers the kingdom has two armies, each headed by a tyrannical and narcissistic general. The generals can' t stand each other, specifically, they will never let soldiers of two armies be present in one tower. During defence operations to manage a guard tower a general has to send part of his army to that tower. Each general asks some fee from the king for managing towers. As they live in a really far away kingdom, each general evaluates his fee in the following weird manner: he finds two remotest ( the most distant) towers, where the soldiers of his army are situated and asks for the fee equal to the distance. Each tower is represented by a point on the plane with coordinates ( x, y) , and the distance between two points with coordinates ( x1, y1) and ( x2, y2) is determined in this kingdom as | x1 - x2| + | y1 - y2| . The greedy king was not exactly satisfied with such a requirement from the generals, that' s why he only agreed to pay one fee for two generals, equal to the maximum of two demanded fees. However, the king is still green with greed, and among all the ways to arrange towers between armies, he wants to find the cheapest one. Each tower should be occupied by soldiers of exactly one army. He hired you for that. You should find the minimum amount of money that will be enough to pay the fees. And as the king is also very scrupulous, you should also count the number of arrangements that will cost the same amount of money. As their number can be quite large, it is enough for the king to know it as a remainder from dividing by 109 + 7. Two arrangements are distinct if the sets of towers occupied by soldiers of the first general are distinct.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 5000) , n is the number of guard towers. Then follow n lines, each of which contains two integers x, y \u2014 the coordinates of the i- th tower ( 0 \u2264 x, y \u2264 5000) . No two towers are present at one point. Pretest 6 is one of the maximal tests for this problem.",
    "output": "Print on the first line the smallest possible amount of money that will be enough to pay fees to the generals. Print on the second line the number of arrangements that can be carried out using the smallest possible fee. This number should be calculated modulo 1000000007 ( 109 + 7) .",
    "note": "In the first example there are only two towers, the distance between which is equal to 2. If we give both towers to one general, then we well have to pay 2 units of money. If each general receives a tower to manage, to fee will be equal to 0. That is the smallest possible fee. As you can easily see, we can obtain it in two ways.",
    "topics": [
      "binary search",
      "dsu",
      "geometry",
      "graphs",
      "sortings"
    ],
    "id": "85E"
  },
  {
    "title": "Track",
    "url": "https://codeforces.com/problemset/problem/83/C",
    "history": "You already know that Valery' s favorite sport is biathlon. Due to your help, he learned to shoot without missing, and his skills are unmatched at the shooting range. But now a smaller task is to be performed, he should learn to complete the path fastest. The track' s map is represented by a rectangle n \u00d7 m in size divided into squares. Each square is marked with a lowercase Latin letter ( which means the type of the plot) , with the exception of the starting square ( it is marked with a capital Latin letters S) and the terminating square ( it is marked with a capital Latin letter T) . The time of movement from one square to another is equal to 1 minute. The time of movement within the cell can be neglected. We can move from the cell only to side- adjacent ones, but it is forbidden to go beyond the map edges. Also the following restriction is imposed on the path: it is not allowed to visit more than k different types of squares ( squares of one type can be visited an infinite number of times) . Squares marked with S and T have no type, so they are not counted. But S must be visited exactly once \u2014 at the very beginning, and T must be visited exactly once \u2014 at the very end. Your task is to find the path from the square S to the square T that takes minimum time. Among all shortest paths you should choose the lexicographically minimal one. When comparing paths you should lexicographically represent them as a sequence of characters, that is, of plot types.",
    "input": "The first input line contains three integers n, m and k ( 1 \u2264 n, m \u2264 50, n\u00b7m \u2265 2, 1 \u2264 k \u2264 4) . Then n lines contain the map. Each line has the length of exactly m characters and consists of lowercase Latin letters and characters S and T. It is guaranteed that the map contains exactly one character S and exactly one character T. Pretest 12 is one of the maximal tests for this problem.",
    "output": "If there is a path that satisfies the condition, print it as a sequence of letters \u2014 the plot types. Otherwise, print \" - 1\" ( without quotes) . You shouldn' t print the character S in the beginning and T in the end. Note that this sequence may be empty. This case is present in pretests. You can just print nothing or print one \" End of line\" - character. Both will be accepted.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "83C"
  },
  {
    "title": "Pairs",
    "url": "https://codeforces.com/problemset/problem/81/E",
    "history": "There are n students in Polycarp' s class ( including himself) . A few days ago all students wrote an essay \" My best friend\" . Each student' s essay was dedicated to one of the students of class, to his/ her best friend. Note that student b' s best friend is not necessarily student a, if a' s best friend is b. And now the teacher leads the whole class to the museum of the history of sports programming. Exciting stories of legendary heroes await the students: tourist, Petr, tomek, SnapDragon \u2014 that' s who they will hear about! The teacher decided to divide students into pairs so that each pair consisted of a student and his best friend. She may not be able to split all the students into pairs, it' s not a problem \u2014 she wants to pick out the maximum number of such pairs. If there is more than one variant of doing so, she wants to pick out the pairs so that there were as much boy- girl pairs as possible. Of course, each student must not be included in more than one pair.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 105) , n is the number of students per class. Next, n lines contain information about the students, one per line. Each line contains two integers fi, si ( 1 \u2264 fi \u2264 n, fi = \u0338 i, 1 \u2264 si \u2264 2) , where fi is the number of i- th student' s best friend and si denotes the i- th pupil' s sex ( si = 1 for a boy and si = 2 for a girl) .",
    "output": "Print on the first line two numbers t, e, where t is the maximum number of formed pairs, and e is the maximum number of boy- girl type pairs among them. Then print t lines, each line must contain a pair ai, bi ( 1 \u2264 ai, bi \u2264 n) , they are numbers of pupils in the i- th pair. Print the pairs in any order. Print the numbers in pairs in any order. If there are several solutions, output any of them.",
    "note": "The picture corresponds to the first sample. On the picture rhomb stand for boys, squares stand for girls, arrows lead from a pupil to his/ her best friend. Bold non- dashed arrows stand for pairs in the answer.",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "implementation",
      "trees"
    ],
    "id": "81E"
  },
  {
    "title": "Evacuation",
    "url": "https://codeforces.com/problemset/problem/78/E",
    "history": "They' ve screwed something up yet again. . . In one nuclear reactor of a research station an uncontrolled reaction is in progress and explosion which will destroy the whole station will happen soon. The station is represented by a square n \u00d7 n divided into 1 \u00d7 1 blocks. Each block is either a reactor or a laboratory. There can be several reactors and exactly one of them will explode soon. The reactors can be considered impassable blocks, but one can move through laboratories. Between any two laboratories, which are in adjacent blocks, there is a corridor. Blocks are considered adjacent if they have a common edge. In each laboratory there is some number of scientists and some number of rescue capsules. Once the scientist climbs into a capsule, he is considered to be saved. Each capsule has room for not more than one scientist. The reactor, which is about to explode, is damaged and a toxic coolant trickles from it into the neighboring blocks. The block, which contains the reactor, is considered infected. Every minute the coolant spreads over the laboratories through corridors. If at some moment one of the blocks is infected, then the next minute all the neighboring laboratories also become infected. Once a lab is infected, all the scientists there that are not in rescue capsules die. The coolant does not spread through reactor blocks. There are exactly t minutes to the explosion. Any scientist in a minute can move down the corridor to the next lab, if it is not infected. On any corridor an unlimited number of scientists can simultaneously move in both directions. It is believed that the scientists inside a lab moves without consuming time. Moreover, any scientist could get into the rescue capsule instantly. It is also believed that any scientist at any given moment always has the time to perform their actions ( move from the given laboratory into the next one, or climb into the rescue capsule) before the laboratory will be infected. Find the maximum number of scientists who will be able to escape.",
    "input": "The first line contains two integers n and t ( 2 \u2264 n \u2264 10, 1 \u2264 t \u2264 60) . Each of the next n lines contains n characters. These lines describe the scientists' locations. Then exactly one empty line follows. Each of the next n more lines contains n characters. These lines describe the rescue capsules' locations. In the description of the scientists' and the rescue capsules' locations the character \" Y\" stands for a properly functioning reactor, \" Z\" stands for the malfunctioning reactor. The reactors' positions in both descriptions coincide. There is exactly one malfunctioning reactor on the station. The digits \" 0\" - \" 9\" stand for the laboratories. In the description of the scientists' locations those numbers stand for the number of scientists in the corresponding laboratories. In the rescue capsules' descriptions they stand for the number of such capsules in each laboratory.",
    "output": "Print a single number \u2014 the maximum number of scientists who will manage to save themselves.",
    "note": "In the second sample the events could take place as follows:",
    "topics": [
      "flows",
      "graphs",
      "shortest paths"
    ],
    "id": "78E"
  },
  {
    "title": "Gift",
    "url": "https://codeforces.com/problemset/problem/76/A",
    "history": "The kingdom of Olympia consists of N cities and M bidirectional roads. Each road connects exactly two cities and two cities can be connected with more than one road. Also it possible that some roads connect city with itself making a loop. All roads are constantly plundered with bandits. After a while bandits became bored of wasting time in road robberies, so they suggested the king of Olympia to pay off. According to the offer, bandits want to get a gift consisted of gold and silver coins. Offer also contains a list of restrictions: for each road it is known gi \u2014 the smallest amount of gold and si \u2014 the smallest amount of silver coins that should be in the gift to stop robberies on the road. That is, if the gift contains a gold and b silver coins, then bandits will stop robberies on all the roads that gi \u2264 a and si \u2264 b. Unfortunately kingdom treasury doesn' t contain neither gold nor silver coins, but there are Olympian tugriks in it. The cost of one gold coin in tugriks is G, and the cost of one silver coin in tugriks is S. King really wants to send bandits such gift that for any two cities there will exist a safe path between them. Your task is to find the minimal cost in Olympian tugriks of the required gift.",
    "input": "The first line of the input contains two integers N and M ( 2 \u2264 N \u2264 200, 1 \u2264 M \u2264 50 000) \u2014 the number of cities and the number of roads, respectively. The second line contains two integers G and S ( 1 \u2264 G, S \u2264 109) \u2014 the prices of gold and silver coins in tugriks. The following M lines contain information about the offer. Each of the records in list is given as four integers xi, yi, gi, si, where xi and yi are the numbers of cities that the road connects and gi, si are minimal gold and silver coins requirements for the i- th road ( 1 \u2264 xi, yi \u2264 N, 1 \u2264 gi, si \u2264 109) . Cities are numbered from 1 to N. It is possible that there are more than one road between a pair of cities. It is possible that a road connects the city with itself.",
    "output": "The output should contain the minimal cost of the gift in Olympian tugriks. If there is no gift that satisfies the given requirements output .",
    "note": "",
    "topics": [
      "dsu",
      "graphs",
      "sortings",
      "trees"
    ],
    "id": "76A"
  },
  {
    "title": "Chessboard Billiard",
    "url": "https://codeforces.com/problemset/problem/74/C",
    "history": "Let' s imagine: there is a chess piece billiard ball. Its movements resemble the ones of a bishop chess piece. The only difference is that when a billiard ball hits the board' s border, it can reflect from it and continue moving. More formally, first one of four diagonal directions is chosen and the billiard ball moves in that direction. When it reaches the square located on the board' s edge, the billiard ball reflects from it; it changes the direction of its movement by 90 degrees and continues moving. Specifically, having reached a corner square, the billiard ball is reflected twice and starts to move the opposite way. While it moves, the billiard ball can make an infinite number of reflections. At any square of its trajectory the billiard ball can stop and on that the move is considered completed. It is considered that one billiard ball a beats another billiard ball b if a can reach a point where b is located. You are suggested to find the maximal number of billiard balls, that pairwise do not beat each other and that can be positioned on a chessboard n \u00d7 m in size.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n, m \u2264 106) .",
    "output": "Print a single number, the maximum possible number of billiard balls that do not pairwise beat each other. Please do not use the",
    "note": "",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "number theory"
    ],
    "id": "74C"
  },
  {
    "title": "FreeDiv",
    "url": "https://codeforces.com/problemset/problem/73/D",
    "history": "Vasya plays FreeDiv. In this game he manages a huge state, which has n cities and m two- way roads between them. Unfortunately, not from every city you can reach any other one moving along these roads. Therefore Vasya decided to divide the state into provinces so that in every province, one could reach from every city all the cities of the province, but there are no roads between provinces. Unlike other turn- based strategies, in FreeDiv a player has the opportunity to build tunnels between cities. The tunnels are two- way roads along which one can move armies undetected by the enemy. However, no more than one tunnel can be connected to each city. As for Vasya, he wants to build a network of tunnels so that any pair of cities in his state were reachable by some path consisting of roads and a tunnels. But at that no more than k tunnels are connected to each province ( otherwise, the province will be difficult to keep in case other provinces are captured by enemy armies) . Vasya discovered that maybe he will not be able to build such a network for the current condition of the state. Maybe he' ll have first to build several roads between cities in different provinces to merge the provinces. Your task is to determine the minimum number of roads Vasya needs to build so that it was possible to build the required network of tunnels in the resulting state.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, k \u2264 106, 0 \u2264 m \u2264 106) . Each of the next m lines contains two integers. They are the numbers of cities connected by a corresponding road. No road connects city to itself and there is at most one road between each pair of cities.",
    "output": "Print a single number, the minimum number of additional roads.",
    "note": "In the first example only one province exists, so it is not necessary to build any tunnels or roads. In the second example two provinces exist. It is possible to merge the provinces by building a tunnel between cities 1 and 3. In the third example at least one additional road is necessary. For example it is possible to build additional road between cities 1 and 2 and build two tunnels between cities 1 and 3, 2 and 4 after that.",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "73D"
  },
  {
    "title": "Partial Teacher",
    "url": "https://codeforces.com/problemset/problem/67/A",
    "history": "A teacher decides to give toffees to his students. He asks n students to stand in a queue. Since the teacher is very partial, he follows the following rule to distribute toffees. He looks at the first two students and gives more toffees to the student having higher marks than the other one. If they have the same marks they get the same number of toffees. The same procedure is followed for each pair of adjacent students starting from the first one to the last one. It is given that each student receives at least one toffee. You have to find the number of toffees given to each student by the teacher such that the total number of toffees is minimum.",
    "input": "The first line of input contains the number of students n ( 2 \u2264 n \u2264 1000) . The second line gives ( n - 1) characters consisting of \" L\" , \" R\" and \" = \" . For each pair of adjacent students \" L\" means that the left student has higher marks, \" R\" means that the right student has higher marks and \" = \" means that both have equal marks.",
    "output": "Output consists of n integers separated by a space representing the number of toffees each student receives in the queue starting from the first one to the last one.",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "67A"
  },
  {
    "title": "Wormhouse",
    "url": "https://codeforces.com/problemset/problem/62/D",
    "history": "Arnie the Worm has finished eating an apple house yet again and decided to move. He made up his mind on the plan, the way the rooms are located and how they are joined by corridors. He numbered all the rooms from 1 to n. All the corridors are bidirectional. Arnie wants the new house to look just like the previous one. That is, it should have exactly n rooms and, if a corridor from room i to room j existed in the old house, it should be built in the new one. We know that during the house constructing process Arnie starts to eat an apple starting from some room and only stops when he eats his way through all the corridors and returns to the starting room. It is also known that Arnie eats without stopping. That is, until Arnie finishes constructing the house, he is busy every moment of his time gnawing a new corridor. Arnie doesn' t move along the already built corridors. However, gnawing out corridors in one and the same order any time you change a house is a very difficult activity. That' s why Arnie, knowing the order in which the corridors were located in the previous house, wants to gnaw corridors in another order. It is represented as a list of rooms in the order in which they should be visited. The new list should be lexicographically smallest, but it also should be strictly lexicographically greater than the previous one. Help the worm.",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 100, 3 \u2264 m \u2264 2000) . It is the number of rooms and corridors in Arnie' s house correspondingly. The next line contains m + 1 positive integers that do not exceed n. They are the description of Arnie' s old path represented as a list of rooms he visited during the gnawing. It is guaranteed that the last number in the list coincides with the first one. The first room described in the list is the main entrance, that' s why Arnie should begin gnawing from it. You may assume that there is no room which is connected to itself and there is at most one corridor between any pair of rooms. However, it is possible to find some isolated rooms which are disconnected from others.",
    "output": "Print m + 1 positive integers that do not exceed n. Those numbers are the description of the new path, according to which Arnie should gnaw out his new house. If it is impossible to find new path you should print out No solution. The first number in your answer should be equal to the last one. Also it should be equal to the main entrance.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "62D"
  },
  {
    "title": "Eternal Victory",
    "url": "https://codeforces.com/problemset/problem/61/D",
    "history": "Valerian was captured by Shapur. The victory was such a great one that Shapur decided to carve a scene of Valerian' s defeat on a mountain. So he had to find the best place to make his victory eternal! He decided to visit all n cities of Persia to find the best available mountain, but after the recent war he was too tired and didn' t want to traverse a lot. So he wanted to visit each of these n cities at least once with smallest possible traverse. Persian cities are connected with bidirectional roads. You can go from any city to any other one using these roads and there is a unique path between each two cities. All cities are numbered 1 to n. Shapur is currently in the city 1 and he wants to visit all other cities with minimum possible traverse. He can finish his travels in any city. Help Shapur find how much He should travel.",
    "input": "First line contains a single natural number n ( 1 \u2264 n \u2264 105) \u2014 the amount of cities. Next n - 1 lines contain 3 integer numbers each xi, yi and wi ( 1 \u2264 xi, yi \u2264 n, 0 \u2264 wi \u2264 2 \u00d7 104) . xi and yi are two ends of a road and wi is the length of that road.",
    "output": "A single integer number, the minimal length of Shapur' s travel. Please, do not use",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "61D"
  },
  {
    "title": "Shortest Path",
    "url": "https://codeforces.com/problemset/problem/59/E",
    "history": "In Ancient Berland there were n cities and m two- way roads of equal length. The cities are numbered with integers from 1 to n inclusively. According to an ancient superstition, if a traveller visits three cities ai, bi, ci in row, without visiting other cities between them, a great disaster awaits him. Overall there are k such city triplets. Each triplet is ordered, which means that, for example, you are allowed to visit the cities in the following order: ai, ci, bi. Vasya wants to get from the city 1 to the city n and not fulfil the superstition. Find out which minimal number of roads he should take. Also you are required to find one of his possible path routes.",
    "input": "The first line contains three integers n, m, k ( 2 \u2264 n \u2264 3000, 1 \u2264 m \u2264 20000, 0 \u2264 k \u2264 105) which are the number of cities, the number of roads and the number of the forbidden triplets correspondingly. Then follow m lines each containing two integers xi, yi ( 1 \u2264 xi, yi \u2264 n) which are the road descriptions. The road is described by the numbers of the cities it joins. No road joins a city with itself, there cannot be more than one road between a pair of cities. Then follow k lines each containing three integers ai, bi, ci ( 1 \u2264 ai, bi, ci \u2264 n) which are the forbidden triplets. Each ordered triplet is listed mo more than one time. All three cities in each triplet are distinct. City n can be unreachable from city 1 by roads.",
    "output": "If there are no path from 1 to n print - 1. Otherwise on the first line print the number of roads d along the shortest path from the city 1 to the city n. On the second line print d + 1 numbers \u2014 any of the possible shortest paths for Vasya. The path should start in the city 1 and end in the city n.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "59E"
  },
  {
    "title": "Caterpillar",
    "url": "https://codeforces.com/problemset/problem/51/F",
    "history": "An undirected graph is called a caterpillar if it is a connected graph without cycles and it has such a path p that any vertex is located at a distance of at most 1 from the path p. The caterpillar can contain loops ( edges from a vertex to itself) but cannot contain multiple ( parallel) edges. The picture contains an example of a caterpillar: You are given an undirected graph G. You are allowed to do a merging operations, each such operation merges two vertices into one vertex. For that two any vertices a and b ( a = \u0338 b) are chosen. These verteces are deleted together with their edges ( which are incident to at least one of the vertices a or b) but a new vertex w is added together with edges ( x, w) for each edge ( a, w) and/ or ( b, w) . If there was the edge ( a, b) it transforms to the loop ( w, w) . The resulting graph ( after the merging operation) may contain multiple ( parallel) edges between pairs of vertices and loops. Let us note that this operation decreases the number of vertices of graph by 1 but leaves the number of edges in the graph unchanged. The merging operation can be informally described as a unity of two vertices of the graph into one with the natural transformation of the graph edges. You may apply this operation consecutively and make the given graph to be a caterpillar. Write a program that will print the minimal number of merging operations required to make the given graph a caterpillar.",
    "input": "The first line contains a pair of integers n, m ( 1 \u2264 n \u2264 2000; 0 \u2264 m \u2264 105) , where n represents the number of vertices in the graph and m is the number of edges in it. Then the following m lines contain edge descriptions, one edge description per line. Every line contains a pair of integers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , ai, bi which represent the indices of the vertices connected by the edge. The vertices are numbered from 1 to n. In the given graph it will be no more than one edge between any pair of vertices. The given graph is not necessarily connected.",
    "output": "Print the minimal required number of operations.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "trees"
    ],
    "id": "51F"
  },
  {
    "title": "Pentagon",
    "url": "https://codeforces.com/problemset/problem/51/E",
    "history": "According to the last order issued by the president of Berland every city of the country must have its own Ministry Defense building ( their own Pentagon) . A megapolis Berbourg was not an exception. This city has n junctions, some pairs of which are connected by two- way roads. Overall there are m roads in the city, no more than one between each pair of junctions. At the moment choosing a location place for Pentagon in Berbourg is being discussed. It has been decided that Pentagon should cover the territory of five different junctions which are joined into a cycle by roads. In the order to build Pentagon a special wall will be built along the roads ( with high- tension razor, high- voltage wire and other attributes) . Thus, the number of possible ways of building Pentagon in the city is equal to the number of different cycles at lengths of 5, composed of junctions and roads. Your task is to prints the number of ways of building Pentagon in Berbourg. Only well- optimized solutions will be accepted. Please, test your code on the maximal testcase.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 700; 0 \u2264 m \u2264 n\u00b7( n - 1) / 2) , where n represents the number of junctions and m is the number of roads in the city. Then follow m lines containing the road descriptions, one in each line. Every road is set by a number of integers ai, bi ( 1 \u2264 ai, bi \u2264 n; ai = \u0338 bi) , where ai and bi represent the numbers of junctions, connected by the road. The junctions are numbered from 1 to n. It is not guaranteed that from any junction one can get to any other one moving along the roads.",
    "output": "Print the single number which represents the required number of ways. Please, do not use",
    "note": "",
    "topics": [
      "combinatorics",
      "graphs",
      "matrices"
    ],
    "id": "51E"
  },
  {
    "title": "Ivan the Fool VS Gorynych the Dragon",
    "url": "https://codeforces.com/problemset/problem/48/E",
    "history": "Once upon a time in a kingdom far, far away. . . Okay, let\u2019s start at the point where Ivan the Fool met Gorynych the Dragon. Ivan took out his magic sword and the battle began. First Gorynych had h heads and t tails. With each strike of the sword Ivan can either cut off several heads ( from 1 to n, but not more than Gorynych has at the moment) , or several tails ( from 1 to m, but not more than Gorynych has at the moment) . At the same time, horrible though it seems, Gorynych the Dragon can also grow new heads and tails. And the number of growing heads and tails is determined uniquely by the number of heads or tails cut by the current strike. When the total number of heads and tails exceeds R, Gorynych the Dragon strikes its final blow and destroys Ivan the Fool. That\u2019s why Ivan aims to cut off all the dragon\u2019s heads and tails as quickly as possible and win. The events can also develop in a third way: neither of the opponents can win over the other one and they will continue fighting forever. The tale goes like this; easy to say, hard to do. Your task is to write a program that will determine the battle\u2019s outcome. Consider that Ivan strikes consecutively. After each blow Gorynych grows a number of new heads and tails depending on the number of cut ones. Gorynych the Dragon is defeated if after the blow he loses all his heads and tails and can\u2019t grow new ones. Ivan fights in the optimal way ( fools are lucky) , i. e. if Ivan can win, he wins having struck the least number of blows; if it is impossible to defeat Gorynych, but is possible to resist him for an infinitely long period of time, then that\u2019s the strategy Ivan chooses; if Gorynych wins in any case, Ivan aims to resist him for as long as possible.",
    "input": "The first line contains three integers h, t and R ( 0 \u2264 h, t, R \u2264 200, 0 < h + t \u2264 R) which represent the initial numbers of Gorynych\u2019s heads and tails and the largest total number of heads and tails with which Gorynych the Dragon does not yet attack. The next line contains integer n ( 1 \u2264 n \u2264 200) . The next n contain pairs of non- negative numbers \" hi ti\" which represent the number of heads and the number of tails correspondingly, that will grow if Gorynych has i heads ( 1 \u2264 i \u2264 n) cut. The next line contains an integer m ( 1 \u2264 m \u2264 200) and then \u2014 the description of Gorynych\u2019s behavior when his tails are cut off in the format identical to the one described above. All the numbers in the input file do not exceed 200.",
    "output": "Print \" Ivan\" ( without quotes) in the first line if Ivan wins, or \" Zmey\" ( that means a dragon in Russian) if Gorynych the Dragon wins. In the second line print a single integer which represents the number of blows Ivan makes. If the battle will continue forever, print in the first line \" Draw\" .",
    "note": "",
    "topics": [
      "dp",
      "games",
      "graphs"
    ],
    "id": "48E"
  },
  {
    "title": "Hercule Poirot Problem",
    "url": "https://codeforces.com/problemset/problem/46/F",
    "history": "Today you are to solve the problem even the famous Hercule Poirot can' t cope with! That' s why this crime has not yet been solved and this story was never included in Agatha Christie' s detective story books. You are not informed on what crime was committed, when and where the corpse was found and other details. We only know that the crime was committed in a house that has n rooms and m doors between the pairs of rooms. The house residents are very suspicious, that' s why all the doors can be locked with keys and all the keys are different. According to the provided evidence on Thursday night all the doors in the house were locked, and it is known in what rooms were the residents, and what kind of keys had any one of them. The same is known for the Friday night, when all the doors were also locked. On Friday it was raining heavily, that' s why nobody left the house and nobody entered it. During the day the house residents could open and close doors to the neighboring rooms using the keys at their disposal ( every door can be opened and closed from each side) ; move freely from a room to a room if a corresponding door is open; give keys to one another, being in one room. \" Little grey matter\" of Hercule Poirot are not capable of coping with such amount of information. Find out if the positions of people and keys on the Thursday night could result in the positions on Friday night, otherwise somebody among the witnesses is surely lying.",
    "input": "The first line contains three preset integers n, m \u0438 k ( 1 \u2264 n, m, k \u2264 1000) \u2014 the number of rooms, the number of doors and the number of house residents respectively. The next m lines contain pairs of room numbers which join the doors. The rooms are numbered with integers from 1 to n. There cannot be more that one door between the pair of rooms. No door connects a room with itself. The next k lines describe the residents' position on the first night. Every line contains a resident' s name ( a non- empty line consisting of no more than 10 Latin letters) , then after a space follows the room number, then, after a space \u2014 the number of keys the resident has. Then follow written space- separated numbers of the doors that can be unlocked by these keys. The doors are numbered with integers from 1 to m in the order in which they are described in the input data. All the residents have different names, uppercase and lowercase letters considered to be different. Every m keys occurs exactly once in the description. Multiple people may be present in one room, some rooms may be empty. The next k lines describe the position of the residents on the second night in the very same format. It is guaranteed that in the second night' s description the residents' names remain the same and every m keys occurs exactly once.",
    "output": "Print \" YES\" ( without quotes) if the second arrangement can result from the first one, otherwise, print \" NO\" .",
    "note": "",
    "topics": [
      "dsu",
      "graphs"
    ],
    "id": "46F"
  },
  {
    "title": "Road Problem",
    "url": "https://codeforces.com/problemset/problem/45/H",
    "history": "The Berland capital ( as you very well know) contains n junctions, some pairs of which are connected by two- way roads. Unfortunately, the number of traffic jams in the capital has increased dramatically, that' s why it was decided to build several new roads. Every road should connect two junctions. The city administration noticed that in the cities of all the developed countries between any two roads one can drive along at least two paths so that the paths don' t share any roads ( but they may share the same junction) . The administration decided to add the minimal number of roads so that this rules was fulfilled in the Berland capital as well. In the city road network should exist no more than one road between every pair of junctions before or after the reform.",
    "input": "The first input line contains a pair of integers n, m ( 2 \u2264 n \u2264 900, 1 \u2264 m \u2264 100000) , where n is the number of junctions and m is the number of roads. Each of the following m lines contains a description of a road that is given by the numbers of the connected junctions ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . The junctions are numbered from 1 to n. It is possible to reach any junction of the city from any other one moving along roads.",
    "output": "On the first line print t \u2014 the number of added roads. Then on t lines print the descriptions of the added roads in the format of the input data. You can use any order of printing the roads themselves as well as the junctions linked by every road. If there are several solutions to that problem, print any of them. If the capital doesn' t need the reform, print the single number 0. If there' s no solution, print the single number - 1.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "45H"
  },
  {
    "title": "BerPaint",
    "url": "https://codeforces.com/problemset/problem/44/F",
    "history": "Anfisa the monkey got disappointed in word processors as they aren' t good enough at reflecting all the range of her emotions, that' s why she decided to switch to graphics editors. Having opened the BerPaint, she saw a white rectangle W \u00d7 H in size which can be painted on. First Anfisa learnt to navigate the drawing tool which is used to paint segments and quickly painted on that rectangle a certain number of black- colored segments. The resulting picture didn' t seem bright enough to Anfisa, that' s why she turned her attention to the \" fill\" tool which is used to find a point on the rectangle to paint and choose a color, after which all the area which is the same color as the point it contains, is completely painted the chosen color. Having applied the fill several times, Anfisa expressed her emotions completely and stopped painting. Your task is by the information on the painted segments and applied fills to find out for every color the total area of the areas painted this color after all the fills.",
    "input": "The first input line has two integers W and H ( 3 \u2264 W, H \u2264 104) \u2014 the sizes of the initially white rectangular painting area. The second line contains integer n \u2014 the number of black segments ( 0 \u2264 n \u2264 100) . On the next n lines are described the segments themselves, each of which is given by coordinates of their endpoints x1, y1, x2, y2 ( 0 < x1, x2 < W, 0 < y1, y2 < H) . All segments have non- zero length. The next line contains preset number of fills m ( 0 \u2264 m \u2264 100) . Each of the following m lines defines the fill operation in the form of \" x y color\" , where ( x, y) are the coordinates of the chosen point ( 0 < x < W, 0 < y < H) , and color \u2014 a line of lowercase Latin letters from 1 to 15 symbols in length, determining the color. All coordinates given in the input are integers. Initially the rectangle is \" white\" in color, whereas the segments are drawn \" black\" in color.",
    "output": "For every color present in the final picture print on the single line the name of the color and the total area of areas painted that color with an accuracy of 10 - 6. Print the colors in any order.",
    "note": "Initially the black segments painted by Anfisa can also be painted a color if any of the chosen points lays on the segment. The segments have areas equal to 0. That is why if in the final picture only parts of segments is painted some color, then the area, painted the color is equal to 0.",
    "topics": [
      "geometry",
      "graphs"
    ],
    "id": "44F"
  },
  {
    "title": "Baldman and the military",
    "url": "https://codeforces.com/problemset/problem/42/E",
    "history": "Baldman is a warp master. He possesses a unique ability \u2014 creating wormholes! Given two positions in space, Baldman can make a wormhole which makes it possible to move between them in both directions. Unfortunately, such operation isn' t free for Baldman: each created wormhole makes him lose plenty of hair from his head. Because of such extraordinary abilities, Baldman has caught the military' s attention. He has been charged with a special task. But first things first. The military base consists of several underground objects, some of which are connected with bidirectional tunnels. There necessarily exists a path through the tunnel system between each pair of objects. Additionally, exactly two objects are connected with surface. For the purposes of security, a patrol inspects the tunnel system every day: he enters one of the objects which are connected with surface, walks the base passing each tunnel at least once and leaves through one of the objects connected with surface. He can enter and leave either through the same object, or through different objects. The military management noticed that the patrol visits some of the tunnels multiple times and decided to optimize the process. Now they are faced with a problem: a system of wormholes needs to be made to allow of a patrolling which passes each tunnel exactly once. At the same time a patrol is allowed to pass each wormhole any number of times. This is where Baldman comes to operation: he is the one to plan and build the system of the wormholes. Unfortunately for him, because of strict confidentiality the military can' t tell him the arrangement of tunnels. Instead, they insist that his system of portals solves the problem for any arrangement of tunnels which satisfies the given condition. Nevertheless, Baldman has some information: he knows which pairs of objects he can potentially connect and how much it would cost him ( in hair) . Moreover, tomorrow he will be told which objects ( exactly two) are connected with surface. Of course, our hero decided not to waste any time and calculate the minimal cost of getting the job done for some pairs of objects ( which he finds likely to be the ones connected with surface) . Help Baldman!",
    "input": "First line of the input contains a single natural number n ( 2 \u2264 n \u2264 100000) \u2014 the number of objects on the military base. The second line \u2014 one number m ( 1 \u2264 m \u2264 200000) \u2014 the number of the wormholes Baldman can make. The following m lines describe the wormholes: each line contains three integer numbers a, b, c ( 1 \u2264 a, b \u2264 n, 1 \u2264 c \u2264 100000) \u2014 the numbers of objects which can be connected and the number of hair Baldman has to spend to make this wormhole. The next line contains one natural number q ( 1 \u2264 q \u2264 100000) \u2014 the number of queries. Finally, the last q lines contain a description of one query each \u2014 a pair of numbers of different objects ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . There could be more than one wormhole between a pair of objects.",
    "output": "Your program should output q lines, one for each query. The i- th line should contain a single integer number \u2014 the answer for i- th query: the minimum cost ( in hair) of a system of wormholes allowing the optimal patrol for any system of tunnels ( satisfying the given conditions) if ai and bi are the two objects connected with surface, or \" - 1\" if such system of wormholes cannot be made.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "42E"
  },
  {
    "title": "3-cycles",
    "url": "https://codeforces.com/problemset/problem/41/E",
    "history": "During a recent research Berland scientists found out that there were n cities in Ancient Berland, joined by two- way paths. Any two cities are joined by no more than one path. No path joins a city with itself. According to a well- known tradition, the road network was built so that it would be impossible to choose three cities from each of which one can get to any other one directly. That is, there was no cycle exactly as long as 3. Unfortunately, the road map has not been preserved till nowadays. Now the scientists are interested how much developed a country Ancient Berland was. Help them - find, what maximal number of roads could be in the country. You also have to restore any of the possible road maps.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100) \u2014 the number of cities in Berland.",
    "output": "On the first line must be printed number m \u2014 the maximal number of roads in Berland. Then print m lines containing two numbers each \u2014 the numbers of cities that the given road joins. The cities are numbered with integers from 1 to n. If there are several variants of solving the problem, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "41E"
  },
  {
    "title": "Trial for Chief",
    "url": "https://codeforces.com/problemset/problem/37/E",
    "history": "Having unraveled the Berland Dictionary, the scientists managed to read the notes of the chroniclers of that time. For example, they learned how the chief of the ancient Berland tribe was chosen. As soon as enough pretenders was picked, the following test took place among them: the chief of the tribe took a slab divided by horizontal and vertical stripes into identical squares ( the slab consisted of N lines and M columns) and painted every square black or white. Then every pretender was given a slab of the same size but painted entirely white. Within a day a pretender could paint any side- linked set of the squares of the slab some color. The set is called linked if for any two squares belonging to the set there is a path belonging the set on which any two neighboring squares share a side. The aim of each pretender is to paint his slab in the exactly the same way as the chief\u2019s slab is painted. The one who paints a slab like that first becomes the new chief. Scientists found the slab painted by the ancient Berland tribe chief. Help them to determine the minimal amount of days needed to find a new chief if he had to paint his slab in the given way.",
    "input": "The first line contains two integers N and M ( 1 \u2264 N, M \u2264 50) \u2014 the number of lines and columns on the slab. The next N lines contain M symbols each \u2014 the final coloration of the slab. W stands for the square that should be painted white and B \u2014 for the square that should be painted black.",
    "output": "In the single line output the minimal number of repaintings of side- linked areas needed to get the required coloration of the slab.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "37E"
  },
  {
    "title": "Two Paths",
    "url": "https://codeforces.com/problemset/problem/36/E",
    "history": "Once archaeologists found m mysterious papers, each of which had a pair of integers written on them. Ancient people were known to like writing down the indexes of the roads they walked along, as \u00aba b\u00bb or \u00abb a\u00bb, where a, b are the indexes of two different cities joint by the road . It is also known that the mysterious papers are pages of two travel journals ( those days a new journal was written for every new journey) . During one journey the traveler could walk along one and the same road several times in one or several directions but in that case he wrote a new entry for each time in his journal. Besides, the archaeologists think that the direction the traveler took on a road had no effect upon the entry: the entry that looks like \u00aba b\u00bb could refer to the road from a to b as well as to the road from b to a. The archaeologists want to put the pages in the right order and reconstruct the two travel paths but unfortunately, they are bad at programming. That\u2019s where you come in. Go help them!",
    "input": "The first input line contains integer m ( 1 \u2264 m \u2264 10000) . Each of the following m lines describes one paper. Each description consists of two integers a, b ( 1 \u2264 a, b \u2264 10000, a = \u0338 b) .",
    "output": "In the first line output the number L1. That is the length of the first path, i. e. the amount of papers in its description. In the following line output L1 space- separated numbers \u2014 the indexes of the papers that describe the first path. In the third and fourth lines output similarly the length of the second path L2 and the path itself. Both paths must contain at least one road, i. e. condition L1 > 0 and L2 > 0 must be met. The papers are numbered from 1 to m according to the order of their appearance in the input file. The numbers should be output in the order in which the traveler passed the corresponding roads. If the answer is not unique, output any. If it\u2019s impossible to find such two paths, output \u00ab- 1\u00bb. Don\u2019t forget that each paper should be used exactly once, i. e L1 + L2 = m.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "implementation"
    ],
    "id": "36E"
  },
  {
    "title": "Road Map",
    "url": "https://codeforces.com/problemset/problem/34/D",
    "history": "There are n cities in Berland. Each city has its index \u2014 an integer number from 1 to n. The capital has index r1. All the roads in Berland are two- way. The road system is such that there is exactly one path from the capital to each city, i. e. the road map looks like a tree. In Berland' s chronicles the road map is kept in the following way: for each city i, different from the capital, there is kept number pi \u2014 index of the last city on the way from the capital to i. Once the king of Berland Berl XXXIV decided to move the capital from city r1 to city r2. Naturally, after this the old representation of the road map in Berland' s chronicles became incorrect. Please, help the king find out a new representation of the road map in the way described above.",
    "input": "The first line contains three space- separated integers n, r1, r2 ( 2 \u2264 n \u2264 5\u00b7104, 1 \u2264 r1 = \u0338 r2 \u2264 n) \u2014 amount of cities in Berland, index of the old capital and index of the new one, correspondingly. The following line contains n - 1 space- separated integers \u2014 the old representation of the road map. For each city, apart from r1, there is given integer pi \u2014 index of the last city on the way from the capital to city i. All the cities are described in order of increasing indexes.",
    "output": "Output n - 1 numbers \u2014 new representation of the road map in the same format.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs"
    ],
    "id": "34D"
  },
  {
    "title": "Knights",
    "url": "https://codeforces.com/problemset/problem/33/D",
    "history": "Berland is facing dark times again. The army of evil lord Van de Mart is going to conquer the whole kingdom. To the council of war called by the Berland' s king Valery the Severe came n knights. After long discussions it became clear that the kingdom has exactly n control points ( if the enemy conquers at least one of these points, the war is lost) and each knight will occupy one of these points. Berland is divided into m + 1 regions with m fences, and the only way to get from one region to another is to climb over the fence. Each fence is a circle on a plane, no two fences have common points, and no control point is on the fence. You are given k pairs of numbers ai, bi. For each pair you have to find out: how many fences a knight from control point with index ai has to climb over to reach control point bi ( in case when Van de Mart attacks control point bi first) . As each knight rides a horse ( it is very difficult to throw a horse over a fence) , you are to find out for each pair the minimum amount of fences to climb over.",
    "input": "The first input line contains three integers n, m, k ( 1 \u2264 n, m \u2264 1000, 0 \u2264 k \u2264 100000) . Then follow n lines, each containing two integers Kxi, Kyi ( - 109 \u2264 Kxi, Kyi \u2264 109) \u2014 coordinates of control point with index i. Control points can coincide. Each of the following m lines describes fence with index i with three integers ri, Cxi, Cyi ( 1 \u2264 ri \u2264 109, - 109 \u2264 Cxi, Cyi \u2264 109) \u2014 radius and center of the circle where the corresponding fence is situated. Then follow k pairs of integers ai, bi ( 1 \u2264 ai, bi \u2264 n) , each in a separate line \u2014 requests that you have to answer. ai and bi can coincide.",
    "output": "Output exactly k lines, each containing one integer \u2014 the answer to the corresponding request.",
    "note": "",
    "topics": [
      "geometry",
      "graphs",
      "shortest paths",
      "sortings"
    ],
    "id": "33D"
  },
  {
    "title": "Quarrel",
    "url": "https://codeforces.com/problemset/problem/29/E",
    "history": "Friends Alex and Bob live in Bertown. In this town there are n crossroads, some of them are connected by bidirectional roads of equal length. Bob lives in a house at the crossroads number 1, Alex \u2014 in a house at the crossroads number n. One day Alex and Bob had a big quarrel, and they refused to see each other. It occurred that today Bob needs to get from his house to the crossroads n and Alex needs to get from his house to the crossroads 1. And they don' t want to meet at any of the crossroads, but they can meet in the middle of the street, when passing it in opposite directions. Alex and Bob asked you, as their mutual friend, to help them with this difficult task. Find for Alex and Bob such routes with equal number of streets that the guys can follow these routes and never appear at the same crossroads at the same time. They are allowed to meet in the middle of the street when moving toward each other ( see Sample 1) . Among all possible routes, select such that the number of streets in it is the least possible. Until both guys reach their destinations, none of them can stay without moving. The guys are moving simultaneously with equal speeds, i. e. it is possible that when one of them reaches some of the crossroads, the other one leaves it. For example, Alex can move from crossroad 1 to crossroad 2, while Bob moves from crossroad 2 to crossroad 3. If the required routes don' t exist, your program should output - 1.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 500, 1 \u2264 m \u2264 10000) \u2014 the amount of crossroads and the amount of roads. Each of the following m lines contains two integers \u2014 the numbers of crossroads connected by the road. It is guaranteed that no road connects a crossroads with itself and no two crossroads are connected by more than one road.",
    "output": "If the required routes don' t exist, output - 1. Otherwise, the first line should contain integer k \u2014 the length of shortest routes ( the length of the route is the amount of roads in it) . The next line should contain k + 1 integers \u2014 Bob' s route, i. e. the numbers of k + 1 crossroads passed by Bob. The last line should contain Alex' s route in the same format. If there are several optimal solutions, output any of them.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "29E"
  },
  {
    "title": "Mail Stamps",
    "url": "https://codeforces.com/problemset/problem/29/C",
    "history": "One day Bob got a letter in an envelope. Bob knows that when Berland' s post officers send a letter directly from city \u00abA\u00bb to city \u00abB\u00bb, they stamp it with \u00abA B\u00bb, or \u00abB A\u00bb. Unfortunately, often it is impossible to send a letter directly from the city of the sender to the city of the receiver, that' s why the letter is sent via some intermediate cities. Post officers never send a letter in such a way that the route of this letter contains some city more than once. Bob is sure that the post officers stamp the letters accurately. There are n stamps on the envelope of Bob' s letter. He understands that the possible routes of this letter are only two. But the stamps are numerous, and Bob can' t determine himself none of these routes. That' s why he asks you to help him. Find one of the possible routes of the letter.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 105) \u2014 amount of mail stamps on the envelope. Then there follow n lines with two integers each \u2014 description of the stamps. Each stamp is described with indexes of the cities between which a letter is sent. The indexes of cities are integers from 1 to 109. Indexes of all the cities are different. Every time the letter is sent from one city to another, exactly one stamp is put on the envelope. It is guaranteed that the given stamps correspond to some valid route from some city to some other city.",
    "output": "Output n + 1 numbers \u2014 indexes of cities in one of the two possible routes of the letter.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "implementation"
    ],
    "id": "29C"
  },
  {
    "title": "pSort",
    "url": "https://codeforces.com/problemset/problem/28/B",
    "history": "One day n cells of some array decided to play the following game. Initially each cell contains a number which is equal to it' s ordinal number ( starting from 1) . Also each cell determined it' s favourite number. On it' s move i- th cell can exchange it' s value with the value of some other j- th cell, if | i - j| = di, where di is a favourite number of i- th cell. Cells make moves in any order, the number of moves is unlimited. The favourite number of each cell will be given to you. You will also be given a permutation of numbers from 1 to n. You are to determine whether the game could move to this state.",
    "input": "The first line contains positive integer n ( 1 \u2264 n \u2264 100) \u2014 the number of cells in the array. The second line contains n distinct integers from 1 to n \u2014 permutation. The last line contains n integers from 1 to n \u2014 favourite numbers of the cells.",
    "output": "If the given state is reachable in the described game, output YES, otherwise NO.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "28B"
  },
  {
    "title": "Ring Road 2",
    "url": "https://codeforces.com/problemset/problem/27/D",
    "history": "It is well known that Berland has n cities, which form the Silver ring \u2014 cities i and i + 1 ( 1 \u2264 i < n) are connected by a road, as well as the cities n and 1. The goverment have decided to build m new roads. The list of the roads to build was prepared. Each road will connect two cities. Each road should be a curve which lies inside or outside the ring. New roads will have no common points with the ring ( except the endpoints of the road) . Now the designers of the constructing plan wonder if it is possible to build the roads in such a way that no two roads intersect ( note that the roads may intersect at their endpoints) . If it is possible to do, which roads should be inside the ring, and which should be outside?",
    "input": "The first line contains two integers n and m ( 4 \u2264 n \u2264 100, 1 \u2264 m \u2264 100) . Each of the following m lines contains two integers ai and bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) . No two cities will be connected by more than one road in the list. The list will not contain the roads which exist in the Silver ring.",
    "output": "If it is impossible to build the roads in such a way that no two roads intersect, output Impossible. Otherwise print m characters. i- th character should be i, if the road should be inside the ring, and o if the road should be outside the ring. If there are several solutions, output any of them.",
    "note": "",
    "topics": [
      "2-sat",
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "27D"
  },
  {
    "title": "Roads not only in Berland",
    "url": "https://codeforces.com/problemset/problem/25/D",
    "history": "Berland Government decided to improve relations with neighboring countries. First of all, it was decided to build new roads so that from each city of Berland and neighboring countries it became possible to reach all the others. There are n cities in Berland and neighboring countries in total and exactly n - 1 two- way roads. Because of the recent financial crisis, the Berland Government is strongly pressed for money, so to build a new road it has to close some of the existing ones. Every day it is possible to close one existing road and immediately build a new one. Your task is to determine how many days would be needed to rebuild roads so that from each city it became possible to reach all the others, and to draw a plan of closure of old roads and building of new ones.",
    "input": "The first line contains integer n ( 2 \u2264 n \u2264 1000) \u2014 amount of cities in Berland and neighboring countries. Next n - 1 lines contain the description of roads. Each road is described by two space- separated integers ai, bi ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi) \u2014 pair of cities, which the road connects. It can' t be more than one road between a pair of cities. No road connects the city with itself.",
    "output": "Output the answer, number t \u2014 what is the least amount of days needed to rebuild roads so that from each city it became possible to reach all the others. Then output t lines \u2014 the plan of closure of old roads and building of new ones. Each line should describe one day in the format i j u v \u2014 it means that road between cities i and j became closed and a new road between cities u and v is built. Cities are numbered from 1. If the answer is not unique, output any.",
    "note": "",
    "topics": [
      "dsu",
      "graphs",
      "trees"
    ],
    "id": "25D"
  },
  {
    "title": "Roads in Berland",
    "url": "https://codeforces.com/problemset/problem/25/C",
    "history": "There are n cities numbered from 1 to n in Berland. Some of them are connected by two- way roads. Each road has its own length \u2014 an integer number from 1 to 1000. It is known that from each city it is possible to get to any other city by existing roads. Also for each pair of cities it is known the shortest distance between them. Berland Government plans to build k new roads. For each of the planned road it is known its length, and what cities it will connect. To control the correctness of the construction of new roads, after the opening of another road Berland government wants to check the sum of the shortest distances between all pairs of cities. Help them \u2014 for a given matrix of shortest distances on the old roads and plans of all new roads, find out how the sum of the shortest distances between all pairs of cities changes after construction of each road.",
    "input": "The first line contains integer n ( 2 \u2264 n \u2264 300) \u2014 amount of cities in Berland. Then there follow n lines with n integer numbers each \u2014 the matrix of shortest distances. j- th integer in the i- th row \u2014 di, j, the shortest distance between cities i and j. It is guaranteed that di, i = 0, di, j = dj, i, and a given matrix is a matrix of shortest distances for some set of two- way roads with integer lengths from 1 to 1000, such that from each city it is possible to get to any other city using these roads. Next line contains integer k ( 1 \u2264 k \u2264 300) \u2014 amount of planned roads. Following k lines contain the description of the planned roads. Each road is described by three space- separated integers ai, bi, ci ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 ci \u2264 1000) \u2014 ai and bi \u2014 pair of cities, which the road connects, ci \u2014 the length of the road. It can be several roads between a pair of cities, but no road connects the city with itself.",
    "output": "Output k space- separated integers qi ( 1 \u2264 i \u2264 k) . qi should be equal to the sum of shortest distances between all pairs of cities after the construction of roads with indexes from 1 to i. Roads are numbered from 1 in the input order. Each pair of cities should be taken into account in the sum exactly once, i. e. we count unordered pairs.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "25C"
  },
  {
    "title": "Ring road",
    "url": "https://codeforces.com/problemset/problem/24/A",
    "history": "Nowadays the one- way traffic is introduced all over the world in order to improve driving safety and reduce traffic jams. The government of Berland decided to keep up with new trends. Formerly all n cities of Berland were connected by n two- way roads in the ring, i. e. each city was connected directly to exactly two other cities, and from each city it was possible to get to any other city. Government of Berland introduced one- way traffic on all n roads, but it soon became clear that it' s impossible to get from some of the cities to some others. Now for each road is known in which direction the traffic is directed at it, and the cost of redirecting the traffic. What is the smallest amount of money the government should spend on the redirecting of roads so that from every city you can get to any other?",
    "input": "The first line contains integer n ( 3 \u2264 n \u2264 100) \u2014 amount of cities ( and roads) in Berland. Next n lines contain description of roads. Each road is described by three integers ai, bi, ci ( 1 \u2264 ai, bi \u2264 n, ai = \u0338 bi, 1 \u2264 ci \u2264 100) \u2014 road is directed from city ai to city bi, redirecting the traffic costs ci.",
    "output": "Output single integer \u2014 the smallest amount of money the government should spend on the redirecting of roads so that from every city you can get to any other.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "24A"
  },
  {
    "title": "Party",
    "url": "https://codeforces.com/problemset/problem/23/B",
    "history": "n people came to a party. Then those, who had no friends among people at the party, left. Then those, who had exactly 1 friend among those who stayed, left as well. Then those, who had exactly 2, 3, . . . , n - 1 friends among those who stayed by the moment of their leaving, did the same. What is the maximum amount of people that could stay at the party in the end?",
    "input": "The first input line contains one number t \u2014 amount of tests ( 1 \u2264 t \u2264 105) . Each of the following t lines contains one integer number n ( 1 \u2264 n \u2264 105) .",
    "output": "For each test output in a separate line one number \u2014 the maximum amount of people that could stay in the end.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "math"
    ],
    "id": "23B"
  },
  {
    "title": "Scheme",
    "url": "https://codeforces.com/problemset/problem/22/E",
    "history": "To learn as soon as possible the latest news about their favourite fundamentally new operating system, BolgenOS community from Nizhni Tagil decided to develop a scheme. According to this scheme a community member, who is the first to learn the news, calls some other member, the latter, in his turn, calls some third member, and so on; i. e. a person with index i got a person with index fi, to whom he has to call, if he learns the news. With time BolgenOS community members understood that their scheme doesn' t work sometimes \u2014 there were cases when some members didn' t learn the news at all. Now they want to supplement the scheme: they add into the scheme some instructions of type ( xi, yi) , which mean that person xi has to call person yi as well. What is the minimum amount of instructions that they need to add so, that at the end everyone learns the news, no matter who is the first to learn it?",
    "input": "The first input line contains number n ( 2 \u2264 n \u2264 105) \u2014 amount of BolgenOS community members. The second line contains n space- separated integer numbers fi ( 1 \u2264 fi \u2264 n, i = \u0338 fi) \u2014 index of a person, to whom calls a person with index i.",
    "output": "In the first line output one number \u2014 the minimum amount of instructions to add. Then output one of the possible variants to add these instructions into the scheme, one instruction in each line. If the solution is not unique, output any.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "trees"
    ],
    "id": "22E"
  },
  {
    "title": "System Administrator",
    "url": "https://codeforces.com/problemset/problem/22/C",
    "history": "Bob got a job as a system administrator in X corporation. His first task was to connect n servers with the help of m two- way direct connection so that it becomes possible to transmit data from one server to any other server via these connections. Each direct connection has to link two different servers, each pair of servers should have at most one direct connection. Y corporation, a business rival of X corporation, made Bob an offer that he couldn' t refuse: Bob was asked to connect the servers in such a way, that when server with index v fails, the transmission of data between some other two servers becomes impossible, i. e. the system stops being connected. Help Bob connect the servers.",
    "input": "The first input line contains 3 space- separated integer numbers n, m, v ( 3 \u2264 n \u2264 105, 0 \u2264 m \u2264 105, 1 \u2264 v \u2264 n) , n \u2014 amount of servers, m \u2014 amount of direct connections, v \u2014 index of the server that fails and leads to the failure of the whole system.",
    "output": "If it is impossible to connect the servers in the required way, output - 1. Otherwise output m lines with 2 numbers each \u2014 description of all the direct connections in the system. Each direct connection is described by two numbers \u2014 indexes of two servers, linked by this direct connection. The servers are numbered from 1. If the answer is not unique, output any.",
    "note": "",
    "topics": [
      "graphs"
    ],
    "id": "22C"
  },
  {
    "title": "Traveling Graph",
    "url": "https://codeforces.com/problemset/problem/21/D",
    "history": "You are given undirected weighted graph. Find the length of the shortest cycle which starts from the vertex 1 and passes throught all the edges at least once. Graph may contain multiply edges between a pair of vertices and loops ( edges from the vertex to itself) .",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 15, 0 \u2264 m \u2264 2000) , n is the amount of vertices, and m is the amount of edges. Following m lines contain edges as a triples x, y, w ( 1 \u2264 x, y \u2264 n, 1 \u2264 w \u2264 10000) , x, y are edge endpoints, and w is the edge length.",
    "output": "Output minimal cycle length or - 1 if it doesn' t exists.",
    "note": "",
    "topics": [
      "bitmasks",
      "graph matchings",
      "graphs"
    ],
    "id": "21D"
  },
  {
    "title": "Dijkstra?",
    "url": "https://codeforces.com/problemset/problem/20/C",
    "history": "You are given a weighted undirected graph. The vertices are enumerated from 1 to n. Your task is to find the shortest path between the vertex 1 and the vertex n.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 105, 0 \u2264 m \u2264 105) , where n is the number of vertices and m is the number of edges. Following m lines contain one edge each in form ai, bi and wi ( 1 \u2264 ai, bi \u2264 n, 1 \u2264 wi \u2264 106) , where ai, bi are edge endpoints and wi is the length of the edge. It is possible that the graph has loops and multiple edges between pair of vertices.",
    "output": "Write the only integer - 1 in case of no path. Write the shortest path in opposite case. If there are many solutions, print any of them.",
    "note": "",
    "topics": [
      "graphs",
      "shortest paths"
    ],
    "id": "20C"
  },
  {
    "title": "Two Paths",
    "url": "https://codeforces.com/problemset/problem/14/D",
    "history": "As you know, Bob' s brother lives in Flatland. In Flatland there are n cities, connected by n - 1 two- way roads. The cities are numbered from 1 to n. You can get from one city to another moving along the roads. The \u00abTwo Paths\u00bb company, where Bob' s brother works, has won a tender to repair two paths in Flatland. A path is a sequence of different cities, connected sequentially by roads. The company is allowed to choose by itself the paths to repair. The only condition they have to meet is that the two paths shouldn' t cross ( i. e. shouldn' t have common cities) . It is known that the profit, the \u00abTwo Paths\u00bb company will get, equals the product of the lengths of the two paths. Let' s consider the length of each road equals 1, and the length of a path equals the amount of roads in it. Find the maximum possible profit for the company.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 200) , where n is the amount of cities in the country. The following n - 1 lines contain the information about the roads. Each line contains a pair of numbers of the cities, connected by the road ai, bi ( 1 \u2264 ai, bi \u2264 n) .",
    "output": "Output the maximum possible profit.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "shortest paths",
      "trees",
      "two pointers"
    ],
    "id": "14D"
  },
  {
    "title": "A Simple Task",
    "url": "https://codeforces.com/problemset/problem/11/D",
    "history": "Given a simple graph, output the number of simple cycles in it. A simple cycle is a cycle with no repeated vertices or edges.",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n \u2264 19, 0 \u2264 m) \u2013 respectively the number of vertices and edges of the graph. Each of the subsequent m lines contains two integers a and b, ( 1 \u2264 a, b \u2264 n, a = \u0338 b) indicating that vertices a and b are connected by an undirected edge. There is no more than one edge connecting any pair of vertices.",
    "output": "Output the number of cycles in the given graph.",
    "note": "The example graph is a clique and contains four cycles of length 3 and three cycles of length 4.",
    "topics": [
      "bitmasks",
      "dp",
      "graphs"
    ],
    "id": "11D"
  },
  {
    "title": "Interestring graph and Apples",
    "url": "https://codeforces.com/problemset/problem/9/E",
    "history": "Hexadecimal likes drawing. She has drawn many graphs already, both directed and not. Recently she has started to work on a still- life \u00abinteresting graph and apples\u00bb. An undirected graph is called interesting, if each of its vertices belongs to one cycle only \u2014 a funny ring \u2014 and does not belong to any other cycles. A funny ring is a cycle that goes through all the vertices just once. Moreover, loops are funny rings too. She has already drawn the apples and some of the graph edges. But now it is not clear, how to connect the rest of the vertices to get an interesting graph as a result. The answer should contain the minimal amount of added edges. And furthermore, the answer should be the lexicographically smallest one. The set of edges ( x1, y1) , ( x2, y2) , . . . , ( xn, yn) , where xi \u2264 yi, is lexicographically smaller than the set ( u1, v1) , ( u2, v2) , . . . , ( un, vn) , where ui \u2264 vi, provided that the sequence of integers x1, y1, x2, y2, . . . , xn, yn is lexicographically smaller than the sequence u1, v1, u2, v2, . . . , un, vn. If you do not cope, Hexadecimal will eat you. . . . eat you alive.",
    "input": "The first line of the input data contains a pair of integers n and m ( 1 \u2264 n \u2264 50, 0 \u2264 m \u2264 2500) \u2014 the amount of vertices and edges respectively. The following lines contain pairs of numbers xi and yi ( 1 \u2264 xi, yi \u2264 n) \u2014 the vertices that are already connected by edges. The initial graph may contain multiple edges and loops.",
    "output": "In the first line output \u00abYES\u00bb or \u00abNO\u00bb: if it is possible or not to construct an interesting graph. If the answer is \u00abYES\u00bb, in the second line output k \u2014 the amount of edges that should be added to the initial graph. Finally, output k lines: pairs of vertices xj and yj, between which edges should be drawn. The result may contain multiple edges and loops. k can be equal to zero.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs"
    ],
    "id": "9E"
  },
  {
    "title": "Beads",
    "url": "https://codeforces.com/problemset/problem/8/E",
    "history": "One Martian boy called Zorg wants to present a string of beads to his friend from the Earth \u2014 Masha. He knows that Masha likes two colours: blue and red, \u2014 and right in the shop where he has come, there is a variety of adornments with beads of these two colours. All the strings of beads have a small fastener, and if one unfastens it, one might notice that all the strings of beads in the shop are of the same length. Because of the peculiarities of the Martian eyesight, if Zorg sees one blue- and- red string of beads first, and then the other with red beads instead of blue ones, and blue \u2014 instead of red, he regards these two strings of beads as identical. In other words, Zorg regards as identical not only those strings of beads that can be derived from each other by the string turnover, but as well those that can be derived from each other by a mutual replacement of colours and/ or by the string turnover. It is known that all Martians are very orderly, and if a Martian sees some amount of objects, he tries to put them in good order. Zorg thinks that a red bead is smaller than a blue one. Let' s put 0 for a red bead, and 1 \u2014 for a blue one. From two strings the Martian puts earlier the string with a red bead in the i- th position, providing that the second string has a blue bead in the i- th position, and the first two beads i - 1 are identical. At first Zorg unfastens all the strings of beads, and puts them into small heaps so, that in each heap strings are identical, in his opinion. Then he sorts out the heaps and chooses the minimum string in each heap, in his opinion. He gives the unnecassary strings back to the shop assistant and says he doesn' t need them any more. Then Zorg sorts out the remaining strings of beads and buys the string with index k. All these manupulations will take Zorg a lot of time, that' s why he asks you to help and find the string of beads for Masha.",
    "input": "The input file contains two integers n and k ( 2 \u2264 n \u2264 50; 1 \u2264 k \u2264 1016) \u2014the length of a string of beads, and the index of the string, chosen by Zorg.",
    "output": "Output the k- th string of beads, putting 0 for a red bead, and 1 \u2014 for a blue one. If it s impossible to find the required string, output the only number - 1.",
    "note": "Let' s consider the example of strings of length 4 \u2014 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110. Zorg will divide them into heaps: 0001, 0111, 1000, 1110, 0010, 0100, 1011, 1101, 0011, 1100, 0101, 1010, 0110, 1001. Then he will choose the minimum strings of beads in each heap: 0001, 0010, 0011, 0101, 0110. The forth string \u2014 0101.",
    "topics": [
      "dp",
      "graphs"
    ],
    "id": "8E"
  },
  {
    "title": "Obsession with Robots",
    "url": "https://codeforces.com/problemset/problem/8/B",
    "history": "The whole world got obsessed with robots, and to keep pace with the progress, great Berland' s programmer Draude decided to build his own robot. He was working hard at the robot. He taught it to walk the shortest path from one point to another, to record all its movements, but like in many Draude' s programs, there was a bug \u2014 the robot didn' t always walk the shortest path. Fortunately, the robot recorded its own movements correctly. Now Draude wants to find out when his robot functions wrong. Heh, if Draude only remembered the map of the field, where he tested the robot, he would easily say if the robot walked in the right direction or not. But the field map was lost never to be found, that' s why he asks you to find out if there exist at least one map, where the path recorded by the robot is the shortest. The map is an infinite checkered field, where each square is either empty, or contains an obstruction. It is also known that the robot never tries to run into the obstruction. By the recorded robot' s movements find out if there exist at least one such map, that it is possible to choose for the robot a starting square ( the starting square should be empty) such that when the robot moves from this square its movements coincide with the recorded ones ( the robot doesn' t run into anything, moving along empty squares only) , and the path from the starting square to the end one is the shortest. In one movement the robot can move into the square ( providing there are no obstrutions in this square) that has common sides with the square the robot is currently in.",
    "input": "The first line of the input file contains the recording of the robot' s movements. This recording is a non- empty string, consisting of uppercase Latin letters L, R, U and D, standing for movements left, right, up and down respectively. The length of the string does not exceed 100.",
    "output": "In the first line output the only word OK ( if the above described map exists) , or BUG ( if such a map does not exist) .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "implementation"
    ],
    "id": "8B"
  }
]