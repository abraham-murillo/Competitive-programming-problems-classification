[
  {
    "title": "Yet Another Tournament",
    "url": "https://codeforces.com/problemset/problem/1783/C",
    "history": "You are participating in Yet Another Tournament. There are n + 1 participants: you and n other opponents, numbered from 1 to n . Each two participants will play against each other exactly once. If the opponent i plays against the opponent j , he wins if and only if i > j . When the opponent i plays against you, everything becomes a little bit complicated. In order to get a win against opponent i , you need to prepare for the match for at least a_ i minutes \u2014 otherwise, you lose to that opponent. You have m minutes in total to prepare for matches, but you can prepare for only one match at one moment. In other words, if you want to win against opponents p_ 1, p_ 2, . . . , p_ k , you need to spend a_ p_ 1 + a_ p_ 2 + . . . + a_ p_ k minutes for preparation \u2014 and if this number is greater than m , you cannot achieve a win against all of these opponents at the same time. The final place of each contestant is equal to the number of contestants with strictly more wins + 1 . For example, if 3 contestants have 5 wins each, 1 contestant has 3 wins and 2 contestants have 1 win each, then the first 3 participants will get the 1 - st place, the fourth one gets the 4 - th place and two last ones get the 5 - th place. Calculate the minimum possible place ( lower is better) you can achieve if you can' t prepare for the matches more than m minutes in total.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ; 0 \u2264 m \u2264\u2211_ i= 1^ na_ i ) \u2014 the number of your opponents and the total time you have for preparation. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1000 ) , where a_ i is the time you need to prepare in order to win against the i - th opponent. It' s guaranteed that the total sum of n over all test cases doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print the minimum possible place you can take if you can prepare for the matches no more than m minutes in total.",
    "note": "In the first test case, you can prepare to all opponents, so you' ll win 4 games and get the 1 - st place, since all your opponents win no more than 3 games. In the second test case, you can prepare against the second opponent and win. As a result, you' ll have 1 win, opponent 1 \u2014 1 win, opponent 2 \u2014 1 win, opponent 3 \u2014 3 wins. So, opponent 3 will take the 1 - st place, and all other participants, including you, get the 2 - nd place. In the third test case, you have no time to prepare at all, so you' ll lose all games. Since each opponent has at least 1 win, you' ll take the last place ( place 6 ) . In the fourth test case, you have no time to prepare, but you can still win against the first opponent. As a result, opponent 1 has no wins, you have 1 win and all others have at least 2 wins. So your place is 4 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1783C"
  },
  {
    "title": "Rectangle Shrinking",
    "url": "https://codeforces.com/problemset/problem/1781/E",
    "history": "You have a rectangular grid of height 2 and width 10^ 9 consisting of unit cells. There are n rectangles placed on this grid, and the borders of these rectangles pass along cell borders. The i - th rectangle covers all cells in rows from u_ i to d_ i inclusive and columns from l_ i to r_ i inclusive ( 1 \u2264 u_ i \u2264 d_ i \u2264 2 ; 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) . The initial rectangles can intersect, be nested, and coincide arbitrarily. You should either remove each rectangle, or replace it with any of its non- empty subrectangles. In the latter case, the new subrectangle must lie inside the initial rectangle, and its borders must still pass along cell borders. In particular, it is allowed for the subrectangle to be equal to the initial rectangle. After that replacement, no two ( non- removed) rectangles are allowed to have common cells, and the total area covered with the new rectangles must be as large as possible. Illustration for the first test case. The initial rectangles are given at the top, the new rectangles are given at the bottom. Rectangle number 4 is removed.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rectangles. Each of the next n lines contains four integers u_ i, l_ i, d_ i, r_ i ( 1 \u2264 u_ i \u2264 d_ i \u2264 2 ; 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) \u2014 the coordinates of cells located in the top- left and the bottom- right corners of the rectangle, respectively. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, first print an integer s \u2014 the largest possible covered by new rectangles area. Then print n lines with your solution to cover this area. In the i - th of these lines print four integers u' _ i, l' _ i, d' _ i, r' _ i . If you remove the i - th rectangle, print u' _ i = l' _ i = d' _ i = r' _ i = 0 . Otherwise, these numbers denote the new coordinates of the top- left and the bottom- right corners of the i - th rectangle, satisfying u_ i \u2264 u' _ i \u2264 d' _ i \u2264 d_ i ; l_ i \u2264 l' _ i \u2264 r' _ i \u2264 r_ i . If there are multiple solutions, print any.",
    "note": "The picture in the statement illustrates the first test case.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1781E"
  },
  {
    "title": "Equal Frequencies",
    "url": "https://codeforces.com/problemset/problem/1781/C",
    "history": "Let' s call a string balanced if all characters that are present in it appear the same number of times. For example, \" coder\" , \" appall\" , and \" ttttttt\" are balanced, while \" wowwow\" and \" codeforces\" are not. You are given a string s of length n consisting of lowercase English letters. Find a balanced string t of the same length n consisting of lowercase English letters that is different from the string s in as few positions as possible. In other words, the number of indices i such that s_ i t_ i should be as small as possible.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. Each test case consists of two lines. The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the string s . The second line contains the string s of length n consisting of lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print the smallest number of positions where string s and a balanced string t can differ, followed by such a string t . If there are multiple solutions, print any. It can be shown that at least one balanced string always exists.",
    "note": "In the first test case, the given string \" hello\" is not balanced: letters ' h' , ' e' , and ' o' appear in it once, while letter ' l' appears twice. On the other hand, string \" helno\" is balanced: five distinct letters are present in it, and each of them appears exactly once. Strings \" hello\" and \" helno\" differ in just one position: the fourth character. Other solutions are possible too. In the second test case, string \" codefofced\" is balanced since only letters ' c' , ' o' , ' d' , ' e' , and ' f' are present in it, and each of them appears exactly twice. In the third test case, string \" eeeee\" is balanced since only letter ' e' is present in it. In the fourth test case, the given string \" appall\" is already balanced.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings",
      "strings"
    ],
    "id": "1781C"
  },
  {
    "title": "Going to the Cinema",
    "url": "https://codeforces.com/problemset/problem/1781/B",
    "history": "A company of n people is planning a visit to the cinema. Every person can either go to the cinema or not. That depends on how many other people will go. Specifically, every person i said: \" I want to go to the cinema if and only if at least a_ i other people will go, not counting myself\" . That means that person i will become sad if: they go to the cinema, and strictly less than a_ i other people go; or they don' t go to the cinema, and at least a_ i other people go. In how many ways can a set of people going to the cinema be chosen so that nobody becomes sad?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. Each test case consists of two lines. The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people in the company. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n - 1 ) \u2014 integers from peoples' claims. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the number of different ways to choose a set of people going to the cinema so that nobody becomes sad.",
    "note": "In the first test case, both people want to go to the cinema if and only if the other person goes. There are two valid options: either both people go, or neither of them goes. However, if just one of them goes, both will be sad. In the second test case, everyone has to go to the cinema. In any other case, someone will be sad. In the third test case, there are three valid options: person number 2 goes to the cinema; or persons with indices 2, 3, 4, 7 go; or all eight people go.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1781B"
  },
  {
    "title": "Anya's Simultaneous Exhibition",
    "url": "https://codeforces.com/problemset/problem/1779/E",
    "history": "This is an interactive problem. Anya has gathered n chess experts numbered from 1 to n for which the following properties hold: For any pair of players one of the players wins every game against the other ( and no draws ever occur) ; Transitivity does not necessarily hold \u2014 it might happen that A always beats B , B always beats C and C always beats A . Anya does not know, for each pair, who is the player who beats the other. To organize a tournament, Anya hosts n- 1 games. In each game, she chooses two players. One of them wins and stays, while the other one is disqualified. After all the games are hosted only one player will remain. A player is said to be a candidate master if they can win a tournament ( notice that the winner of a tournament may depend on the players selected by Anya in the n- 1 games) . Since Anya is a curious girl, she is interested in finding the candidate masters. Unfortunately, she does not have much time. To speed up the process, she will organize up to 2n simuls ( short for \" simultaneous exhibition\" , in which one player plays against many) . In one simul, Anya chooses exactly one player who will play against some ( at least one) of the other players. The chosen player wins all games they would win in a regular game, and the same holds for losses. After the simul finishes, Anya is only told the total number of games won by the chosen player ( but not which ones) . Nobody is disqualified during a simul. Can you help Anya host simuls and determine the candidate masters? The winning players in each pair could be changed between the simuls, but only in a way that preserves the results of all previous simuls. These changes may depend on your queries. InteractionFirstly, the jury sends one integer n ( 3 \u2264 n \u2264 250 ) which should be read \u2014 the number of players. After that, your program may ask queries or report an answer. To ask a query, print \" ? i s_ 1 s_ 2 . . . s_ n \" ( without quotes) , where i is the index of the player who will play against some of the other players in the simul. s is a binary string that denotes the players they play against. i plays against every player j for which s_ j = 1 holds ( and s_ j = 1 should hold for at least one 1 \u2264 j \u2264 n ) . Please note that s_ i = 0 must hold since a player cannot play against themselves, otherwise, the query is considered to be incorrect. After this, you should read an integer \u2014 the number of games player i has won. When you have identified the answer, you must print \" ! c_ 1 c_ 2 . . . c_ n \" ( without quotes) and terminate your program. c is a binary string which represents the candidate masters. Player i is a candidate master if c_ i= 1 holds, otherwise, they are not. If you ask more than 2n queries or if one of the queries is malformed, the interaction terminates immediately and your program receives verdict Wrong Answer. After printing a query do not forget to output the end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. Hacks are disabled in this problem.",
    "input": "",
    "output": "",
    "note": "In the first example, the first query describes a simul in which player 1 plays against player 2 ( and no one else) . The answer to the query is 1 , meaning that player 1 won the only game they played. We can conclude that 1 beats 2 . Similarly, the second query tells us that 2 beats 3 and the third query tells us that 3 beats 1 . All players are candidate masters in this case as Player 1 can win the tournament if 2 and 3 play first. 3 loses and leaves, while 2 stays. 1 then plays against 2 and wins; Other players can win in the same fashion. In the second example, the third query describes a simul in which player 1 plays against every other player. The answer to the query is 4 , meaning that they won every game they played. It can be concluded that player 1 also beats every other player. They can never lose, hence they are the only player who can remain at the end of every possible tournament, and the only possible candidate master.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ],
    "id": "1779E"
  },
  {
    "title": "Boris and His Amazing Haircut",
    "url": "https://codeforces.com/problemset/problem/1779/D",
    "history": "Boris thinks that chess is a tedious game. So he left his tournament early and went to a barber shop as his hair was a bit messy. His current hair can be described by an array a_ 1, a_ 2, . . . , a_ n , where a_ i is the height of the hair standing at position i . His desired haircut can be described by an array b_ 1, b_ 2, . . . , b_ n in a similar fashion. The barber has m razors. Each has its own size and can be used at most once. In one operation, he chooses a razor and cuts a segment of Boris' s hair. More formally, an operation is: Choose any razor which hasn' t been used before, let its size be x ; Choose a segment [ l, r] ( 1\u2264 l \u2264 r \u2264 n ) ; Set a_ i : = min ( a_ i, x) for each l\u2264 i \u2264 r ; Notice that some razors might have equal sizes \u2014 the barber can choose some size x only as many times as the number of razors with size x . He may perform as many operations as he wants, as long as any razor is used at most once and a_ i = b_ i for each 1 \u2264 i \u2264 n at the end. He does not have to use all razors. Can you determine whether the barber can give Boris his desired haircut?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 20 000 ) . The description of the test cases follows. The first line of each test case contains a positive integer n ( 3\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the length of arrays a and b . The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 Boris' s current hair. The third line of each test case contains n positive integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 Boris' s desired hair. The fourth line of each test case contains a positive integer m ( 1 \u2264 m \u2264 2\u00b7 10^ 5 ) \u2014 the number of razors. The fifth line of each test case contains m positive integers x_ 1, x_ 2, . . . , x_ m ( 1 \u2264 x_ i \u2264 10^ 9 ) \u2014 the sizes of the razors. It is guaranteed that the sum of n and the sum of m over all test cases do not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" if the barber can cut Boris' s hair as desired. Otherwise, print \" NO\" . You can output the answer in any case ( upper or lower) . For example, the strings \" yEs\" , \" yes\" , \" Yes\" , and \" YES\" will be recognized as positive responses.",
    "note": "In the first test case, Boris' s hair is initially [ 3, 3, 3] . Let us describe a sequence of 2 operations the barber can perform: The barber uses the razor with size 1 on the segment [ 2, 2] ; hence Boris' s hair becomes [ 3, 1, 3] . The barber uses the razor with size 2 on the segment [ 1, 3] ; hence Boris' s hair becomes [ 2, 1, 2] which is the desired haircut. In the third test case, no operation has to be done since Boris' s hair is already as desired. In the fourth test case, no cuts will be able to increase the third element in [ 1, 1, 1] in a way that the array becomes [ 1, 1, 2] .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1779D"
  },
  {
    "title": "Least Prefix Sum",
    "url": "https://codeforces.com/problemset/problem/1779/C",
    "history": "Baltic, a famous chess player who is also a mathematician, has an array a_ 1, a_ 2, . . . , a_ n , and he can perform the following operation several ( possibly 0 ) times: Choose some index i ( 1 \u2264 i \u2264 n ) ; multiply a_ i with - 1 , that is, set a_ i : = - a_ i . Baltic' s favorite number is m , and he wants a_ 1 + a_ 2 + \u22ef + a_ m to be the smallest of all non- empty prefix sums. More formally, for each k = 1, 2, . . . , n it should hold that a_ 1 + a_ 2 + \u22ef + a_ k \u2265 a_ 1 + a_ 2 + \u22ef + a_ m. Please note that multiple smallest prefix sums may exist and that it is only required that a_ 1 + a_ 2 + \u22ef + a_ m is one of them. Help Baltic find the minimum number of operations required to make a_ 1 + a_ 2 + \u22ef + a_ m the least of all prefix sums. It can be shown that a valid sequence of operations always exists.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . The description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the size of Baltic' s array and his favorite number. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of required operations.",
    "note": "In the first example, we perform the operation a_ 4 : = - a_ 4 . The array becomes [ - 1, - 2, - 3, 4] and the prefix sums, [ a_ 1, a_ 1+ a_ 2, a_ 1+ a_ 2+ a_ 3, a_ 1+ a_ 2+ a_ 3+ a_ 4] , are equal to [ - 1, - 3, - 6, - 2] . Thus a_ 1 + a_ 2 + a_ 3= - 6 is the smallest of all prefix sums. In the second example, we perform the operation a_ 3 : = - a_ 3 . The array becomes [ 1, 2, - 3, 4] with prefix sums equal to [ 1, 3, 0, 4] . In the third and fourth examples, a_ 1 + a_ 2 + \u22ef + a_ m is already the smallest of the prefix sums \u2014 no operation needs to be performed. In the fifth example, a valid sequence of operations is: a_ 3 : = - a_ 3 , a_ 2 : = - a_ 2 , a_ 5 : = - a_ 5 . The array becomes [ - 2, - 3, 5, - 5, 20] and its prefix sums are [ - 2, - 5, 0, - 5, 15] . Note that a_ 1+ a_ 2= - 5 and a_ 1+ a_ 2+ a_ 3+ a_ 4= - 5 are both the smallest of the prefix sums ( and this is a valid solution) .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1779C"
  },
  {
    "title": "Hall of Fame",
    "url": "https://codeforces.com/problemset/problem/1779/A",
    "history": "Thalia is a Legendary Grandmaster in chess. She has n trophies in a line numbered from 1 to n ( from left to right) and a lamp standing next to each of them ( the lamps are numbered as the trophies) . A lamp can be directed either to the left or to the right, and it illuminates all trophies in that direction ( but not the one it is next to) . More formally, Thalia has a string s consisting only of characters ' L' and ' R' which represents the lamps' current directions. The lamp i illuminates: trophies 1, 2, . . . , i- 1 if s_ i is ' L' ; trophies i+ 1, i+ 2, . . . , n if s_ i is ' R' . She can perform the following operation at most once: Choose an index i ( 1 \u2264 i < n ) ; Swap the lamps i and i+ 1 ( without changing their directions) . That is, swap s_ i with s_ i+ 1 . Thalia asked you to illuminate all her trophies ( make each trophy illuminated by at least one lamp) , or to tell her that it is impossible to do so. If it is possible, you can choose to perform an operation or to do nothing. Notice that lamps cannot change direction, it is only allowed to swap adjacent ones.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . The description of the test cases follows. The first line of each test case contains a positive integer n ( 2 \u2264 n \u2264 100 000 ) \u2014 the number of trophies. The second line of each test case contains a string s of length n consisting only of characters ' L' and ' R' \u2014 the i - th character describes the direction of the i - th lamp. It is guaranteed that the sum of n over all test cases does not exceed 100 000 .",
    "output": "For each test case print - 1 if it is impossible to illuminate all trophies by performing one operation ( or doing nothing) . Otherwise, print 0 if you choose not to perform the operation ( i. e. , the trophies are illuminated by the initial positioning of the lamps) , or an index i ( 1 \u2264 i < n ) if you choose to swap lamps i and i+ 1 . If there are multiple answers, print any.",
    "note": "In the first example, it is possible to swap lamps 1 and 2 , or do nothing. In any case, the string \" LL\" is obtained. Not all trophies are illuminated since trophy 2 is not illuminated by any lamp \u2014 lamp 1 illuminates nothing and lamp 2 illuminates only the trophy 1 . In the second example, it is necessary to swap lamps 1 and 2 . The string becomes \" RL\" . Trophy 1 is illuminated by lamp 2 and trophy 2 is illuminated by lamp 1 , hence it is possible to illuminate all trophies. In the third example, all trophies are initially illuminated \u2014 hence, not performing any operation is a valid solution. In the last two examples performing swaps is not necessary as all trophies are illuminated initially. But, the presented solutions are also valid.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1779A"
  },
  {
    "title": "Laboratory on Pluto",
    "url": "https://codeforces.com/problemset/problem/1775/F",
    "history": "As you know, Martian scientists are actively engaged in space research. One of the highest priorities is Pluto. In order to study this planet in more detail, it was decided to build a laboratory on Pluto. It is known that the lab will be built of n square blocks of equal size. For convenience, we will assume that Pluto' s surface is a plane divided by vertical and horizontal lines into unit squares. Each square is either occupied by a lab block or not, and only n squares are occupied. Since each block is square, it has four walls. If a wall is adjacent to another block, it is considered inside, otherwise \u2014 outside. Pluto is famous for its extremely cold temperatures, so the outside walls of the lab must be insulated. One unit of insulation per exterior wall would be required. Thus, the greater the total length of the outside walls of the lab ( i. e. , its perimeter) , the more insulation will be needed. Consider the lab layout in the figure below. It shows that the lab consists of n = 33 blocks, and all the blocks have a total of 24 outside walls, i. e. 24 units of insulation will be needed. You should build the lab optimally, i. e. , minimize the amount of insulation. On the other hand, there may be many optimal options, so scientists may be interested in the number of ways to build the lab using the minimum amount of insulation, modulo a prime number m . Two ways are considered the same if they are the same when overlapping without turning. Thus, if a lab plan is rotated by 90^ \u2218 , such a new plan can be considered a separate way. To help scientists explore Pluto, you need to write a program that solves these difficult problems.",
    "input": "The first line contains two integers t and u ( 1 \u2264 t \u2264 2\u00b7 10^ 5 , 1 \u2264 u \u2264 2 ) \u2014 the number of test cases and the test type. If u= 1 , you need to find any way to build the lab in an optimal way, and if u= 2 , you need to calculate the number of ways to do it. If u= 2 , then in the following line of input there is a prime integer m ( 10^ 8 \u2264 m \u2264 10^ 9 + 9 ) , modulo which you need to calculate the number of ways. Each of the following t lines of input contains a description of a test case consisting of one integer n ( 1 \u2264 n \u2264 4\u00b7 10^ 5 ) \u2014 the number of blocks the lab should consist of. It is guaranteed that if u= 1 , then the sum of n on all test cases does not exceed 8\u00b710^ 5 .",
    "output": "For each test case, output the answers in the format below, separating them with a newline. The output format depends on u in the input data. If u= 1 , in the first line you need to print two integers h and w \u2014the height and width of the area in which the lab should be built. Then, in each of the following h lines, you must output a line s_ i consisting of w characters \" # \" and \" . \" . If the j - th character of the row s_ i is \" # \" , then the corresponding square must contain a block of laboratory, otherwise, it is considered empty. Thus, we get a matrix of symbols. The condition must also be met that the first and last rows of the matrix, as well as the first and last columns, must have at least one character \" # \" , otherwise we could output the same lab layout, but with smaller h and w . If there are many options to build an optimal lab, you can print any of them. If u= 2 , you need to print two integers p and c \u2014 the number of outside walls in an optimal lab, and the remainder of the number of ways by prime modulo m .",
    "note": "Consider the second example. If n= 1 , the only way to build a lab is to place a single block. In this case, the perimeter will be equal to four. When n= 2 , you must place two blocks side by side. This can be done either vertically or horizontally, so there are two ways. It is easy to see that the lab has six outside walls in this case. For n= 7 , all the 22 optimal plans are shown in the picture below.",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1775F"
  },
  {
    "title": "The Human Equation",
    "url": "https://codeforces.com/problemset/problem/1775/E",
    "history": "Petya and his friend, the robot Petya+ + , went to BFDMONCON, where the costume contest is taking place today. While walking through the festival, they came across a scientific stand named after Professor Oak and Golfball, where they were asked to solve an interesting problem. Given a sequence of numbers a_ 1, a_ 2, . . . , a_ n you can perform several operations on this sequence. Each operation should look as follows. You choose some subsequence ^ \u2020 . Then you call all the numbers at odd positions in this subsequence northern, and all the numbers at even positions in this subsequence southern. In this case, only the position of the number in the subsequence is taken into account, not in the original sequence. For example, consider the sequence 1, 4, 2, 8, 5, 7, 3, 6, 9 and its subsequence ( shown in bold) 1, 4, 2, 8, 5, 7, 3, 6, 9 . Then the numbers 4 and 5 are northern, and the numbers 2 and 6 are southern. After that, you can do one of the following: add 1 to all northern numbers and subtract 1 from all south numbers; or add 1 to all southern numbers and subtract 1 from all northern numbers. Thus, from the sequence 1, 4, 2, 8, 5, 7, 3, 6, 9 , if you choose the subsequence shown in bold, you can get either 1, 5, 1, 8, 6, 7, 3, 5, 9 or 1, 3, 3, 8, 4, 7, 3, 7, 9 . Then the operation ends. Note also that all operations are independent, i. e. the numbers are no longer called northern or southern when one operation ends. It is necessary to turn all the numbers of the sequence into zeros using the operations described above. Since there is very little time left before the costume contest, the friends want to know, what is the minimum number of operations required for this. The friends were unable to solve this problem, so can you help them? ^ \u2020 A sequence c is a subsequence of a sequence d if c can be obtained from d by the deletion of several ( possibly, zero or all) elements.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the length of the sequence. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the description of the sequence itself. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print one integer in a single line \u2014 the minimum number of operations it takes to turn all the numbers into zeros.",
    "note": "In the first test case, the sequence of operations is as follows: 1, 2, - 3\u27f6 0, 2, - 2\u27f6 0, 1, - 1\u27f6 0, 0, 0 . In the second test case, the sequence looks like this: 1, 0, 0, - 1, - 1 \u27f6 0, 0, 0, 0, - 1\u27f6 0, 0, 0, 0, 0 . In the fourth test case, simply select the entire sequence as a subsequence, then subtract one from the northern numbers and add one to the southern numbers. Thus, the sequence will be nulled in one operation. In the fifth test case, you don' t need to do any operations, since the sequence already consists of zeros.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1775E"
  },
  {
    "title": "Gardener and the Capybaras (hard version)",
    "url": "https://codeforces.com/problemset/problem/1775/A2",
    "history": "This is an hard version of the problem. The difference between the versions is that the string can be longer than in the easy version. You can only do hacks if both versions of the problem are passed. Kazimir Kazimirovich is a Martian gardener. He has a huge orchard of binary balanced apple trees. Recently Casimir decided to get himself three capybaras. The gardener even came up with their names and wrote them down on a piece of paper. The name of each capybara is a non- empty line consisting of letters \" a\" and \" b\" . Denote the names of the capybaras by the lines a , b , and c . Then Casimir wrote the nonempty lines a , b , and c in a row without spaces. For example, if the capybara' s name was \" aba\" , \" ab\" , and \" bb\" , then the string the gardener wrote down would look like \" abaabbb\" . The gardener remembered an interesting property: either the string b is lexicographically not smaller than the strings a and c at the same time, or the string b is lexicographically not greater than the strings a and c at the same time. In other words, either a \u2264 b and c \u2264 b are satisfied, or b \u2264 a and b \u2264 c are satisfied ( or possibly both conditions simultaneously) . Here \u2264 denotes the lexicographic \" less than or equal to\" for strings. Thus, a \u2264 b means that the strings must either be equal, or the string a must stand earlier in the dictionary than the string b . For a more detailed explanation of this operation, see \" Notes\" section. Today the gardener looked at his notes and realized that he cannot recover the names because they are written without spaces. He is no longer sure if he can recover the original strings a , b , and c , so he wants to find any triplet of names that satisfy the above property.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The only line of a test case contains the string s ( 3 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) \u2014 the names of the capybaras, written together. The string consists of English letters ' a' and ' b' only. It is guaranteed that the sum of string lengths over all test cases does not exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case, print three strings a , b and c on a single line, separated by spaces \u2014 names of capybaras, such that writing them without spaces results in a line s . Either a \u2264 b and c \u2264 b , or b \u2264 a and b \u2264 c must be satisfied. If there are several ways to restore the names, print any of them. If the names cannot be recovered, print \" : ( \" ( without quotes) .",
    "note": "A string x is lexicographically smaller than a string y if and only if one of the following holds: x is a prefix of y , but x y ; in the first position where x and y differ, the string x has the letter ' a' , and the string y has the letter ' b' . Now let' s move on to the examples. In the first test case, one of the possible ways to split the line s into three lines \u2014is \" b\" , \" bb\" , \" a\" . In the third test case, we can see that the split satisfies two conditions at once ( i. e. , a \u2264 b , c \u2264 b , b \u2264 a and b \u2264 c are true simultaneously) .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1775A2"
  },
  {
    "title": "Two Chess Pieces",
    "url": "https://codeforces.com/problemset/problem/1774/E",
    "history": "Cirno_ 9baka has a tree with n nodes. He is willing to share it with you, which means you can operate on it. Initially, there are two chess pieces on the node 1 of the tree. In one step, you can choose any piece, and move it to the neighboring node. You are also given an integer d . You need to ensure that the distance between the two pieces doesn' t ever exceed d . Each of these two pieces has a sequence of nodes which they need to pass in any order, and eventually, they have to return to the root. As a curious boy, he wants to know the minimum steps you need to take.",
    "input": "The first line contains two integers n and d ( 2 \u2264 d \u2264 n \u2264 2\u00b7 10^ 5 ) . The i - th of the following n - 1 lines contains two integers u_ i, v_ i ( 1 \u2264 u_ i, v_ i \u2264 n) , denoting the edge between the nodes u_ i, v_ i of the tree. It' s guaranteed that these edges form a tree. The next line contains an integer m_ 1 ( 1 \u2264 m_ 1 \u2264 n ) and m_ 1 integers a_ 1, a_ 2, . . . , a_ m_ 1 ( 1 \u2264 a_ i \u2264 n , all a_ i are distinct) \u2014 the sequence of nodes that the first piece needs to pass. The second line contains an integer m_ 2 ( 1 \u2264 m_ 2 \u2264 n ) and m_ 2 integers b_ 1, b_ 2, . . . , b_ m_ 2 ( 1 \u2264 b_ i \u2264 n , all b_ i are distinct) \u2014 the sequence of nodes that the second piece needs to pass.",
    "output": "Output a single integer \u2014 the minimum steps you need to take.",
    "note": "In the first sample, here is one possible sequence of steps of length 6 . The second piece moves by the route 1 \u2192 2 \u2192 4 \u2192 2 \u2192 1 . Then, the first piece moves by the route 1 \u2192 3 \u2192 1 . In the second sample, here is one possible sequence of steps of length 8 : The first piece moves by the route 1 \u2192 2 \u2192 3 . Then, the second piece moves by the route 1 \u2192 2 . Then, the first piece moves by the route 3 \u2192 4 \u2192 3 \u2192 2 \u2192 1 . Then, the second piece moves by the route 2 \u2192 1 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1774E"
  },
  {
    "title": "Same Count One",
    "url": "https://codeforces.com/problemset/problem/1774/D",
    "history": "ChthollyNotaSeniorious received a special gift from AquaMoon: n binary arrays of length m . AquaMoon tells him that in one operation, he can choose any two arrays and any position pos from 1 to m , and swap the elements at positions pos in these arrays. He is fascinated with this game, and he wants to find the minimum number of operations needed to make the numbers of 1 s in all arrays the same. He has invited you to participate in this interesting game, so please try to find it! If it is possible, please output specific exchange steps in the format described in the output section. Otherwise, please output - 1 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 2\u00b7 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 10^ 5 , 2 \u2264 m \u2264 10^ 5 ) . The i - th of the following n lines contains m integers a_ i, 1, a_ i, 2, . . . , a_ i, m ( 0 \u2264 a_ i, j\u2264 1) \u2014 the elements of the i - th array. It is guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, if the objective is not achievable, output - 1 . Otherwise, in the first line output k ( 0 \u2264 k \u2264 mn) \u2014 the minimum number of operations required. The i - th of the following k lines should contain 3 integers, x_ i, y_ i, z_ i ( 1 \u2264 x_ i, y_ i \u2264 n, 1 \u2264 z_ i \u2264 m) , which describe an operation that swap a_ x_ i, z_ i, a_ y_ i, z_ i : swap the z_ i - th number of the x_ i - th and y_ i - th arrays.",
    "note": "In the first test case, it' s enough to do a single operation: to swap the first element in the second and the first rows. The arrays will become [ 0, 1, 1, 0] , [ 1, 0, 1, 0] , [ 1, 0, 0, 1] , each of them contains exactly two 1 s.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1774D"
  },
  {
    "title": "Ice and Fire",
    "url": "https://codeforces.com/problemset/problem/1774/C",
    "history": "Little09 and his friends are playing a game. There are n players, and the temperature value of the player i is i . The types of environment are expressed as 0 or 1 . When two players fight in a specific environment, if its type is 0 , the player with a lower temperature value in this environment always wins; if it is 1 , the player with a higher temperature value in this environment always wins. The types of the n- 1 environments form a binary string s with a length of n- 1 . If there are x players participating in the game, there will be a total of x- 1 battles, and the types of the x- 1 environments will be the first x- 1 characters of s . While there is more than one player left in the tournament, choose any two remaining players to fight. The player who loses will be eliminated from the tournament. The type of the environment of battle i is s_ i . For each x from 2 to n , answer the following question: if all players whose temperature value does not exceed x participate in the game, how many players have a chance to win?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1\u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of players. The second line of each test case contains a binary string s with a length n- 1 . It is guaranteed that the sum of n over all test cases does not exceed 3\u00b7 10^ 5 .",
    "output": "For each test case output n- 1 integers \u2014 for each x from 2 to n , output the number of players that have a chance to win.",
    "note": "In the first test case, for x= 2 and x= 3 , only the player whose temperature value is 1 can be the winner. For x= 4 , the player whose temperature value is 2, 3, 4 can be the winner.",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1774C"
  },
  {
    "title": "Coloring",
    "url": "https://codeforces.com/problemset/problem/1774/B",
    "history": "Cirno_ 9baka has a paper tape with n cells in a row on it. As he thinks that the blank paper tape is too dull, he wants to paint these cells with m kinds of colors. For some aesthetic reasons, he thinks that the i - th color must be used exactly a_ i times, and for every k consecutive cells, their colors have to be distinct. Help Cirno_ 9baka to figure out if there is such a way to paint the cells.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains three integers n , m , k ( 1 \u2264 k \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264 10^ 5 , m \u2264 n ) . Here n denotes the number of cells, m denotes the number of colors, and k means that for every k consecutive cells, their colors have to be distinct. The second line of each test case contains m integers a_ 1, a_ 2, \u22ef , a_ m ( 1 \u2264 a_ i \u2264 n ) \u2014 the numbers of times that colors have to be used. It' s guaranteed that a_ 1 + a_ 2 + . . . + a_ m = n . It is guaranteed that the sum of m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output \" YES\" if there is at least one possible coloring scheme; otherwise, output \" NO\" . You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , and \" yEs\" will all be recognized as positive answers) .",
    "note": "In the first test case, there is no way to color the cells satisfying all the conditions. In the second test case, we can color the cells as follows: ( 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 5, 6) . For any 2 consecutive cells, their colors are distinct.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1774B"
  },
  {
    "title": "Easy Assembly",
    "url": "https://codeforces.com/problemset/problem/1773/E",
    "history": "Emma loves playing with blocks. She has several cubic blocks of the same size that are numbered with distinct integers written on them. She assembles towers from those blocks by stacking them vertically. A configuration of her game is a set of towers that she has assembled from the blocks. Emma can perform two kinds of operations on a configuration of towers: Split any tower with more than one block in it by taking any number of blocks from the top of the tower and moving them to a new tower keeping their order, so that the top block of the old tower becomes the top block of the new tower. As a result of this operation, the number of towers increases by one. Combine any two towers by moving blocks from one tower on top of the other tower in the same order. As a result of this operation, the number of towers decreases by one. Emma wants to stack all the blocks into a single tower so that all blocks come in order sorted by the numbers \u2014 from the block with the minimal number at the top to the block with the maximal number at the bottom. Emma wants to do as little of splitting and combining operations as possible. Your task is to find the minimal number of operations she has to make and output how many splits and combines are needed.",
    "input": "The first line of the input file contains an integer n ( 1 \u2264 n \u2264 10 000 ) \u2014 the number of towers in the initial configuration. Next n lines describe towers. Each tower i is described by a line that starts with the number k_ i ( k_ i \u2265 1 ; \u2211_ 1^ nk_ i\u2264 10 000 ) \u2014 the number of blocks in the tower, followed by k_ i numbers b_ i, j ( 1 \u2264 b_ i, j\u2264 10^ 9 ) \u2014 numbers written on the blocks in the i - th tower, listed from top to bottom. All block numbers listed in the input are different.",
    "output": "Output a line with two integers s and c \u2014 the number of split and combine operations Emma should make to get a single tower with blocks sorted by their numbers, so that the total number of operations is minimized.",
    "note": "The example needs the following operations ( 1 split and 2 combines) . InitialSplit lastCombined 2nd onto 1stCombined 1st onto 2nd",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1773E"
  },
  {
    "title": "Dominoes",
    "url": "https://codeforces.com/problemset/problem/1773/D",
    "history": "Dora likes to play with dominoes. She takes n \u00d7 m table, marks some cells as occupied, and then tries to fill all unoccupied cells with 2 \u00d7 1 dominoes. Her little brother Dani loves to play pranks on his older sister. So when she is away, he marks two more unoccupied cells as occupied. He wants to do it in such a way that it will be impossible to fill all unoccupied cells with dominoes. Help Dani to count the number of ways he can select these two cells. Since Dani can only count to one million, if this number of ways is x , output min( x, 10^ 6) .",
    "input": "The first line contains integers n and m ( 1\u2264 n, m\u2264 1000 ) . Next n lines contain m characters each \u2014 the initial state of the table. Character \" # \" corresponds to an occupied cell, and character \" . \" corresponds to an unoccupied cell. It is guaranteed that there are at least two unoccupied cells, and that it is possible to fill all unoccupied cells with dominoes.",
    "output": "Let x be the number of ways Dani can mark two cells in such a way that it will be impossible to fill all unoccupied cells with dominoes. Print one integer min( x, 10^ 6) .",
    "note": "",
    "topics": [
      "combinatorics",
      "flows",
      "graph matchings",
      "greedy"
    ],
    "id": "1773D"
  },
  {
    "title": "Gaining Rating",
    "url": "https://codeforces.com/problemset/problem/1772/G",
    "history": "Monocarp is playing chess on one popular website. He has n opponents he can play with. The i - th opponent has rating equal to a_ i . Monocarp' s initial rating is x . Monocarp wants to raise his rating to the value y ( y > x ) . When Monocarp is playing against one of the opponents, he will win if his current rating is bigger or equal to the opponent' s rating. If Monocarp wins, his rating is increased by 1 , otherwise it is decreased by 1 . The rating of his opponent does not change. Monocarp wants to gain rating y playing as few games as possible. But he can' t just grind it, playing against weak opponents. The website has a rule that you should play against all opponents as evenly as possible. Speaking formally, if Monocarp wants to play against an opponent i , there should be no other opponent j such that Monocarp has played more games against i than against j . Calculate the minimum possible number of games Monocarp needs to gain rating y or say it' s impossible. Note that ratings of Monocarp' s opponents don' t change, while Monocarp' s rating does change.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains three integers n , x and y ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 x < y \u2264 10^ 12 ) \u2014 the number of Monocarp' s opponents, his initial and desired ratings. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) \u2014 ratings of Monocarp' s opponents. Additional constraint on the input: the total sum of n over all t test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of games Monocarp needs to play to gain rating y , or - 1 if it' s impossible.",
    "note": "In the first test case, Monocarp can use the following strategy: Monocarp plays against the 2 - nd opponent to increase rating ( 2 \u2192 3 ) ; Monocarp plays against the 1 - st opponent to increase rating ( 3 \u2192 4 ) ; Monocarp plays against the 4 - th opponent to increase rating ( 4 \u2192 5 ) ; Monocarp plays against the 5 - th opponent to increase rating ( 5 \u2192 6 ) ; Now Monocarp have to play with remaining three opponents. So, he will lose 3 times and get rating 3 ( 6 \u2192 5 \u2192 4 \u2192 3 ) ; After that, Monocarp will repeat steps 1- 5 again. After 14 games, he has played twice with each opponent and get final rating 4 . Monocarp plays against the 1 - st opponent to increase rating ( 4 \u2192 5 ) ; Monocarp plays against the 2 - nd opponent to increase rating ( 5 \u2192 6 ) ; Monocarp plays against the 4 - th opponent to increase rating ( 6 \u2192 7 ) ; Monocarp plays against the 5 - th opponent to increase rating ( 7 \u2192 8 ) ; Monocarp plays against the 7 - th opponent to increase rating ( 8 \u2192 9 ) ; Monocarp plays against the 3 - rd opponent to increase rating ( 9 \u2192 10 ) ; In total, Monocarp, played twice against the 6 - th opponent and three times against other opponents and got rating 10 in 14 + 6 = 20 games. In the second test case, it can be proven that whichever games Monocarp plays, he can' t get his rating higher than 4 .",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "1772G"
  },
  {
    "title": "Different Differences",
    "url": "https://codeforces.com/problemset/problem/1772/C",
    "history": "An array a consisting of k integers is strictly increasing if a_ 1 < a_ 2 < . . . < a_ k . For example, the arrays [ 1, 3, 5] , [ 1, 2, 3, 4] , [ 3, 5, 6] are strictly increasing; the arrays [ 2, 2] , [ 3, 7, 5] , [ 7, 4, 3] , [ 1, 2, 2, 3] are not. For a strictly increasing array a of k elements, let' s denote the characteristic as the number of different elements in the array [ a_ 2 - a_ 1, a_ 3 - a_ 2, . . . , a_ k - a_ k- 1] . For example, the characteristic of the array [ 1, 3, 4, 7, 8] is 3 since the array [ 2, 1, 3, 1] contains 3 different elements: 2 , 1 and 3 . You are given two integers k and n ( k \u2264 n ) . Construct an increasing array of k integers from 1 to n with maximum possible characteristic.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 819 ) \u2014 the number of test cases. Each test case consists of one line containing two integers k and n ( 2 \u2264 k \u2264 n \u2264 40 ) .",
    "output": "For each test case, print k integers \u2014 the elements of the strictly increasing array a with the maximum possible characteristic. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1772C"
  },
  {
    "title": "Hossam and Trainees",
    "url": "https://codeforces.com/problemset/problem/1771/C",
    "history": "Hossam has n trainees. He assigned a number a_ i for the i - th trainee. A pair of the i - th and j - th ( i = \u0338 j ) trainees is called successful if there is an integer x ( x \u2265 2 ) , such that x divides a_ i , and x divides a_ j . Hossam wants to know if there is a successful pair of trainees. Hossam is very tired now, so he asks you for your help!",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) , the number of test cases. A description of the test cases follows. The first line of each test case contains an integer number n ( 2 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers, the number of each trainee a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "Print the answer \u2014 \" YES\" ( without quotes) if there is a successful pair of trainees and \" NO\" otherwise. You can print each letter in any case.",
    "note": "In the first example, the first trainee and the second trainee make up a successful pair: a_ 1 = 32, a_ 2 = 48 , you can choose x = 4 .",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1771C"
  },
  {
    "title": "Koxia and Whiteboards",
    "url": "https://codeforces.com/problemset/problem/1770/A",
    "history": "Kiyora has n whiteboards numbered from 1 to n . Initially, the i - th whiteboard has the integer a_ i written on it. Koxia performs m operations. The j - th operation is to choose one of the whiteboards and change the integer written on it to b_ j . Find the maximum possible sum of integers written on the whiteboards after performing all m operations.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 100 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line of each test case contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 9 ) .",
    "output": "For each test case, output a single integer \u2014 the maximum possible sum of integers written on whiteboards after performing all m operations.",
    "note": "In the first test case, Koxia can perform the operations as follows: Choose the 1 - st whiteboard and rewrite the integer written on it to b_ 1= 4 . Choose the 2 - nd whiteboard and rewrite to b_ 2= 5 . After performing all operations, the numbers on the three whiteboards are 4 , 5 and 3 respectively, and their sum is 12 . It can be proven that this is the maximum possible sum achievable. In the second test case, Koxia can perform the operations as follows: Choose the 2 - nd whiteboard and rewrite to b_ 1= 3 . Choose the 1 - st whiteboard and rewrite to b_ 2= 4 . Choose the 2 - nd whiteboard and rewrite to b_ 3= 5 . The sum is 4 + 5 = 9 . It can be proven that this is the maximum possible sum achievable.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1770A"
  },
  {
    "title": "\u041f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0430 I",
    "url": "https://codeforces.com/problemset/problem/1769/C1",
    "history": "\u0412 \u044d\u0442\u043e\u0438\u0306 \u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 n \u2264 50 \u0438 a_ i \u2264 100 . \u0412\u0438\u043a\u0430 \u0437\u0430 \u0432\u0440\u0435\u043c\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 VK \u0443\u0436\u0435 \u0441\u0434\u0435\u043b\u0430\u043b\u0430 n \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u0432\u0435\u0440\u0441\u0438\u0438\u0306. i - \u0438\u0306 \u043a\u043e\u043c\u043c\u0438\u0442 \u0431\u044b\u043b \u0441\u0434\u0435\u043b\u0430\u043d \u0432 a_ i - \u0438\u0306 \u0434\u0435\u043d\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u0412\u0438\u043a\u0438 \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043d\u0438 \u0412\u0438\u043a\u0430 \u043c\u043e\u0433\u043b\u0430 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432, \u0430 \u0432 \u0434\u0440\u0443\u0433\u0438\u0435 \u2014 \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e. \u0412\u0438\u043a\u0443 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0442 \u0442\u0430\u043a\u0438\u0435 \u043e\u0442\u0440\u0435\u0437\u043a\u0438 \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0445 \u0434\u043d\u0435\u0438\u0306, \u0447\u0442\u043e \u0432 \u043a\u0430\u0436\u0434\u044b\u0438\u0306 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0434\u043d\u0435\u0438\u0306 \u0443 \u043d\u0435\u0435\u0308 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u043a\u043e\u043c\u043c\u0438\u0442. \u0427\u0435\u043c \u0434\u043b\u0438\u043d\u043d\u0435\u0435 \u0431\u0443\u0434\u0435\u0442 \u0441\u0430\u043c\u044b\u0438\u0306 \u0434\u043b\u0438\u043d\u043d\u044b\u0438\u0306 \u0442\u0430\u043a\u043e\u0438\u0306 \u043e\u0442\u0440\u0435\u0437\u043e\u043a, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u043c \u043e\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u0441\u0435\u0431\u044f \u043e\u0449\u0443\u0449\u0430\u0442\u044c. \u041d\u0435\u0434\u0430\u0432\u043d\u043e \u0412\u0438\u043a\u0430 \u043d\u0430\u0448\u043b\u0430 \u0441\u043f\u043e\u0441\u043e\u0431 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0432\u043f\u0435\u0440\u0435\u0308\u0434, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043d\u0430 \u0441\u0443\u0442\u043a\u0438. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, i - \u0438\u0306 \u043a\u043e\u043c\u043c\u0438\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u00ab\u0441\u0434\u0435\u043b\u0430\u043d\u00bb \u043b\u0438\u0431\u043e \u0432 a_ i - \u0438\u0306, \u043b\u0438\u0431\u043e \u0432 ( a_ i + 1) - \u0438\u0306 \u0434\u0435\u043d\u044c. \u0412\u0440\u0435\u043c\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u0438\u0442\u044c \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u2014 \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u043c\u043e\u0436\u043d\u043e \u043a\u0430\u043a \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435\u043c \u043a\u043e\u043c\u043c\u0438\u0442\u0430\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0442\u0430\u043a \u0438 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u0440\u043e\u0432\u043d\u043e \u043d\u0430 \u0434\u0435\u043d\u044c \u0432\u043f\u0435\u0440\u0435\u0308\u0434. \u041d\u0430\u0438\u0306\u0434\u0438\u0442\u0435 \u0434\u043b\u0438\u043d\u0443 \u0441\u0430\u043c\u043e\u0433\u043e \u0434\u043b\u0438\u043d\u043d\u043e\u0433\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0445 \u0434\u043d\u0435\u0438\u0306, \u0432 \u043a\u0430\u0436\u0434\u044b\u0438\u0306 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443 \u0412\u0438\u043a\u0438 \u0432 \u043f\u0440\u043e\u0444\u0438\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u043a\u043e\u043c\u043c\u0438\u0442, \u043f\u043e\u0441\u043b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0438\u0306 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432.",
    "input": "\u041a\u0430\u0436\u0434\u044b\u0438\u0306 \u0442\u0435\u0441\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0412 \u043f\u0435\u0440\u0432\u043e\u0438\u0306 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e t ( 1 \u2264 t \u2264 100 ) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n ( 1 \u2264 n \u2264 50 ) \u2014 \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432. \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_ 1, a_ 2, . . . , a_ n \u0432 \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u044e\u0449\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 100 ) \u2014 \u043d\u043e\u043c\u0435\u0440\u0430 \u0434\u043d\u0435\u0438\u0306, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u043d\u044b \u043a\u043e\u043c\u043c\u0438\u0442\u044b.",
    "output": "\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043d\u0430\u0431\u043e\u0440\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u0434\u043d\u0435\u0438\u0306, \u0432 \u043a\u0430\u0436\u0434\u044b\u0438\u0306 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443 \u0412\u0438\u043a\u0438 \u0432 \u043f\u0440\u043e\u0444\u0438\u043b\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u043a\u043e\u043c\u043c\u0438\u0442, \u043f\u043e\u0441\u043b\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0438\u0306 \u043f\u043e\u0434\u043a\u0440\u0443\u0442\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u0432\u043f\u0435\u0440\u0435\u0308\u0434 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043d\u0430 \u0441\u0443\u0442\u043a\u0438.",
    "note": "\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0434\u0430\u0442\u0443 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0432 \u0434\u0435\u043d\u044c 3 \u043d\u0430 \u0434\u0435\u043d\u044c 4 , \u0434\u0430\u0442\u0443 \u043a\u043e\u043c\u043c\u0438\u0442\u0430 \u0432 \u0434\u0435\u043d\u044c 4 \u2014 \u043d\u0430 \u0434\u0435\u043d\u044c 5 , \u0430 \u0434\u0430\u0442\u0443 \u043b\u044e\u0431\u043e\u0433\u043e \u0438\u0437 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432 \u0432 \u0434\u0435\u043d\u044c 6 \u2014 \u043d\u0430 \u0434\u0435\u043d\u044c 7 . \u0422\u043e\u0433\u0434\u0430 \u0432 \u043a\u0430\u0436\u0434\u044b\u0438\u0306 \u0438\u0437 \u0434\u043d\u0435\u0438\u0306 4 , 5 , 6 , 7 \u0438 8 \u0432 \u043f\u0440\u043e\u0444\u0438\u043b\u0435 \u0412\u0438\u043a\u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u043a\u043e\u043c\u043c\u0438\u0442, \u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0438\u0306 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0438\u0437 \u043f\u043e\u0434\u0440\u044f\u0434 \u0438\u0434\u0443\u0449\u0438\u0445 \u0434\u043d\u0435\u0438\u0306 \u0441 \u043a\u043e\u043c\u043c\u0438\u0442\u0430\u043c\u0438 \u2014 [ 4; 8] \u2014 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0434\u043b\u0438\u043d\u0443 5 . \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u043a\u0430\u043a \u0435\u0441\u0442\u044c, \u043b\u0438\u0431\u043e \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043a\u0430\u0436\u0434\u044b\u0438\u0306 \u043a\u043e\u043c\u043c\u0438\u0442 \u043d\u0430 \u0434\u0435\u043d\u044c \u0432\u043f\u0435\u0440\u0435\u0308\u0434. \u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u043b\u0438\u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u0434\u043d\u0435\u0438\u0306 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442 6 . \u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0412\u0438\u043a\u0430 \u0441\u0434\u0435\u043b\u0430\u043b\u0430 \u043c\u043d\u043e\u0433\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432, \u043d\u043e \u0432\u0441\u0435 \u0432 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0434\u0435\u043d\u044c \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c 10 . \u0412 \u043b\u0443\u0447\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0434\u043d\u0435\u0438\u0306 \u0434\u043e\u0441\u0442\u0438\u0433\u043d\u0435\u0442 \u0434\u043b\u0438\u043d\u044b 2 \u2014 \u0435\u0441\u043b\u0438 \u043a\u0430\u043a\u0438\u0435- \u0442\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u044b \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u0434\u0435\u043d\u044c 10 , \u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u043f\u0435\u0440\u0435\u043d\u0435\u0441\u0442\u0438 \u043d\u0430 \u0434\u0435\u043d\u044c 11 .",
    "topics": [
      "*special",
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1769C1"
  },
  {
    "title": "Wonderful Jump",
    "url": "https://codeforces.com/problemset/problem/1768/F",
    "history": "You are given an array of positive integers a_ 1, a_ 2, . . . , a_ n of length n . In one operation you can jump from index i to index j ( 1 \u2264 i \u2264 j \u2264 n ) by paying min( a_ i, a_ i + 1, . . . , a_ j) \u00b7 ( j - i) ^ 2 eris. For all k from 1 to n , find the minimum number of eris needed to get from index 1 to index k .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 4 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "Output n integers \u2014 the k - th integer is the minimum number of eris needed to reach index k if you start from index 1 .",
    "note": "In the first example: From 1 to 1 : the cost is 0 , From 1 to 2 : 1 \u2192 2 \u2014 the cost is min( 2, 1) \u00b7 ( 2 - 1) ^ 2= 1 , From 1 to 3 : 1 \u2192 2 \u2192 3 \u2014 the cost is min( 2, 1) \u00b7 ( 2 - 1) ^ 2 + min( 1, 3) \u00b7 ( 3 - 2) ^ 2 = 1 + 1 = 2 . In the fourth example from 1 to 4 : 1 \u2192 3 \u2192 4 \u2014 the cost is min( 1, 4, 4) \u00b7 ( 3 - 1) ^ 2 + min( 4, 4) \u00b7 ( 4 - 3) ^ 2 = 4 + 4 = 8 .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1768F"
  },
  {
    "title": "Lucky Permutation",
    "url": "https://codeforces.com/problemset/problem/1768/D",
    "history": "You are given a permutation ^ \u2020 p of length n . In one operation, you can choose two indices 1 \u2264 i < j \u2264 n and swap p_ i with p_ j . Find the minimum number of operations needed to have exactly one inversion ^ in the permutation. ^ \u2020 A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) , and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . ^ The number of inversions of a permutation p is the number of pairs of indices ( i, j) such that 1 \u2264 i < j \u2264 n and p_ i > p_ j .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that p is a permutation. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimum number of operations needed to have exactly one inversion in the permutation. It can be proven that an answer always exists.",
    "note": "In the first test case, the permutation already satisfies the condition. In the second test case, you can perform the operation with ( i, j) = ( 1, 2) , after that the permutation will be [ 2, 1] which has exactly one inversion. In the third test case, it is not possible to satisfy the condition with less than 3 operations. However, if we perform 3 operations with ( i, j) being ( 1, 3) , ( 2, 4) , and ( 3, 4) in that order, the final permutation will be [ 1, 2, 4, 3] which has exactly one inversion. In the fourth test case, you can perform the operation with ( i, j) = ( 2, 4) , after that the permutation will be [ 2, 1, 3, 4] which has exactly one inversion.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1768D"
  },
  {
    "title": "Elemental Decompress",
    "url": "https://codeforces.com/problemset/problem/1768/C",
    "history": "You are given an array a of n integers. Find two permutations ^ \u2020 p and q of length n such that max( p_ i, q_ i) = a_ i for all 1 \u2264 i \u2264 n or report that such p and q do not exist. ^ \u2020 A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) , and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the array a . It is guaranteed that the total sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, if there do not exist p and q that satisfy the conditions, output \" NO\" ( without quotes) . Otherwise, output \" YES\" ( without quotes) and then output 2 lines. The first line should contain n integers p_ 1, p_ 2, . . . , p_ n and the second line should contain n integers q_ 1, q_ 2, . . . , q_ n . If there are multiple solutions, you may output any of them. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "In the first test case, p= q= [ 1] . It is correct since a_ 1 = max( p_ 1, q_ 1) = 1 . In the second test case, p= [ 1, 3, 4, 2, 5] and q= [ 5, 2, 3, 1, 4] . It is correct since: a_ 1 = max( p_ 1, q_ 1) = max( 1, 5) = 5 , a_ 2 = max( p_ 2, q_ 2) = max( 3, 2) = 3 , a_ 3 = max( p_ 3, q_ 3) = max( 4, 3) = 4 , a_ 4 = max( p_ 4, q_ 4) = max( 2, 1) = 2 , a_ 5 = max( p_ 5, q_ 5) = max( 5, 4) = 5 . In the third test case, one can show that no such p and q exist.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1768C"
  },
  {
    "title": "Quick Sort",
    "url": "https://codeforces.com/problemset/problem/1768/B",
    "history": "You are given a permutation ^ \u2020 p of length n and a positive integer k \u2264 n . In one operation, you: Choose k distinct elements p_ i_ 1, p_ i_ 2, . . . , p_ i_ k . Remove them and then add them sorted in increasing order to the end of the permutation. For example, if p = [ 2, 5, 1, 3, 4] and k = 2 and you choose 5 and 3 as the elements for the operation, then [ 2, 5, 1, 3, 4] \u2192 [ 2, 1, 4, 3, 5] . Find the minimum number of operations needed to sort the permutation in increasing order. It can be proven that it is always possible to do so. ^ \u2020 A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) , and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains two integers n and k ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 n ) . The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that p is a permutation. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimum number of operations needed to sort the permutation. It can be proven that it is always possible to do so.",
    "note": "In the first test case, the permutation is already sorted. In the second test case, you can choose element 3 , and the permutation will become sorted as follows: [ 3, 1, 2] \u2192 [ 1, 2, 3] . In the third test case, you can choose elements 3 and 4 , and the permutation will become sorted as follows: [ 1, 3, 2, 4] \u2192 [ 1, 2, 3, 4] . In the fourth test case, it can be shown that it is impossible to sort the permutation in 1 operation. However, if you choose elements 2 and 1 in the first operation, and choose elements 3 and 4 in the second operation, the permutation will become sorted as follows: [ 2, 3, 1, 4] \u2192 [ 3, 4, 1, 2] \u2192 [ 1, 2, 3, 4] .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1768B"
  },
  {
    "title": "Greatest Convex",
    "url": "https://codeforces.com/problemset/problem/1768/A",
    "history": "You are given an integer k . Find the largest integer x , where 1 \u2264 x < k , such that x! + ( x - 1) ! ^ \u2020 is a multiple of ^ k , or determine that no such x exists. ^ \u2020 y! denotes the factorial of y , which is defined recursively as y! = y \u00b7 ( y- 1) ! for y \u2265 1 with the base case of 0! = 1 . For example, 5! = 5 \u00b7 4 \u00b7 3 \u00b7 2 \u00b7 1 \u00b7 0! = 120 . ^ If a and b are integers, then a is a multiple of b if there exists an integer c such that a = b \u00b7 c . For example, 10 is a multiple of 5 but 9 is not a multiple of 6 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The only line of each test case contains a single integer k ( 2 \u2264 k \u2264 10^ 9 ) .",
    "output": "For each test case output a single integer \u2014 the largest possible integer x that satisfies the conditions above. If no such x exists, output - 1 .",
    "note": "In the first test case, 2! + 1! = 2 + 1 = 3 , which is a multiple of 3 . In the third test case, 7! + 6! = 5040 + 720 = 5760 , which is a multiple of 8 .",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1768A"
  },
  {
    "title": "Playoff",
    "url": "https://codeforces.com/problemset/problem/1767/D",
    "history": "2^ n teams participate in a playoff tournament. The tournament consists of 2^ n - 1 games. They are held as follows: in the first phase of the tournament, the teams are split into pairs: team 1 plays against team 2 , team 3 plays against team 4 , and so on ( so, 2^ n- 1 games are played in that phase) . When a team loses a game, it is eliminated, and each game results in elimination of one team ( there are no ties) . After that, only 2^ n- 1 teams remain. If only one team remains, it is declared the champion; otherwise, the second phase begins, where 2^ n- 2 games are played: in the first one of them, the winner of the game \" 1 vs 2 \" plays against the winner of the game \" 3 vs 4 \" , then the winner of the game \" 5 vs 6 \" plays against the winner of the game \" 7 vs 8 \" , and so on. This process repeats until only one team remains. The skill level of the i - th team is p_ i , where p is a permutation of integers 1 , 2 , . . . , 2^ n ( a permutation is an array where each element from 1 to 2^ n occurs exactly once) . You are given a string s which consists of n characters. These characters denote the results of games in each phase of the tournament as follows: if s_ i is equal to 0, then during the i - th phase ( the phase with 2^ n- i games) , in each match, the team with the lower skill level wins; if s_ i is equal to 1, then during the i - th phase ( the phase with 2^ n- i games) , in each match, the team with the higher skill level wins. Let' s say that an integer x is winning if it is possible to find a permutation p such that the team with skill x wins the tournament. Find all winning integers.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 18 ) . The second line contains the string s of length n consisting of the characters 0 and/ or 1.",
    "output": "Print all the winning integers x in ascending order.",
    "note": "",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1767D"
  },
  {
    "title": "Block Towers",
    "url": "https://codeforces.com/problemset/problem/1767/B",
    "history": "There are n block towers, numbered from 1 to n . The i - th tower consists of a_ i blocks. In one move, you can move one block from tower i to tower j , but only if a_ i > a_ j . That move increases a_ j by 1 and decreases a_ i by 1 . You can perform as many moves as you would like ( possibly, zero) . What' s the largest amount of blocks you can have on the tower 1 after the moves?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of towers. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of blocks on each tower. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print the largest amount of blocks you can have on the tower 1 after you make any number of moves ( possibly, zero) .",
    "note": "In the first testcase, you can move a block from tower 2 to tower 1 , making the block counts [ 2, 1, 3] . Then move a block from tower 3 to tower 1 , making the block counts [ 3, 1, 2] . Tower 1 has 3 blocks in it, and you can' t obtain a larger amount. In the second testcase, you can move a block from any of towers 2 or 3 to tower 1 , so that it has 2 blocks in it. In the third testcase, you can 500000000 times move a block from tower 2 to tower 1 . After that the block countes will be [ 500000001, 500000000] .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1767B"
  },
  {
    "title": "Number Reduction",
    "url": "https://codeforces.com/problemset/problem/1765/N",
    "history": "You are given a positive integer x . You can apply the following operation to the number: remove one occurrence of any digit in such a way that the resulting number does not contain any leading zeroes and is still a positive integer. For example, 10142 can be converted to 1142 , 1042 , 1012 or 1014 ( note that 0142 is not a valid outcome) ; 10 can be converted to 1 ( but not to 0 since it is not positive) . Your task is to find the minimum positive integer that you can obtain from x if you can apply the aforementioned operation exactly k times.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer x ( 1 \u2264 x < 10^ 500000 ) . The second line contains a single integer k ( 0 \u2264 k < | x| ) , where | x| is the length of the number x . The sum of | x| over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum positive number that you can obtain from x if you can apply the operation exactly k times.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1765N"
  },
  {
    "title": "Torus Path",
    "url": "https://codeforces.com/problemset/problem/1765/K",
    "history": "You are given a square grid with n rows and n columns, where each cell has a non- negative integer written in it. There is a chip initially placed at the top left cell ( the cell with coordinates ( 1, 1) ) . You need to move the chip to the bottom right cell ( the cell with coordinates ( n, n) ) . In one step, you can move the chip to the neighboring cell, but: you can move only right or down. In other words, if the current cell is ( x, y) , you can move either to ( x, y + 1) or to ( x + 1, y) . There are two special cases: if the chip is in the last column ( cell ( x, n) ) and you' re moving right, you' ll teleport to the first column ( to the cell ( x, 1) ) ; if the chip is in the last row ( cell ( n, y) ) and you' re moving down, you' ll teleport to the first row ( to the cell ( 1, y) ) . you cannot visit the same cell twice. The starting cell is counted visited from the beginning ( so you cannot enter it again) , and you can' t leave the finishing cell once you visit it. Your total score is counted as the sum of numbers in all cells you have visited. What is the maximum possible score you can achieve?",
    "input": "The first line contains the single integer n ( 2 \u2264 n \u2264 200 ) \u2014 the number of rows and columns in the grid. Next n lines contains the description of each row of the grid. The i - th line contains n integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 0 \u2264 a_ i, j\u2264 10^ 9 ) where a_ i, j is the number written in the cell ( i, j) .",
    "output": "Print one integer \u2014 the maximum possible score you can achieve.",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1765K"
  },
  {
    "title": "Hospital Queue",
    "url": "https://codeforces.com/problemset/problem/1765/H",
    "history": "There are n people ( numbered from 1 to n ) signed up for a doctor' s appointment. The doctor has to choose in which order he will appoint these people. The i - th patient should be appointed among the first p_ i people. There are also m restrictions of the following format: the i - th restriction is denoted by two integers ( a_ i, b_ i) and means that the patient with the index a_ i should be appointed earlier than the patient with the index b_ i . For example, if n = 4 , p = [ 2, 3, 2, 4] , m = 1 , a = [ 3] and b = [ 1] , then the only order of appointment of patients that does not violate the restrictions is [ 3, 1, 2, 4] . For n = 3 , p = [ 3, 3, 3] , m = 0 , a = [ ] and b = [ ] , any order of appointment is valid. For each patient, calculate the minimum position in the order that they can have among all possible orderings that don' t violate the restrictions.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 2000 ; 0 \u2264 m \u2264 2000 ) . The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . Then m lines follow. The i - th of them contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ; a_ i b_ i ) . All pairs of ( a_ i, b_ i) are distinct ( i. e. if i j , then either a_ i a_ j , b_ i b_ j , or both) . Additional constraint on the input: there is at least one valid order of patients.",
    "output": "Print n integers, where i - th integer is equal to the minimum position of i - th patient in the order, among all valid orders. Positions in the order are numbered from 1 to n .",
    "note": "In the first example, [ 3, 1, 2, 4] the only one valid order, so the minimum position of each patient is equal to their position in this order. In the second example, any order is valid, so any patient can be appointed first. In the third example, there are three valid orders: [ 4, 2, 3, 1, 5] , [ 3, 4, 2, 1, 5] and [ 4, 3, 2, 1, 5] .",
    "topics": [
      "binary search",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1765H"
  },
  {
    "title": "Broken Keyboard",
    "url": "https://codeforces.com/problemset/problem/1765/B",
    "history": "Recently, Mishka started noticing that his keyboard malfunctions \u2014 maybe it' s because he was playing rhythm games too much. Empirically, Mishka has found out that every other time he presses a key, it is registered as if the key was pressed twice. For example, if Mishka types text, the first time he presses a key, exactly one letter is printed; the second time he presses a key, two same letters are printed; the third time he presses a key, one letter is printed; the fourth time he presses a key, two same letters are printed, and so on. Note that the number of times a key was pressed is counted for the whole keyboard, not for each key separately. For example, if Mishka tries to type the word osu, it will be printed on the screen as ossu. You are given a word consisting of n lowercase Latin letters. You have to determine if it can be printed on Mishka' s keyboard or not. You may assume that Mishka cannot delete letters from the word, and every time he presses a key, the new letter ( or letters) is appended to the end of the word.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the word. The second line of the test case contains a string s consisting of n lowercase Latin letters \u2014 the word that should be checked.",
    "output": "For each test case, print YES if the word s can be printed on Mishka' s keyboard, and NO otherwise.",
    "note": "In the first test case, Mishka can type the word as follows: press o ( one letter o appears at the end of the word) , then presses s ( two letters s appear at the end of the word) , and, finally, press u ( one letter appears at the end of the word, making the resulting word ossu) . In the second test case, Mishka can try typing the word as follows: press a ( one letter a appears at the end of the word) . But if he tries to press a one more time, two letters a will appear at the end of the word, so it is impossible to print the word using his keyboard. In the fourth test case, Mishka has to start by pressing q. Then, if he presses w, two copies of w will appear at the end of the word, but the third letter should be e instead of w, so the answer is NO.",
    "topics": [
      "greedy"
    ],
    "id": "1765B"
  },
  {
    "title": "Doremy's Number Line",
    "url": "https://codeforces.com/problemset/problem/1764/E",
    "history": "Doremy has two arrays a and b of n integers each, and an integer k . Initially, she has a number line where no integers are colored. She chooses a permutation p of [ 1, 2, . . . , n] then performs n moves. On the i - th move she does the following: Pick an uncolored integer x on the number line such that either: x \u2264 a_ p_ i ; or there exists a colored integer y such that y \u2264 a_ p_ i and x \u2264 y+ b_ p_ i . Color integer x with color p_ i . Determine if the integer k can be colored with color 1 .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line contains two integers n and k ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) . Each of the following n lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output \" YES\" ( without quotes) if the point k can be colored with color 1 . Otherwise, output \" NO\" ( without quotes) . You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "For the first test case, it is impossible to color point 16 with color 1 . For the second test case, p= [ 2, 1, 3, 4] is one possible choice, the detail is shown below. On the first move, pick x= 8 and color it with color 2 since x= 8 is uncolored and x \u2264 a_ 2 . On the second move, pick x= 16 and color it with color 1 since there exists a colored point y= 8 such that y\u2264 a_ 1 and x \u2264 y + b_ 1 . On the third move, pick x= 0 and color it with color 3 since x= 0 is uncolored and x \u2264 a_ 3 . On the forth move, pick x= - 2 and color it with color 4 since x= - 2 is uncolored and x \u2264 a_ 4 . In the end, point - 2, 0, 8, 16 are colored with color 4, 3, 2, 1 , respectively. For the third test case, p= [ 2, 1, 4, 3] is one possible choice. For the fourth test case, p= [ 2, 3, 4, 1] is one possible choice.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1764E"
  },
  {
    "title": "Doremy's City Construction",
    "url": "https://codeforces.com/problemset/problem/1764/C",
    "history": "Doremy' s new city is under construction! The city can be regarded as a simple undirected graph with n vertices. The i - th vertex has altitude a_ i . Now Doremy is deciding which pairs of vertices should be connected with edges. Due to economic reasons, there should be no self- loops or multiple edges in the graph. Due to safety reasons, there should not be pairwise distinct vertices u , v , and w such that a_ u \u2264 a_ v \u2264 a_ w and the edges ( u, v) and ( v, w) exist. Under these constraints, Doremy would like to know the maximum possible number of edges in the graph. Can you help her? Note that the constructed graph is allowed to be disconnected.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the number of vertices. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 10^ 6 ) \u2014 the altitudes of each vertex. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the maximum possible number of edges in the graph.",
    "note": "In the first test case, there can only be at most 3 edges in the graph. A possible construction is to connect ( 1, 3) , ( 2, 3) , ( 3, 4) . In the picture below the red number above node i is a_ i . The following list shows all such u , v , w that the edges ( u, v) and ( v, w) exist. u= 1 , v= 3 , w= 2 ; u= 1 , v= 3 , w= 4 ; u= 2 , v= 3 , w= 1 ; u= 2 , v= 3 , w= 4 ; u= 4 , v= 3 , w= 1 ; u= 4 , v= 3 , w= 2 . Another possible construction is to connect ( 1, 4) , ( 2, 4) , ( 3, 4) . An unacceptable construction is to connect ( 1, 3) , ( 2, 3) , ( 2, 4) , ( 3, 4) . Because when u= 4 , v= 2 , w= 3 , a_ u\u2264 a_ v \u2264 a_ w holds, and the respective edges exist.",
    "topics": [
      "graphs",
      "greedy"
    ],
    "id": "1764C"
  },
  {
    "title": "Doremy's Paint",
    "url": "https://codeforces.com/problemset/problem/1764/A",
    "history": "Doremy has n buckets of paint which is represented by an array a of length n . Bucket i contains paint with color a_ i . Let c( l, r) be the number of distinct elements in the subarray [ a_ l, a_ l+ 1, . . . , a_ r] . Choose 2 integers l and r such that l \u2264 r and r- l- c( l, r) is maximized.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guaranteed that the sum of n does not exceed 10^ 5 .",
    "output": "For each test case, output l and r such that l \u2264 r and r- l- c( l, r) is maximized. If there are multiple solutions, you may output any.",
    "note": "In the first test case, a= [ 1, 3, 2, 2, 4] . When l= 1 and r= 3 , c( l, r) = 3 ( there are 3 distinct elements in [ 1, 3, 2] ) . When l= 2 and r= 4 , c( l, r) = 2 ( there are 2 distinct elements in [ 3, 2, 2] ) . It can be shown that choosing l= 2 and r= 4 maximizes the value of r- l- c( l, r) at 0 . For the second test case, a= [ 1, 2, 3, 4, 5] . When l= 1 and r= 5 , c( l, r) = 5 ( there are 5 distinct elements in [ 1, 2, 3, 4, 5] ) . When l= 3 and r= 3 , c( l, r) = 1 ( there is 1 distinct element in [ 3] ) . It can be shown that choosing l= 1 and r= 5 maximizes the value of r- l- c( l, r) at - 1 . Choosing l= 3 and r= 3 is also acceptable.",
    "topics": [
      "greedy"
    ],
    "id": "1764A"
  },
  {
    "title": "Another Array Problem",
    "url": "https://codeforces.com/problemset/problem/1763/C",
    "history": "You are given an array a of n integers. You are allowed to perform the following operation on it as many times as you want ( 0 or more times) : Choose 2 indices i , j where 1 \u2264 i < j \u2264 n and replace a_ k for all i \u2264 k \u2264 j with | a_ i - a_ j| Print the maximum sum of all the elements of the final array that you can obtain in such a way.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of array a . It' s guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the sum of the final array.",
    "note": "In the first test case, it is not possible to achieve a sum > 3 by using these operations, therefore the maximum sum is 3 . In the second test case, it can be shown that the maximum sum achievable is 16 . By using operation ( 1, 2) we transform the array from [ 9, 1] into [ 8, 8] , thus the sum of the final array is 16 . In the third test case, it can be shown that it is not possible to achieve a sum > 18 by using these operations, therefore the maximum sum is 18 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1763C"
  },
  {
    "title": "Absolute Maximization",
    "url": "https://codeforces.com/problemset/problem/1763/A",
    "history": "You are given an array a of length n . You can perform the following operation several ( possibly, zero) times: Choose i , j , b : Swap the b - th digit in the binary representation of a_ i and a_ j . Find the maximum possible value of max( a) - min( a) . In a binary representation, bits are numbered from right ( least significant) to left ( most significant) . Consider that there are an infinite number of leading zero bits at the beginning of any binary representation. For example, swap the 0 - th bit for 4= 100_ 2 and 3= 11_ 2 will result 101_ 2= 5 and 10_ 2= 2 . Swap the 2 - nd bit for 4= 100_ 2 and 3= 11_ 2 will result 000_ 2= 0_ 2= 0 and 111_ 2= 7 . Here, max( a) denotes the maximum element of array a and min( a) denotes the minimum element of array a . The binary representation of x is x written in base 2 . For example, 9 and 6 written in base 2 are 1001 and 110 , respectively.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 128 ) \u2014 the number of testcases. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 512 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 1024 ) \u2014 the elements of array a . It' s guaranteed that the sum of n over all testcases does not exceed 512 .",
    "output": "For each testcase, print one integer \u2014 the maximum possible value of max( a) - min( a) .",
    "note": "In the first example, it can be shown that we do not need to perform any operations \u2014 the maximum value of max( a) - min( a) is 1 - 0 = 1 . In the second example, no operation can change the array \u2014 the maximum value of max( a) - min( a) is 5 - 5 = 0 . In the third example, initially a = [ 1, 2, 3, 4, 5] , we can perform one operation taking i = 2 , j = 5 , b = 1 . The array now becomes a = [ 1, 0, 3, 4, 7] . It can be shown that any further operations do not lead to a better answer \u2014 therefore the answer is max( a) - min( a) = 7 - 0 = 7 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1763A"
  },
  {
    "title": "Divide and Conquer",
    "url": "https://codeforces.com/problemset/problem/1762/A",
    "history": "An array b is good if the sum of elements of b is even. You are given an array a consisting of n positive integers. In one operation, you can select an index i and change a_ i : = \u230aa_ i/ 2\u230b . ^ \u2020 Find the minimum number of operations ( possibly 0 ) needed to make a good. It can be proven that it is always possible to make a good. ^ \u2020 \u230a x \u230b denotes the floor function \u2014 the largest integer less than or equal to x . For example, \u230a 2. 7 \u230b = 2 , \u230a\u03c0\u230b = 3 and \u230a 5 \u230b = 5 .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of the array a . The second line of each test case contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 representing the array a . Do note that the sum of n over all test cases is not bounded.",
    "output": "For each test case, output the minimum number of operations needed to make a good.",
    "note": "In the first test case, array a is already good. In the second test case, we can perform on index 2 twice. After the first operation, array a becomes [ 7, 2] . After performing on index 2 again, a becomes [ 7, 1] , which is good. It can be proved that it is not possible to make a good in less number of operations. In the third test case, a becomes [ 0, 2, 4] if we perform the operation on index 1 once. As [ 0, 2, 4] is good, answer is 1 . In the fourth test case, we need to perform the operation on index 1 four times. After all operations, a becomes [ 0] . It can be proved that it is not possible to make a good in less number of operations.",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1762A"
  },
  {
    "title": "Make It Connected",
    "url": "https://codeforces.com/problemset/problem/1761/E",
    "history": "You are given a simple undirected graph consisting of n vertices. The graph doesn' t contain self- loops, there is at most one edge between each pair of vertices. Your task is simple: make the graph connected. You can do the following operation any number of times ( possibly zero) : Choose a vertex u arbitrarily. For each vertex v satisfying v u in the graph individually, if v is adjacent to u , remove the edge between u and v , otherwise add an edge between u and v . Find the minimum number of operations required to make the graph connected. Also, find any sequence of operations with the minimum length that makes the graph connected.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 800 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 2\u2264 n\u2264 4000 ) \u2014 the number of vertices in the graph. Then n lines follow. The i - th row contains a binary string s_ i of length n , where s_ i, j is ' 1' if there is an edge between vertex i and j initially, otherwise s_ i, j is ' 0' . It is guaranteed that s_ i, i is always ' 0' and s_ i, j= s_ j, i for 1\u2264 i, j\u2264 n . It is guaranteed that the sum of n over all test cases does not exceed 4000 .",
    "output": "For each test case, in the first line, output an integer m \u2014 the minimum number of operations required. If m is greater than zero, then print an extra line consisting of m integers \u2014 the vertices chosen in the operations in your solution. If there are multiple solutions with the minimum number of operations, print any.",
    "note": "In the first test case, the graph is connected at the beginning, so the answer is 0 . In the second test case, if we do the operation with vertex 1 , we will get the following graph represented by an adjacency matrix: [ 0 1 1; 1 0 1; 1 1 0 ] It' s obvious that the graph above is connected. In the third test case, if we do the operation with vertex 3 and 4 , we will get the following graph represented by an adjacency matrix: [ 0 1 1 1; 1 0 1 1; 1 1 0 1; 1 1 1 0 ] It' s obvious that the graph above is connected, and it can be proven that we can' t perform less than 2 operations to make the graph connected.",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "matrices",
      "trees",
      "two pointers"
    ],
    "id": "1761E"
  },
  {
    "title": "Set Construction",
    "url": "https://codeforces.com/problemset/problem/1761/C",
    "history": "You are given a binary matrix b ( all elements of the matrix are 0 or 1 ) of n rows and n columns. You need to construct a n sets A_ 1, A_ 2, . . . , A_ n , for which the following conditions are satisfied: Each set is nonempty and consists of distinct integers between 1 and n inclusive. All sets are distinct. For all pairs ( i, j) satisfying 1\u2264 i, j\u2264 n , b_ i, j= 1 if and only if A_ i\u228a A_ j . In other words, b_ i, j is 1 if A_ i is a proper subset of A_ j and 0 otherwise. Set X is a proper subset of set Y , if X is a nonempty subset of Y , and X = \u0338 Y . It' s guaranteed that for all test cases in this problem, such n sets exist. Note that it doesn' t mean that such n sets exist for all possible inputs. If there are multiple solutions, you can output any of them.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line contains a single integer n ( 1\u2264 n\u2264 100 ) . The following n lines contain a binary matrix b , the j - th character of i - th line denotes b_ i, j . It is guaranteed that the sum of n over all test cases does not exceed 1000 . It' s guaranteed that for all test cases in this problem, such n sets exist.",
    "output": "For each test case, output n lines. For the i - th line, first output s_ i ( 1 \u2264 s_ i \u2264 n) \u2014 the size of the set A_ i . Then, output s_ i distinct integers from 1 to n \u2014 the elements of the set A_ i . If there are multiple solutions, you can output any of them. It' s guaranteed that for all test cases in this problem, such n sets exist.",
    "note": "In the first test case, we have A_ 1 = { 1, 2, 3} , A_ 2 = { 1, 3} , A_ 3 = { 2, 4} , A_ 4 = { 1, 2, 3, 4} . Sets A_ 1, A_ 2, A_ 3 are proper subsets of A_ 4 , and also set A_ 2 is a proper subset of A_ 1 . No other set is a proper subset of any other set. In the second test case, we have A_ 1 = { 1} , A_ 2 = { 1, 2} , A_ 3 = { 1, 2, 3} . A_ 1 is a proper subset of A_ 2 and A_ 3 , and A_ 2 is a proper subset of A_ 3 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1761C"
  },
  {
    "title": "Elimination of a Ring",
    "url": "https://codeforces.com/problemset/problem/1761/B",
    "history": "Define a cyclic sequence of size n as an array s of length n , in which s_ n is adjacent to s_ 1 . Muxii has a ring represented by a cyclic sequence a of size n . However, the ring itself hates equal adjacent elements. So if two adjacent elements in the sequence are equal at any time, one of them will be erased immediately. The sequence doesn' t contain equal adjacent elements initially. Muxii can perform the following operation until the sequence becomes empty: Choose an element in a and erase it. For example, if ring is [ 1, 2, 4, 2, 3, 2] , and Muxii erases element 4 , then ring would erase one of the elements equal to 2 , and the ring will become [ 1, 2, 3, 2] . Muxii wants to find the maximum number of operations he could perform. Note that in a ring of size 1 , its only element isn' t considered adjacent to itself ( so it' s not immediately erased) .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 100 ) \u2014 the size of the cyclic sequence. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 n ) \u2014 the sequence itself. It' s guaranteed that a_ i a_ i+ 1 for 1\u2264 i< n . It' s guaranteed that a_ n a_ 1 when n> 1 .",
    "output": "For each test case, output a single integer \u2014 the maximum number of operations Muxii can perform.",
    "note": "In the first test case, you can erase the second element first, then erase the remaining elements one by one in any order. In total, you can perform the operation 4 times. Note that if you erase the first element first, then the sequence will be turned into [ 2, 3, 2] and then immediately become [ 2, 3] . In the second test case, you can erase the first element first, then the sequence becomes [ 2, 1] . Then you can erase all remaining elements one by one in any order.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1761B"
  },
  {
    "title": "Quests",
    "url": "https://codeforces.com/problemset/problem/1760/F",
    "history": "There are n quests. If you complete the i - th quest, you will gain a_ i coins. You can only complete at most one quest per day. However, once you complete a quest, you cannot do the same quest again for k days. ( For example, if k= 2 and you do quest 1 on day 1 , then you cannot do it on day 2 or 3 , but you can do it again on day 4 . ) You are given two integers c and d . Find the maximum value of k such that you can gain at least c coins over d days. If no such k exists, output Impossible. If k can be arbitrarily large, output Infinity.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains three integers n, c, d ( 2 \u2264 n \u2264 2\u00b710^ 5 ; 1 \u2264 c \u2264 10^ 16 ; 1 \u2264 d \u2264 2\u00b710^ 5 ) \u2014 the number of quests, the number of coins you need, and the number of days. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the rewards for the quests. The sum of n over all test cases does not exceed 2\u00b710^ 5 , and the sum of d over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output one of the following. If no such k exists, output Impossible. If k can be arbitrarily large, output Infinity. Otherwise, output a single integer \u2014 the maximum value of k such that you can gain at least c coins over d days. Please note, the checker is case- sensitive, and you should output strings exactly as they are given.",
    "note": "In the first test case, one way to earn 5 coins over 4 days with k= 2 is as follows: Day 1: do quest 2, and earn 2 coins. Day 2: do quest 1, and earn 1 coin. Day 3: do nothing. Day 4: do quest 2, and earn 2 coins. In total, we earned 2+ 1+ 2= 5 coins. In the second test case, we can make over 20 coins on the first day itself by doing the first quest to earn 100 coins, so the value of k can be arbitrarily large, since we never need to do another quest. In the third test case, no matter what we do, we can' t earn 100 coins over 3 days.",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1760F"
  },
  {
    "title": "Binary Inversions",
    "url": "https://codeforces.com/problemset/problem/1760/E",
    "history": "You are given a binary array ^ \u2020 of length n . You are allowed to perform one operation on it at most once. In an operation, you can choose any element and flip it: turn a 0 into a 1 or vice- versa. What is the maximum number of inversions ^ the array can have after performing at most one operation? ^ \u2020 A binary array is an array that contains only zeroes and ones. ^ The number of inversions in an array is the number of pairs of indices i, j such that i< j and a_ i > a_ j .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the array. The following line contains n space- separated positive integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output a single integer \u2014 the maximum number of inversions the array can have after performing at most one operation.",
    "note": "For the first test case, the inversions are initially formed by the pairs of indices ( 1, 2 ) , ( 1, 4 ) , ( 3, 4 ) , being a total of 3 , which already is the maximum possible. For the second test case, the inversions are initially formed by the pairs of indices ( 2, 3 ) , ( 2, 4 ) , ( 2, 6 ) , ( 5, 6 ) , being a total of four. But, by flipping the first element, the array becomes 1, 1, 0, 0, 1, 0 , which has the inversions formed by the pairs of indices ( 1, 3 ) , ( 1, 4 ) , ( 1, 6 ) , ( 2, 3 ) , ( 2, 4 ) , ( 2, 6 ) , ( 5, 6 ) which total to 7 inversions which is the maximum possible.",
    "topics": [
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1760E"
  },
  {
    "title": "Atilla's Favorite Problem",
    "url": "https://codeforces.com/problemset/problem/1760/B",
    "history": "In order to write a string, Atilla needs to first learn all letters that are contained in the string. Atilla needs to write a message which can be represented as a string s . He asks you what is the minimum alphabet size required so that one can write this message. The alphabet of size x ( 1 \u2264 x \u2264 26 ) contains only the first x Latin letters. For example an alphabet of size 4 contains only the characters , , and .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the string. The second line of each test case contains a string s of length n , consisting of lowercase Latin letters.",
    "output": "For each test case, output a single integer \u2014 the minimum alphabet size required to so that Atilla can write his message s .",
    "note": "For the first test case, Atilla needs to know only the character , so the alphabet of size 1 which only contains is enough. For the second test case, Atilla needs to know the characters , , , . The smallest alphabet size that contains all of them is 23 ( such alphabet can be represented as the string ) .",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1760B"
  },
  {
    "title": "Restore the Permutation",
    "url": "https://codeforces.com/problemset/problem/1759/G",
    "history": "A sequence of n numbers is called permutation if it contains all numbers from 1 to n exactly once. For example, the sequences [ 3, 1, 4, 2 ] , [ 1 ] and [ 2, 1 ] are permutations, but [ 1, 2, 1 ] , [ 0, 1 ] and [ 1, 3, 4 ] \u2014 are not. For a permutation p of even length n you can make an array b of length n/ 2 such that: b_ i = max( p_ 2i - 1, p_ 2i) for 1 \u2264 i \u2264n/ 2 For example, if p = [ 2, 4, 3, 1, 5, 6 ] , then: b_ 1 = max( p_ 1, p_ 2) = max( 2, 4) = 4 b_ 2 = max( p_ 3, p_ 4) = max( 3, 1) = 3 b_ 3 = max( p_ 5, p_ 6) = max( 5, 6) = 6 As a result, we made b = [ 4, 3, 6] . For a given array b , find the lexicographically minimal permutation p such that you can make the given array b from it. If b = [ 4, 3, 6 ] , then the lexicographically minimal permutation from which it can be made is p = [ 1, 4, 2, 3, 5, 6 ] , since: b_ 1 = max( p_ 1, p_ 2) = max( 1, 4) = 4 b_ 2 = max( p_ 3, p_ 4) = max( 2, 3) = 3 b_ 3 = max( p_ 5, p_ 6) = max( 5, 6) = 6 A permutation x_ 1, x_ 2, . . . , x_ n is lexicographically smaller than a permutation y_ 1, y_ 2 . . . , y_ n if and only if there exists such i ( 1 \u2264 i \u2264 n ) that x_ 1= y_ 1, x_ 2= y_ 2, . . . , x_ i- 1= y_ i- 1 and x_ i< y_ i .",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains one even integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains exactly n/ 2 integers b_ i ( 1 \u2264 b_ i \u2264 n ) \u2014 elements of array b . It is guaranteed that the sum of n values over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on a separate line: lexicographically minimal permutation p such that you can make an array b from it; or a number - 1 if the permutation you are looking for does not exist.",
    "note": "The first test case is parsed in the problem statement.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1759G"
  },
  {
    "title": "All Possible Digits",
    "url": "https://codeforces.com/problemset/problem/1759/F",
    "history": "A positive number x of length n in base p ( 2 \u2264 p \u2264 10^ 9 ) is written on the blackboard. The number x is given as a sequence a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < p ) \u2014 the digits of x in order from left to right ( most significant to least significant) . Dmitry is very fond of all the digits of this number system, so he wants to see each of them at least once. In one operation, he can: take any number x written on the board, increase it by 1 , and write the new value x + 1 on the board. For example, p= 5 and x= 234_ 5 . Initially, the board contains the digits 2 , 3 and 4 ; Dmitry increases the number 234_ 5 by 1 and writes down the number 240_ 5 . On the board there are digits 0, 2, 3, 4 ; Dmitry increases the number 240_ 5 by 1 and writes down the number 241_ 5 . Now the board contains all the digits from 0 to 4 . Your task is to determine the minimum number of operations required to make all the digits from 0 to p- 1 appear on the board at least once.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 3 ) \u2014 the number of test cases. The descriptions of the input test cases follow. The first line of description of each test case contains two integers n ( 1 \u2264 n \u2264 100 ) and p ( 2 \u2264 p \u2264 10^ 9 ) \u2014 the length of the number and the base of the number system. The second line of the description of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < p ) \u2014 digits of x in number system with base p It is guaranteed that the number x does not contain leading zeros ( that is, a_ 1> 0 ) .",
    "output": "For each test case print a single integer \u2014 the minimum number of operations required for Dmitry to get all the digits on the board from 0 to p- 1 . It can be shown that this always requires a finite number of operations.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1759F"
  },
  {
    "title": "Thermostat",
    "url": "https://codeforces.com/problemset/problem/1759/C",
    "history": "Vlad came home and found out that someone had reconfigured the old thermostat to the temperature of a . The thermostat can only be set to a temperature from l to r inclusive, the temperature cannot change by less than x . Formally, in one operation you can reconfigure the thermostat from temperature a to temperature b if | a - b| \u2265 x and l \u2264 b \u2264 r . You are given l , r , x , a and b . Find the minimum number of operations required to get temperature b from temperature a , or say that it is impossible.",
    "input": "The first line of input data contains the single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The descriptions of the test cases follow. The first line of each case contains three integers l , r and x ( - 10^ 9 \u2264 l \u2264 r \u2264 10^ 9 , 1 \u2264 x \u2264 10^ 9 ) \u2014 range of temperature and minimum temperature change. The second line of each case contains two integers a and b ( l \u2264 a, b \u2264 r ) \u2014 the initial and final temperatures.",
    "output": "Output t numbers, each of which is the answer to the corresponding test case. If it is impossible to achieve the temperature b , output - 1, otherwise output the minimum number of operations.",
    "note": "In the first example, the thermostat is already set up correctly. In the second example, you can achieve the desired temperature as follows: 4 \u2192 10 \u2192 5 . In the third example, you can achieve the desired temperature as follows: 3 \u2192 8 \u2192 2 \u2192 7 . In the fourth test, it is impossible to make any operation.",
    "topics": [
      "greedy",
      "math",
      "shortest paths"
    ],
    "id": "1759C"
  },
  {
    "title": "Almost All Multiples",
    "url": "https://codeforces.com/problemset/problem/1758/C",
    "history": "Given two integers n and x , a permutation ^ \u2020 p of length n is called funny if p_ i is a multiple of i for all 1 \u2264 i \u2264 n - 1 , p_ n = 1 , and p_ 1 = x . Find the lexicographically minimal ^ funny permutation, or report that no such permutation exists. ^ \u2020 A permutation of length n is an array consisting of each of the integers from 1 to n exactly once. ^ Let a and b be permutations of length n . Then a is lexicographically smaller than b if in the first position i where a and b differ, a_ i < b_ i . A permutation is lexicographically minimal if it is lexicographically smaller than all other permutations.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The only line of each test case contains two integers n and x ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 < x \u2264 n ) . The sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, if the answer exists, output n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the lexicographically minimal funny permutation p . Otherwise, output - 1 .",
    "note": "In the first test case, the permutation [ 3, 2, 1] satisfies all the conditions: p_ 1= 3 , p_ 3= 1 , and: p_ 1= 3 is a multiple of 1 . p_ 2= 2 is a multiple of 2 . In the second test case, the permutation [ 2, 4, 3, 1] satisfies all the conditions: p_ 1= 2 , p_ 4= 1 , and: p_ 1= 2 is a multiple of 1 . p_ 2= 4 is a multiple of 2 . p_ 3= 3 is a multiple of 3 . We can show that these permutations are lexicographically minimal. No such permutations exist in the third test case.",
    "topics": [
      "greedy",
      "number theory"
    ],
    "id": "1758C"
  },
  {
    "title": "Kevin and Permutation",
    "url": "https://codeforces.com/problemset/problem/1754/B",
    "history": "For his birthday, Kevin received the set of pairwise distinct numbers 1, 2, 3, . . . , n as a gift. He is going to arrange these numbers in a way such that the minimum absolute difference between two consecutive numbers be maximum possible. More formally, if he arranges numbers in order p_ 1, p_ 2, . . . , p_ n , he wants to maximize the value min_ i= 1^ n - 1| p_ i + 1 - p_ i | , where | x| denotes the absolute value of x . Help Kevin to do that.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The only line of each test case contains an integer n ( 2 \u2264 n \u2264 1 000 ) \u2014 the size of the set.",
    "output": "For each test case print a single line containing n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) describing the arrangement that maximizes the minimum absolute difference of consecutive elements. Formally, you have to print a permutation p which maximizes the value min_ i= 1^ n - 1| p_ i + 1 - p_ i | . If there are multiple optimal solutions, print any of them.",
    "note": "In the first test case the minimum absolute difference of consecutive elements equals min{ | 4 - 2 | , | 1 - 4 | , | 3 - 1 | } = min{ 2, 3, 2} = 2 . It' s easy to prove that this answer is optimal. In the second test case each permutation of numbers 1, 2, 3 is an optimal answer. The minimum absolute difference of consecutive elements equals to 1 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1754B"
  },
  {
    "title": "Technical Support",
    "url": "https://codeforces.com/problemset/problem/1754/A",
    "history": "You work in the quality control department of technical support for a large company. Your job is to make sure all client issues have been resolved. Today you need to check a copy of a dialog between a client and a technical support manager. According to the rules of work, each message of the client must be followed by one or several messages, which are the answer of a support manager. However, sometimes clients ask questions so quickly that some of the manager' s answers to old questions appear after the client has asked some new questions. Due to the privacy policy, the full text of messages is not available to you, only the order of messages is visible, as well as the type of each message: a customer question or a response from the technical support manager. It is guaranteed that the dialog begins with the question of the client. You have to determine, if this dialog may correspond to the rules of work described above, or the rules are certainly breached.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 500 ) . Description of the test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the total number of messages in the dialog. The second line of each test case consists of n characters \" Q\" and \" A\" , describing types of messages in the dialog in chronological order. Character \" Q\" denotes the message with client question, and character \" A\" \u2014 the message with technical support manager answer. It is guaranteed that the first character in the line equals to \" Q\" .",
    "output": "For each test case print \" Yes\" ( without quotes) if dialog may correspond to the rules of work, or \" No\" ( without quotes) otherwise.",
    "note": "In the first test case the two questions from the client are followed with two specialist' s answers. So this dialog may correspond to the rules of work. In the second test case one of the first two questions was not answered. In the third test case the technical support manager sent two messaged as the answer to the only message of the client.",
    "topics": [
      "greedy"
    ],
    "id": "1754A"
  },
  {
    "title": "N Machines",
    "url": "https://codeforces.com/problemset/problem/1753/E",
    "history": "You have been invited as a production process optimization specialist to some very large company. The company has n machines at its factory, standing one behind another in the production chain. Each machine can be described in one of the following two ways: ( + , a_ i) or ( * , a_ i) . If a workpiece with the value x is supplied to the machine of kind ( + , a_ i) , then the output workpiece has value x + a_ i . If a workpiece with the value x is supplied to the machine of kind ( * , a_ i) , then the output workpiece has value x \u00b7 a_ i . The whole production process is as follows. The workpiece with the value 1 is supplied to the first machine, then the workpiece obtained after the operation of the first machine is supplied to the second machine, then the workpiece obtained after the operation of the second machine is supplied to the third machine, and so on. The company is not doing very well, so now the value of the resulting product does not exceed 2 \u00b7 10^ 9 . The directors of the company are not satisfied with the efficiency of the production process and have given you a budget of b coins to optimize it. To optimize production you can change the order of machines in the chain. Namely, by spending p coins, you can take any machine of kind ( + , a_ i) and move it to any place in the chain without changing the order of other machines. Also, by spending m coins, you can take any machine of kind ( * , a_ i) and move it to any place in the chain. What is the maximum value of the resulting product that can be achieved if the total cost of movements that are made should not exceed b coins?",
    "input": "The first line contains four integers n , b , p and m ( 1 \u2264 n \u2264 10^ 6 , 1 \u2264 b, p, m \u2264 10^ 9 ) \u2014 the number of machine at the factory, your budget and costs of movements of both kinds of machines. Each of the following n lines contains description of a machine. The description begins with one of the following characters: \" + \" or \" * \" , that denotes the kind of the machine. Then an integer a_ i follows ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 9 ) . It' s guaranteed that the current value of the resulting product does not exceed 2 \u00b7 10^ 9 .",
    "output": "Print one integer \u2014 the maximum value of the resulting product that can be achieved if the total cost of movements that are made does not exceed b coins.",
    "note": "In the first example our budget is too low to move machine ( * , 2) , but we can move both machines ( + , 1) to the beginning of the chain. So the final chain will be ( + , 1) ( + , 1) ( * , 2) . If the workpiece with the value 1 is supplied to the first machine, its value will be changed in the following way: 1, 2, 3, 6 . In the second example we can move only one machine. Let' s move machine ( + , 2) to the beginning of the chain. The final chain will be ( + , 2) ( * , 2) ( + , 1) ( * , 3) . The value of the workpiece will be changed in the following way: 1, 3, 6, 7, 21 . In the third example we can place machine ( * , 4) before the machine ( * , 5) , and move machine ( + , 3) to the beginning of the chain. The final chain will be ( + , 3) ( * , 2) ( + , 1) ( + , 1) ( + , 1) ( + , 1) ( * , 4) ( * , 5) . The value of the workpiece will be changed in the following way: 1, 4, 8, 9, 10, 11, 12, 48, 240 .",
    "topics": [
      "binary search",
      "brute force",
      "greedy"
    ],
    "id": "1753E"
  },
  {
    "title": "Make Nonzero Sum (hard version)",
    "url": "https://codeforces.com/problemset/problem/1753/A2",
    "history": "This is the hard version of the problem. The difference is that in this version the array contains zeros. You can make hacks only if both versions of the problem are solved. You are given an array [ a_ 1, a_ 2, . . . a_ n] consisting of integers - 1 , 0 and 1 . You have to build a partition of this array into the set of segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ k, r_ k] with the following property: Denote the alternating sum of all elements of the i - th segment as s_ i : s_ i = a_ l_ i - a_ l_ i+ 1 + a_ l_ i+ 2 - a_ l_ i+ 3 + . . . \u00b1 a_ r_ i . For example, the alternating sum of elements of segment [ 2, 4] in array [ 1, 0, - 1, 1, 1] equals to 0 - ( - 1) + 1 = 2 . The sum of s_ i over all segments of partition should be equal to zero. Note that each s_ i does not have to be equal to zero, this property is about sum of s_ i over all segments of partition. The set of segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ k, r_ k] is called a partition of the array a of length n if 1 = l_ 1 \u2264 r_ 1, l_ 2 \u2264 r_ 2, . . . , l_ k \u2264 r_ k = n and r_ i + 1 = l_ i+ 1 for all i = 1, 2, . . . k- 1 . In other words, each element of the array must belong to exactly one segment. You have to build a partition of the given array with properties described above or determine that such partition does not exist. Note that it is not required to minimize the number of segments in the partition.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( a_ i is - 1 , 0 , or 1 ) \u2014 the elements of the given array. It' s guaranteed that the sum of n over all test cases does not exceed 200 000 .",
    "output": "For each test case print an integer k \u2014 the number of segments in the partition. If required partition does not exist, print - 1 . If partition exists, in the i - th of the following k lines print two integers l_ i and r_ i \u2014 description of the i - th segment. The following conditions should be satisfied: l_ i \u2264 r_ i for each i from 1 to k . l_ i + 1 = r_ i + 1 for each i from 1 to ( k - 1) . l_ 1 = 1, r_ k = n . If there are multiple correct partitions of the array, print any of them.",
    "note": "In the first test case we can build a partition of 4 segments \u2014 each of them will contain only one element of the array equals to 0 . So the sum will be equal to 0 + 0 + 0 + 0 = 0 . In the second test case we can build a partition of 4 segments. The alternating sum of the first segment will be equal to - 1 , the alternating sum of the second segment will be equal to 1 , of the third segment \u2014 0 - 1 + 0 = - 1 , of the fourth segment \u2014 1 - 0 = 1 . The sum will be equal to - 1 + 1 - 1 + 1 = 0 . In the third test case it can be proved that the required partition does not exist.",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1753A2"
  },
  {
    "title": "Make Nonzero Sum (easy version)",
    "url": "https://codeforces.com/problemset/problem/1753/A1",
    "history": "This is the easy version of the problem. The difference is that in this version the array can not contain zeros. You can make hacks only if both versions of the problem are solved. You are given an array [ a_ 1, a_ 2, . . . a_ n] consisting of integers - 1 and 1 . You have to build a partition of this array into the set of segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ k, r_ k] with the following property: Denote the alternating sum of all elements of the i - th segment as s_ i : s_ i = a_ l_ i - a_ l_ i+ 1 + a_ l_ i+ 2 - a_ l_ i+ 3 + . . . \u00b1 a_ r_ i . For example, the alternating sum of elements of segment [ 2, 4] in array [ 1, 0, - 1, 1, 1] equals to 0 - ( - 1) + 1 = 2 . The sum of s_ i over all segments of partition should be equal to zero. Note that each s_ i does not have to be equal to zero, this property is about sum of s_ i over all segments of partition. The set of segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ k, r_ k] is called a partition of the array a of length n if 1 = l_ 1 \u2264 r_ 1, l_ 2 \u2264 r_ 2, . . . , l_ k \u2264 r_ k = n and r_ i + 1 = l_ i+ 1 for all i = 1, 2, . . . k- 1 . In other words, each element of the array must belong to exactly one segment. You have to build a partition of the given array with properties described above or determine that such partition does not exist. Note that it is not required to minimize the number of segments in the partition.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( a_ i is - 1 or 1 ) \u2014 the elements of the given array. It' s guaranteed that the sum of n over all test cases does not exceed 200 000 .",
    "output": "For each test case, if required partition does not exist, print - 1 . Otherwise, print an integer k \u2014 the number of segments in the partition. Then in the i - th of the following k lines print two integers l_ i and r_ i \u2014 description of the i - th segment. The following conditions should be satisfied: l_ i \u2264 r_ i for each i from 1 to k . l_ i + 1 = r_ i + 1 for each i from 1 to ( k - 1) . l_ 1 = 1, r_ k = n . If there are multiple correct partitions of the array, print any of them.",
    "note": "In the first test case we can build a partition of one segment of length 4 . The sum of this segment will be equal to 1 - 1 + 1 - 1 = 0 . In the second test case we can build a partition of two segments of length 3 . The sum of the first segment will be equal to - 1 - 1 + 1 = - 1 , and the sum of the second segment: 1 - 1 + 1 = 1 . So, the total sum will be equal to - 1 + 1 = 0 . In the third and in the fourth test cases it can be proved that there are no required partition.",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1753A1"
  },
  {
    "title": "Bracket Cost",
    "url": "https://codeforces.com/problemset/problem/1750/E",
    "history": "Daemon Targaryen decided to stop looking like a Metin2 character. He turned himself into the most beautiful thing, a bracket sequence. For a bracket sequence, we can do two kind of operations: Select one of its substrings ^ \u2020 and cyclic shift it to the right. For example, after a cyclic shift to the right, \" ( ( ) ) \" will become \" ) ( ( ) \" ; Insert any bracket, opening ' ( ' or closing ' ) ' , wherever you want in the sequence. We define the cost of a bracket sequence as the minimum number of such operations to make it balanced ^ . Given a bracket sequence s of length n , find the sum of costs across all its n( n+ 1) / 2 non- empty substrings. Note that for each substring we calculate the cost independently. ^ \u2020 A string a is a substring of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters from the beginning and several ( possibly, zero or all) characters from the end. ^ A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters + and 1 . For example, sequences \" ( ( ) ) ( ) \" , \" ( ) \" , and \" ( ( ) ( ( ) ) ) \" are balanced, while \" ) ( \" , \" ( ( ) \" , and \" ( ( ) ) ) ( \" are not.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the bracket sequence. The second line of each test case contains a string s , consisting only of characters ' ( ' and ' ) ' , of length n \u2014 the bracket sequence. It is guaranteed that sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the sum of costs of all substrings of s .",
    "note": "In the first test case, there is the only substring \" ) \" . Its cost is 1 because we can insert ' ( ' to the beginning of this substring and get a string \" ( ) \" , that is a balanced string. In the second test case, the cost of each substring of length one is 1 . The cost of a substring \" ) ( \" is 1 because we can cyclically shift it to right and get a string \" ( ) \" . The cost of strings \" ) ( ) \" and \" ( ) ( \" is 1 because its enough to insert one bracket to each of them. The cost of substring \" ) ( ) ( \" is 1 because we can cyclically shift it to right and get a string \" ( ) ( ) \" . So there are 4 + 2 + 2 + 1 = 9 substring of cost 1 and 1 substring of cost 0 . So the sum of the costs is 9 . In the third test case, \" ( \" , the cost is 1 ; \" ( ) \" , the cost is 0 ; \" ( ) ) \" , the cost is 1 ; \" ) \" , the cost is 1 ; \" ) ) \" , the cost is 2 ; \" ) \" , the cost is 1 . So the sum of the costs is 6 .",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1750E"
  },
  {
    "title": "Maximum Substring",
    "url": "https://codeforces.com/problemset/problem/1750/B",
    "history": "A binary string is a string consisting only of the characters 0 and 1. You are given a binary string s . For some non- empty substring ^ \u2020 t of string s containing x characters 0 and y characters 1, define its cost as: x \u00b7 y , if x > 0 and y > 0 ; x^ 2 , if x > 0 and y = 0 ; y^ 2 , if x = 0 and y > 0 . Given a binary string s of length n , find the maximum cost across all its non- empty substrings. ^ \u2020 A string a is a substring of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters from the beginning and several ( possibly, zero or all) characters from the end.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the string s . The second line of each test case contains a binary string s of length n . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum cost across all substrings.",
    "note": "In the first test case, we can take a substring 111 . It contains 3 characters 1 and 0 characters 0. So a = 3 , b = 0 and its cost is 3^ 2 = 9 . In the second test case, we can take the whole string. It contains 4 characters 1 and 3 characters 0. So a = 4 , b = 3 and its cost is 4 \u00b7 3 = 12 . In the third test case, we can can take a substring 1111 and its cost is 4^ 2 = 16 . In the fourth test case, we can take the whole string and cost is 4 \u00b7 3 = 12 . In the fifth test case, we can take a substring 000 and its cost is 3 \u00b7 3 = 9 . In the sixth test case, we can only take the substring 0 and its cost is 1 \u00b7 1 = 1 .",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1750B"
  },
  {
    "title": "Number Game",
    "url": "https://codeforces.com/problemset/problem/1749/C",
    "history": "Alice and Bob are playing a game. They have an array of positive integers a of size n . Before starting the game, Alice chooses an integer k \u2265 0 . The game lasts for k stages, the stages are numbered from 1 to k . During the i - th stage, Alice must remove an element from the array that is less than or equal to k - i + 1 . After that, if the array is not empty, Bob must add k - i + 1 to an arbitrary element of the array. Note that both Alice' s move and Bob' s move are two parts of the same stage of the game. If Alice can' t delete an element during some stage, she loses. If the k - th stage ends and Alice hasn' t lost yet, she wins. Your task is to determine the maximum value of k such that Alice can win if both players play optimally. Bob plays against Alice, so he tries to make her lose the game, if it' s possible.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the size of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "For each test case, print one integer \u2014 the maximum value of k such that Alice can win if both players play optimally.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "games",
      "greedy",
      "implementation"
    ],
    "id": "1749C"
  },
  {
    "title": "Death's Blessing",
    "url": "https://codeforces.com/problemset/problem/1749/B",
    "history": "You are playing a computer game. To pass the current level, you have to kill a big horde of monsters. In this horde, there are n monsters standing in the row, numbered from 1 to n . The i - th monster has a_ i health and a special \" Death' s Blessing\" spell of strength b_ i attached to it. You are going to kill all of them one by one. It takes exactly h seconds to kill a monster with health h . When the i - th monster dies, it casts its spell that increases the health of its neighbors by b_ i ( the neighbors of the j - th monster in the row are the monsters on places j - 1 and j + 1 . The first and the last monsters have only one neighbor each) . After each monster is killed, the row shrinks, so its former neighbors become adjacent to each other ( so if one of them dies, the other one is affected by its spell) . For example, imagine a situation with 4 monsters with health a = [ 2, 6, 7, 3] and spells b = [ 3, 6, 0, 5] . One of the ways to get rid of the monsters is shown below: 2 6 7 3 8 13 3 8 3 6 { } 3 6 0 5 3 0 5 3 5 5 The first row represents the health of each monster, the second one \u2014 the power of the spells. As a result, we can kill all monsters in 6 + 13 + 8 + 6 = 33 seconds. Note that it' s only an example and may not be the fastest way to get rid of the monsters. What is the minimum time required to kill all monsters in the row?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of monsters in the row. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial health of corresponding monsters. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 9 ) , where b_ i is the strength of the spell for the i - th monster. It' s guaranteed that the sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum possible total time to kill all monsters.",
    "note": "In the first test case, there is only one monster that will be killed in 10 seconds. In the second test case, it' s optimal to kill the first monster, the last monster and then the middle one. It will take 100 + 100 + ( 1 + 1 + 1) = 203 seconds. In the third test case, it' s optimal to kill the first monster, then the third one, then the fourth one and finally the second one. It will take 2 + 7 + ( 3 + 0) + ( 3 + 6 + 5) = 26 seconds.",
    "topics": [
      "greedy"
    ],
    "id": "1749B"
  },
  {
    "title": "Cowardly Rooks",
    "url": "https://codeforces.com/problemset/problem/1749/A",
    "history": "There' s a chessboard of size n \u00d7 n . m rooks are placed on it in such a way that: no two rooks occupy the same cell; no two rooks attack each other. A rook attacks all cells that are in its row or column. Is it possible to move exactly one rook ( you can choose which one to move) into a different cell so that no two rooks still attack each other? A rook can move into any cell in its row or column if no other rook stands on its path.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of testcases. The first line of each testcase contains two integers n and m ( 1 \u2264 n, m \u2264 8 ) \u2014 the size of the chessboard and the number of the rooks. The i - th of the next m lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) \u2014 the position of the i - th rook: x_ i is the row and y_ i is the column. No two rooks occupy the same cell. No two rooks attack each other.",
    "output": "For each testcase, print \" YES\" if it' s possible to move exactly one rook into a different cell so that no two rooks still attack each other. Otherwise, print \" NO\" .",
    "note": "In the first testcase, the rooks are in the opposite corners of a 2 \u00d7 2 board. Each of them has a move into a neighbouring corner, but moving there means getting attacked by another rook. In the second testcase, there' s a single rook in a middle of a 3 \u00d7 3 board. It has 4 valid moves, and every move is fine because there' s no other rook to attack it.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1749A"
  },
  {
    "title": "Zero-Sum Prefixes",
    "url": "https://codeforces.com/problemset/problem/1748/C",
    "history": "The score of an array v_ 1, v_ 2, . . . , v_ n is defined as the number of indices i ( 1 \u2264 i \u2264 n ) such that v_ 1+ v_ 2+ . . . + v_ i = 0 . You are given an array a_ 1, a_ 2, . . . , a_ n of length n . You can perform the following operation multiple times: select an index i ( 1 \u2264 i \u2264 n ) such that a_ i= 0 ; then replace a_ i by an arbitrary integer. What is the maximum possible score of a that can be obtained by performing a sequence of such operations?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the maximum possible score of the array a after performing a sequence of operations.",
    "note": "In the first test case, it is optimal to change the value of a_ 2 to - 2 in one operation. The resulting array a will be [ 2, - 2, 1, - 1, 0] , with a score of 3 : a_ 1+ a_ 2= 2- 2= 0 ; a_ 1+ a_ 2+ a_ 3+ a_ 4= 2- 2+ 1- 1= 0 ; a_ 1+ a_ 2+ a_ 3+ a_ 4+ a_ 5= 2- 2+ 1- 1+ 0= 0 . In the second test case, it is optimal to change the value of a_ 3 to - 2 000 000 000 , giving us an array with a score of 1 . In the third test case, it is not necessary to perform any operations.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1748C"
  },
  {
    "title": "Two Groups",
    "url": "https://codeforces.com/problemset/problem/1747/A",
    "history": "You are given an array a consisting of n integers. You want to distribute these n integers into two groups s_ 1 and s_ 2 ( groups can be empty) so that the following conditions are satisfied: For each i ( 1 \u2264 i \u2264 n) , a_ i goes into exactly one group. The value | sum( s_ 1) | - | sum( s_ 2) | is the maximum possible among all such ways to distribute the integers. Here sum( s_ 1) denotes the sum of the numbers in the group s_ 1 , and sum( s_ 2) denotes the sum of the numbers in the group s_ 2 . Determine the maximum possible value of | sum( s_ 1) | - | sum( s_ 2) | .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2 . . . a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9) \u2014 elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the maximum possible value of | sum( s_ 1) | - | sum( s_ 2) | .",
    "note": "In the first testcase, we can distribute as s_ 1 = { 10} , s_ 2 = { - 10} . Then the value will be | 10| - | - 10| = 0 . In the second testcase, we can distribute as s_ 1 = { 0, 11, - 1} , s_ 2 = { - 2} . Then the value will be | 0 + 11 - 1| - | - 2| = 10 - 2 = 8 . In the third testcase, we can distribute as s_ 1 = { 2, 3, 2} , s_ 2 = { } . Then the value will be | 2 + 3 + 2| - | 0| = 7 . In the fourth testcase, we can distribute as s_ 1 = { - 9, - 4, 0} , s_ 2 = { 2, 0} . Then the value will be | - 9 - 4 + 0| - | 2 + 0| = 13 - 2 = 11 .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1747A"
  },
  {
    "title": "Paths on the Tree",
    "url": "https://codeforces.com/problemset/problem/1746/D",
    "history": "You are given a rooted tree consisting of n vertices. The vertices are numbered from 1 to n , and the root is the vertex 1 . You are also given a score array s_ 1, s_ 2, . . . , s_ n . A multiset of k simple paths is called valid if the following two conditions are both true. Each path starts from 1 . Let c_ i be the number of paths covering vertex i . For each pair of vertices ( u, v) ( 2\u2264 u, v\u2264 n ) that have the same parent, | c_ u- c_ v| \u2264 1 holds. The value of the path multiset is defined as \u2211_ i= 1^ n c_ i s_ i . It can be shown that it is always possible to find at least one valid multiset. Find the maximum value among all valid multisets.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two space- separated integers n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) and k ( 1 \u2264 k \u2264 10^ 9 ) \u2014 the size of the tree and the required number of paths. The second line contains n - 1 space- separated integers p_ 2, p_ 3, . . . , p_ n ( 1\u2264 p_ i\u2264 n ) , where p_ i is the parent of the i - th vertex. It is guaranteed that this value describe a valid tree with root 1 . The third line contains n space- separated integers s_ 1, s_ 2, . . . , s_ n ( 0 \u2264 s_ i \u2264 10^ 4 ) \u2014 the scores of the vertices. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10 ^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum value of a path multiset.",
    "note": "In the first test case, one of optimal solutions is four paths 1 \u2192 2 \u2192 3 \u2192 5 , 1 \u2192 2 \u2192 3 \u2192 5 , 1 \u2192 4 , 1 \u2192 4 , here c= [ 4, 2, 2, 2, 2] . The value equals to 4\u00b7 6+ 2\u00b7 2+ 2\u00b7 1+ 2\u00b7 5+ 2\u00b7 7= 54 . In the second test case, one of optimal solution is three paths 1 \u2192 2 \u2192 3 \u2192 5 , 1 \u2192 2 \u2192 3 \u2192 5 , 1 \u2192 4 , here c= [ 3, 2, 2, 1, 2] . The value equals to 3\u00b7 6+ 2\u00b7 6+ 2\u00b7 1+ 1\u00b7 4+ 2\u00b7 10= 56 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1746D"
  },
  {
    "title": "Permutation Operations",
    "url": "https://codeforces.com/problemset/problem/1746/C",
    "history": "You are given a permutation a of size n and you should perform n operations on it. In the i - th operation, you can choose a non- empty suffix of a and increase all of its elements by i . How can we perform the operations to minimize the number of inversions in the final array? Note that you can perform operations on the same suffix any number of times you want. A permutation of size n is an array of size n such that each integer from 1 to n occurs exactly once in this array. A suffix is several consecutive elements of an array that include the last element of the array. An inversion in an array a is a pair of indices ( i, j) such that i > j and a_ i < a_ j .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of the array. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , the initial permutation a . It' s guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i\u2264 n for each 1 \u2264 i \u2264 n ) indicating that the i - th operation must be applied to the suffix starting at index x_ i . If there are multiple answers, print any of them.",
    "note": "In the first test case one of the optimal solutions is to increase the whole array on each operation ( that is, choose the suffix starting at index 1 ) . The final array [ 11, 12, 13, 14] contains 0 inversions. In the second test case, a will be equal to [ 2, 4, 3, 5, 6] , [ 2, 4, 3, 7, 8] , [ 2, 4, 6, 10, 11] , [ 2, 8, 10, 14, 15] and [ 7, 13, 15, 19, 20] after the first, second, third, fourth, and fifth operations, respectively. So the final array a has zero inversions.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1746C"
  },
  {
    "title": "Rebellion",
    "url": "https://codeforces.com/problemset/problem/1746/B",
    "history": "You have an array a of size n consisting only of zeroes and ones. You can do the following operation: choose two indices 1 \u2264 i , j \u2264 n , i j , add a_ i to a_ j , remove a_ i from a . Note that elements of a can become bigger than 1 after performing some operations. Also note that n becomes 1 less after the operation. What is the minimum number of operations needed to make a non- decreasing, i. e. that each element is not less than the previous element?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) , the size of array a . Next line contains n integers a_ 1, a_ 2, . . . a_ n ( a_ i is 0 or 1 ) , elements of array a . It' s guaranteed that sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer, minimum number of operations needed to make a non- decreasing.",
    "note": "In the first test case, a is already non- decreasing, so you don' t need to do any operations and the answer is 0 . In the second test case, you can perform an operation for i = 1 and j = 5 , so a will be equal to [ 0, 0, 1, 2] and it becomes non- decreasing. In the third test case, you can perform an operation for i = 2 and j = 1 , so a will be equal to [ 1] and it becomes non- decreasing.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "two pointers"
    ],
    "id": "1746B"
  },
  {
    "title": "Maxmina",
    "url": "https://codeforces.com/problemset/problem/1746/A",
    "history": "You have an array a of size n consisting only of zeroes and ones and an integer k . In one operation you can do one of the following: Select 2 consecutive elements of a and replace them with their minimum ( that is, let a : = [ a_ 1, a_ 2, . . . , a_ i- 1, min( a_ i, a_ i+ 1) , a_ i+ 2, . . . , a_ n] for some 1 \u2264 i \u2264 n- 1 ) . This operation decreases the size of a by 1 . Select k consecutive elements of a and replace them with their maximum ( that is, let a : = [ a_ 1, a_ 2, . . . , a_ i- 1, max( a_ i, a_ i+ 1, . . . , a_ i+ k- 1) , a_ i+ k, . . . , a_ n] for some 1 \u2264 i \u2264 n- k+ 1 ) . This operation decreases the size of a by k- 1 . Determine if it' s possible to turn a into [ 1] after several ( possibly zero) operations.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . The description of the test cases follows. The first line of each test case contains two integers n and k ( 2 \u2264 k \u2264 n \u2264 50 ) , the size of array a and the length of segments that you can perform second type operation on. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( a_ i is 0 or 1 ) , elements of array a .",
    "output": "For each test case, if it is possible to turn a into [ 1] , print \" YES\" , otherwise print \" NO\" .",
    "note": "In the first test case, you can perform the second type operation on second and third elements so a becomes [ 0, 1] , then you can perform the second type operation on first and second elements, so a turns to [ 1] . In the fourth test case, it' s obvious to see that you can' t make any 1 , no matter what you do. In the fifth test case, you can first perform a type 2 operation on the first three elements so that a becomes [ 1, 0, 0, 1] , then perform a type 2 operation on the elements in positions two through four, so that a becomes [ 1, 1] , and finally perform the first type operation on the remaining elements, so that a becomes [ 1] .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1746A"
  },
  {
    "title": "Divisibility by 2^n",
    "url": "https://codeforces.com/problemset/problem/1744/D",
    "history": "You are given an array of positive integers a_ 1, a_ 2, . . . , a_ n . Make the product of all the numbers in the array ( that is, a_ 1 \u00b7 a_ 2 \u00b7. . . \u00b7 a_ n ) divisible by 2^ n . You can perform the following operation as many times as you like: select an arbitrary index i ( 1 \u2264 i \u2264 n ) and replace the value a_ i with a_ i= a_ i \u00b7 i . You cannot apply the operation repeatedly to a single index. In other words, all selected values of i must be different. Find the smallest number of operations you need to perform to make the product of all the elements in the array divisible by 2^ n . Note that such a set of operations does not always exist.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number test cases. Then the descriptions of the input data sets follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of array a . The second line of each test case contains exactly n integers: a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n values over all test cases in a test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the least number of operations to make the product of all numbers in the array divisible by 2^ n . If the answer does not exist, print - 1.",
    "note": "In the first test case, the product of all elements is initially 2 , so no operations needed. In the second test case, the product of elements initially equals 6 . We can apply the operation for i = 2 , and then a_ 2 becomes 2\u00b72= 4 , and the product of numbers becomes 3\u00b74= 12 , and this product of numbers is divided by 2^ n= 2^ 2= 4 . In the fourth test case, even if we apply all possible operations, we still cannot make the product of numbers divisible by 2^ n \u2014 it will be ( 13\u00b71) \u00b7( 17\u00b72) \u00b7( 1\u00b73) \u00b7( 1\u00b74) = 5304 , which does not divide by 2^ n= 2^ 4= 16 . In the fifth test case, we can apply operations for i = 2 and i = 4 .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1744D"
  },
  {
    "title": "Number Replacement",
    "url": "https://codeforces.com/problemset/problem/1744/A",
    "history": "An integer array a_ 1, a_ 2, . . . , a_ n is being transformed into an array of lowercase English letters using the following prodecure: While there is at least one number in the array: Choose any number x from the array a , and any letter of the English alphabet y . Replace all occurrences of number x with the letter y . For example, if we initially had an array a = [ 2, 3, 2, 4, 1] , then we could transform it the following way: Choose the number 2 and the letter c. After that a = [ c, 3, c, 4, 1] . Choose the number 3 and the letter a. After that a = [ c, a, c, 4, 1] . Choose the number 4 and the letter t. After that a = [ c, a, c, t, 1] . Choose the number 1 and the letter a. After that a = [ c, a, c, t, a] . After the transformation all letters are united into a string, in our example we get the string \" cacta\" . Having the array a and the string s determine if the string s could be got from the array a after the described transformation?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. Then the description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of the array a and the string s . The second line of each test case contains exactly n integers: a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 50 ) \u2014 the elements of the array a . The third line of each test case contains a string s of length n , consisting of lowercase English letters.",
    "output": "For each test case, output \" YES\" , if we can get the string s from the array a , and \" NO\" otherwise. You can output each letter in any case.",
    "note": "The first test case corresponds to the sample described in the statement. In the second test case we can choose the number 50 and the letter a. In the third test case we can choose the number 11 and the letter a, after that a = [ a, 22] . Then we choose the number 22 and the letter b and get a = [ a, b] . In the fifth test case we can change all numbers one by one to the letter a.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1744A"
  },
  {
    "title": "Problem with Random Tests",
    "url": "https://codeforces.com/problemset/problem/1743/D",
    "history": "You are given a string s consisting of n characters. Each character of s is either 0 or 1. A substring of s is a contiguous subsequence of its characters. You have to choose two substrings of s ( possibly intersecting, possibly the same, possibly non- intersecting \u2014 just any two substrings) . After choosing them, you calculate the value of the chosen pair of substrings as follows: let s_ 1 be the first substring, s_ 2 be the second chosen substring, and f( s_ i) be the integer such that s_ i is its binary representation ( for example, if s_ i is 11010, f( s_ i) = 26 ) ; the value is the bitwise OR of f( s_ 1) and f( s_ 2) . Calculate the maximum possible value you can get, and print it in binary representation without leading zeroes.",
    "input": "The first line contains one integer n \u2014 the number of characters in s . The second line contains s itself, consisting of exactly n characters 0 and/ or 1. All non- example tests in this problem are generated randomly: every character of s is chosen independently of other characters; for each character, the probability of it being 1 is exactly 1/ 2 . This problem has exactly 40 tests. Tests from 1 to 3 are the examples; tests from 4 to 40 are generated randomly. In tests from 4 to 10 , n = 5 ; in tests from 11 to 20 , n = 1000 ; in tests from 21 to 40 , n = 10^ 6 . Hacks are forbidden in this problem.",
    "output": "Print the maximum possible value you can get in binary representation without leading zeroes.",
    "note": "In the first example, you can choose the substrings 11010 and 101. f( s_ 1) = 26 , f( s_ 2) = 5 , their bitwise OR is 31 , and the binary representation of 31 is 11111. In the second example, you can choose the substrings 1110010 and 11100.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "probabilities"
    ],
    "id": "1743D"
  },
  {
    "title": "Save the Magazines",
    "url": "https://codeforces.com/problemset/problem/1743/C",
    "history": "Monocarp has been collecting rare magazines for quite a while, and now he has decided to sell them. He distributed the magazines between n boxes, arranged in a row. The i - th box contains a_ i magazines. Some of the boxes are covered with lids, others are not. Suddenly it started to rain, and now Monocarp has to save as many magazines from the rain as possible. To do this, he can move the lids between boxes as follows: if the i - th box was covered with a lid initially, he can either move the lid from the i - th box to the box ( i- 1) ( if it exists) , or keep the lid on the i - th box. You may assume that Monocarp can move the lids instantly at the same moment, and no lid can be moved more than once. If a box will be covered with a lid after Monocarp moves the lids, the magazines in it will be safe from the rain; otherwise they will soak. You have to calculate the maximum number of magazines Monocarp can save from the rain.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of the testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of boxes. The second line contains a string of n characters 0 and/ or 1. If the i - th character is 1, the i - th box is initially covered with a lid. If the i - th character is 0, the i - th box is initially not covered. The third line contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 4 ) , where a_ i is the number of magazines in the i - th box. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print one integer \u2014 the maximum number of magazines Monocarp can save from the rain.",
    "note": "In the first testcase of the example, Monocarp can move the lid from the second box to the first box, so the boxes 1 , 3 and 4 are covered, and 10 + 8 + 9 = 27 magazines are saved. In the second testcase, Monocarp can move the lid from the second box to the first box, then from the third box to the second box, then from the fifth box to the fourth box, and then from the sixth box to the fifth box. The boxes 1 , 2 , 4 and 5 will be covered, so 20 + 10 + 30 + 20 = 80 magazines can be saved. There are no lids in the third testcase, so it' s impossible to save even a single magazine.",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1743C"
  },
  {
    "title": "Permutation Value",
    "url": "https://codeforces.com/problemset/problem/1743/B",
    "history": "You are given an integer n . You have to construct a permutation of size n . A permutation is an array where each integer from 1 to s ( where s is the size of permutation) occurs exactly once. For example, [ 2, 1, 4, 3] is a permutation of size 4 ; [ 1, 2, 4, 5, 3] is a permutation of size 5 ; [ 1, 4, 3] is not a permutation ( the integer 2 is absent) , [ 2, 1, 3, 1] is not a permutation ( the integer 1 appears twice) . A subsegment of a permutation is a contiguous subsequence of that permutation. For example, the permutation [ 2, 1, 4, 3] has 10 subsegments: [ 2] , [ 2, 1] , [ 2, 1, 4] , [ 2, 1, 4, 3] , [ 1] , [ 1, 4] , [ 1, 4, 3] , [ 4] , [ 4, 3] and [ 3] . The value of the permutation is the number of its subsegments which are also permutations. For example, the value of [ 2, 1, 4, 3] is 3 since the subsegments [ 2, 1] , [ 1] and [ 2, 1, 4, 3] are permutations. You have to construct a permutation of size n with minimum possible value among all permutations of size n .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 48 ) \u2014 the number of test cases. Then, t lines follow. The i - th of them contains one integer n ( 3 \u2264 n \u2264 50 ) representing the i - th test case.",
    "output": "For each test case, print n integers \u2014 the permutation of size n with minimum possible value. If there are multiple such permutations, print any of them.",
    "note": "In the first example, the permutation [ 1, 4, 3, 5, 2] is one of the possible answers; its value is 2 . In the second example, the permutation [ 4, 1, 6, 2, 5, 3] is one of the possible answers; its value is 2 .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1743B"
  },
  {
    "title": "Orray",
    "url": "https://codeforces.com/problemset/problem/1742/G",
    "history": "You are given an array a consisting of n nonnegative integers. Let' s define the prefix OR array b as the array b_ i = a_ 1 OR a_ 2 OR . . . OR a_ i , where OR represents the bitwise OR operation. In other words, the array b is formed by computing the OR of every prefix of a . You are asked to rearrange the elements of the array a in such a way that its prefix OR array is lexicographically maximum. An array x is lexicographically greater than an array y if in the first position where x and y differ, x_ i > y_ i .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n nonnegative integers a_ 1, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print n integers \u2014 any rearrangement of the array a that obtains the lexicographically maximum prefix OR array.",
    "note": "",
    "topics": [
      "bitmasks",
      "brute force",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1742G"
  },
  {
    "title": "Smaller",
    "url": "https://codeforces.com/problemset/problem/1742/F",
    "history": "Alperen has two strings, s and t which are both initially equal to \" a\" . He will perform q operations of two types on the given strings: 1 k x \u2014 Append the string x exactly k times at the end of string s . In other words, s : = s + x + . . . + x_ k times . 2 k x \u2014 Append the string x exactly k times at the end of string t . In other words, t : = t + x + . . . + x_ k times . After each operation, determine if it is possible to rearrange the characters of s and t such that s is lexicographically smaller ^ \u2020 than t . Note that the strings change after performing each operation and don' t go back to their initial states. ^ \u2020 Simply speaking, the lexicographical order is the order in which words are listed in a dictionary. A formal definition is as follows: string p is lexicographically smaller than string q if there exists a position i such that p_ i < q_ i , and for all j < i , p_ j = q_ j . If no such i exists, then p is lexicographically smaller than q if the length of p is less than the length of q . For example, < and < , where we write p < q if p is lexicographically smaller than q .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains an integer q ( 1 \u2264 q \u2264 10^ 5) \u2014 the number of operations Alperen will perform. Then q lines follow, each containing two positive integers d and k ( 1 \u2264 d \u2264 2 ; 1 \u2264 k \u2264 10^ 5 ) and a non- empty string x consisting of lowercase English letters \u2014 the type of the operation, the number of times we will append string x and the string we need to append respectively. It is guaranteed that the sum of q over all test cases doesn' t exceed 10^ 5 and that the sum of lengths of all strings x in the input doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each operation, output \" YES\" , if it is possible to arrange the elements in both strings in such a way that s is lexicographically smaller than t and \" NO\" otherwise.",
    "note": "In the first test case, the strings are initially s = \" a\" and t = \" a\" . After the first operation the string t becomes \" aaa\" . Since \" a\" is already lexicographically smaller than \" aaa\" , the answer for this operation should be \" YES\" . After the second operation string s becomes \" aaa\" , and since t is also equal to \" aaa\" , we can' t arrange s in any way such that it is lexicographically smaller than t , so the answer is \" NO\" . After the third operation string t becomes \" aaaaaa\" and s is already lexicographically smaller than it so the answer is \" YES\" . After the fourth operation s becomes \" aaabb\" and there is no way to make it lexicographically smaller than \" aaaaaa\" so the answer is \" NO\" . After the fifth operation the string t becomes \" aaaaaaabcaabcaabca\" , and we can rearrange the strings to: \" bbaaa\" and \" caaaaaabcaabcaabaa\" so that s is lexicographically smaller than t , so we should answer \" YES\" .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1742F"
  },
  {
    "title": "Scuza",
    "url": "https://codeforces.com/problemset/problem/1742/E",
    "history": "Timur has a stairway with n steps. The i - th step is a_ i meters higher than its predecessor. The first step is a_ 1 meters higher than the ground, and the ground starts at 0 meters. The stairs for the first test case. Timur has q questions, each denoted by an integer k_ 1, . . . , k_ q . For each question k_ i , you have to print the maximum possible height Timur can achieve by climbing the steps if his legs are of length k_ i . Timur can only climb the j - th step if his legs are of length at least a_ j . In other words, k_ i \u2265 a_ j for each step j climbed. Note that you should answer each question independently.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains two integers n, q ( 1 \u2264 n, q \u2264 2\u00b710^ 5 ) \u2014 the number of steps and the number of questions, respectively. The second line of each test case contains n integers ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the height of the steps. The third line of each test case contains q integers ( 0 \u2264 k_ i \u2264 10^ 9 ) \u2014 the numbers for each question. It is guaranteed that the sum of n does not exceed 2\u00b710^ 5 , and the sum of q does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output a single line containing q integers, the answer for each question. Please note, that the answer for some questions won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "note": "Consider the first test case, pictured in the statement. If Timur' s legs have length 1 , then he can only climb stair 1 , so the highest he can reach is 1 meter. If Timur' s legs have length 2 or 4 , then he can only climb stairs 1 , 2 , and 3 , so the highest he can reach is 1+ 2+ 1= 4 meters. If Timur' s legs have length 9 or 10 , then he can climb the whole staircase, so the highest he can reach is 1+ 2+ 1+ 5= 9 meters. In the first question of the second test case, Timur has no legs, so he cannot go up even a single step. : (",
    "topics": [
      "binary search",
      "greedy",
      "math"
    ],
    "id": "1742E"
  },
  {
    "title": "Coprime",
    "url": "https://codeforces.com/problemset/problem/1742/D",
    "history": "Given an array of n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 1000 ) . Find the maximum value of i + j such that a_ i and a_ j are coprime, ^ \u2020 or - 1 if no such i , j exist. For example consider the array [ 1, 3, 5, 2, 4, 7, 7] . The maximum value of i + j that can be obtained is 5 + 7 , since a_ 5 = 4 and a_ 7 = 7 are coprime. ^ \u2020 Two integers p and q are coprime if the only positive integer that is a divisor of both of them is 1 ( that is, their greatest common divisor is 1 ) .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the array. The following line contains n space- separated positive integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 1000 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output a single integer \u2014 the maximum value of i + j such that i and j satisfy the condition that a_ i and a_ j are coprime, or output - 1 in case no i , j satisfy the condition.",
    "note": "For the first test case, we can choose i = j = 3 , with sum of indices equal to 6 , since 1 and 1 are coprime. For the second test case, we can choose i = 7 and j = 5 , with sum of indices equal to 7 + 5 = 12 , since 7 and 4 are coprime.",
    "topics": [
      "brute force",
      "greedy",
      "number theory"
    ],
    "id": "1742D"
  },
  {
    "title": "Increasing",
    "url": "https://codeforces.com/problemset/problem/1742/B",
    "history": "You are given an array a of n positive integers. Determine if, by rearranging the elements, you can make the array strictly increasing. In other words, determine if it is possible to rearrange the elements such that a_ 1 < a_ 2 < . . . < a_ n holds.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the array. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array.",
    "output": "For each test case, output \" YES\" ( without quotes) if the array satisfies the condition, and \" NO\" ( without quotes) otherwise. You can output the answer in any case ( for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" will be recognized as a positive answer) .",
    "note": "In the first test case any rearrangement will keep the array [ 1, 1, 1, 1] , which is not strictly increasing. In the second test case, you can make the array [ 1, 3, 4, 7, 8] .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1742B"
  },
  {
    "title": "Minimize the Thickness",
    "url": "https://codeforces.com/problemset/problem/1741/C",
    "history": "You are given a sequence a= [ a_ 1, a_ 2, . . . , a_ n] consisting of n positive integers. Let' s call a group of consecutive elements a segment. Each segment is characterized by two indices: the index of its left end and the index of its right end. Denote by a[ l, r] a segment of the sequence a with the left end in l and the right end in r , i. e. a[ l, r] = [ a_ l, a_ l+ 1, . . . , a_ r] . For example, if a= [ 31, 4, 15, 92, 6, 5] , then a[ 2, 5] = [ 4, 15, 92, 6] , a[ 5, 5] = [ 6] , a[ 1, 6] = [ 31, 4, 15, 92, 6, 5] are segments. We split the given sequence a into segments so that: each element is in exactly one segment; the sums of elements for all segments are equal. For example, if a = [ 55, 45, 30, 30, 40, 100 ] , then such a sequence can be split into three segments: a[ 1, 2] = [ 55, 45] , a[ 3, 5] = [ 30, 30, 40] , a[ 6, 6] = [ 100] . Each element belongs to exactly segment, the sum of the elements of each segment is 100 . Let' s define thickness of split as the length of the longest segment. For example, the thickness of the split from the example above is 3 . Find the minimum thickness among all possible splits of the given sequence of a into segments in the required way.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Each test case is described by two lines. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the length of the sequence a . The second line of each test case contains exactly n integers: a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 elements of the sequence a . It is guaranteed that the sum of n for all test cases does not exceed 2000 .",
    "output": "For each test case, output one integer \u2014 the minimum possible thickness of a split of the sequence a into segments. Note that there always exist a split, you can always consider whole sequence as one segment.",
    "note": "The split in the first test case is explained in the statement, it can be shown that it is optimal. In the second test case, it is possible to split into segments only by leaving a single segment. Then the thickness of this split is equal to the length of the entire sequence, that is, 4 . In the third test case, the optimal split will be [ 10, 55] , [ 35, 30] , [ 65] . The thickness of the split equals to 2 . In the fourth test case possible splits are: [ 4] + [ 1, 1, 1, 1] + [ 4] ; [ 4, 1, 1] + [ 1, 1, 4] .",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "two pointers"
    ],
    "id": "1741C"
  },
  {
    "title": "Hanging Hearts",
    "url": "https://codeforces.com/problemset/problem/1740/E",
    "history": "Pak Chanek has n blank heart- shaped cards. Card 1 is attached directly to the wall while each of the other cards is hanging onto exactly one other card by a piece of string. Specifically, card i ( i > 1 ) is hanging onto card p_ i ( p_ i < i ) . In the very beginning, Pak Chanek must write one integer number on each card. He does this by choosing any permutation a of [ 1, 2, . . . , n] . Then, the number written on card i is a_ i . After that, Pak Chanek must do the following operation n times while maintaining a sequence s ( which is initially empty) : Choose a card x such that no other cards are hanging onto it. Append the number written on card x to the end of s . If x = \u0338 1 and the number on card p_ x is larger than the number on card x , replace the number on card p_ x with the number on card x . Remove card x . After that, Pak Chanek will have a sequence s with n elements. What is the maximum length of the longest non- decreasing subsequence ^ \u2020 of s at the end if Pak Chanek does all the steps optimally? ^ \u2020 A sequence b is a subsequence of a sequence c if b can be obtained from c by deletion of several ( possibly, zero or all) elements. For example, [ 3, 1] is a subsequence of [ 3, 2, 1] , [ 4, 3, 1] and [ 3, 1] , but not [ 1, 3, 3, 7] and [ 3, 10, 4] .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of heart- shaped cards. The second line contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) describing which card that each card hangs onto.",
    "output": "Print a single integer \u2014 the maximum length of the longest non- decreasing subsequence of s at the end if Pak Chanek does all the steps optimally.",
    "note": "The following is the structure of the cards in the first example. Pak Chanek can choose the permutation a = [ 1, 5, 4, 3, 2, 6] . Let w_ i be the number written on card i . Initially, w_ i = a_ i . Pak Chanek can do the following operations in order: Select card 5 . Append w_ 5 = 2 to the end of s . As w_ 4 > w_ 5 , the value of w_ 4 becomes 2 . Remove card 5 . After this operation, s = [ 2] . Select card 6 . Append w_ 6 = 6 to the end of s . As w_ 2 \u2264 w_ 6 , the value of w_ 2 is left unchanged. Remove card 6 . After this operation, s = [ 2, 6] . Select card 4 . Append w_ 4 = 2 to the end of s . As w_ 1 \u2264 w_ 4 , the value of w_ 1 is left unchanged. Remove card 4 . After this operation, s = [ 2, 6, 2] . Select card 3 . Append w_ 3 = 4 to the end of s . As w_ 2 > w_ 3 , the value of w_ 2 becomes 4 . Remove card 3 . After this operation, s = [ 2, 6, 2, 4] . Select card 2 . Append w_ 2 = 4 to the end of s . As w_ 1 \u2264 w_ 2 , the value of w_ 1 is left unchanged. Remove card 2 . After this operation, s = [ 2, 6, 2, 4, 4] . Select card 1 . Append w_ 1 = 1 to the end of s . Remove card 1 . After this operation, s = [ 2, 6, 2, 4, 4, 1] . One of the longest non- decreasing subsequences of s = [ 2, 6, 2, 4, 4, 1] is [ 2, 2, 4, 4] . Thus, the length of the longest non- decreasing subsequence of s is 4 . It can be proven that this is indeed the maximum possible length.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1740E"
  },
  {
    "title": "Bricks and Bags",
    "url": "https://codeforces.com/problemset/problem/1740/C",
    "history": "There are n bricks numbered from 1 to n . Brick i has a weight of a_ i . Pak Chanek has 3 bags numbered from 1 to 3 that are initially empty. For each brick, Pak Chanek must put it into one of the bags. After this, each bag must contain at least one brick. After Pak Chanek distributes the bricks, Bu Dengklek will take exactly one brick from each bag. Let w_ j be the weight of the brick Bu Dengklek takes from bag j . The score is calculated as | w_ 1 - w_ 2| + | w_ 2 - w_ 3| , where | x| denotes the absolute value of x . It is known that Bu Dengklek will take the bricks in such a way that minimises the score. What is the maximum possible final score if Pak Chanek distributes the bricks optimally?",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of bricks. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the weights of the bricks. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a line containing an integer representing the maximum possible final score if Pak Chanek distributes the bricks optimally.",
    "note": "In the first test case, one way of achieving a final score of 6 is to do the following: Put bricks 1 , 4 , and 5 into bag 1 . Put brick 3 into bag 2 . Put brick 2 into bag 3 . If Pak Chanek distributes the bricks that way, a way Bu Dengklek can take the bricks is: Take brick 5 from bag 1 . Take brick 3 from bag 2 . Take brick 2 from bag 3 . The score is | a_ 5 - a_ 3| + | a_ 3 - a_ 2| = | 3 - 5| + | 5 - 1| = 6 . It can be shown that Bu Dengklek cannot get a smaller score from this distribution. It can be shown that there is no other distribution that results in a final score bigger than 6 .",
    "topics": [
      "constructive algorithms",
      "games",
      "greedy",
      "sortings"
    ],
    "id": "1740C"
  },
  {
    "title": "Jumbo Extra Cheese 2",
    "url": "https://codeforces.com/problemset/problem/1740/B",
    "history": "Pak Chanek has n two- dimensional slices of cheese. The i - th slice of cheese can be represented as a rectangle of dimensions a_ i \u00d7 b_ i . We want to arrange them on the two- dimensional plane such that: Each edge of each cheese is parallel to either the x- axis or the y- axis. The bottom edge of each cheese is a segment of the x- axis. No two slices of cheese overlap, but their sides can touch. They form one connected shape. Note that we can arrange them in any order ( the leftmost slice of cheese is not necessarily the first slice of cheese) . Also note that we can rotate each slice of cheese in any way as long as all conditions still hold. Find the minimum possible perimeter of the constructed shape.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of slices of cheese Pak Chanek has. The i - th of the next n lines of each test case contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 9 ) \u2014 the dimensions of the i - th slice of cheese. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a line containing an integer representing the minimum possible perimeter of the constructed shape.",
    "note": "In the first test case, a way of getting the minimum possible perimeter is to arrange the slices of cheese as follows. We can calculate that the perimeter of the constructed shape is 2+ 5+ 1+ 1+ 1+ 1+ 3+ 1+ 5+ 1+ 2+ 3= 26 . It can be shown that we cannot get a smaller perimeter. Consider the following invalid arrangement. Even though the perimeter of the shape above is 24 , it does not satisfy all conditions of the problem. The bottom edge of the 1 \u00d7 1 slice of cheese is not a segment of the x- axis. In the second test case, a way of getting the minimum possible perimeter is to arrange the slices of cheese as follows. We can calculate that the perimeter of the constructed shape is 2+ 2+ 2+ 3+ 2+ 3+ 2+ 2+ 2+ 4= 24 . It can be shown that we cannot get a smaller perimeter.",
    "topics": [
      "geometry",
      "greedy",
      "sortings"
    ],
    "id": "1740B"
  },
  {
    "title": "Reset K Edges",
    "url": "https://codeforces.com/problemset/problem/1739/D",
    "history": "You are given a rooted tree, consisting of n vertices. The vertices are numbered from 1 to n , the root is the vertex 1 . You can perform the following operation at most k times: choose an edge ( v, u) of the tree such that v is a parent of u ; remove the edge ( v, u) ; add an edge ( 1, u) ( i. e. make u with its subtree a child of the root) . The height of a tree is the maximum depth of its vertices, and the depth of a vertex is the number of edges on the path from the root to it. For example, the depth of vertex 1 is 0 , since it' s the root, and the depth of all its children is 1 . What' s the smallest height of the tree that can be achieved?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 0 \u2264 k \u2264 n - 1 ) \u2014 the number of vertices in the tree and the maximum number of operations you can perform. The second line contains n- 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i ) \u2014 the parent of the i - th vertex. Vertex 1 is the root. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the smallest height of the tree that can achieved by performing at most k operations.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1739D"
  },
  {
    "title": "Array Recovery",
    "url": "https://codeforces.com/problemset/problem/1739/B",
    "history": "For an array of non- negative integers a of size n , we construct another array d as follows: d_ 1 = a_ 1 , d_ i = | a_ i - a_ i - 1| for 2 \u2264 i \u2264 n . Your task is to restore the array a from a given array d , or to report that there are multiple possible arrays.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the size of the arrays a and d . The second line contains n integers d_ 1, d_ 2, . . . , d_ n ( 0 \u2264 d_ i \u2264 100 ) \u2014 the elements of the array d . It can be shown that there always exists at least one suitable array a under these constraints.",
    "output": "For each test case, print the elements of the array a , if there is only one possible array a . Otherwise, print - 1 .",
    "note": "In the second example, there are two suitable arrays: [ 2, 8, 5] and [ 2, 8, 11] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1739B"
  },
  {
    "title": "Anti-Increasing Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/G",
    "history": "You are given an n \u00d7 n grid. We write ( i, j) to denote the cell in the i - th row and j - th column. For each cell, you are told whether yon can delete it or not. Given an integer k , you are asked to delete exactly ( n- k+ 1) ^ 2 cells from the grid such that the following condition holds. You cannot find k not deleted cells ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , . . . , ( x_ k, y_ k) that are strictly increasing, i. e. , x_ i < x_ i+ 1 and y_ i < y_ i+ 1 for all 1 \u2264 i < k . Your task is to find a solution, or report that it is impossible.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains two integers n and k ( 2 \u2264 k \u2264 n \u2264 1000 ) . Then n lines follow. The i - th line contains a binary string s_ i of length n . The j - th character of s_ i is 1 if you can delete cell ( i, j) , and 0 otherwise. It' s guaranteed that the sum of n^ 2 over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, if there is no way to delete exactly ( n- k+ 1) ^ 2 cells to meet the condition, output \" NO\" ( without quotes) . Otherwise, output \" YES\" ( without quotes) . Then, output n lines. The i - th line should contain a binary string t_ i of length n . The j - th character of t_ i is 0 if cell ( i, j) is deleted, and 1 otherwise. If there are multiple solutions, you can output any of them. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "For the first test case, you only have to delete cell ( 1, 1) . For the second test case, you could choose to delete cells ( 1, 1) , ( 1, 2) , ( 4, 3) and ( 4, 4) . For the third test case, it is no solution because the cells in the diagonal will always form a strictly increasing sequence of length 5 .",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1738G"
  },
  {
    "title": "Connectivity Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/F",
    "history": "This is an interactive problem. Given a simple undirected graph with n vertices numbered from 1 to n , your task is to color all the vertices such that for every color c , the following conditions hold: The set of vertices with color c is connected; s_ c \u2264 n_ c^ 2 , where n_ c is the number of vertices with color c , and s_ c is the sum of degrees of vertices with color c . It can be shown that there always exists a way to color all the vertices such that the above conditions hold. Initially, you are only given the number n of vertices and the degree of each vertex. In each query, you can choose a vertex u . As a response, you will be given the k - th edge incident to u , if this is the k - th query on vertex u . You are allowed to make at most n queries. An undirected graph is simple if it does not contain multiple edges or self- loops. The degree of a vertex is the number of edges incident to it. A set S of vertices is connected if for every two different vertices u, v \u2208 S , there is a path, which only passes through vertices in S , that connects u and v . That is, there is a sequence of edges ( u_ 1, v_ 1) , ( u_ 2, v_ 2) , . . . , ( u_ k, v_ k) with k \u2265 1 such that u_ 1 = u , v_ k = v , and v_ i = u_ i+ 1 for every 1 \u2264 i < k ; and u_ k \u2208 S and v_ k \u2208 S for every 1 \u2264 i \u2264 k . Especially, a set containing only one vertex is connected. InteractionEach test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The following lines contain the description and the interactive section of each test case. For each test case, you begin the interaction by reading an integer n ( 1\u2264 n \u2264 1000 ) in the first line, indicating the number of vertices in the graph. The second line contains n integers d_ 1, d_ 2, . . . , d_ n ( 0 \u2264 d_ i \u2264 n - 1 ) , where d_ i is the degree of vertex i . To make a query on vertex u ( 1 \u2264 u \u2264 n ) , you should output \" ? u \" in a separate line. If this is the k - th query on vertex u , vertex e_ u, k will be given in the next separate line, where ( u, e_ u, k) is the k - th edge incident to vertex u . In case of k > d_ u , define e_ u, k = - 1 . You should make no more than n \" ? \" queries. To give the answer, you should output \" ! c_ 1 c_ 2 . . . c_ n \" in a separate line, where c_ i ( 1 \u2264 c_ i \u2264 n ) is the color of vertex i . After that, your program should continue to the next test case, or terminate if this is the last test case. It is guaranteed that the graph is a simple undirected graph. It is guaranteed that the sum of n over all test cases does not exceed 1000 . In case your query format is invalid, or you have made more than n \" ? \" queries, you will receive Wrong Answer verdict. After printing a query, do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Hack FormatThe first line of the hack contains an integer t ( 1 \u2264 t \u2264 1000 ) , indicating the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 1000 ) , indicating the number of vertices in the graph. Then n lines follow. The i - th line contains an integer d_ i ( 0 \u2264 d_ i \u2264 n - 1 ) , indicating the degree of vertex i , and then d_ i distinct integers e_ i, 1, e_ i, 2, . . . , e_ i, d_ i ( 1 \u2264 e_ i, j\u2264 n and e_ i, j= \u0338 i ) , where ( i, e_ i, j) is the j - th edge incident to vertex i . It should be guaranteed that the graph is a simple undirected graph. It should be guaranteed that the sum of n over all test cases does not exceed 1000 .",
    "input": "",
    "output": "",
    "note": "In the example, there is only one test case. In the test case, there are n = 5 vertices with vertices 1, 2, 3, 4 of degree 2 and vertex 5 of degree 0 . It is obvious that vertex 5 is isolated, i. e. , it does not connect to any other vertices. A possible interaction is shown in the sample input and output, where 4 \" ? \" queries are made on vertex 1 twice and vertex 3 twice. According to the responses to these queries, we know that each of vertex 1 and vertex 3 connects to two vertices 2 and 4 . A possible solution is shown in the sample output, where vertex 1 and vertex 2 are colored by 1 , vertex 3 and vertex 4 are colored by 2 , and vertex 5 is colored by 3 . It can be seen that this solution satisfies the required conditions as follows. For color c = 1 , vertex 1 and vertex 2 are connected. Moreover, n_ 1 = 2 and s_ 1 = d_ 1 + d_ 2 = 2 + 2 = 4 \u2264 n_ 1^ 2 = 2^ 2 = 4 ; For color c = 2 , vertex 3 and vertex 4 are connected. Moreover, n_ 2 = 2 and s_ 2 = d_ 3 + d_ 4 = 2 + 2 = 4 \u2264 n_ 2^ 2 = 2^ 2 = 4 ; For color c = 3 , there is only one vertex ( vertex 5 ) colored by 3 . Moreover, n_ 3 = 1 and s_ 3 = d_ 5 = 0 \u2264 n_ 3^ 2 = 1^ 2 = 1 .",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "interactive",
      "shortest paths",
      "trees"
    ],
    "id": "1738F"
  },
  {
    "title": "Even Number Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/C",
    "history": "Alice and Bob are playing a game on a sequence a_ 1, a_ 2, . . . , a_ n of length n . They move in turns and Alice moves first. In the turn of each player, he or she should select an integer and remove it from the sequence. The game ends when there is no integer left in the sequence. Alice wins if the sum of her selected integers is even; otherwise, Bob wins. Your task is to determine who will win the game, if both players play optimally.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 100 ) , indicating the length of the sequence. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) , indicating the elements of the sequence.",
    "output": "For each test case, output \" Alice\" ( without quotes) if Alice wins and \" Bob\" ( without quotes) otherwise.",
    "note": "In the first and second test cases, Alice always selects two odd numbers, so the sum of her selected numbers is always even. Therefore, Alice always wins. In the third test case, Bob has a winning strategy that he always selects a number with the same parity as Alice selects in her last turn. Therefore, Bob always wins. In the fourth test case, Alice always selects two even numbers, so the sum of her selected numbers is always even. Therefore, Alice always wins.",
    "topics": [
      "dp",
      "games",
      "greedy",
      "math"
    ],
    "id": "1738C"
  },
  {
    "title": "Prefix Sum Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/B",
    "history": "Suppose a_ 1, a_ 2, . . . , a_ n is a sorted integer sequence of length n such that a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n . For every 1 \u2264 i \u2264 n , the prefix sum s_ i of the first i terms a_ 1, a_ 2, . . . , a_ i is defined by s_ i = \u2211_ k= 1^ i a_ k = a_ 1 + a_ 2 + . . . + a_ i. Now you are given the last k terms of the prefix sums, which are s_ n- k+ 1, . . . , s_ n- 1, s_ n . Your task is to determine whether this is possible. Formally, given k integers s_ n- k+ 1, . . . , s_ n- 1, s_ n , the task is to check whether there is a sequence a_ 1, a_ 2, . . . , a_ n such that a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n , and s_ i = a_ 1 + a_ 2 + . . . + a_ i for all n- k+ 1 \u2264 i \u2264 n .",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains two integers n ( 1 \u2264 n \u2264 10^ 5 ) and k ( 1 \u2264 k \u2264 n ) , indicating the length of the sequence a and the number of terms of prefix sums, respectively. The second line of each test case contains k integers s_ n- k+ 1, . . . , s_ n- 1, s_ n ( - 10^ 9 \u2264 s_ i \u2264 10^ 9 for every n- k+ 1 \u2264 i \u2264 n ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output \" YES\" ( without quotes) if it is possible and \" NO\" ( without quotes) otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "In the first test case, we have the only sequence a = [ 1, 1, 1, 1, 1] . In the second test case, we can choose, for example, a = [ - 3, - 2, - 1, 0, 1, 2, 3] . In the third test case, the prefix sums define the only sequence a = [ 2, 1, 1] , but it is not sorted. In the fourth test case, it can be shown that there is no sequence with the given prefix sums.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1738B"
  },
  {
    "title": "Glory Addicts",
    "url": "https://codeforces.com/problemset/problem/1738/A",
    "history": "The hero is addicted to glory, and is fighting against a monster. The hero has n skills. The i - th skill is of type a_ i ( either fire or frost) and has initial damage b_ i . The hero can perform all of the n skills in any order ( with each skill performed exactly once) . When performing each skill, the hero can play a magic as follows: If the current skill immediately follows another skill of a different type, then its damage is doubled. In other words, If a skill of type fire and with initial damage c is performed immediately after a skill of type fire, then it will deal c damage; If a skill of type fire and with initial damage c is performed immediately after a skill of type frost, then it will deal 2c damage; If a skill of type frost and with initial damage c is performed immediately after a skill of type fire, then it will deal 2c damage; If a skill of type frost and with initial damage c is performed immediately after a skill of type frost , then it will deal c damage. Your task is to find the maximum damage the hero can deal.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) , indicating the number of skills. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) , where a_ i indicates the type of the i - th skill. Specifically, the i - th skill is of type fire if a_ i = 0 , and of type frost if a_ i = 1 . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) , where b_ i indicates the initial damage of the i - th skill. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output the maximum damage the hero can deal.",
    "note": "In the first test case, we can order the skills by [ 3, 1, 4, 2] , and the total damage is 100 + 2 \u00d7 1 + 2 \u00d7 1000 + 10 = 2112 . In the second test case, we can order the skills by [ 1, 4, 2, 5, 3, 6] , and the total damage is 3 + 2 \u00d7 6 + 2 \u00d7 4 + 2 \u00d7 7 + 2 \u00d7 5 + 2 \u00d7 8 = 63 . In the third test case, we can order the skills by [ 1, 2, 3] , and the total damage is 1000000000 + 1000000000 + 1000000000 = 3000000000 . In the fourth test case, there is only one skill with initial damage 1 , so the total damage is 1 .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1738A"
  },
  {
    "title": "Ela and the Wiring Wizard",
    "url": "https://codeforces.com/problemset/problem/1737/D",
    "history": "Ela needs to send a large package from machine 1 to machine n through a network of machines. Currently, with the network condition, she complains that the network is too slow and the package can' t arrive in time. Luckily, a Wiring Wizard offered her a helping hand. The network can be represented as an undirected connected graph with n nodes, each node representing a machine. m wires are used to connect them. Wire i is used to connect machines u_ i and v_ i , and has a weight w_ i . The aforementioned large package, if going through wire i , will move from machine u_ i to machine v_ i ( or vice versa) in exactly w_ i microseconds. The Wiring Wizard can use his spell an arbitrary number of times. For each spell, he will choose the wire of index i , connecting machine u_ i and v_ i , and rewire it following these steps: Choose one machine that is connected by this wire. Without loss of generality, let' s choose v_ i . Choose a machine that is currently connecting to v_ i ( including u_ i ) , call it t_ i . Disconnect the wire indexed i from v_ i , then using it to connect u_ i and t_ i . The rewiring of wire i will takes w_ i microseconds, and the weight of the wire will not change after this operation. After a rewiring, a machine might have some wire connect it with itself. Also, the Wiring Wizard has warned Ela that rewiring might cause temporary disconnections between some machines, but Ela just ignores it anyway. Her mission is to send the large package from machine 1 to machine n as fast as possible. Note that the Wizard can use his spell on a wire zero, one, or many times. To make sure the network works seamlessly while transferring the large package, once the package starts transferring from machine 1 , the Wiring Wizard cannot use his spell to move wires around anymore. Ela wonders, with the help of the Wiring Wizard, what is the least amount of time needed to transfer the large package from machine 1 to n .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . The description of the test cases follows. The first line contains n and m ( 2 \u2264 n \u2264 500 , n - 1 \u2264 m \u2264 250 000 ) , the number of nodes and number of wires, respectively. For the next m lines, i - th line will contains u_ i , v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 9 ) - the indices 2 machines that are connected by the i - th edge and the weight of it. It is guaranteed that the sum of n over all test cases does not exceed 500 and the sum of m over all test cases does not exceed 250 000 . The graph in each test case is guaranteed to be connected, no self- loops, but it can contain multiple edges.",
    "output": "For each test case, output one integer denotes the least amount of time needed to transfer the large package from machine 1 to n .",
    "note": "Here is the graph in the first test case in the sample input: Ela can ask the Wiring Wizard to use his spell on wire with the index of 7 , which is connecting machines 2 and 3 . Then, since the machine 8 is connected to machine 3 , the Wiring Wizard can disconnect wire 7 from machine 3 and connect it to machine 8 in 3 microseconds ( weight of wire 3 ) . After that, the package can be sent from machine 1 to machine 8 in 6 microseconds. Therefore, the answer is 3 + 6 = 9 microseconds. Here is the graph in the third test case in the sample input:",
    "topics": [
      "brute force",
      "dp",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1737D"
  },
  {
    "title": "Ela Sorting Books",
    "url": "https://codeforces.com/problemset/problem/1737/A",
    "history": "Ela loves reading a lot, just like her new co- workers in DTL! On her first day after becoming an engineer in DTL, she is challenged by a co- worker to sort a heap of books into different compartments on the shelf. n books must be split into k compartments on the bookshelf ( n is divisible by k ) . Each book is represented by a lowercase Latin letter from ' a' to ' y' inclusively, which is the beginning letter in the title of the book. Ela must stack exactly n/ k books in each compartment. After the books are stacked, for each compartment indexed from 1 to k , she takes the minimum excluded ( MEX) letter of the multiset of letters formed by letters representing all books in that compartment, then combines the resulting letters into a string. The first letter of the resulting string is the MEX letter of the multiset of letters formed by the first compartment, the second letter of the resulting string is the MEX letter of the multiset of letters formed by the second compartment, . . . and so on. Please note, under the constraint of this problem, MEX letter can always be determined for any multiset found in this problem because ' z' is not used. What is the lexicographically greatest resulting string possible that Ela can create? A string a is lexicographically greater than a string b if and only if one of the following holds: b is a prefix of a , but b a ; in the first position where a and b differ, the string a has a letter that appears later in the alphabet than the corresponding letter in b . The minimum excluded ( MEX) letter of a multiset of letters is the letter that appears earliest in the alphabet and is not contained in the multiset. For example, if a multiset of letters contains 7 letters ' b' , ' a' , ' b' , ' c' , ' e' , ' c' , ' f' respectively, then the MEX letter of this compartment is ' d' , because ' d' is not included in the multiset, and all letters comes before ' d' in the alphabet, namely ' a' , ' b' and ' c' , are included in the multiset.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 200 ; 1 \u2264 k \u2264 n ) . It is guaranteed that n is divisible by k . The second line of each test case contains a string of n lowercase Latin letters from ' a' to ' y' inclusively. Each letter represents the starting letter of the title of a book in the initial heap. It is guaranteed that the sum of n over all test cases does not exceed 1000 .",
    "output": "For each test case, output a string of k letters which is the most optimal string that Ela can find.",
    "note": "In the first test case, the books can be divided into 3 compartments as below: the first compartment contains the books with indices 1, 2, 3, 7 : multiset_ 1 = { ' c' , ' a' , ' b' , ' d' } \u2192 MEX( multiset_ 1) = ' e' the second compartment contains the books with indices 4, 5, 6, 9 : multiset_ 2 = { ' c' , ' c' , ' a' , ' b' } \u2192 MEX( multiset_ 2) = ' d' the third compartment contains the remaining books 8, 10, 11, 12 : multiset_ 3 = { ' a' , ' a' , ' a' , ' c' } \u2192 MEX( multiset_ 3) = ' b' Therefore, the answer is ' edb' . It can be proven that there is no way that Ela can arrange the books so that it results in a lexicographically greater string.",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1737A"
  },
  {
    "title": "Swap and Take",
    "url": "https://codeforces.com/problemset/problem/1736/E",
    "history": "You' re given an array consisting of n integers. You have to perform n turns. Initially your score is 0 . On the i - th turn, you are allowed to leave the array as it is or swap any one pair of 2 adjacent elements in the array and change exactly one of them to 0 ( and leave the value of other element unchanged) after swapping. In either case( whether you swap or not) , after this you add a_ i to your score. What' s the maximum possible score you can get?",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 500 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) .",
    "output": "Print a single integer \u2014 the maximum possible score.",
    "note": "In the first example, to get the maximum score we do as follows. Do nothing on the first turn, add 3 to the score. Swap the first and the second elements and turn 1 to 0 on the second turn, and add 3 to the score. The final score is 6 .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1736E"
  },
  {
    "title": "Equal Binary Subsequences",
    "url": "https://codeforces.com/problemset/problem/1736/D",
    "history": "Everool has a binary string s of length 2n . Note that a binary string is a string consisting of only characters 0 and 1 . He wants to partition s into two disjoint equal subsequences. He needs your help to do it. You are allowed to do the following operation exactly once. You can choose any subsequence ( possibly empty) of s and rotate it right by one position. In other words, you can select a sequence of indices b_ 1, b_ 2, . . . , b_ m , where 1 \u2264 b_ 1 < b_ 2 < . . . < b_ m \u2264 2n . After that you simultaneously set s_ b_ 1 : = s_ b_ m, s_ b_ 2 : = s_ b_ 1, . . . , s_ b_ m : = s_ b_ m- 1. Can you partition s into two disjoint equal subsequences after performing the allowed operation exactly once? A partition of s into two disjoint equal subsequences s^ p and s^ q is two increasing arrays of indices p_ 1, p_ 2, . . . , p_ n and q_ 1, q_ 2, . . . , q_ n , such that each integer from 1 to 2n is encountered in either p or q exactly once, s^ p = s_ p_ 1 s_ p_ 2. . . s_ p_ n , s^ q = s_ q_ 1 s_ q_ 2. . . s_ q_ n , and s^ p = s^ q . If it is not possible to partition after performing any kind of operation, report - 1 . If it is possible to do the operation and partition s into two disjoint subsequences s^ p and s^ q , such that s^ p = s^ q , print elements of b and indices of s^ p , i. e. the values p_ 1, p_ 2, . . . , p_ n .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) , where 2n is the length of the binary string. The second line of each test case contains the binary string s of length 2n . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, follow the following output format. If there is no solution, print - 1 . Otherwise, In the first line, print an integer m ( 0 \u2264 m \u2264 2n ) , followed by m distinct indices b_ 1 , b_ 2 , . . . , b_ m ( in increasing order) . In the second line, print n distinct indices p_ 1 , p_ 2 , . . . , p_ n ( in increasing order) . If there are multiple solutions, print any.",
    "note": "In the first test case, b is empty. So string s is not changed. Now s^ p = s_ 1 s_ 2 = 10 , and s^ q = s_ 3s_ 4 = 10 . In the second test case, b= [ 3, 5] . Initially s_ 3= 0 , and s_ 5= 1 . On performing the operation, we simultaneously set s_ 3= 1 , and s_ 5= 0 . So s is updated to 101000 on performing the operation. Now if we take characters at indices [ 1, 2, 5] in s^ p , we get s_ 1= 100 . Also characters at indices [ 3, 4, 6] are in s^ q . Thus s^ q= 100 . We are done as s^ p= s^ q . In fourth test case, it can be proved that it is not possible to partition the string after performing any operation.",
    "topics": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1736D"
  },
  {
    "title": "Make A Equal to B",
    "url": "https://codeforces.com/problemset/problem/1736/A",
    "history": "You are given two arrays a and b of n elements, each element is either 0 or 1 . You can make operations of 2 kinds. Pick an index i and change a_ i to 1- a_ i . Rearrange the array a however you want. Find the minimum number of operations required to make a equal to b .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 400 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the arrays a and b . The second line of each test case contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( a_ i is 0 or 1 ) , representing the array a . The third line of each test case contains n space- separated integers b_ 1, b_ 2, . . . , b_ n ( b_ i is 0 or 1 ) , representing the array b .",
    "output": "For each test case, print the minimum number of operations required to make a equal to b .",
    "note": "In the first case, we need only one operation: change a_ 1 to 1- a_ i . Now a = [ 0, 0] which is equal to b . In the second case, the optimal way is to rearrange a to get the array [ 0, 1, 11 . Now a = [ 0, 0, 1] which is equal to b . In the second case, one of optimal ways would be to first change a_ 3 to 1 - a_ 3 , then rearrange a . In the third case, no operation is needed. In the fourth case, the optimal way is to rearrange a to get the array [ 0, 1, 1, 0] .",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1736A"
  },
  {
    "title": "House Planning",
    "url": "https://codeforces.com/problemset/problem/1735/E",
    "history": "There are n houses in your city arranged on an axis at points h_ 1, h_ 2, . . . , h_ n . You want to build a new house for yourself and consider two options where to place it: points p_ 1 and p_ 2 . As you like visiting friends, you have calculated in advance the distances from both options to all existing houses. More formally, you have calculated two arrays d_ 1 , d_ 2 : d_ i, j = | p_ i - h_ j| , where | x| defines the absolute value of x . After a long time of inactivity you have forgotten the locations of the houses h and the options p_ 1 , p_ 2 . But your diary still keeps two arrays \u2014 d_ 1 , d_ 2 , whose authenticity you doubt. Also, the values inside each array could be shuffled, so values at the same positions of d_ 1 and d_ 2 may correspond to different houses. Pay attention, that values from one array could not get to another, in other words, all values in the array d_ 1 correspond the distances from p_ 1 to the houses, and in the array d_ 2 \u2014 from p_ 2 to the houses. Also pay attention, that the locations of the houses h_ i and the considered options p_ j could match. For example, the next locations are correct: h = { 1, 0, 3, 3} , p = { 1, 1} , that could correspond to already shuffled d_ 1 = { 0, 2, 1, 2} , d_ 2 = { 2, 2, 1, 0} . Check whether there are locations of houses h and considered points p_ 1 , p_ 2 , for which the founded arrays of distances would be correct. If it is possible, find appropriate locations of houses and considered options.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 3 ) \u2014 the length of arrays d_ 1 , d_ 2 . The next two lines contain n integers each: arrays d_ 1 and d_ 2 ( 0 \u2264 d_ i, j\u2264 10^ 9 ) respectively. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 3 .",
    "output": "For each test case, output a single line \" NO\" if there is no answer. Otherwise output three lines. The first line must contain \" YES\" . In the second line, print n integers h_ 1, h_ 2, . . . , h_ n . In the third line print two integers p_ 1 , p_ 2 . It must be satisfied that 0 \u2264 h_ i, p_ 1, p_ 2 \u2264 2 \u00b7 10^ 9 . We can show that if there is an answer, then there is one satisfying these constraints. If there are several answers, output any of them.",
    "note": "In the image below you can see the sample solutions. Planned houses are shown in bright colours: pink and purple. Existing houses are dim. In test case 1 , the first planned house is located at point 0 , the second at point 10 . The existing house is located at point 5 and is at a distance of 5 from both planned houses. It can be shown that there is no answer for test case 2 . In test case 3 , the planned houses are located at points 33 and 69 . Note that in test case 4 , both plans are located at point 1 , where one of the existing houses is located at the same time. It is a correct placement.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graph matchings",
      "greedy"
    ],
    "id": "1735E"
  },
  {
    "title": "Phase Shift",
    "url": "https://codeforces.com/problemset/problem/1735/C",
    "history": "There was a string s which was supposed to be encrypted. For this reason, all 26 lowercase English letters were arranged in a circle in some order, afterwards, each letter in s was replaced with the one that follows in clockwise order, in that way the string t was obtained. You are given a string t . Determine the lexicographically smallest string s that could be a prototype of the given string t . A string a is lexicographically smaller than a string b of the same length if and only if: in the first position where a and b differ, the string a has a letter, that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the string t . The next line contains the string t of the length n , containing lowercase English letters. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing the lexicographically smallest string s which could be a prototype of t .",
    "note": "In the first test case, we couldn' t have the string \" a\" , since the letter a would transit to itself. Lexicographically the second string \" b\" is suitable as an answer. In the second test case, the string \" aa\" is not suitable, since a would transit to itself. \" ab\" is not suitable, since the circle would be closed with 2 letters, but it must contain all 26 . The next string \" ac\" is suitable. Below you can see the schemes for the first three test cases. The non- involved letters are skipped, they can be arbitrary placed in the gaps.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1735C"
  },
  {
    "title": "Tea with Tangerines",
    "url": "https://codeforces.com/problemset/problem/1735/B",
    "history": "There are n pieces of tangerine peel, the i - th of them has size a_ i . In one step it is possible to divide one piece of size x into two pieces of positive integer sizes y and z so that y + z = x . You want that for each pair of pieces, their sizes differ strictly less than twice. In other words, there should not be two pieces of size x and y , such that 2x \u2264 y . What is the minimum possible number of steps needed to satisfy the condition?",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integer n ( 1 \u2264 n \u2264 100 ) . Then one line follows, containing n integers a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) .",
    "output": "For each test case, output a single line containing the minimum number of steps.",
    "note": "In the first test case, we initially have a piece of size 1 , so all final pieces must have size 1 . The total number of steps is: 0 + 1 + 2 + 3 + 4 = 10 . In the second test case, we have just one piece, so we don' t need to do anything, and the answer is 0 steps. In the third test case, one of the possible cut options is: 600, 900, ( 600 | 700) , ( 1000 | 1000) , ( 1000 | 1000 | 550) . You can see this option in the picture below. The maximum piece has size 1000 , and it is less than 2 times bigger than the minimum piece of size 550 . 4 steps are done. We can show that it is the minimum possible number of steps.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1735B"
  },
  {
    "title": "Working Week",
    "url": "https://codeforces.com/problemset/problem/1735/A",
    "history": "Your working week consists of n days numbered from 1 to n , after day n goes day 1 again. And 3 of them are days off. One of the days off is the last day, day n . You have to decide when the other two are. Choosing days off, you pursue two goals: No two days should go one after the other. Note that you can' t make day 1 a day off because it follows day n . Working segments framed by days off should be as dissimilar as possible in duration. More specifically, if the segments are of size l_ 1 , l_ 2 , and l_ 3 days long, you want to maximize min( | l_ 1 - l_ 2| , | l_ 2 - l_ 3| , | l_ 3 - l_ 1| ) . Output the maximum value of min( | l_ 1 - l_ 2| , | l_ 2 - l_ 3| , | l_ 3 - l_ 1| ) that can be obtained.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The only line of each test case contains the integer n ( 6 \u2264 n \u2264 10^ 9 ) .",
    "output": "For each test case, output one integer \u2014 the maximum possible obtained value.",
    "note": "In the image below you can see the example solutions for the first two test cases. Chosen days off are shown in purple. Working segments are underlined in green. In test case 1 , the only options for days off are days 2 , 3 , and 4 ( because 1 and 5 are next to day n ) . So the only way to place them without selecting neighboring days is to choose days 2 and 4 . Thus, l_ 1 = l_ 2 = l_ 3 = 1 , and the answer min( | l_ 1 - l_ 2| , | l_ 2 - l_ 3| , | l_ 3 - l_ 1| ) = 0 . For test case 2 , one possible way to choose days off is shown. The working segments have the lengths of 2 , 1 , and 4 days. So the minimum difference is 1 = min( 1, 3, 2) = min( | 2 - 1| , | 1 - 4| , | 4 - 2| ) . It can be shown that there is no way to make it larger.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1735A"
  },
  {
    "title": "Slime Escape",
    "url": "https://codeforces.com/problemset/problem/1734/D",
    "history": "You are playing a game called Slime Escape. The game takes place on a number line. Initially, there are n slimes. For all positive integers i where 1 \u2264 i \u2264 n , the i - th slime is located at position i and has health a_ i . You are controlling the slime at position k . There are two escapes located at positions 0 and n+ 1 . Your goal is to reach any one of the two escapes by performing any number of game moves. In one game move, you move your slime to the left or right by one position. However, if there is another slime in the new position, you must absorb it. When absorbing a slime, the health of your slime would be increased by the health of the absorbed slime, then the absorbed slime would be removed from the game. Note that some slimes might have negative health, so your health would decrease when absorbing such slimes. You lose the game immediately if your slime has negative health at any moment during the game. Can you reach one of two escapes by performing any number of game moves, without ever losing the game?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 20 000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two positive integers n , k ( 3 \u2264 n \u2264 200 000 , 1 \u2264 k \u2264 n ) \u2014 the number of slimes and the position of your slime. The second line of each test case contains n integers, a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the health of the slimes. It is guaranteed that health of your slime is non- negative ( a_ k \u2265 0 ) , and all other slimes have non- zero health ( a_ i 0 for i k ) . It is guaranteed that the sum of n over all test cases does not exceed 200 000 .",
    "output": "For each test case, print \" YES\" ( without quotes) if you can escape without losing, and \" NO\" ( without quotes) otherwise.",
    "note": "In the first test case, you control the slime at position 4 with health 6 . One way to escape is to absorb the slimes at positions 5 , 6 , and 7 . Your slime escapes with 0 health at position 8 . In the second test case, you control the slime with 232 health at position 1 . Since your slime is already located next to the escape at position 0 , you can move to it without absorbing any slime. In the third test case, it can be shown that your slime would always have a negative health before reaching any one of two escapes. In the fourth test case, you control the slime at position 4 with health 6 . The following describes a possible sequence of moves to win: Absorb the slimes at positions 5 , 6 , and 7 : your health becomes 4 after absorbing the slime with health - 2 ; becomes 1 after absorbing the slime with health - 3 ; and becomes 7 after absorbing the slime with health 6 . Absorb the slimes at positions 3 , and 2 : your health becomes 7- 7+ 10= 10 . Absorb the slime at position 8 : your health becomes 10- 10= 0 . Use the escape at position 9 . Since your slime has maintained non- negative health at all times, you have won.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1734D"
  },
  {
    "title": "Removing Smallest Multiples",
    "url": "https://codeforces.com/problemset/problem/1734/C",
    "history": "You are given a set S , which contains the first n positive integers: 1, 2, . . . , n . You can perform the following operation on S any number of times ( possibly zero) : Choose a positive integer k where 1 \u2264 k \u2264 n , such that there exists a multiple of k in S . Then, delete the smallest multiple of k from S . This operation requires a cost of k . You are given a set T , which is a subset of S . Find the minimum possible total cost of operations such that S would be transformed into T . We can show that such a transformation is always possible.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The description of the test cases follows. The first line contains a single positive integer n ( 1 \u2264 n \u2264 10^ 6 ) . The second line of each test case contains a binary string of length n , describing the set T . The i - th character of the string is ' 1' if and only if i is an element of T , and ' 0' otherwise. It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, output one non- negative integer \u2014 the minimum possible total cost of operations such that S would be transformed into T .",
    "note": "In the first test case, we shall not perform any operations as S is already equal to T , which is the set { 1, 2, 3, 4, 5, 6} . In the second test case, initially, S = { 1, 2, 3, 4, 5, 6, 7} , and T = { 1, 2, 4, 7} . We shall perform the following operations: Choose k= 3 , then delete 3 from S . Choose k= 3 , then delete 6 from S . Choose k= 5 , then delete 5 from S . The total cost is 3+ 3+ 5 = 11 . It can be shown that this is the smallest cost possible. In the third test case, initially, S = { 1, 2, 3, 4} and T = { } ( empty set) . We shall perform 4 operations of k= 1 to delete 1 , 2 , 3 , and 4 . In the fourth test case, initially, S = { 1, 2, 3, 4} and T = { 3} . We shall perform two operations with k= 1 to delete 1 and 2 , then perform one operation with k= 2 to delete 4 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1734C"
  },
  {
    "title": "Select Three Sticks",
    "url": "https://codeforces.com/problemset/problem/1734/A",
    "history": "You are given n sticks with positive integral length a_ 1, a_ 2, . . . , a_ n . You can perform the following operation any number of times ( possibly zero) : choose one stick, then either increase or decrease its length by 1 . After each operation, all sticks should have positive lengths. What is the minimum number of operations that you have to perform such that it is possible to select three of the n sticks and use them without breaking to form an equilateral triangle? An equilateral triangle is a triangle where all of its three sides have the same length.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 300 ) \u2014 the number of sticks. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the lengths of the sticks. It is guaranteed that the sum of n over all test cases does not exceed 300 .",
    "output": "For each test case, print one integer on a single line \u2014 the minimum number of operations to be made.",
    "note": "In the first test case, you can increase the length of the first stick by 1 , then decrease the length of the third stick by 1 . In total, you perform 2 operations, such that the three sticks form an equilateral triangle of side length 2 . In the fourth test case, you can decrease the length of the seventh stick by 1 . An equilateral triangle of side length 1 can be selected and formed by the second, fourth, and seventh sticks.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1734A"
  },
  {
    "title": "Zero-One (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1733/D2",
    "history": "This is the hard version of this problem. In this version, n \u2264 5000 holds, and this version has no restriction between x and y . You can make hacks only if both versions of the problem are solved. You are given two binary strings a and b , both of length n . You can do the following operation any number of times ( possibly zero) . Select two indices l and r ( l < r ) . Change a_ l to ( 1 - a_ l) , and a_ r to ( 1 - a_ r) . If l + 1 = r , the cost of the operation is x . Otherwise, the cost is y . You have to find the minimum cost needed to make a equal to b or say there is no way to do so.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of three lines. The first line of each test case contains three integers n , x , and y ( 5 \u2264 n \u2264 5000 , 1 \u2264 x, y \u2264 10^ 9 ) \u2014 the length of the strings, and the costs per operation. The second line of each test case contains the string a of length n . The string only consists of digits 0 and 1 . The third line of each test case contains the string b of length n . The string only consists of digits 0 and 1 . It is guaranteed that the sum of n over all test cases doesn' t exceed 5000 .",
    "output": "For each test case, if there is no way to make a equal to b , print - 1 . Otherwise, print the minimum cost needed to make a equal to b .",
    "note": "In the first test case, selecting indices 2 and 3 costs 8 , which is the minimum. In the second test case, we can perform the following operations. Select indices 1 and 2 . It costs 2 , and a is 110001 now. Select indices 2 and 3 . It costs 2 , and a is 101001 now. Select indices 3 and 4 . It costs 2 , and a is 100101 now. Select indices 4 and 5 . It costs 2 , and a is 100011 now. Select indices 5 and 6 . It costs 2 , and a is 100000 now. The total cost is 10 . In the third test case, we cannot make a equal to b using any number of operations. In the fourth test case, we can perform the following operations. Select indices 3 and 6 . It costs 3 , and a is 0101011 now. Select indices 4 and 6 . It costs 3 , and a is 0100001 now. The total cost is 6 . In the fifth test case, we can perform the following operations. Select indices 1 and 6 . It costs 4 , and a is 110000 now. Select indices 2 and 3 . It costs 3 , and a is 101000 now. The total cost is 7 . In the sixth test case, we don' t have to perform any operation.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1733D2"
  },
  {
    "title": "Zero-One (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1733/D1",
    "history": "This is the easy version of the problem. In this version, n \u2264 3000 , x \u2265 y holds. You can make hacks only if both versions of the problem are solved. You are given two binary strings a and b , both of length n . You can do the following operation any number of times ( possibly zero) . Select two indices l and r ( l < r ) . Change a_ l to ( 1 - a_ l) , and a_ r to ( 1 - a_ r) . If l + 1 = r , the cost of the operation is x . Otherwise, the cost is y . You have to find the minimum cost needed to make a equal to b or say there is no way to do so.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 600 ) \u2014 the number of test cases. Each test case consists of three lines. The first line of each test case contains three integers n , x , and y ( 5 \u2264 n \u2264 3000 , 1 \u2264 y \u2264 x \u2264 10^ 9 ) \u2014 the length of the strings, and the costs per operation. The second line of each test case contains the string a of length n . The string only consists of digits 0 and 1 . The third line of each test case contains the string b of length n . The string only consists of digits 0 and 1 . It is guaranteed that the sum of n over all test cases doesn' t exceed 3000 .",
    "output": "For each test case, if there is no way to make a equal to b , print - 1 . Otherwise, print the minimum cost needed to make a equal to b .",
    "note": "In the first test case, selecting indices 2 and 3 costs 8 , which is the minimum possible cost. In the second test case, we cannot make a equal to b using any number of operations. In the third test case, we can perform the following operations: Select indices 3 and 6 . It costs 3 , and a is 0101011 now. Select indices 4 and 6 . It costs 3 , and a is 0100001 now. The total cost is 6 . In the fourth test case, we don' t have to perform any operations.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1733D1"
  },
  {
    "title": "Consecutive Sum",
    "url": "https://codeforces.com/problemset/problem/1733/A",
    "history": "You are given an array a with n integers. You can perform the following operation at most k times: Choose two indices i and j , in which i k = j k ( 1 \u2264 i < j \u2264 n ) . Swap a_ i and a_ j . After performing all operations, you have to select k consecutive elements, and the sum of the k elements becomes your score. Find the maximum score you can get. Here x y denotes the remainder from dividing x by y .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 600 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 100 ) \u2014 the length of the array and the number in the statement above. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array itself.",
    "output": "For each test case, print the maximum score you can get, one per line.",
    "note": "In the first test case, we can get a score of 11 if we select a_ 1, a_ 2 without performing any operations. In the third test case, we can get a score of 15 if we first swap a_ 1 with a_ 4 and then select a_ 3, a_ 4, a_ 5 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1733A"
  },
  {
    "title": "Sheikh (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1732/C2",
    "history": "This is the hard version of the problem. The only difference is that in this version q = n . You are given an array of integers a_ 1, a_ 2, . . . , a_ n . The cost of a subsegment of the array [ l, r] , 1 \u2264 l \u2264 r \u2264 n , is the value f( l, r) = sum( l, r) - xor( l, r) , where sum( l, r) = a_ l + a_ l+ 1 + . . . + a_ r , and xor( l, r) = a_ l \u2295 a_ l+ 1\u2295. . . \u2295 a_ r ( \u2295 stands for bitwise XOR) . You will have q queries. Each query is given by a pair of numbers L_ i , R_ i , where 1 \u2264 L_ i \u2264 R_ i \u2264 n . You need to find the subsegment [ l, r] , L_ i \u2264 l \u2264 r \u2264 R_ i , with maximum value f( l, r) . If there are several answers, then among them you need to find a subsegment with the minimum length, that is, the minimum value of r - l + 1 .",
    "input": "Each test consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains two integers n and q ( 1 \u2264 n \u2264 10^ 5 , q = n ) \u2014 the length of the array and the number of queries. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 array elements. i - th of the next q lines of each test case contains two integers L_ i and R_ i ( 1 \u2264 L_ i \u2264 R_ i \u2264 n ) \u2014 the boundaries in which we need to find the segment. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 . It is guaranteed that L_ 1 = 1 and R_ 1 = n .",
    "output": "For each test case print q pairs of numbers L_ i \u2264 l \u2264 r \u2264 R_ i such that the value f( l, r) is maximum and among such the length r - l + 1 is minimum. If there are several correct answers, print any of them.",
    "note": "In all test cases, the first query is considered. In the first test case, f( 1, 1) = 0 - 0 = 0 . In the second test case, f( 1, 1) = 5 - 5 = 0 , f( 2, 2) = 10 - 10 = 0 . Note that f( 1, 2) = ( 10 + 5) - ( 10 \u2295 5) = 0 , but we need to find a subsegment with the minimum length among the maximum values of f( l, r) . So, only segments [ 1, 1] and [ 2, 2] are the correct answers. In the fourth test case, f( 2, 3) = ( 12 + 8) - ( 12 \u2295 8) = 16 . There are two correct answers in the fifth test case, since f( 2, 3) = f( 3, 4) and their lengths are equal.",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1732C2"
  },
  {
    "title": "Sheikh (Easy version)",
    "url": "https://codeforces.com/problemset/problem/1732/C1",
    "history": "This is the easy version of the problem. The only difference is that in this version q = 1 . You are given an array of integers a_ 1, a_ 2, . . . , a_ n . The cost of a subsegment of the array [ l, r] , 1 \u2264 l \u2264 r \u2264 n , is the value f( l, r) = sum( l, r) - xor( l, r) , where sum( l, r) = a_ l + a_ l+ 1 + . . . + a_ r , and xor( l, r) = a_ l \u2295 a_ l+ 1\u2295. . . \u2295 a_ r ( \u2295 stands for bitwise XOR) . You will have q = 1 query. Each query is given by a pair of numbers L_ i , R_ i , where 1 \u2264 L_ i \u2264 R_ i \u2264 n . You need to find the subsegment [ l, r] , L_ i \u2264 l \u2264 r \u2264 R_ i , with maximum value f( l, r) . If there are several answers, then among them you need to find a subsegment with the minimum length, that is, the minimum value of r - l + 1 .",
    "input": "Each test consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains two integers n and q ( 1 \u2264 n \u2264 10^ 5 , q = 1 ) \u2014 the length of the array and the number of queries. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 array elements. i - th of the next q lines of each test case contains two integers L_ i and R_ i ( 1 \u2264 L_ i \u2264 R_ i \u2264 n ) \u2014 the boundaries in which we need to find the segment. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 . It is guaranteed that L_ 1 = 1 and R_ 1 = n .",
    "output": "For each test case print q pairs of numbers L_ i \u2264 l \u2264 r \u2264 R_ i such that the value f( l, r) is maximum and among such the length r - l + 1 is minimum. If there are several correct answers, print any of them.",
    "note": "In the first test case, f( 1, 1) = 0 - 0 = 0 . In the second test case, f( 1, 1) = 5 - 5 = 0 , f( 2, 2) = 10 - 10 = 0 . Note that f( 1, 2) = ( 10 + 5) - ( 10 \u2295 5) = 0 , but we need to find a subsegment with the minimum length among the maximum values of f( l, r) . So, only segments [ 1, 1] and [ 2, 2] are the correct answers. In the fourth test case, f( 2, 3) = ( 12 + 8) - ( 12 \u2295 8) = 16 . There are two correct answers in the fifth test case, since f( 2, 3) = f( 3, 4) and their lengths are equal.",
    "topics": [
      "binary search",
      "bitmasks",
      "greedy",
      "two pointers"
    ],
    "id": "1732C1"
  },
  {
    "title": "Ugu",
    "url": "https://codeforces.com/problemset/problem/1732/B",
    "history": "A binary string is a string consisting only of the characters 0 and 1. You are given a binary string s_ 1 s_ 2 . . . s_ n . It is necessary to make this string non- decreasing in the least number of operations. In other words, each character should be not less than the previous. In one operation, you can do the following: Select an arbitrary index 1 \u2264 i \u2264 n in the string; For all j \u2265 i , change the value in the j - th position to the opposite, that is, if s_ j = 1 , then make s_ j = 0 , and vice versa. What is the minimum number of operations needed to make the string non- decreasing?",
    "input": "Each test consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test cases a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the string. The second line of each test case contains a binary string s of length n . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the minimum number of operations that are needed to make the string non- decreasing.",
    "note": "In the first test case, the string is already non- decreasing. In the second test case, you can select i = 1 and then s = 01 . In the third test case, you can select i = 1 and get s = 010 , and then select i = 2 . As a result, we get s = 001 , that is, a non- decreasing string. In the sixth test case, you can select i = 5 at the first iteration and get s = 100001 . Then choose i = 2 , then s = 111110 . Then we select i = 1 , getting the non- decreasing string s = 000001 .",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1732B"
  },
  {
    "title": "Graph Cost",
    "url": "https://codeforces.com/problemset/problem/1731/E",
    "history": "You are given an initially empty undirected graph with n nodes, numbered from 1 to n ( i. e. n nodes and 0 edges) . You want to add m edges to the graph, so the graph won' t contain any self- loop or multiple edges. If an edge connecting two nodes u and v is added, its weight must be equal to the greatest common divisor of u and v , i. e. ( u, v) . In order to add edges to the graph, you can repeat the following process any number of times ( possibly zero) : choose an integer k \u2265 1 ; add exactly k edges to the graph, each having a weight equal to k + 1 . Adding these k edges costs k + 1 in total. Note that you can' t create self- loops or multiple edges. Also, if you can' t add k edges of weight k + 1 , you can' t choose such k . For example, if you can add 5 more edges to the graph of weight 6 , you may add them, and it will cost 6 for the whole pack of 5 edges. But if you can only add 4 edges of weight 6 to the graph, you can' t perform this operation for k = 5 . Given two integers n and m , find the minimum total cost to form a graph of n vertices and exactly m edges using the operation above. If such a graph can' t be constructed, output - 1 . Note that the final graph may consist of several connected components.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 10^ 6 ; 1 \u2264 m \u2264n( n- 1) / 2 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print the minimum cost to build the graph, or - 1 if you can' t build such a graph.",
    "note": "In the first test case, we can add an edge between the vertices 2 and 4 with = 2 . This is the only possible way to add 1 edge that will cost 2 . In the second test case, there is no way to add 10 edges, so the answer is - 1 . In the third test case, we can add the following edges: k = 1 : edge of weight 2 between vertices 2 and 4 ( ( 2, 4) = 2 ) . Cost: 2 ; k = 1 : edge of weight 2 between vertices 4 and 6 ( ( 4, 6) = 2 ) . Cost: 2 ; k = 2 : edges of weight 3 : ( 3, 6) and ( 3, 9) ( ( 3, 6) = ( 3, 9) = 3 ) . Cost: 3 . As a result, we added 1 + 1 + 2 = 4 edges with total cost 2 + 2 + 3 = 7 , which is the minimal possible cost.",
    "topics": [
      "dp",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1731E"
  },
  {
    "title": "Kill Demodogs",
    "url": "https://codeforces.com/problemset/problem/1731/B",
    "history": "Demodogs from the Upside- down have attacked Hawkins again. El wants to reach Mike and also kill as many Demodogs in the way as possible. Hawkins can be represented as an n \u00d7 n grid. The number of Demodogs in a cell at the i - th row and the j - th column is i \u00b7 j . El is at position ( 1, 1) of the grid, and she has to reach ( n, n) where she can find Mike. The only directions she can move are the right ( from ( i, j) to ( i, j + 1) ) and the down ( from ( i, j) to ( i + 1, j) ) . She can' t go out of the grid, as there are doors to the Upside- down at the boundaries. Calculate the maximum possible number of Demodogs ans she can kill on the way, considering that she kills all Demodogs in cells she visits ( including starting and finishing cells) . Print 2022 \u00b7ans modulo 10^ 9 + 7 . Modulo 10^ 9 + 7 because the result can be too large and multiplied by 2022 because we are never gonna see it again! ( Note, you firstly multiply by 2022 and only after that take the remainder. )",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains one integer n ( 2 \u2264 n \u2264 10^ 9 ) \u2014 the size of the grid.",
    "output": "For each test case, print a single integer \u2014 the maximum number of Demodogs that can be killed multiplied by 2022 , modulo 10^ 9 + 7 .",
    "note": "In the first test case, for any path chosen by her the number of Demodogs to be killed would be 7 , so the answer would be 2022 \u00b7 7 = 14154 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1731B"
  },
  {
    "title": "Joey Takes Money",
    "url": "https://codeforces.com/problemset/problem/1731/A",
    "history": "Joey is low on money. His friend Chandler wants to lend Joey some money, but can' t give him directly, as Joey is too proud of himself to accept it. So, in order to trick him, Chandler asks Joey to play a game. In this game, Chandler gives Joey an array a_ 1, a_ 2, . . . , a_ n ( n \u2265 2 ) of positive integers ( a_ i \u2265 1 ) . Joey can perform the following operation on the array any number of times: Take two indices i and j ( 1 \u2264 i < j \u2264 n) . Choose two integers x and y ( x, y \u2265 1 ) such that x \u00b7 y = a_ i \u00b7 a_ j . Replace a_ i by x and a_ j by y . In the end, Joey will get the money equal to the sum of elements of the final array. Find the maximum amount of money ans Joey can get but print 2022 \u00b7ans . Why multiplied by 2022 ? Because we are never gonna see it again! It is guaranteed that the product of all the elements of the array a doesn' t exceed 10^ 12 .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 4000 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 50 ) \u2014 the length of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the array itself. It' s guaranteed that the product of all a_ i doesn' t exceed 10^ 12 ( i. e. a_ 1 \u00b7 a_ 2 \u00b7. . . \u00b7 a_ n \u2264 10^ 12 ) .",
    "output": "For each test case, print the maximum money Joey can get multiplied by 2022 .",
    "note": "In the first test case, Joey can do the following: He chooses i = 1 and j = 2 ( so he has a[ i] \u00b7 a[ j] = 6 ) , chooses x = 6 and y = 1 and makes a[ i] = 6 and a[ j] = 1 . [ 2, 3, 2] [ 6, 1, 2] He chooses i = 1 and j = 3 ( so he has a[ i] \u00b7 a[ j] = 12 ) , chooses x = 12 and y = 1 and makes a[ i] = 12 and a[ j] = 1 . [ 6, 1, 2] [ 12, 1, 1] The sum is 14 which is the maximum of all possible sums. The answer is 2022 \u00b7 14 = 28308 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1731A"
  },
  {
    "title": "Minimum Notation",
    "url": "https://codeforces.com/problemset/problem/1730/C",
    "history": "You have a string s consisting of digits from 0 to 9 inclusive. You can perform the following operation any ( possibly zero) number of times: You can choose a position i and delete a digit d on the i - th position. Then insert the digit min( d + 1, 9) on any position ( at the beginning, at the end or in between any two adjacent digits) . What is the lexicographically smallest string you can get by performing these operations? A string a is lexicographically smaller than a string b of the same length if and only if the following holds: in the first position where a and b differ, the string a has a smaller digit than the corresponding digit in b .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of a single line that contains one string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) \u2014 the string consisting of digits. Please note that s is just a string consisting of digits, so leading zeros are allowed. It is guaranteed that the sum of lengths of s over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print a single string \u2014 the minimum string that is possible to obtain.",
    "note": "In the first test case: Delete 8 and insert 9 at the end of the notation. The resulting notation is 04299 . Delete 4 and insert 5 in the 3 - rd position of the notation. The resulting notation is 02599 . Nothing needs to be done in the second and third test cases.",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1730C"
  },
  {
    "title": "Meeting on the Line",
    "url": "https://codeforces.com/problemset/problem/1730/B",
    "history": "n people live on the coordinate line, the i - th one lives at the point x_ i ( 1 \u2264 i \u2264 n ) . They want to choose a position x_ 0 to meet. The i - th person will spend | x_ i - x_ 0| minutes to get to the meeting place. Also, the i - th person needs t_ i minutes to get dressed, so in total he or she needs t_ i + | x_ i - x_ 0| minutes. Here | y| denotes the absolute value of y . These people ask you to find a position x_ 0 that minimizes the time in which all n people can gather at the meeting place.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of three lines. The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of people. The second line contains n integers x_ 1, x_ 2, . . . , x_ n ( 0 \u2264 x_ i \u2264 10^ 8 ) \u2014 the positions of the people. The third line contains n integers t_ 1, t_ 2, . . . , t_ n ( 0 \u2264 t_ i \u2264 10^ 8 ) , where t_ i is the time i - th person needs to get dressed. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single real number \u2014 the optimum position x_ 0 . It can be shown that the optimal position x_ 0 is unique. Your answer will be considered correct if its absolute or relative error does not exceed 10^ \u22126 . Formally, let your answer be a , the jury' s answer be b . Your answer will be considered correct if | a\u2212b| / max( 1, | b| ) \u2264 10^ \u22126 .",
    "note": "In the 1 - st test case there is one person, so it is efficient to choose his or her position for the meeting place. Then he or she will get to it in 3 minutes, that he or she need to get dressed. In the 2 - nd test case there are 2 people who don' t need time to get dressed. Each of them needs one minute to get to position 2 . In the 5 - th test case the 1 - st person needs 4 minutes to get to position 1 ( 4 minutes to get dressed and 0 minutes on the way) ; the 2 - nd person needs 2 minutes to get to position 1 ( 1 minute to get dressed and 1 minute on the way) ; the 3 - rd person needs 4 minutes to get to position 1 ( 2 minutes to get dressed and 2 minutes on the way) .",
    "topics": [
      "binary search",
      "geometry",
      "greedy",
      "implementation",
      "math",
      "ternary search"
    ],
    "id": "1730B"
  },
  {
    "title": "Planets",
    "url": "https://codeforces.com/problemset/problem/1730/A",
    "history": "One day, Vogons wanted to build a new hyperspace highway through a distant system with n planets. The i - th planet is on the orbit a_ i , there could be multiple planets on the same orbit. It' s a pity that all the planets are on the way and need to be destructed. Vogons have two machines to do that. The first machine in one operation can destroy any planet at cost of 1 Triganic Pu. The second machine in one operation can destroy all planets on a single orbit in this system at the cost of c Triganic Pus. Vogons can use each machine as many times as they want. Vogons are very greedy, so they want to destroy all planets with minimum amount of money spent. Can you help them to know the minimum cost of this project?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of two lines. The first line contains two integers n and c ( 1 \u2264 n, c \u2264 100 ) \u2014 the number of planets and the cost of the second machine usage. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the orbit of the i - th planet.",
    "output": "For each test case print a single integer \u2014 the minimum cost of destroying all planets.",
    "note": "In the first test case, the cost of using both machines is the same, so you can always use the second one and destroy all planets in orbit 1 , all planets in orbit 2 , all planets in orbit 4 , all planets in orbit 5 . In the second test case, it is advantageous to use the second machine for 2 Triganic Pus to destroy all the planets in orbit 2 , then destroy the remaining two planets using the first machine. In the third test case, you can use the first machine twice or the second machine once. In the fourth test case, it is advantageous to use the first machine twice.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1730A"
  },
  {
    "title": "Friends and the Restaurant",
    "url": "https://codeforces.com/problemset/problem/1729/D",
    "history": "A group of n friends decide to go to a restaurant. Each of the friends plans to order meals for x_ i burles and has a total of y_ i burles ( 1 \u2264 i \u2264 n ) . The friends decide to split their visit to the restaurant into several days. Each day, some group of at least two friends goes to the restaurant. Each of the friends visits the restaurant no more than once ( that is, these groups do not intersect) . These groups must satisfy the condition that the total budget of each group must be not less than the amount of burles that the friends in the group are going to spend at the restaurant. In other words, the sum of all x_ i values in the group must not exceed the sum of y_ i values in the group. What is the maximum number of days friends can visit the restaurant? For example, let there be n = 6 friends for whom x = [ 8, 3, 9, 2, 4, 5 ] and y = [ 5, 3, 1, 4, 5, 10 ] . Then: first and sixth friends can go to the restaurant on the first day. They will spend 8+ 5= 13 burles at the restaurant, and their total budget is 5+ 10= 15 burles. Since 15 \u2265 13 , they can actually form a group. friends with indices 2, 4, 5 can form a second group. They will spend 3+ 2+ 4= 9 burles at the restaurant, and their total budget will be 3+ 4+ 5= 12 burles ( 12 \u2265 9 ) . It can be shown that they will not be able to form more groups so that each group has at least two friends and each group can pay the bill. So, the maximum number of groups the friends can split into is 2 . Friends will visit the restaurant for a maximum of two days. Note that the 3 - rd friend will not visit the restaurant at all. Output the maximum number of days the friends can visit the restaurant for given n , x and y .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of friends. The second line of each test case contains exactly n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 9 ) . The value of x_ i corresponds to the number of burles that the friend numbered i plans to spend at the restaurant. The third line of each test case contains exactly n integers y_ 1, y_ 2, . . . , y_ n ( 1 \u2264 y_ i \u2264 10^ 9 ) . The value y_ i corresponds to the number of burles that the friend numbered i has. It is guaranteed that the sum of n values over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print the maximum number of days to visit the restaurant. If friends cannot form even one group to visit the restaurant, print 0.",
    "note": "The first test case in explained in the problem statement. In the second test case, friends cannot form at least one group of two or more people. In the third test case, one way to visit the restaurant in one day is to go in a group of all three friends ( 1+ 3+ 10 \u2265 2+ 3+ 7 ) . Note that they do not have the option of splitting into two groups.",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1729D"
  },
  {
    "title": "Decode String",
    "url": "https://codeforces.com/problemset/problem/1729/B",
    "history": "Polycarp has a string s consisting of lowercase Latin letters. He encodes it using the following algorithm. He goes through the letters of the string s from left to right and for each letter Polycarp considers its number in the alphabet: if the letter number is single- digit number ( less than 10 ) , then just writes it out; if the letter number is a two- digit number ( greater than or equal to 10 ) , then it writes it out and adds the number 0 after. For example, if the string s is code, then Polycarp will encode this string as follows: ' c' \u2014 is the 3 - rd letter of the alphabet. Consequently, Polycarp adds 3 to the code ( the code becomes equal to 3) ; ' o' \u2014 is the 15 - th letter of the alphabet. Consequently, Polycarp adds 15 to the code and also 0 ( the code becomes 3150) ; ' d' \u2014 is the 4 - th letter of the alphabet. Consequently, Polycarp adds 4 to the code ( the code becomes 31504) ; ' e' \u2014 is the 5 - th letter of the alphabet. Therefore, Polycarp adds 5 to the code ( the code becomes 315045) . Thus, code of string code is 315045. You are given a string t resulting from encoding the string s . Your task is to decode it ( get the original string s by t ) .",
    "input": "The first line of the input contains an integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of test cases in the input. The descriptions of the test cases follow. The first line of description of each test case contains one integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of the given code. The second line of the description of each test case contains a string t of length n \u2014 the given code. It is guaranteed that there exists such a string of lowercase Latin letters, as a result of encoding which the string t is obtained.",
    "output": "For each test case output the required string s \u2014 the string that gives string t as the result of encoding. It is guaranteed that such a string always exists. It can be shown that such a string is always unique.",
    "note": "The first test case is explained above. In the second test case, the answer is aj. Indeed, the number of the letter a is equal to 1 , so 1 will be appended to the code. The number of the letter j is 10 , so 100 will be appended to the code. The resulting code is 1100. There are no zeros in the third test case, which means that the numbers of all letters are less than 10 and are encoded as one digit. The original string is abacaba. In the fourth test case, the string s is equal to ll. The letter l has the number 12 and is encoded as 120. So ll is indeed 120120.",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1729B"
  },
  {
    "title": "Fishermen",
    "url": "https://codeforces.com/problemset/problem/1728/F",
    "history": "There are n fishermen who have just returned from a fishing trip. The i - th fisherman has caught a fish of size a_ i . The fishermen will choose some order in which they are going to tell the size of the fish they caught ( the order is just a permutation of size n ) . However, they are not entirely honest, and they may \" increase\" the size of the fish they have caught. Formally, suppose the chosen order of the fishermen is [ p_ 1, p_ 2, p_ 3, . . . , p_ n] . Let b_ i be the value which the i - th fisherman in the order will tell to the other fishermen. The values b_ i are chosen as follows: the first fisherman in the order just honestly tells the actual size of the fish he has caught, so b_ 1 = a_ p_ 1 ; every other fisherman wants to tell a value that is strictly greater than the value told by the previous fisherman, and is divisible by the size of the fish that the fisherman has caught. So, for i > 1 , b_ i is the smallest integer that is both strictly greater than b_ i- 1 and divisible by a_ p_ i . For example, let n = 7 , a = [ 1, 8, 2, 3, 2, 2, 3] . If the chosen order is p = [ 1, 6, 7, 5, 3, 2, 4] , then: b_ 1 = a_ p_ 1 = 1 ; b_ 2 is the smallest integer divisible by 2 and greater than 1 , which is 2 ; b_ 3 is the smallest integer divisible by 3 and greater than 2 , which is 3 ; b_ 4 is the smallest integer divisible by 2 and greater than 3 , which is 4 ; b_ 5 is the smallest integer divisible by 2 and greater than 4 , which is 6 ; b_ 6 is the smallest integer divisible by 8 and greater than 6 , which is 8 ; b_ 7 is the smallest integer divisible by 3 and greater than 8 , which is 9 . You have to choose the order of fishermen in a way that yields the minimum possible \u2211_ i= 1^ n b_ i .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of fishermen. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) .",
    "output": "Print one integer \u2014 the minimum possible value of \u2211_ i= 1^ n b_ i you can obtain by choosing the order of fishermen optimally.",
    "note": "",
    "topics": [
      "flows",
      "graph matchings",
      "greedy"
    ],
    "id": "1728F"
  },
  {
    "title": "Red-Black Pepper",
    "url": "https://codeforces.com/problemset/problem/1728/E",
    "history": "Monocarp is going to host a party for his friends. He prepared n dishes and is about to serve them. First, he has to add some powdered pepper to each of them \u2014 otherwise, the dishes will be pretty tasteless. The i - th dish has two values a_ i and b_ i \u2014 its tastiness with red pepper added or black pepper added, respectively. Monocarp won' t add both peppers to any dish, won' t add any pepper multiple times, and won' t leave any dish without the pepper added. Before adding the pepper, Monocarp should first purchase the said pepper in some shop. There are m shops in his local area. The j - th of them has packages of red pepper sufficient for x_ j servings and packages of black pepper sufficient for y_ j servings. Monocarp goes to exactly one shop, purchases multiple ( possibly, zero) packages of each pepper in such a way that each dish will get the pepper added once, and no pepper is left. More formally, if he purchases x red pepper packages and y black pepper packages, then x and y should be non- negative and x \u00b7 x_ j + y \u00b7 y_ j should be equal to n . For each shop, determine the maximum total tastiness of the dishes after Monocarp buys pepper packages only in this shop and adds the pepper to the dishes. If it' s impossible to purchase the packages in the said way, print - 1.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of dishes. The i - th of the next n lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 9 ) \u2014 the tastiness of the i - th dish with red pepper added or black pepper added, respectively. The next line contains a single integer m ( 1 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of shops. The j - th of the next m lines contains two integers x_ j and y_ j ( 1 \u2264 x_ j, y_ j \u2264 n ) \u2014 the number of servings the red and the black pepper packages are sufficient for in the j - th shop, respectively.",
    "output": "Print m integers. For each shop, print the maximum total tastiness of the dishes after Monocarp buys pepper packages only in this shop and adds the pepper to the dishes. If it' s impossible to purchase the packages so that each dish will get the pepper added once and no pepper is left, print - 1.",
    "note": "Consider the first example. In the first shop, Monocarp can only buy 0 red pepper packages and 1 black pepper package. Black pepper added to all dishes will sum up to 10 + 50 + 2 = 62 . In the second shop, Monocarp can buy any number of red and black pepper packages: 0 and 3 , 1 and 2 , 2 and 1 or 3 and 0 . The optimal choice turns out to be either 1 and 2 or 2 and 1 . Monocarp can add black pepper to the first dish, red pepper to the second dish and any pepper to the third dish, the total is 10 + 100 + 2 = 112 . In the third shop, Monocarp can only buy 1 red pepper package and 0 black pepper packages. Red pepper added to all dishes will sum up to 5 + 100 + 2 = 107 . In the fourth shop, Monocarp can only buy an even total number of packages. Since n is odd, it' s impossible to get exactly n packages. Thus, the answer is - 1 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1728E"
  },
  {
    "title": "Digital Logarithm",
    "url": "https://codeforces.com/problemset/problem/1728/C",
    "history": "Let' s define f( x) for a positive integer x as the length of the base- 10 representation of x without leading zeros. I like to call it a digital logarithm. Similar to a digital root, if you are familiar with that. You are given two arrays a and b , each containing n positive integers. In one operation, you do the following: pick some integer i from 1 to n ; assign either f( a_ i) to a_ i or f( b_ i) to b_ i . Two arrays are considered similar to each other if you can rearrange the elements in both of them, so that they are equal ( e. g. a_ i = b_ i for all i from 1 to n ) . What' s the smallest number of operations required to make a and b similar to each other?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of the testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in each of the arrays. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i < 10^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ j < 10^ 9 ) . The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print the smallest number of operations required to make a and b similar to each other.",
    "note": "In the first testcase, you can apply the digital logarithm to b_ 1 twice. In the second testcase, the arrays are already similar to each other. In the third testcase, you can first apply the digital logarithm to a_ 1 , then to b_ 2 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1728C"
  },
  {
    "title": "Best Permutation",
    "url": "https://codeforces.com/problemset/problem/1728/B",
    "history": "Let' s define the value of the permutation p of n integers 1 , 2 , . . . , n ( a permutation is an array where each element from 1 to n occurs exactly once) as follows: initially, an integer variable x is equal to 0 ; if x < p_ 1 , then add p_ 1 to x ( set x = x + p_ 1 ) , otherwise assign 0 to x ; if x < p_ 2 , then add p_ 2 to x ( set x = x + p_ 2 ) , otherwise assign 0 to x ; . . . if x < p_ n , then add p_ n to x ( set x = x + p_ n ) , otherwise assign 0 to x ; the value of the permutation is x at the end of this process. For example, for p = [ 4, 5, 1, 2, 3, 6] , the value of x changes as follows: 0, 4, 9, 0, 2, 5, 11 , so the value of the permutation is 11 . You are given an integer n . Find a permutation p of size n with the maximum possible value among all permutations of size n . If there are several such permutations, you can print any of them.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 97 ) \u2014 the number of test cases. The only line of each test case contains one integer n ( 4 \u2264 n \u2264 100 ) .",
    "output": "For each test case, print n integers \u2014 the permutation p of size n with the maximum possible value among all permutations of size n .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1728B"
  },
  {
    "title": "Colored Balls: Revisited",
    "url": "https://codeforces.com/problemset/problem/1728/A",
    "history": "The title is a reference to the very first Educational Round from our writers team, Educational Round 18. There is a bag, containing colored balls. There are n different colors of balls, numbered from 1 to n . There are cnt_ i balls of color i in the bag. The total amount of balls in the bag is odd ( e. g. cnt_ 1 + cnt_ 2 + . . . + cnt_ n is odd) . In one move, you can choose two balls with different colors and take them out of the bag. At some point, all the remaining balls in the bag will have the same color. That' s when you can' t make moves anymore. Find any possible color of the remaining balls.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 20 ) \u2014 the number of colors. The second line contains n integers cnt_ 1, cnt_ 2, . . . , cnt_ n ( 1 \u2264cnt_ i \u2264 100 ) \u2014 the amount of balls of each color in the bag. The total amount of balls in the bag is odd ( e. g. cnt_ 1 + cnt_ 2 + . . . + cnt_ n is odd) .",
    "output": "For each testcase, print a single integer \u2014 any possible color of the remaining balls, after you made some moves and can' t make moves anymore.",
    "note": "In the first testcase, your first and only move can be one of the following: take balls with colors 1 and 2 ; take balls with colors 1 and 3 ; take balls with colors 2 and 3 . After the move, exactly one ball will remain. Its color can be 3, 2 or 1 depending on the move. In the second testcase, you can' t make moves at all \u2014 there is only color of balls already. This color is 1 . In the third testcase, you can keep removing one ball of color 1 and one ball of color 2 until there are no more balls of color 1 . At the end, three balls of color 2 remain.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1728A"
  },
  {
    "title": "A Certain Magical Party",
    "url": "https://codeforces.com/problemset/problem/1726/G",
    "history": "There are n people at a party. The i - th person has an amount of happiness a_ i . Every person has a certain kind of personality which can be represented as a binary integer b . If b = 0 , it means the happiness of the person will increase if he tells the story to someone strictly less happy than them. If b = 1 , it means the happiness of the person will increase if he tells the story to someone strictly more happy than them. Let us define a speaking order as an ordering of the people from left to right. Now the following process occurs. We go from left to right. The current person tells the story to all people other than himself. Note that all happiness values stay constant while this happens. After the person is done, he counts the number of people who currently have strictly less/ more happiness than him as per his kind of personality, and his happiness increases by that value. Note that only the current person' s happiness value increases. As the organizer of the party, you don' t want anyone to leave sad. Therefore, you want to count the number of speaking orders such that at the end of the process all n people have equal happiness. Two speaking orders are considered different if there exists at least one person who does not have the same position in the two speaking orders.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people. The second line contains a sequence of n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2n ) \u2014 the happiness values. The third line contains a sequence of n binary numbers b_ 1, b_ 2, . . . , b_ n ( b_ i \u2208{ 0, 1} ) \u2014 the kinds of personality.",
    "output": "Output the number of different valid speaking orders. Since this number can be large, output it modulo 998244353 .",
    "note": "Here is the explanation for the first example. One valid speaking order is [ 2, 1, 4, 3] ( here, we have written the indices of each person) . Each step shows the current happiness values and results. Step 1 : [ 1, 2, 4, 4] \u2192 Person 2 tells the story to others. Since his kind of personality is 1 , his happiness increases by 2 since persons 3 and 4 have strictly greater happiness. Step 2 : [ 1, 4, 4, 4] \u2192 Person 1 tells the story to others. Since his kind of personality is 1 , his happiness increases by 3 since persons 2 , 3 and 4 have strictly greater happiness. Step 3 : [ 4, 4, 4, 4] \u2192 Person 4 tells the story to others. Since his kind of personality is 0 , his happiness increases by 0 since no one has strictly lesser happiness. Step 4 : [ 4, 4, 4, 4] \u2192 Person 3 tells the story to others. Since his kind of personality is 0 , his happiness increases by 0 since no one has strictly lesser happiness. At the end, everyone has equal happiness. Note that [ 2, 1, 3, 4] is also a valid answer for this example. It can be shown that there is no valid ordering for the second example.",
    "topics": [
      "combinatorics",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1726G"
  },
  {
    "title": "Late For Work (submissions are not allowed)",
    "url": "https://codeforces.com/problemset/problem/1726/F",
    "history": "This problem was copied by the author from another online platform. Codeforces strongly condemns this action and therefore further submissions to this problem are not accepted. Debajyoti has a very important meeting to attend and he is already very late. Harsh, his driver, needs to take Debajyoti to the destination for the meeting as fast as possible. Harsh needs to pick up Debajyoti from his home and take him to the destination so that Debajyoti can attend the meeting in time. A straight road with n traffic lights connects the home and the destination for the interview. The traffic lights are numbered in order from 1 to n . Each traffic light cycles after t seconds. The i - th traffic light is green ( in which case Harsh can cross the traffic light) for the first g_ i seconds, and red ( in which case Harsh must wait for the light to turn green ) for the remaining ( t\u2212g_ i) seconds, after which the pattern repeats. Each light' s cycle repeats indefinitely and initially, the i - th light is c_ i seconds into its cycle ( a light with c_ i= 0 has just turned green ) . In the case that Harsh arrives at a light at the same time it changes colour, he will obey the new colour. Formally, the i - th traffic light is green from [ 0, g_ i) and red from [ g_ i, t) ( after which it repeats the cycle) . The i - th traffic light is initially at the c_ i - th second of its cycle. From the i - th traffic light, exactly d_ i seconds are required to travel to the next traffic light ( that is to the ( i+ 1) - th light) . Debajyoti' s home is located just before the first light and Debajyoti drops for the interview as soon as he passes the n - th light. In other words, no time is required to reach the first light from Debajyoti' s home or to reach the interview centre from the n - th light. Harsh does not know how much longer it will take for Debajyoti to get ready. While waiting, he wonders what is the minimum possible amount of time he will spend driving provided he starts the moment Debajyoti arrives, which can be anywhere between 0 to \u221e seconds from now. Can you tell Harsh the minimum possible amount of time he needs to spend on the road? Please note that Harsh can only start or stop driving at integer moments of time.",
    "input": "The first line of input will contain two integers, n and t ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 2 \u2264 t \u2264 10^ 9 ) denoting the number of traffic lights and the cycle length of the traffic lights respectively. n lines of input follow. The i - th line will contain two integers g_ i and c_ i ( 1 \u2264 g_ i < t , 0 \u2264 c_ i < t ) describing the i - th traffic light. The following line of input contains n\u22121 integers d_ 1, d_ 2, . . . , d_ n- 1 ( 0 \u2264 d_ i \u2264 10^ 9 ) \u2014 the time taken to travel from the i - th to the ( i+ 1) - th traffic light.",
    "output": "Output a single integer \u2014 the minimum possible amount of time Harsh will spend driving.",
    "note": "In the first example, Harsh can do the following: Initially, the 5 traffic lights are at the following seconds in their cycle: { 2, 3, 6, 2, 0} . An optimal time for Harsh to start is if Debajyoti arrives after 1 second. Note that this 1 second will not be counted in the final answer. The lights will be now at { 3, 4, 7, 3, 1} , so Harsh can drive from the 1 - st light to the 2 - nd light, which requires 1 second to travel. The lights are now at { 4, 5, 8, 4, 2} , so Harsh can continue driving, without stopping, to the 3 - rd light, which requires 2 seconds to travel. The lights are now at { 6, 7, 0, 6, 4} , so Harsh continues to the 4 - th light, which requires 3 seconds to travel. The lights are now at { 9, 0, 3, 9, 7} . Harsh must wait 1 second for the 4 - th light to turn green before going to the 5 - th light, which requires 4 seconds to travel. The lights are now at { 4, 5, 8, 4, 2} , so Harsh can continue traveling, without stopping, to the meeting destination. The total time that Harsh had to drive for is 1+ 2+ 3+ 1+ 4= 11 seconds. In the second example, Harsh can do the following: Initially, the 6 traffic lights are at the following seconds in their cycle: { 3, 5, 0, 8, 7, 6} . An optimal time for Harsh to start is if Debajyoti arrives after 1 second. Note that this 1 second will not be counted in the final answer. The lights will be now at { 4, 6, 1, 0, 8, 7} , so Harsh can drive from the 1 - st light to the 2 - nd light, which requires 0 seconds to travel. The lights are still at { 4, 6, 1, 0, 8, 7} . Harsh must wait 3 seconds for the 2 - nd light to turn green, before going to the 3 - rd light, which requires 0 seconds to travel. The lights are now at { 7, 0, 4, 3, 2, 1} , so Harsh continues to the 4 - th light, which requires 0 seconds to travel. The lights are still at { 7, 0, 4, 3, 2, 1} , so Harsh continues to the 5 - th light, which requires 0 seconds to travel. The lights are still at { 7, 0, 4, 3, 2, 1} , so Harsh continues to the 6 - th light, which requires 0 seconds to travel. The lights are still at { 7, 0, 4, 3, 2, 1} , so Harsh can continue traveling, without stopping, to the meeting destination. The total time that Harsh had to drive for is 0+ 3+ 0+ 0+ 0= 3 seconds.",
    "topics": [
      "data structures",
      "greedy",
      "schedules",
      "shortest paths"
    ],
    "id": "1726F"
  },
  {
    "title": "Jatayu's Balanced Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/1726/C",
    "history": "Last summer, Feluda gifted Lalmohan- Babu a balanced bracket sequence s of length 2 n . Topshe was bored during his summer vacations, and hence he decided to draw an undirected graph of 2 n vertices using the balanced bracket sequence s . For any two distinct vertices i and j ( 1 \u2264 i < j \u2264 2 n ) , Topshe draws an edge ( undirected and unweighted) between these two nodes if and only if the subsegment s[ i . . . j] forms a balanced bracket sequence. Determine the number of connected components in Topshe' s graph. See the Notes section for definitions of the underlined terms.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of opening brackets in string s . The second line of each test case contains a string s of length 2 n \u2014 a balanced bracket sequence consisting of n opening brackets \" ( \" , and n closing brackets \" ) \" . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of connected components in Topshe' s graph.",
    "note": "Sample explanation: In the first test case, the graph constructed from the bracket sequence ( ) , is just a graph containing nodes 1 and 2 connected by a single edge. In the second test case, the graph constructed from the bracket sequence ( ) ( ( ) ) would be the following ( containing two connected components) : Definition of Underlined Terms: A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters + and 1 . For example, sequences ( ( ) ) ( ) , ( ) , and ( ( ) ( ( ) ) ) are balanced, while ) ( , ( ( ) , and ( ( ) ) ) ( are not. The subsegment s[ l . . . r] denotes the sequence [ s_ l, s_ l + 1, . . . , s_ r] . A connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting these vertices, but adding any other vertex to X violates this rule.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1726C"
  },
  {
    "title": "Mainak and Array",
    "url": "https://codeforces.com/problemset/problem/1726/A",
    "history": "Mainak has an array a_ 1, a_ 2, . . . , a_ n of n positive integers. He will do the following operation to this array exactly once: Pick a subsegment of this array and cyclically rotate it by any amount. Formally, he can do the following exactly once: Pick two integers l and r , such that 1 \u2264 l \u2264 r \u2264 n , and any positive integer k . Repeat this k times: set a_ l= a_ l+ 1, a_ l+ 1= a_ l+ 2, . . . , a_ r- 1= a_ r, a_ r= a_ l ( all changes happen at the same time) . Mainak wants to maximize the value of ( a_ n - a_ 1) after exactly one such operation. Determine the maximum value of ( a_ n - a_ 1) that he can obtain.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2000 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 999 ) . It is guaranteed that the sum of n over all test cases does not exceed 2000 .",
    "output": "For each test case, output a single integer \u2014 the maximum value of ( a_ n - a_ 1) that Mainak can obtain by doing the operation exactly once.",
    "note": "In the first test case, we can rotate the subarray from index 3 to index 6 by an amount of 2 ( i. e. choose l = 3 , r = 6 and k = 2 ) to get the optimal array: [ 1, 3, 9, 11, 5, 7] \u27f6 [ 1, 3, 5, 7, 9, 11] So the answer is a_ n - a_ 1 = 11 - 1 = 10 . In the second testcase, it is optimal to rotate the subarray starting and ending at index 1 and rotating it by an amount of 2 . In the fourth testcase, it is optimal to rotate the subarray starting from index 1 to index 4 and rotating it by an amount of 3 . So the answer is 8 - 1 = 7 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1726A"
  },
  {
    "title": "Basketball Together",
    "url": "https://codeforces.com/problemset/problem/1725/B",
    "history": "A basketball competition is held where the number of players in a team does not have a maximum or minimum limit ( not necessarily 5 players in one team for each match) . There are N candidate players in the competition that will be trained by Pak Chanek, the best basketball coach on earth. The i - th candidate player has a power of P_ i . Pak Chanek will form zero or more teams from the N candidate players on the condition that each candidate player may only join in at most one team. Each of Pak Chanek' s teams will be sent to compete once with an enemy team that has a power of D . In each match, the team sent is said to defeat the enemy team if the sum of powers from the formed players is strictly greater than D . One of Pak Chanek' s skills is that when a team that has been formed plays in a match, he can change the power of each player in the team to be equal to the biggest player power from the team. Determine the maximum number of wins that can be achieved by Pak Chanek.",
    "input": "The first line contains two integers N and D ( 1 \u2264 N \u2264 10^ 5 , 1 \u2264 D \u2264 10^ 9 ) \u2014 the number of candidate players and the power of the enemy team. The second line contains N integers P_ 1, P_ 2, . . . , P_ N ( 1 \u2264 P_ i \u2264 10^ 9 ) \u2014 the powers of all candidate players.",
    "output": "A line containing an integer representing the maximum number of wins that can be achieved by Pak Chanek.",
    "note": "The 1 - st team formed is a team containing players 4 and 6 . The power of each player in the team becomes 100 . So the total power of the team is 100 + 100 = 200 > 180 . The 2 - nd team formed is a team containing players 1 , 2 , and 5 . The power of each player in the team becomes 90 . So the total power of the team is 90 + 90 + 90 = 270 > 180 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1725B"
  },
  {
    "title": "Even-Odd XOR",
    "url": "https://codeforces.com/problemset/problem/1722/G",
    "history": "Given an integer n , find any array a of n distinct nonnegative integers less than 2^ 31 such that the bitwise XOR of the elements on odd indices equals the bitwise XOR of the elements on even indices.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 629 ) \u2014 the number of test cases. Then t lines follow, each containing a single integer n ( 3 \u2264 n \u2264 2\u00b710^ 5) \u2014 the length of the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, output one line containing n distinct integers that satisfy the conditions. If there are multiple answers, you can output any of them.",
    "note": "In the first test case the XOR on odd indices is 4 \u2295 1 \u2295 0 \u2295 7 = 2 and the XOR on even indices is 2 \u2295 5 \u2295 6 \u2295 3= 2 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1722G"
  },
  {
    "title": "Line",
    "url": "https://codeforces.com/problemset/problem/1722/D",
    "history": "There are n people in a horizontal line, each looking either to the left or the right. Each person counts the number of people in the direction they are looking. The value of the line is the sum of each person' s count. For example, in the arrangement LRRLL, where L stands for a person looking left and R stands for a person looking right, the counts for each person are [ 0, 3, 2, 3, 4] , and the value is 0+ 3+ 2+ 3+ 4= 12 . You are given the initial arrangement of people in the line. For each k from 1 to n , determine the maximum value of the line if you can change the direction of at most k people.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the line. The following line contains a string consisting of n characters, each of which is either L or R, representing a person facing left or right, respectively \u2014 the description of the line. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 . Please note that the answer for some test cases won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "output": "For each test case, output n space- separated non- negative integers \u2014 the maximum value of the line if you can change the direction of at most k people for each k from 1 to n , inclusive.",
    "note": "In the first test case: k= 1 : change the direction of 1 person to make the line RLR. The total value is 2+ 1+ 0= 3 . k= 2 : change the direction of 2 people to make the line RLL. The total value is 2+ 1+ 2= 5 . k= 3 : change the direction of 2 people to make the line RLL. The total value is 2+ 1+ 2= 5 . Note that you have to change the direction of at most k people. In the second test case, it is optimal to only change the direction of the first person for all k from 1 to 5 ( that is, make the line RRRLL) .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1722D"
  },
  {
    "title": "Maximum AND",
    "url": "https://codeforces.com/problemset/problem/1721/D",
    "history": "You are given two arrays a and b , consisting of n integers each. Let' s define a function f( a, b) as follows: let' s define an array c of size n , where c_ i = a_ i \u2295 b_ i ( \u2295 denotes bitwise XOR) ; the value of the function is c_ 1 & c_ 2 & \u22ef& c_ n ( i. e. bitwise AND of the entire array c ) . Find the maximum value of the function f( a, b) if you can reorder the array b in an arbitrary way ( leaving the initial order is also an option) .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of arrays a and b . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i < 2^ 30 ) . The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the maximum value of the function f( a, b) if you can reorder the array b in an arbitrary way.",
    "note": "",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "divide and conquer",
      "greedy",
      "sortings"
    ],
    "id": "1721D"
  },
  {
    "title": "Min-Max Array Transformation",
    "url": "https://codeforces.com/problemset/problem/1721/C",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n , which is sorted in non- descending order. You decided to perform the following steps to create array b_ 1, b_ 2, . . . , b_ n : Create an array d consisting of n arbitrary non- negative integers. Set b_ i = a_ i + d_ i for each b_ i . Sort the array b in non- descending order. You are given the resulting array b . For each index i , calculate what is the minimum and maximum possible value of d_ i you can choose in order to get the given array b . Note that the minimum ( maximum) d_ i - s are independent of each other, i. e. they can be obtained from different possible arrays d .",
    "input": "The first line contains the single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of arrays a , b and d . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ; a_ i \u2264 a_ i+ 1 ) \u2014 the array a in non- descending order. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ; b_ i \u2264 b_ i+ 1 ) \u2014 the array b in non- descending order. Additional constraints on the input: there is at least one way to obtain the array b from the a by choosing an array d consisting of non- negative integers; the sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print two lines. In the first line, print n integers d_ 1^ min, d_ 2^ min, . . . , d_ n^ min , where d_ i^ min is the minimum possible value you can add to a_ i . Secondly, print n integers d_ 1^ max, d_ 2^ max, . . . , d_ n^ max , where d_ i^ max is the maximum possible value you can add to a_ i . All d_ i^ min and d_ i^ max values are independent of each other. In other words, for each i , d_ i^ min is just the minimum value among all possible values of d_ i .",
    "note": "In the first test case, in order to get d_ 1^ min = 5 , we can choose, for example, d = [ 5, 10, 6] . Then b = [ 2+ 5, 3+ 10, 5+ 6] = [ 7, 13, 11] = [ 7, 11, 13] . For d_ 2^ min = 4 , we can choose d = [ 9, 4, 8] . Then b = [ 2+ 9, 3+ 4, 5+ 8] = [ 11, 7, 13] = [ 7, 11, 13] .",
    "topics": [
      "binary search",
      "greedy",
      "two pointers"
    ],
    "id": "1721C"
  },
  {
    "title": "Image",
    "url": "https://codeforces.com/problemset/problem/1721/A",
    "history": "You have an image file of size 2 \u00d7 2 , consisting of 4 pixels. Each pixel can have one of 26 different colors, denoted by lowercase Latin letters. You want to recolor some of the pixels of the image so that all 4 pixels have the same color. In one move, you can choose no more than two pixels of the same color and paint them into some other color ( if you choose two pixels, both should be painted into the same color) . What is the minimum number of moves you have to make in order to fulfill your goal?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. Each of these lines contains two lowercase letters of Latin alphabet without any separators, denoting a row of pixels in the image.",
    "output": "For each test case, print one integer \u2014 the minimum number of moves you have to make so that all 4 pixels of the image have the same color.",
    "note": "Let' s analyze the test cases of the example. In the first test case, you can paint the bottom left pixel and the top right pixel ( which share the same color) into the color r, so all pixels have this color. In the second test case, two moves are enough: paint both top pixels, which have the same color c, into the color b; paint the bottom left pixel into the color b. In the third test case, all pixels already have the same color. In the fourth test case, you may leave any of the pixels unchanged, and paint all three other pixels into the color of that pixel in three moves. In the fifth test case, you can paint both top pixels into the color x.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1721A"
  },
  {
    "title": "Misha and Paintings",
    "url": "https://codeforces.com/problemset/problem/1720/E",
    "history": "Misha has a square n \u00d7 n matrix, where the number in row i and column j is equal to a_ i, j . Misha wants to modify the matrix to contain exactly k distinct integers. To achieve this goal, Misha can perform the following operation zero or more times: choose any square submatrix of the matrix ( you choose ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , such that x_ 1 \u2264 x_ 2 , y_ 1 \u2264 y_ 2 , x_ 2 - x_ 1 = y_ 2 - y_ 1 , then submatrix is a set of cells with coordinates ( x, y) , such that x_ 1 \u2264 x \u2264 x_ 2 , y_ 1 \u2264 y \u2264 y_ 2 ) , choose an integer k , where 1 \u2264 k \u2264 n^ 2 , replace all integers in the submatrix with k . Please find the minimum number of operations that Misha needs to achieve his goal.",
    "input": "The first input line contains two integers n and k ( 1 \u2264 n \u2264 500, 1 \u2264 k \u2264 n^ 2 ) \u2014 the size of the matrix and the desired amount of distinct elements in the matrix. Then n lines follows. The i - th of them contains n integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 1 \u2264 a_ i, j\u2264 n^ 2 ) \u2014 the elements of the i - th row of the matrix.",
    "output": "Output one integer \u2014 the minimum number of operations required.",
    "note": "In the first test case the answer is 1 , because one can change the value in the bottom right corner of the matrix to 1 . The resulting matrix can be found below: 111112341 In the second test case the answer is 2 . First, one can change the entire matrix to contain only 1 s, and the change the value of any single cell to 2 . One of the possible resulting matrices is displayed below: 111111112",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1720E"
  },
  {
    "title": "Corners",
    "url": "https://codeforces.com/problemset/problem/1720/C",
    "history": "You are given a matrix consisting of n rows and m columns. Each cell of this matrix contains 0 or 1 . Let' s call a square of size 2 \u00d7 2 without one corner cell an L- shape figure. In one operation you can take one L- shape figure, with at least one cell containing 1 and replace all numbers in it with zeroes. Find the maximum number of operations that you can do with the given matrix.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. Then follow the descriptions of each test case. The first line of each test case contains two integers n and m ( 2 \u2264 n, m \u2264 500 ) \u2014 the size of the matrix. Each of the following n lines contains a binary string of length m \u2014 the description of the matrix. It is guaranteed that the sum of n and the sum of m over all test cases does not exceed 1000 .",
    "output": "For each test case output the maximum number of operations you can do with the given matrix.",
    "note": "In the first testcase one of the optimal sequences of operations is the following ( bold font shows l- shape figure on which operation was performed) : Matrix before any operation was performed: 101111011110 Matrix after 1 operation was performed: 100101011110 Matrix after 2 operations were performed: 100100011110 Matrix after 3 operations were performed: 100100010110 Matrix after 4 operations were performed: 100000010110 Matrix after 5 operations were performed: 100000010100 Matrix after 6 operations were performed: 100000000100 Matrix after 7 operations were performed: 000000000100 Matrix after 8 operations were performed: 000000000000 In the third testcase from the sample we can not perform any operation because the matrix doesn' t contain any ones. In the fourth testcase it does not matter which L- shape figure we pick in our first operation. We will always be left with single one. So we will perform 2 operations.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1720C"
  },
  {
    "title": "Interesting Sum",
    "url": "https://codeforces.com/problemset/problem/1720/B",
    "history": "You are given an array a that contains n integers. You can choose any proper subsegment a_ l, a_ l + 1, . . . , a_ r of this array, meaning you can choose any two integers 1 \u2264 l \u2264 r \u2264 n , where r - l + 1 < n . We define the beauty of a given subsegment as the value of the following expression: max( a_ 1, a_ 2, . . . , a_ l- 1, a_ r+ 1, a_ r+ 2, . . . , a_ n) - min( a_ 1, a_ 2, . . . , a_ l- 1, a_ r+ 1, a_ r+ 2, . . . , a_ n) + max( a_ l, . . . , a_ r) - min( a_ l, . . . , a_ r) . Please find the maximum beauty among all proper subsegments.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then follow the descriptions of each test case. The first line of each test case contains a single integer n ( 4 \u2264 n \u2264 10^ 5) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 10^ 9 ) \u2014 the elements of the given array. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each testcase print a single integer \u2014 the maximum beauty of a proper subsegment.",
    "note": "In the first test case, the optimal segment is l = 7 , r = 8 . The beauty of this segment equals to ( 6 - 1) + ( 5 - 1) = 9 . In the second test case, the optimal segment is l = 2 , r = 4 . The beauty of this segment equals ( 100 - 2) + ( 200 - 1) = 297 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1720B"
  },
  {
    "title": "Permutation for Burenka",
    "url": "https://codeforces.com/problemset/problem/1718/D",
    "history": "We call an array a pure if all elements in it are pairwise distinct. For example, an array [ 1, 7, 9] is pure, [ 1, 3, 3, 7] isn' t, because 3 occurs twice in it. A pure array b is similar to a pure array c if their lengths n are the same and for all pairs of indices l , r , such that 1 \u2264 l \u2264 r \u2264 n , it' s true that argmax( [ b_ l, b_ l + 1, . . . , b_ r] ) = argmax( [ c_ l, c_ l + 1, . . . , c_ r] ) , where argmax( x) is defined as the index of the largest element in x ( which is unique for pure arrays) . For example, argmax( [ 3, 4, 2] ) = 2 , argmax( [ 1337, 179, 57] ) = 1 . Recently, Tonya found out that Burenka really likes a permutation p of length n . Tonya decided to please her and give her an array a similar to p . He already fixed some elements of a , but exactly k elements are missing ( in these positions temporarily a_ i = 0 ) . It is guaranteed that k \u2265 2 . Also, he has a set S of k - 1 numbers. Tonya realized that he was missing one number to fill the empty places of a , so he decided to buy it. He has q options to buy. Tonya thinks that the number d suits him, if it is possible to replace all zeros in a with numbers from S and the number d , so that a becomes a pure array similar to p . For each option of d , output whether this number is suitable for him or not.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) is the number of test cases. The description of the test cases follows. The first line of each test case contains a couple of integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) . The second line of each input test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation Burenka likes. The third line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) \u2014 elements of Tonya' s array, where 0 denotes a missing element. It is guaranteed that there are two indexes i, j ( 1 \u2264 i, j \u2264 n, i j) such that a_ i = 0, a_ j = 0 , which implies that k \u2265 2 . The fourth line of each test case contains k - 1 distinct integers s_ 1, s_ 2, . . . , s_ k- 1 ( 1 \u2264 s_ i \u2264 10^ 6 ) \u2014 elements of Tonya' s set S . Each of the next q lines contains a single integer d ( 1 \u2264 d \u2264 10^ 6 ) \u2014 the number that Tonya plans to buy. It is guaranteed that for each given d it' s possible to fill in the gaps in a with numbers from S and the number d to get a pure array. It is guaranteed that the sum of n and the sum of q in all tests does not exceed 3 \u00b7 10^ 5 .",
    "output": "Output q lines. For each value d , print \" YES\" if there is a way to fill the array a to make it similar to p , and \" NO\" otherwise.",
    "note": "In the first test case for d = 9 , you can get a = [ 5, 9, 7, 6] , it can be proved that a is similar to p , for d= 1 and d= 4 it can be proved that there is no answer. In the second test case for d = 1 , you can get a = [ 1, 5, 10, 9, 3] , for d = 8 , you can get a = [ 3, 5, 10, 9, 8] , it can be proved that for d = 11 there is no answer.",
    "topics": [
      "data structures",
      "graph matchings",
      "greedy",
      "math",
      "trees"
    ],
    "id": "1718D"
  },
  {
    "title": "Tonya and Burenka-179",
    "url": "https://codeforces.com/problemset/problem/1718/C",
    "history": "Tonya was given an array of a of length n written on a postcard for his birthday. For some reason, the postcard turned out to be a cyclic array, so the index of the element located strictly to the right of the n - th is 1 . Tonya wanted to study it better, so he bought a robot \" Burenka- 179\" . A program for Burenka is a pair of numbers ( s, k) , where 1 \u2264 s \u2264 n , 1 \u2264 k \u2264 n- 1 . Note that k cannot be equal to n . Initially, Tonya puts the robot in the position of the array s . After that, Burenka makes exactly n steps through the array. If at the beginning of a step Burenka stands in the position i , then the following happens: The number a_ i is added to the usefulness of the program. \" Burenka\" moves k positions to the right ( i : = i + k is executed, if i becomes greater than n , then i : = i - n ) . Help Tonya find the maximum possible usefulness of a program for \" Burenka\" if the initial usefulness of any program is 0 . Also, Tony' s friend Ilyusha asks him to change the array q times. Each time he wants to assign a_ p : = x for a given index p and a value x . You need to find the maximum possible usefulness of the program after each of these changes.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) is the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and q ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 q \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array. The following q lines contain changes, each of them contains two integers p and x ( 1 \u2264 p \u2264 n , 1 \u2264 x \u2264 10^ 9 ) , meaning you should assign a_ p : = x . It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output q+ 1 numbers \u2014 the maximum usefulness of a program initially and after each of the changes.",
    "note": "In the first test case, initially and after each request, the answer is achieved at s = 1 , k = 1 or s = 2 , k = 1 . In the second test case, initially, the answer is achieved when s = 1 , k = 2 or s = 3 , k = 2 . After the first request, the answer is achieved at s = 2 , k = 2 or s = 4 , k = 2 .",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1718C"
  },
  {
    "title": "Fibonacci Strings",
    "url": "https://codeforces.com/problemset/problem/1718/B",
    "history": "In all schools in Buryatia, in the 1 class, everyone is told the theory of Fibonacci strings. \" A block is a subsegment of a string where all the letters are the same and are bounded on the left and right by the ends of the string or by letters other than the letters in the block. A string is called a Fibonacci string if, when it is divided into blocks, their lengths in the order they appear in the string form the Fibonacci sequence ( f_ 0 = f_ 1 = 1 , f_ i = f_ i- 2 + f_ i- 1 ) , starting from the zeroth member of this sequence. A string is called semi- Fibonacci if it possible to reorder its letters to get a Fibonacci string. \" Burenka decided to enter the Buryat State University, but at the entrance exam she was given a difficult task. She was given a string consisting of the letters of the Buryat alphabet ( which contains exactly k letters) , and was asked if the given string is semi- Fibonacci. The string can be very long, so instead of the string, she was given the number of appearances of each letter ( c_ i for the i - th letter) in that string. Unfortunately, Burenka no longer remembers the theory of Fibonacci strings, so without your help she will not pass the exam.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The following is a description of the input data sets. The first line of each test case contains one integer k ( 1 \u2264 k \u2264 100 ) \u2014 the number of letters in the alphabet. The second line of each test case contains k integers c_ 1, c_ 2, . . . , c_ k ( 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the number of occurrences of each letter in the string.",
    "output": "For each test case print the string \" YES\" if the corresponding string is semi- Fibonacci, and \" NO\" if it is not. You can print \" YES\" and \" NO\" in any case ( for example, the strings \" yEs\" , \" yes\" , \" Yes\" will be recognized as a positive answer) .",
    "note": "In the first test case, a one- character string is semi- Fibonacci, being itself a Fibonacci string. In the second test case, a string of two different characters is Fibonacci. In the third test case, the string \" abb\" ( let the first of the alphabet letter be a, the second letter b) is not a semi- Fibonacci string, since no permutation of its letters ( \" abb\" , \" bab\" , and \" bba\" ) is a Fibonacci string. In the fourth test case, two permutations of the letters of the string \" abaccac\" ( the first letter is a, the second letter is b, the third letter is c) are Fibonacci strings \u2014 \" abaaccc\" and \" cbccaaa\" .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ],
    "id": "1718B"
  },
  {
    "title": "Burenka and Traditions (hard version)",
    "url": "https://codeforces.com/problemset/problem/1718/A2",
    "history": "This is the hard version of this problem. The difference between easy and hard versions is only the constraints on a_ i and on n . You can make hacks only if both versions of the problem are solved. Burenka is the crown princess of Buryatia, and soon she will become the n - th queen of the country. There is an ancient tradition in Buryatia \u2014 before the coronation, the ruler must show their strength to the inhabitants. To determine the strength of the n - th ruler, the inhabitants of the country give them an array of a of exactly n numbers, after which the ruler must turn all the elements of the array into zeros in the shortest time. The ruler can do the following two- step operation any number of times: select two indices l and r , so that 1 \u2264 l \u2264 r \u2264 n and a non- negative integer x , then for all l \u2264 i \u2264 r assign a_ i : = a_ i \u2295 x , where \u2295 denotes the bitwise XOR operation. It takes \u2308r- l+ 1/ 2\u2309 seconds to do this operation, where \u2308 y \u2309 denotes y rounded up to the nearest integer. Help Burenka calculate how much time she will need.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5) - the size of the arrayThe second line of each test case contains n integers a_ 1, a_ 2, \u22ef , a_ n ( 0 \u2264 a_ i < 2^ 30) \u2014 elements of the array. It is guaranteed that the sum of n in all tests does not exceed 10^ 5 .",
    "output": "For each test case, output a single number \u2014 the minimum time that Burenka will need.",
    "note": "In the first test case, Burenka can choose segment l = 1 , r = 4 , and x= 5 . so it will fill the array with zeros in 2 seconds. In the second test case, Burenka first selects segment l = 1 , r = 2 , and x = 1 , after which a = [ 0, 2, 2] , and then the segment l = 2 , r = 3 , and x= 2 , which fills the array with zeros. In total, Burenka will spend 2 seconds.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1718A2"
  },
  {
    "title": "Burenka and Traditions (easy version)",
    "url": "https://codeforces.com/problemset/problem/1718/A1",
    "history": "This is the easy version of this problem. The difference between easy and hard versions is only the constraints on a_ i and on n . You can make hacks only if both versions of the problem are solved. Burenka is the crown princess of Buryatia, and soon she will become the n - th queen of the country. There is an ancient tradition in Buryatia \u2014 before the coronation, the ruler must show their strength to the inhabitants. To determine the strength of the n - th ruler, the inhabitants of the country give them an array of a of exactly n numbers, after which the ruler must turn all the elements of the array into zeros in the shortest time. The ruler can do the following two- step operation any number of times: select two indices l and r , so that 1 \u2264 l \u2264 r \u2264 n and a non- negative integer x , then for all l \u2264 i \u2264 r assign a_ i : = a_ i \u2295 x , where \u2295 denotes the bitwise XOR operation. It takes \u2308r- l+ 1/ 2\u2309 seconds to do this operation, where \u2308 y \u2309 denotes y rounded up to the nearest integer. Help Burenka calculate how much time she will need.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the size of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 5000 ) \u2014 elements of the array. It is guaranteed that the sum of n in all tests does not exceed 5000 .",
    "output": "For each test case, output a single number \u2014 the minimum time that Burenka will need.",
    "note": "In the first test case, Burenka can choose segment l = 1 , r = 4 , and x= 5 . so it will fill the array with zeros in 2 seconds. In the second test case, Burenka first selects segment l = 1 , r = 2 , and x = 1 , after which a = [ 0, 2, 2] , and then the segment l = 2 , r = 3 , and x= 2 , which fills the array with zeros. In total, Burenka will spend 2 seconds.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1718A1"
  },
  {
    "title": "Madoka and The Corruption Scheme",
    "url": "https://codeforces.com/problemset/problem/1717/D",
    "history": "Madoka decided to entrust the organization of a major computer game tournament \" OSU\" ! In this tournament, matches are held according to the \" Olympic system\" . In other words, there are 2^ n participants in the tournament, numbered with integers from 1 to 2^ n . There are n rounds in total in the tournament. In the i - th round there are 2^ n - i matches between two players ( one of whom is right, the other is left) , after which the winners go further along the tournament grid, and the losing participants are eliminated from the tournament. Herewith, the relative order in the next round does not change. And the winner of the tournament \u2014 is the last remaining participant. But the smaller the participant' s number, the more he will pay Madoka if he wins, so Madoka wants the participant with the lowest number to win. To do this, she can arrange the participants in the first round as she likes, and also determine for each match who will win \u2014 the participant on the left or right. But Madoka knows that tournament sponsors can change the winner in matches no more than k times. ( That is, if the participant on the left won before the change, then the participant on the right will win after the change, and if the participant on the right won, then the participant on the left will win after the change) . So, the first image shows the tournament grid that Madoka made, where the red lines denote who should win the match. And the second one shows the tournament grid, after one change in the outcome of the match by sponsors ( a match between 1 and 3 players) . Print the minimum possible number of the winner in the tournament, which Madoka can get regardless of changes in sponsors. But since the answer can be very large, output it modulo 10^ 9 + 7 . Note that we need to minimize the answer, and only then take it modulo.",
    "input": "The first and the only line contains two integers n and k ( 1 \u2264 n \u2264 10^ 5, 1 \u2264 k \u2264min( 2^ n - 1, 10^ 9) ) \u2014 the number of rounds in the tournament and the number of outcomes that sponsors can change.",
    "output": "Print exactly one integer \u2014 the minimum number of the winner modulo 10^ 9 + 7",
    "note": "In the first example, there is only one match between players 1 and 2 , so the sponsors can always make player 2 wins. The tournament grid from the second example is shown in the picture in the statement.",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1717D"
  },
  {
    "title": "Madoka and Formal Statement",
    "url": "https://codeforces.com/problemset/problem/1717/C",
    "history": "Given an array of integer a_ 1, a_ 2, . . . , a_ n . In one operation you can make a_ i : = a_ i + 1 if i < n and a_ i \u2264 a_ i + 1 , or i = n and a_ i \u2264 a_ 1 . You need to check whether the array a_ 1, a_ 2, . . . , a_ n can become equal to the array b_ 1, b_ 2, . . . , b_ n in some number of operations ( possibly, zero) . Two arrays a and b of length n are called equal if a_ i = b_ i for all integers i from 1 to n .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 4 \u00b7 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2013 the length of the array. The second line of each test case contains n integers a_ 1, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2013 the elements of the array a . The third line of each test case contains n integers b_ 1, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2013 the elements of the array b . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output \" YES\" if you can get the array b , otherwise output \" NO\" . You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as positive answer) .",
    "note": "In the first test case, the array a is already equal to the array b . In the second test case, we can' t get the array b , because to do this we need to decrease a_ 1 . In the fifth test case, we can apply operations in order to the elements with indices 4, 3, 3, 2, 2, 2, 1, 1, 1, 1 , and then get the array [ 5, 5, 5, 5, 5] . After that, you can apply operations in order to elements with indices 5, 4, 4, 3, 1 and already get an array [ 6, 5, 6, 7, 6] .",
    "topics": [
      "greedy"
    ],
    "id": "1717C"
  },
  {
    "title": "Robot in a Hallway",
    "url": "https://codeforces.com/problemset/problem/1716/C",
    "history": "There is a grid, consisting of 2 rows and m columns. The rows are numbered from 1 to 2 from top to bottom. The columns are numbered from 1 to m from left to right. The robot starts in a cell ( 1, 1) . In one second, it can perform either of two actions: move into a cell adjacent by a side: up, right, down or left; remain in the same cell. The robot is not allowed to move outside the grid. Initially, all cells, except for the cell ( 1, 1) , are locked. Each cell ( i, j) contains a value a_ i, j \u2014 the moment that this cell gets unlocked. The robot can only move into a cell ( i, j) if at least a_ i, j seconds have passed before the move. The robot should visit all cells without entering any cell twice or more ( cell ( 1, 1) is considered entered at the start) . It can finish in any cell. What is the fastest the robot can achieve that?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer m ( 2 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of columns of the grid. The i - th of the next 2 lines contains m integers a_ i, 1, a_ i, 2, . . . , a_ i, m ( 0 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the moment of time each cell gets unlocked. a_ 1, 1 = 0 . If a_ i, j = 0 , then cell ( i, j) is unlocked from the start. The sum of m over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the minimum amount of seconds that the robot can take to visit all cells without entering any cell twice or more.",
    "note": "",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "ternary search"
    ],
    "id": "1716C"
  },
  {
    "title": "2-3 Moves",
    "url": "https://codeforces.com/problemset/problem/1716/A",
    "history": "You are standing at the point 0 on a coordinate line. Your goal is to reach the point n . In one minute, you can move by 2 or by 3 to the left or to the right ( i. e. , if your current coordinate is x , it can become x- 3 , x- 2 , x+ 2 or x+ 3 ) . Note that the new coordinate can become negative. Your task is to find the minimum number of minutes required to get from the point 0 to the point n . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t lines describing the test cases follow. The i - th of these lines contains one integer n ( 1 \u2264 n \u2264 10^ 9 ) \u2014 the goal of the i - th test case.",
    "output": "For each test case, print one integer \u2014 the minimum number of minutes required to get from the point 0 to the point n for the corresponding test case.",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1716A"
  },
  {
    "title": "Long Way Home",
    "url": "https://codeforces.com/problemset/problem/1715/E",
    "history": "Stanley lives in a country that consists of n cities ( he lives in city 1 ) . There are bidirectional roads between some of the cities, and you know how long it takes to ride through each of them. Additionally, there is a flight between each pair of cities, the flight between cities u and v takes ( u - v) ^ 2 time. Stanley is quite afraid of flying because of watching \" Sully: Miracle on the Hudson\" recently, so he can take at most k flights. Stanley wants to know the minimum time of a journey to each of the n cities from the city 1 .",
    "input": "In the first line of input there are three integers n , m , and k ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 10^ 5 , 1 \u2264 k \u2264 20 ) \u2014 the number of cities, the number of roads, and the maximal number of flights Stanley can take. The following m lines describe the roads. Each contains three integers u , v , w ( 1 \u2264 u, v \u2264 n , u = \u0338 v , 1 \u2264 w \u2264 10^ 9 ) \u2014 the cities the road connects and the time it takes to ride through. Note that some pairs of cities may be connected by more than one road.",
    "output": "Print n integers, i - th of which is equal to the minimum time of traveling to city i .",
    "note": "In the first sample, it takes no time to get to city 1; to get to city 2 it is possible to use a flight between 1 and 2, which will take 1 unit of time; to city 3 you can get via a road from city 1, which will take 1 unit of time. In the second sample, it also takes no time to get to city 1. To get to city 2 Stanley should use a flight between 1 and 2, which will take 1 unit of time. To get to city 3 Stanley can ride between cities 1 and 2, which will take 3 units of time, and then use a flight between 2 and 3. To get to city 4 Stanley should use a flight between 1 and 2, then take a ride from 2 to 4, which will take 5 units of time.",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "geometry",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1715E"
  },
  {
    "title": "2+ doors",
    "url": "https://codeforces.com/problemset/problem/1715/D",
    "history": "The Narrator has an integer array a of length n , but he will only tell you the size n and q statements, each of them being three integers i, j, x , which means that a_ i | a_ j = x , where | denotes the bitwise OR operation. Find the lexicographically smallest array a that satisfies all the statements. An array a is lexicographically smaller than an array b of the same length if and only if the following holds: in the first position where a and b differ, the array a has a smaller element than the corresponding element in b .",
    "input": "In the first line you are given with two integers n and q ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 q \u2264 2 \u00b7 10^ 5 ) . In the next q lines you are given with three integers i , j , and x ( 1 \u2264 i, j \u2264 n , 0 \u2264 x < 2^ 30 ) \u2014 the statements. It is guaranteed that all q statements hold for at least one array.",
    "output": "On a single line print n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) \u2014 array a .",
    "note": "In the first sample, these are all the arrays satisfying the statements: [ 0, 3, 2, 2] , [ 2, 1, 0, 0] , [ 2, 1, 0, 2] , [ 2, 1, 2, 0] , [ 2, 1, 2, 2] , [ 2, 3, 0, 0] , [ 2, 3, 0, 2] , [ 2, 3, 2, 0] , [ 2, 3, 2, 2] .",
    "topics": [
      "2-sat",
      "bitmasks",
      "graphs",
      "greedy"
    ],
    "id": "1715D"
  },
  {
    "title": "Beautiful Array",
    "url": "https://codeforces.com/problemset/problem/1715/B",
    "history": "Stanley defines the beauty of an array a of length n , which contains non- negative integers, as follows: \u2211_ i = 1^ n\u230aa_ i/ k\u230b, which means that we divide each element by k , round it down, and sum up the resulting values. Stanley told Sam the integer k and asked him to find an array a of n non- negative integers, such that the beauty is equal to b and the sum of elements is equal to s . Help Sam \u2014 find any of the arrays satisfying the conditions above.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains integers n , k , b , s ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 10^ 9 , 0 \u2264 b \u2264 10^ 9 , 0 \u2264 s \u2264 10^ 18 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print - 1 if such array a does not exist. Otherwise print n non- negative integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i\u2264 10^ 18 ) \u2014 the answer.",
    "note": "In the first, the second, the fifth and the sixth test cases of the example it is possible to show that such array does not exist. In the third testcase of the example a = [ 0, 0, 19] . The sum of elements in it is equal to 19, the beauty of it is equal to ( \u230a0/ 6\u230b + \u230a0/ 6\u230b + \u230a19/ 6\u230b ) = ( 0 + 0 + 3) = 3 . In the fourth testcase of the example a = [ 0, 3, 3, 3, 29] . The sum of elements in it is equal to 38 , the beauty of it is equal to ( 0 + 0 + 0 + 0 + 7) = 7 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1715B"
  },
  {
    "title": "Crossmarket",
    "url": "https://codeforces.com/problemset/problem/1715/A",
    "history": "Stanley and Megan decided to shop in the \" Crossmarket\" grocery store, which can be represented as a matrix with n rows and m columns. Stanley and Megan can move to an adjacent cell using 1 unit of power. Two cells are considered adjacent if they share an edge. To speed up the shopping process, Megan brought her portals with her, and she leaves one in each cell she visits ( if there is no portal yet) . If a person ( Stanley or Megan) is in a cell with a portal, that person can use 1 unit of power to teleport to any other cell with a portal, including Megan' s starting cell. They decided to split up: Stanley will go from the upper- left cell ( cell with coordinates ( 1, 1) ) to the lower- right cell ( cell with coordinates ( n, m) ) , whilst Megan needs to get from the lower- left cell ( cell with coordinates ( n, 1) ) to the upper- right cell ( cell with coordinates ( 1, m) ) . What is the minimum total energy needed for them both to do that? Note that they can choose the time they move. Time does not affect energy.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The only line in the test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) .",
    "output": "For each test case print a single integer on a new line \u2013 the answer.",
    "note": "In the first test case they can stick to the following plan: Megan ( red circle) moves to the cell ( 7, 3) . Then she goes to the cell ( 1, 3) , and Stanley ( blue circle) does the same. Stanley uses the portal in that cell ( cells with portals are grey) to get to the cell ( 7, 3) . Then he moves to his destination \u2014 cell ( 7, 5) . Megan also finishes her route and goes to the cell ( 1, 5) . The total energy spent is ( 2 + 6) + ( 2 + 1 + 2) + ( 2) = 15 , which is our final answer.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1715A"
  },
  {
    "title": "Color with Occurrences",
    "url": "https://codeforces.com/problemset/problem/1714/D",
    "history": "You are given some text t and a set of n strings s_ 1, s_ 2, . . . , s_ n . In one step, you can choose any occurrence of any string s_ i in the text t and color the corresponding characters of the text in red. For example, if t= and s_ 1= , s_ 2= , you can get t= , t= or t= in one step. You want to color all the letters of the text t in red. When you color a letter in red again, it stays red. In the example above, three steps are enough: Let' s color t[ 2 . . . 4] = s_ 2= in red, we get t= ; Let' s color t[ 1 . . . 2] = s_ 1= in red, we get t= ; Let' s color t[ 4 . . . 6] = s_ 2= in red, we get t= . Each string s_ i can be applied any number of times ( or not at all) . Occurrences for coloring can intersect arbitrarily. Determine the minimum number of steps needed to color all letters t in red and how to do it. If it is impossible to color all letters of the text t in red, output - 1.",
    "input": "The first line of the input contains an integer q ( 1 \u2264 q \u2264 100 ) \u2014the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains the text t ( 1 \u2264 | t| \u2264 100 ) , consisting only of lowercase Latin letters, where | t| is the length of the text t . The second line of each test case contains a single integer n ( 1 \u2264 n \u2264 10 ) \u2014 the number of strings in the set. This is followed by n lines, each containing a string s_ i ( 1 \u2264 | s_ i| \u2264 10 ) consisting only of lowercase Latin letters, where | s_ i| \u2014 the length of string s_ i .",
    "output": "For each test case, print the answer on a separate line. If it is impossible to color all the letters of the text in red, print a single line containing the number - 1. Otherwise, on the first line, print the number m \u2014 the minimum number of steps it will take to turn all the letters t red. Then in the next m lines print pairs of indices: w_ j and p_ j ( 1 \u2264 j \u2264 m ) , which denote that the string with index w_ j was used as a substring to cover the occurrences starting in the text t from position p_ j . The pairs can be output in any order. If there are several answers, output any of them.",
    "note": "The first test case is explained in the problem statement. In the second test case, it is impossible to color all the letters of the text in red.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1714D"
  },
  {
    "title": "Minimum  Varied Number",
    "url": "https://codeforces.com/problemset/problem/1714/C",
    "history": "Find the minimum number with the given sum of digits s such that all digits in it are distinct ( i. e. all digits are unique) . For example, if s= 20 , then the answer is 389 . This is the minimum number in which all digits are different and the sum of the digits is 20 ( 3+ 8+ 9= 20 ) . For the given s print the required number.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 45 ) \u2014 the number of test cases. Each test case is specified by a line that contains the only integer s ( 1 \u2264 s \u2264 45 ) .",
    "output": "Print t integers \u2014 the answers to the given test cases.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1714C"
  },
  {
    "title": "Remove Prefix",
    "url": "https://codeforces.com/problemset/problem/1714/B",
    "history": "Polycarp was presented with some sequence of integers a of length n ( 1 \u2264 a_ i \u2264 n ) . A sequence can make Polycarp happy only if it consists of different numbers ( i. e. distinct numbers) . In order to make his sequence like this, Polycarp is going to make some ( possibly zero) number of moves. In one move, he can: remove the first ( leftmost) element of the sequence. For example, in one move, the sequence [ 3, 1, 4, 3] will produce the sequence [ 1, 4, 3] , which consists of different numbers. Determine the minimum number of moves he needs to make so that in the remaining sequence all elements are different. In other words, find the length of the smallest prefix of the given sequence a , after removing which all values in the sequence will be unique.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the given sequence a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the given sequence a . It is guaranteed that the sum of n values over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print your answer on a separate line \u2014 the minimum number of elements that must be removed from the beginning of the sequence so that all remaining elements are different.",
    "note": "The following are the sequences that will remain after the removal of prefixes: [ 1, 4, 3] ; [ 1] ; [ 1] ; [ 6, 5, 4, 3, 2, 1] ; [ 2, 1] . It is easy to see that all the remaining sequences contain only distinct elements. In each test case, the shortest matching prefix was removed.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1714B"
  },
  {
    "title": "Cross Swapping",
    "url": "https://codeforces.com/problemset/problem/1713/E",
    "history": "You are given a square matrix A of size n \u00d7 n whose elements are integers. We will denote the element on the intersection of the i - th row and the j - th column as A_ i, j . You can perform operations on the matrix. In each operation, you can choose an integer k , then for each index i ( 1 \u2264 i \u2264 n ) , swap A_ i, k with A_ k, i . Note that cell A_ k, k remains unchanged. For example, for n = 4 and k = 3 , this matrix will be transformed like this: The operation k = 3 swaps the blue row with the green column. You can perform this operation any number of times. Find the lexicographically smallest matrix ^ \u2020 you can obtain after performing arbitrary number of operations. ^ \u2020 For two matrices A and B of size n \u00d7 n , let a_ ( i- 1) \u00b7 n + j = A_ i, j and b_ ( i- 1) \u00b7 n + j = B_ i, j . Then, the matrix A is lexicographically smaller than the matrix B when there exists an index i ( 1 \u2264 i \u2264 n^ 2 ) such that a_ i < b_ i and for all indices j such that 1 \u2264 j < i , a_ j = b_ j .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the size of the matrix. The i - th line of the next n lines contains n integers A_ i, 1, A_ i, 2, . . . , A_ i, n ( 1 \u2264 A_ i, j\u2264 10^ 9 ) \u2014 description of the matrix A . It is guaranteed that the sum of n^ 2 over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print n lines with n integers each \u2014 the lexicographically smallest matrix.",
    "note": "Note that in every picture below the matrix is transformed in such a way that the blue rows are swapped with the green columns. In the first test case, we can perform 1 operation for k = 3 . The matrix will be transformed as below: In the second test case, we can perform 2 operations for k = 1 and k = 3 :",
    "topics": [
      "2-sat",
      "data structures",
      "dsu",
      "greedy",
      "matrices"
    ],
    "id": "1713E"
  },
  {
    "title": "Tournament Countdown",
    "url": "https://codeforces.com/problemset/problem/1713/D",
    "history": "This is an interactive problem. There was a tournament consisting of 2^ n contestants. The 1 - st contestant competed with the 2 - nd, the 3 - rd competed with the 4 - th, and so on. After that, the winner of the first match competed with the winner of second match, etc. The tournament ended when there was only one contestant left, who was declared the winner of the tournament. Such a tournament scheme is known as the single- elimination tournament. You don' t know the results, but you want to find the winner of the tournament. In one query, you select two integers a and b , which are the indices of two contestants. The jury will return 1 if a won more matches than b , 2 if b won more matches than a , or 0 if their number of wins was equal. Find the winner in no more than \u23081/ 3\u00b7 2^ n + 1\u2309 queries. Here \u2308 x \u2309 denotes the value of x rounded up to the nearest integer. Note that the tournament is long over, meaning that the results are fixed and do not depend on your queries. InteractionThe interaction for each test case begins by reading the integer n . To make a query, output \" ? a b\" ( 1 \u2264 a, b \u2264 2^ n ) without quotes. Afterwards, you should read one single integer \u2014 the answer for your query. You can make at most \u23081/ 3\u00b7 2^ n + 1\u2309 such queries in each test case. If you receive the integer - 1 instead of an answer or a valid value of n , it means your program has made an invalid query, has exceed the limit of queries, or has given incorrect answer on the previous test case. Your program must terminate immediately to receive a Wrong Answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream. When you are ready to give the final answer, output \" ! x\" ( 1 \u2264 x \u2264 2^ n ) without quotes \u2014 the winner of the tournament. Giving this answer does not count towards the limit of queries. After solving a test case, your program should move to the next one immediately. After solving all test cases, your program should be terminated immediately. After printing a query or the answer do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. HacksTo hack, use the following format. The first line contains an integer t ( 1 \u2264 t \u2264 2^ 14 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 17 ) . The second line of each test case contains 2^ n numbers on a line \u2014 the number of wins of each participant. There should be a sequence of matches that is consistent with the number of wins. The sum of 2^ n should not exceed 2^ 17 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2^ 14 ) \u2014 the number of test cases. The only line of input contains a single integer n ( 1 \u2264 n \u2264 17 ) . It is guaranteed that the sum of 2^ n over all test cases does not exceed 2^ 17 .",
    "output": "",
    "note": "The tournament in the first test case is shown below. The number of wins is [ 1, 0, 0, 2, 0, 1, 3, 0] . In this example, the winner is the 7 - th contestant.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "interactive",
      "number theory",
      "probabilities"
    ],
    "id": "1713D"
  },
  {
    "title": "Traveling Salesman Problem",
    "url": "https://codeforces.com/problemset/problem/1713/A",
    "history": "You are living on an infinite plane with the Cartesian coordinate system on it. In one move you can go to any of the four adjacent points ( left, right, up, down) . More formally, if you are standing at the point ( x, y) , you can: go left, and move to ( x - 1, y) , or go right, and move to ( x + 1, y) , or go up, and move to ( x, y + 1) , or go down, and move to ( x, y - 1) . There are n boxes on this plane. The i - th box has coordinates ( x_ i, y_ i) . It is guaranteed that the boxes are either on the x - axis or the y - axis. That is, either x_ i= 0 or y_ i= 0 . You can collect a box if you and the box are at the same point. Find the minimum number of moves you have to perform to collect all of these boxes if you have to start and finish at the point ( 0, 0) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of boxes. The i - th line of the following n lines contains two integers x_ i and y_ i ( - 100 \u2264 x_ i, y_ i \u2264 100 ) \u2014 the coordinate of the i - th box. It is guaranteed that either x_ i= 0 or y_ i= 0 . Do note that the sum of n over all test cases is not bounded.",
    "output": "For each test case output a single integer \u2014 the minimum number of moves required.",
    "note": "In the first test case, a possible sequence of moves that uses the minimum number of moves required is shown below. ( 0, 0) \u2192 ( 1, 0) \u2192 ( 1, 1) \u2192 ( 1, 2) \u2192 ( 0, 2) \u2192 ( - 1, 2) \u2192 ( - 1, 1) \u2192 ( - 1, 0) \u2192 ( - 1, - 1) \u2192 ( - 1, - 2) \u2192 ( 0, - 2) \u2192 ( 0, - 1) \u2192 ( 0, 0) In the second test case, a possible sequence of moves that uses the minimum number of moves required is shown below. ( 0, 0) \u2192 ( 0, 1) \u2192 ( 0, 2) \u2192 ( - 1, 2) \u2192 ( - 2, 2) \u2192 ( - 3, 2) \u2192 ( - 3, 1) \u2192 ( - 3, 0) \u2192 ( - 3, - 1) \u2192 ( - 2, - 1) \u2192 ( - 1, - 1) \u2192 ( 0, - 1) \u2192 ( 0, 0) In the third test case, we can collect all boxes without making any moves.",
    "topics": [
      "geometry",
      "greedy",
      "implementation"
    ],
    "id": "1713A"
  },
  {
    "title": "Empty Graph",
    "url": "https://codeforces.com/problemset/problem/1712/D",
    "history": "\u2014 Do you have a wish? \u2014 I want people to stop gifting each other arrays. O_ o and Another Young BoyAn array of n positive integers a_ 1, a_ 2, . . . , a_ n fell down on you from the skies, along with a positive integer k \u2264 n . You can apply the following operation at most k times: Choose an index 1 \u2264 i \u2264 n and an integer 1 \u2264 x \u2264 10^ 9 . Then do a_ i : = x ( assign x to a_ i ) . Then build a complete undirected weighted graph with n vertices numbered with integers from 1 to n , where edge ( l, r) ( 1 \u2264 l < r \u2264 n ) has weight min( a_ l, a_ l+ 1, . . . , a_ r) . You have to find the maximum possible diameter of the resulting graph after performing at most k operations. The diameter of a graph is equal to max_ 1 \u2264 u < v \u2264 nd( u, v) , where d( u, v) is the length of the shortest path between vertex u and vertex v .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and k ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 n ) . The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the maximum possible diameter of the graph after performing at most k operations.",
    "note": "In the first test case, one of the optimal arrays is [ 2, 4, 5] . The graph built on this array: d( 1, 2) = d( 1, 3) = 2 and d( 2, 3) = 4 , so the diameter is equal to max( 2, 2, 4) = 4 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "shortest paths"
    ],
    "id": "1712D"
  },
  {
    "title": "Sort Zero",
    "url": "https://codeforces.com/problemset/problem/1712/C",
    "history": "An array is sorted if it has no inversionsA Young BoyYou are given an array of n positive integers a_ 1, a_ 2, . . . , a_ n . In one operation you do the following: Choose any integer x . For all i such that a_ i = x , do a_ i : = 0 ( assign 0 to a_ i ) . Find the minimum number of operations required to sort the array in non- decreasing order.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of operations required to sort the array in non- decreasing order.",
    "note": "In the first test case, you can choose x = 3 for the operation, the resulting array is [ 0, 0, 2] . In the second test case, you can choose x = 1 for the first operation and x = 3 for the second operation, the resulting array is [ 0, 0, 0, 0] .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1712C"
  },
  {
    "title": "Woeful Permutation",
    "url": "https://codeforces.com/problemset/problem/1712/B",
    "history": "I wonder, does the falling rain Forever yearn for it' s disdain? Effluvium of the MindYou are given a positive integer n . Find any permutation p of length n such that the sum lcm( 1, p_ 1) + lcm( 2, p_ 2) + . . . + lcm( n, p_ n) is as large as possible. Here lcm( x, y) denotes the least common multiple ( LCM) of integers x and y . A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1 000 ) . Description of the test cases follows. The only line for each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print n integers p_ 1 , p_ 2 , . . . , p_ n \u2014 the permutation with the maximum possible value of lcm( 1, p_ 1) + lcm( 2, p_ 2) + . . . + lcm( n, p_ n) . If there are multiple answers, print any of them.",
    "note": "For n = 1 , there is only one permutation, so the answer is [ 1] . For n = 2 , there are two permutations: [ 1, 2] \u2014 the sum is lcm( 1, 1) + lcm( 2, 2) = 1 + 2 = 3 . [ 2, 1] \u2014 the sum is lcm( 1, 2) + lcm( 2, 1) = 2 + 2 = 4 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "number theory"
    ],
    "id": "1712B"
  },
  {
    "title": "Wonderful Permutation",
    "url": "https://codeforces.com/problemset/problem/1712/A",
    "history": "God' s Blessing on This PermutationForces! A Random PebbleYou are given a permutation p_ 1, p_ 2, . . . , p_ n of length n and a positive integer k \u2264 n . In one operation you can choose two indices i and j ( 1 \u2264 i < j \u2264 n ) and swap p_ i with p_ j . Find the minimum number of operations needed to make the sum p_ 1 + p_ 2 + . . . + p_ k as small as possible. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 100 ) . The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that the given numbers form a permutation of length n .",
    "output": "For each test case print one integer \u2014 the minimum number of operations needed to make the sum p_ 1 + p_ 2 + . . . + p_ k as small as possible.",
    "note": "In the first test case, the value of p_ 1 + p_ 2 + . . . + p_ k is initially equal to 2 , but the smallest possible value is 1 . You can achieve it by swapping p_ 1 with p_ 3 , resulting in the permutation [ 1, 3, 2] . In the second test case, the sum is already as small as possible, so the answer is 0 .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1712A"
  },
  {
    "title": "XOR Triangle",
    "url": "https://codeforces.com/problemset/problem/1710/C",
    "history": "You are given a positive integer n . Since n may be very large, you are given its binary representation. You should compute the number of triples ( a, b, c) with 0 \u2264 a, b, c \u2264 n such that a \u2295 b , b \u2295 c , and a \u2295 c are the sides of a non- degenerate triangle. Here, \u2295 denotes the bitwise XOR operation. You should output the answer modulo 998 244 353 . Three positive values x , y , and z are the sides of a non- degenerate triangle if and only if x+ y> z , x+ z> y , and y+ z> x .",
    "input": "The first and only line contains the binary representation of an integer n ( 0 < n < 2^ 200 000 ) without leading zeros. For example, the string 10 is the binary representation of the number 2 , while the string 1010 represents the number 10 .",
    "output": "Print one integer \u2014 the number of triples ( a, b, c) satisfying the conditions described in the statement modulo 998 244 353 .",
    "note": "In the first test case, 101_ 2= 5 . The triple ( a, b, c) = ( 0, 3, 5) is valid because ( a\u2295 b, b\u2295 c, c\u2295 a) = ( 3, 6, 5) are the sides of a non- degenerate triangle. The triple ( a, b, c) = ( 1, 2, 4) is valid because ( a\u2295 b, b\u2295 c, c\u2295 a) = ( 3, 6, 5) are the sides of a non- degenerate triangle. The 6 permutations of each of these two triples are all the valid triples, thus the answer is 12 . In the third test case, 11 011 111 101 010 010_ 2= 114 514 . The full answer ( before taking the modulo) is 1 466 408 118 808 164 .",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1710C"
  },
  {
    "title": "Rain",
    "url": "https://codeforces.com/problemset/problem/1710/B",
    "history": "You are the owner of a harvesting field which can be modeled as an infinite line, whose positions are identified by integers. It will rain for the next n days. On the i - th day, the rain will be centered at position x_ i and it will have intensity p_ i . Due to these rains, some rainfall will accumulate; let a_ j be the amount of rainfall accumulated at integer position j . Initially a_ j is 0 , and it will increase by max( 0, p_ i- | x_ i- j| ) after the i - th day' s rain. A flood will hit your field if, at any moment, there is a position j with accumulated rainfall a_ j> m . You can use a magical spell to erase exactly one day' s rain, i. e. , setting p_ i= 0 . For each i from 1 to n , check whether in case of erasing the i - th day' s rain there is no flood.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of rainy days and the maximal accumulated rainfall with no flood occurring. Then n lines follow. The i - th of these lines contains two integers x_ i and p_ i ( 1 \u2264 x_ i, p_ i \u2264 10^ 9 ) \u2014 the position and intensity of the i - th day' s rain. The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a binary string s length of n . The i - th character of s is 1 if after erasing the i - th day' s rain there is no flood, while it is 0, if after erasing the i - th day' s rain the flood still happens.",
    "note": "In the first test case, if we do not use the spell, the accumulated rainfall distribution will be like this: If we erase the third day' s rain, the flood is avoided and the accumulated rainfall distribution looks like this: In the second test case, since initially the flood will not happen, we can erase any day' s rain. In the third test case, there is no way to avoid the flood.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "geometry",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1710B"
  },
  {
    "title": "Color the Picture",
    "url": "https://codeforces.com/problemset/problem/1710/A",
    "history": "A picture can be represented as an n\u00d7 m grid ( n rows and m columns) so that each of the n \u00b7 m cells is colored with one color. You have k pigments of different colors. You have a limited amount of each pigment, more precisely you can color at most a_ i cells with the i - th pigment. A picture is considered beautiful if each cell has at least 3 toroidal neighbors with the same color as itself. Two cells are considered toroidal neighbors if they toroidally share an edge. In other words, for some integers 1 \u2264 x_ 1, x_ 2 \u2264 n and 1 \u2264 y_ 1, y_ 2 \u2264 m , the cell in the x_ 1 - th row and y_ 1 - th column is a toroidal neighbor of the cell in the x_ 2 - th row and y_ 2 - th column if one of following two conditions holds: x_ 1- x_ 2 \u2261\u00b11 n and y_ 1= y_ 2 , or y_ 1- y_ 2 \u2261\u00b11 m and x_ 1= x_ 2 . Notice that each cell has exactly 4 toroidal neighbors. For example, if n= 3 and m= 4 , the toroidal neighbors of the cell ( 1, 2) ( the cell on the first row and second column) are: ( 3, 2) , ( 2, 2) , ( 1, 3) , ( 1, 1) . They are shown in gray on the image below: The gray cells show toroidal neighbors of ( 1, 2) . Is it possible to color all cells with the pigments provided and create a beautiful picture?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains three integers n , m , and k ( 3 \u2264 n, m \u2264 10^ 9 , 1 \u2264 k \u2264 10^ 5 ) \u2014 the number of rows and columns of the picture and the number of pigments. The next line contains k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 a_ i is the maximum number of cells that can be colored with the i - th pigment. It is guaranteed that the sum of k over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print \" Yes\" ( without quotes) if it is possible to color a beautiful picture. Otherwise, print \" No\" ( without quotes) .",
    "note": "In the first test case, one possible solution is as follows: In the third test case, we can color all cells with pigment 1 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1710A"
  },
  {
    "title": "XOR Tree",
    "url": "https://codeforces.com/problemset/problem/1709/E",
    "history": "You are given a tree consisting of n vertices. A number is written on each vertex; the number on vertex i is equal to a_ i . Recall that a simple path is a path that visits each vertex at most once. Let the weight of the path be the bitwise XOR of the values written on vertices it consists of. Let' s say that a tree is good if no simple path has weight 0 . You can apply the following operation any number of times ( possibly, zero) : select a vertex of the tree and replace the value written on it with an arbitrary positive integer. What is the minimum number of times you have to apply this operation in order to make the tree good?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i < 2^ 30 ) \u2014 the numbers written on vertices. Then n - 1 lines follow, each containing two integers x and y ( 1 \u2264 x, y \u2264 n; x y ) denoting an edge connecting vertex x with vertex y . It is guaranteed that these edges form a tree.",
    "output": "Print a single integer \u2014 the minimum number of times you have to apply the operation in order to make the tree good.",
    "note": "In the first example, it is enough to replace the value on the vertex 1 with 13 , and the value on the vertex 4 with 42 .",
    "topics": [
      "bitmasks",
      "data structures",
      "dfs and similar",
      "dsu",
      "greedy",
      "trees"
    ],
    "id": "1709E"
  },
  {
    "title": "Rorororobot",
    "url": "https://codeforces.com/problemset/problem/1709/D",
    "history": "There is a grid, consisting of n rows and m columns. The rows are numbered from 1 to n from bottom to top. The columns are numbered from 1 to m from left to right. The i - th column has the bottom a_ i cells blocked ( the cells in rows 1, 2, . . . , a_ i ) , the remaining n - a_ i cells are unblocked. A robot is travelling across this grid. You can send it commands \u2014 move up, right, down or left. If a robot attempts to move into a blocked cell or outside the grid, it explodes. However, the robot is broken \u2014 it executes each received command k times. So if you tell it to move up, for example, it will move up k times ( k cells) . You can' t send it commands while the robot executes the current one. You are asked q queries about the robot. Each query has a start cell, a finish cell and a value k . Can you send the robot an arbitrary number of commands ( possibly, zero) so that it reaches the finish cell from the start cell, given that it executes each command k times? The robot must stop in the finish cell. If it visits the finish cell while still executing commands, it doesn' t count.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 9 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rows and columns of the grid. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) \u2014 the number of blocked cells on the bottom of the i - th column. The third line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Each of the next q lines contain five integers x_ s, y_ s, x_ f, y_ f and k ( a[ y_ s] < x_ s \u2264 n ; 1 \u2264 y_ s \u2264 m ; a[ y_ f] < x_ f \u2264 n ; 1 \u2264 y_ f \u2264 m ; 1 \u2264 k \u2264 10^ 9 ) \u2014 the row and the column of the start cell, the row and the column of the finish cell and the number of times each your command is executed. The start and the finish cell of each query are unblocked.",
    "output": "For each query, print \" YES\" if you can send the robot an arbitrary number of commands ( possibly, zero) so that it reaches the finish cell from the start cell, given that it executes each command k times. Otherwise, print \" NO\" .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1709D"
  },
  {
    "title": "Recover an RBS",
    "url": "https://codeforces.com/problemset/problem/1709/C",
    "history": "A bracket sequence is a string containing only characters \" ( \" and \" ) \" . A regular bracket sequence ( or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \" 1\" and \" + \" between the original characters of the sequence. For example: bracket sequences \" ( ) ( ) \" and \" ( ( ) ) \" are regular ( the resulting expressions are: \" ( 1) + ( 1) \" and \" ( ( 1+ 1) + 1) \" ) ; bracket sequences \" ) ( \" , \" ( \" and \" ) \" are not. There was an RBS. Some brackets have been replaced with question marks. Is it true that there is a unique way to replace question marks with brackets, so that the resulting sequence is an RBS?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of testcases. The only line of each testcase contains an RBS with some brackets replaced with question marks. Each character is either ' ( ' , ' ) ' or ' ? ' . At least one RBS can be recovered from the given sequence. The total length of the sequences over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print \" YES\" if the way to replace question marks with brackets, so that the resulting sequence is an RBS, is unique. If there is more than one way, then print \" NO\" .",
    "note": "In the first testcase, the only possible original RBS is \" ( ( ) ) \" . In the second testcase, there are multiple ways to recover an RBS. In the third and the fourth testcases, the only possible original RBS is \" ( ) \" . In the fifth testcase, the original RBS can be either \" ( ( ( ) ( ) ) ) \" or \" ( ( ) ) ( ) ( ) \" .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1709C"
  },
  {
    "title": "Three Doors",
    "url": "https://codeforces.com/problemset/problem/1709/A",
    "history": "There are three doors in front of you, numbered from 1 to 3 from left to right. Each door has a lock on it, which can only be opened with a key with the same number on it as the number on the door. There are three keys \u2014 one for each door. Two of them are hidden behind the doors, so that there is no more than one key behind each door. So two doors have one key behind them, one door doesn' t have a key behind it. To obtain a key hidden behind a door, you should first unlock that door. The remaining key is in your hands. Can you open all the doors?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 18 ) \u2014 the number of testcases. The first line of each testcase contains a single integer x ( 1 \u2264 x \u2264 3 ) \u2014 the number on the key in your hands. The second line contains three integers a, b and c ( 0 \u2264 a, b, c \u2264 3 ) \u2014 the number on the key behind each of the doors. If there is no key behind the door, the number is equal to 0 . Values 1, 2 and 3 appear exactly once among x, a, b and c .",
    "output": "For each testcase, print \" YES\" if you can open all the doors. Otherwise, print \" NO\" .",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1709A"
  },
  {
    "title": "Difference Operations",
    "url": "https://codeforces.com/problemset/problem/1708/A",
    "history": "You are given an array a consisting of n positive integers. You are allowed to perform this operation any number of times ( possibly, zero) : choose an index i ( 2 \u2264 i \u2264 n ) , and change a_ i to a_ i - a_ i- 1 . Is it possible to make a_ i= 0 for all 2\u2264 i\u2264 n ?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the length of array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "For each test case, print \" YES\" ( without quotes) , if it is possible to change a_ i to 0 for all 2 \u2264 i \u2264 n , and \" NO\" ( without quotes) otherwise. You can print letters in any case ( upper or lower) .",
    "note": "In the first test case, the initial array is [ 5, 10] . You can perform 2 operations to reach the goal: Choose i= 2 , and the array becomes [ 5, 5] . Choose i= 2 , and the array becomes [ 5, 0] . In the second test case, the initial array is [ 1, 2, 3] . You can perform 4 operations to reach the goal: Choose i= 3 , and the array becomes [ 1, 2, 1] . Choose i= 2 , and the array becomes [ 1, 1, 1] . Choose i= 3 , and the array becomes [ 1, 1, 0] . Choose i= 2 , and the array becomes [ 1, 0, 0] . In the third test case, you can choose indices in the order 4 , 3 , 2 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1708A"
  },
  {
    "title": "DFS Trees",
    "url": "https://codeforces.com/problemset/problem/1707/C",
    "history": "You are given a connected undirected graph consisting of n vertices and m edges. The weight of the i - th edge is i . Here is a wrong algorithm of finding a minimum spanning tree ( MST) of a graph: vis : = an array of length ns : = a set of edgesfunction dfs( u) : vis[ u] : = true iterate through each edge ( u, v) in the order from smallest to largest edge weight if vis[ v] = false add edge ( u, v) into the set ( s) dfs( v) function findMST( u) : reset all elements of ( vis) to false reset the edge set ( s) to empty dfs( u) return the edge set ( s) Each of the calls findMST( 1) , findMST( 2) , . . . , findMST( n) gives you a spanning tree of the graph. Determine which of these trees are minimum spanning trees.",
    "input": "The first line of the input contains two integers n , m ( 2\u2264 n\u2264 10^ 5 , n- 1\u2264 m\u2264 2\u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges in the graph. Each of the following m lines contains two integers u_ i and v_ i ( 1\u2264 u_ i, v_ i\u2264 n , u_ i v_ i ) , describing an undirected edge ( u_ i, v_ i) in the graph. The i - th edge in the input has weight i . It is guaranteed that the graph is connected and there is at most one edge between any pair of vertices.",
    "output": "You need to output a binary string s , where s_ i= 1 if findMST( i) creates an MST, and s_ i = 0 otherwise.",
    "note": "Here is the graph given in the first example. There is only one minimum spanning tree in this graph. A minimum spanning tree is ( 1, 2) , ( 3, 5) , ( 1, 3) , ( 2, 4) which has weight 1+ 2+ 3+ 5= 11 . Here is a part of the process of calling findMST( 1) : reset the array vis and the edge set s; calling dfs( 1) ; vis[ 1] : = true; iterate through each edge ( 1, 2) , ( 1, 3) ; add edge ( 1, 2) into the edge set s, calling dfs( 2) : vis[ 2] : = true iterate through each edge ( 2, 1) , ( 2, 3) , ( 2, 4) ; because vis[ 1] = true, ignore the edge ( 2, 1) ; add edge ( 2, 3) into the edge set s, calling dfs( 3) : . . . In the end, it will select edges ( 1, 2) , ( 2, 3) , ( 3, 5) , ( 2, 4) with total weight 1+ 4+ 2+ 5= 12> 11 , so findMST( 1) does not find a minimum spanning tree. It can be shown that the other trees are all MSTs, so the answer is 01111.",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1707C"
  },
  {
    "title": "Doremy's IQ",
    "url": "https://codeforces.com/problemset/problem/1707/A",
    "history": "Doremy is asked to test n contests. Contest i can only be tested on day i . The difficulty of contest i is a_ i . Initially, Doremy' s IQ is q . On day i Doremy will choose whether to test contest i or not. She can only test a contest if her current IQ is strictly greater than 0 . If Doremy chooses to test contest i on day i , the following happens: if a_ i> q , Doremy will feel she is not wise enough, so q decreases by 1 ; otherwise, nothing changes. If she chooses not to test a contest, nothing changes. Doremy wants to test as many contests as possible. Please give Doremy a solution.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line contains two integers n and q ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 9 ) \u2014 the number of contests and Doremy' s IQ in the beginning. The second line contains n integers a_ 1, a_ 2, \u22ef, a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the difficulty of each contest. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, you need to output a binary string s , where s_ i= 1 if Doremy should choose to test contest i , and s_ i= 0 otherwise. The number of ones in the string should be maximum possible, and she should never test a contest when her IQ is zero or less. If there are multiple solutions, you may output any.",
    "note": "In the first test case, Doremy tests the only contest. Her IQ doesn' t decrease. In the second test case, Doremy tests both contests. Her IQ decreases by 1 after testing contest 2 . In the third test case, Doremy tests contest 1 and 2 . Her IQ decreases to 0 after testing contest 2 , so she can' t test contest 3 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1707A"
  },
  {
    "title": "Qpwoeirut and Vertices",
    "url": "https://codeforces.com/problemset/problem/1706/E",
    "history": "You are given a connected undirected graph with n vertices and m edges. Vertices of the graph are numbered by integers from 1 to n and edges of the graph are numbered by integers from 1 to m . Your task is to answer q queries, each consisting of two integers l and r . The answer to each query is the smallest non- negative integer k such that the following condition holds: For all pairs of integers ( a, b) such that l\u2264 a\u2264 b\u2264 r , vertices a and b are reachable from one another using only the first k edges ( that is, edges 1, 2, . . . , k ) .",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , m , and q ( 2\u2264 n\u2264 10^ 5 , 1\u2264 m, q\u2264 2\u00b7 10^ 5 ) \u2014 the number of vertices, edges, and queries respectively. Each of the next m lines contains two integers u_ i and v_ i ( 1\u2264 u_ i, v_ i\u2264 n ) \u2014 ends of the i - th edge. It is guaranteed that the graph is connected and there are no multiple edges or self- loops. Each of the next q lines contains two integers l and r ( 1\u2264 l\u2264 r\u2264 n ) \u2014 descriptions of the queries. It is guaranteed that that the sum of n over all test cases does not exceed 10^ 5 , the sum of m over all test cases does not exceed 2\u00b7 10^ 5 , and the sum of q over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print q integers \u2014 the answers to the queries.",
    "note": "Graph from the first test case. The integer near the edge is its number. In the first test case, the graph contains 2 vertices and a single edge connecting vertices 1 and 2 . In the first query, l= 1 and r= 1 . It is possible to reach any vertex from itself, so the answer to this query is 0 . In the second query, l= 1 and r= 2 . Vertices 1 and 2 are reachable from one another using only the first edge, through the path 1 \u27f7 2 . It is impossible to reach vertex 2 from vertex 1 using only the first 0 edges. So, the answer to this query is 1 . Graph from the second test case. The integer near the edge is its number. In the second test case, the graph contains 5 vertices and 5 edges. In the first query, l= 1 and r= 4 . It is enough to use the first 3 edges to satisfy the condition from the statement: Vertices 1 and 2 are reachable from one another through the path 1 \u27f7 2 ( edge 1 ) . Vertices 1 and 3 are reachable from one another through the path 1 \u27f7 3 ( edge 2 ) . Vertices 1 and 4 are reachable from one another through the path 1 \u27f7 2 \u27f7 4 ( edges 1 and 3 ) . Vertices 2 and 3 are reachable from one another through the path 2 \u27f7 1 \u27f7 3 ( edges 1 and 2 ) . Vertices 2 and 4 are reachable from one another through the path 2 \u27f7 4 ( edge 3 ) . Vertices 3 and 4 are reachable from one another through the path 3 \u27f7 1 \u27f7 2 \u27f7 4 ( edges 2 , 1 , and 3 ) . If we use less than 3 of the first edges, then the condition won' t be satisfied. For example, it is impossible to reach vertex 4 from vertex 1 using only the first 2 edges. So, the answer to this query is 3 . In the second query, l= 3 and r= 4 . Vertices 3 and 4 are reachable from one another through the path 3 \u27f7 1 \u27f7 2 \u27f7 4 ( edges 2 , 1 , and 3 ) . If we use any fewer of the first edges, nodes 3 and 4 will not be reachable from one another.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "greedy",
      "trees"
    ],
    "id": "1706E"
  },
  {
    "title": "Chopping Carrots (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1706/D2",
    "history": "This is the hard version of the problem. The only difference between the versions is the constraints on n , k , a_ i , and the sum of n over all test cases. You can make hacks only if both versions of the problem are solved. Note the unusual memory limit. You are given an array of integers a_ 1, a_ 2, . . . , a_ n of length n , and an integer k . The cost of an array of integers p_ 1, p_ 2, . . . , p_ n of length n is max_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) - min_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) . Here, \u230ax/ y\u230b denotes the integer part of the division of x by y . Find the minimum cost of an array p such that 1 \u2264 p_ i \u2264 k for all 1 \u2264 i \u2264 n .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n, k \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 10^ 5 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum possible cost of an array p satisfying the condition above.",
    "note": "In the first test case, the optimal array is p = [ 1, 1, 1, 2, 2] . The resulting array of values of \u230aa_ i/ p_ i\u230b is [ 4, 5, 6, 4, 5] . The cost of p is max_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) - min_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) = 6 - 4 = 2 . We can show that there is no array ( satisfying the condition from the statement) with a smaller cost. In the second test case, one of the optimal arrays is p = [ 12, 12, 12, 12, 12] , which results in all \u230aa_ i/ p_ i\u230b being 0 . In the third test case, the only possible array is p = [ 1, 1, 1] .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1706D2"
  },
  {
    "title": "Chopping Carrots (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1706/D1",
    "history": "This is the easy version of the problem. The only difference between the versions is the constraints on n , k , a_ i , and the sum of n over all test cases. You can make hacks only if both versions of the problem are solved. Note the unusual memory limit. You are given an array of integers a_ 1, a_ 2, . . . , a_ n of length n , and an integer k . The cost of an array of integers p_ 1, p_ 2, . . . , p_ n of length n is max_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) - min_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) . Here, \u230ax/ y\u230b denotes the integer part of the division of x by y . Find the minimum cost of an array p such that 1 \u2264 p_ i \u2264 k for all 1 \u2264 i \u2264 n .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n, k \u2264 3000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 3000 ) . It is guaranteed that the sum of n over all test cases does not exceed 3000 .",
    "output": "For each test case, print a single integer \u2014 the minimum possible cost of an array p satisfying the condition above.",
    "note": "In the first test case, the optimal array is p = [ 1, 1, 1, 2, 2] . The resulting array of values of \u230aa_ i/ p_ i\u230b is [ 4, 5, 6, 4, 5] . The cost of p is max_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) - min_ 1 \u2264 i \u2264 n( \u230aa_ i/ p_ i\u230b) = 6 - 4 = 2 . We can show that there is no array ( satisfying the condition from the statement) with a smaller cost. In the second test case, one of the optimal arrays is p = [ 12, 12, 12, 12, 12] , which results in all \u230aa_ i/ p_ i\u230b being 0 . In the third test case, the only possible array is p = [ 1, 1, 1] .",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "number theory"
    ],
    "id": "1706D1"
  },
  {
    "title": "Qpwoeirut And The City",
    "url": "https://codeforces.com/problemset/problem/1706/C",
    "history": "Qpwoeirut has taken up architecture and ambitiously decided to remodel his city. Qpwoeirut' s city can be described as a row of n buildings, the i - th ( 1 \u2264 i \u2264 n ) of which is h_ i floors high. You can assume that the height of every floor in this problem is equal. Therefore, building i is taller than the building j if and only if the number of floors h_ i in building i is larger than the number of floors h_ j in building j . Building i is cool if it is taller than both building i- 1 and building i+ 1 ( and both of them exist) . Note that neither the 1 - st nor the n - th building can be cool. To remodel the city, Qpwoeirut needs to maximize the number of cool buildings. To do this, Qpwoeirut can build additional floors on top of any of the buildings to make them taller. Note that he cannot remove already existing floors. Since building new floors is expensive, Qpwoeirut wants to minimize the number of floors he builds. Find the minimum number of floors Qpwoeirut needs to build in order to maximize the number of cool buildings.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 3 \u2264 n \u2264 10^ 5 ) \u2014 the number of buildings in Qpwoeirut' s city. The second line of each test case contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 9 ) \u2014 the number of floors in each of the buildings of the city. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of additional floors Qpwoeirut needs to build in order to maximize the number of cool buildings.",
    "note": "In the first test case, it is optimal for Qpwoeirut to make the second building cool by building 2 additional floors on top of it, making it taller than both of its adjacent buildings. The final heights of buildings will be [ 2, 3, 2] . In the second test case, the number of cool buildings is already maximized, so Qpwoeirut does not need to do anything. In the third test case, it is optimal for Qpwoeirut to make the third and fifth buildings cool by building 2 additional floors onto the third building and 1 additional floor onto the fifth building. The final heights of buildings will be [ 3, 1, 6, 5, 6, 2] . It can be shown that it is impossible to make more than 2 of the buildings cool, or to make 2 buildings cool using fewer than 3 additional floors. In the fourth test case, Qpwoeirut can either make the second building cool, or he can make the third building cool. Either way, he will be building 3 additional floors and maximizing the number of cool buildings. The final heights of buildings will be [ 4, 2, 4, 3, 5, 3, 6, 1] or [ 4, 5, 1, 3, 5, 3, 6, 1] .",
    "topics": [
      "dp",
      "flows",
      "greedy",
      "implementation"
    ],
    "id": "1706C"
  },
  {
    "title": "Making Towers",
    "url": "https://codeforces.com/problemset/problem/1706/B",
    "history": "You have a sequence of n colored blocks. The color of the i - th block is c_ i , an integer between 1 and n . You will place the blocks down in sequence on an infinite coordinate grid in the following way. Initially, you place block 1 at ( 0, 0) . For 2 \u2264 i \u2264 n , if the ( i - 1) - th block is placed at position ( x, y) , then the i - th block can be placed at one of positions ( x + 1, y) , ( x - 1, y) , ( x, y + 1) ( but not at position ( x, y - 1) ) , as long no previous block was placed at that position. A tower is formed by s blocks such that they are placed at positions ( x, y) , ( x, y + 1) , . . . , ( x, y + s - 1) for some position ( x, y) and integer s . The size of the tower is s , the number of blocks in it. A tower of color r is a tower such that all blocks in it have the color r . For each color r from 1 to n , solve the following problem independently: Find the maximum size of a tower of color r that you can form by placing down the blocks according to the rules.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output n integers. The r - th of them should be the maximum size of an tower of color r you can form by following the given rules. If you cannot form any tower of color r , the r - th integer should be 0 .",
    "note": "In the first test case, one of the possible ways to form a tower of color 1 and size 3 is: place block 1 at position ( 0, 0) ; place block 2 to the right of block 1 , at position ( 1, 0) ; place block 3 above block 2 , at position ( 1, 1) ; place block 4 to the left of block 3 , at position ( 0, 1) ; place block 5 to the left of block 4 , at position ( - 1, 1) ; place block 6 above block 5 , at position ( - 1, 2) ; place block 7 to the right of block 6 , at position ( 0, 2) . The blocks at positions ( 0, 0) , ( 0, 1) , and ( 0, 2) all have color 1 , forming an tower of size 3 . In the second test case, note that the following placement is not valid, since you are not allowed to place block 6 under block 5 : It can be shown that it is impossible to form a tower of color 4 and size 3 .",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1706B"
  },
  {
    "title": "Another String Minimization Problem",
    "url": "https://codeforces.com/problemset/problem/1706/A",
    "history": "You have a sequence a_ 1, a_ 2, . . . , a_ n of length n , consisting of integers between 1 and m . You also have a string s , consisting of m characters B. You are going to perform the following n operations. At the i - th ( 1 \u2264 i \u2264 n ) operation, you replace either the a_ i - th or the ( m + 1 - a_ i) - th character of s with A. You can replace the character at any position multiple times through the operations. Find the lexicographically smallest string you can get after these operations. A string x is lexicographically smaller than a string y of the same length if and only if in the first position where x and y differ, the string x has a letter that appears earlier in the alphabet than the corresponding letter in y .",
    "input": "The first line contains the number of test cases t ( 1 \u2264 t \u2264 2000 ) . The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 50 ) \u2014 the length of the sequence a and the length of the string s respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) \u2014 the sequence a .",
    "output": "For each test case, print a string of length m \u2014 the lexicographically smallest string you can get. Each character of the string should be either capital English letter A or capital English letter B.",
    "note": "In the first test case, the sequence a = [ 1, 1, 3, 1] . One of the possible solutions is the following. At the 1 - st operation, you can replace the 1 - st character of s with A. After it, s becomes ABBBB. At the 2 - nd operation, you can replace the 5 - th character of s with A ( since m+ 1- a_ 2= 5 ) . After it, s becomes ABBBA. At the 3 - rd operation, you can replace the 3 - rd character of s with A. After it, s becomes ABABA. At the 4 - th operation, you can replace the 1 - st character of s with A. After it, s remains equal to ABABA. The resulting string is ABABA. It is impossible to produce a lexicographically smaller string. In the second test case, you are going to perform only one operation. You can replace either the 2 - nd character or 4 - th character of s with A. You can get strings BABBB and BBBAB after the operation. The string BABBB is the lexicographically smallest among these strings. In the third test case, the only string you can get is A. In the fourth test case, you can replace the 1 - st and 2 - nd characters of s with A to get AABB. In the fifth test case, you can replace the 1 - st and 3 - rd characters of s with A to get ABABBBB.",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "greedy",
      "string suffix structures",
      "strings"
    ],
    "id": "1706A"
  },
  {
    "title": "Mark and Professor Koro",
    "url": "https://codeforces.com/problemset/problem/1705/E",
    "history": "After watching a certain anime before going to sleep, Mark dreams of standing in an old classroom with a blackboard that has a sequence of n positive integers a_ 1, a_ 2, . . . , a_ n on it. Then, professor Koro comes in. He can perform the following operation: select an integer x that appears at least 2 times on the board, erase those 2 appearances, and write x+ 1 on the board. Professor Koro then asks Mark the question, \" what is the maximum possible number that could appear on the board after some operations? \" Mark quickly solves this question, but he is still slower than professor Koro. Thus, professor Koro decides to give Mark additional challenges. He will update the initial sequence of integers q times. Each time, he will choose positive integers k and l , then change a_ k to l . After each update, he will ask Mark the same question again. Help Mark answer these questions faster than Professor Koro! Note that the updates are persistent. Changes made to the sequence a will apply when processing future updates.",
    "input": "The first line of the input contains two integers n and q ( 2\u2264 n\u2264 2\u00b7 10^ 5 , 1\u2264 q\u2264 2\u00b7 10^ 5 ) \u2014 the length of the sequence a and the number of updates, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 2\u00b7 10^ 5 ) Then, q lines follow, each consisting of two integers k and l ( 1\u2264 k\u2264 n , 1\u2264 l\u2264 2\u00b7 10^ 5 ) , telling to update a_ k to l .",
    "output": "Print q lines. The i - th line should consist of a single integer \u2014 the answer after the i - th update.",
    "note": "In the first example test, the program must proceed through 4 updates. The sequence after the first update is [ 2, 3, 2, 4, 5] . One sequence of operations that achieves the number 6 the following. Initially, the blackboard has numbers [ 2, 3, 2, 4, 5] . Erase two copies of 2 and write 3 , yielding [ 3, 4, 5, 3] . Erase two copies of 3 and write 4 , yielding [ 4, 5, 4] . Erase two copies of 4 and write 5 , yielding [ 5, 5] . Erase two copies of 5 and write 6 , yielding [ 6] . Then, in the second update, the array is changed to [ 2, 3, 2, 4, 3] . This time, Mark cannot achieve 6 . However, one sequence that Mark can use to achieve 5 is shown below. Initially, the blackboard has [ 2, 3, 2, 4, 3] . Erase two copies of 2 and write 3 , yielding [ 3, 4, 3, 3] . Erase two copies of 3 and write 4 , yielding [ 3, 4, 4] . Erase two copies of 4 and write 5 , yielding [ 3, 5] . In the third update, the array is changed to [ 2, 3, 2, 1, 3] . One way to achieve 4 is shown below. Initially, the blackboard has [ 2, 3, 2, 1, 3] . Erase two copies of 3 and write 4 , yielding [ 2, 2, 1, 4] .",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "combinatorics",
      "data structures",
      "greedy"
    ],
    "id": "1705E"
  },
  {
    "title": "Mark and Lightbulbs",
    "url": "https://codeforces.com/problemset/problem/1705/D",
    "history": "Mark has just purchased a rack of n lightbulbs. The state of the lightbulbs can be described with binary string s = s_ 1s_ 2. . . s_ n , where s_ i= means that the i - th lightbulb is turned on, while s_ i= means that the i - th lightbulb is turned off. Unfortunately, the lightbulbs are broken, and the only operation he can perform to change the state of the lightbulbs is the following: Select an index i from 2, 3, . . . , n- 1 such that s_ i- 1 s_ i+ 1 . Toggle s_ i . Namely, if s_ i is , set s_ i to or vice versa. Mark wants the state of the lightbulbs to be another binary string t . Help Mark determine the minimum number of operations to do so.",
    "input": "The first line of the input contains a single integer q ( 1\u2264 q\u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 3\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of lightbulbs. The second line of each test case contains a binary string s of length n \u2014 the initial state of the lightbulbs. The third line of each test case contains a binary string t of length n \u2014 the final state of the lightbulbs. It is guaranteed that the sum of n across all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print a line containing the minimum number of operations Mark needs to perform to transform s to t . If there is no such sequence of operations, print - 1 .",
    "note": "In the first test case, one sequence of operations that achieves the minimum number of operations is the following. Select i= 3 , changing to . Select i= 2 , changing to . In the second test case, there is no sequence of operations because one cannot change the first digit or the last digit of s . In the third test case, even though the first digits of s and t are the same and the last digits of s and t are the same, it can be shown that there is no sequence of operations that satisfies the condition. In the fourth test case, one sequence that achieves the minimum number of operations is the following: Select i= 3 , changing to . Select i= 2 , changing to . Select i= 4 , changing to . Select i= 5 , changing to . Select i= 3 , changing to .",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1705D"
  },
  {
    "title": "Mark the Dust Sweeper",
    "url": "https://codeforces.com/problemset/problem/1705/B",
    "history": "Mark is cleaning a row of n rooms. The i - th room has a nonnegative dust level a_ i . He has a magical cleaning machine that can do the following three- step operation. Select two indices i< j such that the dust levels a_ i , a_ i+ 1 , . . . , a_ j- 1 are all strictly greater than 0 . Set a_ i to a_ i- 1 . Set a_ j to a_ j+ 1 . Mark' s goal is to make a_ 1 = a_ 2 = . . . = a_ n- 1 = 0 so that he can nicely sweep the n - th room. Determine the minimum number of operations needed to reach his goal.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of rooms. The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0\u2264 a_ i\u2264 10^ 9 ) \u2014 the dust level of each room. It is guaranteed that the sum of n across all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print a line containing a single integer \u2014 the minimum number of operations. It can be proven that there is a sequence of operations that meets the goal.",
    "note": "In the first case, one possible sequence of operations is as follows. Choose i= 1 and j= 2 , yielding the array [ 1, 1, 0] . Choose i= 1 and j= 3 , yielding the array [ 0, 1, 1] . Choose i= 2 and j= 3 , yielding the array [ 0, 0, 2] . At this point, a_ 1= a_ 2= 0 , completing the process. In the second case, one possible sequence of operations is as follows. Choose i= 4 and j= 5 , yielding the array [ 0, 2, 0, 1, 1] . Choose i= 2 and j= 3 , yielding the array [ 0, 1, 1, 1, 1] . Choose i= 2 and j= 5 , yielding the array [ 0, 0, 1, 1, 2] . Choose i= 3 and j= 5 , yielding the array [ 0, 0, 0, 1, 3] . Choose i= 4 and j= 5 , yielding the array [ 0, 0, 0, 0, 4] . In the last case, the array already satisfies the condition.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1705B"
  },
  {
    "title": "Mark the Photographer",
    "url": "https://codeforces.com/problemset/problem/1705/A",
    "history": "Mark is asked to take a group photo of 2n people. The i - th person has height h_ i units. To do so, he ordered these people into two rows, the front row and the back row, each consisting of n people. However, to ensure that everyone is seen properly, the j - th person of the back row must be at least x units taller than the j - th person of the front row for each j between 1 and n , inclusive. Help Mark determine if this is possible.",
    "input": "The first line contains one integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains two positive integers n and x ( 1\u2264 n\u2264 100 , 1\u2264 x\u2264 10^ 3 ) \u2014 the number of people in each row and the minimum difference Mark wants. The second line of each test case contains 2n positive integers h_ 1, h_ 2, . . . , h_ 2n ( 1\u2264 h_ i\u2264 10^ 3 ) \u2014 the height of each person in units. Note that the sum of n over all test cases is not bounded.",
    "output": "For each test case, print a single line containing \" YES\" if Mark could arrange people satisfying his condition and \" NO\" otherwise. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answers) .",
    "note": "In the first test case, one possible order is to have the third, fifth, and sixth person on the back row and the second, first, and fourth on the front row. The heights of the people will look like this. Back 9 12 16 Front 3 1 10 It works because h_ 3- h_ 2 = 9- 3 \u2265 6 , h_ 5- h_ 1 = 12- 1\u2265 6 , and h_ 6- h_ 4 = 16- 10\u2265 6 . In the second test case, it can be shown there is no way to order people in a way that satisfies the condition. In the third test case, the only way to arrange people to satisfy the condition is to have the first person on the back row and the second person on the front row.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1705A"
  },
  {
    "title": "Virus",
    "url": "https://codeforces.com/problemset/problem/1704/C",
    "history": "There are n houses numbered from 1 to n on a circle. For each 1 \u2264 i \u2264 n - 1 , house i and house i + 1 are neighbours; additionally, house n and house 1 are also neighbours. Initially, m of these n houses are infected by a deadly virus. Each morning, Cirno can choose a house which is uninfected and protect the house from being infected permanently. Every day, the following things happen in order: Cirno chooses an uninfected house, and protect it permanently. All uninfected, unprotected houses which have at least one infected neighbor become infected. Cirno wants to stop the virus from spreading. Find the minimum number of houses that will be infected in the end, if she optimally choose the houses to protect. Note that every day Cirno always chooses a house to protect before the virus spreads. Also, a protected house will not be infected forever.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of test cases follows. The first line of each test case consists of two positive integers n, m ( 5 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264min( n, 10^ 5) ) \u2014 the number of houses on the circle, and the number of houses that are initially infected. The second line of each test case consists of m distinct positive integers a_ 1, a_ 2, \u22ef , a_ m ( 1 \u2264 a_ i \u2264 n ) \u2014 the indices of the houses infected initially. It is guaranteed that the sum of m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output an integer on a separate line, which is the minimum number of infected houses in the end.",
    "note": "In the first test case: At the start of the first day, house 3 , 6 , 8 are infected. Choose house 2 to protect. At the start of the second day, house 3 , 4 , 5 , 6 , 7 , 8 , 9 are infected. Choose house 10 to protect. At the start of the third day, no more houses are infected. In the second test case: At the start of the first day, house 2 , 5 are infected. Choose house 1 to protect. At the start of the second day, house 2 , 3 , 4 , 5 , 6 are infected. No more available houses can be protected.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1704C"
  },
  {
    "title": "Luke is a Foodie",
    "url": "https://codeforces.com/problemset/problem/1704/B",
    "history": "Luke likes to eat. There are n piles of food aligned in a straight line in front of him. The i - th pile contains a_ i units of food. Luke will walk from the 1 - st pile towards the n - th pile, and he wants to eat every pile of food without walking back. When Luke reaches the i - th pile, he can eat that pile if and only if | v - a_ i| \u2264 x , where x is a fixed integer, and v is Luke' s food affinity. Before Luke starts to walk, he can set v to any integer. Also, for each i ( 1 \u2264 i \u2264 n ) , Luke can change his food affinity to any integer before he eats the i - th pile. Find the minimum number of changes needed to eat every pile of food. Note that the initial choice for v is not considered as a change.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. For each test case, the first line contains two integers, n, x ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of piles, and the maximum difference between the size of a pile and Luke' s food affinity, such that Luke can eat the pile. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output an integer on a separate line, which is the minimum number of changes needed.",
    "note": "In the first test case, Luke can set v to 5 before he starts to walk. And he can walk straight to eat every piles of food without changing v . In the second test case, Luke can set v to 3 before he starts to walk. And he could change v to 10 before he eats the second pile. After that, he can walk straight to eat remaining food without changing v . In the fourth test case, Luke can set v to 3 before he starts to walk. And he could change v to 8 before he eats the sixth pile. After that, he can walk straight to eat remaining food without changing v . In the fifth test case, Luke can set v to 4 before he starts to walk. And he could change v to 6 before he eats the fourth pile. Then he could change v to 12 before he eats the seventh pile. After that, he can walk straight to eat remaining food without changing v .",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1704B"
  },
  {
    "title": "Two 0-1 Sequences",
    "url": "https://codeforces.com/problemset/problem/1704/A",
    "history": "AquaMoon has two binary sequences a and b , which contain only 0 and 1 . AquaMoon can perform the following two operations any number of times ( a_ 1 is the first element of a , a_ 2 is the second element of a , and so on) : Operation 1: if a contains at least two elements, change a_ 2 to min( a_ 1, a_ 2) , and remove the first element of a . Operation 2: if a contains at least two elements, change a_ 2 to max( a_ 1, a_ 2) , and remove the first element of a . Note that after a removal of the first element of a , the former a_ 2 becomes the first element of a , the former a_ 3 becomes the second element of a and so on, and the length of a reduces by one. Determine if AquaMoon can make a equal to b by using these operations.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 000 ) \u2014 the number of test cases. Description of test cases follows. The first line of each test case contains two integers n , m ( 1 \u2264 n, m \u2264 50 , m \u2264 n ) \u2014 the lengths of a and b respectively. The second line of each test case contains a string a of length n , consisting only 0 and 1 . The third line of each test case contains a string b of length m , consisting only 0 and 1 .",
    "output": "For each test case, output \" YES\" if AquaMoon can change a to b by using these options; otherwise, output \" NO\" . You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as a positive answer) .",
    "note": "In the first test case, you can use Operation 2 four times to make a equals to b . In the second test case, you can use Operation 1 four times to make a equals to b . In the third test case, it can be proved that no matter how we use the operations, it is impossible to make a equal to b . In the fourth test case, it can be proved that no matter how we use the operations, it is impossible to make a equal to b . In the fifth test case, you can use Operation 2 three times to make a become 10101 , so the first element of a equals to the first element of b , but it can be proved that no matter how to operate, the second to the fifth elements of a can' t be the same as b .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1704A"
  },
  {
    "title": "Good Key, Bad Key",
    "url": "https://codeforces.com/problemset/problem/1703/G",
    "history": "There are n chests. The i - th chest contains a_ i coins. You need to open all n chests in order from chest 1 to chest n . There are two types of keys you can use to open a chest: a good key, which costs k coins to use; a bad key, which does not cost any coins, but will halve all the coins in each unopened chest, including the chest it is about to open. The halving operation will round down to the nearest integer for each chest halved. In other words using a bad key to open chest i will do a_ i = \u230aa_ i/ 2\u230b , a_ i+ 1 = \u230aa_ i+ 1/ 2\u230b, . . . , a_ n = \u230aa_ n/ 2\u230b ; any key ( both good and bad) breaks after a usage, that is, it is a one- time use. You need to use in total n keys, one for each chest. Initially, you have no coins and no keys. If you want to use a good key, then you need to buy it. During the process, you are allowed to go into debt; for example, if you have 1 coin, you are allowed to buy a good key worth k= 3 coins, and your balance will become - 2 coins. Find the maximum number of coins you can have after opening all n chests in order from chest 1 to chest n .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 5 ; 0 \u2264 k \u2264 10^ 9 ) \u2014 the number of chests and the cost of a good key respectively. The second line of each test case contains n integers a_ i ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the amount of coins in each chest. The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the maximum number of coins you can obtain after opening the chests in order from chest 1 to chest n . Please note, that the answer for some test cases won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "note": "In the first test case, one possible strategy is as follows: Buy a good key for 5 coins, and open chest 1 , receiving 10 coins. Your current balance is 0 + 10 - 5 = 5 coins. Buy a good key for 5 coins, and open chest 2 , receiving 10 coins. Your current balance is 5 + 10 - 5 = 10 coins. Use a bad key and open chest 3 . As a result of using a bad key, the number of coins in chest 3 becomes \u230a3/ 2\u230b = 1 , and the number of coins in chest 4 becomes \u230a1/ 2\u230b = 0 . Your current balance is 10 + 1 = 11 . Use a bad key and open chest 4 . As a result of using a bad key, the number of coins in chest 4 becomes \u230a0/ 2\u230b = 0 . Your current balance is 11 + 0 = 11 . At the end of the process, you have 11 coins, which can be proven to be maximal.",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1703G"
  },
  {
    "title": "Yet Another Problem About Pairs Satisfying an Inequality",
    "url": "https://codeforces.com/problemset/problem/1703/F",
    "history": "You are given an array a_ 1, a_ 2, . . . a_ n . Count the number of pairs of indices 1 \u2264 i, j \u2264 n such that a_ i < i < a_ j < j .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that the sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of pairs of indices satisfying the condition in the statement. Please note, that the answer for some test cases won' t fit into 32- bit integer type, so you should use at least 64- bit integer type in your programming language ( like long long for C+ + ) .",
    "note": "For the first test cases the pairs are ( i, j) = { ( 2, 4) , ( 2, 8) , ( 3, 8) } . The pair ( 2, 4) is true because a_ 2 = 1 , a_ 4 = 3 and 1 < 2 < 3 < 4 . The pair ( 2, 8) is true because a_ 2 = 1 , a_ 8 = 4 and 1 < 2 < 4 < 8 . The pair ( 3, 8) is true because a_ 3 = 2 , a_ 8 = 4 and 2 < 3 < 4 < 8 .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1703F"
  },
  {
    "title": "Equate Multisets",
    "url": "https://codeforces.com/problemset/problem/1702/F",
    "history": "Multiset \u2014is a set of numbers in which there can be equal elements, and the order of the numbers does not matter. Two multisets are equal when each value occurs the same number of times. For example, the multisets { 2, 2, 4} and { 2, 4, 2} are equal, but the multisets { 1, 2, 2} and { 1, 1, 2} \u2014 are not. You are given two multisets a and b , each consisting of n integers. In a single operation, any element of the b multiset can be doubled or halved ( rounded down) . In other words, you have one of the following operations available for an element x of the b multiset: replace x with x \u00b7 2 , or replace x with \u230ax/ 2\u230b ( round down) . Note that you cannot change the elements of the a multiset. See if you can make the multiset b become equal to the multiset a in an arbitrary number of operations ( maybe 0 ) . For example, if n = 4 , a = { 4, 24, 5, 2} , b = { 4, 1, 6, 11} , then the answer is yes. We can proceed as follows: Replace 1 with 1 \u00b7 2 = 2 . We get b = { 4, 2, 6, 11} . Replace 11 with \u230a11/ 2\u230b = 5 . We get b = { 4, 2, 6, 5} . Replace 6 with 6 \u00b7 2 = 12 . We get b = { 4, 2, 12, 5} . Replace 12 with 12 \u00b7 2 = 24 . We get b = { 4, 2, 24, 5} . Got equal multisets a = { 4, 24, 5, 2} and b = { 4, 2, 24, 5} .",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases. Each test case consists of three lines. The first line of the test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014the number of elements in the multisets a and b . The second line gives n integers: a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 10^ 9 ) \u2014the elements of the multiset a . Note that the elements may be equal. The third line contains n integers: b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ 1 \u2264 b_ 2 \u2264. . . \u2264 b_ n \u2264 10^ 9 ) \u2014 elements of the multiset b . Note that the elements may be equal. It is guaranteed that the sum of n values over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on a separate line: YES if you can make the multiset b become equal to a , NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as positive answer) .",
    "note": "The first example is explained in the statement. In the second example, it is impossible to get the value 31 from the numbers of the multiset b by available operations. In the third example, we can proceed as follows: Replace 2 with 2 \u00b7 2 = 4 . We get b = { 4, 14, 14, 26, 42} . Replace 14 with \u230a14/ 2\u230b = 7 . We get b = { 4, 7, 14, 26, 42} . Replace 26 with \u230a26/ 2\u230b = 13 . We get b = { 4, 7, 14, 13, 42} . Replace 42 with \u230a42/ 2\u230b = 21 . We get b = { 4, 7, 14, 13, 21} . Replace 21 with \u230a21/ 2\u230b = 10 . We get b = { 4, 7, 14, 13, 10} . Got equal multisets a = { 4, 7, 10, 13, 14} and b = { 4, 7, 14, 13, 10} .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1702F"
  },
  {
    "title": "Not a Cheap String",
    "url": "https://codeforces.com/problemset/problem/1702/D",
    "history": "Let s be a string of lowercase Latin letters. Its price is the sum of the indices of letters ( an integer between 1 and 26) that are included in it. For example, the price of the string abca is 1+ 2+ 3+ 1= 7 . The string w and the integer p are given. Remove the minimal number of letters from w so that its price becomes less than or equal to p and print the resulting string. Note that the resulting string may be empty. You can delete arbitrary letters, they do not have to go in a row. If the price of a given string w is less than or equal to p , then nothing needs to be deleted and w must be output. Note that when you delete a letter from w , the order of the remaining letters is preserved. For example, if you delete the letter e from the string test, you get tst.",
    "input": "The first line of input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The following are descriptions of t test cases. Each case consists of two lines. The first of them is the string w , it is non- empty and consists of lowercase Latin letters. Its length does not exceed 2\u00b710^ 5 . The second line contains an integer p ( 1 \u2264 p \u2264 5 200 000 ) . It is guaranteed that the sum of string lengths w over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output exactly t rows, the i - th of them should contain the answer to the i - th set of input data. Print the longest string that is obtained from w by deleting letters such that its price is less or equal to p . If there are several answers, then output any of them. Note that the empty string \u2014 is one of the possible answers. In this case, just output an empty string.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1702D"
  },
  {
    "title": "Train and Queries",
    "url": "https://codeforces.com/problemset/problem/1702/C",
    "history": "Along the railroad there are stations indexed from 1 to 10^ 9 . An express train always travels along a route consisting of n stations with indices u_ 1, u_ 2, . . . , u_ n , where ( 1 \u2264 u_ i \u2264 10^ 9 ) . The train travels along the route from left to right. It starts at station u_ 1 , then stops at station u_ 2 , then at u_ 3 , and so on. Station u_ n \u2014 the terminus. It is possible that the train will visit the same station more than once. That is, there may be duplicates among the values u_ 1, u_ 2, . . . , u_ n . You are given k queries, each containing two different integers a_ j and b_ j ( 1 \u2264 a_ j, b_ j \u2264 10^ 9 ) . For each query, determine whether it is possible to travel by train from the station with index a_ j to the station with index b_ j . For example, let the train route consist of 6 of stations with indices [ 3, 7, 1, 5, 1, 4 ] and give 3 of the following queries: a_ 1 = 3 , b_ 1 = 5 It is possible to travel from station 3 to station 5 by taking a section of the route consisting of stations [ 3, 7, 1, 5 ] . Answer: YES. a_ 2 = 1 , b_ 2 = 7 You cannot travel from station 1 to station 7 because the train cannot travel in the opposite direction. Answer: NO. a_ 3 = 3 , b_ 3 = 10 It is not possible to travel from station 3 to station 10 because station 10 is not part of the train' s route. Answer: NO.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case is empty. The second line of each test case contains two integers: n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014the number of stations the train route consists of and the number of queries. The third line of each test case contains exactly n integers u_ 1, u_ 2, . . . , u_ n ( 1 \u2264 u_ i \u2264 10^ 9 ) . The values u_ 1, u_ 2, . . . , u_ n are not necessarily different. The following k lines contain two different integers a_ j and b_ j ( 1 \u2264 a_ j, b_ j \u2264 10^ 9 ) describing the query with index j . It is guaranteed that the sum of n values over all test cases in the test does not exceed 2 \u00b7 10^ 5 . Similarly, it is guaranteed that the sum of k values over all test cases in the test also does not exceed 2 \u00b7 10^ 5",
    "output": "For each test case, output on a separate line: YES, if you can travel by train from the station with index a_ j to the station with index b_ j NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as a positive response) .",
    "note": "The first test case is explained in the problem statement.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1702C"
  },
  {
    "title": "Polycarp Writes a String from Memory",
    "url": "https://codeforces.com/problemset/problem/1702/B",
    "history": "Polycarp has a poor memory. Each day he can remember no more than 3 of different letters. Polycarp wants to write a non- empty string of s consisting of lowercase Latin letters, taking minimum number of days. In how many days will he be able to do it? Polycarp initially has an empty string and can only add characters to the end of that string. For example, if Polycarp wants to write the string lollipops, he will do it in 2 days: on the first day Polycarp will memorize the letters l, o, i and write lolli; On the second day Polycarp will remember the letters p, o, s, add pops to the resulting line and get the line lollipops. If Polycarp wants to write the string stringology, he will do it in 4 days: in the first day will be written part str; on day two will be written part ing; on the third day, part of olog will be written; on the fourth day, part of y will be written. For a given string s , print the minimum number of days it will take Polycarp to write it.",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case consists of a non- empty string s consisting of lowercase Latin letters ( the length of the string s does not exceed 2 \u00b7 10^ 5 ) \u2014 the string Polycarp wants to construct. It is guaranteed that the sum of string lengths s over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single number \u2014 minimum number of days it will take Polycarp to write the string s from memory.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1702B"
  },
  {
    "title": "Text Editor",
    "url": "https://codeforces.com/problemset/problem/1701/E",
    "history": "You wanted to write a text t consisting of m lowercase Latin letters. But instead, you have written a text s consisting of n lowercase Latin letters, and now you want to fix it by obtaining the text t from the text s . Initially, the cursor of your text editor is at the end of the text s ( after its last character) . In one move, you can do one of the following actions: press the \" left\" button, so the cursor is moved to the left by one position ( or does nothing if it is pointing at the beginning of the text, i. e. before its first character) ; press the \" right\" button, so the cursor is moved to the right by one position ( or does nothing if it is pointing at the end of the text, i. e. after its last character) ; press the \" home\" button, so the cursor is moved to the beginning of the text ( before the first character of the text) ; press the \" end\" button, so the cursor is moved to the end of the text ( after the last character of the text) ; press the \" backspace\" button, so the character before the cursor is removed from the text ( if there is no such character, nothing happens) . Your task is to calculate the minimum number of moves required to obtain the text t from the text s using the given set of actions, or determine it is impossible to obtain the text t from the text s . You have to answer T independent test cases.",
    "input": "The first line of the input contains one integer T ( 1 \u2264 T \u2264 5000 ) \u2014 the number of test cases. Then T test cases follow. The first line of the test case contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 5000 ) \u2014 the length of s and the length of t , respectively. The second line of the test case contains the string s consisting of n lowercase Latin letters. The third line of the test case contains the string t consisting of m lowercase Latin letters. It is guaranteed that the sum of n over all test cases does not exceed 5000 ( \u2211 n \u2264 5000 ) .",
    "output": "For each test case, print one integer \u2014 the minimum number of moves required to obtain the text t from the text s using the given set of actions, or - 1 if it is impossible to obtain the text t from the text s in the given test case.",
    "note": "",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1701E"
  },
  {
    "title": "Permutation Restoration",
    "url": "https://codeforces.com/problemset/problem/1701/D",
    "history": "Monocarp had a permutation a of n integers 1 , 2 , . . . , n ( a permutation is an array where each element from 1 to n occurs exactly once) . Then Monocarp calculated an array of integers b of size n , where b_ i = \u230ai/ a_ i\u230b . For example, if the permutation a is [ 2, 1, 4, 3] , then the array b is equal to [ \u230a1/ 2\u230b, \u230a2/ 1\u230b, \u230a3/ 4\u230b, \u230a4/ 3\u230b] = [ 0, 2, 0, 1] . Unfortunately, the Monocarp has lost his permutation, so he wants to restore it. Your task is to find a permutation a that corresponds to the given array b . If there are multiple possible permutations, then print any of them. The tests are constructed in such a way that least one suitable permutation exists.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) . The second line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 n ) . Additional constrains on the input: the sum of n over test cases does not exceed 5 \u00b7 10^ 5 ; there exists at least one permutation a that would yield this array b .",
    "output": "For each test case, print n integers \u2014 a permutation a that corresponds to the given array b . If there are multiple possible permutations, then print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "1701D"
  },
  {
    "title": "Schedule Management",
    "url": "https://codeforces.com/problemset/problem/1701/C",
    "history": "There are n workers and m tasks. The workers are numbered from 1 to n . Each task i has a value a_ i \u2014 the index of worker who is proficient in this task. Every task should have a worker assigned to it. If a worker is proficient in the task, they complete it in 1 hour. Otherwise, it takes them 2 hours. The workers work in parallel, independently of each other. Each worker can only work on one task at once. Assign the workers to all tasks in such a way that the tasks are completed as early as possible. The work starts at time 0 . What' s the minimum time all tasks can be completed by?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains two integers n and m ( 1 \u2264 n \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of workers and the number of tasks. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 1 \u2264 a_ i \u2264 n ) \u2014 the index of the worker proficient in the i - th task. The sum of m over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the minimum time all tasks can be completed by.",
    "note": "In the first testcase, the first worker works on tasks 1 and 3 , and the second worker works on tasks 2 and 4 . Since they both are proficient in the corresponding tasks, they take 1 hour on each. Both of them complete 2 tasks in 2 hours. Thus, all tasks are completed by 2 hours. In the second testcase, it' s optimal to assign the first worker to tasks 1, 2 and 3 and the second worker to task 4 . The first worker spends 3 hours, the second worker spends 2 hours ( since they are not proficient in the taken task) . In the third example, each worker can be assigned to the task they are proficient at. Thus, each of them complete their task in 1 hour.",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1701C"
  },
  {
    "title": "Permutation",
    "url": "https://codeforces.com/problemset/problem/1701/B",
    "history": "Recall that a permutation of length n is an array where each element from 1 to n occurs exactly once. For a fixed positive integer d , let' s define the cost of the permutation p of length n as the number of indices i ( 1 \u2264 i < n) such that p_ i \u00b7 d = p_ i + 1 . For example, if d = 3 and p = [ 5, 2, 6, 7, 1, 3, 4] , then the cost of such a permutation is 2 , because p_ 2 \u00b7 3 = p_ 3 and p_ 5 \u00b7 3 = p_ 6 . Your task is the following one: for a given value n , find the permutation of length n and the value d with maximum possible cost ( over all ways to choose the permutation and d ) . If there are multiple answers, then print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. The single line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the value d in the first line, and n integers in the second line \u2014 the permutation itself. If there are multiple answers, then print any of them.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1701B"
  },
  {
    "title": "Puzzle",
    "url": "https://codeforces.com/problemset/problem/1700/F",
    "history": "Pupils Alice and Ibragim are best friends. It' s Ibragim' s birthday soon, so Alice decided to gift him a new puzzle. The puzzle can be represented as a matrix with 2 rows and n columns, every element of which is either 0 or 1 . In one move you can swap two values in neighboring cells. More formally, let' s number rows 1 to 2 from top to bottom, and columns 1 to n from left to right. Also, let' s denote a cell in row x and column y as ( x, y) . We consider cells ( x_ 1, y_ 1) and ( x_ 2, y_ 2) neighboring if | x_ 1 - x_ 2| + | y_ 1 - y_ 2| = 1 . Alice doesn' t like the way in which the cells are currently arranged, so she came up with her own arrangement, with which she wants to gift the puzzle to Ibragim. Since you are her smartest friend, she asked you to help her find the minimal possible number of operations in which she can get the desired arrangement. Find this number, or determine that it' s not possible to get the new arrangement.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the number of columns in the puzzle. Following two lines describe the current arrangement on the puzzle. Each line contains n integers, every one of which is either 0 or 1 . The last two lines describe Alice' s desired arrangement in the same format.",
    "output": "If it is possible to get the desired arrangement, print the minimal possible number of steps, otherwise print - 1 .",
    "note": "In the first example the following sequence of swaps will suffice: ( 2, 1) , ( 1, 1) , ( 1, 2) , ( 1, 3) , ( 2, 2) , ( 2, 3) , ( 1, 4) , ( 1, 5) , ( 2, 5) , ( 2, 4) . It can be shown that 5 is the minimal possible answer in this case. In the second example no matter what swaps you do, you won' t get the desired arrangement, so the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1700F"
  },
  {
    "title": "River Locks",
    "url": "https://codeforces.com/problemset/problem/1700/D",
    "history": "Recently in Divanovo, a huge river locks system was built. There are now n locks, the i - th of them has the volume of v_ i liters, so that it can contain any amount of water between 0 and v_ i liters. Each lock has a pipe attached to it. When the pipe is open, 1 liter of water enters the lock every second. The locks system is built in a way to immediately transfer all water exceeding the volume of the lock i to the lock i + 1 . If the lock i + 1 is also full, water will be transferred further. Water exceeding the volume of the last lock pours out to the river. The picture illustrates 5 locks with two open pipes at locks 1 and 3 . Because locks 1 , 3 , and 4 are already filled, effectively the water goes to locks 2 and 5 . Note that the volume of the i - th lock may be greater than the volume of the i + 1 - th lock. To make all locks work, you need to completely fill each one of them. The mayor of Divanovo is interested in q independent queries. For each query, suppose that initially all locks are empty and all pipes are closed. Then, some pipes are opened simultaneously. For the j - th query the mayor asks you to calculate the minimum number of pipes to open so that all locks are filled no later than after t_ j seconds. Please help the mayor to solve this tricky problem and answer his queries.",
    "input": "The first lines contains one integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the number of locks. The second lines contains n integers v_ 1, v_ 2, . . . , v_ n ( 1 \u2264 v_ i \u2264 10^ 9 ) ) \u2014 volumes of the locks. The third line contains one integer q ( 1 \u2264 q \u2264 200 000 ) \u2014 the number of queries. Each of the next q lines contains one integer t_ j ( 1 \u2264 t_ j \u2264 10^ 9 ) \u2014 the number of seconds you have to fill all the locks in the query j .",
    "output": "Print q integers. The j - th of them should be equal to the minimum number of pipes to turn on so that after t_ j seconds all of the locks are filled. If it is impossible to fill all of the locks in given time, print - 1 .",
    "note": "There are 6 queries in the first example test. In the queries 1, 3, 4 the answer is - 1 . We need to wait 4 seconds to fill the first lock even if we open all the pipes. In the sixth query we can open pipes in locks 1 , 3 , and 4 . After 4 seconds the locks 1 and 4 are full. In the following 1 second 1 liter of water is transferred to the locks 2 and 5 . The lock 3 is filled by its own pipe. Similarly, in the second query one can open pipes in locks 1 , 3 , and 4 . In the fifth query one can open pipes 1, 2, 3, 4 .",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1700D"
  },
  {
    "title": "Helping the Nature",
    "url": "https://codeforces.com/problemset/problem/1700/C",
    "history": "Little Leon lives in the forest. He has recently noticed that some trees near his favourite path are withering, while the other ones are overhydrated so he decided to learn how to control the level of the soil moisture to save the trees. There are n trees growing near the path, the current levels of moisture of each tree are denoted by the array a_ 1, a_ 2, . . . , a_ n . Leon has learned three abilities which will help him to dry and water the soil. Choose a position i and decrease the level of moisture of the trees 1, 2, . . . , i by 1 . Choose a position i and decrease the level of moisture of the trees i, i + 1, . . . , n by 1 . Increase the level of moisture of all trees by 1 . Leon wants to know the minimum number of actions he needs to perform to make the moisture of each tree equal to 0 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of t test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 200 000 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial levels of trees moisture. It is guaranteed that the sum of n over all test cases doesn' t exceed 200 000 .",
    "output": "For each test case output a single integer \u2014 the minimum number of actions. It can be shown that the answer exists.",
    "note": "In the first test case it' s enough to apply the operation of adding 1 to the whole array 2 times. In the second test case you can apply the operation of decreasing 4 times on the prefix of length 3 and get an array 6, 0, 3 . After that apply the operation of decreasing 6 times on the prefix of length 1 and 3 times on the suffix of length 1 . In total, the number of actions will be 4 + 6 + 3 = 13 . It can be shown that it' s impossible to perform less actions to get the required array, so the answer is 13 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1700C"
  },
  {
    "title": "Optimal Path",
    "url": "https://codeforces.com/problemset/problem/1700/A",
    "history": "You are given a table a of size n \u00d7 m . We will consider the table rows numbered from top to bottom from 1 to n , and the columns numbered from left to right from 1 to m . We will denote a cell that is in the i - th row and in the j - th column as ( i, j) . In the cell ( i, j) there is written a number ( i - 1) \u00b7 m + j , that is a_ ij = ( i - 1) \u00b7 m + j . A turtle initially stands in the cell ( 1, 1) and it wants to come to the cell ( n, m) . From the cell ( i, j) it can in one step go to one of the cells ( i + 1, j) or ( i, j + 1) , if it exists. A path is a sequence of cells in which for every two adjacent in the sequence cells the following satisfies: the turtle can reach from the first cell to the second cell in one step. A cost of a path is the sum of numbers that are written in the cells of the path. For example, with n = 2 and m = 3 the table will look as shown above. The turtle can take the following path: ( 1, 1) \u2192 ( 1, 2) \u2192 ( 1, 3) \u2192 ( 2, 3) . The cost of such way is equal to a_ 11 + a_ 12 + a_ 13 + a_ 23 = 12 . On the other hand, the paths ( 1, 1) \u2192 ( 1, 2) \u2192 ( 2, 2) \u2192 ( 2, 1) and ( 1, 1) \u2192 ( 1, 3) are incorrect, because in the first path the turtle can' t make a step ( 2, 2) \u2192 ( 2, 1) , and in the second path it can' t make a step ( 1, 1) \u2192 ( 1, 3) . You are asked to tell the turtle a minimal possible cost of a path from the cell ( 1, 1) to the cell ( n, m) . Please note that the cells ( 1, 1) and ( n, m) are a part of the way.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. A single line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 4 ) \u2014 the number of rows and columns of the table a respectively.",
    "output": "For each test case output a single integer \u2014 a minimal possible cost of a path from the cell ( 1, 1) to the cell ( n, m) .",
    "note": "In the first test case the only possible path consists of a single cell ( 1, 1) . The path with the minimal cost in the second test case is shown in the statement. In the fourth and the fifth test cases there is only one path from ( 1, 1) to ( n, m) . Both paths visit every cell in the table.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1700A"
  },
  {
    "title": "Three Days Grace",
    "url": "https://codeforces.com/problemset/problem/1699/E",
    "history": "Ibti was thinking about a good title for this problem that would fit the round theme ( numerus ternarium) . He immediately thought about the third derivative, but that was pretty lame so he decided to include the best band in the world \u2014 Three Days Grace. You are given a multiset A with initial size n , whose elements are integers between 1 and m . In one operation, do the following: select a value x from the multiset A , then select two integers p and q such that p, q > 1 and p \u00b7 q = x . Insert p and q to A , delete x from A . Note that the size of the multiset A increases by 1 after each operation. We define the balance of the multiset A as max( a_ i) - min( a_ i) . Find the minimum possible balance after performing any number ( possible zero) of operations.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The second line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10^ 6 , 1 \u2264 m \u2264 5 \u00b7 10^ 6 ) \u2014 the initial size of the multiset, and the maximum value of an element. The third line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) \u2014 the elements in the initial multiset. It is guaranteed that the sum of n across all test cases does not exceed 10^ 6 and the sum of m across all test cases does not exceed 5 \u00b7 10^ 6 .",
    "output": "For each test case, print a single integer \u2014 the minimum possible balance.",
    "note": "In the first test case, we can apply the operation on each of the 4 s with ( p, q) = ( 2, 2) and make the multiset { 2, 2, 2, 2, 2, 2, 2} with balance max( { 2, 2, 2, 2, 2, 2, 2} ) - min( { 2, 2, 2, 2, 2, 2, 2} ) = 0 . It is obvious we cannot make this balance less than 0 . In the second test case, we can apply an operation on 12 with ( p, q) = ( 3, 4) . After this our multiset will be { 3, 4, 2, 3} . We can make one more operation on 4 with ( p, q) = ( 2, 2) , making the multiset { 3, 2, 2, 2, 3} with balance equal to 1 . In the third test case, we can apply an operation on 35 with ( p, q) = ( 5, 7) . The final multiset is { 6, 5, 7} and has a balance equal to 7- 5 = 2 . In the forth test case, we cannot apply any operation, so the balance is 5 - 1 = 4 .",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1699E"
  },
  {
    "title": "Almost Triple Deletions",
    "url": "https://codeforces.com/problemset/problem/1699/D",
    "history": "You are given an integer n and an array a_ 1, a_ 2, . . . , a_ n . In one operation, you can choose an index i ( 1 \u2264 i n ) for which a_ i = \u0338 a_ i+ 1 and delete both a_ i and a_ i+ 1 from the array. After deleting a_ i and a_ i+ 1 , the remaining parts of the array are concatenated. For example, if a= [ 1, 4, 3, 3, 6, 2] , then after performing an operation with i= 2 , the resulting array will be [ 1, 3, 6, 2] . What is the maximum possible length of an array of equal elements obtainable from a by performing several ( perhaps none) of the aforementioned operations?",
    "input": "Each test contains multiple test cases. The first line of input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The following lines contain the descriptions of the test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of array a . It is guaranteed that the sum of n across all test cases does not exceed 10 000 .",
    "output": "For each testcase, print a single integer, the maximum possible length of an array of equal elements obtainable from a by performing a sequence of operations.",
    "note": "For the first testcase, an optimal sequence of operations would be: [ 1, 2, 3, 2, 1, 3, 3] \u2192 [ 3, 2, 1, 3, 3] \u2192 [ 3, 3, 3] . For the second testcase, all elements in the array are already equal. For the third testcase, the only possible sequence of operations is: [ 1, 1, 1, 2, 2, 2] \u2192 [ 1, 1, 2, 2] \u2192 [ 1, 2] \u2192 [ ] . Note that, according to the statement, the elements deleted at each step must be different. For the fourth testcase, the optimal sequence of operations is: [ 1, 1, 2, 2, 3, 3, 1, 1] \u2192 [ 1, 1, 2, 3, 1, 1] \u2192 [ 1, 1, 1, 1] . For the fifth testcase, one possible reachable array of two equal elements is [ 4, 4] .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1699D"
  },
  {
    "title": "PermutationForces II",
    "url": "https://codeforces.com/problemset/problem/1698/E",
    "history": "You are given a permutation a of length n . Recall that permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. You have a strength of s and perform n moves on the permutation a . The i - th move consists of the following: Pick two integers x and y such that i \u2264 x \u2264 y \u2264min( i+ s, n) , and swap the positions of the integers x and y in the permutation a . Note that you can select x= y in the operation, in which case no swap will occur. You want to turn a into another permutation b after n moves. However, some elements of b are missing and are replaced with - 1 instead. Count the number of ways to replace each - 1 in b with some integer from 1 to n so that b is a permutation and it is possible to turn a into b with a strength of s . Since the answer can be large, output it modulo 998 244 353 .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and s ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 s \u2264 n ) \u2014 the size of the permutation and your strength, respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of a . All elements of a are distinct. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n or b_ i = - 1 ) \u2014 the elements of b . All elements of b that are not equal to - 1 are distinct. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of ways to fill up the permutation b so that it is possible to turn a into b using a strength of s , modulo 998 244 353 .",
    "note": "In the first test case, a= [ 2, 1, 3] . There are two possible ways to fill out the - 1 s in b to make it a permutation: [ 3, 1, 2] or [ 3, 2, 1] . We can make a into [ 3, 1, 2] with a strength of 1 as follows: [ 2, 1, 3] [ 2, 1, 3] [ 3, 1, 2] [ 3, 1, 2] . It can be proven that it is impossible to make [ 2, 1, 3] into [ 3, 2, 1] with a strength of 1 . Thus only one permutation b satisfies the constraints, so the answer is 1 . In the second test case, a and b the same as the previous test case, but we now have a strength of 2 . We can make a into [ 3, 2, 1] with a strength of 2 as follows: [ 2, 1, 3] [ 2, 3, 1] [ 3, 2, 1] [ 3, 2, 1] . We can still make a into [ 3, 1, 2] using a strength of 1 as shown in the previous test case, so the answer is 2 . In the third test case, there is only one permutation b . It can be shown that it is impossible to turn a into b , so the answer is 0 .",
    "topics": [
      "brute force",
      "combinatorics",
      "greedy",
      "sortings",
      "trees",
      "two pointers"
    ],
    "id": "1698E"
  },
  {
    "title": "Rising Sand",
    "url": "https://codeforces.com/problemset/problem/1698/B",
    "history": "There are n piles of sand where the i - th pile has a_ i blocks of sand. The i - th pile is called too tall if 1 < i < n and a_ i > a_ i- 1 + a_ i+ 1 . That is, a pile is too tall if it has more sand than its two neighbours combined. ( Note that piles on the ends of the array cannot be too tall. ) You are given an integer k . An operation consists of picking k consecutive piles of sand and adding one unit of sand to them all. Formally, pick 1 \u2264 l, r \u2264 n such that r- l+ 1= k . Then for all l \u2264 i \u2264 r , update a_ i a_ i+ 1 . What is the maximum number of piles that can simultaneously be too tall after some ( possibly zero) operations?",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and k ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ) \u2014 the number of piles of sand and the size of the operation, respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the sizes of the piles. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the maximum number of piles that are simultaneously too tall after some ( possibly zero) operations.",
    "note": "In the first test case, we can perform the following three operations: Add one unit of sand to piles 1 and 2 : [ 3, 10, 2, 4, 1] . Add one unit of sand to piles 4 and 5 : [ 3, 10, 2, 5, 2] . Add one unit of sand to piles 3 and 4 : [ 3, 10, 3, 6, 2] . Now piles 2 and 4 are too tall, so in this case the answer is 2 . It can be shown that it is impossible to make more than 2 piles too tall. In the second test case, any operation will increase all piles by 1 unit, so the number of too tall piles will always be 0 . In the third test case, we can increase any pile by 1 unit of sand. It can be shown that the maximum number of too tall piles is 1 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1698B"
  },
  {
    "title": "Coloring",
    "url": "https://codeforces.com/problemset/problem/1697/E",
    "history": "You are given n points on the plane, the coordinates of the i - th point are ( x_ i, y_ i) . No two points have the same coordinates. The distance between points i and j is defined as d( i, j) = | x_ i - x_ j| + | y_ i - y_ j| . For each point, you have to choose a color, represented by an integer from 1 to n . For every ordered triple of different points ( a, b, c) , the following constraints should be met: if a , b and c have the same color, then d( a, b) = d( a, c) = d( b, c) ; if a and b have the same color, and the color of c is different from the color of a , then d( a, b) < d( a, c) and d( a, b) < d( b, c) . Calculate the number of different ways to choose the colors that meet these constraints.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of points. Then n lines follow. The i - th of them contains two integers x_ i and y_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 8 ) . No two points have the same coordinates ( i. e. if i j , then either x_ i x_ j or y_ i y_ j ) .",
    "output": "Print one integer \u2014 the number of ways to choose the colors for the points. Since it can be large, print it modulo 998244353 .",
    "note": "In the first test, the following ways to choose the colors are suitable: [ 1, 1, 1] ; [ 2, 2, 2] ; [ 3, 3, 3] ; [ 1, 2, 3] ; [ 1, 3, 2] ; [ 2, 1, 3] ; [ 2, 3, 1] ; [ 3, 1, 2] ; [ 3, 2, 1] .",
    "topics": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "dp",
      "geometry",
      "graphs",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1697E"
  },
  {
    "title": "awoo's Favorite Problem",
    "url": "https://codeforces.com/problemset/problem/1697/C",
    "history": "You are given two strings s and t , both of length n . Each character in both string is ' a' , ' b' or ' c' . In one move, you can perform one of the following actions: choose an occurrence of \" ab\" in s and replace it with \" ba\" ; choose an occurrence of \" bc\" in s and replace it with \" cb\" . You are allowed to perform an arbitrary amount of moves ( possibly, zero) . Can you change string s to make it equal to string t ?",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of strings s and t . The second line contains string s of length n . Each character is ' a' , ' b' or ' c' . The third line contains string t of length n . Each character is ' a' , ' b' or ' c' . The sum of n over all testcases doesn' t exceed 10^ 5 .",
    "output": "For each testcase, print \" YES\" if you can change string s to make it equal to string t by performing an arbitrary amount of moves ( possibly, zero) . Otherwise, print \" NO\" .",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "strings",
      "two pointers"
    ],
    "id": "1697C"
  },
  {
    "title": "Promo",
    "url": "https://codeforces.com/problemset/problem/1697/B",
    "history": "The store sells n items, the price of the i - th item is p_ i . The store' s management is going to hold a promotion: if a customer purchases at least x items, y cheapest of them are free. The management has not yet decided on the exact values of x and y . Therefore, they ask you to process q queries: for the given values of x and y , determine the maximum total value of items received for free, if a customer makes one purchase. Note that all queries are independent; they don' t affect the store' s stock.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of items in the store and the number of queries, respectively. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 10^ 6 ) , where p_ i \u2014 the price of the i - th item. The following q lines contain two integers x_ i and y_ i each ( 1 \u2264 y_ i \u2264 x_ i \u2264 n ) \u2014 the values of the parameters x and y in the i - th query.",
    "output": "For each query, print a single integer \u2014 the maximum total value of items received for free for one purchase.",
    "note": "In the first query, a customer can buy three items worth 5, 3, 5 , the two cheapest of them are 3 + 5 = 8 . In the second query, a customer can buy two items worth 5 and 5 , the cheapest of them is 5 . In the third query, a customer has to buy all the items to receive the three cheapest of them for free; their total price is 1 + 2 + 3 = 6 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1697B"
  },
  {
    "title": "Parkway Walk",
    "url": "https://codeforces.com/problemset/problem/1697/A",
    "history": "You are walking through a parkway near your house. The parkway has n+ 1 benches in a row numbered from 1 to n+ 1 from left to right. The distance between the bench i and i+ 1 is a_ i meters. Initially, you have m units of energy. To walk 1 meter of distance, you spend 1 unit of your energy. You can' t walk if you have no energy. Also, you can restore your energy by sitting on benches ( and this is the only way to restore the energy) . When you are sitting, you can restore any integer amount of energy you want ( if you sit longer, you restore more energy) . Note that the amount of your energy can exceed m . Your task is to find the minimum amount of energy you have to restore ( by sitting on benches) to reach the bench n+ 1 from the bench 1 ( and end your walk) . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and m ( 1 \u2264 n \u2264 100 ; 1 \u2264 m \u2264 10^ 4 ) . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the distance between benches i and i+ 1 .",
    "output": "For each test case, print one integer \u2014 the minimum amount of energy you have to restore ( by sitting on benches) to reach the bench n+ 1 from the bench 1 ( and end your walk) in the corresponding test case.",
    "note": "In the first test case of the example, you can walk to the bench 2 , spending 1 unit of energy, then restore 2 units of energy on the second bench, walk to the bench 3 , spending 2 units of energy, restore 1 unit of energy and go to the bench 4 . In the third test case of the example, you have enough energy to just go to the bench 6 without sitting at all.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1697A"
  },
  {
    "title": "Maximum Product?",
    "url": "https://codeforces.com/problemset/problem/1696/H",
    "history": "You are given a positive integer k . For a multiset of integers S , define f( S) as the following. If the number of elements in S is less than k , f( S) = 0 . Otherwise, define f( S) as the maximum product you can get by choosing exactly k integers from S . More formally, let | S| denote the number of elements in S . Then, If | S| < k , f( S) = 0 . Otherwise, f( S) = max_ T\u2286 S, | T| = k( \u220f_ i\u2208 Ti) . You are given a multiset of integers, A . Compute \u2211_ B\u2286 A f( B) modulo 10^ 9+ 7 . Note that in this problem, we distinguish the elements by indices instead of values. That is, a multiset consisting of n elements always has 2^ n distinct subsets regardless of whether some of its elements are equal.",
    "input": "The first line of input contains two integers n and k , where n is the number of elements in A ( 1\u2264 k\u2264 n\u2264 600 ) . The second line of input contains n integers a_ 1, a_ 2, . . . , a_ n , describing the elements in A ( - 10^ 9\u2264 a_ i\u2264 10^ 9 ) .",
    "output": "Output \u2211_ B\u2286 A f( B) modulo 10^ 9+ 7 .",
    "note": "Consider the first sample. From the definitions we know that f( \u2205) = 0 f( { - 1} ) = 0 f( { 2} ) = 0 f( { 4} ) = 0 f( { - 1, 2} ) = - 2 f( { - 1, 4} ) = - 4 f( { 2, 4} ) = 8 f( { - 1, 2, 4} ) = 8 So we should print ( 0+ 0+ 0+ 0- 2- 4+ 8+ 8) ( 10^ 9+ 7) = 10 . In the second example, note that although the multiset consists of three same values, it still has 8 distinct subsets: \u2205, { 1} , { 1} , { 1} , { 1, 1} , { 1, 1} , { 1, 1} , { 1, 1, 1} .",
    "topics": [
      "brute force",
      "combinatorics",
      "dp",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1696H"
  },
  {
    "title": "Permutation Graph",
    "url": "https://codeforces.com/problemset/problem/1696/D",
    "history": "A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . You are given a permutation of 1, 2, . . . , n , [ a_ 1, a_ 2, . . . , a_ n] . For integers i , j such that 1\u2264 i< j\u2264 n , define mn( i, j) as min_ k= i^ j a_ k , and define mx( i, j) as max_ k= i^ j a_ k . Let us build an undirected graph of n vertices, numbered 1 to n . For every pair of integers 1\u2264 i< j\u2264 n , if mn( i, j) = a_ i and mx( i, j) = a_ j both holds, or mn( i, j) = a_ j and mx( i, j) = a_ i both holds, add an undirected edge of length 1 between vertices i and j . In this graph, find the length of the shortest path from vertex 1 to vertex n . We can prove that 1 and n will always be connected via some path, so a shortest path always exists.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 5\u00b7 10^ 4 ) . Description of the test cases follows. The first line of each test case contains one integer n ( 1\u2264 n\u2264 2. 5\u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1\u2264 a_ i\u2264 n ) . It' s guaranteed that a is a permutation of 1 , 2 , . . . , n . It is guaranteed that the sum of n over all test cases does not exceed 5\u00b7 10^ 5 .",
    "output": "For each test case, print a single line containing one integer \u2014 the length of the shortest path from 1 to n .",
    "note": "The following are illustrations of constructed graphs in example test cases. the constructed graph in test case 1 the constructed graph in test case 2 the constructed graph in test case 3 the constructed graph in test case 4 the constructed graph in test case 5",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "divide and conquer",
      "greedy",
      "shortest paths"
    ],
    "id": "1696D"
  },
  {
    "title": "Fishingprince Plays With Array",
    "url": "https://codeforces.com/problemset/problem/1696/C",
    "history": "Fishingprince is playing with an array [ a_ 1, a_ 2, . . . , a_ n] . He also has a magic number m . He can do the following two operations on it: Select 1\u2264 i\u2264 n such that a_ i is divisible by m ( that is, there exists an integer t such that m \u00b7 t = a_ i ) . Replace a_ i with m copies of a_ i/ m . The order of the other elements doesn' t change. For example, when m= 2 and a= [ 2, 3] and i= 1 , a changes into [ 1, 1, 3] . Select 1\u2264 i\u2264 n- m+ 1 such that a_ i= a_ i+ 1= . . . = a_ i+ m- 1 . Replace these m elements with a single m \u00b7 a_ i . The order of the other elements doesn' t change. For example, when m= 2 and a= [ 3, 2, 2, 3] and i= 2 , a changes into [ 3, 4, 3] . Note that the array length might change during the process. The value of n above is defined as the current length of the array ( might differ from the n in the input) . Fishingprince has another array [ b_ 1, b_ 2, . . . , b_ k] . Please determine if he can turn a into b using any number ( possibly zero) of operations.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1\u2264 n\u2264 5\u00b7 10^ 4 , 2\u2264 m\u2264 10^ 9 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 10^ 9 ) . The third line of each test case contains one integer k ( 1\u2264 k\u2264 5\u00b7 10^ 4 ) . The fourth line of each test case contains k integers b_ 1, b_ 2, . . . , b_ k ( 1\u2264 b_ i\u2264 10^ 9 ) . It is guaranteed that the sum of n+ k over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each testcase, print Yes if it is possible to turn a into b , and No otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case of the sample, we can do the second operation with i= 2 : [ 1, 2, 2, 4, 2] \u2192 [ 1, 4, 4, 2] . In the second testcase of the sample, we can: do the second operation with i= 2 : [ 1, 2, 2, 8, 2, 2] \u2192 [ 1, 4, 8, 2, 2] . do the second operation with i= 4 : [ 1, 4, 8, 2, 2] \u2192 [ 1, 4, 8, 4] . do the first operation with i= 3 : [ 1, 4, 8, 4] \u2192 [ 1, 4, 4, 4, 4] . do the second operation with i= 2 : [ 1, 4, 4, 4, 4] \u2192 [ 1, 8, 4, 4] . do the second operation with i= 3 : [ 1, 8, 4, 4] \u2192 [ 1, 8, 8] . do the second operation with i= 2 : [ 1, 8, 8] \u2192 [ 1, 16] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1696C"
  },
  {
    "title": "NIT Destroys the Universe",
    "url": "https://codeforces.com/problemset/problem/1696/B",
    "history": "For a collection of integers S , define mex( S) as the smallest non- negative integer that does not appear in S . NIT, the cleaver, decides to destroy the universe. He is not so powerful as Thanos, so he can only destroy the universe by snapping his fingers several times. The universe can be represented as a 1- indexed array a of length n . When NIT snaps his fingers, he does the following operation on the array: He selects positive integers l and r such that 1\u2264 l\u2264 r\u2264 n . Let w= mex( { a_ l, a_ l+ 1, . . . , a_ r} ) . Then, for all l\u2264 i\u2264 r , set a_ i to w . We say the universe is destroyed if and only if for all 1\u2264 i\u2264 n , a_ i= 0 holds. Find the minimum number of times NIT needs to snap his fingers to destroy the universe. That is, find the minimum number of operations NIT needs to perform to make all elements in the array equal to 0 .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains one integer n ( 1\u2264 n\u2264 10^ 5 ) . The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0\u2264 a_ i\u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the answer to the problem.",
    "note": "In the first test case, we do 0 operations and all elements in the array are already equal to 0 . In the second test case, one optimal way is doing the operation with l= 2 , r= 5 . In the third test case, one optimal way is doing the operation twice, respectively with l= 4 , r= 4 and l= 2 , r= 6 . In the fourth test case, one optimal way is doing the operation with l= 1 , r= 1 .",
    "topics": [
      "greedy"
    ],
    "id": "1696B"
  },
  {
    "title": "NIT orz!",
    "url": "https://codeforces.com/problemset/problem/1696/A",
    "history": "NIT, the cleaver, is new in town! Thousands of people line up to orz him. To keep his orzers entertained, NIT decided to let them solve the following problem related to or z . Can you solve this problem too? You are given a 1- indexed array of n integers, a , and an integer z . You can do the following operation any number ( possibly zero) of times: Select a positive integer i such that 1\u2264 i\u2264 n . Then, simutaneously set a_ i to ( a_ ior z) and set z to ( a_ iand z) . In other words, let x and y respectively be the current values of a_ i and z . Then set a_ i to ( xory) and set z to ( xandy) . Here or and and denote the bitwise operations OR and AND respectively. Find the maximum possible value of the maximum value in a after any number ( possibly zero) of operations.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n and z ( 1\u2264 n\u2264 2000 , 0\u2264 z< 2^ 30 ) . The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0\u2264 a_ i< 2^ 30 ) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 4 .",
    "output": "For each test case, print one integer \u2014 the answer to the problem.",
    "note": "In the first test case of the sample, one optimal sequence of operations is: Do the operation with i= 1 . Now a_ 1 becomes ( 3or3) = 3 and z becomes ( 3and3) = 3 . Do the operation with i= 2 . Now a_ 2 becomes ( 4or3) = 7 and z becomes ( 4and3) = 0 . Do the operation with i= 1 . Now a_ 1 becomes ( 3or0) = 3 and z becomes ( 3and0) = 0 . After these operations, the sequence a becomes [ 3, 7] , and the maximum value in it is 7 . We can prove that the maximum value in a can never exceed 7 , so the answer is 7 . In the fourth test case of the sample, one optimal sequence of operations is: Do the operation with i= 1 . Now a_ 1 becomes ( 7or7) = 7 and z becomes ( 7and7) = 7 . Do the operation with i= 3 . Now a_ 3 becomes ( 30or7) = 31 and z becomes ( 30and7) = 6 . Do the operation with i= 5 . Now a_ 5 becomes ( 27or6) = 31 and z becomes ( 27and6) = 2 .",
    "topics": [
      "bitmasks",
      "greedy"
    ],
    "id": "1696A"
  },
  {
    "title": "Tree Queries (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1695/D2",
    "history": "The only difference between this problem and D1 is the bound on the size of the tree. You are given an unrooted tree with n vertices. There is some hidden vertex x in that tree that you are trying to find. To do this, you may ask k queries v_ 1, v_ 2, . . . , v_ k where the v_ i are vertices in the tree. After you are finished asking all of the queries, you are given k numbers d_ 1, d_ 2, . . . , d_ k , where d_ i is the number of edges on the shortest path between v_ i and x . Note that you know which distance corresponds to which query. What is the minimum k such that there exists some queries v_ 1, v_ 2, . . . , v_ k that let you always uniquely identify x ( no matter what x is) . Note that you don' t actually need to output these queries.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of vertices in the tree. Each of the next n- 1 lines contains two integers x and y ( 1 \u2264 x, y \u2264 n ) , meaning there is an edges between vertices x and y in the tree. It is guaranteed that the given edges form a tree. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case print a single nonnegative integer, the minimum number of queries you need, on its own line.",
    "note": "In the first test case, there is only one vertex, so you don' t need any queries. In the second test case, you can ask a single query about the node 1 . Then, if x = 1 , you will get 0 , otherwise you will get 1 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1695D2"
  },
  {
    "title": "Tree Queries (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1695/D1",
    "history": "The only difference between this problem and D2 is the bound on the size of the tree. You are given an unrooted tree with n vertices. There is some hidden vertex x in that tree that you are trying to find. To do this, you may ask k queries v_ 1, v_ 2, . . . , v_ k where the v_ i are vertices in the tree. After you are finished asking all of the queries, you are given k numbers d_ 1, d_ 2, . . . , d_ k , where d_ i is the number of edges on the shortest path between v_ i and x . Note that you know which distance corresponds to which query. What is the minimum k such that there exists some queries v_ 1, v_ 2, . . . , v_ k that let you always uniquely identify x ( no matter what x is) . Note that you don' t actually need to output these queries.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of vertices in the tree. Each of the next n- 1 lines contains two integers x and y ( 1 \u2264 x, y \u2264 n ) , meaning there is an edges between vertices x and y in the tree. It is guaranteed that the given edges form a tree. It is guaranteed that the sum of n over all test cases does not exceed 2000 .",
    "output": "For each test case print a single nonnegative integer, the minimum number of queries you need, on its own line.",
    "note": "In the first test case, there is only one vertex, so you don' t need any queries. In the second test case, you can ask a single query about the node 1 . Then, if x = 1 , you will get 0 , otherwise you will get 1 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1695D1"
  },
  {
    "title": "Zero Path",
    "url": "https://codeforces.com/problemset/problem/1695/C",
    "history": "You are given a grid with n rows and m columns. We denote the square on the i - th ( 1\u2264 i\u2264 n ) row and j - th ( 1\u2264 j\u2264 m ) column by ( i, j) and the number there by a_ ij . All numbers are equal to 1 or to - 1 . You start from the square ( 1, 1) and can move one square down or one square to the right at a time. In the end, you want to end up at the square ( n, m) . Is it possible to move in such a way so that the sum of the values written in all the visited cells ( including a_ 11 and a_ nm ) is 0 ?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the size of the grid. Each of the following n lines contains m integers. The j - th integer on the i - th line is a_ ij ( a_ ij = 1 or - 1 ) \u2014 the element in the cell ( i, j) . It is guaranteed that the sum of n\u00b7 m over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print \" YES\" if there exists a path from the top left to the bottom right that adds up to 0 , and \" NO\" otherwise. You can output each letter in any case.",
    "note": "One possible path for the fourth test case is given in the picture in the statement.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1695C"
  },
  {
    "title": "Circle Game",
    "url": "https://codeforces.com/problemset/problem/1695/B",
    "history": "Mike and Joe are playing a game with some stones. Specifically, they have n piles of stones of sizes a_ 1, a_ 2, . . . , a_ n . These piles are arranged in a circle. The game goes as follows. Players take turns removing some positive number of stones from a pile in clockwise order starting from pile 1 . Formally, if a player removed stones from pile i on a turn, the other player removes stones from pile ( ( i n) + 1) on the next turn. If a player cannot remove any stones on their turn ( because the pile is empty) , they lose. Mike goes first. If Mike and Joe play optimally, who will win?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of piles. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the size of the piles.",
    "output": "For each test case print the winner of the game, either \" Mike\" or \" Joe\" on its own line ( without quotes) .",
    "note": "In the first test case, Mike just takes all 37 stones on his first turn. In the second test case, Joe can just copy Mike' s moves every time. Since Mike went first, he will hit 0 on the first pile one move before Joe does so on the second pile.",
    "topics": [
      "games",
      "greedy"
    ],
    "id": "1695B"
  },
  {
    "title": "Paranoid String",
    "url": "https://codeforces.com/problemset/problem/1694/B",
    "history": "Let' s call a binary string T of length m indexed from 1 to m paranoid if we can obtain a string of length 1 by performing the following two kinds of operations m- 1 times in any order : Select any substring of T that is equal to 01, and then replace it with 1. Select any substring of T that is equal to 10, and then replace it with 0. For example, if T = 001, we can select the substring [ T_ 2T_ 3] and perform the first operation. So we obtain T = 01. You are given a binary string S of length n indexed from 1 to n . Find the number of pairs of integers ( l, r) 1 \u2264 l \u2264 r \u2264 n such that S[ l . . . r] ( the substring of S from l to r ) is a paranoid string.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of S . The second line of each test case contains a binary string S of n characters S_ 1S_ 2 . . . S_ n . ( S_ i = 0 or S_ i = 1 for each 1 \u2264 i \u2264 n ) It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the number of pairs of integers ( l, r) 1 \u2264 l \u2264 r \u2264 n such that S[ l . . . r] ( the substring of S from l to r ) is a paranoid string.",
    "note": "In the first sample, S already has length 1 and doesn' t need any operations. In the second sample, all substrings of S are paranoid. For the entire string, it' s enough to perform the first operation. In the third sample, all substrings of S are paranoid except [ S_ 2S_ 3] , because we can' t perform any operations on it, and [ S_ 1S_ 2S_ 3] ( the entire string) .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1694B"
  },
  {
    "title": "Creep",
    "url": "https://codeforces.com/problemset/problem/1694/A",
    "history": "Define the score of some binary string T as the absolute difference between the number of zeroes and ones in it. ( for example, T= 010001 contains 4 zeroes and 2 ones, so the score of T is | 4- 2| = 2 ) . Define the creepiness of some binary string S as the maximum score among all of its prefixes ( for example, the creepiness of S= 01001 is equal to 2 because the score of the prefix S[ 1 . . . 4] is 2 and the rest of the prefixes have a score of 2 or less) . Given two integers a and b , construct a binary string consisting of a zeroes and b ones with the minimum possible creepiness.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 1000) \u2014 the number of test cases. The description of the test cases follows. The only line of each test case contains two integers a and b ( 1 \u2264 a, b \u2264 100 ) \u2014 the numbers of zeroes and ones correspondingly.",
    "output": "For each test case, print a binary string consisting of a zeroes and b ones with the minimum possible creepiness. If there are multiple answers, print any of them.",
    "note": "In the first test case, the score of S[ 1 . . . 1] is 1 , and the score of S[ 1 . . . 2] is 0 . In the second test case, the minimum possible creepiness is 1 and one of the other answers is 101. In the third test case, the minimum possible creepiness is 3 and one of the other answers is 0001100.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1694A"
  },
  {
    "title": "I Might Be Wrong",
    "url": "https://codeforces.com/problemset/problem/1693/F",
    "history": "You are given a binary string S of length n indexed from 1 to n . You can perform the following operation any number of times ( possibly zero) : Choose two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) . Let cnt_ 0 be the number of times 0 occurs in S[ l . . . r] and cnt_ 1 be the number of times 1 occurs in S[ l . . . r] . You can pay | cnt_ 0 - cnt_ 1| + 1 coins and sort the S[ l . . . r] . ( by S[ l . . . r] we mean the substring of S starting at position l and ending at position r ) For example if S = 11001, we can perform the operation on S[ 2 . . . 4] , paying | 2 - 1| + 1 = 2 coins, and obtain S = 10011 as a new string. Find the minimum total number of coins required to sort S in increasing order.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of S . The second line of each test case contains a binary string S of n characters S_ 1S_ 2 . . . S_ n . ( S_ i = 0 or S_ i = 1 for each 1 \u2264 i \u2264 n ) It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the minimum total number of coins required to sort S in increasing order.",
    "note": "In the first test case, S is already sorted. In the second test case, it' s enough to apply the operation with l = 1, r = 2 . In the third test case, it' s enough to apply the operation with l = 1, r = 2 .",
    "topics": [
      "binary search",
      "greedy",
      "two pointers"
    ],
    "id": "1693F"
  },
  {
    "title": "Outermost Maximums",
    "url": "https://codeforces.com/problemset/problem/1693/E",
    "history": "Yeri has an array of n + 2 non- negative integers : a_ 0, a_ 1, . . . , a_ n, a_ n + 1 . We know that a_ 0 = a_ n + 1 = 0 . She wants to make all the elements of a equal to zero in the minimum number of operations. In one operation she can do one of the following: Choose the leftmost maximum element and change it to the maximum of the elements on its left. Choose the rightmost maximum element and change it to the maximum of the elements on its right. Help her find the minimum number of operations needed to make all elements of a equal to zero.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) .",
    "output": "Print a single integer \u2014 the minimum number of operations needed to make all elements of a equal to zero.",
    "note": "In the first sample, you get \u27e8 1, 1, 2, 4, 0, 2 \u27e9 by performing the first operation and \u27e8 1, 4, 2, 2, 0, 2 \u27e9 by performing the second operation. One way to achieve our goal is shown below. ( The underlines show the last change. ) \u27e8 1, 4, 2, 4, 0, 2 \u27e9\u2192\u27e8 1, 4, 2, 2, 0, 2 \u27e9\u2192\u27e8 1, 1, 2, 2, 0, 2 \u27e9\u2192\u27e8 1, 1, 2, 2, 0, 0\u27e9\u2192\u27e8 1, 1, 2, 0, 0, 0 \u27e9\u2192\u27e8 1, 1, 0, 0, 0, 0 \u27e9\u2192\u27e80, 1, 0, 0, 0, 0 \u27e9\u2192\u27e8 0, 0, 0, 0, 0, 0 \u27e9 In the third sample each element is already equal to zero so no operations are needed.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1693E"
  },
  {
    "title": "Decinc Dividing",
    "url": "https://codeforces.com/problemset/problem/1693/D",
    "history": "Let' s call an array a of m integers a_ 1, a_ 2, . . . , a_ m Decinc if a can be made increasing by removing a decreasing subsequence ( possibly empty) from it. For example, if a = [ 3, 2, 4, 1, 5] , we can remove the decreasing subsequence [ a_ 1, a_ 4] from a and obtain a = [ 2, 4, 5] , which is increasing. You are given a permutation p of numbers from 1 to n . Find the number of pairs of integers ( l, r) with 1 \u2264 l \u2264 r \u2264 n such that p[ l . . . r] ( the subarray of p from l to r ) is a Decinc array.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of p . The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct) \u2014 elements of the permutation.",
    "output": "Output the number of pairs of integers ( l, r) such that p[ l . . . r] ( the subarray of p from l to r ) is a Decinc array. ( 1 \u2264 l \u2264 r \u2264 n)",
    "note": "In the first sample, all subarrays are Decinc. In the second sample, all subarrays except p[ 1 . . . 6] and p[ 2 . . . 6] are Decinc.",
    "topics": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy"
    ],
    "id": "1693D"
  },
  {
    "title": "Keshi in Search of AmShZ",
    "url": "https://codeforces.com/problemset/problem/1693/C",
    "history": "AmShZ has traveled to Italy from Iran for the Thom Yorke concert. There are n cities in Italy indexed from 1 to n and m directed roads indexed from 1 to m . Initially, Keshi is located in the city 1 and wants to go to AmShZ' s house in the city n . Since Keshi doesn' t know the map of Italy, AmShZ helps him to see each other as soon as possible. In the beginning of each day, AmShZ can send one of the following two messages to Keshi: AmShZ sends the index of one road to Keshi as a blocked road. Then Keshi will understand that he should never use that road and he will remain in his current city for the day. AmShZ tells Keshi to move. Then, Keshi will randomly choose one of the cities reachable from his current city and move there. ( city B is reachable from city A if there' s an out- going road from city A to city B which hasn' t become blocked yet) . If there are no such cities, Keshi will remain in his current city. Note that AmShZ always knows Keshi' s current location. AmShZ and Keshi want to find the smallest possible integer d for which they can make sure that they will see each other after at most d days. Help them find d .",
    "input": "The first line of the input contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 2 \u00b7 10^ 5) \u2014 the number of cities and roads correspondingly. The i - th line of the following m lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i , u_ i \u2264 n, v_ i = \u0338 u_ i) , denoting a directed road going from city v_ i to city u_ i . It is guaranteed that there is at least one route from city 1 to city n . Note that there may be more than one road between a pair of cities in each direction.",
    "output": "Output the smallest possible integer d to make sure that AmShZ and Keshi will see each other after at most d days.",
    "note": "In the first sample, it' s enough for AmShZ to send the second type of message. In the second sample, on the first day, AmShZ blocks the first road. So the only reachable city from city 1 will be city 4 . Hence on the second day, AmShZ can tell Keshi to move and Keshi will arrive at AmShZ' s house. It' s also possible for AmShZ to tell Keshi to move for two days.",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1693C"
  },
  {
    "title": "Fake Plastic Trees",
    "url": "https://codeforces.com/problemset/problem/1693/B",
    "history": "We are given a rooted tree consisting of n vertices numbered from 1 to n . The root of the tree is the vertex 1 and the parent of the vertex v is p_ v . There is a number written on each vertex, initially all numbers are equal to 0 . Let' s denote the number written on the vertex v as a_ v . For each v , we want a_ v to be between l_ v and r_ v ( l_ v \u2264 a_ v \u2264 r_ v) . In a single operation we do the following: Choose some vertex v . Let b_ 1, b_ 2, . . . , b_ k be vertices on the path from the vertex 1 to vertex v ( meaning b_ 1 = 1 , b_ k = v and b_ i = p_ b_ i + 1 ) . Choose a non- decreasing array c of length k of nonnegative integers: 0 \u2264 c_ 1 \u2264 c_ 2 \u2264. . . \u2264 c_ k . For each i ( 1 \u2264 i \u2264 k) , increase a_ b_ i by c_ i . What' s the minimum number of operations needed to achieve our goal?",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 1000) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2\u2264 n\u2264 2 \u00b7 10^ 5) \u2014 the number of the vertices in the tree. The second line of each test case contains n - 1 integers, p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i < i) , where p_ i denotes the parent of the vertex i . The i - th of the following n lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9) . It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output the minimum number of operations needed.",
    "note": "In the first test case, we can achieve the goal with a single operation: choose v = 2 and c = [ 1, 2] , resulting in a_ 1 = 1, a_ 2 = 2 . In the second test case, we can achieve the goal with two operations: first, choose v = 2 and c = [ 3, 3] , resulting in a_ 1 = 3, a_ 2 = 3, a_ 3 = 0 . Then, choose v = 3, c = [ 2, 7] , resulting in a_ 1 = 5, a_ 2 = 3, a_ 3 = 7 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1693B"
  },
  {
    "title": "Directional Increase",
    "url": "https://codeforces.com/problemset/problem/1693/A",
    "history": "We have an array of length n . Initially, each element is equal to 0 and there is a pointer located on the first element. We can do the following two kinds of operations any number of times ( possibly zero) in any order: If the pointer is not on the last element, increase the element the pointer is currently on by 1 . Then move it to the next element. If the pointer is not on the first element, decrease the element the pointer is currently on by 1 . Then move it to the previous element. But there is one additional rule. After we are done, the pointer has to be on the first element. You are given an array a . Determine whether it' s possible to obtain a after some operations or not.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 1000) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 2 \u00b7 10^ 5) \u2014 the size of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print \" Yes\" ( without quotes) if it' s possible to obtain a after some operations, and \" No\" ( without quotes) otherwise. You can output \" Yes\" and \" No\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "In the first test case we can obtain the array after some operations, but the pointer won' t be on the first element. One way of obtaining the array in the second test case is shown below. \u27e80, 0, 0, 0\u27e9\u2192\u27e8 1, 0, 0, 0 \u27e9\u2192\u27e81, - 1, 0, 0\u27e9\u2192\u27e8 2, - 1, 0, 0\u27e9\u2192\u27e8 2, 0, 0, 0\u27e9\u2192\u27e8 2, 0, - 1, 0\u27e9\u2192\u27e82, - 1, - 1, 0\u27e9",
    "topics": [
      "greedy"
    ],
    "id": "1693A"
  },
  {
    "title": "Gambling",
    "url": "https://codeforces.com/problemset/problem/1692/H",
    "history": "Marian is at a casino. The game at the casino works like this. Before each round, the player selects a number between 1 and 10^ 9 . After that, a dice with 10^ 9 faces is rolled so that a random number between 1 and 10^ 9 appears. If the player guesses the number correctly their total money is doubled, else their total money is halved. Marian predicted the future and knows all the numbers x_ 1, x_ 2, . . . , x_ n that the dice will show in the next n rounds. He will pick three integers a , l and r ( l \u2264 r ) . He will play r- l+ 1 rounds ( rounds between l and r inclusive) . In each of these rounds, he will guess the same number a . At the start ( before the round l ) he has 1 dollar. Marian asks you to determine the integers a , l and r ( 1 \u2264 a \u2264 10^ 9 , 1 \u2264 l \u2264 r \u2264 n ) such that he makes the most money at the end. Note that during halving and multiplying there is no rounding and there are no precision errors. So, for example during a game, Marian could have money equal to 11024 , 1128 , 12 , 1 , 2 , 4 , etc. ( any value of 2^ t , where t is an integer of any sign) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the number of rounds. The second line of each test case contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 9 ) , where x_ i is the number that will fall on the dice in the i - th round. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output three integers a , l , and r such that Marian makes the most amount of money gambling with his strategy. If there are multiple answers, you may output any of them.",
    "note": "For the first test case, the best choice is a= 4 , l= 1 , r= 5 , and the game would go as follows. Marian starts with one dollar. After the first round, he ends up with 2 dollars because the numbers coincide with the chosen one. After the second round, he ends up with 4 dollars because the numbers coincide again. After the third round, he ends up with 2 dollars because he guesses 4 even though 3 is the correct choice. After the fourth round, he ends up with 4 dollars again. In the final round, he ends up 8 dollars because he again guessed correctly. There are many possible answers for the second test case, but it can be proven that Marian will not end up with more than 2 dollars, so any choice with l = r with the appropriate a is acceptable.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1692H"
  },
  {
    "title": "All Distinct",
    "url": "https://codeforces.com/problemset/problem/1692/B",
    "history": "Sho has an array a consisting of n integers. An operation consists of choosing two distinct indices i and j and removing a_ i and a_ j from the array. For example, for the array [ 2, 3, 4, 2, 5] , Sho can choose to remove indices 1 and 3 . After this operation, the array becomes [ 3, 2, 5] . Note that after any operation, the length of the array is reduced by two. After he made some operations, Sho has an array that has only distinct elements. In addition, he made operations such that the resulting array is the longest possible. More formally, the array after Sho has made his operations respects these criteria: No pairs such that ( i < j ) and a_ i = a_ j exist. The length of a is maximized. Output the length of the final array.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of the array. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the elements of the array.",
    "output": "For each test case, output a single integer \u2014 the length of the final array. Remember that in the final array, all elements are different, and its length is maximum.",
    "note": "For the first test case Sho can perform operations as follows: Choose indices 1 and 5 to remove. The array becomes [ 2, 2, 2, 3, 3, 3] \u2192 [ 2, 2, 3, 3] . Choose indices 1 and 4 to remove. The array becomes [ 2, 2, 3, 3] \u2192 [ 2, 3] . The final array has a length of 2 , so the answer is 2 . It can be proven that Sho cannot obtain an array with a longer length. For the second test case Sho can perform operations as follows: Choose indices 3 and 4 to remove. The array becomes [ 9, 1, 9, 9, 1] \u2192 [ 9, 1, 1] . Choose indices 1 and 3 to remove. The array becomes [ 9, 1, 1] \u2192 [ 1] . The final array has a length of 1 , so the answer is 1 . It can be proven that Sho cannot obtain an array with a longer length.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1692B"
  },
  {
    "title": "Number of Groups",
    "url": "https://codeforces.com/problemset/problem/1691/E",
    "history": "You are given n colored segments on the number line. Each segment is either colored red or blue. The i - th segment can be represented by a tuple ( c_ i, l_ i, r_ i) . The segment contains all the points in the range [ l_ i, r_ i] , inclusive, and its color denoted by c_ i : if c_ i = 0 , it is a red segment; if c_ i = 1 , it is a blue segment. We say that two segments of different colors are connected, if they share at least one common point. Two segments belong to the same group, if they are either connected directly, or through a sequence of directly connected segments. Find the number of groups of segments.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of segments. Each of the next n lines contains three integers c_ i, l_ i, r_ i ( 0 \u2264 c_ i \u2264 1, 0 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) , describing the i - th segment. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer k , the number of groups of segments.",
    "note": "In the first example there are 5 segments. The segments 1 and 2 are connected, because they are of different colors and share a point. Also, the segments 2 and 3 are connected, and so are segments 4 and 5 . Thus, there are two groups: one containing segments { 1, 2, 3} , and the other one containing segments { 4, 5} .",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1691E"
  },
  {
    "title": "Sum of Substrings",
    "url": "https://codeforces.com/problemset/problem/1691/C",
    "history": "You are given a binary string s of length n . Let' s define d_ i as the number whose decimal representation is s_ i s_ i+ 1 ( possibly, with a leading zero) . We define f( s) to be the sum of all the valid d_ i . In other words, f( s) = \u2211_ i= 1^ n- 1 d_ i . For example, for the string s = 1011 : d_ 1 = 10 ( ten) ; d_ 2 = 01 ( one) d_ 3 = 11 ( eleven) ; f( s) = 10 + 01 + 11 = 22 . In one operation you can swap any two adjacent elements of the string. Find the minimum value of f( s) that can be achieved if at most k operations are allowed.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. First line of each test case contains two integers n and k ( 2 \u2264 n \u2264 10^ 5 , 0 \u2264 k \u2264 10^ 9 ) \u2014 the length of the string and the maximum number of operations allowed. The second line of each test case contains the binary string s of length n , consisting of only zeros and ones. It is also given that sum of n over all the test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print the minimum value of f( s) you can obtain with at most k operations.",
    "note": "For the first example, you can' t do any operation so the optimal string is s itself. f( s) = f( 1010) = 10 + 01 + 10 = 21 . For the second example, one of the optimal strings you can obtain is \" 0011000\" . The string has an f value of 22 . For the third example, one of the optimal strings you can obtain is \" 00011\" . The string has an f value of 12 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "strings"
    ],
    "id": "1691C"
  },
  {
    "title": "Shoe Shuffling",
    "url": "https://codeforces.com/problemset/problem/1691/B",
    "history": "A class of students got bored wearing the same pair of shoes every day, so they decided to shuffle their shoes among themselves. In this problem, a pair of shoes is inseparable and is considered as a single object. There are n students in the class, and you are given an array s in non- decreasing order, where s_ i is the shoe size of the i - th student. A shuffling of shoes is valid only if no student gets their own shoes and if every student gets shoes of size greater than or equal to their size. You have to output a permutation p of { 1, 2, . . . , n} denoting a valid shuffling of shoes, where the i - th student gets the shoes of the p_ i - th student ( p_ i i ) . And output - 1 if a valid shuffling does not exist. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1\u2264 n\u226410^ 5 ) \u2014 the number of students. The second line of each test case contains n integers s_ 1, s_ 2, . . . , s_ n ( 1\u2264 s_ i\u226410^ 9 , and for all 1\u2264 i< n , s_ i\u2264 s_ i+ 1 ) \u2014 the shoe sizes of the students. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print the answer in a single line using the following format. If a valid shuffling does not exist, print the number - 1 as the answer. If a valid shuffling exists, print n space- separated integers \u2014 a permutation p of 1, 2, . . . , n denoting a valid shuffling of shoes where the i - th student gets the shoes of the p_ i - th student. If there are multiple answers, then print any of them.",
    "note": "In the first test case, any permutation p of 1, . . . , n where p_ i i would represent a valid shuffling since all students have equal shoe sizes, and thus anyone can wear anyone' s shoes. In the second test case, it can be shown that no valid shuffling is possible.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1691B"
  },
  {
    "title": "Beat The Odds",
    "url": "https://codeforces.com/problemset/problem/1691/A",
    "history": "Given a sequence a_ 1, a_ 2, . . . , a_ n , find the minimum number of elements to remove from the sequence such that after the removal, the sum of every 2 consecutive elements is even.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u226410^ 9 ) \u2014 elements of the sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of elements to remove from the sequence such that the sum of every 2 consecutive elements is even.",
    "note": "In the first test case, after removing 3 , the sequence becomes [ 2, 4, 6, 8] . The pairs of consecutive elements are { [ 2, 4] , [ 4, 6] , [ 6, 8] } . Each consecutive pair has an even sum now. Hence, we only need to remove 1 element to satisfy the condition asked. In the second test case, each consecutive pair already has an even sum so we need not remove any element.",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1691A"
  },
  {
    "title": "Count the Trains",
    "url": "https://codeforces.com/problemset/problem/1690/G",
    "history": "There are n of independent carriages on the rails. The carriages are numbered from left to right from 1 to n . The carriages are not connected to each other. The carriages move to the left, so that the carriage with number 1 moves ahead of all of them. The i - th carriage has its own engine, which can accelerate the carriage to a_ i km/ h, but the carriage cannot go faster than the carriage in front of it. See example for explanation. All carriages start moving to the left at the same time, and they naturally form trains. We will call trains \u2014 consecutive moving carriages having the same speed. For example, we have n= 5 carriages and array a = [ 10, 13, 5, 2, 6] . Then the final speeds of the carriages will be [ 10, 10, 5, 2, 2] . Respectively, 3 of the train will be formed. There are also messages saying that some engine has been corrupted: message \" k d\" means that the speed of the k - th carriage has decreased by d ( that is, there has been a change in the maximum speed of the carriage a_ k = a_ k - d ) . Messages arrive sequentially, the processing of the next message takes into account the changes from all previous messages. After each message determine the number of formed trains.",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of input test cases. This is followed by descriptions of the test cases. The first line of each test case is empty. The second line of the test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014the number of carriages and the number of messages to slow down the carriage, respectively. The third line contains n integers: a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number a_ i means that the carriage with number i can reach a speed of a_ i km/ h. The next m lines contain two integers k_ j and d_ j ( 1 \u2264 k_ j \u2264 n , 0 \u2264 d_ j \u2264 a_ k_ j ) \u2014this is the message that the speed of the carriage with number k_ j has decreased by d_ j . In other words, there has been a change in its maximum speed a_ k_ j = a_ k_ j - d_ j . Note that at any time the speed of each carriage is non- negative. In other words, a_ i \u2265 s_ i , where s_ i \u2014is the sum of such d_ j that k_ j= i . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 . Similarly, it is guaranteed that the sum of m over all test cases does not exceed 10^ 5 .",
    "output": "Print t lines. On each line print the answer for the corresponding test case. For each test case print m numbers: the number of trains formed after each message.",
    "note": "For the first test case: Initially array a = [ 6, 2, 3, 7] . After the first message, the array a = [ 6, 2, 1, 7] . Accordingly, the speeds of the carriages are [ 6, 2, 1, 1] and will form 3 of the train. After the second message the array a = [ 6, 2, 1, 0] . Accordingly, the speeds of the carriages are [ 6, 2, 1, 0] , and 4 of the train will be formed. For the second test case: Initially, the array a = [ 10, 13, 5, 2, 6] . After the first message, the array a = [ 10, 9, 5, 2, 6] . Accordingly, the speeds of the carriages are equal: [ 10, 9, 5, 2, 2] , and 4 of the train will be formed. After the second message the array a = [ 10, 9, 5, 2, 4] . Accordingly, the speeds of the carriages are [ 10, 9, 5, 2, 2] , and 4 of the train will be formed. After the third message the array a = [ 5, 9, 5, 2, 4] . Accordingly, the speeds of the carriages are [ 5, 5, 5, 2, 2] , and 2 of the train will be formed. After the fourth message the array a = [ 5, 9, 3, 2, 4] . Accordingly, the speeds of the carriages are [ 5, 5, 3, 2, 2] , and 3 of the train will be formed.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1690G"
  },
  {
    "title": "Price Maximization",
    "url": "https://codeforces.com/problemset/problem/1690/E",
    "history": "A batch of n goods ( n \u2014 an even number) is brought to the store, i - th of which has weight a_ i . Before selling the goods, they must be packed into packages. After packing, the following will be done: There will be n/ 2 packages, each package contains exactly two goods; The weight of the package that contains goods with indices i and j ( 1 \u2264 i, j \u2264 n ) is a_ i + a_ j . With this, the cost of a package of weight x is always \u230ax/ k\u230b burles ( rounded down) , where k \u2014 a fixed and given value. Pack the goods to the packages so that the revenue from their sale is maximized. In other words, make such n/ 2 pairs of given goods that the sum of the values \u230ax_ i/ k\u230b , where x_ i is the weight of the package number i ( 1 \u2264 i \u2264n/ 2 ) , is maximal. For example, let n = 6, k = 3 , weights of goods a = [ 3, 2, 7, 1, 4, 8] . Let' s pack them into the following packages. In the first package we will put the third and sixth goods. Its weight will be a_ 3 + a_ 6 = 7 + 8 = 15 . The cost of the package will be \u230a15/ 3\u230b = 5 burles. In the second package put the first and fifth goods, the weight is a_ 1 + a_ 5 = 3 + 4 = 7 . The cost of the package is \u230a7/ 3\u230b = 2 burles. In the third package put the second and fourth goods, the weight is a_ 2 + a_ 4 = 2 + 1 = 3 . The cost of the package is \u230a3/ 3\u230b = 1 burle. With this packing, the total cost of all packs would be 5 + 2 + 1 = 8 burles.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains two integers n ( 2 \u2264 n \u2264 2\u00b710^ 5 ) and k ( 1 \u2264 k \u2264 1000 ) . The number n \u2014 is even. The second line of each test case contains exactly n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all the test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, print on a separate line a single number \u2014 the maximum possible total cost of all the packages.",
    "note": "The first test case is analyzed in the statement. In the second test case, you can get a total value equal to 4 if you put the first and second goods in the first package and the third and fourth goods in the second package. In the third test case, the cost of each item is 0 , so the total cost will also be 0 .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "two pointers"
    ],
    "id": "1690E"
  },
  {
    "title": "Restoring the Duration of Tasks",
    "url": "https://codeforces.com/problemset/problem/1690/C",
    "history": "Recently, Polycarp completed n successive tasks. For each completed task, the time s_ i is known when it was given, no two tasks were given at the same time. Also given is the time f_ i when the task was completed. For each task, there is an unknown value d_ i ( d_ i> 0 ) \u2014 duration of task execution. It is known that the tasks were completed in the order in which they came. Polycarp performed the tasks as follows: As soon as the very first task came, Polycarp immediately began to carry it out. If a new task arrived before Polycarp finished the previous one, he put the new task at the end of the queue. When Polycarp finished executing the next task and the queue was not empty, he immediately took a new task from the head of the queue ( if the queue is empty \u2014 he just waited for the next task) . Find d_ i ( duration) of each task.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The descriptions of the input data sets follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains exactly n integers s_ 1 < s_ 2 < . . . < s_ n ( 0 \u2264 s_ i \u2264 10^ 9 ) . The third line of each test case contains exactly n integers f_ 1 < f_ 2 < . . . < f_ n ( s_ i < f_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each of t test cases print n positive integers d_ 1, d_ 2, . . . , d_ n \u2014 the duration of each task.",
    "note": "First test case: The queue is empty at the beginning: [ ] . And that' s where the first task comes in. At time 2 , Polycarp finishes doing the first task, so the duration of the first task is 2 . The queue is empty so Polycarp is just waiting. At time 3 , the second task arrives. And at time 7 , the third task arrives, and now the queue looks like this: [ 7] . At the time 10 , Polycarp finishes doing the second task, as a result, the duration of the second task is 7 . And at time 10 , Polycarp immediately starts doing the third task and finishes at time 11 . As a result, the duration of the third task is 1 . An example of the first test case.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1690C"
  },
  {
    "title": "Array Decrements",
    "url": "https://codeforces.com/problemset/problem/1690/B",
    "history": "Kristina has two arrays a and b , each containing n non- negative integers. She can perform the following operation on array a any number of times: apply a decrement to each non- zero element of the array, that is, replace the value of each element a_ i such that a_ i > 0 with the value a_ i - 1 ( 1 \u2264 i \u2264 n ) . If a_ i was 0 , its value does not change. Determine whether Kristina can get an array b from an array a in some number of operations ( probably zero) . In other words, can she make a_ i = b_ i after some number of operations for each 1 \u2264 i \u2264 n ? For example, let n = 4 , a = [ 3, 5, 4, 1] and b = [ 1, 3, 2, 0] . In this case, she can apply the operation twice: after the first application of the operation she gets a = [ 2, 4, 3, 0] ; after the second use of the operation she gets a = [ 1, 3, 2, 0] . Thus, in two operations, she can get an array b from an array a .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. The descriptions of the test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 4 ) . The second line of each test case contains exactly n non- negative integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . The third line of each test case contains exactly n non- negative integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n values over all test cases in the test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output on a separate line: YES, if by doing some number of operations it is possible to get an array b from an array a ; NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as a positive response) .",
    "note": "The first test case is analyzed in the statement. In the second test case, it is enough to apply the operation to array a once. In the third test case, it is impossible to get array b from array a .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1690B"
  },
  {
    "title": "Print a Pedestal (Codeforces logo?)",
    "url": "https://codeforces.com/problemset/problem/1690/A",
    "history": "Given the integer n \u2014 the number of available blocks. You must use all blocks to build a pedestal. The pedestal consists of 3 platforms for 2 - nd, 1 - st and 3 - rd places respectively. The platform for the 1 - st place must be strictly higher than for the 2 - nd place, and the platform for the 2 - nd place must be strictly higher than for the 3 - rd place. Also, the height of each platform must be greater than zero ( that is, each platform must contain at least one block) . Example pedestal of n= 11 blocks: second place height equals 4 blocks, first place height equals 5 blocks, third place height equals 2 blocks. Among all possible pedestals of n blocks, deduce one such that the platform height for the 1 - st place minimum as possible. If there are several of them, output any of them.",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case contains a single integer n ( 6 \u2264 n \u2264 10^ 5 ) \u2014 the total number of blocks for the pedestal. All n blocks must be used. It is guaranteed that the sum of n values over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, output 3 numbers h_ 2, h_ 1, h_ 3 \u2014 the platform heights for 2 - nd, 1 - st and 3 - rd places on a pedestal consisting of n blocks ( h_ 1+ h_ 2+ h_ 3= n , 0 < h_ 3 < h_ 2 < h_ 1 ) . Among all possible pedestals, output the one for which the value of h_ 1 minimal. If there are several of them, output any of them.",
    "note": "In the first test case we can not get the height of the platform for the first place less than 5 , because if the height of the platform for the first place is not more than 4 , then we can use at most 4 + 3 + 2 = 9 blocks. And we should use 11 = 4 + 5 + 2 blocks. Therefore, the answer 4 5 2 fits. In the second set, the only suitable answer is: 2 3 1.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1690A"
  },
  {
    "title": "Mystic Permutation",
    "url": "https://codeforces.com/problemset/problem/1689/B",
    "history": "Monocarp is a little boy who lives in Byteland and he loves programming. Recently, he found a permutation of length n . He has to come up with a mystic permutation. It has to be a new permutation such that it differs from the old one in each position. More formally, if the old permutation is p_ 1, p_ 2, . . . , p_ n and the new one is q_ 1, q_ 2, . . . , q_ n it must hold that p_ 1= \u0338 q_ 1, p_ 2= \u0338 q_ 2, . . . , p_ n= \u0338 q_ n. Monocarp is afraid of lexicographically large permutations. Can you please help him to find the lexicographically minimal mystic permutation?",
    "input": "There are several test cases in the input data. The first line contains a single integer t ( 1\u2264 t\u2264 200 ) \u2014 the number of test cases. This is followed by the test cases description. The first line of each test case contains a positive integer n ( 1\u2264 n\u2264 1000 ) \u2014 the length of the permutation. The second line of each test case contains n distinct positive integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It' s guaranteed that p is a permutation, i. e. p_ i = \u0338 p_ j for all i = \u0338 j . It is guaranteed that the sum of n does not exceed 1000 over all test cases.",
    "output": "For each test case, output n positive integers \u2014 the lexicographically minimal mystic permutations. If such a permutation does not exist, output - 1 instead.",
    "note": "In the first test case possible permutations that are mystic are [ 2, 3, 1] and [ 3, 1, 2] . Lexicographically smaller of the two is [ 2, 3, 1] . In the second test case, [ 1, 2, 3, 4, 5] is the lexicographically minimal permutation and it is also mystic. In third test case possible mystic permutations are [ 1, 2, 4, 3] , [ 1, 4, 2, 3] , [ 1, 4, 3, 2] , [ 3, 1, 4, 2] , [ 3, 2, 4, 1] , [ 3, 4, 2, 1] , [ 4, 1, 2, 3] , [ 4, 1, 3, 2] and [ 4, 3, 2, 1] . The smallest one is [ 1, 2, 4, 3] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1689B"
  },
  {
    "title": "Lex String",
    "url": "https://codeforces.com/problemset/problem/1689/A",
    "history": "Kuznecov likes art, poetry, and music. And strings consisting of lowercase English letters. Recently, Kuznecov has found two strings, a and b , of lengths n and m respectively. They consist of lowercase English letters and no character is contained in both strings. Let another string c be initially empty. Kuznecov can do the following two types of operations: Choose any character from the string a , remove it from a , and add it to the end of c . Choose any character from the string b , remove it from b , and add it to the end of c . But, he can not do more than k operations of the same type in a row. He must perform operations until either a or b becomes empty. What is the lexicographically smallest possible value of c after he finishes? A string x is lexicographically smaller than a string y if and only if one of the following holds: x is a prefix of y , but x = \u0338 y ; in the first position where x and y differ, the string x has a letter that appears earlier in the alphabet than the corresponding letter in y .",
    "input": "There are several test cases in the input data. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. This is followed by the test cases description. The first line of each test case contains three integers n , m , and k ( 1\u2264 n, m, k \u2264 100 ) \u2014 parameters from the statement. The second line of each test case contains the string a of length n . The third line of each test case contains the string b of length m . The strings contain only lowercase English letters. It is guaranteed that no symbol appears in a and b simultaneously.",
    "output": "In each test case, output a single string c \u2014 the answer to the problem.",
    "note": "In the first test case, it is optimal to take two ' a' s from the string a and add them to the string c . Then it is forbidden to take more characters from a , hence one character ' b' from the string b has to be taken. Following that logic, we end up with c being ' aabaabaa' when string a is emptied. In the second test case it is optimal to take as many ' a' s from string a as possible, then take as many ' b' s as possible from string b . In the end, we take two ' c' s from the string a emptying it.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1689A"
  },
  {
    "title": "Manipulating History",
    "url": "https://codeforces.com/problemset/problem/1688/C",
    "history": "As a human, she can erase history of its entirety. As a Bai Ze ( Hakutaku) , she can create history out of nothingness. \u2014Perfect Memento in Strict SenseKeine has the ability to manipulate history. The history of Gensokyo is a string s of length 1 initially. To fix the chaos caused by Yukari, she needs to do the following operations n times, for the i - th time: She chooses a non- empty substring t_ 2i- 1 of s . She replaces t_ 2i- 1 with a non- empty string, t_ 2i . Note that the lengths of strings t_ 2i- 1 and t_ 2i can be different. Note that if t_ 2i- 1 occurs more than once in s , exactly one of them will be replaced. For example, let s= \" marisa\" , t_ 2i- 1= \" a\" , and t_ 2i= \" z\" . After the operation, s becomes \" mzrisa\" or \" marisz\" . After n operations, Keine got the final string and an operation sequence t of length 2n . Just as Keine thinks she has finished, Yukari appears again and shuffles the order of t . Worse still, Keine forgets the initial history. Help Keine find the initial history of Gensokyo! Recall that a substring is a sequence of consecutive characters of the string. For example, for string \" abc\" its substrings are: \" ab\" , \" c\" , \" bc\" and some others. But the following strings are not its substring: \" ac\" , \" cba\" , \" acb\" . HacksYou cannot make hacks in this problem.",
    "input": "Each test contains multiple test cases. The first line contains a single integer T ( 1 \u2264 T \u2264 10^ 3 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n < 10 ^ 5 ) \u2014 the number of operations. The next 2n lines contains one non- empty string t_ i \u2014 the i - th string of the shuffled sequence t . The next line contains one non- empty string s \u2014 the final string. It is guaranteed that the total length of given strings ( including t_ i and s ) over all test cases does not exceed 2 \u00b7 10 ^ 5 . All given strings consist of lowercase English letters only. It is guaranteed that the initial string exists. It can be shown that the initial string is unique.",
    "output": "For each test case, print the initial string in one line.",
    "note": "Test case 1: Initially s is \" a\" . In the first operation, Keine chooses \" a\" , and replaces it with \" ab\" . s becomes \" ab\" . In the second operation, Keine chooses \" b\" , and replaces it with \" cd\" . s becomes \" acd\" . So the final string is \" acd\" , and t= [ \" a\" , \" ab\" , \" b\" , \" cd\" ] before being shuffled. Test case 2: Initially s is \" z\" . In the first operation, Keine chooses \" z\" , and replaces it with \" aa\" . s becomes \" aa\" . In the second operation, Keine chooses \" a\" , and replaces it with \" ran\" . s becomes \" aran\" . In the third operation, Keine chooses \" a\" , and replaces it with \" yakumo\" . s becomes \" yakumoran\" . So the final string is \" yakumoran\" , and t= [ \" z\" , \" aa\" , \" a\" , \" ran\" , \" a\" , \" yakumo\" ] before being shuffled.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1688C"
  },
  {
    "title": "Patchouli's Magical Talisman",
    "url": "https://codeforces.com/problemset/problem/1688/B",
    "history": "She is skilled in all kinds of magics, and is keen on inventing new one. \u2014Perfect Memento in Strict SensePatchouli is making a magical talisman. She initially has n magical tokens. Their magical power can be represented with positive integers a_ 1, a_ 2, . . . , a_ n . Patchouli may perform the following two operations on the tokens. Fusion: Patchouli chooses two tokens, removes them, and creates a new token with magical power equal to the sum of the two chosen tokens. Reduction: Patchouli chooses a token with an even value of magical power x , removes it and creates a new token with magical power equal to x/ 2 . Tokens are more effective when their magical powers are odd values. Please help Patchouli to find the minimum number of operations she needs to make magical powers of all tokens odd values.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The description of the test cases follows. For each test case, the first line contains one integer n ( 1 \u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the initial number of tokens. The second line contains n intergers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial magical power of the n tokens. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of operations Patchouli needs to make all tokens have an odd value of magical power. It can be shown that under such restrictions the required sequence of operations exists.",
    "note": "Test case 1: a consists solely of odd numbers initially. Test case 2: Choose the tokens with magical power of 1 and 2 and perform Fusion. Now a= [ 1, 3] , both are odd numbers. Test case 3: Choose the tokens with magical power of 2 and 8 and perform Fusion. Now a= [ 4, 10] . Choose the token with magical power of 10 and perform Reduction. Now a= [ 4, 5] . Choose the tokens with magical power of 4 and 5 and perform Fusion. Now a= [ 9] , and 9 is an odd number. It can be shown that you can not make all the magical powers odd numbers in less than 3 moves, so the answer is 3 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1688B"
  },
  {
    "title": "Become Big For Me",
    "url": "https://codeforces.com/problemset/problem/1687/E",
    "history": "Come, let' s build a world where even the weak are not forgotten! \u2014Kijin Seija, Double Dealing CharactersShinmyoumaru has a mallet that can turn objects bigger or smaller. She is testing it out on a sequence a and a number v whose initial value is 1 . She wants to make v = _ i j{ a_ i\u00b7 a_ j} by no more than 10^ 5 operations ( _ i j{ a_ i\u00b7 a_ j} denotes the of all products of two distinct elements of the sequence a ) . In each operation, she picks a subsequence b of a , and does one of the followings: Enlarge: v = v \u00b7lcm( b) Reduce: v = v/ lcm( b) Note that she does not need to guarantee that v is an integer, that is, v does not need to be a multiple of lcm( b) when performing Reduce. Moreover, she wants to guarantee that the total length of b chosen over the operations does not exceed 10^ 6 . Fine a possible operation sequence for her. You don' t need to minimize anything.",
    "input": "The first line contains a single integer n ( 2\u2264 n\u2264 10^ 5 ) \u2014 the size of sequence a . The second line contains n integers a_ 1, a_ 2, \u22ef, a_ n ( 1\u2264 a_ i\u2264 10^ 6 ) \u2014 the sequence a . It can be shown that the answer exists.",
    "output": "The first line contains a non- negative integer k ( 0\u2264 k\u2264 10^ 5 ) \u2014 the number of operations. The following k lines contains several integers. For each line, the first two integers f ( f\u2208{ 0, 1} ) and p ( 1\u2264 p\u2264 n ) stand for the option you choose ( 0 for Enlarge and 1 for Reduce) and the length of b . The other p integers of the line i_ 1, i_ 2, . . . , i_ p ( 1\u2264 i_ 1< i_ 2< . . . < i_ p\u2264 n ) represents the indexes of the subsequence. Formally, b_ j= a_ i_ j .",
    "note": "Test case 1: _ i j{ a_ i\u00b7 a_ j} = { 60, 90, 150} = 30 . Perform v = v\u00b7lcm{ a_ 1, a_ 2, a_ 3} = 30 . Test case 2: _ i j{ a_ i\u00b7 a_ j} = 8 . Perform v = v\u00b7lcm{ a_ 4} = 16 . Perform v = v/ lcm{ a_ 1} = 8 .",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1687E"
  },
  {
    "title": "Sanae and Giant Robot",
    "url": "https://codeforces.com/problemset/problem/1687/C",
    "history": "Is it really? ! The robot only existing in my imagination? ! The Colossal Walking Robot? ! ! \u2014 Kochiya Sanae Sanae made a giant robot \u2014 Hisoutensoku, but something is wrong with it. To make matters worse, Sanae can not figure out how to stop it, and she is forced to fix it on- the- fly. The state of a robot can be represented by an array of integers of length n . Initially, the robot is at state a . She wishes to turn it into state b . As a great programmer, Sanae knows the art of copy- and- paste. In one operation, she can choose some segment from given segments, copy the segment from b and paste it into the same place of the robot, replacing the original state there. However, she has to ensure that the sum of a does not change after each copy operation in case the robot go haywire. Formally, Sanae can choose segment [ l, r] and assign a_ i = b_ i ( l\u2264 i\u2264 r ) if \u2211_ i= 1^ n a_ i does not change after the operation. Determine whether it is possible for Sanae to successfully turn the robot from the initial state a to the desired state b with any ( possibly, zero) operations.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 2\u00b7 10^ 4 ) \u2014 the number of test cases. The descriptions of the test cases follow. The first line of each test case contains two integers n , m ( 2 \u2264 n\u2264 2\u00b7 10^ 5 , 1 \u2264 m\u2264 2\u00b7 10^ 5 ) \u2014 the length of a , b and the number of segments. The second line contains n intergers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial state a . The third line contains n intergers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the desired state b . Then m lines follow, the i - th line contains two intergers l_ i, r_ i ( 1 \u2264 l_ i < r_ i \u2264 n ) \u2014 the segments that can be copy- pasted by Sanae. It is guaranteed that both the sum of n and the sum of m over all test cases does not exceed 2 \u00b7 10 ^ 5 .",
    "output": "For each test case, print \" YES\" ( without quotes) if a can be turned into b , or \" NO\" ( without quotes) otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "Test case 1: One possible way of turning a to b : First, select [ 1, 3] . After the operation, a= [ 3, 2, 5, 2, 3] . Then, select [ 2, 5] . After the operation, a= [ 3, 2, 5, 4, 1] = b . Test case 2: It can be shown that it is impossible to turn a into b .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1687C"
  },
  {
    "title": "Railway System",
    "url": "https://codeforces.com/problemset/problem/1687/B",
    "history": "As for the technology in the outside world, it is really too advanced for Gensokyo to even look up to. \u2014Yasaka Kanako, Symposium of Post- mysticismThis is an interactive problem. Under the direct supervision of Kanako and the Moriya Shrine, the railway system of Gensokyo is finally finished. GSKR ( Gensokyo Railways) consists of n stations with m bidirectional tracks connecting them. The i - th track has length l_ i ( 1\u2264 l_ i\u2264 10^ 6 ) . Due to budget limits, the railway system may not be connected, though there may be more than one track between two stations. The value of a railway system is defined as the total length of its all tracks. The maximum ( or minimum) capacity of a railway system is defined as the maximum ( or minimum) value among all of the currently functional system' s full spanning forest. In brief, full spanning forest of a graph is a spanning forest with the same connectivity as the given graph. Kanako has a simulator only able to process no more than 2m queries. The input of the simulator is a string s of length m , consisting of characters 0 and/ or 1. The simulator will assume the i - th track functional if s_ i= 1. The device will then tell Kanako the maximum capacity of the system in the simulated state. Kanako wants to know the the minimum capacity of the system with all tracks functional with the help of the simulator. The structure of the railway system is fixed in advance. In other words, the interactor is not adaptive. InteractionBegin the interaction by reading n, m . To make a query, print \" ? s \" ( without quotes, s is a string of length m , consisting of characters 0 and/ or 1) . Then you should read our response from standard input \u2014 the maximum capacity of the system in the simulated state. If your program has made an invalid query or has run out of tries, the interactor will terminate immediately and your program will get a verdict Wrong answer. To give the final answer, print \" ! L \" ( without the quotes, L is the minimum capacity of the system with all tracks functional) . Note that giving this answer is not counted towards the limit of 2m queries. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. HacksThe first line of input must contain two integers n, m ( 2 \u2264 n \u2264 200 , 1\u2264 m \u2264 500 ) \u2014 the number of stations and tracks. The next m lines of input must contain exactly 3 space- separated integers u_ i , v_ i , l_ i ( 1\u2264 u_ i, v_ i \u2264 n , u_ i v_ i , 1 \u2264 l_ i \u2264 10^ 6 ) \u2014 the endpoints and the length of the i - th track.",
    "input": "The first and only line of input contains two integers n, m ( 2 \u2264 n \u2264 200 , 1\u2264 m \u2264 500 ) \u2014 the number of stations and tracks.",
    "output": "",
    "note": "Here is the graph of the example, satisfying l_ i= i .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ],
    "id": "1687B"
  },
  {
    "title": "The Enchanted Forest",
    "url": "https://codeforces.com/problemset/problem/1687/A",
    "history": "The enchanted forest got its name from the magical mushrooms growing here. They may cause illusions and generally should not be approached. \u2014Perfect Memento in Strict SenseMarisa comes to pick mushrooms in the Enchanted Forest. The Enchanted forest can be represented by n points on the X - axis numbered 1 through n . Before Marisa started, her friend, Patchouli, used magic to detect the initial number of mushroom on each point, represented by a_ 1, a_ 2, . . . , a_ n . Marisa can start out at any point in the forest on minute 0 . Each minute, the followings happen in order: She moves from point x to y ( | x- y| \u2264 1 , possibly y= x ) . She collects all mushrooms on point y . A new mushroom appears on each point in the forest. Note that she cannot collect mushrooms on minute 0 . Now, Marisa wants to know the maximum number of mushrooms she can pick after k minutes.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n , k ( 1 \u2264 n \u2264 2 \u00b7 10 ^ 5 , 1\u2264 k \u2264 10^ 9 ) \u2014 the number of positions with mushrooms and the time Marisa has, respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial number of mushrooms on point 1, 2, . . . , n . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10 ^ 5 .",
    "output": "For each test case, print the maximum number of mushrooms Marisa can pick after k minutes.",
    "note": "Test case 1: Marisa can start at x= 2 . In the first minute, she moves to x= 1 and collect 5 mushrooms. The number of mushrooms will be [ 1, 7, 2, 3, 4] . In the second minute, she moves to x= 2 and collects 7 mushrooms. The numbers of mushrooms will be [ 2, 1, 3, 4, 5] . After 2 minutes, Marisa collects 12 mushrooms. It can be shown that it is impossible to collect more than 12 mushrooms. Test case 2: This is one of her possible moving path: 2 \u2192 3 \u2192 2 \u2192 1 \u2192 2 \u2192 3 \u2192 4 \u2192 5 It can be shown that it is impossible to collect more than 37 mushrooms.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1687A"
  },
  {
    "title": "Odd Subarrays",
    "url": "https://codeforces.com/problemset/problem/1686/B",
    "history": "For an array [ b_ 1, b_ 2, . . . , b_ m] define its number of inversions as the number of pairs ( i, j) of integers such that 1 \u2264 i < j \u2264 m and b_ i> b_ j . Let' s call array b odd if its number of inversions is odd. For example, array [ 4, 2, 7] is odd, as its number of inversions is 1 , while array [ 2, 1, 4, 3] isn' t, as its number of inversions is 2 . You are given a permutation [ p_ 1, p_ 2, . . . , p_ n] of integers from 1 to n ( each of them appears exactly once in the permutation) . You want to split it into several consecutive subarrays ( maybe just one) , so that the number of the odd subarrays among them is as large as possible. What largest number of these subarrays may be odd?",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of the permutation. The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct) \u2014 the elements of the permutation. The sum of n over all test cases doesn' t exceed 2\u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the largest possible number of odd subarrays that you can get after splitting the permutation into several consecutive subarrays.",
    "note": "In the first and third test cases, no matter how we split our permutation, there won' t be any odd subarrays. In the second test case, we can split our permutation into subarrays [ 4, 3] , [ 2, 1] , both of which are odd since their numbers of inversions are 1 . In the fourth test case, we can split our permutation into a single subarray [ 2, 1] , which is odd. In the fifth test case, we can split our permutation into subarrays [ 4, 5] , [ 6, 1, 2, 3] . The first subarray has 0 inversions, and the second has 3 , so it is odd.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1686B"
  },
  {
    "title": "Everything Everywhere All But One",
    "url": "https://codeforces.com/problemset/problem/1686/A",
    "history": "You are given an array of n integers a_ 1, a_ 2, . . . , a_ n . After you watched the amazing film \" Everything Everywhere All At Once\" , you came up with the following operation. In one operation, you choose n- 1 elements of the array and replace each of them with their arithmetic mean ( which doesn' t have to be an integer) . For example, from the array [ 1, 2, 3, 1] we can get the array [ 2, 2, 2, 1] , if we choose the first three elements, or we can get the array [ 4/ 3, 4/ 3, 3, 4/ 3] , if we choose all elements except the third. Is it possible to make all elements of the array equal by performing a finite number of such operations?",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 50 ) \u2014 the number of integers. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 100 ) .",
    "output": "For each test case, if it is possible to make all elements equal after some number of operations, output . Otherwise, output . You can output and in any case ( for example, strings , , will be recognized as a positive response) .",
    "note": "In the first test case, all elements are already equal. In the second test case, you can choose all elements except the third, their average is 1 + 2 + 4 + 5/ 4 = 3 , so the array will become [ 3, 3, 3, 3, 3] . It' s possible to show that it' s impossible to make all elements equal in the third and fourth test cases.",
    "topics": [
      "greedy"
    ],
    "id": "1686A"
  },
  {
    "title": "The Ultimate LIS Problem",
    "url": "https://codeforces.com/problemset/problem/1685/E",
    "history": "It turns out that this is exactly the 100 - th problem of mine that appears in some programming competition. So it has to be special! And what can be more special than another problem about LIS. . . You are given a permutation p_ 1, p_ 2, . . . , p_ 2n+ 1 of integers from 1 to 2n+ 1 . You will have to process q updates, where the i - th update consists in swapping p_ u_ i, p_ v_ i . After each update, find any cyclic shift of p with LIS \u2264 n , or determine that there is no such shift. ( Refer to the output section for details) . Here LIS( a) denotes the length of longest strictly increasing subsequence of a . Hacks are disabled in this problem. Don' t ask why.",
    "input": "The first line of the input contains two integers n, q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) . The second line of the input contains 2n+ 1 integers p_ 1, p_ 2, . . . , p_ 2n+ 1 ( 1 \u2264 p_ i \u2264 2n+ 1 , all p_ i are distinct) \u2014 the elements of p . The i - th of the next q lines contains two integers u_ i, v_ i ( 1 \u2264 u_ i, v_ i \u2264 2n+ 1 , u_ i = \u0338 v_ i ) \u2014 indicating that you have to swap elements p_ u_ i, p_ v_ i in the i - th update.",
    "output": "After each update, output any k ( 0 \u2264 k \u2264 2n) , such that the length of the longest increasing subsequence of ( p_ k+ 1, p_ k+ 2, . . . , p_ 2n+ 1, p_ 1, . . . , p_ k) doesn' t exceed n , or - 1 , if there is no such k .",
    "note": "After the first update, our permutation becomes ( 5, 2, 3, 4, 1) . We can show that all its cyclic shifts have LIS \u2265 3 . After the second update, our permutation becomes ( 1, 2, 3, 4, 5) . We can show that all its cyclic shifts have LIS \u2265 3 . After the third update, our permutation becomes ( 1, 2, 3, 5, 4) . Its shift by 2 is ( 3, 5, 4, 1, 2) , and its LIS = 2 . After the fourth update, our permutation becomes ( 1, 2, 3, 4, 5) . We can show that all its cyclic shifts have LIS \u2265 3 . After the fifth update, our permutation becomes ( 4, 2, 3, 1, 5) . Its shift by 4 is ( 5, 4, 2, 3, 1) , and its LIS = 2 . After the fifth update, our permutation becomes ( 4, 5, 3, 1, 2) . Its shift by 0 is ( 4, 5, 3, 1, 2) , and its LIS = 2 .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1685E"
  },
  {
    "title": "Permutation Weight (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1685/D2",
    "history": "This is a hard version of the problem. The difference between the easy and hard versions is that in this version, you have to output the lexicographically smallest permutation with the smallest weight. You are given a permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n . Let' s define the weight of the permutation q_ 1, q_ 2, . . . , q_ n of integers from 1 to n as | q_ 1 - p_ q_ 2| + | q_ 2 - p_ q_ 3| + . . . + | q_ n- 1 - p_ q_ n| + | q_ n - p_ q_ 1| You want your permutation to be as lightweight as possible. Among the permutations q with the smallest possible weight, find the lexicographically smallest. Permutation a_ 1, a_ 2, . . . , a_ n is lexicographically smaller than permutation b_ 1, b_ 2, . . . , b_ n , if there exists some 1 \u2264 i \u2264 n such that a_ j = b_ j for all 1 \u2264 j < i and a_ i< b_ i .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 200 ) \u2014 the size of the permutation. The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct) \u2014 the elements of the permutation. The sum of n over all test cases doesn' t exceed 400 .",
    "output": "For each test case, output n integers q_ 1, q_ 2, . . . , q_ n ( 1 \u2264 q_ i \u2264 n , all q_ i are distinct) \u2014 the lexicographically smallest permutation with the smallest weight.",
    "note": "In the first test case, there are two permutations of length 2 : ( 1, 2) and ( 2, 1) . Permutation ( 1, 2) has weight | 1 - p_ 2| + | 2 - p_ 1| = 0 , and the permutation ( 2, 1) has the same weight: | 2 - p_ 1| + | 1 - p_ 2| = 0 . In this version, you have to output the lexicographically smaller of them \u2014 ( 1, 2) . In the second test case, the weight of the permutation ( 1, 3, 4, 2) is | 1 - p_ 3| + | 3 - p_ 4| + | 4 - p_ 2| + | 2 - p_ 1| = | 1 - 1| + | 3 - 4| + | 4 - 3| + | 2 - 2| = 2 . There are no permutations with smaller weights. In the third test case, the weight of the permutation ( 1, 3, 4, 2, 5) is | 1 - p_ 3| + | 3 - p_ 4| + | 4 - p_ 2| + | 2 - p_ 5| + | 5 - p_ 1| = | 1 - 3| + | 3 - 2| + | 4 - 4| + | 2 - 1| + | 5 - 5| = 4 . There are no permutations with smaller weights.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1685D2"
  },
  {
    "title": "Bring Balance",
    "url": "https://codeforces.com/problemset/problem/1685/C",
    "history": "Alina has a bracket sequence s of length 2n , consisting of n opening brackets ' ( ' and n closing brackets ' ) ' . As she likes balance, she wants to turn this bracket sequence into a balanced bracket sequence. In one operation, she can reverse any substring of s . What' s the smallest number of operations that she needs to turn s into a balanced bracket sequence? It can be shown that it' s always possible in at most n operations. As a reminder, a sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters + and 1. For example, sequences ( ( ) ) ( ) , ( ) , and ( ( ) ( ( ) ) ) are balanced, while ) ( , ( ( ) , and ( ( ) ) ) ( are not.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains a string s of length 2n , consisting of n opening and n closing brackets. The sum of n over all test cases doesn' t exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, in the first line output a single integer k ( 0 \u2264 k \u2264 n) \u2014 the smallest number of operations required. The i - th of the next k lines should contain two integers l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 2n ) , indicating that in the i - th operation, Alina will reverse the substring s_ ls_ l+ 1. . . s_ r- 1s_ r . Here the numeration starts from 1 . If there are multiple sequences of operations with the smallest length which transform the sequence into a balanced one, you can output any of them.",
    "note": "In the first test case, the string is already balanced. In the second test case, the string will be transformed as follows: ( ) ) ( ( ( ) ) ) ( \u2192 ( ) ( ) ( ( ) ) ) ( \u2192 ( ) ( ) ( ( ) ) ( ) , where the last string is balanced. In the third test case, the string will be transformed to ( ( ( ) ) ) ( ( ( ) ) ) , which is balanced.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1685C"
  },
  {
    "title": "Linguistics",
    "url": "https://codeforces.com/problemset/problem/1685/B",
    "history": "Alina has discovered a weird language, which contains only 4 words: , , , . It also turned out that there are no spaces in this language: a sentence is written by just concatenating its words into a single string. Alina has found one such sentence s and she is curious: is it possible that it consists of precisely a words , b words , c words , and d words ? In other words, determine, if it' s possible to concatenate these a+ b+ c+ d words in some order so that the resulting string is s . Each of the a+ b+ c+ d words must be used exactly once in the concatenation, but you can choose the order in which they are concatenated.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains four integers a , b , c , d ( 0\u2264 a, b, c, d\u2264 2\u00b7 10^ 5 ) \u2014 the number of times that words , , , respectively must be used in the sentence. The second line contains the string s ( s consists only of the characters and , 1\u2264 | s| \u2264 2\u00b7 10^ 5 , | s| = a+ b+ 2c+ 2d ) \u2014 the sentence. Notice that the condition | s| = a+ b+ 2c+ 2d ( here | s| denotes the length of the string s ) is equivalent to the fact that s is as long as the concatenation of the a+ b+ c+ d words. The sum of the lengths of s over all test cases doesn' t exceed 2\u00b7 10^ 5 .",
    "output": "For each test case output if it is possible that the sentence s consists of precisely a words , b words , c words , and d words , and otherwise. You can output each letter in any case.",
    "note": "In the first test case, the sentence s is . Clearly, it can' t consist of a single word , so the answer is . In the second test case, the sentence s is , and it' s possible that it consists of a single word , so the answer is . In the third test case, the sentence s is , and it' s possible that it consists of one word , one word , and one word , as + + = . In the fourth test case, the sentence s is , and it' s possible that it consists of one word , one word , and one word , as + + = . In the fifth test case, the sentence s is , and it' s possible that it consists of one word , one word , two words , and two words , as + + + + + = .",
    "topics": [
      "greedy",
      "implementation",
      "sortings",
      "strings"
    ],
    "id": "1685B"
  },
  {
    "title": "Circular Local MiniMax",
    "url": "https://codeforces.com/problemset/problem/1685/A",
    "history": "You are given n integers a_ 1, a_ 2, . . . , a_ n . Is it possible to arrange them on a circle so that each number is strictly greater than both its neighbors or strictly smaller than both its neighbors? In other words, check if there exists a rearrangement b_ 1, b_ 2, . . . , b_ n of the integers a_ 1, a_ 2, . . . , a_ n such that for each i from 1 to n at least one of the following conditions holds: b_ i- 1 < b_ i > b_ i+ 1 b_ i- 1 > b_ i < b_ i+ 1 To make sense of the previous formulas for i= 1 and i= n , one shall define b_ 0= b_ n and b_ n+ 1= b_ 1 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 3\u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 10^ 5 ) \u2014 the number of integers. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . The sum of n over all test cases doesn' t exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, if it is not possible to arrange the numbers on the circle satisfying the conditions from the statement, output . You can output each letter in any case. Otherwise, output . In the second line, output n integers b_ 1, b_ 2, . . . , b_ n , which are a rearrangement of a_ 1, a_ 2, . . . , a_ n and satisfy the conditions from the statement. If there are multiple valid ways to arrange the numbers, you can output any of them.",
    "note": "It can be shown that there are no valid arrangements for the first and the third test cases. In the second test case, the arrangement [ 1, 8, 4, 9] works. In this arrangement, 1 and 4 are both smaller than their neighbors, and 8, 9 are larger. In the fourth test case, the arrangement [ 1, 11, 1, 111, 1, 1111] works. In this arrangement, the three elements equal to 1 are smaller than their neighbors, while all other elements are larger than their neighbors.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1685A"
  },
  {
    "title": "MEX vs DIFF",
    "url": "https://codeforces.com/problemset/problem/1684/E",
    "history": "You are given an array a of n non- negative integers. In one operation you can change any number in the array to any other non- negative integer. Let' s define the cost of the array as DIFF( a) - MEX( a) , where MEX of a set of non- negative integers is the smallest non- negative integer not present in the set, and DIFF is the number of different numbers in the array. For example, MEX( { 1, 2, 3} ) = 0 , MEX( { 0, 1, 2, 4, 5} ) = 3 . You should find the minimal cost of the array a if you are allowed to make at most k operations.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 k \u2264 10^ 5 ) \u2014 the length of the array a and the number of operations that you are allowed to make. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output a single integer \u2014 minimal cost that it is possible to get making at most k operations.",
    "note": "In the first test case no operations are needed to minimize the value of DIFF - MEX . In the second test case it is possible to replace 5 by 1 . After that the array a is [ 0, 2, 4, 1] , DIFF = 4 , MEX = MEX( { 0, 1, 2, 4} ) = 3 , so the answer is 1 . In the third test case one possible array a is [ 4, 13, 0, 0, 13, 1, 2] , DIFF = 5 , MEX = 3 . In the fourth test case one possible array a is [ 1, 2, 3, 0, 0, 0] .",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1684E"
  },
  {
    "title": "Traps",
    "url": "https://codeforces.com/problemset/problem/1684/D",
    "history": "There are n traps numbered from 1 to n . You will go through them one by one in order. The i - th trap deals a_ i base damage to you. Instead of going through a trap, you can jump it over. You can jump over no more than k traps. If you jump over a trap, it does not deal any damage to you. But there is an additional rule: if you jump over a trap, all next traps damages increase by 1 ( this is a bonus damage) . Note that if you jump over a trap, you don' t get any damage ( neither base damage nor bonus damage) . Also, the bonus damage stacks so, for example, if you go through a trap i with base damage a_ i , and you have already jumped over 3 traps, you get ( a_ i + 3) damage. You have to find the minimal damage that it is possible to get if you are allowed to jump over no more than k traps.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 n ) \u2014 the number of traps and the number of jump overs that you are allowed to make. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 base damage values of all traps. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimal total damage that it is possible to get if you are allowed to jump over no more than k traps.",
    "note": "In the first test case it is allowed to jump over all traps and take 0 damage. In the second test case there are 5 ways to jump over some traps: Do not jump over any trap. Total damage: 5 + 10 + 11 + 5 = 31 . Jump over the 1 - st trap. Total damage: 0 + ( 10 + 1) + ( 11 + 1) + ( 5 + 1) = 29 . Jump over the 2 - nd trap. Total damage: 5 + 0 + ( 11 + 1) + ( 5 + 1) = 23 . Jump over the 3 - rd trap. Total damage: 5 + 10 + 0 + ( 5 + 1) = 21 . Jump over the 4 - th trap. Total damage: 5 + 10 + 11 + 0 = 26 . To get minimal damage it is needed to jump over the 3 - rd trap, so the answer is 21 . In the third test case it is optimal to jump over the traps 1 , 3 , 4 , 5 , 7 : Total damage: 0 + ( 2 + 1) + 0 + 0 + 0 + ( 2 + 4) + 0 = 9 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1684D"
  },
  {
    "title": "Column Swapping",
    "url": "https://codeforces.com/problemset/problem/1684/C",
    "history": "You are given a grid with n rows and m columns, where each cell has a positive integer written on it. Let' s call a grid good, if in each row the sequence of numbers is sorted in a non- decreasing order. It means, that for each 1 \u2264 i \u2264 n and 2 \u2264 j \u2264 m the following holds: a_ i, j\u2265 a_ i, j- 1 . You have to to do the following operation exactly once: choose two columns with indexes i and j ( not necessarily different) , 1 \u2264 i, j \u2264 m , and swap them. You are asked to determine whether it is possible to make the grid good after the swap and, if it is, find the columns that need to be swapped.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rows and columns respectively. Each of the next n rows contains m integers, j - th element of i - th row is a_ i, j ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the number written in the j - th cell of the i - th row. It' s guaranteed that the sum of n \u00b7 m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "If after the swap it is impossible to get a good grid, output - 1 . In the other case output 2 integers \u2014 the indices of the columns that should be swapped to get a good grid. If there are multiple solutions, print any.",
    "note": "In the first test case the grid is initially good, so we can, for example, swap the first column with itself. In the second test case it is impossible to make the grid good. In the third test case it is needed to swap the first and the second column, then the grid becomes good.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1684C"
  },
  {
    "title": "MCMF?",
    "url": "https://codeforces.com/problemset/problem/1682/F",
    "history": "You are given two integer arrays a and b ( b_ i = \u0338 0 and | b_ i| \u2264 10^ 9 ) . Array a is sorted in non- decreasing order. The cost of a subarray a[ l: r] is defined as follows: If \u2211_ j = l^ r b_ j = \u0338 0 , then the cost is not defined. Otherwise: Construct a bipartite flow graph with r- l+ 1 vertices, labeled from l to r , with all vertices having b_ i 0 on the left and those with b_ i 0 on right. For each i, j such that l \u2264 i, j \u2264 r , b_ i< 0 and b_ j> 0 , draw an edge from i to j with infinite capacity and cost of unit flow as | a_ i- a_ j| . Add two more vertices: source S and sink T . For each i such that l \u2264 i \u2264 r and b_ i< 0 , add an edge from S to i with cost 0 and capacity | b_ i| . For each i such that l \u2264 i \u2264 r and b_ i> 0 , add an edge from i to T with cost 0 and capacity | b_ i| . The cost of the subarray is then defined as the minimum cost of maximum flow from S to T . You are given q queries in the form of two integers l and r . You have to compute the cost of subarray a[ l: r] for each query, modulo 10^ 9 + 7 . If you don' t know what the minimum cost of maximum flow means, read here.",
    "input": "The first line of input contains two integers n and q ( 2 \u2264 n \u2264 2\u00b7 10^ 5, 1 \u2264 q \u2264 2\u00b710^ 5) \u2014 length of arrays a , b and the number of queries. The next line contains n integers a_ 1, a_ 2 . . . a_ n ( 0 \u2264 a_ 1 \u2264 a_ 2 . . . \u2264 a_ n \u2264 10^ 9) \u2014 the array a . It is guaranteed that a is sorted in non- decreasing order. The next line contains n integers b_ 1, b_ 2 . . . b_ n ( - 10^ 9\u2264 b_ i \u2264 10^ 9, b_ i = \u0338 0) \u2014 the array b . The i - th of the next q lines contains two integers l_ i, r_ i ( 1\u2264 l_ i \u2264 r_ i \u2264 n) . It is guaranteed that \u2211_ j = l_ i^ r_ i b_ j = 0 .",
    "output": "For each query l_ i , r_ i \u2014 print the cost of subarray a[ l_ i: r_ i] modulo 10^ 9 + 7 .",
    "note": "In the first query, the maximum possible flow is 1 i. e one unit from source to 2 , then one unit from 2 to 3 , then one unit from 3 to sink. The cost of the flow is 0 \u00b7 1 + | 2 - 4| \u00b7 1 + 0 \u00b7 1 = 2 . In the second query, the maximum possible flow is again 1 i. e from source to 7 , 7 to 6 , and 6 to sink with a cost of 0 \u00b7 | 10 - 10| \u00b7 1 + 0 \u00b7 1 = 0 . In the third query, the flow network is shown on the left with capacity written over the edge and the cost written in bracket. The image on the right shows the flow through each edge in an optimal configuration. Maximum flow is 3 with a cost of 0 \u00b7 3 + 1 \u00b7 1 + 4 \u00b7 2 + 0 \u00b7 1 + 0 \u00b7 2 = 9 . In the fourth query, the flow network looks as \u2013 The minimum cost maximum flow is achieved in the configuration \u2013 The maximum flow in the above network is 4 and the minimum cost of such flow is 15.",
    "topics": [
      "data structures",
      "flows",
      "graphs",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1682F"
  },
  {
    "title": "Unordered Swaps",
    "url": "https://codeforces.com/problemset/problem/1682/E",
    "history": "Alice had a permutation p of numbers from 1 to n . Alice can swap a pair ( x, y) which means swapping elements at positions x and y in p ( i. e. swap p_ x and p_ y ) . Alice recently learned her first sorting algorithm, so she decided to sort her permutation in the minimum number of swaps possible. She wrote down all the swaps in the order in which she performed them to sort the permutation on a piece of paper. For example, [ ( 2, 3) , ( 1, 3) ] is a valid swap sequence by Alice for permutation p = [ 3, 1, 2] whereas [ ( 1, 3) , ( 2, 3) ] is not because it doesn' t sort the permutation. Note that we cannot sort the permutation in less than 2 swaps. [ ( 1, 2) , ( 2, 3) , ( 2, 4) , ( 2, 3) ] cannot be a sequence of swaps by Alice for p = [ 2, 1, 4, 3] even if it sorts the permutation because p can be sorted in 2 swaps, for example using the sequence [ ( 4, 3) , ( 1, 2) ] . Unfortunately, Bob shuffled the sequence of swaps written by Alice. You are given Alice' s permutation p and the swaps performed by Alice in arbitrary order. Can you restore the correct sequence of swaps that sorts the permutation p ? Since Alice wrote correct swaps before Bob shuffled them up, it is guaranteed that there exists some order of swaps that sorts the permutation.",
    "input": "The first line contains 2 integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 n - 1) \u2014 the size of permutation and the minimum number of swaps required to sort the permutation. The next line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct) \u2014 the elements of p . It is guaranteed that p forms a permutation. Then m lines follow. The i - th of the next m lines contains two integers x_ i and y_ i \u2014 the i - th swap ( x_ i, y_ i) . It is guaranteed that it is possible to sort p with these m swaps and that there is no way to sort p with less than m swaps.",
    "output": "Print a permutation of m integers \u2014 a valid order of swaps written by Alice that sorts the permutation p . See sample explanation for better understanding. In case of multiple possible answers, output any.",
    "note": "In the first example, p = [ 2, 3, 4, 1] , m = 3 and given swaps are [ ( 1, 4) , ( 2, 1) , ( 1, 3) ] . There is only one correct order of swaps i. e [ 2, 3, 1] . First we perform the swap 2 from the input i. e ( 2, 1) , p becomes [ 3, 2, 4, 1] . Then we perform the swap 3 from the input i. e ( 1, 3) , p becomes [ 4, 2, 3, 1] . Finally we perform the swap 1 from the input i. e ( 1, 4) and p becomes [ 1, 2, 3, 4] which is sorted. In the second example, p = [ 6, 5, 1, 3, 2, 4] , m = 4 and the given swaps are [ ( 3, 1) , ( 2, 5) , ( 6, 3) , ( 6, 4) ] . One possible correct order of swaps is [ 4, 2, 1, 3] . Perform the swap 4 from the input i. e ( 6, 4) , p becomes [ 6, 5, 1, 4, 2, 3] . Perform the swap 2 from the input i. e ( 2, 5) , p becomes [ 6, 2, 1, 4, 5, 3] . Perform the swap 1 from the input i. e ( 3, 1) , p becomes [ 1, 2, 6, 4, 5, 3] . Perform the swap 3 from the input i. e ( 6, 3) and p becomes [ 1, 2, 3, 4, 5, 6] which is sorted. There can be other possible answers such as [ 1, 2, 4, 3] .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1682E"
  },
  {
    "title": "LIS or Reverse LIS?",
    "url": "https://codeforces.com/problemset/problem/1682/C",
    "history": "You are given an array a of n positive integers. Let LIS( a) denote the length of longest strictly increasing subsequence of a . For example, LIS( [ 2, 1, 1, 3] ) = 2 . LIS( [ 3, 5, 10, 20] ) = 4 . LIS( [ 3, 1, 2, 4] ) = 3 . We define array a' as the array obtained after reversing the array a i. e. a' = [ a_ n, a_ n- 1, . . . , a_ 1] . The beauty of array a is defined as min( LIS( a) , LIS( a' ) ) . Your task is to determine the maximum possible beauty of the array a if you can rearrange the array a arbitrarily.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2\u00b7 10^ 5) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the maximum possible beauty of a after rearranging its elements arbitrarily.",
    "note": "In the first test case, a = [ 6, 6, 6] and a' = [ 6, 6, 6] . LIS( a) = LIS( a' ) = 1 . Hence the beauty is min( 1, 1) = 1 . In the second test case, a can be rearranged to [ 2, 5, 4, 5, 4, 2] . Then a' = [ 2, 4, 5, 4, 5, 2] . LIS( a) = LIS( a' ) = 3 . Hence the beauty is 3 and it can be shown that this is the maximum possible beauty. In the third test case, a can be rearranged to [ 1, 2, 3, 2] . Then a' = [ 2, 3, 2, 1] . LIS( a) = 3 , LIS( a' ) = 2 . Hence the beauty is min( 3, 2) = 2 and it can be shown that 2 is the maximum possible beauty.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1682C"
  },
  {
    "title": "Palindromic Indices",
    "url": "https://codeforces.com/problemset/problem/1682/A",
    "history": "You are given a palindromic string s of length n . You have to count the number of indices i ( 1 \u2264 i \u2264 n) such that the string after removing s_ i from s still remains a palindrome. For example, consider s = \" aba\" If we remove s_ 1 from s , the string becomes \" ba\" which is not a palindrome. If we remove s_ 2 from s , the string becomes \" aa\" which is a palindrome. If we remove s_ 3 from s , the string becomes \" ab\" which is not a palindrome. A palindrome is a string that reads the same backward as forward. For example, \" abba\" , \" a\" , \" fef\" are palindromes whereas \" codeforces\" , \" acd\" , \" xy\" are not.",
    "input": "The input consists of multiple test cases. The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 3) \u2014 the number of test cases. Description of the test cases follows. The first line of each testcase contains a single integer n ( 2 \u2264 n \u2264 10^ 5) \u2014 the length of string s . The second line of each test case contains a string s consisting of lowercase English letters. It is guaranteed that s is a palindrome. It is guaranteed that sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of indices i ( 1 \u2264 i \u2264 n) such that the string after removing s_ i from s still remains a palindrome.",
    "note": "The first test case is described in the statement. In the second test case, the indices i that result in palindrome after removing s_ i are 3, 4, 5, 6 . Hence the answer is 4 . In the third test case, removal of any of the indices results in \" d\" which is a palindrome. Hence the answer is 2 .",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1682A"
  },
  {
    "title": "Game with Cards",
    "url": "https://codeforces.com/problemset/problem/1681/A",
    "history": "Alice and Bob play a game. Alice has n cards, the i - th of them has the integer a_ i written on it. Bob has m cards, the j - th of them has the integer b_ j written on it. On the first turn of the game, the first player chooses one of his/ her cards and puts it on the table ( plays it) . On the second turn, the second player chooses one of his/ her cards such that the integer on it is greater than the integer on the card played on the first turn, and plays it. On the third turn, the first player chooses one of his/ her cards such that the integer on it is greater than the integer on the card played on the second turn, and plays it, and so on \u2014 the players take turns, and each player has to choose one of his/ her cards with greater integer than the card played by the other player on the last turn. If some player cannot make a turn, he/ she loses. For example, if Alice has 4 cards with numbers [ 10, 5, 3, 8] , and Bob has 3 cards with numbers [ 6, 11, 6] , the game may go as follows: Alice can choose any of her cards. She chooses the card with integer 5 and plays it. Bob can choose any of his cards with number greater than 5 . He chooses a card with integer 6 and plays it. Alice can choose any of her cards with number greater than 6 . She chooses the card with integer 10 and plays it. Bob can choose any of his cards with number greater than 10 . He chooses a card with integer 11 and plays it. Alice can choose any of her cards with number greater than 11 , but she has no such cards, so she loses. Both Alice and Bob play optimally ( if a player is able to win the game no matter how the other player plays, the former player will definitely win the game) . You have to answer two questions: who wins if Alice is the first player? who wins if Bob is the first player?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of four lines. The first line of a test case contains one integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of cards Alice has. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 50 ) \u2014 the numbers written on the cards that Alice has. The third line contains one integer m ( 1 \u2264 m \u2264 50 ) \u2014 the number of Bob' s cards. The fourth line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 50 ) \u2014 the numbers on Bob' s cards.",
    "output": "For each test case, print two lines. The first line should be Alice if Alice wins when she is the first player; otherwise, the first line should be Bob. The second line should contain the name of the winner if Bob is the first player, in the same format.",
    "note": "Let' s consider the first test case of the example. Alice has one card with integer 6 , Bob has two cards with numbers [ 6, 8] . If Alice is the first player, she has to play the card with number 6 . Bob then has to play the card with number 8 . Alice has no cards left, so she loses. If Bob is the first player, then no matter which of his cards he chooses on the first turn, Alice won' t be able to play her card on the second turn, so she will lose.",
    "topics": [
      "games",
      "greedy"
    ],
    "id": "1681A"
  },
  {
    "title": "Moving Chips",
    "url": "https://codeforces.com/problemset/problem/1680/E",
    "history": "You are given a board of size 2 \u00d7 n ( 2 rows, n columns) . Some cells of the board contain chips. The chip is represented as ' * ' , and an empty space is represented as ' . ' . It is guaranteed that there is at least one chip on the board. In one move, you can choose any chip and move it to any adjacent ( by side) cell of the board ( if this cell is inside the board) . It means that if the chip is in the first row, you can move it left, right or down ( but it shouldn' t leave the board) . Same, if the chip is in the second row, you can move it left, right or up. If the chip moves to the cell with another chip, the chip in the destination cell disappears ( i. e. our chip captures it) . Your task is to calculate the minimum number of moves required to leave exactly one chip on the board. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the board. The second line of the test case contains the string s_ 1 consisting of n characters ' * ' ( chip) and/ or ' . ' ( empty cell) . The third line of the test case contains the string s_ 2 consisting of n characters ' * ' ( chip) and/ or ' . ' ( empty cell) . Additional constraints on the input: in each test case, there is at least one chip on a board; the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print one integer \u2014 the minimum number of moves required to leave exactly one chip on the board.",
    "note": "",
    "topics": [
      "bitmasks",
      "dp",
      "greedy"
    ],
    "id": "1680E"
  },
  {
    "title": "Dog Walking",
    "url": "https://codeforces.com/problemset/problem/1680/D",
    "history": "You are walking with your dog, and now you are at the promenade. The promenade can be represented as an infinite line. Initially, you are in the point 0 with your dog. You decided to give some freedom to your dog, so you untied her and let her run for a while. Also, you watched what your dog is doing, so you have some writings about how she ran. During the i - th minute, the dog position changed from her previous position by the value a_ i ( it means, that the dog ran for a_ i meters during the i - th minute) . If a_ i is positive, the dog ran a_ i meters to the right, otherwise ( if a_ i is negative) she ran a_ i meters to the left. During some minutes, you were chatting with your friend, so you don' t have writings about your dog movement during these minutes. These values a_ i equal zero. You want your dog to return to you after the end of the walk, so the destination point of the dog after n minutes should be 0 . Now you are wondering: what is the maximum possible number of different integer points of the line your dog could visit on her way, if you replace every 0 with some integer from - k to k ( and your dog should return to 0 after the walk) ? The dog visits an integer point if she runs through that point or reaches in it at the end of any minute. Point 0 is always visited by the dog, since she is initially there. If the dog cannot return to the point 0 after n minutes regardless of the integers you place, print - 1.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 3000; 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of minutes and the maximum possible speed of your dog during the minutes without records. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the number of meters your dog ran during the i - th minutes ( to the left if a_ i is negative, to the right otherwise) . If a_ i = 0 then this value is unknown and can be replaced with any integer from the range [ - k; k] .",
    "output": "If the dog cannot return to the point 0 after n minutes regardless of the set of integers you place, print - 1. Otherwise, print one integer \u2014 the maximum number of different integer points your dog could visit if you fill all the unknown values optimally and the dog will return to the point 0 at the end of the walk.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1680D"
  },
  {
    "title": "Binary String",
    "url": "https://codeforces.com/problemset/problem/1680/C",
    "history": "You are given a string s consisting of characters 0 and/ or 1. You have to remove several ( possibly zero) characters from the beginning of the string, and then several ( possibly zero) characters from the end of the string. The string may become empty after the removals. The cost of the removal is the maximum of the following two values: the number of characters 0 left in the string; the number of characters 1 removed from the string. What is the minimum cost of removal you can achieve?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case consists of one line containing the string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) , consisting of characters 0 and/ or 1. The total length of strings s in all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum cost of removal you can achieve.",
    "note": "Consider the test cases of the example: in the first test case, it' s possible to remove two characters from the beginning and one character from the end. Only one 1 is deleted, only one 0 remains, so the cost is 1 ; in the second test case, it' s possible to remove three characters from the beginning and six characters from the end. Two characters 0 remain, three characters 1 are deleted, so the cost is 3 ; in the third test case, it' s optimal to remove four characters from the beginning; in the fourth test case, it' s optimal to remove the whole string; in the fifth test case, it' s optimal to leave the string as it is.",
    "topics": [
      "binary search",
      "greedy",
      "strings",
      "two pointers"
    ],
    "id": "1680C"
  },
  {
    "title": "AvtoBus",
    "url": "https://codeforces.com/problemset/problem/1679/A",
    "history": "Spring has come, and the management of the AvtoBus bus fleet has given the order to replace winter tires with summer tires on all buses. You own a small bus service business and you have just received an order to replace n tires. You know that the bus fleet owns two types of buses: with two axles ( these buses have 4 wheels) and with three axles ( these buses have 6 wheels) . You don' t know how many buses of which type the AvtoBus bus fleet owns, so you wonder how many buses the fleet might have. You have to determine the minimum and the maximum number of buses that can be in the fleet if you know that the total number of wheels for all buses is n .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1 000 ) \u2014 the number of test cases. The following lines contain description of test cases. The only line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 18 ) \u2014 the total number of wheels for all buses.",
    "output": "For each test case print the answer in a single line using the following format. Print two integers x and y ( 1 \u2264 x \u2264 y ) \u2014 the minimum and the maximum possible number of buses that can be in the bus fleet. If there is no suitable number of buses for the given n , print the number - 1 as the answer.",
    "note": "In the first test case the total number of wheels is 4 . It means that there is the only one bus with two axles in the bus fleet. In the second test case it' s easy to show that there is no suitable number of buses with 7 wheels in total. In the third test case the total number of wheels is 24 . The following options are possible: Four buses with three axles. Three buses with two axles and two buses with three axles. Six buses with two axles. So the minimum number of buses is 4 and the maximum number of buses is 6 .",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1679A"
  },
  {
    "title": "Tokitsukaze and Good 01-String (hard version)",
    "url": "https://codeforces.com/problemset/problem/1678/B2",
    "history": "This is the hard version of the problem. The only difference between the two versions is that the harder version asks additionally for a minimum number of subsegments. Tokitsukaze has a binary string s of length n , consisting only of zeros and ones, n is even. Now Tokitsukaze divides s into the minimum number of contiguous subsegments, and for each subsegment, all bits in each subsegment are the same. After that, s is considered good if the lengths of all subsegments are even. For example, if s is \" 11001111\" , it will be divided into \" 11\" , \" 00\" and \" 1111\" . Their lengths are 2 , 2 , 4 respectively, which are all even numbers, so \" 11001111\" is good. Another example, if s is \" 1110011000\" , it will be divided into \" 111\" , \" 00\" , \" 11\" and \" 000\" , and their lengths are 3 , 2 , 2 , 3 . Obviously, \" 1110011000\" is not good. Tokitsukaze wants to make s good by changing the values of some positions in s . Specifically, she can perform the operation any number of times: change the value of s_ i to ' 0' or ' 1' ( 1 \u2264 i \u2264 n ) . Can you tell her the minimum number of operations to make s good? Meanwhile, she also wants to know the minimum number of subsegments that s can be divided into among all solutions with the minimum number of operations.",
    "input": "The first contains a single positive integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. For each test case, the first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of s , it is guaranteed that n is even. The second line contains a binary string s of length n , consisting only of zeros and ones. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line with two integers \u2014 the minimum number of operations to make s good, and the minimum number of subsegments that s can be divided into among all solutions with the minimum number of operations.",
    "note": "In the first test case, one of the ways to make s good is the following. Change s_ 3 , s_ 6 and s_ 7 to ' 0' , after that s becomes \" 1100000000\" , it can be divided into \" 11\" and \" 00000000\" , which lengths are 2 and 8 respectively, the number of subsegments of it is 2 . There are other ways to operate 3 times to make s good, such as \" 1111110000\" , \" 1100001100\" , \" 1111001100\" , the number of subsegments of them are 2 , 4 , 4 respectively. It' s easy to find that the minimum number of subsegments among all solutions with the minimum number of operations is 2 . In the second, third and fourth test cases, s is good initially, so no operation is required.",
    "topics": [
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1678B2"
  },
  {
    "title": "Tokitsukaze and Two Colorful Tapes",
    "url": "https://codeforces.com/problemset/problem/1677/C",
    "history": "Tokitsukaze has two colorful tapes. There are n distinct colors, numbered 1 through n , and each color appears exactly once on each of the two tapes. Denote the color of the i - th position of the first tape as ca_ i , and the color of the i - th position of the second tape as cb_ i . Now Tokitsukaze wants to select each color an integer value from 1 to n , distinct for all the colors. After that she will put down the color values in each colored position on the tapes. Denote the number of the i - th position of the first tape as numa_ i , and the number of the i - th position of the second tape as numb_ i . For example, for the above picture, assuming that the color red has value x ( 1 \u2264 x \u2264 n ) , it appears at the 1 - st position of the first tape and the 3 - rd position of the second tape, so numa_ 1= numb_ 3= x . Note that each color i from 1 to n should have a distinct value, and the same color which appears in both tapes has the same value. After labeling each color, the beauty of the two tapes is calculated as \u2211_ i= 1^ n| numa_ i- numb_ i| . Please help Tokitsukaze to find the highest possible beauty.",
    "input": "The first contains a single positive integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. For each test case, the first line contains a single integer n ( 1\u2264 n \u2264 10^ 5 ) \u2014 the number of colors. The second line contains n integers ca_ 1, ca_ 2, . . . , ca_ n ( 1 \u2264 ca_ i \u2264 n ) \u2014 the color of each position of the first tape. It is guaranteed that ca is a permutation. The third line contains n integers cb_ 1, cb_ 2, . . . , cb_ n ( 1 \u2264 cb_ i \u2264 n ) \u2014 the color of each position of the second tape. It is guaranteed that cb is a permutation. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the highest possible beauty.",
    "note": "An optimal solution for the first test case is shown in the following figure: The beauty is | 4- 3 | + | 3- 5 | + | 2- 4 | + | 5- 2 | + | 1- 6 | + | 6- 1 | = 18 . An optimal solution for the second test case is shown in the following figure: The beauty is | 2- 2 | + | 1- 6 | + | 3- 3 | + | 6- 1 | + | 4- 4 | + | 5- 5 | = 10 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1677C"
  },
  {
    "title": "Longest Strike",
    "url": "https://codeforces.com/problemset/problem/1676/F",
    "history": "Given an array a of length n and an integer k , you are tasked to find any two numbers l and r ( l \u2264 r ) such that: For each x ( l \u2264 x \u2264 r) , x appears in a at least k times ( i. e. k or more array elements are equal to x ) . The value r- l is maximized. If no numbers satisfy the conditions, output - 1. For example, if a= [ 11, 11, 12, 13, 13, 14, 14] and k= 2 , then: for l= 12 , r= 14 the first condition fails because 12 does not appear at least k= 2 times. for l= 13 , r= 14 the first condition holds, because 13 occurs at least k= 2 times in a and 14 occurs at least k= 2 times in a . for l= 11 , r= 11 the first condition holds, because 11 occurs at least k= 2 times in a . A pair of l and r for which the first condition holds and r- l is maximal is l = 13 , r = 14 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 n ) \u2014 the length of the array a and the minimum amount of times each number in the range [ l, r] should appear respectively. Then a single line follows, containing n integers describing the array a ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output 2 numbers, l and r that satisfy the conditions, or \" - 1\" if no numbers satisfy the conditions. If multiple answers exist, you can output any.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1676F"
  },
  {
    "title": "Eating Queries",
    "url": "https://codeforces.com/problemset/problem/1676/E",
    "history": "Timur has n candies. The i - th candy has a quantity of sugar equal to a_ i . So, by eating the i - th candy, Timur consumes a quantity of sugar equal to a_ i . Timur will ask you q queries regarding his candies. For the j - th query you have to answer what is the minimum number of candies he needs to eat in order to reach a quantity of sugar greater than or equal to x_ j or print - 1 if it' s not possible to obtain such a quantity. In other words, you should print the minimum possible k such that after eating k candies, Timur consumes a quantity of sugar of at least x_ j or say that no possible k exists. Note that he can' t eat the same candy twice and queries are independent of each other ( Timur can use the same candy in different queries) .",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line contains 2 integers n and q ( 1 \u2264 n, q \u2264 1. 5\u00b710^ 5 ) \u2014 the number of candies Timur has and the number of queries you have to print an answer for respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the quantity of sugar in each of the candies respectively. Then q lines follow. Each of the next q lines contains a single integer x_ j ( 1 \u2264 x_ j \u2264 2 \u00b7 10^ 9 ) \u2013 the quantity Timur wants to reach for the given query. It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 1. 5 \u00b7 10^ 5 .",
    "output": "For each test case output q lines. For the j - th line output the number of candies Timur needs to eat in order to reach a quantity of sugar greater than or equal to x_ j or print - 1 if it' s not possible to obtain such a quantity.",
    "note": "For the first test case: For the first query, Timur can eat any candy, and he will reach the desired quantity. For the second query, Timur can reach a quantity of at least 10 by eating the 7 - th and the 8 - th candies, thus consuming a quantity of sugar equal to 14 . For the third query, there is no possible answer. For the fourth query, Timur can reach a quantity of at least 14 by eating the 7 - th and the 8 - th candies, thus consuming a quantity of sugar equal to 14 . For the second test case: For the only query of the second test case, we can choose the third candy from which Timur receives exactly 3 sugar. It' s also possible to obtain the same answer by choosing the fourth candy.",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1676E"
  },
  {
    "title": "X-Sum",
    "url": "https://codeforces.com/problemset/problem/1676/D",
    "history": "Timur' s grandfather gifted him a chessboard to practice his chess skills. This chessboard is a grid a with n rows and m columns with each cell having a non- negative integer written on it. Timur' s challenge is to place a bishop on the board such that the sum of all cells attacked by the bishop is maximal. The bishop attacks in all directions diagonally, and there is no limit to the distance which the bishop can attack. Note that the cell on which the bishop is placed is also considered attacked. Help him find the maximal sum he can get.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integers n and m ( 1 \u2264 n \u2264 200 , 1 \u2264 m \u2264 200 ) . The following n lines contain m integers each, the j - th element of the i - th line a_ ij is the number written in the j - th cell of the i - th row ( 0\u2264 a_ ij\u2264 10^ 6) It is guaranteed that the sum of n\u00b7 m over all test cases does not exceed 4\u00b710^ 4 .",
    "output": "For each test case output a single integer, the maximum sum over all possible placements of the bishop.",
    "note": "For the first test case here the best sum is achieved by the bishop being in this position:",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1676D"
  },
  {
    "title": "Most Similar Words",
    "url": "https://codeforces.com/problemset/problem/1676/C",
    "history": "You are given n words of equal length m , consisting of lowercase Latin alphabet letters. The i - th word is denoted s_ i . In one move you can choose any position in any single word and change the letter at that position to the previous or next letter in alphabetical order. For example: you can change ' e' to ' d' or to ' f' ; ' a' can only be changed to ' b' ; ' z' can only be changed to ' y' . The difference between two words is the minimum number of moves required to make them equal. For example, the difference between \" best\" and \" cost\" is 1 + 10 + 0 + 0 = 11 . Find the minimum difference of s_ i and s_ j such that ( i < j) . In other words, find the minimum difference over all possible pairs of the n words.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains 2 integers n and m ( 2 \u2264 n \u2264 50 , 1 \u2264 m \u2264 8 ) \u2014 the number of strings and their length respectively. Then follows n lines, the i - th of which containing a single string s_ i of length m , consisting of lowercase Latin letters.",
    "output": "For each test case, print a single integer \u2014 the minimum difference over all possible pairs of the given strings.",
    "note": "For the second test case, one can show that the best pair is ( \" abb\" , \" bef\" ) , which has difference equal to 8 , which can be obtained in the following way: change the first character of the first string to ' b' in one move, change the second character of the second string to ' b' in 3 moves and change the third character of the second string to ' b' in 4 moves, thus making in total 1 + 3 + 4 = 8 moves. For the third test case, there is only one possible pair and it can be shown that the minimum amount of moves necessary to make the strings equal is 35 . For the fourth test case, there is a pair of strings which is already equal, so the answer is 0 .",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "implementation",
      "math",
      "strings"
    ],
    "id": "1676C"
  },
  {
    "title": "Equal Candies",
    "url": "https://codeforces.com/problemset/problem/1676/B",
    "history": "There are n boxes with different quantities of candies in each of them. The i - th box has a_ i candies inside. You also have n friends that you want to give the candies to, so you decided to give each friend a box of candies. But, you don' t want any friends to get upset so you decided to eat some ( possibly none) candies from each box so that all boxes have the same quantity of candies in them. Note that you may eat a different number of candies from different boxes and you cannot add candies to any of the boxes. What' s the minimum total number of candies you have to eat to satisfy the requirements?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of boxes you have. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) \u2014 the quantity of candies in each box.",
    "output": "For each test case, print a single integer denoting the minimum number of candies you have to eat to satisfy the requirements.",
    "note": "For the first test case, you can eat 1 candy from the second box, 2 candies from the third box, 3 candies from the fourth box and 4 candies from the fifth box. Now the boxes have [ 1, 1, 1, 1, 1] candies in them and you ate 0 + 1 + 2 + 3 + 4 = 10 candies in total so the answer is 10 . For the second test case, the best answer is obtained by making all boxes contain 5 candies in them, thus eating 995 + 995 + 0 + 995 + 995 + 995 = 4975 candies in total.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1676B"
  },
  {
    "title": "Vlad and Unfinished Business",
    "url": "https://codeforces.com/problemset/problem/1675/F",
    "history": "Vlad and Nastya live in a city consisting of n houses and n- 1 road. From each house, you can get to the other by moving only along the roads. That is, the city is a tree. Vlad lives in a house with index x , and Nastya lives in a house with index y . Vlad decided to visit Nastya. However, he remembered that he had postponed for later k things that he has to do before coming to Nastya. To do the i - th thing, he needs to come to the a_ i - th house, things can be done in any order. In 1 minute, he can walk from one house to another if they are connected by a road. Vlad does not really like walking, so he is interested what is the minimum number of minutes he has to spend on the road to do all things and then come to Nastya. Houses a_ 1, a_ 2, . . . , a_ k he can visit in any order. He can visit any house multiple times ( if he wants) .",
    "input": "The first line of input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input test cases. There is an empty line before each test case. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the number of houses and things, respectively. The second line of each test case contains two integers x and y ( 1 \u2264 x, y \u2264 n ) \u2014 indices of the houses where Vlad and Nastya live, respectively. The third line of each test case contains k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) \u2014 indices of houses Vlad need to come to do things. The following n- 1 lines contain description of city, each line contains two integers v_ j and u_ j ( 1 \u2264 u_ j, v_ j \u2264 n ) \u2014 indices of houses connected by road j . It is guaranteed that the sum of n for all cases does not exceed 2\u00b710^ 5 .",
    "output": "Output t lines, each of which contains the answer to the corresponding test case of input. As an answer output single integer \u2014 the minimum number of minutes Vlad needs on the road to do all the things and come to Nastya.",
    "note": "Tree and best path for the first test case: 1 \u2192 2 \u2192 1 \u2192 3 Tree and best path for the second test case: 3 \u2192 1 \u2192 3 \u2192 5 \u2192 2 \u2192 5 \u2192 6 \u2192 5 Tree and best path for the third test case: 3 \u2192 5 \u2192 2",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1675F"
  },
  {
    "title": "Replace With the Previous, Minimize",
    "url": "https://codeforces.com/problemset/problem/1675/E",
    "history": "You are given a string s of lowercase Latin letters. The following operation can be used: select one character ( from ' a' to ' z' ) that occurs at least once in the string. And replace all such characters in the string with the previous one in alphabetical order on the loop. For example, replace all ' c' with ' b' or replace all ' a' with ' z' . And you are given the integer k \u2014 the maximum number of operations that can be performed. Find the minimum lexicographically possible string that can be obtained by performing no more than k operations. The string a= a_ 1a_ 2 . . . a_ n is lexicographically smaller than the string b = b_ 1b_ 2 . . . b_ n if there exists an index k ( 1 \u2264 k \u2264 n ) such that a_ 1= b_ 1 , a_ 2= b_ 2 , . . . , a_ k- 1= b_ k- 1 , but a_ k < b_ k .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. This is followed by descriptions of the test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) \u2014 the size of the string s and the maximum number of operations that can be performed on the string s . The second line of each test case contains a string s of length n consisting of lowercase Latin letters. It is guaranteed that the sum n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the lexicographically minimal string that can be obtained from the string s by performing no more than k operations.",
    "note": "",
    "topics": [
      "dsu",
      "greedy",
      "strings"
    ],
    "id": "1675E"
  },
  {
    "title": "Make It Increasing",
    "url": "https://codeforces.com/problemset/problem/1675/B",
    "history": "Given n integers a_ 1, a_ 2, . . . , a_ n . You can perform the following operation on them: select any element a_ i ( 1 \u2264 i \u2264 n ) and divide it by 2 ( round down) . In other words, you can replace any selected element a_ i with the value \u230aa_ i/ 2\u230b ( where \u230a x \u230b is \u2013 round down the real number x ) . Output the minimum number of operations that must be done for a sequence of integers to become strictly increasing ( that is, for the condition a_ 1 a_ 2 . . . a_ n to be satisfied) . Or determine that it is impossible to obtain such a sequence. Note that elements cannot be swapped. The only possible operation is described above. For example, let n = 3 and a sequence of numbers [ 3, 6, 5] be given. Then it is enough to perform two operations on it: Write the number \u230a6/ 2\u230b = 3 instead of the number a_ 2= 6 and get the sequence [ 3, 3, 5] ; Then replace a_ 1= 3 with \u230a3/ 2\u230b = 1 and get the sequence [ 1, 3, 5] . The resulting sequence is strictly increasing because 1 3 5 .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The descriptions of the test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 30 ) . The second line of each test case contains exactly n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2 \u00b7 10^ 9 ) .",
    "output": "For each test case, print a single number on a separate line \u2014 the minimum number of operations to perform on the sequence to make it strictly increasing. If a strictly increasing sequence cannot be obtained, print \" - 1\" .",
    "note": "The first test case is analyzed in the statement. In the second test case, it is impossible to obtain a strictly increasing sequence. In the third test case, the sequence is already strictly increasing.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1675B"
  },
  {
    "title": "Food for Animals",
    "url": "https://codeforces.com/problemset/problem/1675/A",
    "history": "In the pet store on sale there are: a packs of dog food; b packs of cat food; c packs of universal food ( such food is suitable for both dogs and cats) . Polycarp has x dogs and y cats. Is it possible that he will be able to buy food for all his animals in the store? Each of his dogs and each of his cats should receive one pack of suitable food for it.",
    "input": "The first line of input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then t lines are given, each containing a description of one test case. Each description consists of five integers a, b, c, x and y ( 0 \u2264 a, b, c, x, y \u2264 10^ 8 ) .",
    "output": "For each test case in a separate line, output: YES, if suitable food can be bought for each of x dogs and for each of y cats; NO else. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as a positive response) .",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1675A"
  },
  {
    "title": "Desktop Rearrangement",
    "url": "https://codeforces.com/problemset/problem/1674/F",
    "history": "Your friend Ivan asked you to help him rearrange his desktop. The desktop can be represented as a rectangle matrix of size n \u00d7 m consisting of characters ' . ' ( empty cell of the desktop) and ' * ' ( an icon) . The desktop is called good if all its icons are occupying some prefix of full columns and, possibly, the prefix of the next column ( and there are no icons outside this figure) . In other words, some amount of first columns will be filled with icons and, possibly, some amount of first cells of the next ( after the last full column) column will be also filled with icons ( and all the icons on the desktop belong to this figure) . This is pretty much the same as the real life icons arrangement. In one move, you can take one icon and move it to any empty cell in the desktop. Ivan loves to add some icons to his desktop and remove them from it, so he is asking you to answer q queries: what is the minimum number of moves required to make the desktop good after adding/ removing one icon? Note that queries are permanent and change the state of the desktop.",
    "input": "The first line of the input contains three integers n , m and q ( 1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rows in the desktop, the number of columns in the desktop and the number of queries, respectively. The next n lines contain the description of the desktop. The i - th of them contains m characters ' . ' and ' * ' \u2014 the description of the i - th row of the desktop. The next q lines describe queries. The i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n; 1 \u2264 y_ i \u2264 m ) \u2014 the position of the cell which changes its state ( if this cell contained the icon before, then this icon is removed, otherwise an icon appears in this cell) .",
    "output": "Print q integers. The i - th of them should be the minimum number of moves required to make the desktop good after applying the first i queries.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1674F"
  },
  {
    "title": "Breaking the Wall",
    "url": "https://codeforces.com/problemset/problem/1674/E",
    "history": "Monocarp plays \" Rage of Empires II: Definitive Edition\" \u2014 a strategic computer game. Right now he' s planning to attack his opponent in the game, but Monocarp' s forces cannot enter the opponent' s territory since the opponent has built a wall. The wall consists of n sections, aligned in a row. The i - th section initially has durability a_ i . If durability of some section becomes 0 or less, this section is considered broken. To attack the opponent, Monocarp needs to break at least two sections of the wall ( any two sections: possibly adjacent, possibly not) . To do this, he plans to use an onager \u2014 a special siege weapon. The onager can be used to shoot any section of the wall; the shot deals 2 damage to the target section and 1 damage to adjacent sections. In other words, if the onager shoots at the section x , then the durability of the section x decreases by 2 , and the durability of the sections x - 1 and x + 1 ( if they exist) decreases by 1 each. Monocarp can shoot at any sections any number of times, he can even shoot at broken sections. Monocarp wants to calculate the minimum number of onager shots needed to break at least two sections. Help him!",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of sections. The second line contains the sequence of integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the initial durability of the i - th section.",
    "output": "Print one integer \u2014 the minimum number of onager shots needed to break at least two sections of the wall.",
    "note": "In the first example, it is possible to break the 2 - nd and the 4 - th section in 10 shots, for example, by shooting the third section 10 times. After that, the durabilities become [ 20, 0, 10, 0, 20] . Another way of doing it is firing 5 shots at the 2 - nd section, and another 5 shots at the 4 - th section. After that, the durabilities become [ 15, 0, 20, 0, 15] . In the second example, it is enough to shoot the 2 - nd section once. Then the 1 - st and the 3 - rd section will be broken. In the third example, it is enough to shoot the 2 - nd section twice ( then the durabilities become [ 5, 2, 4, 8, 5, 8] ) , and then shoot the 3 - rd section twice ( then the durabilities become [ 5, 0, 0, 6, 5, 8] ) . So, four shots are enough to break the 2 - nd and the 3 - rd section.",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1674E"
  },
  {
    "title": "Anti-Theft Road Planning",
    "url": "https://codeforces.com/problemset/problem/1673/F",
    "history": "This is an interactive problem. A city has n^ 2 buildings divided into a grid of n rows and n columns. You need to build a road of some length D( A, B) of your choice between each pair of adjacent by side buildings A and B . Due to budget limitations and legal restrictions, the length of each road must be a positive integer and the total length of all roads should not exceed 48 000 . There is a thief in the city who will start from the topmost, leftmost building ( in the first row and the first column) and roam around the city, occasionally stealing artifacts from some of the buildings. He can move from one building to another adjacent building by travelling through the road which connects them. You are unable to track down what buildings he visits and what path he follows to reach them. But there is one tracking mechanism in the city. The tracker is capable of storing a single integer x which is initially 0 . Each time the thief travels from a building A to another adjacent building B through a road of length D( A, B) , the tracker changes x to x\u2295 D( A, B) . Each time the thief steals from a building, the tracker reports the value x stored in it and resets it back to 0 . It is known beforehand that the thief will steal in exactly k buildings but you will know the values returned by the tracker only after the thefts actually happen. Your task is to choose the lengths of roads in such a way that no matter what strategy or routes the thief follows, you will be able to exactly tell the location of all the buildings where the thefts occurred from the values returned by the tracker. InteractionFirst read a single line containing two integers n ( 2\u2264 n\u2264 32) and k ( 1\u2264 k\u2264 1024) denoting the number of rows and number of thefts respectively. Let' s denote the j - th building in the i - th row by B_ i, j . Then print n lines each containing n- 1 integers. The j - th integer of the i - th line must be the value of D( B_ i, j, B_ i, j+ 1) . Then print n- 1 lines each containing n integers. The j - th integer of the i - th line must be the value of D( B_ i, j, B_ i+ 1, j) . Remember that the total length of the roads must not exceed 48 000 . Then answer k queries. First read the value x returned by the tracker. Then print two integers denoting the row number and column number of the building where the theft occurred. After that you will be able to answer the next query ( if such exists) . After printing the answers do not forget to output end of line and flush the output buffer. Otherwise you will get the verdict Idleness limit exceeded. To flush the buffer, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; Read documentation for other languages. HacksYou cannot make hacks in this problem.",
    "input": "",
    "output": "",
    "note": "For the sample test, n= 2 and k= 4 . You choose to build the roads of the following lengths: The thief follows the following strategy: Start at B_ 1, 1 . Move Right to B_ 1, 2 . Move Down to B_ 2, 2 . Move Left to B_ 2, 1 . Move Up to B_ 1, 1 . Move Right to B_ 1, 2 . Steal from B_ 1, 2 . Move Left to B_ 1, 1 . Steal from B_ 1, 1 . Move Down to B_ 2, 1 . Move Right to B_ 2, 2 . Move Up to B_ 1, 2 . Steal from B_ 1, 2 . Move Left to B_ 1, 1 . Move Down to B_ 2, 1 . Steal from B_ 2, 1 . The tracker responds in the following way: Initialize x= 0 . Change x to x\u2295 1= 0\u22951= 1 . Change x to x\u2295 4= 1\u22954= 5 . Change x to x\u2295 8= 5\u22958= 13 . Change x to x\u2295 2= 13\u22952= 15 . Change x to x\u2295 1= 15\u22951= 14 . Return x= 14 and re- initialize x= 0 . Change x to x\u2295 1= 0\u22951= 1 . Return x= 1 and re- initialize x= 0 . Change x to x\u2295 2= 0\u22952= 2 . Change x to x\u2295 8= 2\u22958= 10 . Change x to x\u2295 4= 10\u22954= 14 . Return x= 14 and re- initialize x= 0 . Change x to x\u2295 1= 0\u22951= 1 . Change x to x\u2295 2= 1\u22952= 3 . Return x= 3 and re- initialize x= 0 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "divide and conquer",
      "greedy",
      "interactive",
      "math"
    ],
    "id": "1673F"
  },
  {
    "title": "A Perfectly Balanced String?",
    "url": "https://codeforces.com/problemset/problem/1673/B",
    "history": "Let' s call a string s perfectly balanced if for all possible triplets ( t, u, v) such that t is a non- empty substring of s and u and v are characters present in s , the difference between the frequencies of u and v in t is not more than 1 . For example, the strings \" aba\" and \" abc\" are perfectly balanced but \" abb\" is not because for the triplet ( \" bb\" , ' a' , ' b' ) , the condition is not satisfied. You are given a string s consisting of lowercase English letters only. Your task is to determine whether s is perfectly balanced or not. A string b is called a substring of another string a if b can be obtained by deleting some characters ( possibly 0 ) from the start and some characters ( possibly 0 ) from the end of a .",
    "input": "The first line of input contains a single integer t ( 1\u2264 t\u2264 2\u00b7 10^ 4 ) denoting the number of testcases. Each of the next t lines contain a single string s ( 1\u2264 | s| \u2264 2\u00b7 10^ 5 ) , consisting of lowercase English letters. It is guaranteed that the sum of | s| over all testcases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" if s is a perfectly balanced string, and \" NO\" otherwise. You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as positive answer) .",
    "note": "Let f_ t( c) represent the frequency of character c in string t . For the first testcase we have t f_ t( a) f_ t( b) a 1 0 ab 1 1 aba 2 1 b 0 1 ba 1 1 It can be seen that for any substring t of s , the difference between f_ t( a) and f_ t( b) is not more than 1 . Hence the string s is perfectly balanced. For the second testcase we have t f_ t( a) f_ t( b) a 1 0 ab 1 1 abb 1 2 b 0 1 bb 0 2 It can be seen that for the substring t= bb , the difference between f_ t( a) and f_ t( b) is 2 which is greater than 1 . Hence the string s is not perfectly balanced. For the third testcase we have t f_ t( a) f_ t( b) f_ t( c) a 1 0 0 ab 1 1 0 abc 1 1 1 b 0 1 0 bc 0 1 1 c 0 0 1 It can be seen that for any substring t of s and any two characters u, v\u2208{ a, b, c} , the difference between f_ t( u) and f_ t( v) is not more than 1 . Hence the string s is perfectly balanced.",
    "topics": [
      "brute force",
      "greedy",
      "strings"
    ],
    "id": "1673B"
  },
  {
    "title": "Subtle Substring Subtraction",
    "url": "https://codeforces.com/problemset/problem/1673/A",
    "history": "Alice and Bob are playing a game with strings. There will be t rounds in the game. In each round, there will be a string s consisting of lowercase English letters. Alice moves first and both the players take alternate turns. Alice is allowed to remove any substring of even length ( possibly empty) and Bob is allowed to remove any substring of odd length from s . More formally, if there was a string s = s_ 1s_ 2 . . . s_ k the player can choose a substring s_ ls_ l+ 1. . . s_ r- 1s_ r with length of corresponding parity and remove it. After that the string will become s = s_ 1 . . . s_ l- 1s_ r+ 1. . . s_ k . After the string becomes empty, the round ends and each player calculates his/ her score for this round. The score of a player is the sum of values of all characters removed by him/ her. The value of is 1 , the value of is 2 , the value of is 3 , . . . , and the value of is 26 . The player with higher score wins the round. For each round, determine the winner and the difference between winner' s and loser' s scores. Assume that both players play optimally to maximize their score. It can be proved that a draw is impossible.",
    "input": "The first line of input contains a single integer t ( 1\u2264 t\u2264 5\u00b7 10^ 4 ) denoting the number of rounds. Each of the next t lines contain a single string s ( 1\u2264 | s| \u2264 2\u00b7 10^ 5 ) consisting of lowercase English letters, denoting the string used for the round. Here | s| denotes the length of the string s . It is guaranteed that the sum of | s| over all rounds does not exceed 2\u00b7 10^ 5 .",
    "output": "For each round, print a single line containing a string and an integer. If Alice wins the round, the string must be \" Alice\" . If Bob wins the round, the string must be \" Bob\" . The integer must be the difference between their scores assuming both players play optimally.",
    "note": "For the first round, . Alice' s total score is 1+ 2= 3 . Bob' s total score is 1 . For the second round, . Alice' s total score is 2+ 3= 5 . Bob' s total score is 1 . For the third round, . Alice' s total score is 3+ 2= 5 . Bob' s total score is 1 . For the fourth round, . Alice' s total score is 0 . Bob' s total score is 14 . For the fifth round, . Alice' s total score is 3+ 15+ 4+ 5+ 6+ 15+ 18+ 3+ 5+ 19= 93 . Bob' s total score is 0 .",
    "topics": [
      "games",
      "greedy",
      "strings"
    ],
    "id": "1673A"
  },
  {
    "title": "PermutationForces",
    "url": "https://codeforces.com/problemset/problem/1672/I",
    "history": "You have a permutation p of integers from 1 to n . You have a strength of s and will perform the following operation some times: Choose an index i such that 1 \u2264 i \u2264 | p| and | i- p_ i| \u2264 s . For all j such that 1 \u2264 j \u2264 | p| and p_ i< p_ j , update p_ j to p_ j- 1 . Delete the i - th element from p . Formally, update p to [ p_ 1, . . . , p_ i- 1, p_ i+ 1, . . . , p_ n] . It can be shown that no matter what i you have chosen, p will be a permutation of integers from 1 to | p| after all operations. You want to be able to transform p into the empty permutation. Find the minimum strength s that will allow you to do so.",
    "input": "The first line of input contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the permutation p . The second line of input conatains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the elements of the permutation p . It is guaranteed that all elements in p are distinct.",
    "output": "Print the minimum strength s required.",
    "note": "In the first test case, the minimum s required is 1 . Here is how we can transform p into the empty permutation with s= 1 : In the first move, you can only choose i= 2 as choosing any other value of i will result in | i- p_ i| \u2264 s being false. With i= 2 , p will be changed to [ 2, 1] . In the second move, you choose i= 1 , then p will be changed to [ 1] . In the third move, you choose i= 1 , then p will be changed to [ ] . It can be shown that with s= 0 , it is impossible to transform p into the empty permutation.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1672I"
  },
  {
    "title": "Zigu Zagu",
    "url": "https://codeforces.com/problemset/problem/1672/H",
    "history": "You have a binary string a of length n consisting only of digits 0 and 1 . You are given q queries. In the i - th query, you are given two indices l and r such that 1 \u2264 l \u2264 r \u2264 n . Let s= a[ l, r] . You are allowed to do the following operation on s : Choose two indices x and y such that 1 \u2264 x \u2264 y \u2264 | s| . Let t be the substring t = s[ x, y] . Then for all 1 \u2264 i \u2264 | t| - 1 , the condition t_ i = \u0338 t_ i+ 1 has to hold. Note that x = y is always a valid substring. Delete the substring s[ x, y] from s . For each of the q queries, find the minimum number of operations needed to make s an empty string. Note that for a string s , s[ l, r] denotes the subsegment s_ l, s_ l+ 1, . . . , s_ r .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10 ^ 5 ) \u2014 the length of the binary string a and the number of queries respectively. The second line contains a binary string a of length n ( a_ i \u2208{ 0, 1} ) . Each of the next q lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 representing the substring of each query.",
    "output": "Print q lines, the i - th line representing the minimum number of operations needed for the i - th query.",
    "note": "In the first test case, The substring is , so we can do one operation to make the substring empty. The substring is , so we can do one operation on s[ 2, 4] to make , then use two more operations to make the substring empty. The substring is , so we can do one operation on s[ 1, 2] to make , then use one more operation to make the substring empty.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1672H"
  },
  {
    "title": "Array Shuffling",
    "url": "https://codeforces.com/problemset/problem/1672/F1",
    "history": "oolimry has an array a of length n which he really likes. Today, you have changed his array to b , a permutation of a , to make him sad. Because oolimry is only a duck, he can only perform the following operation to restore his array: Choose two integers i, j such that 1 \u2264 i, j \u2264 n . Swap b_ i and b_ j . The sadness of the array b is the minimum number of operations needed to transform b into a . Given the array a , find any array b which is a permutation of a that has the maximum sadness over all permutations of the array a .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print n integers b_ 1, b_ 2, . . . , b_ n \u2014 describing the array b . If there are multiple answers, you may print any.",
    "note": "In the first test case, the array [ 1, 2] has sadness 1 . We can transform [ 1, 2] into [ 2, 1] using one operation with ( i, j) = ( 1, 2) . In the second test case, the array [ 3, 3, 2, 1] has sadness 2 . We can transform [ 3, 3, 2, 1] into [ 1, 2, 3, 3] with two operations with ( i, j) = ( 1, 4) and ( i, j) = ( 2, 3) respectively.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "1672F1"
  },
  {
    "title": "notepad.exe",
    "url": "https://codeforces.com/problemset/problem/1672/E",
    "history": "This is an interactive problem. There are n words in a text editor. The i - th word has length l_ i ( 1 \u2264 l_ i \u2264 2000 ) . The array l is hidden and only known by the grader. The text editor displays words in lines, splitting each two words in a line with at least one space. Note that a line does not have to end with a space. Let the height of the text editor refer to the number of lines used. For the given width, the text editor will display words in such a way that the height is minimized. More formally, suppose that the text editor has width w . Let a be an array of length k+ 1 where 1= a_ 1 < a_ 2 < . . . < a_ k+ 1= n+ 1 . a is a valid array if for all 1 \u2264 i \u2264 k , l_ a_ i+ 1+ l_ a_ i+ 1+ 1+ . . . + 1+ l_ a_ i+ 1- 1\u2264 w . Then the height of the text editor is the minimum k over all valid arrays. Note that if w < max( l_ i) , the text editor cannot display all the words properly and will crash, and the height of the text editor will be 0 instead. You can ask n+ 30 queries. In one query, you provide a width w . Then, the grader will return the height h_ w of the text editor when its width is w . Find the minimum area of the text editor, which is the minimum value of w \u00b7 h_ w over all w for which h_ w = \u0338 0 . The lengths are fixed in advance. In other words, the interactor is not adaptive. InteractionBegin the interaction by reading n . To make a query, print \" ? w \" ( without quotes, 1 \u2264 w \u2264 10^ 9 ) . Then you should read our response from standard input, that is, h_ w . If your program has made an invalid query or has run out of tries, the interactor will terminate immediately and your program will get a verdict Wrong answer. To give the final answer, print \" ! area \" ( without the quotes) . Note that giving this answer is not counted towards the limit of n+ 30 queries. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. HacksThe first line of input must contain a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of words in the text editor. The second line of input must contain exactly n space- separated integers l_ 1, l_ 2, . . . , l_ n ( 1 \u2264 l_ i \u2264 2000 ) .",
    "input": "The first and only line of input contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of words on the text editor. It is guaranteed that the hidden lengths l_ i satisfy 1 \u2264 l_ i \u2264 2000 .",
    "output": "",
    "note": "In the first test case, the words are { , , , , , } , so l= { 5, 2, 7, 3, 5, 6} . If w= 1 , then the text editor is not able to display all words properly and will crash. The height of the text editor is h_ 1= 0 , so the grader will return 0 . If w= 9 , then a possible way that the words will be displayed on the text editor is: The height of the text editor is h_ 9= 4 , so the grader will return 4 . If w= 16 , then a possible way that the words will be displayed on the text editor is: The height of the text editor is h_ 16= 2 , so the grader will return 2 . We have somehow figured out that the minimum area of the text editor is 32 , so we answer it.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "interactive"
    ],
    "id": "1672E"
  },
  {
    "title": "Cyclic Rotation",
    "url": "https://codeforces.com/problemset/problem/1672/D",
    "history": "There is an array a of length n . You may perform the following operation any number of times: Choose two indices l and r where 1 \u2264 l < r \u2264 n and a_ l = a_ r . Then, set a[ l . . . r] = [ a_ l+ 1, a_ l+ 2, . . . , a_ r, a_ l] . You are also given another array b of length n which is a permutation of a . Determine whether it is possible to transform array a into an array b using the above operation some number of times.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10 ^ 5 ) \u2014 the length of array a and b . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array a . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 elements of the array b . It is guaranteed that b is a permutation of a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10 ^ 5",
    "output": "For each test case, print \" YES\" ( without quotes) if it is possible to transform array a to b , and \" NO\" ( without quotes) otherwise. You can output \" YES\" and \" NO\" in any case ( for example, strings \" yEs\" , \" yes\" and \" Yes\" will be recognized as a positive response) .",
    "note": "In the first test case, we can choose l= 2 and r= 5 to form [ 1, 3, 3, 2, 2] . In the second test case, we can choose l= 2 and r= 4 to form [ 1, 4, 2, 2, 1] . Then, we can choose l= 1 and r= 5 to form [ 4, 2, 2, 1, 1] . In the third test case, it can be proven that it is not possible to transform array a to b using the operation.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1672D"
  },
  {
    "title": "Unequal Array",
    "url": "https://codeforces.com/problemset/problem/1672/C",
    "history": "You are given an array a of length n . We define the equality of the array as the number of indices 1 \u2264 i \u2264 n - 1 such that a_ i = a_ i + 1 . We are allowed to do the following operation: Select two integers i and x such that 1 \u2264 i \u2264 n - 1 and 1 \u2264 x \u2264 10^ 9 . Then, set a_ i and a_ i + 1 to be equal to x . Find the minimum number of operations needed such that the equality of the array is less than or equal to 1 .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10 ^ 5 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10 ^ 5",
    "output": "For each test case, print the minimum number of operations needed.",
    "note": "In the first test case, we can select i= 2 and x= 2 to form [ 1, 2, 2, 1, 1] . Then, we can select i= 3 and x= 3 to form [ 1, 2, 3, 3, 1] . In the second test case, we can select i= 3 and x= 100 to form [ 2, 1, 100, 100, 2] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1672C"
  },
  {
    "title": "Insert a Progression",
    "url": "https://codeforces.com/problemset/problem/1671/D",
    "history": "You are given a sequence of n integers a_ 1, a_ 2, . . . , a_ n . You are also given x integers 1, 2, . . . , x . You are asked to insert each of the extra integers into the sequence a . Each integer can be inserted at the beginning of the sequence, at the end of the sequence, or between any elements of the sequence. The score of the resulting sequence a' is the sum of absolute differences of adjacent elements in it ( \u2211_ i= 1^ n+ x- 1 | a' _ i - a' _ i+ 1| ) . What is the smallest possible score of the resulting sequence a' ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains two integers n and x ( 1 \u2264 n, x \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the sequence and the number of extra integers. The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) . The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the smallest sum of absolute differences of adjacent elements of the sequence after you insert the extra integers into it.",
    "note": "Here are the sequences with the smallest scores for the example. The underlined elements are the extra integers. Note that there exist other sequences with this smallest score. 1, 2, 3, 4, 5, 10 7, 7, 6, 4, 2, 2, 1, 3, 5, 8, 10 6, 1, 1, 2, 5, 7, 3, 3, 9, 10, 10, 1 1, 3, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1671D"
  },
  {
    "title": "Dolce Vita",
    "url": "https://codeforces.com/problemset/problem/1671/C",
    "history": "Turbulent times are coming, so you decided to buy sugar in advance. There are n shops around that sell sugar: the i - th shop sells one pack of sugar for a_ i coins, but only one pack to one customer each day. So in order to buy several packs, you need to visit several shops. Another problem is that prices are increasing each day: during the first day the cost is a_ i , during the second day cost is a_ i + 1 , during the third day \u2014 a_ i + 2 and so on for each shop i . On the contrary, your everyday budget is only x coins. In other words, each day you go and buy as many packs as possible with total cost not exceeding x . Note that if you don' t spend some amount of coins during a day, you can' t use these coins during the next days. Eventually, the cost for each pack will exceed x , and you won' t be able to buy even a single pack. So, how many packs will you be able to buy till that moment in total?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Next t cases follow. The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of shops and your everyday budget. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial cost of one pack in each shop. It' s guaranteed that the total sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the total number of packs you will be able to buy until prices exceed your everyday budget.",
    "note": "In the first test case, Day 1: prices are [ 2, 1, 2] . You can buy all 3 packs, since 2 + 1 + 2 \u2264 7 . Day 2: prices are [ 3, 2, 3] . You can' t buy all 3 packs, since 3 + 2 + 3 > 7 , so you buy only 2 packs. Day 3: prices are [ 4, 3, 4] . You can buy 2 packs with prices 4 and 3 . Day 4: prices are [ 5, 4, 5] . You can' t buy 2 packs anymore, so you buy only 1 pack. Day 5: prices are [ 6, 5, 6] . You can buy 1 pack. Day 6: prices are [ 7, 6, 7] . You can buy 1 pack. Day 7: prices are [ 8, 7, 8] . You still can buy 1 pack of cost 7 . Day 8: prices are [ 9, 8, 9] . Prices are too high, so you can' t buy anything. In total, you bought 3 + 2 + 2 + 1 + 1 + 1 + 1 = 11 packs. In the second test case, prices are too high even at the first day, so you can' t buy anything. In the third test case, you can buy only one pack at day one. In the fourth test case, you can buy 2 packs first 500 days. At day 501 prices are [ 501, 501] , so you can buy only 1 pack the next 500 days. At day 1001 prices are [ 1001, 1001] so can' t buy anymore. In total, you bought 500 \u00b7 2 + 500 \u00b7 1 = 1500 packs.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1671C"
  },
  {
    "title": "Very Suspicious",
    "url": "https://codeforces.com/problemset/problem/1670/D",
    "history": "Sehr Sus is an infinite hexagonal grid as pictured below, controlled by MennaFadali, ZerooCool and Hosssam. They love equilateral triangles and want to create n equilateral triangles on the grid by adding some straight lines. The triangles must all be empty from the inside ( in other words, no straight line or hexagon edge should pass through any of the triangles) . You are allowed to add straight lines parallel to the edges of the hexagons. Given n , what is the minimum number of lines you need to add to create at least n equilateral triangles as described? Adding two red lines results in two new yellow equilateral triangles.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. Each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 9 ) \u2014 the required number of equilateral triangles.",
    "output": "For each test case, print the minimum number of lines needed to have n or more equilateral triangles.",
    "note": "In the first and second test cases only 2 lines are needed. After adding the first line, no equilateral triangles will be created no matter where it is added. But after adding the second line, two more triangles will be created at once. In the third test case, the minimum needed is 3 lines as shown below.",
    "topics": [
      "binary search",
      "brute force",
      "geometry",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1670D"
  },
  {
    "title": "Prof. Slim",
    "url": "https://codeforces.com/problemset/problem/1670/A",
    "history": "One day Prof. Slim decided to leave the kingdom of the GUC to join the kingdom of the GIU. He was given an easy online assessment to solve before joining the GIU. Citizens of the GUC were happy sad to see the prof leaving, so they decided to hack into the system and change the online assessment into a harder one so that he stays at the GUC. After a long argument, they decided to change it into the following problem. Given an array of n integers a_ 1, a_ 2, . . . , a_ n , where a_ i= \u0338 0 , check if you can make this array sorted by using the following operation any number of times ( possibly zero) . An array is sorted if its elements are arranged in a non- decreasing order. select two indices i and j ( 1 \u2264 i, j \u2264 n ) such that a_ i and a_ j have different signs. In other words, one must be positive and one must be negative. swap the signs of a_ i and a_ j . For example if you select a_ i= 3 and a_ j= - 2 , then they will change to a_ i= - 3 and a_ j= 2 . Prof. Slim saw that the problem is still too easy and isn' t worth his time, so he decided to give it to you to solve.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The next line contain n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i\u2264 10^ 9 , a_ i= \u0338 0 ) separated by spaces describing elements of the array a . It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print \" YES\" if the array can be sorted in the non- decreasing order, otherwise print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, there is no way to make the array sorted using the operation any number of times. In the second test case, the array is already sorted. In the third test case, we can swap the sign of the 1 - st element with the sign of the 5 - th element, and the sign of the 3 - rd element with the sign of the 6 - th element, this way the array will be sorted. In the fourth test case, there is no way to make the array sorted using the operation any number of times.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1670A"
  },
  {
    "title": "Maximal AND",
    "url": "https://codeforces.com/problemset/problem/1669/H",
    "history": "Let AND denote the bitwise AND operation, and OR denote the bitwise OR operation. You are given an array a of length n and a non- negative integer k . You can perform at most k operations on the array of the following type: Select an index i ( 1 \u2264 i \u2264 n ) and replace a_ i with a_ i OR 2^ j where j is any integer between 0 and 30 inclusive. In other words, in an operation you can choose an index i ( 1 \u2264 i \u2264 n ) and set the j - th bit of a_ i to 1 ( 0 \u2264 j \u2264 30 ) . Output the maximum possible value of a_ 1 AND a_ 2 AND . . . AND a_ n after performing at most k operations.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k \u2264 10^ 9 ) . Then a single line follows, containing n integers describing the arrays a ( 0 \u2264 a_ i < 2^ 31 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing the maximum possible AND value of a_ 1 AND a_ 2 AND . . . AND a_ n after performing at most k operations.",
    "note": "For the first test case, we can set the bit 1 ( 2^ 1 ) of the last 2 elements using the 2 operations, thus obtaining the array [ 2 , 3 , 3 ] , which has AND value equal to 2 . For the second test case, we can' t perform any operations so the answer is just the AND of the whole array which is 4 .",
    "topics": [
      "bitmasks",
      "greedy",
      "math"
    ],
    "id": "1669H"
  },
  {
    "title": "Eating Candies",
    "url": "https://codeforces.com/problemset/problem/1669/F",
    "history": "There are n candies put from left to right on a table. The candies are numbered from left to right. The i - th candy has weight w_ i . Alice and Bob eat candies. Alice can eat any number of candies from the left ( she can' t skip candies, she eats them in a row) . Bob can eat any number of candies from the right ( he can' t skip candies, he eats them in a row) . Of course, if Alice ate a candy, Bob can' t eat it ( and vice versa) . They want to be fair. Their goal is to eat the same total weight of candies. What is the most number of candies they can eat in total?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of candies on the table. The second line of each test case contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 4 ) \u2014 the weights of candies from left to right. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum number of candies Alice and Bob can eat in total while satisfying the condition.",
    "note": "For the first test case, Alice will eat one candy from the left and Bob will eat one candy from the right. There is no better way for them to eat the same total amount of weight. The answer is 2 because they eat two candies in total. For the second test case, Alice will eat the first three candies from the left ( with total weight 7 ) and Bob will eat the first three candies from the right ( with total weight 7 ) . They cannot eat more candies since all the candies have been eaten, so the answer is 6 ( because they eat six candies in total) . For the third test case, there is no way Alice and Bob will eat the same non- zero weight so the answer is 0 . For the fourth test case, Alice will eat candies with weights [ 7, 3, 20] and Bob will eat candies with weights [ 10, 8, 11, 1] , they each eat 30 weight. There is no better partition so the answer is 7 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1669F"
  },
  {
    "title": "Odd/Even Increments",
    "url": "https://codeforces.com/problemset/problem/1669/C",
    "history": "Given an array a= [ a_ 1, a_ 2, . . . , a_ n] of n positive integers, you can do operations of two types on it: Add 1 to every element with an odd index. In other words change the array as follows: a_ 1 : = a_ 1 + 1, a_ 3 : = a_ 3 + 1, a_ 5 : = a_ 5+ 1, . . . . Add 1 to every element with an even index. In other words change the array as follows: a_ 2 : = a_ 2 + 1, a_ 4 : = a_ 4 + 1, a_ 6 : = a_ 6+ 1, . . . . Determine if after any number of operations it is possible to make the final array contain only even numbers or only odd numbers. In other words, determine if you can make all elements of the array have the same parity after any number of operations. Note that you can do operations of both types any number of times ( even none) . Operations of different types can be performed a different number of times.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 50 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 3 ) \u2014 the elements of the array. Note that after the performed operations the elements in the array can become greater than 10^ 3 .",
    "output": "Output t lines, each of which contains the answer to the corresponding test case. As an answer, output \" YES\" if after any number of operations it is possible to make the final array contain only even numbers or only odd numbers, and \" NO\" otherwise. You can output the answer in any case ( for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" will be recognized as a positive answer) .",
    "note": "For the first test case, we can increment the elements with an even index, obtaining the array [ 1, 3, 1] , which contains only odd numbers, so the answer is \" YES\" . For the second test case, we can show that after performing any number of operations we won' t be able to make all elements have the same parity, so the answer is \" NO\" . For the third test case, all elements already have the same parity so the answer is \" YES\" . For the fourth test case, we can perform one operation and increase all elements at odd positions by 1 , thus obtaining the array [ 1001, 1, 1001, 1, 1001] , and all elements become odd so the answer is \" YES\" .",
    "topics": [
      "greedy",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1669C"
  },
  {
    "title": "Social Distance",
    "url": "https://codeforces.com/problemset/problem/1668/B",
    "history": "m chairs are arranged in a circle sequentially. The chairs are numbered from 0 to m- 1 . n people want to sit in these chairs. The i - th of them wants at least a[ i] empty chairs both on his right and left side. More formally, if the i - th person sits in the j - th chair, then no one else should sit in the following chairs: ( j- a[ i] ) m , ( j- a[ i] + 1) m , . . . ( j+ a[ i] - 1) m , ( j+ a[ i] ) m . Decide if it is possible to sit down for all of them, under the given limitations.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of people and the number of chairs. The next line contains n integers, a_ 1 , a_ 2 , . . . a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the minimum number of empty chairs, on both sides of the i - th person. It is guaranteed that the sum of n over all test cases will not exceed 10^ 5 .",
    "output": "For each test case print \" YES\" ( without quotes) if it is possible for everyone to sit down and fulfil the restrictions, and \" NO\" ( without quotes) otherwise. You may print every letter in any case you want ( so, for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" will all be recognized as positive answers) .",
    "note": "Test case 1 : n> m , so they can not sit down. Test case 2 : the first person can sit 2 - nd and the second person can sit in the 0 - th chair. Both of them want at least 1 empty chair on both sides, chairs 1 and 3 are free, so this is a good solution. Test case 3 : if the second person sits down somewhere, he needs 2 empty chairs, both on his right and on his left side, so it is impossible to find a place for the first person, because there are only 5 chairs. Test case 4 : they can sit in the 1 - st, 4 - th, 7 - th chairs respectively.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1668B"
  },
  {
    "title": "Make it Increasing",
    "url": "https://codeforces.com/problemset/problem/1667/A",
    "history": "You are given an array a consisting of n positive integers, and an array b , with length n . Initially b_ i= 0 for each 1 \u2264 i \u2264 n . In one move you can choose an integer i ( 1 \u2264 i \u2264 n ) , and add a_ i to b_ i or subtract a_ i from b_ i . What is the minimum number of moves needed to make b increasing ( that is, every element is strictly greater than every element before it) ?",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5000 ) . The second line contains n integers, a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a .",
    "output": "Print a single integer, the minimum number of moves to make b increasing.",
    "note": "Example 1 : you can subtract a_ 1 from b_ 1 , and add a_ 3 , a_ 4 , and a_ 5 to b_ 3 , b_ 4 , and b_ 5 respectively. The final array will be [ - 1 , 0 , 3 , 4 , 5 ] after 4 moves. Example 2 : you can reach [ - 3 , - 2 , - 1 , 0 , 1 , 2 , 3 ] in 10 moves.",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1667A"
  },
  {
    "title": "Even Split",
    "url": "https://codeforces.com/problemset/problem/1666/E",
    "history": "A revolution has recently happened in Segmentland. The new government is committed to equality, and they hired you to help with land redistribution in the country. Segmentland is a segment of length l kilometers, with the capital in one of its ends. There are n citizens in Segmentland, the home of i - th citizen is located at the point a_ i kilometers from the capital. No two homes are located at the same point. Each citizen should receive a segment of positive length with ends at integer distances from the capital that contains her home. The union of these segments should be the whole of Segmentland, and they should not have common points besides their ends. To ensure equality, the difference between the lengths of the longest and the shortest segments should be as small as possible.",
    "input": "The first line of the input contains two integers l and n ( 2 \u2264 l \u2264 10^ 9; 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 < a_ 1 < a_ 2 < . . . < a_ n < l ) .",
    "output": "Output n pairs of numbers s_ i, f_ i ( 0 \u2264 s_ i < f_ i \u2264 l ) , one pair per line. The pair on i - th line denotes the ends of the [ s_ i, f_ i] segment that i - th citizen receives. If there are many possible arrangements with the same difference between the lengths of the longest and the shortest segments, you can output any of them.",
    "note": "In the first example, it is possible to make all segments equal. Viva la revolucion! In the second example, citizens live close to the capital, so the length of the shortest segment is 2 and the length of the longest segment is 8.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1666E"
  },
  {
    "title": "Deletive Editing",
    "url": "https://codeforces.com/problemset/problem/1666/D",
    "history": "Daisy loves playing games with words. Recently, she has been playing the following Deletive Editing word game with Daniel. Daisy picks a word, for example, \" DETERMINED\" . On each game turn, Daniel calls out a letter, for example, ' E' , and Daisy removes the first occurrence of this letter from the word, getting \" DTERMINED\" . On the next turn, Daniel calls out a letter again, for example, ' D' , and Daisy removes its first occurrence, getting \" TERMINED\" . They continue with ' I' , getting \" TERMNED\" , with ' N' , getting \" TERMED\" , and with ' D' , getting \" TERME\" . Now, if Daniel calls out the letter ' E' , Daisy gets \" TRME\" , but there is no way she can get the word \" TERM\" if they start playing with the word \" DETERMINED\" . Daisy is curious if she can get the final word of her choice, starting from the given initial word, by playing this game for zero or more turns. Your task it help her to figure this out.",
    "input": "The first line of the input contains an integer n \u2014 the number of test cases ( 1 \u2264 n \u2264 10 000 ) . The following n lines contain test cases. Each test case consists of two words s and t separated by a space. Each word consists of at least one and at most 30 uppercase English letters; s is the Daisy' s initial word for the game; t is the final word that Daisy would like to get at the end of the game.",
    "output": "Output n lines to the output \u2014 a single line for each test case. Output \" YES\" if it is possible for Daisy to get from the initial word s to the final word t by playing the Deletive Editing game. Output \" NO\" otherwise.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1666D"
  },
  {
    "title": "MinimizOR",
    "url": "https://codeforces.com/problemset/problem/1665/E",
    "history": "You are given an array a of n non- negative integers, numbered from 1 to n . Let' s define the cost of the array a as min_ i = \u0338 j a_ i | a_ j , where | denotes the bitwise OR operation. There are q queries. For each query you are given two integers l and r ( l < r ) . For each query you should find the cost of the subarray a_ l, a_ l + 1, . . . , a_ r .",
    "input": "Each test case consists of several test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the length array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) \u2014 the elements of a . The third line of each test case contains an integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. Each of the next q lines contains two integers l_ j , r_ j ( 1 \u2264 l_ j < r_ j \u2264 n ) \u2014 the description of the j - th query. It is guaranteed that the sum of n and the sum of q over all test cases do not exceed 10^ 5 .",
    "output": "For each test case print q numbers, where the j - th number is the cost of array a_ l_ j, a_ l_ j + 1, . . . , a_ r_ j .",
    "note": "In the first test case the array a is 110_ 2, 001_ 2, 011_ 2, 010_ 2, 001_ 2 . That' s why the answers for the queries are: [ 1; 2] : a_ 1 | a_ 2 = 110_ 2 | 001_ 2 = 111_ 2 = 7 ; [ 2; 3] : a_ 2 | a_ 3 = 001_ 2 | 011_ 2 = 011_ 2 = 3 ; [ 2; 4] : a_ 2 | a_ 3 = a_ 3 | a_ 4 = a_ 2 | a_ 4 = 011_ 2 = 3 ; [ 2; 5] : a_ 2 | a_ 5 = 001_ 2 = 1 . In the second test case the array a is 00_ 2, 10_ 2, 01_ 2, 11. . . 1_ 2_ 30 ( a_ 4 = 2^ 30 - 1 ) . That' s why the answers for the queries are: [ 1; 2] : a_ 1 | a_ 2 = 10_ 2 = 2 ; [ 2; 3] : a_ 2 | a_ 3 = 11_ 2 = 3 ; [ 1; 3] : a_ 1 | a_ 3 = 01_ 2 = 1 ; [ 3; 4] : a_ 3 | a_ 4 = 01_ 2 | 11. . . 1_ 2_ 30 = 2^ 30 - 1 = 1073741823 .",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1665E"
  },
  {
    "title": "Tree Infection",
    "url": "https://codeforces.com/problemset/problem/1665/C",
    "history": "A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a vertex v ( different from root) is the previous to v vertex on the shortest path from the root to the vertex v . Children of the vertex v are all vertices for which v is the parent. You are given a rooted tree with n vertices. The vertex 1 is the root. Initially, all vertices are healthy. Each second you do two operations, the spreading operation and, after that, the injection operation: Spreading: for each vertex v , if at least one child of v is infected, you can spread the disease by infecting at most one other child of v of your choice. Injection: you can choose any healthy vertex and infect it. This process repeats each second until the whole tree is infected. You need to find the minimal number of seconds needed to infect the whole tree.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of the vertices in the given tree. The second line of each test case contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) , where p_ i is the ancestor of the i - th vertex in the tree. It is guaranteed that the given graph is a tree. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case you should output a single integer \u2014 the minimal number of seconds needed to infect the whole tree.",
    "note": "The image depicts the tree from the first test case during each second. A vertex is black if it is not infected. A vertex is blue if it is infected by injection during the previous second. A vertex is green if it is infected by spreading during the previous second. A vertex is red if it is infected earlier than the previous second. Note that you are able to choose which vertices are infected by spreading and by injections.",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1665C"
  },
  {
    "title": "Array Cloning Technique",
    "url": "https://codeforces.com/problemset/problem/1665/B",
    "history": "You are given an array a of n integers. Initially there is only one copy of the given array. You can do operations of two types: Choose any array and clone it. After that there is one more copy of the chosen array. Swap two elements from any two copies ( maybe in the same copy) on any positions. You need to find the minimal number of operations needed to obtain a copy where all elements are equal.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimal number of operations needed to create at least one copy where all elements are equal.",
    "note": "In the first test case all elements in the array are already equal, that' s why the answer is 0 . In the second test case it is possible to create a copy of the given array. After that there will be two identical arrays: [ 0 1 3 3 7 0 ] and [ 0 1 3 3 7 0 ] After that we can swap elements in a way so all zeroes are in one array: [ 0 0 0 3 7 0 ] and [ 1 1 3 3 7 3 ] Now let' s create a copy of the first array: [ 0 0 0 3 7 0 ] , [ 0 0 0 3 7 0 ] and [ 1 1 3 3 7 3 ] Let' s swap elements in the first two copies: [ 0 0 0 0 0 0 ] , [ 3 7 0 3 7 0 ] and [ 1 1 3 3 7 3 ] . Finally, we made a copy where all elements are equal and made 6 operations. It can be proven that no fewer operations are enough.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1665B"
  },
  {
    "title": "Gastronomic Event",
    "url": "https://codeforces.com/problemset/problem/1662/G",
    "history": "SWERC organizers want to hold a gastronomic event. The location of the event is a building with n rooms connected by n- 1 corridors ( each corridor connects two rooms) so that it is possible to go from any room to any other room. In each room you have to set up the tasting of a typical Italian dish. You can choose from n typical Italian dishes rated from 1 to n depending on how good they are ( n is the best possible rating) . The n dishes have distinct ratings. You want to assign the n dishes to the n rooms so that the number of pleasing tours is maximal. A pleasing tour is a nonempty sequence of rooms so that: Each room in the sequence is connected to the next one in the sequence by a corridor. The ratings of the dishes in the rooms ( in the order given by the sequence) are increasing. If you assign the n dishes optimally, what is the maximum number of pleasing tours?",
    "input": "The first line contains an integer n ( 2\u2264 n\u2264 1 000 000 ) \u2014 the number of rooms. The second line contains n- 1 integers p_ 2, p_ 3, \u22ef , p_ n ( 1 \u2264 p_ i < i ) . Each p_ i indicates that there is a corridor between room i and room p_ i . It is guaranteed that the building has the property that it is possible to go from any room to any other room.",
    "output": "Print the maximum number of pleasing tours.",
    "note": "In the first sample, it is optimal to place the dish with rating 1 in room 1 , the dish with rating 2 in room 3 , the dish with rating 3 in room 2 , the dish with rating 4 in room 5 and the dish with rating 5 in room 4 . All the 13 possible pleasing tours are: ( 1) , ( 2) , ( 3) , ( 4) , ( 5) , ( 1, 2) , ( 3, 2) , ( 2, 4) , ( 2, 5) , ( 1, 2, 4) , ( 1, 2, 5) , ( 3, 2, 4) , ( 3, 2, 5) . There are also other ways to assign the dishes to the rooms so that there are 13 pleasing tours.",
    "topics": [
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1662G"
  },
  {
    "title": "Evolution of Weasels",
    "url": "https://codeforces.com/problemset/problem/1662/D",
    "history": "A wild basilisk just appeared at your doorstep. You are not entirely sure what a basilisk is and you wonder whether it evolved from your favorite animal, the weasel. How can you find out whether basilisks evolved from weasels? Certainly, a good first step is to sequence both of their DNAs. Then you can try to check whether there is a sequence of possible mutations from the DNA of the weasel to the DNA of the basilisk. Your friend Ron is a talented alchemist and has studied DNA sequences in many of his experiments. He has found out that DNA strings consist of the letters A, B and C and that single mutations can only remove or add substrings at any position in the string ( a substring is a contiguous sequence of characters) . The substrings that can be removed or added by a mutation are AA, BB, CC, ABAB or BCBC. During a sequence of mutations a DNA string may even become empty. Ron has agreed to sequence the DNA of the weasel and the basilisk for you, but finding out whether there is a sequence of possible mutations that leads from one to the other is too difficult for him, so you have to do it on your own.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. The descriptions of the t test cases follow. The first line of each test case contains a string u ( 1\u2264 | u| \u2264 200 ) \u2014 the DNA of the weasel. The second line of each test case contains a string v ( 1\u2264 | v| \u2264 200 ) \u2014 the DNA of the basilisk. The values | u| , | v| denote the lengths of the strings u and v . It is guaranteed that both strings u and v consist of the letters A, B and C.",
    "output": "For each test case, print YES if there is a sequence of mutations to get from u to v and NO otherwise.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1662D"
  },
  {
    "title": "Toys",
    "url": "https://codeforces.com/problemset/problem/1662/B",
    "history": "Vittorio has three favorite toys: a teddy bear, an owl, and a raccoon. Each of them has a name. Vittorio takes several sheets of paper and writes a letter on each side of every sheet so that it is possible to spell any of the three names by arranging some of the sheets in a row ( sheets can be reordered and flipped as needed) . The three names do not have to be spelled at the same time, it is sufficient that it is possible to spell each of them using all the available sheets ( and the same sheet can be used to spell different names) . Find the minimum number of sheets required. In addition, produce a list of sheets with minimum cardinality which can be used to spell the three names ( if there are multiple answers, print any) .",
    "input": "The first line contains a string t consisting of uppercase letters of the English alphabet ( 1\u2264 | t| \u2264 1000 ) \u2014 the name of the teddy bear. The second line contains a string o consisting of uppercase letters of the English alphabet ( 1\u2264 | o| \u2264 1000 ) \u2014 the name of the owl. The third line contains a string r consisting of uppercase letters of the English alphabet ( 1\u2264 | r| \u2264 1000 ) \u2014 the name of the raccoon. The values | t| , | o| , | r| denote the length of the three names t , o , r .",
    "output": "The first line of the output contains a single integer m \u2014 the minimum number of sheets required. Then m lines follow: the j - th of these lines contains a string of two uppercase letters of the English alphabet \u2014 the letters appearing on the two sides of the j - th sheet. Note that you can print the sheets and the two letters of each sheet in any order.",
    "note": "In the first sample, the solution uses two sheets: the first sheet has A on one side and G on the other side; the second sheet has A on one side and M on the other side. The name AA can be spelled using the A side of both sheets. The name GA can be spelled using the G side of the first sheet and the A side of the second sheet. Finally, the name MA can be spelled using the M side of the second sheet and the A side of the first sheet.",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1662B"
  },
  {
    "title": "Teleporters",
    "url": "https://codeforces.com/problemset/problem/1661/F",
    "history": "There are n+ 1 teleporters on a straight line, located in points 0 , a_ 1 , a_ 2 , a_ 3 , . . . , a_ n . It' s possible to teleport from point x to point y if there are teleporters in both of those points, and it costs ( x- y) ^ 2 energy. You want to install some additional teleporters so that it is possible to get from the point 0 to the point a_ n ( possibly through some other teleporters) spending no more than m energy in total. Each teleporter you install must be located in an integer point. What is the minimum number of teleporters you have to install?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 < a_ 2 < a_ 3 < . . . < a_ n \u2264 10^ 9 ) . The third line contains one integer m ( a_ n \u2264 m \u2264 10^ 18 ) .",
    "output": "Print one integer \u2014 the minimum number of teleporters you have to install so that it is possible to get from 0 to a_ n spending at most m energy. It can be shown that it' s always possible under the constraints from the input format.",
    "note": "",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1661F"
  },
  {
    "title": "Progressions Covering",
    "url": "https://codeforces.com/problemset/problem/1661/D",
    "history": "You are given two arrays: an array a consisting of n zeros and an array b consisting of n integers. You can apply the following operation to the array a an arbitrary number of times: choose some subsegment of a of length k and add the arithmetic progression 1, 2, . . . , k to this subsegment \u2014 i. e. add 1 to the first element of the subsegment, 2 to the second element, and so on. The chosen subsegment should be inside the borders of the array a ( i. e. , if the left border of the chosen subsegment is l , then the condition 1 \u2264 l \u2264 l + k - 1 \u2264 n should be satisfied) . Note that the progression added is always 1, 2, . . . , k but not the k, k - 1, . . . , 1 or anything else ( i. e. , the leftmost element of the subsegment always increases by 1 , the second element always increases by 2 and so on) . Your task is to find the minimum possible number of operations required to satisfy the condition a_ i \u2265 b_ i for each i from 1 to n . Note that the condition a_ i \u2265 b_ i should be satisfied for all elements at once.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of elements in both arrays and the length of the subsegment, respectively. The second line of the input contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 12 ) , where b_ i is the i - th element of the array b .",
    "output": "Print one integer \u2014 the minimum possible number of operations required to satisfy the condition a_ i \u2265 b_ i for each i from 1 to n .",
    "note": "Consider the first example. In this test, we don' t really have any choice, so we need to add at least five progressions to make the first element equals 5 . The array a becomes [ 5, 10, 15] . Consider the second example. In this test, let' s add one progression on the segment [ 1; 3] and two progressions on the segment [ 4; 6] . Then, the array a becomes [ 1, 2, 3, 2, 4, 6] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1661D"
  },
  {
    "title": "Water the Trees",
    "url": "https://codeforces.com/problemset/problem/1661/C",
    "history": "There are n trees in a park, numbered from 1 to n . The initial height of the i - th tree is h_ i . You want to water these trees, so they all grow to the same height. The watering process goes as follows. You start watering trees at day 1 . During the j - th day you can: Choose a tree and water it. If the day is odd ( e. g. 1, 3, 5, 7, . . . ) , then the height of the tree increases by 1 . If the day is even ( e. g. 2, 4, 6, 8, . . . ) , then the height of the tree increases by 2 . Or skip a day without watering any tree. Note that you can' t water more than one tree in a day. Your task is to determine the minimum number of days required to water the trees so they grow to the same height. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of trees. The second line of the test case contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 9 ) , where h_ i is the height of the i - th tree. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 ( \u2211 n \u2264 3 \u00b7 10^ 5 ) .",
    "output": "For each test case, print one integer \u2014 the minimum number of days required to water the trees, so they grow to the same height.",
    "note": "Consider the first test case of the example. The initial state of the trees is [ 1, 2, 4] . During the first day, let' s water the first tree, so the sequence of heights becomes [ 2, 2, 4] ; during the second day, let' s water the second tree, so the sequence of heights becomes [ 2, 4, 4] ; let' s skip the third day; during the fourth day, let' s water the first tree, so the sequence of heights becomes [ 4, 4, 4] . Thus, the answer is 4 .",
    "topics": [
      "binary search",
      "greedy",
      "math"
    ],
    "id": "1661C"
  },
  {
    "title": "Getting Zero",
    "url": "https://codeforces.com/problemset/problem/1661/B",
    "history": "Suppose you have an integer v . In one operation, you can: either set v = ( v + 1) 32768 or set v = ( 2 \u00b7 v) 32768 . You are given n integers a_ 1, a_ 2, . . . , a_ n . What is the minimum number of operations you need to make each a_ i equal to 0 ?",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 32768 ) \u2014 the number of integers. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 32768 ) .",
    "output": "Print n integers. The i - th integer should be equal to the minimum number of operations required to make a_ i equal to 0 .",
    "note": "Let' s consider each a_ i : a_ 1 = 19 . You can, firstly, increase it by one to get 20 and then multiply it by two 13 times. You' ll get 0 in 1 + 13 = 14 steps. a_ 2 = 32764 . You can increase it by one 4 times: 32764 \u2192 32765 \u2192 32766 \u2192 32767 \u2192 0 . a_ 3 = 10240 . You can multiply it by two 4 times: 10240 \u2192 20480 \u2192 8192 \u2192 16384 \u2192 0 . a_ 4 = 49 . You can multiply it by two 15 times.",
    "topics": [
      "bitmasks",
      "brute force",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1661B"
  },
  {
    "title": "Array Balancing",
    "url": "https://codeforces.com/problemset/problem/1661/A",
    "history": "You are given two arrays of length n : a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ n . You can perform the following operation any number of times: Choose integer index i ( 1 \u2264 i \u2264 n ) ; Swap a_ i and b_ i . What is the minimum possible sum | a_ 1 - a_ 2| + | a_ 2 - a_ 3| + . . . + | a_ n- 1 - a_ n| + | b_ 1 - b_ 2| + | b_ 2 - b_ 3| + . . . + | b_ n- 1 - b_ n| ( in other words, \u2211_ i= 1^ n - 1( | a_ i - a_ i+ 1| + | b_ i - b_ i+ 1| ) ) you can achieve after performing several ( possibly, zero) operations?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 4000 ) \u2014 the number of test cases. Then, t test cases follow. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 25 ) \u2014 the length of arrays a and b . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array a . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the array b .",
    "output": "For each test case, print one integer \u2014 the minimum possible sum \u2211_ i= 1^ n- 1( | a_ i - a_ i+ 1| + | b_ i - b_ i+ 1| ) .",
    "note": "In the first test case, we can, for example, swap a_ 3 with b_ 3 and a_ 4 with b_ 4 . We' ll get arrays a = [ 3, 3, 3, 3] and b = [ 10, 10, 10, 10] with sum 3 \u00b7 | 3 - 3| + 3 \u00b7 | 10 - 10| = 0 . In the second test case, arrays already have minimum sum ( described above) equal to | 1 - 2| + . . . + | 4 - 5| + | 6 - 7| + . . . + | 9 - 10| = 4 + 4 = 8 . In the third test case, we can, for example, swap a_ 5 and b_ 5 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1661A"
  },
  {
    "title": "Matrix and Shifts",
    "url": "https://codeforces.com/problemset/problem/1660/E",
    "history": "You are given a binary matrix A of size n \u00d7 n . Rows are numbered from top to bottom from 1 to n , columns are numbered from left to right from 1 to n . The element located at the intersection of row i and column j is called A_ ij . Consider a set of 4 operations: Cyclically shift all rows up. The row with index i will be written in place of the row i- 1 ( 2 \u2264 i \u2264 n ) , the row with index 1 will be written in place of the row n . Cyclically shift all rows down. The row with index i will be written in place of the row i+ 1 ( 1 \u2264 i \u2264 n - 1 ) , the row with index n will be written in place of the row 1 . Cyclically shift all columns to the left. The column with index j will be written in place of the column j- 1 ( 2 \u2264 j \u2264 n ) , the column with index 1 will be written in place of the column n . Cyclically shift all columns to the right. The column with index j will be written in place of the column j+ 1 ( 1 \u2264 j \u2264 n - 1 ) , the column with index n will be written in place of the column 1 . The 3 \u00d7 3 matrix is shown on the left before the 3 - rd operation is applied to it, on the right \u2014 after. You can perform an arbitrary ( possibly zero) number of operations on the matrix; the operations can be performed in any order. After that, you can perform an arbitrary ( possibly zero) number of new xor- operations: Select any element A_ ij and assign it with new value A_ ij\u2295 1 . In other words, the value of ( A_ ij + 1) 2 will have to be written into element A_ ij . Each application of this xor- operation costs one burl. Note that the 4 shift operations \u2014 are free. These 4 operations can only be performed before xor- operations are performed. Output the minimum number of burles you would have to pay to make the A matrix unitary. A unitary matrix is a matrix with ones on the main diagonal and the rest of its elements are zeros ( that is, A_ ij = 1 if i = j and A_ ij = 0 otherwise) .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. The descriptions of the test cases follow. Before each test case, an empty line is written in the input. The first line of each test case contains a single number n ( 1 \u2264 n \u2264 2000 ) This is followed by n lines, each containing exactly n characters and consisting only of zeros and ones. These lines describe the values in the elements of the matrix. It is guaranteed that the sum of n^ 2 values over all test cases does not exceed 4 \u00b7 10^ 6 .",
    "output": "For each test case, output the minimum number of burles you would have to pay to make the A matrix unitary. In other words, print the minimum number of xor- operations it will take after applying cyclic shifts to the matrix for the A matrix to become unitary.",
    "note": "In the first test case, you can do the following: first, shift all the rows down cyclically, then the main diagonal of the matrix will contain only \" 1\" . Then it will be necessary to apply xor- operation to the only \" 1\" that is not on the main diagonal. In the second test case, you can make a unitary matrix by applying the operation 2 \u2014 cyclic shift of rows upward twice to the matrix.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1660E"
  },
  {
    "title": "Get an Even String",
    "url": "https://codeforces.com/problemset/problem/1660/C",
    "history": "A string a= a_ 1a_ 2. . . a_ n is called even if it consists of a concatenation ( joining) of strings of length 2 consisting of the same characters. In other words, a string a is even if two conditions are satisfied at the same time: its length n is even; for all odd i ( 1 \u2264 i \u2264 n - 1 ) , a_ i = a_ i+ 1 is satisfied. For example, the following strings are even: \" \" ( empty string) , \" tt\" , \" aabb\" , \" oooo\" , and \" ttrrrroouuuuuuuukk\" . The following strings are not even: \" aaa\" , \" abab\" and \" abba\" . Given a string s consisting of lowercase Latin letters. Find the minimum number of characters to remove from the string s to make it even. The deleted characters do not have to be consecutive.",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases in the test. The descriptions of the test cases follow. Each test case consists of one string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) , where | s| \u2014 the length of the string s . The string consists of lowercase Latin letters. It is guaranteed that the sum of | s| on all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single number \u2014 the minimum number of characters that must be removed to make s even.",
    "note": "In the first test case you can remove the characters with indices 6 , 7 , and 9 to get an even string \" aabbddcc\" . In the second test case, each character occurs exactly once, so in order to get an even string, you must remove all characters from the string. In the third test case, you can get an even string \" aaaabb\" by removing, for example, 4 - th and 6 - th characters, or a string \" aabbbb\" by removing the 5 - th character and any of the first three.",
    "topics": [
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1660C"
  },
  {
    "title": "Vasya and Coins",
    "url": "https://codeforces.com/problemset/problem/1660/A",
    "history": "Vasya decided to go to the grocery store. He found in his wallet a coins of 1 burle and b coins of 2 burles. He does not yet know the total cost of all goods, so help him find out s ( s > 0 ) : the minimum positive integer amount of money he cannot pay without change or pay at all using only his coins. For example, if a= 1 and b= 1 ( he has one 1 - burle coin and one 2 - burle coin) , then: he can pay 1 burle without change, paying with one 1 - burle coin, he can pay 2 burle without change, paying with one 2 - burle coin, he can pay 3 burle without change by paying with one 1 - burle coin and one 2 - burle coin, he cannot pay 4 burle without change ( moreover, he cannot pay this amount at all) . So for a= 1 and b= 1 the answer is s= 4 .",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The description of each test case consists of one line containing two integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 8 ) \u2014 the number of 1 - burle coins and 2 - burles coins Vasya has respectively.",
    "output": "For each test case, on a separate line print one integer s ( s > 0 ) : the minimum positive integer amount of money that Vasya cannot pay without change or pay at all.",
    "note": "The first test case of the example is clarified into the main part of the statement. In the second test case, Vasya has only 1 burle coins, and he can collect either any amount from 1 to 4 , but 5 can' t. In the second test case, Vasya has only 2 burle coins, and he cannot pay 1 burle without change. In the fourth test case you don' t have any coins, and he can' t even pay 1 burle.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1660A"
  },
  {
    "title": "Reverse Sort Sum",
    "url": "https://codeforces.com/problemset/problem/1659/D",
    "history": "Suppose you had an array A of n elements, each of which is 0 or 1 . Let us define a function f( k, A) which returns another array B , the result of sorting the first k elements of A in non- decreasing order. For example, f( 4, [ 0, 1, 1, 0, 0, 1, 0] ) = [ 0, 0, 1, 1, 0, 1, 0] . Note that the first 4 elements were sorted. Now consider the arrays B_ 1, B_ 2, . . . , B_ n generated by f( 1, A) , f( 2, A) , . . . , f( n, A) . Let C be the array obtained by taking the element- wise sum of B_ 1, B_ 2, . . . , B_ n . For example, let A= [ 0, 1, 0, 1] . Then we have B_ 1= [ 0, 1, 0, 1] , B_ 2= [ 0, 1, 0, 1] , B_ 3= [ 0, 0, 1, 1] , B_ 4= [ 0, 0, 1, 1] . Then C= B_ 1+ B_ 2+ B_ 3+ B_ 4= [ 0, 1, 0, 1] + [ 0, 1, 0, 1] + [ 0, 0, 1, 1] + [ 0, 0, 1, 1] = [ 0, 2, 2, 4] . You are given C . Determine a binary array A that would give C when processed as above. It is guaranteed that an array A exists for given C in the input.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case has two lines. The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 n ) . It is guaranteed that a valid array A exists for the given C . The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing n integers a_ 1, a_ 2, . . . , a_ n ( a_ i is 0 or 1 ) . If there are multiple answers, you may output any of them.",
    "note": "Here' s the explanation for the first test case. Given that A= [ 1, 1, 0, 1] , we can construct each B_ i : B_ 1= [ 1, 1, 0, 1] ; B_ 2= [ 1, 1, 0, 1] ; B_ 3= [ 0, 1, 1, 1] ; B_ 4= [ 0, 1, 1, 1] And then, we can sum up each column above to get C= [ 1+ 1+ 0+ 0, 1+ 1+ 1+ 1, 0+ 0+ 1+ 1, 1+ 1+ 1+ 1] = [ 2, 4, 2, 4] .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1659D"
  },
  {
    "title": "Line Empire",
    "url": "https://codeforces.com/problemset/problem/1659/C",
    "history": "You are an ambitious king who wants to be the Emperor of The Reals. But to do that, you must first become Emperor of The Integers. Consider a number axis. The capital of your empire is initially at 0 . There are n unconquered kingdoms at positions 0< x_ 1< x_ 2< . . . < x_ n . You want to conquer all other kingdoms. There are two actions available to you: You can change the location of your capital ( let its current position be c_ 1 ) to any other conquered kingdom ( let its position be c_ 2 ) at a cost of a\u00b7 | c_ 1- c_ 2| . From the current capital ( let its current position be c_ 1 ) you can conquer an unconquered kingdom ( let its position be c_ 2 ) at a cost of b\u00b7 | c_ 1- c_ 2| . You cannot conquer a kingdom if there is an unconquered kingdom between the target and your capital. Note that you cannot place the capital at a point without a kingdom. In other words, at any point, your capital can only be at 0 or one of x_ 1, x_ 2, . . . , x_ n . Also note that conquering a kingdom does not change the position of your capital. Find the minimum total cost to conquer all kingdoms. Your capital can be anywhere at the end.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of each test case follows. The first line of each test case contains 3 integers n , a , and b ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 a, b \u2264 10^ 5 ) . The second line of each test case contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ 1 < x_ 2 < . . . < x_ n \u2264 10^ 8 ) . The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the minimum cost to conquer all kingdoms.",
    "note": "Here is an optimal sequence of moves for the second test case: Conquer the kingdom at position 1 with cost 3\u00b7( 1- 0) = 3 . Move the capital to the kingdom at position 1 with cost 6\u00b7( 1- 0) = 6 . Conquer the kingdom at position 5 with cost 3\u00b7( 5- 1) = 12 . Move the capital to the kingdom at position 5 with cost 6\u00b7( 5- 1) = 24 . Conquer the kingdom at position 6 with cost 3\u00b7( 6- 5) = 3 . Conquer the kingdom at position 21 with cost 3\u00b7( 21- 5) = 48 . Conquer the kingdom at position 30 with cost 3\u00b7( 30- 5) = 75 . The total cost is 3+ 6+ 12+ 24+ 3+ 48+ 75= 171 . You cannot get a lower cost than this.",
    "topics": [
      "binary search",
      "brute force",
      "dp",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1659C"
  },
  {
    "title": "Bit Flipping",
    "url": "https://codeforces.com/problemset/problem/1659/B",
    "history": "You are given a binary string of length n . You have exactly k moves. In one move, you must select a single bit. The state of all bits except that bit will get flipped ( 0 becomes 1 , 1 becomes 0 ) . You need to output the lexicographically largest string that you can get after using all k moves. Also, output the number of times you will select each bit. If there are multiple ways to do this, you may output any of them. A binary string a is lexicographically larger than a binary string b of the same length, if and only if the following holds: in the first position where a and b differ, the string a contains a 1 , and the string b contains a 0 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case has two lines. The first line has two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 0 \u2264 k \u2264 10^ 9 ) . The second line has a binary string of length n , each character is either 0 or 1 . The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output two lines. The first line should contain the lexicographically largest string you can obtain. The second line should contain n integers f_ 1, f_ 2, . . . , f_ n , where f_ i is the number of times the i - th bit is selected. The sum of all the integers must be equal to k .",
    "note": "Here is the explanation for the first testcase. Each step shows how the binary string changes in a move. Choose bit 1 : 100001\u2192111110 . Choose bit 4 : 111110\u2192000101 . Choose bit 4 : 000101\u2192111110 . The final string is 111110 and this is the lexicographically largest string we can get.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1659B"
  },
  {
    "title": "Red Versus Blue",
    "url": "https://codeforces.com/problemset/problem/1659/A",
    "history": "Team Red and Team Blue competed in a competitive FPS. Their match was streamed around the world. They played a series of n matches. In the end, it turned out Team Red won r times and Team Blue won b times. Team Blue was less skilled than Team Red, so b was strictly less than r . You missed the stream since you overslept, but you think that the match must have been neck and neck since so many people watched it. So you imagine a string of length n where the i - th character denotes who won the i - th match \u2014 it is R if Team Red won or B if Team Blue won. You imagine the string was such that the maximum number of times a team won in a row was as small as possible. For example, in the series of matches RBBRRRB, Team Red won 3 times in a row, which is the maximum. You must find a string satisfying the above conditions. If there are multiple answers, print any.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case has a single line containing three integers n , r , and b ( 3 \u2264 n \u2264 100 ; 1 \u2264 b < r \u2264 n , r+ b= n ) .",
    "output": "For each test case, output a single line containing a string satisfying the given conditions. If there are multiple answers, print any.",
    "note": "The first test case of the first example gives the optimal answer for the example in the statement. The maximum number of times a team wins in a row in RBRBRBR is 1 . We cannot minimize it any further. The answer for the second test case of the second example is RRBRBRBRBR. The maximum number of times a team wins in a row is 2 , given by RR at the beginning. We cannot minimize the answer any further.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1659A"
  },
  {
    "title": "Juju and Binary String",
    "url": "https://codeforces.com/problemset/problem/1658/F",
    "history": "The cuteness of a binary string is the number of s divided by the length of the string. For example, the cuteness of is 3/ 5 . Juju has a binary string s of length n . She wants to choose some non- intersecting subsegments of s such that their concatenation has length m and it has the same cuteness as the string s . More specifically, she wants to find two arrays l and r of equal length k such that 1 \u2264 l_ 1 \u2264 r_ 1 < l_ 2 \u2264 r_ 2 < . . . < l_ k \u2264 r_ k \u2264 n , and also: \u2211_ i= 1^ k ( r_ i - l_ i + 1) = m ; The cuteness of s[ l_ 1, r_ 1] + s[ l_ 2, r_ 2] + . . . + s[ l_ k, r_ k] is equal to the cuteness of s , where s[ x, y] denotes the subsegment s_ x s_ x+ 1. . . s_ y , and + denotes string concatenation. Juju does not like splitting the string into many parts, so she also wants to minimize the value of k . Find the minimum value of k such that there exist l and r that satisfy the constraints above or determine that it is impossible to find such l and r for any k .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains a binary string s of length n . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, if there is no valid pair of l and r , print - 1 . Otherwise, print k + 1 lines. In the first line, print a number k ( 1 \u2264 k \u2264 m ) \u2014 the minimum number of subsegments required. Then print k lines, the i - th should contain l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the range of the i - th subsegment. Note that you should output the subsegments such that the inequality l_ 1 \u2264 r_ 1 < l_ 2 \u2264 r_ 2 < . . . < l_ k \u2264 r_ k is true.",
    "note": "In the first example, the cuteness of is the same as the cuteness of . In the second example, the cuteness of is 1/ 2 and there is no subsegment of size 6 with the same cuteness. So we must use 2 disjoint subsegments and . In the third example, there are 8 ways to split the string such that \u2211_ i= 1^ k ( r_ i - l_ i + 1) = 3 but none of them has the same cuteness as . In the last example, we don' t have to split the string.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1658F"
  },
  {
    "title": "For Gamers. By Gamers.",
    "url": "https://codeforces.com/problemset/problem/1657/D",
    "history": "Monocarp is playing a strategy game. In the game, he recruits a squad to fight monsters. Before each battle, Monocarp has C coins to spend on his squad. Before each battle starts, his squad is empty. Monocarp chooses one type of units and recruits no more units of that type than he can recruit with C coins. There are n types of units. Every unit type has three parameters: c_ i \u2014 the cost of recruiting one unit of the i - th type; d_ i \u2014 the damage that one unit of the i - th type deals in a second; h_ i \u2014 the amount of health of one unit of the i - th type. Monocarp has to face m monsters. Every monster has two parameters: D_ j \u2014 the damage that the j - th monster deals in a second; H_ j \u2014 the amount of health the j - th monster has. Monocarp has to fight only the j - th monster during the j - th battle. He wants all his recruited units to stay alive. Both Monocarp' s squad and the monster attack continuously ( not once per second) and at the same time. Thus, Monocarp wins the battle if and only if his squad kills the monster strictly faster than the monster kills one of his units. The time is compared with no rounding. For each monster, Monocarp wants to know the minimum amount of coins he has to spend to kill that monster. If this amount is greater than C , then report that it' s impossible to kill that monster.",
    "input": "The first line contains two integers n and C ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ; 1 \u2264 C \u2264 10^ 6 ) \u2014 the number of types of units and the amount of coins Monocarp has before each battle. The i - th of the next n lines contains three integers c_ i, d_ i and h_ i ( 1 \u2264 c_ i \u2264 C ; 1 \u2264 d_ i, h_ i \u2264 10^ 6 ) . The next line contains a single integer m ( 1 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of monsters that Monocarp has to face. The j - th of the next m lines contains two integers D_ j and H_ j ( 1 \u2264 D_ j \u2264 10^ 6 ; 1 \u2264 H_ j \u2264 10^ 12 ) .",
    "output": "Print m integers. For each monster, print the minimum amount of coins Monocarp has to spend to kill that monster. If this amount is greater than C , then print - 1 .",
    "note": "Consider the first monster of the first example. Monocarp can' t recruit one unit of the first type, because it will take both him and the monster 0. 75 seconds to kill each other. He can recruit two units for the cost of 6 coins and kill the monster in 0. 375 second. Monocarp can recruit one unit of the second type, because he kills the monster in 0. 6 seconds, and the monster kills him in 0. 625 seconds. The unit is faster. Thus, 5 coins is enough. Monocarp will need at least three units of the third type to kill the first monster, that will cost 30 coins. Monocarp will spend the least coins if he chooses the second type of units and recruits one unit of that type.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1657D"
  },
  {
    "title": "Bracket Sequence Deletion",
    "url": "https://codeforces.com/problemset/problem/1657/C",
    "history": "You are given a bracket sequence consisting of n characters ' ( ' and/ or ) ' . You perform several operations with it. During one operation, you choose the shortest prefix of this string ( some amount of first characters of the string) that is good and remove it from the string. The prefix is considered good if one of the following two conditions is satisfied: this prefix is a regular bracket sequence; this prefix is a palindrome of length at least two. A bracket sequence is called regular if it is possible to obtain a correct arithmetic expression by inserting characters ' + ' and ' 1' into this sequence. For example, sequences ( ( ) ) ( ) , ( ) and ( ( ) ( ( ) ) ) are regular, while ) ( , ( ( ) and ( ( ) ) ) ( are not. The bracket sequence is called palindrome if it reads the same back and forth. For example, the bracket sequences ) ) , ( ( and ) ( ( ) are palindromes, while bracket sequences ( ) , ) ( and ) ) ( are not palindromes. You stop performing the operations when it' s not possible to find a good prefix. Your task is to find the number of operations you will perform on the given string and the number of remaining characters in the string. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The next 2t lines describe test cases. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the bracket sequence. The second line of the test case contains n characters ' ( ' and/ or ' ) ' \u2014 the bracket sequence itself. It is guaranteed that the sum of n over all test cases do not exceed 5 \u00b7 10^ 5 ( \u2211 n \u2264 5 \u00b7 10^ 5 ) .",
    "output": "For each test case, print two integers c and r \u2014 the number of operations you will perform on the given bracket sequence and the number of characters that remain in the string after performing all operations.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1657C"
  },
  {
    "title": "XY Sequence",
    "url": "https://codeforces.com/problemset/problem/1657/B",
    "history": "You are given four integers n , B , x and y . You should build a sequence a_ 0, a_ 1, a_ 2, . . . , a_ n where a_ 0 = 0 and for each i \u2265 1 you can choose: either a_ i = a_ i - 1 + x or a_ i = a_ i - 1 - y . Your goal is to build such a sequence a that a_ i \u2264 B for all i and \u2211_ i= 0^ na_ i is maximum possible.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Next t cases follow. The first and only line of each test case contains four integers n , B , x and y ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 B, x, y \u2264 10^ 9 ) . It' s guaranteed that the total sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the maximum possible \u2211_ i= 0^ na_ i .",
    "note": "In the first test case, the optimal sequence a is [ 0, 1, 2, 3, 4, 5] . In the second test case, the optimal sequence a is [ 0, 10^ 9, 0, 10^ 9, 0, 10^ 9, 0, 10^ 9] . In the third test case, the optimal sequence a is [ 0, - 3, - 6, 1, - 2] .",
    "topics": [
      "greedy"
    ],
    "id": "1657B"
  },
  {
    "title": "Parametric MST",
    "url": "https://codeforces.com/problemset/problem/1656/F",
    "history": "You are given n integers a_ 1, a_ 2, . . . , a_ n . For any real number t , consider the complete weighted graph on n vertices K_ n( t) with weight of the edge between vertices i and j equal to w_ ij( t) = a_ i \u00b7 a_ j + t \u00b7 ( a_ i + a_ j) . Let f( t) be the cost of the minimum spanning tree of K_ n( t) . Determine whether f( t) is bounded above and, if so, output the maximum value it attains.",
    "input": "The input consists of multiple test cases. The first line contains a single integer T ( 1 \u2264 T \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices of the graph. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 6 \u2264 a_ i \u2264 10^ 6 ) . The sum of n for all test cases is at most 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line with the maximum value of f( t) ( it can be shown that it is an integer) , or INF if f( t) is not bounded above.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1656F"
  },
  {
    "title": "Subtract Operation",
    "url": "https://codeforces.com/problemset/problem/1656/B",
    "history": "You are given a list of n integers. You can perform the following operation: you choose an element x from the list, erase x from the list, and subtract the value of x from all the remaining elements. Thus, in one operation, the length of the list is decreased by exactly 1 . Given an integer k ( k> 0 ) , find if there is some sequence of n- 1 operations such that, after applying the operations, the only remaining element of the list is equal to k .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and k ( 2 \u2264 n \u2264 2\u00b7 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) , the number of integers in the list, and the target value, respectively. The second line of each test case contains the n integers of the list a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases is not greater that 2 \u00b7 10^ 5 .",
    "output": "For each test case, print YES if you can achieve k with a sequence of n- 1 operations. Otherwise, print NO. You may print each letter in any case ( for example, \" YES\" , \" Yes\" , \" yes\" , \" yEs\" will all be recognized as a positive answer) .",
    "note": "In the first example we have the list { 4, 2, 2, 7} , and we have the target k = 5 . One way to achieve it is the following: first we choose the third element, obtaining the list { 2, 0, 5} . Next we choose the first element, obtaining the list { - 2, 3} . Finally, we choose the first element, obtaining the list { 5} .",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "two pointers"
    ],
    "id": "1656B"
  },
  {
    "title": "Snowy Mountain",
    "url": "https://codeforces.com/problemset/problem/1654/G",
    "history": "There are n locations on a snowy mountain range ( numbered from 1 to n ) , connected by n- 1 trails in the shape of a tree. Each trail has length 1 . Some of the locations are base lodges. The height h_ i of each location is equal to the distance to the nearest base lodge ( a base lodge has height 0 ) . There is a skier at each location, each skier has initial kinetic energy 0 . Each skier wants to ski along as many trails as possible. Suppose that the skier is skiing along a trail from location i to j . Skiers are not allowed to ski uphill ( i. e. , if h_ i < h_ j ) . It costs one unit of kinetic energy to ski along flat ground ( i. e. , if h_ i = h_ j ) , and a skier gains one unit of kinetic energy by skiing downhill ( i. e. , if h_ i > h_ j ) . For each location, compute the length of the longest sequence of trails that the skier starting at that location can ski along without their kinetic energy ever becoming negative. Skiers are allowed to visit the same location or trail multiple times.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers l_ 1, l_ 2, . . . , l_ n ( 0 \u2264 l_ i \u2264 1 ) . If l_ i = 1 , location i is a base lodge; if l_ i = 0 , location i is not a base lodge. It is guaranteed that there is at least 1 base lodge. Each of the next n- 1 lines contains two integers u, v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , meaning that there is a trail that connects the locations u and v . It is guaranteed that the given trails form a tree.",
    "output": "Print n integers: the i - th integer is equal to the length of the longest sequence of trails that the skier starting at location i can ski along without their kinetic energy ever becoming negative.",
    "note": "In the first test, h = [ 0, 0, 1, 1, 2, 3] . The skier starting from 6 can ski along at most 5 trails, in the path 6 \u2192 5 \u2192 4 \u2192 3 \u2192 4 \u2192 2 ( notice that a skier can ski multiple times along the same trail and can visit more than once the same location) : at the location 6 , the kinetic energy is 0 ; at the location 5 , the kinetic energy increases by 1 ( because h_ 5 < h_ 6 ) , so it becomes 1 ; at the location 4 , the kinetic energy increases by 1 ( because h_ 4 < h_ 5 ) , so it becomes 2 ; at the location 3 , the kinetic energy decreases by 1 ( because h_ 3 = h_ 4 ) , so it becomes 1 ; at the location 4 , the kinetic energy decreases by 1 ( because h_ 4 = h_ 3 ) , so it becomes 0 ; at the location 2 , the kinetic energy increases by 1 ( because h_ 2 < h_ 4 ) , so it becomes 1 . There isn' t any sequence of trails of length greater than 5 such that the kinetic energy is always non- negative. Moreover, the optimal path for the skier starting from 1 is 1 ( no trails) ; the optimal path for the skier starting from 2 is 2 ( no trails) ; the optimal path for the skier starting from 3 is 3 \u2192 1 ; the optimal path for the skier starting from 4 is 4 \u2192 2 ; the optimal path for the skier starting from 5 is 5 \u2192 4 \u2192 3 \u2192 1 . In the second test, h = [ 3, 2, 2, 1, 1, 1, 0, 0, 0] . The skier starting from 1 can ski along at most 5 trails, in the path 1 \u2192 3 \u2192 2 \u2192 5 \u2192 4 \u2192 7 . at the location 1 , the kinetic energy is 0 ; at the location 3 , the kinetic energy increases by 1 ( because h_ 3 < h_ 1 ) , so it becomes 1 ; at the location 2 , the kinetic energy decreases by 1 ( because h_ 2 = h_ 3 ) , so it becomes 0 ; at the location 5 , the kinetic energy increases by 1 ( because h_ 5 < h_ 2 ) , so it becomes 1 ; at the location 4 , the kinetic energy decreases by 1 ( because h_ 4 = h_ 5 ) , so it becomes 0 ; at the location 7 , the kinetic energy increases by 1 ( because h_ 7 < h_ 4 ) , so it becomes 1 . There isn' t any sequence of trails of length greater than 5 such that the kinetic energy is always non- negative. In the third test, for the skier starting from vertex 1 , the optimal path is 1 \u2192 2 \u2192 5 \u2192 4 \u2192 3 \u2192 6 \u2192 11 \u2192 10 \u2192 11 . Here are pictures of the first, second, and third test, with the base lodges shown in red:",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1654G"
  },
  {
    "title": "Minimal String Xoration",
    "url": "https://codeforces.com/problemset/problem/1654/F",
    "history": "You are given an integer n and a string s consisting of 2^ n lowercase letters of the English alphabet. The characters of the string s are s_ 0s_ 1s_ 2\u22ef s_ 2^ n- 1 . A string t of length 2^ n ( whose characters are denoted by t_ 0t_ 1t_ 2\u22ef t_ 2^ n- 1 ) is a xoration of s if there exists an integer j ( 0\u2264 j \u2264 2^ n- 1 ) such that, for each 0 \u2264 i \u2264 2^ n- 1 , t_ i = s_ i \u2295 j ( where \u2295 denotes the operation bitwise XOR) . Find the lexicographically minimal xoration of s . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 18 ) . The second line contains a string s consisting of 2^ n lowercase letters of the English alphabet.",
    "output": "Print a single line containing the lexicographically minimal xoration of s .",
    "note": "In the first test, the lexicographically minimal xoration t of s = \" acba\" is \" abca\" . It' s a xoration because, for j = 3 , t_ 0 = s_ 0 \u2295 j = s_ 3 = \" a\" ; t_ 1 = s_ 1 \u2295 j = s_ 2 = \" b\" ; t_ 2 = s_ 2 \u2295 j = s_ 1 = \" c\" ; t_ 3 = s_ 3 \u2295 j = s_ 0 = \" a\" . There isn' t any xoration of s lexicographically smaller than \" abca\" . In the second test, the minimal string xoration corresponds to choosing j = 4 in the definition of xoration. In the third test, the minimal string xoration corresponds to choosing j = 11 in the definition of xoration. In the fourth test, the minimal string xoration corresponds to choosing j = 10 in the definition of xoration. In the fifth test, the minimal string xoration corresponds to choosing either j = 0 or j = 1 in the definition of xoration.",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "greedy",
      "hashing",
      "sortings",
      "strings"
    ],
    "id": "1654F"
  },
  {
    "title": "Alice and the Cake",
    "url": "https://codeforces.com/problemset/problem/1654/C",
    "history": "Alice has a cake, and she is going to cut it. She will perform the following operation n- 1 times: choose a piece of the cake ( initially, the cake is all one piece) with weight w\u2265 2 and cut it into two smaller pieces of weight \u230aw/ 2\u230b and \u2308w/ 2\u2309 ( \u230a x \u230b and \u2308 x \u2309 denote floor and ceiling functions, respectively) . After cutting the cake in n pieces, she will line up these n pieces on a table in an arbitrary order. Let a_ i be the weight of the i - th piece in the line. You are given the array a . Determine whether there exists an initial weight and sequence of operations which results in a .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line: print YES if the array a could have resulted from Alice' s operations, otherwise print NO. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case, it' s possible to get the array a by performing 0 operations on a cake with weight 327 . In the second test case, it' s not possible to get the array a . In the third test case, it' s possible to get the array a by performing 1 operation on a cake with weight 1 970 429 473 : Cut it in half, so that the weights are [ 985 214 736, 985 214 737] . Note that the starting weight can be greater than 10^ 9 . In the fourth test case, it' s possible to get the array a by performing 2 operations on a cake with weight 6 : Cut it in half, so that the weights are [ 3, 3] . Cut one of the two pieces with weight 3 , so that the new weights are [ 1, 2, 3] which is equivalent to [ 2, 3, 1] up to reordering.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1654C"
  },
  {
    "title": "Maximum Cake Tastiness",
    "url": "https://codeforces.com/problemset/problem/1654/A",
    "history": "There are n pieces of cake on a line. The i - th piece of cake has weight a_ i ( 1 \u2264 i \u2264 n ) . The tastiness of the cake is the maximum total weight of two adjacent pieces of cake ( i. e. , max( a_ 1+ a_ 2, a_ 2+ a_ 3, . . . , a_ n- 1 + a_ n) ) . You want to maximize the tastiness of the cake. You are allowed to do the following operation at most once ( doing more operations would ruin the cake) : Choose a contiguous subsegment a[ l, r] of pieces of cake ( 1 \u2264 l \u2264 r \u2264 n ) , and reverse it. The subsegment a[ l, r] of the array a is the sequence a_ l, a_ l+ 1, . . . , a_ r . If you reverse it, the array will become a_ 1, a_ 2, . . . , a_ l- 2, a_ l- 1, a_ r, a_ r- 1, . . . , a_ l+ 1, a_ l, a_ r+ 1, a_ r+ 2, . . . , a_ n- 1, a_ n . For example, if the weights are initially [ 5, 2, 1, 4, 7, 3] , you can reverse the subsegment a[ 2, 5] , getting [ 5, 7, 4, 1, 2, 3] . The tastiness of the cake is now 5 + 7 = 12 ( while before the operation the tastiness was 4+ 7= 11 ) . Find the maximum tastiness of the cake after doing the operation at most once.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 1000 ) \u2014 the number of pieces of cake. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 a_ i is the weight of the i - th piece of cake.",
    "output": "For each test case, print a single integer: the maximum tastiness of the cake after doing the operation at most once.",
    "note": "In the first test case, after reversing the subsegment a[ 2, 5] , you get a cake with weights [ 5, 7, 4, 1, 2, 3] . The tastiness of the cake is now max( 5+ 7, 7+ 4, 4+ 1, 1+ 2, 2+ 3) = 12 . This is the maximum possible tastiness of the cake one can obtain by performing the operation at most once. In the second test case, it' s optimal not to do any operation. The tastiness is 78+ 78 = 156 . In the third test case, after reversing the subsegment a[ 1, 2] , you get a cake with weights [ 54, 69, 91] . The tastiness of the cake is now max( 54+ 69, 69+ 91) = 160 . There is no way to make the tastiness of the cake greater than 160 by performing at most one operation.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1654A"
  },
  {
    "title": "Sum of Matchings",
    "url": "https://codeforces.com/problemset/problem/1651/E",
    "history": "Let' s denote the size of the maximum matching in a graph G as MM( G) . You are given a bipartite graph. The vertices of the first part are numbered from 1 to n , the vertices of the second part are numbered from n+ 1 to 2n . Each vertex' s degree is 2 . For a tuple of four integers ( l, r, L, R) , where 1 \u2264 l \u2264 r \u2264 n and n+ 1 \u2264 L \u2264 R \u2264 2n , let' s define G' ( l, r, L, R) as the graph which consists of all vertices of the given graph that are included in the segment [ l, r] or in the segment [ L, R] , and all edges of the given graph such that each of their endpoints belongs to one of these segments. In other words, to obtain G' ( l, r, L, R) from the original graph, you have to remove all vertices i such that i \u2208\u0338 [ l, r] and i \u2208\u0338 [ L, R] , and all edges incident to these vertices. Calculate the sum of MM( G( l, r, L, R) ) over all tuples of integers ( l, r, L, R) having 1 \u2264 l \u2264 r \u2264 n and n+ 1 \u2264 L \u2264 R \u2264 2n .",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 1500 ) \u2014 the number of vertices in each part. Then 2n lines follow, each denoting an edge of the graph. The i - th line contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n ; n + 1 \u2264 y_ i \u2264 2n ) \u2014 the endpoints of the i - th edge. There are no multiple edges in the given graph, and each vertex has exactly two incident edges.",
    "output": "Print one integer \u2014 the sum of MM( G( l, r, L, R) ) over all tuples of integers ( l, r, L, R) having 1 \u2264 l \u2264 r \u2264 n and n+ 1 \u2264 L \u2264 R \u2264 2n .",
    "note": "",
    "topics": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "dfs and similar",
      "graph matchings",
      "greedy",
      "math"
    ],
    "id": "1651E"
  },
  {
    "title": "Prove Him Wrong",
    "url": "https://codeforces.com/problemset/problem/1651/B",
    "history": "Recently, your friend discovered one special operation on an integer array a : Choose two indices i and j ( i = \u0338 j ) ; Set a_ i = a_ j = | a_ i - a_ j| . After playing with this operation for a while, he came to the next conclusion: For every array a of n integers, where 1 \u2264 a_ i \u2264 10^ 9 , you can find a pair of indices ( i, j) such that the total sum of a will decrease after performing the operation. This statement sounds fishy to you, so you want to find a counterexample for a given integer n . Can you find such counterexample and prove him wrong? In other words, find an array a consisting of n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) such that for all pairs of indices ( i, j) performing the operation won' t decrease the total sum ( it will increase or not change the sum) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first and only line of each test case contains a single integer n ( 2 \u2264 n \u2264 1000 ) \u2014 the length of array a .",
    "output": "For each test case, if there is no counterexample array a of size n , print NO. Otherwise, print YES followed by the array a itself ( 1 \u2264 a_ i \u2264 10^ 9 ) . If there are multiple counterexamples, print any.",
    "note": "In the first test case, the only possible pairs of indices are ( 1, 2) and ( 2, 1) . If you perform the operation on indices ( 1, 2) ( or ( 2, 1) ) , you' ll get a_ 1 = a_ 2 = | 1 - 337| = 336 , or array [ 336, 336] . In both cases, the total sum increases, so this array a is a counterexample.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1651B"
  },
  {
    "title": "Vitaly and Advanced Useless Algorithms",
    "url": "https://codeforces.com/problemset/problem/1650/F",
    "history": "Vitaly enrolled in the course Advanced Useless Algorithms. The course consists of n tasks. Vitaly calculated that he has a_ i hours to do the task i from the day he enrolled in the course. That is, the deadline before the i - th task is a_ i hours. The array a is sorted in ascending order, in other words, the job numbers correspond to the order in which the assignments are turned in. Vitaly does everything conscientiously, so he wants to complete each task by 100 percent, or more. Initially, his completion rate for each task is 0 percent. Vitaly has m training options, each option can be used not more than once. The i th option is characterized by three integers: e_ i, t_ i and p_ i . If Vitaly uses the i th option, then after t_ i hours ( from the current moment) he will increase the progress of the task e_ i by p_ i percent. For example, let Vitaly have 3 of tasks to complete. Let the array a have the form: a = [ 5, 7, 8] . Suppose Vitaly has 5 of options: [ e_ 1= 1, t_ 1= 1, p_ 1= 30] , [ e_ 2= 2, t_ 2= 3, p_ 2= 50] , [ e_ 3= 2, t_ 3= 3, p_ 3= 100] , [ e_ 4= 1, t_ 4= 1, p_ 4= 80] , [ e_ 5= 3, t_ 5= 3, p_ 5= 100] . Then, if Vitaly prepares in the following way, he will be able to complete everything in time: Vitaly chooses the 4 - th option. Then in 1 hour, he will complete the 1 - st task at 80 percent. He still has 4 hours left before the deadline for the 1 - st task. Vitaly chooses the 3 - rd option. Then in 3 hours, he will complete the 2 - nd task in its entirety. He has another 1 hour left before the deadline for the 1 - st task and 4 hours left before the deadline for the 3 - rd task. Vitaly chooses the 1 - st option. Then after 1 hour, he will complete the 1 - st task for 110 percent, which means that he will complete the 1 - st task just in time for the deadline. Vitaly chooses the 5 - th option. He will complete the 3 - rd task for 2 hours, and after another 1 hour, Vitaly will complete the 3 - rd task in its entirety. Thus, Vitaly has managed to complete the course completely and on time, using the 4 options. Help Vitaly \u2014 print the options for Vitaly to complete the tasks in the correct order. Please note: each option can be used not more than once. If there are several possible answers, it is allowed to output any of them.",
    "input": "The first line of input data contains an integer T ( 1 \u2264 T \u2264 10^ 4 ) \u2014the number of input test cases in the test. The descriptions of the input test case follow. The first line of each test case description contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014the number of jobs and the number of training options, respectively. The next line contains n numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the time before the deadline of job i . The array values \u2014 are non- decreasing, that is a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n . The following m lines contain triples of numbers e_ i, t_ i, p_ i ( 1 \u2264 e_ i \u2264 n , 1 \u2264 t_ i \u2264 10^ 9 , 1 \u2264 p_ i \u2264 100 ) \u2014 if Vitaly chooses this option, then after t_ i hours he will increase the progress of the task e_ i by p_ i percent. The options are numbered from 1 to m in order in the input data. It is guaranteed that the sum of n+ m on all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on the first line the number k , meaning that for k of options, Vitaly will be able to complete each task by 100 percent or more on time. The options should not be repeated. Or print - 1 if Vitaly is unable to complete all tasks in time. If there is an answer, on the next line print k of different integers from 1 to m \u2014 the numbers of the options in the order you want. If there is more than one answer, it is allowed to print any of them.",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1650F"
  },
  {
    "title": "Rescheduling the Exam",
    "url": "https://codeforces.com/problemset/problem/1650/E",
    "history": "Now Dmitry has a session, and he has to pass n exams. The session starts on day 1 and lasts d days. The i th exam will take place on the day of a_ i ( 1 \u2264 a_ i \u2264 d ) , all a_ i \u2014 are different. Sample, where n= 3 , d= 12 , a= [ 3, 5, 9] . Orange \u2014 exam days. Before the first exam Dmitry will rest 2 days, before the second he will rest 1 day and before the third he will rest 3 days. For the session schedule, Dmitry considers a special value \u03bc \u2014 the smallest of the rest times before the exam for all exams. For example, for the image above, \u03bc= 1 . In other words, for the schedule, he counts exactly n numbers \u2014 how many days he rests between the exam i- 1 and i ( for i= 0 between the start of the session and the exam i ) . Then it finds \u03bc \u2014 the minimum among these n numbers. Dmitry believes that he can improve the schedule of the session. He may ask to change the date of one exam ( change one arbitrary value of a_ i ) . Help him change the date so that all a_ i remain different, and the value of \u03bc is as large as possible. For example, for the schedule above, it is most advantageous for Dmitry to move the second exam to the very end of the session. The new schedule will take the form: Now the rest periods before exams are equal to [ 2, 2, 5] . So, \u03bc= 2 . Dmitry can leave the proposed schedule unchanged ( if there is no way to move one exam so that it will lead to an improvement in the situation) .",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input test cases. The descriptions of test cases follow. An empty line is written in the test before each case. The first line of each test case contains two integers n and d ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 d \u2264 10^ 9 ) \u2014 the number of exams and the length of the session, respectively. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 d, a_ i < a_ i+ 1 ) , where the i - th number means the date of the i - th exam. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the maximum possible value of \u03bc if Dmitry can move any one exam to an arbitrary day. All values of a_ i should remain distinct.",
    "note": "The first sample is parsed in statement. One of the optimal schedule changes for the second sample: Initial schedule. New schedule. In the third sample, we need to move the exam from day 1 to any day from 4 to 100 . In the fourth sample, any change in the schedule will only reduce \u03bc , so the schedule should be left as it is. In the fifth sample, we need to move the exam from day 1 to any day from 100000000 to 300000000 . One of the optimal schedule changes for the sixth sample: Initial schedule. New schedule. In the seventh sample, every day is exam day, and it is impossible to rearrange the schedule.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1650E"
  },
  {
    "title": "Weight of the System of Nested Segments",
    "url": "https://codeforces.com/problemset/problem/1650/C",
    "history": "On the number line there are m points, i - th of which has integer coordinate x_ i and integer weight w_ i . The coordinates of all points are different, and the points are numbered from 1 to m . A sequence of n segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ n, r_ n] is called system of nested segments if for each pair i, j ( 1 \u2264 i < j \u2264 n ) the condition l_ i < l_ j < r_ j < r_ i is satisfied. In other words, the second segment is strictly inside the first one, the third segment is strictly inside the second one, and so on. For a given number n , find a system of nested segments such that: both ends of each segment are one of m given points; the sum of the weights 2\u00b7 n of the points used as ends of the segments is minimal. For example, let m = 8 . The given points are marked in the picture, their weights are marked in red, their coordinates are marked in blue. Make a system of three nested segments: weight of the first segment: 1 + 1 = 2 weight of the second segment: 10 + ( - 1) = 9 weight of the third segment: 3 + ( - 2) = 1 sum of the weights of all the segments in the system: 2 + 9 + 1 = 12 System of three nested segments",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of input test cases. An empty line is written before each test case. The first line of each test case contains two positive integers n ( 1 \u2264 n \u2264 10^ 5 ) and m ( 2 \u00b7 n \u2264 m \u2264 2 \u00b7 10^ 5 ) . The next m lines contain pairs of integers x_ i ( - 10^ 9 \u2264 x_ i \u2264 10^ 9 ) and w_ i ( - 10^ 4 \u2264 w_ i \u2264 10^ 4 ) \u2014 coordinate and weight of point number i ( 1 \u2264 i \u2264 m ) respectively. All x_ i are different. It is guaranteed that the sum of m values over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output n + 1 lines: in the first of them, output the weight of the composed system, and in the next n lines output exactly two numbers \u2014 the indices of the points which are the endpoints of the i - th segment ( 1 \u2264 i \u2264 n ) . The order in which you output the endpoints of a segment is not important \u2014 you can output the index of the left endpoint first and then the number of the right endpoint, or the other way around. If there are several ways to make a system of nested segments with minimal weight, output any of them.",
    "note": "The first test case coincides with the example from the condition. It can be shown that the weight of the composed system is minimal. The second test case has only 6 points, so you need to use each of them to compose 3 segments.",
    "topics": [
      "greedy",
      "hashing",
      "implementation",
      "sortings"
    ],
    "id": "1650C"
  },
  {
    "title": "Game of Ball Passing",
    "url": "https://codeforces.com/problemset/problem/1649/B",
    "history": "Daniel is watching a football team playing a game during their training session. They want to improve their passing skills during that session. The game involves n players, making multiple passes towards each other. Unfortunately, since the balls were moving too fast, after the session Daniel is unable to know how many balls were involved during the game. The only thing he knows is the number of passes delivered by each player during all the session. Find the minimum possible amount of balls that were involved in the game.",
    "input": "There are several test cases in the input data. The first line contains a single integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. This is followed by the test cases description. The first line of each test case contains one integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of players. The second line of the test case contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the number of passes delivered by the i - th player. It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the answer to the problem.",
    "note": "In the first test case, with the only ball, the game can go like this: 2 \u2192 1 \u2192 3 \u2192 4 \u2192 1 \u2192 2 \u2192 3 \u2192 4 \u2192 2 \u2192 3 \u2192 2 . In the second test case, there is no possible way to play the game with only one ball. One possible way to play with two balls: 2 \u2192 1 \u2192 2 \u2192 3 \u2192 2 \u2192 1 . 2 \u2192 3 \u2192 2 \u2192 1 In the third example, there were no passes, so 0 balls are possible.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1649B"
  },
  {
    "title": "Madoka and Laziness",
    "url": "https://codeforces.com/problemset/problem/1647/F",
    "history": "Madoka has become too lazy to write a legend, so let' s go straight to the formal description of the problem. An array of integers a_ 1, a_ 2, . . . , a_ n is called a hill if it is not empty and there is an index i in it, for which the following is true: a_ 1 < a_ 2 < . . . < a_ i > a_ i + 1 > a_ i + 2 > . . . > a_ n . A sequence x is a subsequence of a sequence y if x can be obtained from y by deletion of several ( possibly, zero or all) elements keeping the order of the other elements. For example, for an array [ 69, 1000, 228, - 7] the array [ 1000, - 7] is a subsequence, while [ 1] and [ - 7, 1000] are not. Splitting an array into two subsequences is called good if each element belongs to exactly one subsequence, and also each of these subsequences is a hill. You are given an array of distinct positive integers a_ 1, a_ 2, . . . a_ n . It is required to find the number of different pairs of maxima of the first and second subsequences among all good splits. Two pairs that only differ in the order of elements are considered same.",
    "input": "The first line of input contains a single integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 array size. The second line of input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that all a_ i are pairwise distinct.",
    "output": "In a single line, print exactly one number \u2014 the number of different pairs of maxima of the first and second subsequences among all good splits.",
    "note": "In the first test case there are 3 possible pairs: ( 3, 4) , ( 2, 4) , ( 1, 4) . And they are achieved with the following partitions: [ 1, 2, 3] , [ 4] ; [ 4, 3] , [ 1, 2] ; [ 1] , [ 2, 4, 3]",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1647F"
  },
  {
    "title": "Madoka and the Sixth-graders",
    "url": "https://codeforces.com/problemset/problem/1647/E",
    "history": "After the most stunning success with the fifth- graders, Madoka has been trusted with teaching the sixth- graders. There' s n single- place desks in her classroom. At the very beginning Madoka decided that the student number b_ i ( 1 \u2264 b_ i \u2264 n ) will sit at the desk number i . Also there' s an infinite line of students with numbers n + 1, n + 2, n + 3, . . . waiting at the door with the hope of being able to learn something from the Madoka herself. Pay attention that each student has his unique number. After each lesson, the following happens in sequence. The student sitting at the desk i moves to the desk p_ i . All students move simultaneously. If there is more than one student at a desk, the student with the lowest number keeps the place, and the others are removed from the class forever. For all empty desks in ascending order, the student from the lowest number from the outside line occupies the desk. Note that in the end there is exactly one student at each desk again. It is guaranteed that the numbers p are such that at least one student is removed after each lesson. Check out the explanation to the first example for a better understanding. After several ( possibly, zero) lessons the desk i is occupied by student a_ i . Given the values a_ 1, a_ 2, . . . , a_ n and p_ 1, p_ 2, . . . , p_ n , find the lexicographically smallest suitable initial seating permutation b_ 1, b_ 2, . . . , b_ n . The permutation is an array of n different integers from 1 up to n in any order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not ( 2 occurs twice) . [ 1, 3, 4] is not a permutation either ( n= 3 but there' s 4 in the array) . For two different permutations a and b of the same length, a is lexicographically less than b if in the first position where a and b differ, the permutation a has a smaller element than the corresponding element in b .",
    "input": "The first line of input data contains an integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 a number of desks in the classroom. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 desks where the students move. It is guaranteed that p has at least two equal elements. The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the final seating of the students. It is guaranteed that there is an initial permutation from which the seating a can be obtained.",
    "output": "In the only line print n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 lexicographically minimum permutation describing the initial seating of the sixth- graders that can lead to the final seating a .",
    "note": "The description of the first test is below: The first picture shows the starting permutation, which is the answer. Then the students sitting at desks 1, 2 are transferred to a 5 desk. Also, a 1 student moved from a 5 desk, and a student from a 4 disk is transferred to a 3 desk. Thus, after all these transfers permutation shown in the second image is obtained. Then, at the desk with the number 5 , the student with the number 3 is expelled, and at the desk with the number 3 , the student with the number 5 is expelled. ( Since their numbers are not the smallest) Then new students with numbers 6, 7 sit at desks numbered 2, 4 . And this permutation ( after the end of the first lesson) is shown in the third image. The 4 image shows the seating arrangement, after the second lesson before all the extra ones were kicked out. And the fifth shows the final seating after 2 lesson.",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy"
    ],
    "id": "1647E"
  },
  {
    "title": "Madoka and Childish Pranks",
    "url": "https://codeforces.com/problemset/problem/1647/C",
    "history": "Madoka as a child was an extremely capricious girl, and one of her favorite pranks was drawing on her wall. According to Madoka' s memories, the wall was a table of n rows and m columns, consisting only of zeroes and ones. The coordinate of the cell in the i - th row and the j - th column ( 1 \u2264 i \u2264 n , 1 \u2264 j \u2264 m ) is ( i, j) . One day she saw a picture \" Mahou Shoujo Madoka Magica\" and decided to draw it on her wall. Initially, the Madoka' s table is a table of size n \u00d7 m filled with zeroes. Then she applies the following operation any number of times: Madoka selects any rectangular subtable of the table and paints it in a chess coloring ( the upper left corner of the subtable always has the color 0 ) . Note that some cells may be colored several times. In this case, the final color of the cell is equal to the color obtained during the last repainting. White color means 0 , black means 1 . So, for example, the table in the first picture is painted in a chess coloring, and the others are not. For better understanding of the statement, we recommend you to read the explanation of the first test. Help Madoka and find some sequence of no more than n \u00b7 m operations that allows you to obtain the picture she wants, or determine that this is impossible.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 100 ) \u2014 the size of the table. Each of the following n lines contains a string of length m consisting only of 1 and 0 \u2014 description of the picture that Madoka wants to obtain.",
    "output": "If it is impossible to obtain the given picture, print - 1 . Otherwise, print in the first line a single integer q ( 0 \u2264 q \u2264 n \u00b7 m ) \u2014 the number of operations you need to obtain the picture. Note that you do not need to minimize the number of operations. Then for each operation ( in the order of execution) print a single line containing four numbers \u2014 the coordinates of the upper- left corner and the lower- right corner of the rectangle.",
    "note": "The description of the first test case is below. In the third test case, it is impossible to paint the desired picture. In the fourth test case, the initial table is already the desired picture.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1647C"
  },
  {
    "title": "Playing Around the Table",
    "url": "https://codeforces.com/problemset/problem/1646/F",
    "history": "There are n players, numbered from 1 to n sitting around a round table. The ( i+ 1) - th player sits to the right of the i - th player for 1 \u2264 i < n , and the 1 - st player sits to the right of the n - th player. There are n^ 2 cards, each of which has an integer between 1 and n written on it. For each integer from 1 to n , there are exactly n cards having this number. Initially, all these cards are distributed among all the players, in such a way that each of them has exactly n cards. In one operation, each player chooses one of his cards and passes it to the player to his right. All these actions are performed simultaneously. Player i is called solid if all his cards have the integer i written on them. Their objective is to reach a configuration in which everyone is solid. Find a way to do it using at most ( n^ 2- n) operations. You do not need to minimize the number of operations.",
    "input": "The first line contains a single integer n ( 2\u2264 n\u2264 100 ) . Then n lines follow. The i - th of them contains n integers c_ 1, c_ 2, . . . , c_ n ( 1\u2264 c_ j\u2264 n ) \u2014 the initial cards of the i - th player. It is guaranteed that for each integer i from 1 to n , there are exactly n cards having the number i .",
    "output": "In the first line print an integer k ( 0\u2264 k\u2264 ( n^ 2- n) ) \u2014 the numbers of operations you want to make. Then k lines should follow. In the i - th of them print n integers d_ 1, d_ 2, . . . , d_ n ( 1\u2264 d_ j\u2264 n ) where d_ j is the number written on the card which j - th player passes to the player to his right in the i - th operation. We can show that an answer always exists under the given constraints. If there are multiple answers, print any.",
    "note": "In the first test case, if the first player passes a card with number 2 and the second player passes a card with number 1 , then the first player has two cards with number 1 and the second player has two cards with number 2 . Then, after making this operation, both players are solid. In the second test case, 0 operations would be enough too. Note that you do not need to minimize the number of operations.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1646F"
  },
  {
    "title": "Quality vs Quantity",
    "url": "https://codeforces.com/problemset/problem/1646/B",
    "history": "# 1# 1# 1# 1 RedBlue You are given a sequence of n non- negative integers a_ 1, a_ 2, . . . , a_ n . Initially, all the elements of the sequence are unpainted. You can paint each number or ( but not both) , or leave it unpainted. For a color c , Count( c) is the number of elements in the sequence painted with that color and Sum( c) is the sum of the elements in the sequence painted with that color. For example, if the given sequence is [ 2, 8, 6, 3, 1] and it is painted this way: [ 2, 8, 6, 3, 1] ( where 6 is painted red, 2 and 3 are painted blue, 1 and 8 are unpainted) then Sum( ) = 6 , Sum( ) = 2+ 3= 5 , Count( ) = 1 , and Count( ) = 2 . Determine if it is possible to paint the sequence so that Sum( ) > Sum( ) and Count( ) < Count( ) .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 3\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the length of the given sequence. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i\u2264 10^ 9 ) \u2014 the given sequence. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print YES if it is possible to paint the given sequence satisfying the above requirements, and NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as a positive response) .",
    "note": "In the first test case, there is no possible way to paint the sequence. For example, if you paint the sequence this way: [ 1, 2, 3] ( where 3 is painted red, 1 and 2 are painted blue) then Count( ) = 1 < Count( ) = 2 , but Sum( ) = 3 > \u0338Sum( ) = 3 . So, this is not a possible way to paint the sequence. In the second test case, a possible way to paint the sequence is described in the statement. We can see that Sum( ) = 6 > Sum( ) = 5 and Count( ) = 1 < Count( ) = 2 . In the third test case, there is no possible way to paint the sequence. For example, if you paint the sequence this way: [ 3, 5, 4, 2] ( where 3 and 5 are painted red, 4 and 2 are painted blue) then Sum( ) = 8 > Sum( ) = 6 but Count( ) = 2 < \u0338Count( ) = 2 . So, this is not a possible way to paint the sequence. In the fourth test case, it can be proven that there is no possible way to paint the sequence satisfying sum and count constraints.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1646B"
  },
  {
    "title": "Increase Subarray Sums",
    "url": "https://codeforces.com/problemset/problem/1644/C",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n , consisting of n integers. You are also given an integer value x . Let f( k) be the maximum sum of a contiguous subarray of a after applying the following operation: add x to the elements on exactly k distinct positions. An empty subarray should also be considered, it has sum 0 . Note that the subarray doesn' t have to include all of the increased elements. Calculate the maximum value of f( k) for all k from 0 to n independently.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of testcases. The first line of the testcase contains two integers n and x ( 1 \u2264 n \u2264 5000 ; 0 \u2264 x \u2264 10^ 5 ) \u2014 the number of elements in the array and the value to add. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 5 \u2264 a_ i \u2264 10^ 5 ) . The sum of n over all testcases doesn' t exceed 5000 .",
    "output": "For each testcase, print n + 1 integers \u2014 the maximum value of f( k) for all k from 0 to n independently.",
    "note": "In the first testcase, it doesn' t matter which elements you add x to. The subarray with the maximum sum will always be the entire array. If you increase k elements by x , k \u00b7 x will be added to the sum. In the second testcase: For k = 0 , the empty subarray is the best option. For k = 1 , it' s optimal to increase the element at position 3 . The best sum becomes - 1 + 5 = 4 for a subarray [ 3, 3] . For k = 2 , it' s optimal to increase the element at position 3 and any other element. The best sum is still 4 for a subarray [ 3, 3] . For k = 3 , you have to increase all elements. The best sum becomes ( - 2 + 5) + ( - 7 + 5) + ( - 1 + 5) = 5 for a subarray [ 1, 3] .",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1644C"
  },
  {
    "title": "Power Walking",
    "url": "https://codeforces.com/problemset/problem/1642/B",
    "history": "Sam is a kindergartener, and there are n children in his group. He decided to create a team with some of his children to play \" brawl: go 2\" . Sam has n power- ups, the i - th has type a_ i . A child' s strength is equal to the number of different types among power- ups he has. For a team of size k , Sam will distribute all n power- ups to k children in such a way that each of the k children receives at least one power- up, and each power- up is given to someone. For each integer k from 1 to n , find the minimum sum of strengths of a team of k children Sam can get.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 types of Sam' s power- ups. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For every test case print n integers. The k - th integer should be equal to the minimum sum of strengths of children in the team of size k that Sam can get.",
    "note": "One of the ways to give power- ups to minimise the sum of strengths in the first test case: k = 1: { 1, 1, 2} k = 2: { 1, 1} , { 2} k = 3: { 1} , { 1} , { 2} One of the ways to give power- ups to minimise the sum of strengths in the second test case: k = 1: { 1, 2, 2, 2, 4, 5} k = 2: { 2, 2, 2, 4, 5} , { 1} k = 3: { 2, 2, 2, 5} , { 1} , { 4} k = 4: { 2, 2, 2} , { 1} , { 4} , { 5} k = 5: { 2, 2} , { 1} , { 2} , { 4} , { 5} k = 6: { 1} , { 2} , { 2} , { 2} , { 4} , { 5}",
    "topics": [
      "greedy"
    ],
    "id": "1642B"
  },
  {
    "title": "Two Arrays",
    "url": "https://codeforces.com/problemset/problem/1641/D",
    "history": "Sam changed his school and on the first biology lesson he got a very interesting task about genes. You are given n arrays, the i - th of them contains m different integers \u2014 a_ i, 1, a_ i, 2, . . . , a_ i, m . Also you are given an array of integers w of length n . Find the minimum value of w_ i + w_ j among all pairs of integers ( i, j) ( 1 \u2264 i, j \u2264 n ) , such that the numbers a_ i, 1, a_ i, 2, . . . , a_ i, m, a_ j, 1, a_ j, 2, . . . , a_ j, m are distinct.",
    "input": "The first line contains two integers n , m ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 5 ) . The i - th of the next n lines starts with m distinct integers a_ i, 1, a_ i, 2, . . . , a_ i, m and then w_ i follows ( 1\u2264 a_ i, j\u2264 10^ 9 , 1 \u2264 w_ i\u2264 10^ 9 ) .",
    "output": "Print a single number \u2014 the answer to the problem. If there are no suitable pairs ( i, j) , print - 1 .",
    "note": "In the first test the minimum value is 5 = w_ 3 + w_ 4 , because numbers { 2, 3, 4, 5} are distinct. In the second test case, there are no suitable pair ( i, j) .",
    "topics": [
      "bitmasks",
      "brute force",
      "combinatorics",
      "greedy",
      "hashing",
      "math",
      "two pointers"
    ],
    "id": "1641D"
  },
  {
    "title": "Anonymity Is Important",
    "url": "https://codeforces.com/problemset/problem/1641/C",
    "history": "In the work of a doctor, it is important to maintain the anonymity of clients and the results of tests. The test results are sent to everyone personally by email, but people are very impatient and they want to know the results right away. That' s why in the testing lab \" De- vitro\" doctors came up with an experimental way to report the results. Let' s assume that n people took the tests in the order of the queue. Then the chief doctor Sam can make several statements, in each telling if there is a sick person among the people in the queue from l - th to r - th ( inclusive) , for some values l and r . During the process, Sam will check how well this scheme works and will be interested in whether it is possible to find out the test result of i - th person from the information he announced. And if it can be done, then is that patient sick or not. Help Sam to test his scheme.",
    "input": "The first line contains two integers n , q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people and the number of queries. In each of the next q lines, the description of the query is given. The first number in the line is t ( t = 0 or t = 1 ) \u2014 the type of the query. If t = 0 , the line contains three more integers l, r, x ( 1 \u2264 l \u2264 r \u2264 n , x = 0 or x = 1 ) . This query means that Sam tells that among the people in the queue from l - th to r - th ( inclusive) : there was at least one sick person, if x= 1 , there is no sick people, if x= 0 . If t = 1 , the line contains one more integer j ( 1 \u2264 j \u2264 n ) \u2014 the position of the patient in the queue, for which Sam wants to know the status. All queries are correct, that means that there always exists an example of the queue of length n for which all reported results ( statements from queries with t = 0 ) are true.",
    "output": "After each Sam question ( query with t = 1 ) print: \" NO\" , if the patient is definitely not sick, \" YES\" , if the patient is definitely sick. \" N/ A\" , if it is impossible to definitely identify the status of patient having the given information.",
    "note": "In the first test for the five first queries: Initially Sam tells that people 4 , 5 are not sick. In the next query Sam asks the status of the patient 5 . From the previous query, we know that the patient is definitely not sick. In the next query Sam asks the status of the patient 6 . We don' t know any information about that patient now. After that Sam tells that there exists a sick patient among 4 , 5 , 6 . In the next query Sam asks the status of the patient 6 . Now we can tell that this patient is definitely sick.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1641C"
  },
  {
    "title": "Great Sequence",
    "url": "https://codeforces.com/problemset/problem/1641/A",
    "history": "A sequence of positive integers is called great for a positive integer x , if we can split it into pairs in such a way that in each pair the first number multiplied by x is equal to the second number. More formally, a sequence a of size n is great for a positive integer x , if n is even and there exists a permutation p of size n , such that for each i ( 1 \u2264 i \u2264n/ 2 ) a_ p_ 2i- 1\u00b7 x = a_ p_ 2i . Sam has a sequence a and a positive integer x . Help him to make the sequence great: find the minimum possible number of positive integers that should be added to the sequence a to make it great for the number x .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 20 000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n , x ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 2 \u2264 x \u2264 10^ 6 ) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimum number of integers that can be added to the end of a to make it a great sequence for the number x .",
    "note": "In the first test case, Sam got lucky and the sequence is already great for the number 4 because you can divide it into such pairs: ( 1, 4) , ( 4, 16) . Thus we can add 0 numbers. In the second test case, you can add numbers 1 and 14 to the sequence, then you can divide all 8 integers into such pairs: ( 1, 2) , ( 1, 2) , ( 2, 4) , ( 7, 14) . It is impossible to add less than 2 integers to fix the sequence.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1641A"
  },
  {
    "title": "Two Posters",
    "url": "https://codeforces.com/problemset/problem/1638/F",
    "history": "You want to advertise your new business, so you are going to place two posters on a billboard in the city center. The billboard consists of n vertical panels of width 1 and varying integer heights, held together by a horizontal bar. The i - th of the n panels has height h_ i . Initially, all panels hang down from the bar ( their top edges lie on it) , but before placing the two posters, you are allowed to move each panel up by any integer length, as long as it is still connected to the bar ( its bottom edge lies below or on it) . After the moves are done, you will place two posters: one below the bar and one above it. They are not allowed to go over the bar and they must be positioned completely inside of the panels. What is the maximum total area the two posters can cover together if you make the optimal moves? Note that you can also place a poster of 0 area. This case is equivalent to placing a single poster.",
    "input": "The first line of input contains one integer n ( 1 \u2264 n \u2264 10^ 4 ) \u2014 the number of vertical panels. The second line of input contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 12 ) \u2014 the heights of the n vertical panels.",
    "output": "Print a single integer \u2014 the maximum total area the two posters can cover together.",
    "note": "In the first sample test, we can choose an upper poster with area 12 and a lower poster of area 6 as in the image below. In the second sample test, we can cover the whole billboard using a single poster.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1638F"
  },
  {
    "title": "Big Brush",
    "url": "https://codeforces.com/problemset/problem/1638/D",
    "history": "You found a painting on a canvas of size n \u00d7 m . The canvas can be represented as a grid with n rows and m columns. Each cell has some color. Cell ( i, j) has color c_ i, j . Near the painting you also found a brush in the shape of a 2 \u00d7 2 square, so the canvas was surely painted in the following way: initially, no cell was painted. Then, the following painting operation has been performed some number of times: Choose two integers i and j ( 1 \u2264 i < n , 1 \u2264 j < m ) and some color k ( 1 \u2264 k \u2264 nm ) . Paint cells ( i, j) , ( i + 1, j) , ( i, j + 1) , ( i + 1, j + 1) in color k . All cells must be painted at least once. A cell can be painted multiple times. In this case, its final color will be the last one. Find any sequence of at most nm operations that could have led to the painting you found or state that it' s impossible.",
    "input": "The first line of input contains two integers n and m ( 2 \u2264 n, m \u2264 1000 ) \u2014 the dimensions of the canvas. On the i - th of the next n lines of input, there will be m integers. The j - th of them is a_ i, j ( 1 \u2264 a_ i, j\u2264 nm ) \u2014 the color of cell ( i, j) .",
    "output": "If there is no solution, print a single integer - 1 . Otherwise, on the first line, print one integer q ( 1 \u2264 q \u2264 nm ) \u2014 the number of operations. Next, print the operations in order. On the k - th of the next q lines, print three integers i , j , c ( 1 \u2264 i < n , 1 \u2264 j < m , 1 \u2264 c \u2264 nm ) \u2014 the description of the k - th operation. If there are multiple solutions, print any.",
    "note": "In the first test case, the solution is not unique. Here' s one of them: In the second test case, there is no way one could obtain the given painting, thus the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1638D"
  },
  {
    "title": "Reverse",
    "url": "https://codeforces.com/problemset/problem/1638/A",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n of length n . You have to choose two integers l, r ( 1 \u2264 l \u2264 r \u2264 n ) and reverse the subsegment [ l, r] of the permutation. The permutation will become p_ 1, p_ 2, . . . , p_ l- 1, p_ r, p_ r- 1, . . . , p_ l, p_ r+ 1, p_ r+ 2, . . . , p_ n . Find the lexicographically smallest permutation that can be obtained by performing exactly one reverse operation on the initial permutation. Note that for two distinct permutations of equal length a and b , a is lexicographically smaller than b if at the first position they differ, a has the smaller element. A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 500 ) \u2014 the length of the permutation. The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the elements of the permutation.",
    "output": "For each test case print the lexicographically smallest permutation you can obtain.",
    "note": "In the first test case, the permutation has length 1 , so the only possible segment is [ 1, 1] . The resulting permutation is [ 1] . In the second test case, we can obtain the identity permutation by reversing the segment [ 1, 2] . The resulting permutation is [ 1, 2, 3] . In the third test case, the best possible segment is [ 2, 3] . The resulting permutation is [ 1, 2, 4, 3] . In the fourth test case, there is no lexicographically smaller permutation, so we can leave it unchanged by choosing the segment [ 1, 1] . The resulting permutation is [ 1, 2, 3, 4, 5] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1638A"
  },
  {
    "title": "Minimize Inversions Number",
    "url": "https://codeforces.com/problemset/problem/1637/H",
    "history": "You are given a permutation p of length n . You can choose any subsequence, remove it from the permutation, and insert it at the beginning of the permutation keeping the same order. For every k from 0 to n , find the minimal possible number of inversions in the permutation after you choose a subsequence of length exactly k .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 50 000 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the permutation. The second line of each test case contains the permutation p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that the total sum of n doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case output n + 1 integers. The i - th of them must be the answer for the subsequence length of i - 1 .",
    "note": "In the second test case: For the length 0 : [ 4, 2, 1, 3] \u2192 [ 4, 2, 1, 3] : 4 inversions. For the length 1 : [ 4, 2, 1, 3] \u2192 [ 1, 4, 2, 3] : 2 inversions. For the length 2 : [ 4, 2, 1, 3] \u2192 [ 2, 1, 4, 3] , or [ 4, 2, 1, 3] \u2192 [ 1, 3, 4, 2] : 2 inversions. For the length 3 : [ 4, 2, 1, 3] \u2192 [ 2, 1, 3, 4] : 1 inversion. For the length 4 : [ 4, 2, 1, 3] \u2192 [ 4, 2, 1, 3] : 4 inversions.",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1637H"
  },
  {
    "title": "Birthday",
    "url": "https://codeforces.com/problemset/problem/1637/G",
    "history": "Vitaly gave Maxim n numbers 1, 2, . . . , n for his 16 - th birthday. Maxim was tired of playing board games during the celebration, so he decided to play with these numbers. In one step Maxim can choose two numbers x and y from the numbers he has, throw them away, and add two numbers x + y and | x - y| instead. He wants all his numbers to be equal after several steps and the sum of the numbers to be minimal. Help Maxim to find a solution. Maxim' s friends don' t want to wait long, so the number of steps in the solution should not exceed 20n . It is guaranteed that under the given constraints, if a solution exists, then there exists a solution that makes all numbers equal, minimizes their sum, and spends no more than 20n moves.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 25 000 ) \u2014 the number of test cases. Each test case contains a single integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 4 ) \u2014 the number of integers given to Maxim. It is guaranteed that the total sum of n doesn' t exceed 5 \u00b7 10^ 4 .",
    "output": "For each test case print - 1 if it' s impossible to make all numbers equal. Otherwise print a single integer s ( 0 \u2264 s \u2264 20n ) \u2014 the number of steps. Then print s lines. The i - th line must contain two integers x_ i and y_ i \u2014 numbers that Maxim chooses on the i - th step. The numbers must become equal after all operations. Don' t forget that you not only need to make all numbers equal, but also minimize their sum. It is guaranteed that under the given constraints, if a solution exists, then there exists a solution that makes all numbers equal, minimizes their sum, and spends no more than 20n moves.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1637G"
  },
  {
    "title": "Towers",
    "url": "https://codeforces.com/problemset/problem/1637/F",
    "history": "You are given a tree with n vertices numbered from 1 to n . The height of the i - th vertex is h_ i . You can place any number of towers into vertices, for each tower you can choose which vertex to put it in, as well as choose its efficiency. Setting up a tower with efficiency e costs e coins, where e > 0 . It is considered that a vertex x gets a signal if for some pair of towers at the vertices u and v ( u = \u0338 v , but it is allowed that x = u or x = v ) with efficiencies e_ u and e_ v , respectively, it is satisfied that min( e_ u, e_ v) \u2265 h_ x and x lies on the path between u and v . Find the minimum number of coins required to set up towers so that you can get a signal at all vertices.",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 200 000 ) \u2014 the number of vertices in the tree. The second line contains n integers h_ i ( 1 \u2264 h_ i \u2264 10^ 9 ) \u2014 the heights of the vertices. Each of the next n - 1 lines contain a pair of numbers v_ i, u_ i ( 1 \u2264 v_ i, u_ i \u2264 n ) \u2014 an edge of the tree. It is guaranteed that the given edges form a tree.",
    "output": "Print one integer \u2014 the minimum required number of coins.",
    "note": "In the first test case it' s optimal to install two towers with efficiencies 2 at vertices 1 and 3 . In the second test case it' s optimal to install a tower with efficiency 1 at vertex 1 and two towers with efficiencies 3 at vertices 2 and 5 . In the third test case it' s optimal to install two towers with efficiencies 6 at vertices 1 and 2 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1637F"
  },
  {
    "title": "Yet Another Minimization Problem",
    "url": "https://codeforces.com/problemset/problem/1637/D",
    "history": "You are given two arrays a and b , both of length n . You can perform the following operation any number of times ( possibly zero) : select an index i ( 1 \u2264 i \u2264 n ) and swap a_ i and b_ i . Let' s define the cost of the array a as \u2211_ i= 1^ n\u2211_ j= i + 1^ n ( a_ i + a_ j) ^ 2 . Similarly, the cost of the array b is \u2211_ i= 1^ n\u2211_ j= i + 1^ n ( b_ i + b_ j) ^ 2 . Your task is to minimize the total cost of two arrays.",
    "input": "Each test case consists of several test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 40 ) \u2014 the number of test cases. The following is a description of the input data sets. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of both arrays. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) \u2014 elements of the first array. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 100 ) \u2014 elements of the second array. It is guaranteed that the sum of n over all test cases does not exceed 100 .",
    "output": "For each test case, print the minimum possible total cost.",
    "note": "In the second test case, in one of the optimal answers after all operations a = [ 2, 6, 4, 6] , b = [ 3, 7, 6, 1] . The cost of the array a equals to ( 2 + 6) ^ 2 + ( 2 + 4) ^ 2 + ( 2 + 6) ^ 2 + ( 6 + 4) ^ 2 + ( 6 + 6) ^ 2 + ( 4 + 6) ^ 2 = 508 . The cost of the array b equals to ( 3 + 7) ^ 2 + ( 3 + 6) ^ 2 + ( 3 + 1) ^ 2 + ( 7 + 6) ^ 2 + ( 7 + 1) ^ 2 + ( 6 + 1) ^ 2 = 479 . The total cost of two arrays equals to 508 + 479 = 987 .",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1637D"
  },
  {
    "title": "Andrew and Stones",
    "url": "https://codeforces.com/problemset/problem/1637/C",
    "history": "Andrew has n piles with stones. The i - th pile contains a_ i stones. He wants to make his table clean so he decided to put every stone either to the 1 - st or the n - th pile. Andrew can perform the following operation any number of times: choose 3 indices 1 \u2264 i < j < k \u2264 n , such that the j - th pile contains at least 2 stones, then he takes 2 stones from the pile j and puts one stone into pile i and one stone into pile k . Tell Andrew what is the minimum number of operations needed to move all the stones to piles 1 and n , or determine if it' s impossible.",
    "input": "The input contains several test cases. The first line contains one integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The first line for each test case contains one integer n ( 3 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array elements. It is guaranteed that the sum of the values n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print the minimum number of operations needed to move stones to piles 1 and n , or print - 1 if it' s impossible.",
    "note": "In the first test case, it is optimal to do the following: Select ( i, j, k) = ( 1, 2, 5) . The array becomes equal to [ 2, 0, 2, 3, 7] . Select ( i, j, k) = ( 1, 3, 4) . The array becomes equal to [ 3, 0, 0, 4, 7] . Twice select ( i, j, k) = ( 1, 4, 5) . The array becomes equal to [ 5, 0, 0, 0, 9] . This array satisfy the statement, because every stone is moved to piles 1 and 5 . There are 4 operations in total. In the second test case, it' s impossible to put all stones into piles with numbers 1 and 3 : At the beginning there' s only one possible operation with ( i, j, k) = ( 1, 2, 3) . The array becomes equal to [ 2, 1, 2] . Now there is no possible operation and the array doesn' t satisfy the statement, so the answer is - 1 . In the third test case, it' s optimal to do the following: Select ( i, j, k) = ( 1, 2, 3) . The array becomes equal to [ 2, 0, 2] . This array satisfies the statement, because every stone is moved to piles 1 and 3 . The is 1 operation in total. In the fourth test case, it' s impossible to do any operation, and the array doesn' t satisfy the statement, so the answer is - 1 .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1637C"
  },
  {
    "title": "MEX and Array",
    "url": "https://codeforces.com/problemset/problem/1637/B",
    "history": "Let there be an array b_ 1, b_ 2, . . . , b_ k . Let there be a partition of this array into segments [ l_ 1; r_ 1] , [ l_ 2; r_ 2] , . . . , [ l_ c; r_ c] , where l_ 1 = 1 , r_ c = k , and for any 2 \u2264 i \u2264 c holds that r_ i- 1 + 1 = l_ i . In other words, each element of the array belongs to exactly one segment. Let' s define the cost of a partition as c + \u2211_ i = 1^ cmex( { b_ l_ i, b_ l_ i + 1, . . . , b_ r_ i} ) , where mex of a set of numbers S is the smallest non- negative integer that does not occur in the set S . In other words, the cost of a partition is the number of segments plus the sum of MEX over all segments. Let' s define the value of an array b_ 1, b_ 2, . . . , b_ k as the maximum possible cost over all partitions of this array. You are given an array a of size n . Find the sum of values of all its subsegments. An array x is a subsegment of an array y if x can be obtained from y by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "The input contains several test cases. The first line contains one integer t ( 1 \u2264 t \u2264 30 ) \u2014 the number of test cases. The first line for each test case contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the array. The second line contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array elements. It is guaranteed that the sum of the values n over all test cases does not exceed 100 .",
    "output": "For each test case print a single integer \u2014 the answer to the problem.",
    "note": "In the second test case: The best partition for the subsegment [ 2, 0, 1] : [ 2] , [ 0, 1] . The cost of this partition equals to 2 + mex( { 2} ) + mex( { 0, 1} ) = 2 + 0 + 2 = 4 . The best partition for the subsegment [ 2, 0] : [ 2] , [ 0] . The cost of this partition equals to 2 + mex( { 2} ) + mex( { 0} ) = 2 + 0 + 1 = 3 The best partition for the subsegment [ 2] : [ 2] . The cost of this partition equals to 1 + mex( { 2} ) = 1 + 0 = 1 . The best partition for the subsegment [ 0, 1] : [ 0, 1] . The cost of this partition equals to 1 + mex( { 0, 1} ) = 1 + 2 = 3 . The best partition for the subsegment [ 0] : [ 0] . The cost of this partition equals to 1 + mex( { 0} ) = 1 + 1 = 2 . The best partition for the subsegment [ 1] : [ 1] . The cost of this partition equals to 1 + mex( { 1} ) = 1 + 0 = 1 . The sum of values over all subsegments equals to 4 + 3 + 1 + 3 + 2 + 1 = 14 .",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1637B"
  },
  {
    "title": "Closest Pair ",
    "url": "https://codeforces.com/problemset/problem/1635/F",
    "history": "There are n weighted points on the OX - axis. The coordinate and the weight of the i - th point is x_ i and w_ i , respectively. All points have distinct coordinates and positive weights. Also, x_ i < x_ i + 1 holds for any 1 \u2264 i < n . The weighted distance between i - th point and j - th point is defined as | x_ i - x_ j| \u00b7 ( w_ i + w_ j) , where | val| denotes the absolute value of val . You should answer q queries, where the i - th query asks the following: Find the minimum weighted distance among all pairs of distinct points among the points in subarray [ l_ i, r_ i] .",
    "input": "The first line contains 2 integers n and q ( 2 \u2264 n \u2264 3 \u00b7 10^ 5; 1 \u2264 q \u2264 3 \u00b7 10^ 5) \u2014 the number of points and the number of queries. Then, n lines follows, the i - th of them contains two integers x_ i and w_ i ( - 10^ 9 \u2264 x_ i \u2264 10^ 9; 1 \u2264 w_ i \u2264 10^ 9) \u2014 the coordinate and the weight of the i - th point. It is guaranteed that the points are given in the increasing order of x . Then, q lines follows, the i - th of them contains two integers l_ i and r_ i ( 1 \u2264 l_ i < r_ i \u2264 n) \u2014 the given subarray of the i - th query.",
    "output": "For each query output one integer, the minimum weighted distance among all pair of distinct points in the given subarray.",
    "note": "For the first query, the minimum weighted distance is between points 1 and 3 , which is equal to | x_ 1 - x_ 3| \u00b7 ( w_ 1 + w_ 3) = | - 2 - 1| \u00b7 ( 2 + 1) = 9 . For the second query, the minimum weighted distance is between points 2 and 3 , which is equal to | x_ 2 - x_ 3| \u00b7 ( w_ 2 + w_ 3) = | 0 - 1| \u00b7 ( 10 + 1) = 11 . For the fourth query, the minimum weighted distance is between points 3 and 4 , which is equal to | x_ 3 - x_ 4| \u00b7 ( w_ 3 + w_ 4) = | 1 - 9| \u00b7 ( 1 + 2) = 24 .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1635F"
  },
  {
    "title": "Cars ",
    "url": "https://codeforces.com/problemset/problem/1635/E",
    "history": "There are n cars on a coordinate axis OX . Each car is located at an integer point initially and no two cars are located at the same point. Also, each car is oriented either left or right, and they can move at any constant positive speed in that direction at any moment. More formally, we can describe the i - th car with a letter and an integer: its orientation ori_ i and its location x_ i . If ori_ i = L , then x_ i is decreasing at a constant rate with respect to time. Similarly, if ori_ i = R , then x_ i is increasing at a constant rate with respect to time. We call two cars irrelevant if they never end up in the same point regardless of their speed. In other words, they won' t share the same coordinate at any moment. We call two cars destined if they always end up in the same point regardless of their speed. In other words, they must share the same coordinate at some moment. Unfortunately, we lost all information about our cars, but we do remember m relationships. There are two types of relationships: 1 i j \u2014 i - th car and j - th car are irrelevant. 2 i j \u2014 i - th car and j - th car are destined. Restore the orientations and the locations of the cars satisfying the relationships, or report that it is impossible. If there are multiple solutions, you can output any. Note that if two cars share the same coordinate, they will intersect, but at the same moment they will continue their movement in their directions.",
    "input": "The first line contains two integers, n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5; 1 \u2264 m \u2264 min( 2 \u00b7 10^ 5, n( n- 1) / 2) \u2014 the number of cars and the number of restrictions respectively. Each of the next m lines contains three integers, type , i , and j ( 1 \u2264 type \u2264 2; 1 \u2264 i, j \u2264 n; i= \u0338j) . If type = 1 , i - th car and j - th car are irrelevant. Otherwise, i - th car and j - th car are destined. It is guaranteed that for each pair of cars, there are at most 1 relationship between.",
    "output": "In the first line, print either \" YES\" or \" NO\" ( in any case) , whether it is possible to restore the orientations and the locations of the cars satisfying the relationships. If the answer is \" YES\" , print n lines each containing a symbol and an integer: ori_ i and x_ i ( ori_ i \u2208{ L, R} ; - 10^ 9 \u2264 x_ i \u2264 10^ 9) \u2014 representing the information of the i - th car. If the orientation is left, then ori_ i = L . Otherwise ori_ i = R . x_ i is the where the i - th car is located. Note that all x_ i should be distinct. We can prove that if there exists a solution, then there must be a solution satisfying the constraints on x_ i .",
    "note": "",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1635E"
  },
  {
    "title": "Differential Sorting",
    "url": "https://codeforces.com/problemset/problem/1635/C",
    "history": "You are given an array a of n elements. Your can perform the following operation no more than n times: Select three indices x, y, z ( 1 \u2264 x < y < z \u2264 n) and replace a_ x with a_ y - a_ z . After the operation, | a_ x| need to be less than 10^ 18 . Your goal is to make the resulting array non- decreasing. If there are multiple solutions, you can output any. If it is impossible to achieve, you should report it as well.",
    "input": "Each test contains multiple test cases. The first line will contain a single integer t ( 1 \u2264 t \u2264 10000) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the size of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9) , the elements of a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print - 1 in a single line if there is no solution. Otherwise in the first line you should print a single integer m ( 0 \u2264 m \u2264 n) \u2014 number of operations you performed. Then the i - th of the following m lines should contain three integers x, y, z ( 1 \u2264 x < y < z \u2264 n) \u2014 description of the i - th operation. If there are multiple solutions, you can output any. Note that you don' t have to minimize the number of operations in this task.",
    "note": "In the first example, the array becomes [ - 6, - 4, 2, - 1, 2] after the first operation, [ - 6, - 4, - 3, - 1, 2] after the second operation. In the second example, it is impossible to make the array sorted after any sequence of operations. In the third example, the array is already sorted, so we don' t need to perform any operations.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1635C"
  },
  {
    "title": "Avoid Local Maximums",
    "url": "https://codeforces.com/problemset/problem/1635/B",
    "history": "You are given an array a of size n . Each element in this array is an integer between 1 and 10^ 9 . You can perform several operations to this array. During an operation, you can replace an element in the array with any integer between 1 and 10^ 9 . Output the minimum number of operations needed such that the resulting array doesn' t contain any local maximums, and the resulting array after the operations. An element a_ i is a local maximum if it is strictly larger than both of its neighbors ( that is, a_ i > a_ i - 1 and a_ i > a_ i + 1 ) . Since a_ 1 and a_ n have only one neighbor each, they will never be a local maximum.",
    "input": "Each test contains multiple test cases. The first line will contain a single integer t ( 1 \u2264 t \u2264 10000) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the size of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) , the elements of array. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, first output a line containing a single integer m \u2014 minimum number of operations required. Then ouput a line consist of n integers \u2014 the resulting array after the operations. Note that this array should differ in exactly m elements from the initial array. If there are multiple answers, print any.",
    "note": "In the first example, the array contains no local maximum, so we don' t need to perform operations. In the second example, we can change a_ 2 to 3 , then the array don' t have local maximums.",
    "topics": [
      "greedy"
    ],
    "id": "1635B"
  },
  {
    "title": "Min Or Sum",
    "url": "https://codeforces.com/problemset/problem/1635/A",
    "history": "You are given an array a of size n . You can perform the following operation on the array: Choose two different integers i, j ( 1 \u2264 i < j \u2264 n ) , replace a_ i with x and a_ j with y . In order not to break the array, a_ i | a_ j = x | y must be held, where | denotes the bitwise OR operation. Notice that x and y are non- negative integers. Please output the minimum sum of the array you can get after using the operation above any number of times.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000) . Description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 100) \u2014 the size of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30) .",
    "output": "For each test case, print one number in a line \u2014 the minimum possible sum of the array.",
    "note": "In the first example, you can perform the following operations to obtain the array [ 1, 0, 2] : 1. choose i = 1, j = 2 , change a_ 1 = 1 and a_ 2 = 2 , it' s valid since 1 | 3 = 1 | 2 . The array becomes [ 1, 2, 2] . 2. choose i = 2, j = 3 , change a_ 2 = 0 and a_ 3 = 2 , it' s valid since 2 | 2 = 0 | 2 . The array becomes [ 1, 0, 2] . We can prove that the minimum sum is 1 + 0 + 2 = 3 In the second example, We don' t need any operations.",
    "topics": [
      "bitmasks",
      "greedy"
    ],
    "id": "1635A"
  },
  {
    "title": "Reverse and Concatenate",
    "url": "https://codeforces.com/problemset/problem/1634/A",
    "history": "Real stupidity beats artificial intelligence every time. \u2014 Terry Pratchett, Hogfather, DiscworldYou are given a string s of length n and a number k . Let' s denote by rev( s) the reversed string s ( i. e. rev( s) = s_ n s_ n- 1 . . . s_ 1 ) . You can apply one of the two kinds of operations to the string: replace the string s with s + rev( s) replace the string s with rev( s) + s How many different strings can you get as a result of performing exactly k operations ( possibly of different kinds) on the original string s ? In this statement we denoted the concatenation of strings s and t as s + t . In other words, s + t = s_ 1 s_ 2 . . . s_ n t_ 1 t_ 2 . . . t_ m , where n and m are the lengths of strings s and t respectively.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 number of test cases. Next 2 \u00b7 t lines contain t test cases: The first line of a test case contains two integers n and k ( 1 \u2264 n \u2264 100 , 0 \u2264 k \u2264 1000 ) \u2014 the length of the string and the number of operations respectively. The second string of a test case contains one string s of length n consisting of lowercase Latin letters.",
    "output": "For each test case, print the answer ( that is, the number of different strings that you can get after exactly k operations) on a separate line. It can be shown that the answer does not exceed 10^ 9 under the given constraints.",
    "note": "In the first test case of the example: After the first operation the string s can become either aabbaa or baaaab. After the second operation there are 2 possibilities for s : aabbaaaabbaa and baaaabbaaaab.",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1634A"
  },
  {
    "title": "Spanning Tree Queries",
    "url": "https://codeforces.com/problemset/problem/1633/E",
    "history": "You are given a connected weighted undirected graph, consisting of n vertices and m edges. You are asked k queries about it. Each query consists of a single integer x . For each query, you select a spanning tree in the graph. Let the weights of its edges be w_ 1, w_ 2, . . . , w_ n- 1 . The cost of a spanning tree is \u2211_ i= 1^ n- 1 | w_ i - x| ( the sum of absolute differences between the weights and x ) . The answer to a query is the lowest cost of a spanning tree. The queries are given in a compressed format. The first p ( 1 \u2264 p \u2264 k) queries q_ 1, q_ 2, . . . , q_ p are provided explicitly. For queries from p+ 1 to k , q_ j = ( q_ j- 1\u00b7 a + b) c . Print the xor of answers to all queries.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 50 ; n - 1 \u2264 m \u2264 300 ) \u2014 the number of vertices and the number of edges in the graph. Each of the next m lines contains a description of an undirected edge: three integers v , u and w ( 1 \u2264 v, u \u2264 n ; v = \u0338 u ; 0 \u2264 w \u2264 10^ 8 ) \u2014 the vertices the edge connects and its weight. Note that there might be multiple edges between a pair of vertices. The edges form a connected graph. The next line contains five integers p, k, a, b and c ( 1 \u2264 p \u2264 10^ 5 ; p \u2264 k \u2264 10^ 7 ; 0 \u2264 a, b \u2264 10^ 8 ; 1 \u2264 c \u2264 10^ 8 ) \u2014 the number of queries provided explicitly, the total number of queries and parameters to generate the queries. The next line contains p integers q_ 1, q_ 2, . . . , q_ p ( 0 \u2264 q_ j < c ) \u2014 the first p queries.",
    "output": "Print a single integer \u2014 the xor of answers to all queries.",
    "note": "The queries in the first example are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 . The answers are 11, 9, 7, 3, 1, 5, 8, 7, 5, 7, 11 . The queries in the second example are 3, 0, 2, 1, 6, 0, 3, 5, 4, 1 . The answers are 14, 19, 15, 16, 11, 19, 14, 12, 13, 16 . The queries in the third example are 75, 0, 0, . . . . The answers are 50, 150, 150, . . . .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1633E"
  },
  {
    "title": "Make Them Equal",
    "url": "https://codeforces.com/problemset/problem/1633/D",
    "history": "You have an array of integers a of size n . Initially, all elements of the array are equal to 1 . You can perform the following operation: choose two integers i ( 1 \u2264 i \u2264 n ) and x ( x > 0 ) , and then increase the value of a_ i by \u230aa_ i/ x\u230b ( i. e. make a_ i = a_ i + \u230aa_ i/ x\u230b ) . After performing all operations, you will receive c_ i coins for all such i that a_ i = b_ i . Your task is to determine the maximum number of coins that you can receive by performing no more than k operations.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 3; 0 \u2264 k \u2264 10^ 6 ) \u2014 the size of the array and the maximum number of operations, respectively. The second line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 3 ) . The third line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 6 ) . The sum of n over all test cases does not exceed 10^ 3 .",
    "output": "For each test case, print one integer \u2014 the maximum number of coins that you can get by performing no more than k operations.",
    "note": "",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1633D"
  },
  {
    "title": "Minority",
    "url": "https://codeforces.com/problemset/problem/1633/B",
    "history": "You are given a string s , consisting only of characters ' 0' and ' 1' . You have to choose a contiguous substring of s and remove all occurrences of the character, which is a strict minority in it, from the substring. That is, if the amount of ' 0' s in the substring is strictly smaller than the amount of ' 1' s, remove all occurrences of ' 0' from the substring. If the amount of ' 1' s is strictly smaller than the amount of ' 0' s, remove all occurrences of ' 1' . If the amounts are the same, do nothing. You have to apply the operation exactly once. What is the maximum amount of characters that can be removed?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The only line of each testcase contains a non- empty string s , consisting only of characters ' 0' and ' 1' . The length of s doesn' t exceed 2 \u00b7 10^ 5 . The total length of strings s over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the maximum amount of characters that can be removed after applying the operation exactly once.",
    "note": "In the first testcase, you can choose substrings \" 0\" , \" 1\" or \" 01\" . In \" 0\" the amount of ' 0' is 1 , the amount of ' 1' is 0 . ' 1' is a strict minority, thus all occurrences of it are removed from the substring. However, since there were 0 of them, nothing changes. Same for \" 1\" . And in \" 01\" neither of ' 0' or ' 1' is a strict minority. Thus, nothing changes. So there is no way to remove any characters. In the second testcase, you can choose substring \" 10101010101\" . It contains 5 characters ' 0' and 6 characters ' 1' . ' 0' is a strict minority. Thus, you can remove all its occurrences. There exist other substrings that produce the same answer. In the third testcase, you can choose substring \" 011000100\" . It contains 6 characters ' 0' and 3 characters ' 1' . ' 1' is a strict minority. Thus, you can remove all its occurrences.",
    "topics": [
      "greedy"
    ],
    "id": "1633B"
  },
  {
    "title": "New Year Concert",
    "url": "https://codeforces.com/problemset/problem/1632/D",
    "history": "New Year is just around the corner, which means that in School 179, preparations for the concert are in full swing. There are n classes in the school, numbered from 1 to n , the i - th class has prepared a scene of length a_ i minutes. As the main one responsible for holding the concert, Idnar knows that if a concert has k scenes of lengths b_ 1 , b_ 2 , . . . , b_ k minutes, then the audience will get bored if there exist two integers l and r such that 1 \u2264 l \u2264 r \u2264 k and ( b_ l, b_ l + 1, . . . , b_ r - 1, b_ r) = r - l + 1 , where ( b_ l, b_ l + 1, . . . , b_ r - 1, b_ r) is equal to the greatest common divisor ( GCD) of the numbers b_ l , b_ l + 1 , . . . , b_ r - 1 , b_ r . To avoid boring the audience, Idnar can ask any number of times ( possibly zero) for the t - th class ( 1 \u2264 t \u2264 k ) to make a new scene d minutes in length, where d can be any positive integer. Thus, after this operation, b_ t is equal to d . Note that t and d can be different for each operation. For a sequence of scene lengths b_ 1 , b_ 2 , . . . , b_ k , let f( b) be the minimum number of classes Idnar has to ask to change their scene if he wants to avoid boring the audience. Idnar hasn' t decided which scenes will be allowed for the concert, so he wants to know the value of f for each non- empty prefix of a . In other words, Idnar wants to know the values of f( a_ 1) , f( a_ 1 , a_ 2) , . . . , f( a_ 1 , a_ 2 , . . . , a_ n) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of classes in the school. The second line contains n positive integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the lengths of the class scenes.",
    "output": "Print a sequence of n integers in a single line \u2014 f( a_ 1) , f( a_ 1 , a_ 2) , . . . , f( a_ 1 , a_ 2 , . . . , a_ n) .",
    "note": "In the first test we can change 1 to 2 , so the answer is 1 . In the second test: [ 1] can be changed into [ 2] , [ 1, 4] can be changed into [ 3, 4] , [ 1, 4, 2] can be changed into [ 2, 3, 2] .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1632D"
  },
  {
    "title": "Fun with Even Subarrays",
    "url": "https://codeforces.com/problemset/problem/1631/B",
    "history": "You are given an array a of n elements. You can apply the following operation to it any number of times: Select some subarray from a of even size 2k that begins at position l ( 1\u2264 l \u2264 l+ 2\u00b7k- 1\u2264 n , k \u2265 1 ) and for each i between 0 and k- 1 ( inclusive) , assign the value a_ l+ k+ i to a_ l+ i . For example, if a = [ 2, 1, 3, 4, 5, 3] , then choose l = 1 and k = 2 , applying this operation the array will become a = [ 3, 4, 3, 4, 5, 3] . Find the minimum number of operations ( possibly zero) needed to make all the elements of the array equal.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case consists of n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each line containing the answer to the corresponding test case \u2014 the minimum number of operations needed to make equal all the elements of the array with the given operation.",
    "note": "In the first test, all elements are equal, therefore no operations are needed. In the second test, you can apply one operation with k= 1 and l= 1 , set a_ 1 : = a_ 2 , and the array becomes [ 1, 1] with 1 operation. In the third test, you can apply one operation with k= 1 and l= 4 , set a_ 4 : = a_ 5 , and the array becomes [ 4, 4, 4, 4, 4] . In the fourth test, you can apply one operation with k= 1 and l= 3 , set a_ 3 : = a_ 4 , and the array becomes [ 4, 2, 3, 3] , then you can apply another operation with k= 2 and l= 1 , set a_ 1 : = a_ 3 , a_ 2 : = a_ 4 , and the array becomes [ 3, 3, 3, 3] . In the fifth test, there is only one element, therefore no operations are needed.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1631B"
  },
  {
    "title": "Min Max Swap",
    "url": "https://codeforces.com/problemset/problem/1631/A",
    "history": "You are given two arrays a and b of n positive integers each. You can apply the following operation to them any number of times: Select an index i ( 1\u2264 i\u2264 n ) and swap a_ i with b_ i ( i. e. a_ i becomes b_ i and vice versa) . Find the minimum possible value of max( a_ 1, a_ 2, . . . , a_ n) \u00b7max( b_ 1, b_ 2, . . . , b_ n) you can get after applying such operation any number of times ( possibly zero) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 1\u2264 n\u2264 100 ) \u2014 the length of the arrays. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10 000 ) where a_ i is the i - th element of the array a . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10 000 ) where b_ i is the i - th element of the array b .",
    "output": "For each test case, print a single integer, the minimum possible value of max( a_ 1, a_ 2, . . . , a_ n) \u00b7max( b_ 1, b_ 2, . . . , b_ n) you can get after applying such operation any number of times.",
    "note": "In the first test, you can apply the operations at indices 2 and 6 , then a = [ 1, 4, 6, 5, 1, 5] and b = [ 3, 2, 3, 2, 2, 2] , max( 1, 4, 6, 5, 1, 5) \u00b7max( 3, 2, 3, 2, 2, 2) = 6 \u00b7 3 = 18 . In the second test, no matter how you apply the operations, a = [ 3, 3, 3] and b = [ 3, 3, 3] will always hold, so the answer is max( 3, 3, 3) \u00b7max( 3, 3, 3) = 3 \u00b7 3 = 9 . In the third test, you can apply the operation at index 1 , then a = [ 2, 2] , b = [ 1, 1] , so the answer is max( 2, 2) \u00b7max( 1, 1) = 2 \u00b7 1 = 2 .",
    "topics": [
      "greedy"
    ],
    "id": "1631A"
  },
  {
    "title": "Flipping Range",
    "url": "https://codeforces.com/problemset/problem/1630/D",
    "history": "You are given an array a of n integers and a set B of m positive integers such that 1 \u2264 b_ i \u2264\u230an/ 2\u230b for 1\u2264 i\u2264 m , where b_ i is the i - th element of B . You can make the following operation on a : Select some x such that x appears in B . Select an interval from array a of size x and multiply by - 1 every element in the interval. Formally, select l and r such that 1\u2264 l\u2264 r \u2264 n and r- l+ 1= x , then assign a_ i: = - a_ i for every i such that l\u2264 i\u2264 r . Consider the following example, let a= [ 0, 6, - 2, 1, - 4, 5] and B= { 1, 2} : [ 0, 6, - 2, - 1, 4, 5] is obtained after choosing size 2 and l= 4 , r= 5 . [ 0, 6, 2, - 1, 4, 5] is obtained after choosing size 1 and l= 3 , r= 3 . Find the maximum \u2211_ i= 1^ n a_ i you can get after applying such operation any number of times ( possibly zero) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 2\u2264 n \u2264 10^ 6 , 1 \u2264 m \u2264\u230an/ 2\u230b ) \u2014 the number of elements of a and B respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i \u2264 10^ 9 ) . The third line of each test case contains m distinct positive integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264\u230an/ 2\u230b ) \u2014 the elements in the set B . It' s guaranteed that the sum of n over all test cases does not exceed 10^ 6 .",
    "output": "For each test case print a single integer \u2014 the maximum possible sum of all a_ i after applying such operation any number of times.",
    "note": "In the first test, you can apply the operation x= 1 , l= 3 , r= 3 , and the operation x= 1 , l= 5 , r= 5 , then the array becomes [ 0, 6, 2, 1, 4, 5] . In the second test, you can apply the operation x= 2 , l= 2 , r= 3 , and the array becomes [ 1, 1, - 1, - 1, 1, - 1, 1] , then apply the operation x= 2 , l= 3 , r= 4 , and the array becomes [ 1, 1, 1, 1, 1, - 1, 1] . There is no way to achieve a sum bigger than 5 .",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy",
      "number theory"
    ],
    "id": "1630D"
  },
  {
    "title": "Paint the Middle",
    "url": "https://codeforces.com/problemset/problem/1630/C",
    "history": "You are given n elements numbered from 1 to n , the element i has value a_ i and color c_ i , initially, c_ i = 0 for all i . The following operation can be applied: Select three elements i , j and k ( 1 \u2264 i < j < k \u2264 n ) , such that c_ i , c_ j and c_ k are all equal to 0 and a_ i = a_ k , then set c_ j = 1 . Find the maximum value of \u2211_ i= 1^ nc_ i that can be obtained after applying the given operation any number of times.",
    "input": "The first line contains an integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements. The second line consists of n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the value of the i - th element.",
    "output": "Print a single integer in a line \u2014 the maximum value of \u2211_ i= 1^ nc_ i that can be obtained after applying the given operation any number of times.",
    "note": "In the first test, it is possible to apply the following operations in order:",
    "topics": [
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1630C"
  },
  {
    "title": "Range and Partition",
    "url": "https://codeforces.com/problemset/problem/1630/B",
    "history": "Given an array a of n integers, find a range of values [ x, y] ( x \u2264 y ) , and split a into exactly k ( 1 \u2264 k \u2264 n ) subarrays in such a way that: Each subarray is formed by several continuous elements of a , that is, it is equal to a_ l, a_ l+ 1, . . . , a_ r for some l and r ( 1 \u2264 l \u2264 r \u2264 n ) . Each element from a belongs to exactly one subarray. In each subarray the number of elements inside the range [ x, y] ( inclusive) is strictly greater than the number of elements outside the range. An element with index i is inside the range [ x, y] if and only if x \u2264 a_ i \u2264 y . Print any solution that minimizes y - x .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a and the number of subarrays required in the partition. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) where a_ i is the i - th element of the array. It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, print k+ 1 lines. In the first line, print x and y \u2014 the limits of the found range. Then print k lines, the i - th should contain l_ i and r_ i ( 1\u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the limits of the i - th subarray. You can print the subarrays in any order.",
    "note": "In the first test, there should be only one subarray, which must be equal to the whole array. There are 2 elements inside the range [ 1, 2] and 0 elements outside, if the chosen range is [ 1, 1] , there will be 1 element inside ( a_ 1 ) and 1 element outside ( a_ 2 ) , and the answer will be invalid. In the second test, it is possible to choose the range [ 2, 2] , and split the array in subarrays ( 1, 3) and ( 4, 4) , in subarray ( 1, 3) there are 2 elements inside the range ( a_ 2 and a_ 3 ) and 1 element outside ( a_ 1 ) , in subarray ( 4, 4) there is only 1 element ( a_ 4 ) , and it is inside the range. In the third test, it is possible to choose the range [ 5, 5] , and split the array in subarrays ( 1, 4) , ( 5, 7) and ( 8, 11) , in the subarray ( 1, 4) there are 3 elements inside the range and 1 element outside, in the subarray ( 5, 7) there are 2 elements inside and 1 element outside and in the subarray ( 8, 11) there are 3 elements inside and 1 element outside.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1630B"
  },
  {
    "title": "GCD Arrays",
    "url": "https://codeforces.com/problemset/problem/1629/B",
    "history": "Consider the array a composed of all the integers in the range [ l, r] . For example, if l = 3 and r = 7 , then a = [ 3, 4, 5, 6, 7] . Given l , r , and k , is it possible for ( a) to be greater than 1 after doing the following operation at most k times? Choose 2 numbers from a . Permanently remove one occurrence of each of them from the array. Insert their product back into a . ( b) denotes the greatest common divisor ( GCD) of the integers in b .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of test cases follows. The input for each test case consists of a single line containing 3 non- negative integers l , r , and k ( 1 \u2264 l \u2264 r \u2264 10^ 9, 0 \u2264 k \u2264 r - l ) .",
    "output": "For each test case, print \" YES\" if it is possible to have the GCD of the corresponding array greater than 1 by performing at most k operations, and \" NO\" otherwise ( case insensitive) .",
    "note": "For the first test case, a = [ 1] , so the answer is \" NO\" , since the only element in the array is 1 . For the second test case the array is a = [ 3, 4, 5] and we have 1 operation. After the first operation the array can change to: [ 3, 20] , [ 4, 15] or [ 5, 12] all of which having their greatest common divisor equal to 1 so the answer is \" NO\" . For the third test case, a = [ 13] , so the answer is \" YES\" , since the only element in the array is 13 . For the fourth test case, a = [ 4] , so the answer is \" YES\" , since the only element in the array is 4 .",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1629B"
  },
  {
    "title": "Download More RAM",
    "url": "https://codeforces.com/problemset/problem/1629/A",
    "history": "Did you know you can download more RAM? There is a shop with n different pieces of software that increase your RAM. The i - th RAM increasing software takes a_ i GB of memory to run ( temporarily, once the program is done running, you get the RAM back) , and gives you an additional b_ i GB of RAM ( permanently) . Each software can only be used once. Your PC currently has k GB of RAM. Note that you can' t use a RAM- increasing software if it takes more GB of RAM to use than what you currently have. Since RAM is the most important thing in the world, you wonder, what is the maximum possible amount of RAM achievable?",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains the integers n and k ( 1 \u2264 n \u2264 100 , 1 \u2264 k \u2264 1000 ) . Then two lines follow, each containing n integers describing the arrays a and b ( 1 \u2264 a_ i, b_ i \u2264 1000 ) .",
    "output": "For each test case, output a single line containing the largest amount of RAM you can achieve.",
    "note": "In the first test case, you only have enough RAM to run the third software initially, but that increases your RAM to 20 GB, which allows you to use the first software, increasing your RAM to 29 GB. The only software left needs 30 GB of RAM, so you have to stop here. In the second test case, you can use the first, second, fourth and fifth software that need only 1 GB of RAM per software to run to increase your RAM to 5 GB, and then use the last remaining one to increase your RAM to 6 GB. In the third test case, all the software need more than 1 GB of RAM to run, so the amount of RAM you have stays at 1 GB.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1629A"
  },
  {
    "title": "Grid Xor",
    "url": "https://codeforces.com/problemset/problem/1628/C",
    "history": "Note: The XOR- sum of set { s_ 1, s_ 2, . . . , s_ m} is defined as s_ 1 \u2295 s_ 2 \u2295. . . \u2295 s_ m , where \u2295 denotes the bitwise XOR operation. After almost winning IOI, Victor bought himself an n\u00d7 n grid containing integers in each cell. n is an even integer. The integer in the cell in the i - th row and j - th column is a_ i, j . Sadly, Mihai stole the grid from Victor and told him he would return it with only one condition: Victor has to tell Mihai the XOR- sum of all the integers in the whole grid. Victor doesn' t remember all the elements of the grid, but he remembers some information about it: For each cell, Victor remembers the XOR- sum of all its neighboring cells. Two cells are considered neighbors if they share an edge \u2014 in other words, for some integers 1 \u2264 i, j, k, l \u2264 n , the cell in the i - th row and j - th column is a neighbor of the cell in the k - th row and l - th column if | i - k| = 1 and j = l , or if i = k and | j - l| = 1 . To get his grid back, Victor is asking you for your help. Can you use the information Victor remembers to find the XOR- sum of the whole grid? It can be proven that the answer is unique.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single even integer n ( 2 \u2264 n \u2264 1000 ) \u2014 the size of the grid. Then follows n lines, each containing n integers. The j - th integer in the i - th of these lines represents the XOR- sum of the integers in all the neighbors of the cell in the i - th row and j - th column. It is guaranteed that the sum of n over all test cases doesn' t exceed 1000 and in the original grid 0 \u2264 a_ i, j\u2264 2^ 30 - 1 . Hack FormatTo hack a solution, use the following format: The first line should contain a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case should contain a single even integer n ( 2 \u2264 n \u2264 1000 ) \u2014 the size of the grid. Then n lines should follow, each containing n integers. The j - th integer in the i - th of these lines is a_ i, j in Victor' s original grid. The values in the grid should be integers in the range [ 0, 2^ 30- 1] The sum of n over all test cases must not exceed 1000 .",
    "output": "For each test case, output a single integer \u2014 the XOR- sum of the whole grid.",
    "note": "For the first test case, one possibility for Victor' s original grid is: 1 3 2 4 For the second test case, one possibility for Victor' s original grid is: 3 8 8 5 9 5 5 1 5 5 9 9 8 4 2 9 For the third test case, one possibility for Victor' s original grid is: 4 3 2 1 1 2 3 4 5 6 7 8 8 9 9 1",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "interactive",
      "math"
    ],
    "id": "1628C"
  },
  {
    "title": "Peculiar Movie Preferences",
    "url": "https://codeforces.com/problemset/problem/1628/B",
    "history": "Mihai plans to watch a movie. He only likes palindromic movies, so he wants to skip some ( possibly zero) scenes to make the remaining parts of the movie palindromic. You are given a list s of n non- empty strings of length at most 3 , representing the scenes of Mihai' s movie. A subsequence of s is called awesome if it is non- empty and the concatenation of the strings in the subsequence, in order, is a palindrome. Can you help Mihai check if there is at least one awesome subsequence of s ? A palindrome is a string that reads the same backward as forward, for example strings \" z\" , \" aaa\" , \" aba\" , \" abccba\" are palindromes, but strings \" codeforces\" , \" reality\" , \" ab\" are not. A sequence a is a non- empty subsequence of a non- empty sequence b if a can be obtained from b by deletion of several ( possibly zero, but not all) elements.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of scenes in the movie. Then follows n lines, the i - th of which containing a single non- empty string s_ i of length at most 3 , consisting of lowercase Latin letters. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print \" YES\" if there is an awesome subsequence of s , or \" NO\" otherwise ( case insensitive) .",
    "note": "In the first test case, an awesome subsequence of s is [ ab, cc, ba]",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1628B"
  },
  {
    "title": "Meximum Array",
    "url": "https://codeforces.com/problemset/problem/1628/A",
    "history": "Mihai has just learned about the MEX concept and since he liked it so much, he decided to use it right away. Given an array a of n non- negative integers, Mihai wants to create a new array b that is formed in the following way: While a is not empty: Choose an integer k ( 1 \u2264 k \u2264 | a| ) . Append the MEX of the first k numbers of the array a to the end of array b and erase them from the array a , shifting the positions of the remaining numbers in a . But, since Mihai loves big arrays as much as the MEX concept, he wants the new array b to be the lexicographically maximum. So, Mihai asks you to tell him what the maximum array b that can be created by constructing the array optimally is. An array x is lexicographically greater than an array y if in the first position where x and y differ x_ i > y_ i or if | x| > | y| and y is a prefix of x ( where | x| denotes the size of the array x ) . The MEX of a set of non- negative integers is the minimal non- negative integer such that it is not in the set. For example, MEX( 1, 2, 3 ) = 0 and MEX( 0, 1, 2, 4, 5 ) = 3 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array a . The second line of each test case contains n non- negative integers a_ 1, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) , where a_ i is the i - th integer from the array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print m \u2014 the length of the maximum array b Mihai can create, followed by m integers denoting the elements of the array b .",
    "note": "In the first test case, the lexicographically maximum array b is obtained by selecting k= 5 , resulting in the MEX of the whole array a . It is lexicographically maximum because an array starting with a smaller number than 4 is lexicographically smaller, and choosing a k< 5 would result in an array starting with a number smaller than 4 . In the second test case, there are two ways to obtain the maximum array: first selecting k= 6 , then k= 2 , or first selecting k= 7 and then k= 1 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1628A"
  },
  {
    "title": "Not Splitting",
    "url": "https://codeforces.com/problemset/problem/1627/F",
    "history": "There is a k \u00d7 k grid, where k is even. The square in row r and column c is denoted by ( r, c) . Two squares ( r_ 1, c_ 1) and ( r_ 2, c_ 2) are considered adjacent if | r_ 1 - r_ 2 | + | c_ 1 - c_ 2 | = 1 . An array of adjacent pairs of squares is called strong if it is possible to cut the grid along grid lines into two connected, congruent pieces so that each pair is part of the same piece. Two pieces are congruent if one can be matched with the other by translation, rotation, and reflection, or a combination of these. The picture above represents the first test case. Arrows indicate pairs of squares, and the thick black line represents the cut. You are given an array a of n pairs of adjacent squares. Find the size of the largest strong subsequence of a . An array p is a subsequence of an array q if p can be obtained from q by deletion of several ( possibly, zero or all) elements.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two space- separated integers n and k ( 1 \u2264 n \u2264 10^ 5 ; 2 \u2264 k \u2264 500 , k is even) \u2014 the length of a and the size of the grid, respectively. Then n lines follow. The i - th of these lines contains four space- separated integers r_ i, 1 , c_ i, 1 , r_ i, 2 , and c_ i, 2 ( 1 \u2264 r_ i, 1, c_ i, 1, r_ i, 2, c_ i, 2\u2264 k ) \u2014 the i - th element of a , represented by the row and column of the first square ( r_ i, 1, c_ i, 1) and the row and column of the second square ( r_ i, 2, c_ i, 2) . These squares are adjacent. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 , and the sum of k over all test cases does not exceed 500 .",
    "output": "For each test case, output a single integer \u2014 the size of the largest strong subsequence of a .",
    "note": "In the first test case, the array a is not good, but if we take the subsequence [ a_ 1, a_ 2, a_ 3, a_ 4, a_ 5, a_ 6, a_ 8] , then the square can be split as shown in the statement. In the second test case, we can take the subsequence consisting of the last four elements of a and cut the square with a horizontal line through its center.",
    "topics": [
      "geometry",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1627F"
  },
  {
    "title": "Not Sitting",
    "url": "https://codeforces.com/problemset/problem/1627/B",
    "history": "Rahul and Tina are looking forward to starting their new year at college. As they enter their new classroom, they observe the seats of students are arranged in a n \u00d7 m grid. The seat in row r and column c is denoted by ( r, c) , and the distance between two seats ( a, b) and ( c, d) is | a- c| + | b- d| . As the class president, Tina has access to exactly k buckets of pink paint. The following process occurs. First, Tina chooses exactly k seats in the classroom to paint with pink paint. One bucket of paint can paint exactly one seat. After Tina has painted k seats in the previous step, Rahul chooses where he sits. He will not choose a seat that has been painted pink due to his hatred of the colour pink. After Rahul has chosen his seat, Tina chooses a seat for herself. She can choose any of the seats, painted or not, other than the one chosen by Rahul. Rahul wants to choose a seat such that he sits as close to Tina as possible. However, Tina wants to sit as far away from Rahul as possible due to some complicated relationship history that we couldn' t fit into the statement! Now, Rahul wonders for k = 0, 1, . . . , n \u00b7 m - 1 , if Tina has k buckets of paint, how close can Rahul sit to Tina, if both Rahul and Tina are aware of each other' s intentions and they both act as strategically as possible? Please help satisfy Rahul' s curiosity!",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n , m ( 2 \u2264 n \u00b7 m \u2264 10^ 5 ) \u2014 the number of rows and columns of seats in the classroom. The sum of n \u00b7 m across all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output n \u00b7 m ordered integers \u2014 the distance between Rahul and Tina if both of them act optimally for every k \u2208 [ 0, n \u00b7 m - 1] .",
    "note": "One possible sequence of choices for the first testcase where Tina has k= 3 buckets of paints is as follows. Tina paints the seats at positions ( 1, 2) , ( 2, 2) , ( 3, 2) with pink paint. Rahul chooses the seat at ( 3, 1) after which Tina chooses to sit at ( 1, 3) . Therefore, the distance between Tina and Rahul is | 3- 1| + | 1- 3| = 4 , and we can prove that this is indeed the minimum possible distance under the given constraints. There may be other choices of seats which lead to the same answer as well. For k= 0 in the first test case, Rahul can decide to sit at ( 2, 2) and Tina can decide to sit at ( 4, 3) so the distance between them would be | 2 - 4| + | 2 - 3| = 3 . Below are pictorial representations of the k= 3 and k= 0 cases for the first test case. A possible seating arrangement for k= 3 . A possible seating arrangement for k= 0 .",
    "topics": [
      "games",
      "greedy",
      "sortings"
    ],
    "id": "1627B"
  },
  {
    "title": "Black and White Tree",
    "url": "https://codeforces.com/problemset/problem/1626/E",
    "history": "You are given a tree consisting of n vertices. Some of the vertices ( at least two) are black, all the other vertices are white. You place a chip on one of the vertices of the tree, and then perform the following operations: let the current vertex where the chip is located is x . You choose a black vertex y , and then move the chip along the first edge on the simple path from x to y . You are not allowed to choose the same black vertex y in two operations in a row ( i. e. , for every two consecutive operations, the chosen black vertex should be different) . You end your operations when the chip moves to the black vertex ( if it is initially placed in a black vertex, you don' t perform the operations at all) , or when the number of performed operations exceeds 100^ 500 . For every vertex i , you have to determine if there exists a ( possibly empty) sequence of operations that moves the chip to some black vertex, if the chip is initially placed on the vertex i .",
    "input": "The first line contains one integer n ( 3 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 1 ) , where c_ i = 0 means that the i - th vertex is white, and c_ i = 1 means that the i - th vertex is black. At least two values of c_ i are equal to 1 . Then n- 1 lines follow, each of them contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) \u2014 the endpoints of some edge. These edges form a tree.",
    "output": "Print n integers. The i - th integer should be equal to 1 if there exists a ( possibly empty) sequence of operations that moves the chip to some black vertex if it is placed on the vertex i , and 0 if no such sequence of operations exists.",
    "note": "",
    "topics": [
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1626E"
  },
  {
    "title": "Martial Arts Tournament",
    "url": "https://codeforces.com/problemset/problem/1626/D",
    "history": "Monocarp is planning to host a martial arts tournament. There will be three divisions based on weight: lightweight, middleweight and heavyweight. The winner of each division will be determined by a single elimination system. In particular, that implies that the number of participants in each division should be a power of two. Additionally, each division should have a non- zero amount of participants. n participants have registered for the tournament so far, the i - th of them weighs a_ i . To split participants into divisions, Monocarp is going to establish two integer weight boundaries x and y ( x < y ) . All participants who weigh strictly less than x will be considered lightweight. All participants who weigh greater or equal to y will be considered heavyweight. The remaining participants will be considered middleweight. It' s possible that the distribution doesn' t make the number of participants in each division a power of two. It can also lead to empty divisions. To fix the issues, Monocarp can invite an arbitrary number of participants to each division. Note that Monocarp can' t kick out any of the n participants who have already registered for the tournament. However, he wants to invite as little extra participants as possible. Help Monocarp to choose x and y in such a way that the total amount of extra participants required is as small as possible. Output that amount.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of the registered participants. The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the weights of the registered participants. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the smallest number of extra participants Monocarp is required to invite after he chooses the weight boundaries x and y .",
    "note": "In the first testcase of the example, Monocarp can choose x= 2 and y= 3 . Lightweight, middleweight and heavyweight divisions will have 2 , 1 and 1 participants, respectively. They all are powers of two, so no extra participants are required. In the second testcase of the example, regardless of the choice of x and y , one division will have 1 participant, the rest will have 0 . Thus, Monocarp will have to invite 1 participant into both of the remaining divisions. In the third testcase of the example, Monocarp can choose x= 1 and y= 2 . Lightweight, middleweight and heavyweight divisions will have 0 , 3 and 3 participants, respectively. So an extra participant is needed in each division. In the fourth testcase of the example, Monocarp can choose x= 8 and y= 9 . Lightweight, middleweight and heavyweight divisions will have 8 , 0 and 0 participants, respectively. Middleweight and heavyweight division need an extra participant each.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1626D"
  },
  {
    "title": "Monsters And Spells",
    "url": "https://codeforces.com/problemset/problem/1626/C",
    "history": "Monocarp is playing a computer game once again. He is a wizard apprentice, who only knows a single spell. Luckily, this spell can damage the monsters. The level he' s currently on contains n monsters. The i - th of them appears k_ i seconds after the start of the level and has h_ i health points. As an additional constraint, h_ i \u2264 k_ i for all 1 \u2264 i \u2264 n . All k_ i are different. Monocarp can cast the spell at moments which are positive integer amounts of second after the start of the level: 1, 2, 3, . . . The damage of the spell is calculated as follows. If he didn' t cast the spell at the previous second, the damage is 1 . Otherwise, let the damage at the previous second be x . Then he can choose the damage to be either x + 1 or 1 . A spell uses mana: casting a spell with damage x uses x mana. Mana doesn' t regenerate. To kill the i - th monster, Monocarp has to cast a spell with damage at least h_ i at the exact moment the monster appears, which is k_ i . Note that Monocarp can cast the spell even when there is no monster at the current second. The mana amount required to cast the spells is the sum of mana usages for all cast spells. Calculate the least amount of mana required for Monocarp to kill all monsters. It can be shown that it' s always possible to kill all monsters under the constraints of the problem.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of the testcase contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of monsters in the level. The second line of the testcase contains n integers k_ 1 < k_ 2 < . . . < k_ n ( 1 \u2264 k_ i \u2264 10^ 9 ) \u2014 the number of second from the start the i - th monster appears at. All k_ i are different, k_ i are provided in the increasing order. The third line of the testcase contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 k_ i \u2264 10^ 9 ) \u2014 the health of the i - th monster. The sum of n over all testcases doesn' t exceed 10^ 4 .",
    "output": "For each testcase, print a single integer \u2014 the least amount of mana required for Monocarp to kill all monsters.",
    "note": "In the first testcase of the example, Monocarp can cast spells 3, 4, 5 and 6 seconds from the start with damages 1, 2, 3 and 4 , respectively. The damage dealt at 6 seconds is 4 , which is indeed greater than or equal to the health of the monster that appears. In the second testcase of the example, Monocarp can cast spells 3, 4 and 5 seconds from the start with damages 1, 2 and 3 , respectively. In the third testcase of the example, Monocarp can cast spells 4, 5, 7, 8 and 9 seconds from the start with damages 1, 2, 1, 1 and 2 , respectively.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1626C"
  },
  {
    "title": "Minor Reduction",
    "url": "https://codeforces.com/problemset/problem/1626/B",
    "history": "You are given a decimal representation of an integer x without leading zeros. You have to perform the following reduction on it exactly once: take two neighboring digits in x and replace them with their sum without leading zeros ( if the sum is 0 , it' s represented as a single 0 ) . For example, if x = 10057 , the possible reductions are: choose the first and the second digits 1 and 0 , replace them with 1+ 0= 1 ; the result is 1057 ; choose the second and the third digits 0 and 0 , replace them with 0+ 0= 0 ; the result is also 1057 ; choose the third and the fourth digits 0 and 5 , replace them with 0+ 5= 5 ; the result is still 1057 ; choose the fourth and the fifth digits 5 and 7 , replace them with 5+ 7= 12 ; the result is 10012 . What' s the largest number that can be obtained?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. Each testcase consists of a single integer x ( 10 \u2264 x < 10^ 200000 ) . x doesn' t contain leading zeros. The total length of the decimal representations of x over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a single integer \u2014 the largest number that can be obtained after the reduction is applied exactly once. The number should not contain leading zeros.",
    "note": "The first testcase of the example is already explained in the statement. In the second testcase, there is only one possible reduction: the first and the second digits.",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1626B"
  },
  {
    "title": "Elementary Particles",
    "url": "https://codeforces.com/problemset/problem/1625/B",
    "history": "Martians are actively engaged in interplanetary trade. Olymp City, the Martian city known for its spaceport, has become a place where goods from all the corners of our Galaxy come. To deliver even more freight from faraway planets, Martians need fast spaceships. A group of scientists conducts experiments to build a fast engine for the new spaceship. In the current experiment, there are n elementary particles, the i - th of them has type a_ i . Denote a subsegment of the particle sequence ( a_ 1, a_ 2, . . . , a_ n ) as a sequence ( a_ l, a_ l+ 1, . . . , a_ r ) for some left bound l and right bound r ( 1 \u2264 l \u2264 r \u2264 n ) . For instance, the sequence ( 1 4 2 8 5 7) for l= 2 and r= 4 has the sequence ( 4 2 8) as a subsegment. Two subsegments are considered different if at least one bound of those subsegments differs. Note that the subsegments can be equal as sequences but still considered different. For example, consider the sequence ( 1 1 1 1 1) and two of its subsegments: one with l= 1 and r= 3 and another with l= 2 and r= 4 . Both subsegments are equal to ( 1 1 1) , but still considered different, as their left and right bounds differ. The scientists want to conduct a reaction to get two different subsegments of the same length. Denote this length k . The resulting pair of subsegments must be harmonious, i. e. for some i ( 1 \u2264 i \u2264 k ) it must be true that the types of particles on the i - th position are the same for these two subsegments. For example, the pair ( 1 7 3) and ( 4 7 8) is harmonious, as both subsegments have 7 on the second position. The pair ( 1 2 3) and ( 3 1 2) is not harmonious. The longer are harmonious subsegments, the more chances for the scientists to design a fast engine. So, they asked you to calculate the maximal possible length of harmonious pair made of different subsegments.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The following are descriptions of the test cases. The first line contains an integer n ( 2 \u2264 n \u2264 150 000 ) \u2014 the amount of elementary particles in the sequence. The second line contains n integers a_ i ( 1 \u2264 a_ i \u2264 150 000 ) \u2014 types of elementary particles. It is guaranteed that the sum of n over all test cases does not exceed 3\u00b710^ 5 .",
    "output": "For each test, print a single integer, maximal possible length of harmonious pair made of different subsegments. If such pair does not exist, print - 1 instead.",
    "note": "The first test case is shown on the picture below: As you can see from it, you may choose the subsegments ( 2 1 3 4) and ( 3 1 5 2) , which are a harmonious pair. Their length is equal to 4 , so the answer is 4 . In the second test case, you need to take two subsegments: one with l= 1 and r= 5 , and one with l= 2 and r= 6 . It' s not hard to observe that these segments are a harmonious pair and considered different even though they are both equal to ( 1 1 1 1 1) . In the third test case, you cannot make a harmonious pair, so the answer is - 1 .",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1625B"
  },
  {
    "title": "Ancient Civilization",
    "url": "https://codeforces.com/problemset/problem/1625/A",
    "history": "Martian scientists explore Ganymede, one of Jupiter' s numerous moons. Recently, they have found ruins of an ancient civilization. The scientists brought to Mars some tablets with writings in a language unknown to science. They found out that the inhabitants of Ganymede used an alphabet consisting of two letters, and each word was exactly l letters long. So, the scientists decided to write each word of this language as an integer from 0 to 2^ l - 1 inclusively. The first letter of the alphabet corresponds to zero bit in this integer, and the second letter corresponds to one bit. The same word may have various forms in this language. Then, you need to restore the initial form. The process of doing it is described below. Denote the distance between two words as the amount of positions, in which these words differ. For example, the distance between 1001_ 2 and 1100_ 2 ( in binary) is equal to two, as these words have different letters in the second and the fourth positions, counting from left to right. Further, denote the distance between words x and y as d( x, y) . Let the word have n forms, the i - th of which is described with an integer x_ i . All the x_ i are not necessarily different, as two various forms of the word can be written the same. Consider some word y . Then, closeness of the word y is equal to the sum of distances to each of the word forms, i. e. the sum d( x_ i, y) over all 1 \u2264 i \u2264 n . The initial form is the word y with minimal possible nearness. You need to help the scientists and write the program which finds the initial form of the word given all its known forms. Note that the initial form is not necessarily equal to any of the n given forms.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The following are descriptions of the test cases. The first line contains two integers n and l ( 1 \u2264 n \u2264 100 , 1 \u2264l\u2264 30 ) \u2014 the amount of word forms, and the number of letters in one word. The second line contains n integers x_ i ( 0 \u2264 x_ i \u2264 2^ l - 1 ) \u2014 word forms. The integers are not necessarily different.",
    "output": "For each test, print a single integer, the initial form of the word, i. e. such y ( 0 \u2264 y \u2264 2^ l - 1 ) that the sum d( x_ i, y) over all 1 \u2264 i \u2264 n is minimal possible. Note that y can differ from all the integers x_ i . If there are multiple ways to restore the initial form, print any.",
    "note": "In the first test case, the words can be written as x_ 1 = 10010_ 2 , x_ 2 = 01001_ 2 and x_ 3 = 10101_ 2 in binary. Let y = 10001_ 2 . Then, d( x_ 1, y) = 2 ( the difference is in the fourth and the fifth positions) , d( x_ 2, y) = 2 ( the difference is in the first and the second positions) , d( x_ 3, y) = 1 ( the difference is in the third position) . So, the closeness is 2 + 2 + 1 = 5 . It can be shown that you cannot achieve smaller closeness. In the second test case, all the forms are equal to 18 ( 10010_ 2 in binary) , so the initial form is also 18 . It' s easy to see that closeness is equal to zero in this case.",
    "topics": [
      "bitmasks",
      "greedy",
      "math"
    ],
    "id": "1625A"
  },
  {
    "title": "MinOr Tree",
    "url": "https://codeforces.com/problemset/problem/1624/G",
    "history": "Recently, Vlad has been carried away by spanning trees, so his friends, without hesitation, gave him a connected weighted undirected graph of n vertices and m edges for his birthday. Vlad defined the ority of a spanning tree as the bitwise OR of all its weights, and now he is interested in what is the minimum possible ority that can be achieved by choosing a certain spanning tree. A spanning tree is a connected subgraph of a given graph that does not contain cycles. In other words, you want to keep n- 1 edges so that the graph remains connected and the bitwise OR weights of the edges are as small as possible. You have to find the minimum bitwise OR itself.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. An empty line is written in front of each test case. This is followed by two numbers n and m ( 3 \u2264 n \u2264 2 \u00b7 10^ 5, n - 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and edges of the graph, respectively. The next m lines contain the description of the edges. Line i contains three numbers v_ i , u_ i and w_ i ( 1 \u2264 v_ i, u_ i \u2264 n , 1 \u2264 w_ i \u2264 10^ 9 , v_ i = \u0338 u_ i ) \u2014 the vertices that the edge connects and its weight. It is guaranteed that the sum m and the sum n over all test cases does not exceed 2 \u00b7 10^ 5 and each test case contains a connected graph.",
    "output": "Print t lines, each of which contains the answer to the corresponding set of input data \u2014 the minimum possible spanning tree ority.",
    "note": "Graph from the first test case. Ority of this tree equals to 2 or 2 = 2 and it' s minimal. Without excluding edge with weight 1 ority is 1 or 2 = 3.",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1624G"
  },
  {
    "title": "Palindromes Coloring",
    "url": "https://codeforces.com/problemset/problem/1624/D",
    "history": "You have a string s consisting of lowercase Latin alphabet letters. You can color some letters in colors from 1 to k . It is not necessary to paint all the letters. But for each color, there must be a letter painted in that color. Then you can swap any two symbols painted in the same color as many times as you want. After that, k strings will be created, i - th of them will contain all the characters colored in the color i , written in the order of their sequence in the string s . Your task is to color the characters of the string so that all the resulting k strings are palindromes, and the length of the shortest of these k strings is as large as possible. Read the note for the first test case of the example if you need a clarification. Recall that a string is a palindrome if it reads the same way both from left to right and from right to left. For example, the strings abacaba, cccc, z and dxd are palindromes, but the strings abab and aaabaa \u2014 are not.",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input data sets in the test. The descriptions of the input data sets follow. The first line of the description of each input data set contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the string and the number of colors in which its letters can be painted. The second line of the description of each input data set contains a string s of length n consisting of lowercase letters of the Latin alphabet. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each set of input data, output a single integer \u2014 the maximum length of the shortest palindrome string that can be obtained.",
    "note": "In the first test case, s = \" bxyaxzay\" , k= 2 . We use indices in the string from 1 to 8 . The following coloring will work: bxyaxzay ( the letter z remained uncolored) . After painting: swap two red characters ( with the indices 1 and 4 ) , we get axybxzay ; swap two blue characters ( with the indices 5 and 8 ) , we get axybyzax . Now, for each of the two colors we write out the corresponding characters from left to right, we get two strings aba and xyyx . Both of them are palindromes, the length of the shortest is 3 . It can be shown that the greatest length of the shortest palindrome cannot be achieved. In the second set of input data, the following coloring is suitable: [ 1, 1, 2, 2, 3, 3] . There is no need to swap characters. Both received strings are equal to aa, they are palindromes and their length is 2 . In the third set of input data, you can color any character and take it into a string. In the fourth set of input data, you can color the i th character in the color i . In the fifth set of input data can be colored in each of the colors of one character. In the sixth set of input data, the following coloring is suitable: [ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0] . Rearrange the characters so as to get the palindromes abcba and acbca.",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "strings"
    ],
    "id": "1624D"
  },
  {
    "title": "Division by Two and Permutation",
    "url": "https://codeforces.com/problemset/problem/1624/C",
    "history": "You are given an array a consisting of n positive integers. You can perform operations on it. In one operation you can replace any element of the array a_ i with \u230aa_ i/ 2\u230b , that is, by an integer part of dividing a_ i by 2 ( rounding down) . See if you can apply the operation some number of times ( possible 0 ) to make the array a become a permutation of numbers from 1 to n \u2014that is, so that it contains all numbers from 1 to n , each exactly once. For example, if a = [ 1, 8, 25, 2] , n = 4 , then the answer is yes. You could do the following: Replace 8 with \u230a8/ 2\u230b = 4 , then a = [ 1, 4, 25, 2] . Replace 25 with \u230a25/ 2\u230b = 12 , then a = [ 1, 4, 12, 2] . Replace 12 with \u230a12/ 2\u230b = 6 , then a = [ 1, 4, 6, 2] . Replace 6 with \u230a6/ 2\u230b = 3 , then a = [ 1, 4, 3, 2] .",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014the number of test cases. Each test case contains exactly two lines. The first one contains an integer n ( 1 \u2264 n \u2264 50 ) , the second one contains integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "For each test case, output on a separate line: YES if you can make the array a become a permutation of numbers from 1 to n , NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as a positive response) .",
    "note": "The first test case is explained in the text of the problem statement. In the second test case, it is not possible to get a permutation.",
    "topics": [
      "constructive algorithms",
      "flows",
      "graph matchings",
      "greedy",
      "math"
    ],
    "id": "1624C"
  },
  {
    "title": "Middle Duplication",
    "url": "https://codeforces.com/problemset/problem/1623/E",
    "history": "A binary tree of n nodes is given. Nodes of the tree are numbered from 1 to n and the root is the node 1 . Each node can have no child, only one left child, only one right child, or both children. For convenience, let' s denote l_ u and r_ u as the left and the right child of the node u respectively, l_ u = 0 if u does not have the left child, and r_ u = 0 if the node u does not have the right child. Each node has a string label, initially is a single character c_ u . Let' s define the string representation of the binary tree as the concatenation of the labels of the nodes in the in- order. Formally, let f( u) be the string representation of the tree rooted at the node u . f( u) is defined as follows: f( u) = , if u = 0; f( l_ u) + c_ u + f( r_ u) otherwise, where + denotes the string concatenation operation. This way, the string representation of the tree is f( 1) . For each node, we can duplicate its label at most once, that is, assign c_ u with c_ u + c_ u , but only if u is the root of the tree, or if its parent also has its label duplicated. You are given the tree and an integer k . What is the lexicographically smallest string representation of the tree, if we can duplicate labels of at most k nodes? A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains a string c of n lower- case English letters, where c_ i is the initial label of the node i for 1 \u2264 i \u2264 n . Note that the given string c is not the initial string representation of the tree. The i - th of the next n lines contains two integers l_ i and r_ i ( 0 \u2264 l_ i, r_ i \u2264 n ) . If the node i does not have the left child, l_ i = 0 , and if the node i does not have the right child, r_ i = 0 . It is guaranteed that the given input forms a binary tree, rooted at 1 .",
    "output": "Print a single line, containing the lexicographically smallest string representation of the tree if at most k nodes have their labels duplicated.",
    "note": "The images below present the tree for the examples. The number in each node is the node number, while the subscripted letter is its label. To the right is the string representation of the tree, with each letter having the same color as the corresponding node. Here is the tree for the first example. Here we duplicated the labels of nodes 1 and 3 . We should not duplicate the label of node 2 because it would give us the string \" bbaaab\" , which is lexicographically greater than \" baaaab\" . In the second example, we can duplicate the labels of nodes 1 and 2 . Note that only duplicating the label of the root will produce a worse result than the initial string. In the third example, we should not duplicate any character at all. Even though we would want to duplicate the label of the node 3 , by duplicating it we must also duplicate the label of the node 2 , which produces a worse result. There is no way to produce string \" darkkcyan\" from a tree with the initial string representation \" darkcyan\" : ( .",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "strings",
      "trees"
    ],
    "id": "1623E"
  },
  {
    "title": "Balanced Stone Heaps",
    "url": "https://codeforces.com/problemset/problem/1623/C",
    "history": "There are n heaps of stone. The i - th heap has h_ i stones. You want to change the number of stones in the heap by performing the following process once: You go through the heaps from the 3 - rd heap to the n - th heap, in this order. Let i be the number of the current heap. You can choose a number d ( 0 \u2264 3 \u00b7 d \u2264 h_ i ) , move d stones from the i - th heap to the ( i - 1) - th heap, and 2 \u00b7 d stones from the i - th heap to the ( i - 2) - th heap. So after that h_ i is decreased by 3 \u00b7 d , h_ i - 1 is increased by d , and h_ i - 2 is increased by 2 \u00b7 d . You can choose different or same d for different operations. Some heaps may become empty, but they still count as heaps. What is the maximum number of stones in the smallest heap after the process?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 2\u00b7 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second lines of each test case contains n integers h_ 1, h_ 2, h_ 3, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the maximum number of stones that the smallest heap can contain.",
    "note": "In the first test case, the initial heap sizes are [ 1, 2, 10, 100] . We can move the stones as follows. move 3 stones and 6 from the 3 - rd heap to the 2 - nd and 1 heap respectively. The heap sizes will be [ 7, 5, 1, 100] ; move 6 stones and 12 stones from the last heap to the 3 - rd and 2 - nd heap respectively. The heap sizes will be [ 7, 17, 7, 82] . In the second test case, the last heap is 1 , and we can not increase its size. In the third test case, it is better not to move any stones. In the last test case, the final achievable configuration of the heaps can be [ 3, 5, 3, 4, 3, 3] .",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1623C"
  },
  {
    "title": "Math Test",
    "url": "https://codeforces.com/problemset/problem/1622/E",
    "history": "Petya is a math teacher. n of his students has written a test consisting of m questions. For each student, it is known which questions he has answered correctly and which he has not. If the student answers the j - th question correctly, he gets p_ j points ( otherwise, he gets 0 points) . Moreover, the points for the questions are distributed in such a way that the array p is a permutation of numbers from 1 to m . For the i - th student, Petya knows that he expects to get x_ i points for the test. Petya wonders how unexpected the results could be. Petya believes that the surprise value of the results for students is equal to \u2211_ i= 1^ n | x_ i - r_ i| , where r_ i is the number of points that the i - th student has got for the test. Your task is to help Petya find such a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10 ; 1 \u2264 m \u2264 10^ 4 ) \u2014 the number of students and the number of questions, respectively. The second line contains n integers x_ 1, x_ 2, . . . , x_ n ( 0 \u2264 x_ i \u2264m( m+ 1) / 2 ) , where x_ i is the number of points that the i - th student expects to get. This is followed by n lines, the i - th line contains the string s_ i ( | s_ i| = m; s_ i, j\u2208{ 0, 1} ) , where s_ i, j is 1 if the i - th student has answered the j - th question correctly, and 0 otherwise. The sum of m for all test cases does not exceed 10^ 4 .",
    "output": "For each test case, print m integers \u2014 a permutation p for which the surprise value of the results is maximum possible. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "bitmasks",
      "brute force",
      "greedy"
    ],
    "id": "1622E"
  },
  {
    "title": "Set or Decrease",
    "url": "https://codeforces.com/problemset/problem/1622/C",
    "history": "You are given an integer array a_ 1, a_ 2, . . . , a_ n and integer k . In one step you can either choose some index i and decrease a_ i by one ( make a_ i = a_ i - 1 ) ; or choose two indices i and j and set a_ i equal to a_ j ( make a_ i = a_ j ) . What is the minimum number of steps you need to make the sum of array \u2211_ i= 1^ na_ i\u2264 k ? ( You are allowed to make values of array negative) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 10^ 15 ) \u2014 the size of array a and upper bound on its sum. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array itself. It' s guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum number of steps to make \u2211_ i= 1^ na_ i\u2264 k .",
    "note": "In the first test case, you should decrease a_ 1 10 times to get the sum lower or equal to k = 10 . In the second test case, the sum of array a is already less or equal to 69 , so you don' t need to change it. In the third test case, you can, for example: set a_ 4 = a_ 3 = 1 ; decrease a_ 4 by one, and get a_ 4 = 0 . As a result, you' ll get array [ 1, 2, 1, 0, 1, 2, 1] with sum less or equal to 8 in 1 + 1 = 2 steps. In the fourth test case, you can, for example: choose a_ 7 and decrease in by one 3 times; you' ll get a_ 7 = - 2 ; choose 4 elements a_ 6 , a_ 8 , a_ 9 and a_ 10 and them equal to a_ 7 = - 2 . As a result, you' ll get array [ 1, 2, 3, 1, 2, - 2, - 2, - 2, - 2, - 2] with sum less or equal to 1 in 3 + 4 = 7 steps.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1622C"
  },
  {
    "title": "Berland Music",
    "url": "https://codeforces.com/problemset/problem/1622/B",
    "history": "Berland Music is a music streaming service built specifically to support Berland local artist. Its developers are currently working on a song recommendation module. So imagine Monocarp got recommended n songs, numbered from 1 to n . The i - th song had its predicted rating equal to p_ i , where 1 \u2264 p_ i \u2264 n and every integer from 1 to n appears exactly once. In other words, p is a permutation. After listening to each of them, Monocarp pressed either a like or a dislike button. Let his vote sequence be represented with a string s , such that s_ i= 0 means that he disliked the i - th song, and s_ i= 1 means that he liked it. Now the service has to re- evaluate the song ratings in such a way that: the new ratings q_ 1, q_ 2, . . . , q_ n still form a permutation ( 1 \u2264 q_ i \u2264 n ; each integer from 1 to n appears exactly once) ; every song that Monocarp liked should have a greater rating than every song that Monocarp disliked ( formally, for all i, j such that s_ i= 1 and s_ j= 0 , q_ i> q_ j should hold) . Among all valid permutations q find the one that has the smallest value of \u2211_ i= 1^ n | p_ i- q_ i| , where | x| is an absolute value of x . Print the permutation q_ 1, q_ 2, . . . , q_ n . If there are multiple answers, you can print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of songs. The second line of each testcase contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation of the predicted ratings. The third line contains a single string s , consisting of n characters. Each character is either a 0 or a 1 . 0 means that Monocarp disliked the song, and 1 means that he liked it. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print a permutation q \u2014 the re- evaluated ratings of the songs. If there are multiple answers such that \u2211_ i= 1^ n | p_ i- q_ i| is minimum possible, you can print any of them.",
    "note": "In the first testcase, there exists only one permutation q such that each liked song is rating higher than each disliked song: song 1 gets rating 2 and song 2 gets rating 1 . \u2211_ i= 1^ n | p_ i- q_ i| = | 1- 2| + | 2- 1| = 2 . In the second testcase, Monocarp liked all songs, so all permutations could work. The permutation with the minimum sum of absolute differences is the permutation equal to p . Its cost is 0 .",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1622B"
  },
  {
    "title": "Strange Instructions",
    "url": "https://codeforces.com/problemset/problem/1621/F",
    "history": "Dasha has 10^ 100 coins. Recently, she found a binary string s of length n and some operations that allows to change this string ( she can do each operation any number of times) : Replace substring 00 of s by 0 and receive a coins. Replace substring 11 of s by 1 and receive b coins. Remove 0 from any position in s and pay c coins. It turned out that while doing this operations Dasha should follow the rule: It is forbidden to do two operations with the same parity in a row. Operations are numbered by integers 1 - 3 in the order they are given above. Please, calculate what is the maximum profit Dasha can get by doing these operations and following this rule.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains four integers n , a , b , c ( 1 \u2264 n \u2264 10^ 5, 1 \u2264 a, b, c \u2264 10^ 9 ) . The second line of each test case contains a binary string s of length n . It is guaranteed that the total sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print the answer.",
    "note": "In the first test case one of the optimal sequences of operations is 01101 \u2192 0101 \u2192 011 \u2192 01. This sequence of operations consists of operations 2 , 3 and 2 in this order. It satisfies all rules and gives profit 3 . It can be shown that it is impossible to achieve higher profit in this test case, so the answer is 3 . In the second test case one of the optimal sequences of operations is 110001 \u2192 11001 \u2192 1001 \u2192 101. In the third test case one of the optimal sequences of operations is 011110 \u2192 01110 \u2192 1110 \u2192 110 \u2192 11 \u2192 1.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1621F"
  },
  {
    "title": "New School",
    "url": "https://codeforces.com/problemset/problem/1621/E",
    "history": "You have decided to open a new school. You have already found n teachers and m groups of students. The i - th group of students consists of k_ i \u2265 2 students. You know age of each teacher and each student. The ages of teachers are a_ 1, a_ 2, . . . , a_ n and the ages of students of the i - th group are b_ i, 1, b_ i, 2, . . . , b_ i, k_ i . To start lessons you should assign the teacher to each group of students. Such assignment should satisfy the following requirements: To each group exactly one teacher assigned. To each teacher at most 1 group of students assigned. The average of students' ages in each group doesn' t exceed the age of the teacher assigned to this group. The average of set x_ 1, x_ 2, . . . , x_ k of k integers is x_ 1 + x_ 2 + . . . + x_ k/ k . Recently you have heard that one of the students will refuse to study in your school. After this, the size of one group will decrease by 1 while all other groups will remain unchanged. You don' t know who will refuse to study. For each student determine if you can start lessons in case of his refusal. Note, that it is not guaranteed that it is possible to start lessons before any refusal.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 10^ 5 ) \u2014 the number of teachers and the number of groups of students. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the ages of teachers. The next 2m lines contains descriptions of groups. The first line of description of group contains a single integer k_ i ( 2 \u2264 k_ i \u2264 10^ 5 ) \u2014 the number of students in this group. The second line of description of group contains k_ i integers b_ i, 1, b_ i, 2, . . . , b_ i, k_ i ( 1 \u2264 b_ i, j\u2264 10^ 5 ) \u2014 the ages of students of this group. It is guaranteed that the total sum of n over all test cases doesn' t exceed 10^ 5 and that the total sum of k_ 1 + k_ 2 + . . . + k_ m over all test cases doesn' t exceed 2 \u00b7 10^ 5",
    "output": "For each test case output string of symbols 0 and 1 of length k_ 1 + k_ 2 + . . . + k_ m . The i - th symbol of this string should be equals 1 if it is possible to start lessons in case of the i - th student refuse and it should be equals 0 otherwise. Students are numbered by integers from 1 to k_ 1 + k_ 2 + . . . + k_ m in the order they appear in the input. Thus, students of the 1 - st group are numbered by integers 1 , 2 , . . . , k_ 1 , students of the 2 - nd group are numbered by integers k_ 1 + 1 , k_ 1 + 2 , . . . , k_ 1 + k_ 2 and so on.",
    "note": "In the first test case there is one group of students with average age 25+ 16+ 37/ 3= 26 and one teacher with age 30 . There exists only one assignment that allows to start lessons. If the student with age 16 will refuse to study, the average age of students in this group will become 25+ 37/ 2= 31 so there won' t be any assignment that allows to start lessons. In the second test case it is impossible to start lessons initially. However, if the 3 - rd student with age 111 will refuse to study, the average ages of groups will become 4 + 5/ 2= 4. 5 and 11+ 11/ 2 = 11 correspondingly. Then it is possible to assing the first group to the first teacher and the second group to the third teacher.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1621E"
  },
  {
    "title": "The Winter Hike",
    "url": "https://codeforces.com/problemset/problem/1621/D",
    "history": "Circular land is an 2n \u00d7 2n grid. Rows of this grid are numbered by integers from 1 to 2n from top to bottom and columns of this grid are numbered by integers from 1 to 2n from left to right. The cell ( x, y) is the cell on the intersection of row x and column y for 1 \u2264 x \u2264 2n and 1 \u2264 y \u2264 2n . There are n^ 2 of your friends in the top left corner of the grid. That is, in each cell ( x, y) with 1 \u2264 x, y \u2264 n there is exactly one friend. Some of the other cells are covered with snow. Your friends want to get to the bottom right corner of the grid. For this in each cell ( x, y) with n+ 1 \u2264 x, y \u2264 2n there should be exactly one friend. It doesn' t matter in what cell each of friends will be. You have decided to help your friends to get to the bottom right corner of the grid. For this, you can give instructions of the following types: You select a row x . All friends in this row should move to the next cell in this row. That is, friend from the cell ( x, y) with 1 \u2264 y < 2n will move to the cell ( x, y + 1) and friend from the cell ( x, 2n) will move to the cell ( x, 1) . You select a row x . All friends in this row should move to the previous cell in this row. That is, friend from the cell ( x, y) with 1 < y \u2264 2n will move to the cell ( x, y - 1) and friend from the cell ( x, 1) will move to the cell ( x, 2n) . You select a column y . All friends in this column should move to the next cell in this column. That is, friend from the cell ( x, y) with 1 \u2264 x < 2n will move to the cell ( x + 1, y) and friend from the cell ( 2n, y) will move to the cell ( 1, y) . You select a column y . All friends in this column should move to the previous cell in this column. That is, friend from the cell ( x, y) with 1 < x \u2264 2n will move to the cell ( x - 1, y) and friend from the cell ( 1, y) will move to the cell ( 2n, y) . Note how friends on the grid border behave in these instructions. Example of applying the third operation to the second column. Here, colorful circles denote your friends and blue cells are covered with snow. You can give such instructions any number of times. You can give instructions of different types. If after any instruction one of your friends is in the cell covered with snow he becomes ill. In order to save your friends you can remove snow from some cells before giving the first instruction: You can select the cell ( x, y) that is covered with snow now and remove snow from this cell for c_ x, y coins. You can do this operation any number of times. You want to spend the minimal number of coins and give some instructions to your friends. After this, all your friends should be in the bottom right corner of the grid and none of them should be ill. Please, find how many coins you will spend.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 250 ) . Each of the next 2n lines contains 2n integers c_ i, 1, c_ i, 2, . . . , c_ i, 2n ( 0 \u2264 c_ i, j\u2264 10^ 9 ) \u2014 costs of removing snow from cells. If c_ i, j = 0 for some i, j than there is no snow in cell ( i, j) . Otherwise, cell ( i, j) is covered with snow. It is guaranteed that c_ i, j = 0 for 1 \u2264 i, j \u2264 n . It is guaranteed that the sum of n over all test cases doesn' t exceed 250 .",
    "output": "For each test case output one integer \u2014 the minimal number of coins you should spend.",
    "note": "In the first test case you can remove snow from the cells ( 2, 1) and ( 2, 2) for 100 coins. Then you can give instructions All friends in the first collum should move to the previous cell. After this, your friend will be in the cell ( 2, 1) . All friends in the second row should move to the next cell. After this, your friend will be in the cell ( 2, 2) . In the second test case you can remove all snow from the columns 3 and 4 for 22 coins. Then you can give instructions All friends in the first row should move to the next cell. All friends in the first row should move to the next cell. All friends in the second row should move to the next cell. All friends in the second row should move to the next cell. All friends in the third column should move to the next cell. All friends in the third column should move to the next cell. All friends in the fourth column should move to the next cell. All friends in the fourth column should move to the next cell. It can be shown that none of the friends will become ill and that it is impossible to spend less coins.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1621D"
  },
  {
    "title": "Integers Shop",
    "url": "https://codeforces.com/problemset/problem/1621/B",
    "history": "The integers shop sells n segments. The i - th of them contains all integers from l_ i to r_ i and costs c_ i coins. Tomorrow Vasya will go to this shop and will buy some segments there. He will get all integers that appear in at least one of bought segments. The total cost of the purchase is the sum of costs of all segments in it. After shopping, Vasya will get some more integers as a gift. He will get integer x as a gift if and only if all of the following conditions are satisfied: Vasya hasn' t bought x . Vasya has bought integer l that is less than x . Vasya has bought integer r that is greater than x . Vasya can get integer x as a gift only once so he won' t have the same integers after receiving a gift. For example, if Vasya buys segment [ 2, 4] for 20 coins and segment [ 7, 8] for 22 coins, he spends 42 coins and receives integers 2, 3, 4, 7, 8 from these segments. He also gets integers 5 and 6 as a gift. Due to the technical issues only the first s segments ( that is, segments [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ s, r_ s] ) will be available tomorrow in the shop. Vasya wants to get ( to buy or to get as a gift) as many integers as possible. If he can do this in differents ways, he selects the cheapest of them. For each s from 1 to n , find how many coins will Vasya spend if only the first s segments will be available.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of segments in the shop. Each of next n lines contains three integers l_ i , r_ i , c_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9, 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the ends of the i - th segments and its cost. It is guaranteed that the total sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output n integers: the s - th ( 1 \u2264 s \u2264 n ) of them should be the number of coins Vasia will spend in the shop if only the first s segments will be available.",
    "note": "In the first test case if s = 1 then Vasya can buy only the segment [ 2, 4] for 20 coins and get 3 integers. The way to get 7 integers for 42 coins in case s = 2 is described in the statement. In the second test case note, that there can be the same segments in the shop.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1621B"
  },
  {
    "title": "Bipartite Array",
    "url": "https://codeforces.com/problemset/problem/1620/F",
    "history": "You are given a permutation p consisting of n integers 1, 2, . . . , n ( a permutation is an array where each element from 1 to n occurs exactly once) . Let' s call an array a bipartite if the following undirected graph is bipartite: the graph consists of n vertices; two vertices i and j are connected by an edge if i < j and a_ i > a_ j . Your task is to find a bipartite array of integers a of size n , such that a_ i = p_ i or a_ i = - p_ i , or report that no such array exists. If there are multiple answers, print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the size of the permutation. The second line contains n integers p_ 1, p_ 2, . . . , p_ n . The sum of n over all test cases doesn' t exceed 10^ 6 .",
    "output": "For each test case, print the answer in the following format. If such an array a does not exist, print \" NO\" in a single line. Otherwise, print \" YES\" in the first line and n integers \u2014 array a in the second line.",
    "note": "",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1620F"
  },
  {
    "title": "Exact Change",
    "url": "https://codeforces.com/problemset/problem/1620/D",
    "history": "One day, early in the morning, you decided to buy yourself a bag of chips in the nearby store. The store has chips of n different flavors. A bag of the i - th flavor costs a_ i burles. The store may run out of some flavors, so you' ll decide which one to buy after arriving there. But there are two major flaws in this plan: you have only coins of 1 , 2 and 3 burles; since it' s morning, the store will ask you to pay in exact change, i. e. if you choose the i - th flavor, you' ll have to pay exactly a_ i burles. Coins are heavy, so you' d like to take the least possible number of coins in total. That' s why you are wondering: what is the minimum total number of coins you should take with you, so you can buy a bag of chips of any flavor in exact change?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of flavors in the store. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the cost of one bag of each flavor.",
    "output": "For each test case, print one integer \u2014 the minimum number of coins you need to buy one bag of any flavor you' ll choose in exact change.",
    "note": "In the first test case, you should, for example, take with you 445 coins of value 3 and 1 coin of value 2 . So, 1337 = 445 \u00b7 3 + 1 \u00b7 2 . In the second test case, you should, for example, take 2 coins of value 3 and 2 coins of value 2 . So you can pay either exactly 8 = 2 \u00b7 3 + 1 \u00b7 2 or 10 = 2 \u00b7 3 + 2 \u00b7 2 . In the third test case, it' s enough to take 1 coin of value 3 and 2 coins of value 1 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1620D"
  },
  {
    "title": "BA-String",
    "url": "https://codeforces.com/problemset/problem/1620/C",
    "history": "You are given an integer k and a string s that consists only of characters ' a' ( a lowercase Latin letter) and ' * ' ( an asterisk) . Each asterisk should be replaced with several ( from 0 to k inclusive) lowercase Latin letters ' b' . Different asterisk can be replaced with different counts of letter ' b' . The result of the replacement is called a BA- string. Two strings a and b are different if they either have different lengths or there exists such a position i that a_ i = \u0338 b_ i . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b . Now consider all different BA- strings and find the x - th lexicographically smallest of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of testcases. The first line of each testcase contains three integers n , k and x ( 1 \u2264 n \u2264 2000 ; 0 \u2264 k \u2264 2000 ; 1 \u2264 x \u2264 10^ 18 ) . n is the length of string s . The second line of each testcase is a string s . It consists of n characters, each of them is either ' a' ( a lowercase Latin letter) or ' * ' ( an asterisk) . The sum of n over all testcases doesn' t exceed 2000 . For each testcase x doesn' t exceed the total number of different BA- strings. String s contains at least one character ' a' .",
    "output": "For each testcase, print a single string, consisting only of characters ' b' and ' a' ( lowercase Latin letters) \u2014 the x - th lexicographically smallest BA- string.",
    "note": "In the first testcase of the example, BA- strings ordered lexicographically are: a ab abb abbb abbbb In the second testcase of the example, BA- strings ordered lexicographically are: aa aba abba Note that string \" aba\" is only counted once, even though there are two ways to replace asterisks with characters ' b' to get it.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1620C"
  },
  {
    "title": "Triangles on a Rectangle",
    "url": "https://codeforces.com/problemset/problem/1620/B",
    "history": "A rectangle with its opposite corners in ( 0, 0) and ( w, h) and sides parallel to the axes is drawn on a plane. You are given a list of lattice points such that each point lies on a side of a rectangle but not in its corner. Also, there are at least two points on every side of a rectangle. Your task is to choose three points in such a way that: exactly two of them belong to the same side of a rectangle; the area of a triangle formed by them is maximum possible. Print the doubled area of this triangle. It can be shown that the doubled area of any triangle formed by lattice points is always an integer.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains two integers w and h ( 3 \u2264 w, h \u2264 10^ 6 ) \u2014 the coordinates of the corner of a rectangle. The next two lines contain the description of the points on two horizontal sides. First, an integer k ( 2 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points. Then, k integers x_ 1 < x_ 2 < . . . < x_ k ( 0 < x_ i < w ) \u2014 the x coordinates of the points in the ascending order. The y coordinate for the first line is 0 and for the second line is h . The next two lines contain the description of the points on two vertical sides. First, an integer k ( 2 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points. Then, k integers y_ 1 < y_ 2 < . . . < y_ k ( 0 < y_ i < h ) \u2014 the y coordinates of the points in the ascending order. The x coordinate for the first line is 0 and for the second line is w . The total number of points on all sides in all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase print a single integer \u2014 the doubled maximum area of a triangle formed by such three points that exactly two of them belong to the same side.",
    "note": "The points in the first testcase of the example: ( 1, 0) , ( 2, 0) ; ( 2, 8) , ( 3, 8) , ( 4, 8) ; ( 0, 1) , ( 0, 4) , ( 0, 6) ; ( 5, 4) , ( 5, 5) . The largest triangle is formed by points ( 0, 1) , ( 0, 6) and ( 5, 4) \u2014 its area is 25/ 2 . Thus, the doubled area is 25 . Two points that are on the same side are: ( 0, 1) and ( 0, 6) .",
    "topics": [
      "geometry",
      "greedy",
      "math"
    ],
    "id": "1620B"
  },
  {
    "title": "Unusual Minesweeper",
    "url": "https://codeforces.com/problemset/problem/1619/G",
    "history": "Polycarp is very fond of playing the game Minesweeper. Recently he found a similar game and there are such rules. There are mines on the field, for each the coordinates of its location are known ( x_ i, y_ i ) . Each mine has a lifetime in seconds, after which it will explode. After the explosion, the mine also detonates all mines vertically and horizontally at a distance of k ( two perpendicular lines) . As a result, we get an explosion on the field in the form of a \" plus\" symbol ( ' + ' ) . Thus, one explosion can cause new explosions, and so on. Also, Polycarp can detonate anyone mine every second, starting from zero seconds. After that, a chain reaction of explosions also takes place. Mines explode instantly and also instantly detonate other mines according to the rules described above. Polycarp wants to set a new record and asks you to help him calculate in what minimum number of seconds all mines can be detonated.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. An empty line is written in front of each test suite. Next comes a line that contains integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k \u2264 10^ 9 ) \u2014 the number of mines and the distance that hit by mines during the explosion, respectively. Then n lines follow, the i - th of which describes the x and y coordinates of the i - th mine and the time until its explosion ( - 10^ 9 \u2264 x, y \u2264 10^ 9 , 0 \u2264 timer \u2264 10^ 9 ) . It is guaranteed that all mines have different coordinates. It is guaranteed that the sum of the values n over all test cases in the test does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each of the lines must contain the answer to the corresponding set of input data \u2014 the minimum number of seconds it takes to explode all the mines.",
    "note": "Picture from examples First example: 0 second: we explode a mine at the cell ( 2, 2) , it does not detonate any other mine since k= 0 . 1 second: we explode the mine at the cell ( 0, 1) , and the mine at the cell ( 0, 0) explodes itself. 2 second: we explode the mine at the cell ( 1, 1) , and the mine at the cell ( 1, 0) explodes itself. Second example: 0 second: we explode a mine at the cell ( 2, 2) we get: 1 second: the mine at coordinate ( 0, 0) explodes and since k= 2 the explosion detonates mines at the cells ( 0, 1) and ( 1, 0) , and their explosions detonate the mine at the cell ( 1, 1) and there are no mines left on the field.",
    "topics": [
      "binary search",
      "dfs and similar",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1619G"
  },
  {
    "title": "Let's Play the Hat?",
    "url": "https://codeforces.com/problemset/problem/1619/F",
    "history": "The Hat is a game of speedy explanation/ guessing words ( similar to Alias) . It' s fun. Try it! In this problem, we are talking about a variant of the game when the players are sitting at the table and everyone plays individually ( i. e. not teams, but individual gamers play) . n people gathered in a room with m tables ( n \u2265 2m ) . They want to play the Hat k times. Thus, k games will be played at each table. Each player will play in k games. To do this, they are distributed among the tables for each game. During each game, one player plays at exactly one table. A player can play at different tables. Players want to have the most \" fair\" schedule of games. For this reason, they are looking for a schedule ( table distribution for each game) such that: At any table in each game there are either \u230an/ m\u230b people or \u2308n/ m\u2309 people ( that is, either n/ m rounded down, or n/ m rounded up) . Different numbers of people can play different games at the same table. Let' s calculate for each player the value b_ i \u2014 the number of times the i - th player played at a table with \u2308n/ m\u2309 persons ( n/ m rounded up) . Any two values of b_ i must differ by no more than 1 . In other words, for any two players i and j , it must be true | b_ i - b_ j| \u2264 1 . For example, if n= 5 , m= 2 and k= 2 , then at the request of the first item either two players or three players should play at each table. Consider the following schedules: First game: 1, 2, 3 are played at the first table, and 4, 5 at the second one. The second game: at the first table they play 5, 1 , and at the second \u2014 2, 3, 4 . This schedule is not \" fair\" since b_ 2= 2 ( the second player played twice at a big table) and b_ 5= 0 ( the fifth player did not play at a big table) . First game: 1, 2, 3 are played at the first table, and 4, 5 at the second one. The second game: at the first table they play 4, 5, 2 , and at the second one \u2014 1, 3 . This schedule is \" fair\" : b= [ 1, 2, 1, 1, 1] ( any two values of b_ i differ by no more than 1 ) . Find any \" fair\" game schedule for n people if they play on the m tables of k games.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Each test case consists of one line that contains three integers n , m and k ( 2 \u2264 n \u2264 2\u00b710^ 5 , 1 \u2264 m \u2264\u230an/ 2\u230b , 1 \u2264 k \u2264 10^ 5 ) \u2014 the number of people, tables and games, respectively. It is guaranteed that the sum of nk ( n multiplied by k ) over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case print a required schedule \u2014 a sequence of k blocks of m lines. Each block corresponds to one game, a line in a block corresponds to one table. In each line print the number of players at the table and the indices of the players ( numbers from 1 to n ) who should play at this table. If there are several required schedules, then output any of them. We can show that a valid solution always exists. You can output additional blank lines to separate responses to different sets of inputs.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1619F"
  },
  {
    "title": "MEX and Increments",
    "url": "https://codeforces.com/problemset/problem/1619/E",
    "history": "Dmitry has an array of n non- negative integers a_ 1, a_ 2, . . . , a_ n . In one operation, Dmitry can choose any index j ( 1 \u2264 j \u2264 n ) and increase the value of the element a_ j by 1 . He can choose the same index j multiple times. For each i from 0 to n , determine whether Dmitry can make the MEX of the array equal to exactly i . If it is possible, then determine the minimum number of operations to do it. The MEX of the array is equal to the minimum non- negative integer that is not in the array. For example, the MEX of the array [ 3, 1, 0] is equal to 2 , and the array [ 3, 3, 1, 4] is equal to 0 .",
    "input": "The first line of input data contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The descriptions of the test cases follow. The first line of the description of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of the description of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) \u2014 elements of the array a . It is guaranteed that the sum of the values n over all test cases in the test does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, output n + 1 integer \u2014 i - th number is equal to the minimum number of operations for which you can make the array MEX equal to i ( 0 \u2264 i \u2264 n ) , or - 1 if this cannot be done.",
    "note": "In the first set of example inputs, n= 3 : to get MEX= 0 , it is enough to perform one increment: a_ 1 + + ; to get MEX= 1 , it is enough to perform one increment: a_ 2 + + ; MEX= 2 for a given array, so there is no need to perform increments; it is impossible to get MEX= 3 by performing increments.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1619E"
  },
  {
    "title": "New Year's Problem",
    "url": "https://codeforces.com/problemset/problem/1619/D",
    "history": "Vlad has n friends, for each of whom he wants to buy one gift for the New Year. There are m shops in the city, in each of which he can buy a gift for any of his friends. If the j - th friend ( 1 \u2264 j \u2264 n ) receives a gift bought in the shop with the number i ( 1 \u2264 i \u2264 m ) , then the friend receives p_ ij units of joy. The rectangular table p_ ij is given in the input. Vlad has time to visit at most n- 1 shops ( where n is the number of friends) . He chooses which shops he will visit and for which friends he will buy gifts in each of them. Let the j - th friend receive a_ j units of joy from Vlad' s gift. Let' s find the value \u03b1= min{ a_ 1, a_ 2, . . . , a_ n} . Vlad' s goal is to buy gifts so that the value of \u03b1 is as large as possible. In other words, Vlad wants to maximize the minimum of the joys of his friends. For example, let m = 2 , n = 2 . Let the joy from the gifts that we can buy in the first shop: p_ 11 = 1 , p_ 12= 2 , in the second shop: p_ 21 = 3 , p_ 22= 4 . Then it is enough for Vlad to go only to the second shop and buy a gift for the first friend, bringing joy 3 , and for the second \u2014 bringing joy 4 . In this case, the value \u03b1 will be equal to min{ 3, 4} = 3 Help Vlad choose gifts for his friends so that the value of \u03b1 is as high as possible. Please note that each friend must receive one gift. Vlad can visit at most n- 1 shops ( where n is the number of friends) . In the shop, he can buy any number of gifts.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. An empty line is written before each test case. Then there is a line containing integers m and n ( 2 \u2264 n , 2 \u2264 n \u00b7 m \u2264 10^ 5 ) separated by a space \u2014 the number of shops and the number of friends, where n \u00b7 m is the product of n and m . Then m lines follow, each containing n numbers. The number in the i - th row of the j - th column p_ ij ( 1 \u2264 p_ ij\u2264 10^ 9 ) is the joy of the product intended for friend number j in shop number i . It is guaranteed that the sum of the values n \u00b7 m over all test cases in the test does not exceed 10^ 5 .",
    "output": "Print t lines, each line must contain the answer to the corresponding test case \u2014 the maximum possible value of \u03b1 , where \u03b1 is the minimum of the joys from a gift for all of Vlad' s friends.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1619D"
  },
  {
    "title": "Trader Problem",
    "url": "https://codeforces.com/problemset/problem/1618/G",
    "history": "Monocarp plays a computer game ( yet again! ) . This game has a unique trading mechanics. To trade with a character, Monocarp has to choose one of the items he possesses and trade it for some item the other character possesses. Each item has an integer price. If Monocarp' s chosen item has price x , then he can trade it for any item ( exactly one item) with price not greater than x+ k . Monocarp initially has n items, the price of the i - th item he has is a_ i . The character Monocarp is trading with has m items, the price of the i - th item they have is b_ i . Monocarp can trade with this character as many times as he wants ( possibly even zero times) , each time exchanging one of his items with one of the other character' s items according to the aforementioned constraints. Note that if Monocarp gets some item during an exchange, he can trade it for another item ( since now the item belongs to him) , and vice versa: if Monocarp trades one of his items for another item, he can get his item back by trading something for it. You have to answer q queries. Each query consists of one integer, which is the value of k , and asks you to calculate the maximum possible total cost of items Monocarp can have after some sequence of trades, assuming that he can trade an item of cost x for an item of cost not greater than x+ k during each trade. Note that the queries are independent: the trades do not actually occur, Monocarp only wants to calculate the maximum total cost he can get.",
    "input": "The first line contains three integers n , m and q ( 1 \u2264 n, m, q \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the prices of the items Monocarp has. The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the prices of the items the other character has. The fourth line contains q integers, where the i - th integer is the value of k for the i - th query ( 0 \u2264 k \u2264 10^ 9 ) .",
    "output": "For each query, print one integer \u2014 the maximum possible total cost of items Monocarp can have after some sequence of trades, given the value of k from the query.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "greedy",
      "sortings"
    ],
    "id": "1618G"
  },
  {
    "title": "Array and Operations",
    "url": "https://codeforces.com/problemset/problem/1618/D",
    "history": "You are given an array a of n integers, and another integer k such that 2k \u2264 n . You have to perform exactly k operations with this array. In one operation, you have to choose two elements of the array ( let them be a_ i and a_ j ; they can be equal or different, but their positions in the array must not be the same) , remove them from the array, and add \u230aa_ i/ a_ j\u230b to your score, where \u230ax/ y\u230b is the maximum integer not exceeding x/ y . Initially, your score is 0 . After you perform exactly k operations, you add all the remaining elements of the array to the score. Calculate the minimum possible score you can get.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains two integers n and k ( 1 \u2264 n \u2264 100 ; 0 \u2264 k \u2264\u230an/ 2\u230b ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) .",
    "output": "Print one integer \u2014 the minimum possible score you can get.",
    "note": "Let' s consider the example test. In the first test case, one way to obtain a score of 2 is the following one: choose a_ 7 = 1 and a_ 4 = 2 for the operation; the score becomes 0 + \u230a1/ 2\u230b = 0 , the array becomes [ 1, 1, 1, 1, 3] ; choose a_ 1 = 1 and a_ 5 = 3 for the operation; the score becomes 0 + \u230a1/ 3\u230b = 0 , the array becomes [ 1, 1, 1] ; choose a_ 1 = 1 and a_ 2 = 1 for the operation; the score becomes 0 + \u230a1/ 1\u230b = 1 , the array becomes [ 1] ; add the remaining element 1 to the score, so the resulting score is 2 . In the second test case, no matter which operations you choose, the resulting score is 16 . In the third test case, one way to obtain a score of 0 is the following one: choose a_ 1 = 1 and a_ 2 = 3 for the operation; the score becomes 0 + \u230a1/ 3\u230b = 0 , the array becomes [ 3, 7] ; choose a_ 1 = 3 and a_ 2 = 7 for the operation; the score becomes 0 + \u230a3/ 7\u230b = 0 , the array becomes empty; the array is empty, so the score doesn' t change anymore. In the fourth test case, no operations can be performed, so the score is the sum of the elements of the array: 4 + 2 = 6 .",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1618D"
  },
  {
    "title": "Paprika and Permutation",
    "url": "https://codeforces.com/problemset/problem/1617/C",
    "history": "Paprika loves permutations. She has an array a_ 1, a_ 2, . . . , a_ n . She wants to make the array a permutation of integers 1 to n . In order to achieve this goal, she can perform operations on the array. In each operation she can choose two integers i ( 1 \u2264 i \u2264 n ) and x ( x > 0 ) , then perform a_ i : = a_ i x ( that is, replace a_ i by the remainder of a_ i divided by x ) . In different operations, the chosen i and x can be different. Determine the minimum number of operations needed to make the array a permutation of integers 1 to n . If it is impossible, output - 1 . A permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n . ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the minimum number of operations needed to make the array a permutation of integers 1 to n , or - 1 if it is impossible.",
    "note": "For the first test, the only possible sequence of operations which minimizes the number of operations is: Choose i= 2 , x= 5 . Perform a_ 2 : = a_ 2 5 = 2 . For the second test, it is impossible to obtain a permutation of integers from 1 to n .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1617C"
  },
  {
    "title": "Forbidden Subsequence",
    "url": "https://codeforces.com/problemset/problem/1617/A",
    "history": "You are given strings S and T , consisting of lowercase English letters. It is guaranteed that T is a permutation of the string abc. Find string S' , the lexicographically smallest permutation of S such that T is not a subsequence of S' . String a is a permutation of string b if the number of occurrences of each distinct character is the same in both strings. A string a is a subsequence of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) elements. A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a string S ( 1 \u2264 | S| \u2264 100 ) , consisting of lowercase English letters. The second line of each test case contains a string T that is a permutation of the string abc. ( Hence, | T| = 3 ) . Note that there is no limit on the sum of | S| across all test cases.",
    "output": "For each test case, output a single string S' , the lexicographically smallest permutation of S such that T is not a subsequence of S' .",
    "note": "In the first test case, both aaaabbc and aaaabcb are lexicographically smaller than aaaacbb, but they contain abc as a subsequence. In the second test case, abccc is the smallest permutation of cccba and does not contain acb as a subsequence. In the third test case, bcdis is the smallest permutation of dbsic and does not contain bac as a subsequence.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings",
      "strings"
    ],
    "id": "1617A"
  },
  {
    "title": "Lexicographically Small Enough",
    "url": "https://codeforces.com/problemset/problem/1616/E",
    "history": "You are given two strings s and t of equal length n . In one move, you can swap any two adjacent characters of the string s . You need to find the minimal number of operations you need to make string s lexicographically smaller than string t . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line of input contains one integer q ( 1 \u2264 q \u2264 10 000 ) : the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains the string s consisting of n lowercase English letters. The third line of each test case contains the string t consisting of n lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print in a separate line the minimal number of operations you need to make string s lexicographically smaller than string t , or - 1 , if it' s impossible.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "1616E"
  },
  {
    "title": "Keep the Average High",
    "url": "https://codeforces.com/problemset/problem/1616/D",
    "history": "You are given an array of integers a_ 1, a_ 2, . . . , a_ n and an integer x . You need to select the maximum number of elements in the array, such that for every subsegment a_ l, a_ l + 1, . . . , a_ r containing strictly more than one element ( l < r) , either: At least one element on this subsegment is not selected, or a_ l + a_ l+ 1 + . . . + a_ r \u2265 x \u00b7 ( r - l + 1) .",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 10 ) : the number of test cases. The descriptions of t test cases follow, three lines per test case. In the first line you are given one integer n ( 1 \u2264 n \u2264 50 000 ) : the number of integers in the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 100 000 \u2264 a_ i \u2264 100 000 ) . The third line contains one integer x ( - 100 000 \u2264 x \u2264 100 000 ) .",
    "output": "For each test case, print one integer: the maximum number of elements that you can select.",
    "note": "In the first example, one valid way to select the elements is [ 1, 2, 3, 4, 5] . All subsegments satisfy at least one of the criteria. For example, for the subsegment l = 1 , r = 2 we have that the element 2 is not selected, satisfying the first criterion. For the subsegment l = 3 , r = 5 we have 3 + 4 + 5 = 12 \u2265 2 \u00b7 3 , satisfying the second criterion. We can' t select all elements, because in this case for l = 1 , r = 2 all elements are selected and we have a_ 1 + a_ 2 = 3 < 2 \u00b7 2 . Thus, the maximum number of selected elements is 4 . In the second example, one valid solution is [ 2, 4, 2, 4, 2, 4, 2, 4, 2, 4] . In the third example, one valid solution is [ - 10, - 5, - 10] . In the fourth example, one valid solution is [ 9, 9, - 3] .",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1616D"
  },
  {
    "title": "Mirror in the String",
    "url": "https://codeforces.com/problemset/problem/1616/B",
    "history": "You have a string s_ 1 s_ 2 . . . s_ n and you stand on the left of the string looking right. You want to choose an index k ( 1 \u2264 k \u2264 n ) and place a mirror after the k - th letter, so that what you see is s_ 1 s_ 2 . . . s_ k s_ k s_ k - 1. . . s_ 1 . What is the lexicographically smallest string you can see? A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 10 000 ) : the number of test cases. The next t lines contain the description of the test cases, two lines per a test case. In the first line you are given one integer n ( 1 \u2264 n \u2264 10^ 5 ) : the length of the string. The second line contains the string s consisting of n lowercase English characters. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print the lexicographically smallest string you can see.",
    "note": "In the first test case choose k = 1 to obtain \" cc\" . In the second test case choose k = 3 to obtain \" cbaabc\" . In the third test case choose k = 1 to obtain \" aa\" . In the fourth test case choose k = 1 to obtain \" bb\" .",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1616B"
  },
  {
    "title": "Purple Crayon",
    "url": "https://codeforces.com/problemset/problem/1615/E",
    "history": "Two players, Red and Blue, are at it again, and this time they' re playing with crayons! The mischievous duo is now vandalizing a rooted tree, by coloring the nodes while playing their favorite game. The game works as follows: there is a tree of size n , rooted at node 1 , where each node is initially white. Red and Blue get one turn each. Red goes first. In Red' s turn, he can do the following operation any number of times: Pick any subtree of the rooted tree, and color every node in the subtree red. However, to make the game fair, Red is only allowed to color k nodes of the tree. In other words, after Red' s turn, at most k of the nodes can be colored red. Then, it' s Blue' s turn. Blue can do the following operation any number of times: Pick any subtree of the rooted tree, and color every node in the subtree blue. However, he' s not allowed to choose a subtree that contains a node already colored red, as that would make the node purple and no one likes purple crayon. Note: there' s no restriction on the number of nodes Blue can color, as long as he doesn' t color a node that Red has already colored. After the two turns, the score of the game is determined as follows: let w be the number of white nodes, r be the number of red nodes, and b be the number of blue nodes. The score of the game is w \u00b7 ( r - b) . Red wants to maximize this score, and Blue wants to minimize it. If both players play optimally, what will the final score of the game be?",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ) \u2014 the number of vertices in the tree and the maximum number of red nodes. Next n - 1 lines contains description of edges. The i - th line contains two space separated integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i = \u0338 v_ i ) \u2014 the i - th edge of the tree. It' s guaranteed that given edges form a tree.",
    "output": "Print one integer \u2014 the resulting score if both Red and Blue play optimally.",
    "note": "In the first test case, the optimal strategy is as follows: Red chooses to color the subtrees of nodes 2 and 3 . Blue chooses to color the subtree of node 4 . At the end of this process, nodes 2 and 3 are red, node 4 is blue, and node 1 is white. The score of the game is 1 \u00b7 ( 2 - 1) = 1 . In the second test case, the optimal strategy is as follows: Red chooses to color the subtree of node 4 . This colors both nodes 4 and 5 . Blue does not have any options, so nothing is colored blue. At the end of this process, nodes 4 and 5 are red, and nodes 1 , 2 and 3 are white. The score of the game is 3 \u00b7 ( 2 - 0) = 6 . For the third test case: The score of the game is 4 \u00b7 ( 2 - 1) = 4 .",
    "topics": [
      "data structures",
      "dfs and similar",
      "games",
      "graphs",
      "greedy",
      "math",
      "sortings",
      "trees"
    ],
    "id": "1615E"
  },
  {
    "title": "Menorah",
    "url": "https://codeforces.com/problemset/problem/1615/C",
    "history": "There are n candles on a Hanukkah menorah, and some of its candles are initially lit. We can describe which candles are lit with a binary string s , where the i - th candle is lit if and only if s_ i= 1 . Initially, the candle lights are described by a string a . In an operation, you select a candle that is currently lit. By doing so, the candle you selected will remain lit, and every other candle will change ( if it was lit, it will become unlit and if it was unlit, it will become lit) . You would like to make the candles look the same as string b . Your task is to determine if it is possible, and if it is, find the minimum number of operations required.",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. Then t cases follow. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 10^ 5 ) \u2014 the number of candles. The second line contains a string a of length n consisting of symbols 0 and 1 \u2014 the initial pattern of lights. The third line contains a string b of length n consisting of symbols 0 and 1 \u2014 the desired pattern of lights. It is guaranteed that the sum of n does not exceed 10^ 5 .",
    "output": "For each test case, output the minimum number of operations required to transform a to b , or - 1 if it' s impossible.",
    "note": "In the first test case, the two strings are already equal, so we don' t have to perform any operations. In the second test case, we can perform a single operation selecting the second candle to transform 01 into 11 . In the third test case, it' s impossible to perform any operations because there are no lit candles to select. In the fourth test case, we can perform the following operations to transform a into b : Select the 7 - th candle: 100010111\u2192 011101 100 . Select the 2 - nd candle: 0 11101100\u2192 1 10010011 . Select the 1 - st candle: 110010011\u2192101101100 . In the fifth test case, we can perform the following operations to transform a into b : Select the 6 - th candle: 001011011\u2192 110101100 Select the 2 - nd candle: 110101100\u2192 011010011 Select the 8 - th candle: 011010011\u2192 100101110 Select the 7 - th candle: 100101110\u2192 011010101",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1615C"
  },
  {
    "title": "And It's Non-Zero",
    "url": "https://codeforces.com/problemset/problem/1615/B",
    "history": "You are given an array consisting of all integers from [ l, r] inclusive. For example, if l = 2 and r = 5 , the array would be [ 2, 3, 4, 5] . What' s the minimum number of elements you can delete to make the bitwise AND of the array non- zero? A bitwise AND is a binary operation that takes two equal- length binary representations and performs the AND operation on each pair of the corresponding bits.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t cases follow. The first line of each test case contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 2 \u00b7 10^ 5 ) \u2014 the description of the array.",
    "output": "For each test case, output a single integer \u2014 the answer to the problem.",
    "note": "In the first test case, the array is [ 1, 2] . Currently, the bitwise AND is 0 , as 1 & 2 = 0 . However, after deleting 1 ( or 2 ) , the array becomes [ 2] ( or [ 1] ) , and the bitwise AND becomes 2 ( or 1 ) . This can be proven to be the optimal, so the answer is 1 . In the second test case, the array is [ 2, 3, 4, 5, 6, 7, 8] . Currently, the bitwise AND is 0 . However, after deleting 4 , 5 , and 8 , the array becomes [ 2, 3, 6, 7] , and the bitwise AND becomes 2 . This can be proven to be the optimal, so the answer is 3 . Note that there may be other ways to delete 3 elements.",
    "topics": [
      "bitmasks",
      "greedy",
      "math"
    ],
    "id": "1615B"
  },
  {
    "title": "Closing The Gap",
    "url": "https://codeforces.com/problemset/problem/1615/A",
    "history": "There are n block towers in a row, where tower i has a height of a_ i . You' re part of a building crew, and you want to make the buildings look as nice as possible. In a single day, you can perform the following operation: Choose two indices i and j ( 1 \u2264 i, j \u2264 n ; i = \u0338 j ) , and move a block from tower i to tower j . This essentially decreases a_ i by 1 and increases a_ j by 1 . You think the ugliness of the buildings is the height difference between the tallest and shortest buildings. Formally, the ugliness is defined as max( a) - min( a) . What' s the minimum possible ugliness you can achieve, after any number of days?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t cases follow. The first line of each test case contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of buildings. The second line of each test case contains n space separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) \u2014 the heights of the buildings.",
    "output": "For each test case, output a single integer \u2014 the minimum possible ugliness of the buildings.",
    "note": "In the first test case, the ugliness is already 0 . In the second test case, you should do one operation, with i = 1 and j = 3 . The new heights will now be [ 2, 2, 2, 2] , with an ugliness of 0 . In the third test case, you may do three operations: with i = 3 and j = 1 . The new array will now be [ 2, 2, 2, 1, 5] , with i = 5 and j = 4 . The new array will now be [ 2, 2, 2, 2, 4] , with i = 5 and j = 3 . The new array will now be [ 2, 2, 3, 2, 3] . The resulting ugliness is 1 . It can be proven that this is the minimum possible ugliness for this test.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1615A"
  },
  {
    "title": "Divan and a Store",
    "url": "https://codeforces.com/problemset/problem/1614/A",
    "history": "Businessman Divan loves chocolate! Today he came to a store to buy some chocolate. Like all businessmen, Divan knows the value of money, so he will not buy too expensive chocolate. At the same time, too cheap chocolate tastes bad, so he will not buy it as well. The store he came to has n different chocolate bars, and the price of the i - th chocolate bar is a_ i dollars. Divan considers a chocolate bar too expensive if it costs strictly more than r dollars. Similarly, he considers a bar of chocolate to be too cheap if it costs strictly less than l dollars. Divan will not buy too cheap or too expensive bars. Divan is not going to spend all his money on chocolate bars, so he will spend at most k dollars on chocolates. Please determine the maximum number of chocolate bars Divan can buy.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The description of each test case consists of two lines. The first line contains integers n , l , r , k ( 1 \u2264 n \u2264 100 , 1 \u2264 l \u2264 r \u2264 10^ 9 , 1 \u2264 k \u2264 10^ 9 ) \u2014 the lowest acceptable price of a chocolate, the highest acceptable price of a chocolate and Divan' s total budget, respectively. The second line contains a sequence a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) integers \u2014 the prices of chocolate bars in the store.",
    "output": "For each test case print a single integer \u2014 the maximum number of chocolate bars Divan can buy.",
    "note": "In the first example Divan can buy chocolate bars 1 and 3 and spend 100 dollars on them. In the second example Divan can buy chocolate bars 3 and 4 and spend 7 dollars on them. In the third example Divan can buy chocolate bars 3 , 4 , and 5 for 12 dollars. In the fourth example Divan cannot buy any chocolate bar because each of them is either too cheap or too expensive. In the fifth example Divan cannot buy any chocolate bar because he considers the first bar too cheap, and has no budget for the second or third. In the sixth example Divan can buy all the chocolate bars in the shop.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1614A"
  },
  {
    "title": "Absent Remainder",
    "url": "https://codeforces.com/problemset/problem/1613/B",
    "history": "You are given a sequence a_ 1, a_ 2, . . . , a_ n consisting of n pairwise distinct positive integers. Find \u230an/ 2\u230b different pairs of integers x and y such that: x = \u0338 y ; x and y appear in a ; x mod y doesn' t appear in a . Note that some x or y can belong to multiple pairs. \u230a x \u230b denotes the floor function \u2014 the largest integer less than or equal to x . x mod y denotes the remainder from dividing x by y . If there are multiple solutions, print any of them. It can be shown that at least one solution always exists.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the sequence. The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) . All numbers in the sequence are pairwise distinct. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "The answer for each testcase should contain \u230an/ 2\u230b different pairs of integers x and y such that x = \u0338 y , x and y appear in a and x mod y doesn' t appear in a . Print the pairs one after another. You can print the pairs in any order. However, the order of numbers in the pair should be exactly such that the first number is x and the second number is y . All pairs should be pairwise distinct. If there are multiple solutions, print any of them.",
    "note": "In the first testcase there are only two pairs: ( 1, 4) and ( 4, 1) . \u230a2/ 2\u230b= 1 , so we have to find one pair. 1 mod 4= 1 , and 1 appears in a , so that pair is invalid. Thus, the only possible answer is a pair ( 4, 1) . In the second testcase, we chose pairs 8 mod 2= 0 and 8 mod 4= 0 . 0 doesn' t appear in a , so that answer is valid. There are multiple possible answers for that testcase. In the third testcase, the chosen pairs are 9 mod 5= 4 and 7 mod 5= 2 . Neither 4 , nor 2 , appears in a , so that answer is valid.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1613B"
  },
  {
    "title": "Max Sum Array",
    "url": "https://codeforces.com/problemset/problem/1612/G",
    "history": "You are given an array c = [ c_ 1, c_ 2, . . . , c_ m] . An array a = [ a_ 1, a_ 2, . . . , a_ n] is constructed in such a way that it consists of integers 1, 2, . . . , m , and for each i \u2208 [ 1, m] , there are exactly c_ i occurrences of integer i in a . So, the number of elements in a is exactly \u2211_ i= 1^ m c_ i . Let' s define for such array a the value f( a) as f( a) = \u2211_ 1 \u2264 i < j \u2264 n a_ i = a_ jj - i. In other words, f( a) is the total sum of distances between all pairs of equal elements. Your task is to calculate the maximum possible value of f( a) and the number of arrays yielding the maximum possible value of f( a) . Two arrays are considered different, if elements at some position differ.",
    "input": "The first line contains a single integer m ( 1 \u2264 m \u2264 5 \u00b7 10^ 5 ) \u2014 the size of the array c . The second line contains m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ i \u2264 10^ 6 ) \u2014 the array c .",
    "output": "Print two integers \u2014 the maximum possible value of f( a) and the number of arrays a with such value. Since both answers may be too large, print them modulo 10^ 9 + 7 .",
    "note": "In the first example, all possible arrays a are permutations of [ 1, 2, 3, 4, 5, 6] . Since each array a will have f( a) = 0 , so maximum value is f( a) = 0 and there are 6! = 720 such arrays. In the second example, the only possible array consists of 10^ 6 ones and its f( a) = \u2211_ 1 \u2264 i < j \u2264 10^ 6j - i = 166 666 666 666 500 000 and 166 666 666 666 500 000 10^ 9 + 7 = 499 833 345 .",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1612G"
  },
  {
    "title": "Armor and Weapons",
    "url": "https://codeforces.com/problemset/problem/1612/F",
    "history": "Monocarp plays a computer game. There are n different sets of armor and m different weapons in this game. If a character equips the i - th set of armor and wields the j - th weapon, their power is usually equal to i + j ; but some combinations of armor and weapons synergize well. Formally, there is a list of q ordered pairs, and if the pair ( i, j) belongs to this list, the power of the character equipped with the i - th set of armor and wielding the j - th weapon is not i + j , but i + j + 1 . Initially, Monocarp' s character has got only the 1 - st armor set and the 1 - st weapon. Monocarp can obtain a new weapon or a new set of armor in one hour. If he wants to obtain the k - th armor set or the k - th weapon, he must possess a combination of an armor set and a weapon that gets his power to k or greater. Of course, after Monocarp obtains a weapon or an armor set, he can use it to obtain new armor sets or weapons, but he can go with any of the older armor sets and/ or weapons as well. Monocarp wants to obtain the n - th armor set and the m - th weapon. What is the minimum number of hours he has to spend on it?",
    "input": "The first line contains two integers n and m ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of armor sets and the number of weapons, respectively. The second line contains one integer q ( 0 \u2264 q \u2264min( 2 \u00b7 10^ 5, nm) ) \u2014 the number of combinations that synergize well. Then q lines follow, the i - th line contains two integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 n ; 1 \u2264 b_ i \u2264 m ) meaning that the a_ i - th armor set synergizes well with the b_ i - th weapon. All pairs ( a_ i, b_ i) are distinct.",
    "output": "Print one integer \u2014 the minimum number of hours Monocarp has to spend to obtain both the n - th armor set and the m - th weapon.",
    "note": "In the first example, Monocarp can obtain the strongest armor set and the strongest weapon as follows: Obtain the 2 - nd weapon using the 1 - st armor set and the 1 - st weapon; Obtain the 3 - rd armor set using the 1 - st armor set and the 2 - nd weapon; Obtain the 4 - th weapon using the 3 - rd armor set and the 2 - nd weapon. In the second example, Monocarp can obtain the strongest armor set and the strongest weapon as follows: Obtain the 3 - rd armor set using the 1 - st armor set and the 1 - st weapon ( they synergize well, so Monocarp' s power is not 2 but 3 ) ; Obtain the 4 - th weapon using the 3 - rd armor set and the 1 - st weapon.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "shortest paths"
    ],
    "id": "1612F"
  },
  {
    "title": "Messages",
    "url": "https://codeforces.com/problemset/problem/1612/E",
    "history": "Monocarp is a tutor of a group of n students. He communicates with them using a conference in a popular messenger. Today was a busy day for Monocarp \u2014 he was asked to forward a lot of posts and announcements to his group, that' s why he had to write a very large number of messages in the conference. Monocarp knows the students in the group he is tutoring quite well, so he understands which message should each student read: Monocarp wants the student i to read the message m_ i . Of course, no one' s going to read all the messages in the conference. That' s why Monocarp decided to pin some of them. Monocarp can pin any number of messages, and if he wants anyone to read some message, he should pin it \u2014 otherwise it will definitely be skipped by everyone. Unfortunately, even if a message is pinned, some students may skip it anyway. For each student i , Monocarp knows that they will read at most k_ i messages. Suppose Monocarp pins t messages; if t \u2264 k_ i , then the i - th student will read all the pinned messages; but if t > k_ i , the i - th student will choose exactly k_ i random pinned messages ( all possible subsets of pinned messages of size k_ i are equiprobable) and read only the chosen messages. Monocarp wants to maximize the expected number of students that read their respective messages ( i. e. the number of such indices i that student i reads the message m_ i ) . Help him to choose how many ( and which) messages should he pin!",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students in the conference. Then n lines follow. The i - th line contains two integers m_ i and k_ i ( 1 \u2264 m_ i \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k_ i \u2264 20 ) \u2014 the index of the message which Monocarp wants the i - th student to read and the maximum number of messages the i - th student will read, respectively.",
    "output": "In the first line, print one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of messages Monocarp should pin. In the second line, print t distinct integers c_ 1 , c_ 2 , . . . , c_ t ( 1 \u2264 c_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the indices of the messages Monocarp should pin. The messages can be listed in any order. If there are multiple answers, print any of them.",
    "note": "Let' s consider the examples from the statement. In the first example, Monocarp pins the messages 5 and 10 . if the first student reads the message 5 , the second student reads the messages 5 and 10 , and the third student reads the messages 5 and 10 , the number of students which have read their respective messages will be 2 ; if the first student reads the message 10 , the second student reads the messages 5 and 10 , and the third student reads the messages 5 and 10 , the number of students which have read their respective messages will be 3 . So, the expected number of students which will read their respective messages is 5/ 2 . In the second example, Monocarp pins the message 10 . if the first student reads the message 10 , the second student reads the message 10 , and the third student reads the message 10 , the number of students which have read their respective messages will be 2 . So, the expected number of students which will read their respective messages is 2 . If Monocarp had pinned both messages 5 and 10 , the expected number of students which read their respective messages would have been 2 as well. In the third example, the expected number of students which will read their respective messages is 8/ 3 . In the fourth example, the expected number of students which will read their respective messages is 2 .",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "probabilities",
      "sortings"
    ],
    "id": "1612E"
  },
  {
    "title": "Special Permutation",
    "url": "https://codeforces.com/problemset/problem/1612/B",
    "history": "A permutation of length n is an array p= [ p_ 1, p_ 2, . . . , p_ n] which contains every integer from 1 to n ( inclusive) exactly once. For example, p= [ 4, 2, 6, 5, 3, 1] is a permutation of length 6 . You are given three integers n , a and b , where n is an even number. Print any permutation of length n that the minimum among all its elements of the left half equals a and the maximum among all its elements of the right half equals b . Print - 1 if no such permutation exists.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) , the number of test cases in the test. The following t lines contain test case descriptions. Each test case description contains three integers n , a , b ( 2 \u2264 n \u2264 100 ; 1 \u2264 a, b \u2264 n ; a b ) , where n is an even number ( i. e. n 2 = 0 ) .",
    "output": "For each test case, print a single line containing any suitable permutation. Print - 1 no such permutation exists. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1612B"
  },
  {
    "title": "Robot and Candies",
    "url": "https://codeforces.com/problemset/problem/1611/G",
    "history": "Polycarp has a rectangular field of n \u00d7 m cells ( the size of the n \u00b7 m field does not exceed 10^ 6 cells, m \u2265 2 ) , in each cell of which there can be candy. There are n rows and m columns in the field. Let' s denote a cell with coordinates x vertically and y horizontally by ( x, y) . Then the top- left cell will be denoted as ( 1, 1) , and the bottom- right cell will be denoted as ( n, m) . If there is candy in the cell, then the cell is marked with the symbol ' 1' , otherwise \u2014 with the symbol ' 0' . Polycarp made a Robot that can collect candy. The Robot can move from ( x, y) either to ( x+ 1, y+ 1) , or to ( x+ 1, y- 1) . If the Robot is in a cell that contains candy, it takes it. While there is at least one candy on the field, the following procedure is executed: Polycarp puts the Robot in an arbitrary cell on the topmost row of the field. He himself chooses in which cell to place the Robot. It is allowed to put the Robot in the same cell multiple times. The Robot moves across the field and collects candies. He controls the Robot. When the Robot leaves the field, Polycarp takes it. If there are still candies left, Polycarp repeats the procedure. Find the minimum number of times Polycarp needs to put the Robot on the topmost row of the field in order to collect all the candies. It is guaranteed that Polycarp can always collect all the candies.",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input data sets in the test. Before each input data, there is a blank line in the test. Next is a line that contains integers n and m ( 2 \u2264 m , 2 \u2264 n \u00b7 m \u2264 10^ 6 ) \u2014 field sizes. This is followed by n lines, i - th of which describes the i - th line of the field. Each of them is a string of size m characters: the symbol ' 1' corresponds to a cell with candy, the symbol ' 0' \u2014 an empty cell. It is guaranteed that the sum of n \u00b7 m values for all input data sets in the test does not exceed 10^ 6 .",
    "output": "Print t lines, each line should contain the answer to the corresponding set of input data: the minimum number of times Polycarpus needs to put the Robot on the topmost row of the field in order to collect all the candies.",
    "note": "In the first set Polycarp may not put the Robot on the field at all, so the answer \" 0\" In the second set, Polycarp will need to place the robot on the field twice. The Robot can collect candies like this: for the first time Polycarp puts the Robot in the cell ( 1, 1) and collects candies at the positions ( 1, 1) and ( 3, 3) . The second time Polycarp can again put the Robot in ( 1, 1) , and then the Robot will move first to ( 2, 2) , then to ( 3, 1) and collect the last candy. In the fourth set, you can show that the Robot cannot collect all the candies in three passes.",
    "topics": [
      "data structures",
      "graph matchings",
      "greedy"
    ],
    "id": "1611G"
  },
  {
    "title": "Escape The Maze (hard version)",
    "url": "https://codeforces.com/problemset/problem/1611/E2",
    "history": "The only difference with E1 is the question of the problem. Vlad built a maze out of n rooms and n- 1 bidirectional corridors. From any room u any other room v can be reached through a sequence of corridors. Thus, the room system forms an undirected tree. Vlad invited k friends to play a game with them. Vlad starts the game in the room 1 and wins if he reaches a room other than 1 , into which exactly one corridor leads. Friends are placed in the maze: the friend with number i is in the room x_ i , and no two friends are in the same room ( that is, x_ i = \u0338 x_ j for all i = \u0338 j ) . Friends win if one of them meets Vlad in any room or corridor before he wins. For one unit of time, each participant of the game can go through one corridor. All participants move at the same time. Participants may not move. Each room can fit all participants at the same time. Friends know the plan of a maze and intend to win. They don' t want to waste too much energy. They ask you to determine if they can win and if they can, what minimum number of friends must remain in the maze so that they can always catch Vlad. In other words, you need to determine the size of the minimum ( by the number of elements) subset of friends who can catch Vlad or say that such a subset does not exist.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The input contains an empty string before each test case. The first line of the test case contains two numbers n and k ( 1 \u2264 k < n \u2264 2\u00b7 10^ 5 ) \u2014 the number of rooms and friends, respectively. The next line of the test case contains k integers x_ 1, x_ 2, . . . , x_ k ( 2 \u2264 x_ i \u2264 n ) \u2014 numbers of rooms with friends. All x_ i are different. The next n- 1 lines contain descriptions of the corridors, two numbers per line v_ j and u_ j ( 1 \u2264 u_ j, v_ j \u2264 n ) \u2014 numbers of rooms that connect the j corridor. All corridors are bidirectional. From any room, you can go to any other by moving along the corridors. It is guaranteed that the sum of the values n over all test cases in the test is not greater than 2\u00b710^ 5 .",
    "output": "Print t lines, each line containing the answer to the corresponding test case. The answer to a test case should be - 1 if Vlad wins anyway and a minimal number of friends otherwise.",
    "note": "In the first set of inputs, even if all the friends stay in the maze, Vlad can still win. Therefore, the answer is \" - 1\" . In the second set of inputs it is enough to leave friends from rooms 6 and 7 . Then Vlad will not be able to win. The answer is \" 2\" . In the third and fourth sets of inputs Vlad cannot win only if all his friends stay in the maze. Therefore the answers are \" 1\" and \" 2\" .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1611E2"
  },
  {
    "title": "Escape The Maze (easy version)",
    "url": "https://codeforces.com/problemset/problem/1611/E1",
    "history": "The only difference with E2 is the question of the problem. . Vlad built a maze out of n rooms and n- 1 bidirectional corridors. From any room u any other room v can be reached through a sequence of corridors. Thus, the room system forms an undirected tree. Vlad invited k friends to play a game with them. Vlad starts the game in the room 1 and wins if he reaches a room other than 1 , into which exactly one corridor leads. Friends are placed in the maze: the friend with number i is in the room x_ i , and no two friends are in the same room ( that is, x_ i = \u0338 x_ j for all i = \u0338 j ) . Friends win if one of them meets Vlad in any room or corridor before he wins. For one unit of time, each participant of the game can go through one corridor. All participants move at the same time. Participants may not move. Each room can fit all participants at the same time. Friends know the plan of a maze and intend to win. Vlad is a bit afraid of their ardor. Determine if he can guarantee victory ( i. e. can he win in any way friends play) . In other words, determine if there is such a sequence of Vlad' s moves that lets Vlad win in any way friends play.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The input contains an empty string before each test case. The first line of the test case contains two numbers n and k ( 1 \u2264 k < n \u2264 2\u00b7 10^ 5 ) \u2014 the number of rooms and friends, respectively. The next line of the test case contains k integers x_ 1, x_ 2, . . . , x_ k ( 2 \u2264 x_ i \u2264 n ) \u2014 numbers of rooms with friends. All x_ i are different. The next n- 1 lines contain descriptions of the corridors, two numbers per line v_ j and u_ j ( 1 \u2264 u_ j, v_ j \u2264 n ) \u2014 numbers of rooms that connect the j corridor. All corridors are bidirectional. From any room, you can go to any other by moving along the corridors. It is guaranteed that the sum of the values n over all test cases in the test is not greater than 2\u00b710^ 5 .",
    "output": "Print t lines, each line containing the answer to the corresponding test case. The answer to a test case should be \" YES\" if Vlad can guarantee himself a victory and \" NO\" otherwise. You may print every letter in any case you want ( so, for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" will all be recognized as positive answers) .",
    "note": "In the first test case, regardless of the strategy of his friends, Vlad can win by going to room 4 . The game may look like this: The original locations of Vlad and friends. Vlad is marked in green, friends \u2014 in red. Locations after one unit of time. End of the game. Note that if Vlad tries to reach the exit at the room 8 , then a friend from the 3 room will be able to catch him.",
    "topics": [
      "dfs and similar",
      "greedy",
      "shortest paths",
      "trees",
      "two pointers"
    ],
    "id": "1611E1"
  },
  {
    "title": "Squid Game",
    "url": "https://codeforces.com/problemset/problem/1610/H",
    "history": "After watching the new over- rated series Squid Game, Mashtali and Soroush decided to hold their own Squid Games! Soroush agreed to be the host and will provide money for the winner' s prize, and Mashtali became the Front Man! m players registered to play in the games to win the great prize, but when Mashtali found out how huge the winner' s prize is going to be, he decided to kill eliminate all the players so he could take the money for himself! Here is how evil Mashtali is going to eliminate players: There is an unrooted tree with n vertices. Every player has 2 special vertices x_ i and y_ i . In one operation, Mashtali can choose any vertex v of the tree. Then, for each remaining player i he finds a vertex w on the simple path from x_ i to y_ i , which is the closest to v . If w x_ i and w y_ i , player i will be eliminated. Now Mashtali wondered: \" What is the minimum number of operations I should perform so that I can remove every player from the game and take the money for myself? \" Since he was only thinking about the money, he couldn' t solve the problem by himself and asked for your help!",
    "input": "The first line contains 2 integer n and m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 5) \u2014 the number of vertices of the tree and the number of players. The second line contains n- 1 integers par_ 2, par_ 3, . . . , par_ n ( 1 \u2264 par_ i < i) \u2014 denoting an edge between node i and par_ i . The i - th of the following m lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n, x_ i y_ i) \u2014 the special vertices of the i - th player.",
    "output": "Print the minimum number of operations Mashtali has to perform. If there is no way for Mashtali to eliminate all the players, print - 1 .",
    "note": "Explanation for the first sample: In the first operation, Mashtali can choose vertex 1 and eliminate players with colors red and blue. In the second operation, he can choose vertex 6 and eliminate the player with orange color. In the second sample, Mashtali can' t eliminate the first player.",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1610H"
  },
  {
    "title": "AmShZ Wins a Bet",
    "url": "https://codeforces.com/problemset/problem/1610/G",
    "history": "Right before the UEFA Euro 2020, AmShZ and Safar placed bets on who' d be the champion, AmShZ betting on Italy, and Safar betting on France. Of course, AmShZ won. Hence, Safar gave him a bracket sequence S . Note that a bracket sequence is a string made of ' ( ' and ' ) ' characters. AmShZ can perform the following operation any number of times: First, he cuts his string S into three ( possibly empty) contiguous substrings A, B and C . Then, he glues them back by using a ' ( ' and a ' ) ' characters, resulting in a new string S = A + \" ( \" + B + \" ) \" + C . For example, if S = \" ) ) ( ( \" and AmShZ cuts it into A = \" \" , B = \" ) ) \" , and C = \" ( ( \" , He will obtain S = \" ( ) ) ) ( ( \" as a new string. After performing some ( possibly none) operations, AmShZ gives his string to Keshi and asks him to find the initial string. Of course, Keshi might be able to come up with more than one possible initial string. Keshi is interested in finding the lexicographically smallest possible initial string. Your task is to help Keshi in achieving his goal. A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The only line of input contains a single string S \u2014 the string after the operations ( 1\u2264 | S| \u2264 3 \u00b7 10^ 5) . It is guaranteed that the first character of S is ' ) ' .",
    "output": "Print the lexicographically smallest possible initial string before operations.",
    "note": "In the first sample, you can transform \" ) ( ( ( ) ) ) ) \" into \" ) ( ( ) ( ( ) ) ) ) \" by splitting it into \" ) ( \" , empty string, and \" ( ( ) ) ) ) \" . It can be shown that this is the lexicographically smallest possible initial string",
    "topics": [
      "data structures",
      "greedy",
      "hashing"
    ],
    "id": "1610G"
  },
  {
    "title": "AmShZ and G.O.A.T.",
    "url": "https://codeforces.com/problemset/problem/1610/E",
    "history": "Let' s call an array of k integers c_ 1, c_ 2, . . . , c_ k terrible, if the following condition holds: Let AVG be the c_ 1 + c_ 2 + . . . + c_ k/ k ( the average of all the elements of the array, it doesn' t have to be integer) . Then the number of elements of the array which are bigger than AVG should be strictly larger than the number of elements of the array which are smaller than AVG . Note that elements equal to AVG don' t count. For example c = { 1, 4, 4, 5, 6} is terrible because AVG = 4. 0 and 5 - th and 4 - th elements are greater than AVG and 1 - st element is smaller than AVG . Let' s call an array of m integers b_ 1, b_ 2, . . . , b_ m bad, if at least one of its non- empty subsequences is terrible, and good otherwise. You are given an array of n integers a_ 1, a_ 2, . . . , a_ n . Find the minimum number of elements that you have to delete from it to obtain a good array. An array is a subsequence of another array if it can be obtained from it by deletion of several ( possibly, zero or all) elements.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of a . The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of array a . In each testcase for any 1 \u2264 i n it is guaranteed that a_ i \u2264 a_ i+ 1 . It is guaranteed that the sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print the minimum number of elements that you have to delete from it to obtain a good array.",
    "note": "In the first sample, the array a is already good. In the second sample, it' s enough to delete 1 , obtaining array [ 4, 4, 5, 6] , which is good.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1610E"
  },
  {
    "title": "Keshi Is Throwing a Party",
    "url": "https://codeforces.com/problemset/problem/1610/C",
    "history": "Keshi is throwing a party and he wants everybody in the party to be happy. He has n friends. His i - th friend has i dollars. If you invite the i - th friend to the party, he will be happy only if at most a_ i people in the party are strictly richer than him and at most b_ i people are strictly poorer than him. Keshi wants to invite as many people as possible. Find the maximum number of people he can invite to the party so that every invited person would be happy.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 2 \u00b7 10^ 5) \u2014 the number of Keshi' s friends. The i - th of the following n lines contains two integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i < n) . It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print the maximum number of people Keshi can invite.",
    "note": "In the first test case, he invites the first and the second person. If he invites all of them, the third person won' t be happy because there will be more than 1 person poorer than him.",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1610C"
  },
  {
    "title": "Kalindrome Array",
    "url": "https://codeforces.com/problemset/problem/1610/B",
    "history": "An array [ b_ 1, b_ 2, . . . , b_ m] is a palindrome, if b_ i = b_ m+ 1- i for each i from 1 to m . Empty array is also a palindrome. An array is called kalindrome, if the following condition holds: It' s possible to select some integer x and delete some of the elements of the array equal to x , so that the remaining array ( after gluing together the remaining parts) is a palindrome. Note that you don' t have to delete all elements equal to x , and you don' t have to delete at least one element equal to x . For example : [ 1, 2, 1] is kalindrome because you can simply not delete a single element. [ 3, 1, 2, 3, 1] is kalindrome because you can choose x = 3 and delete both elements equal to 3 , obtaining array [ 1, 2, 1] , which is a palindrome. [ 1, 2, 3] is not kalindrome. You are given an array [ a_ 1, a_ 2, . . . , a_ n] . Determine if a is kalindrome or not.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array. It' s guaranteed that the sum of n over all test cases won' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print YES if a is kalindrome and NO otherwise. You can print each letter in any case.",
    "note": "In the first test case, array [ 1] is already a palindrome, so it' s a kalindrome as well. In the second test case, we can choose x = 2 , delete the second element, and obtain array [ 1] , which is a palindrome. In the third test case, it' s impossible to obtain a palindrome. In the fourth test case, you can choose x = 4 and delete the fifth element, obtaining [ 1, 4, 4, 1] . You also can choose x = 1 , delete the first and the fourth elements, and obtain [ 4, 4, 4] .",
    "topics": [
      "greedy",
      "two pointers"
    ],
    "id": "1610B"
  },
  {
    "title": "A Stroll Around the Matrix",
    "url": "https://codeforces.com/problemset/problem/1609/G",
    "history": "William has two arrays of numbers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ m . The arrays satisfy the conditions of being convex. Formally an array c of length k is considered convex if c_ i - c_ i - 1 < c_ i + 1 - c_ i for all i from 2 to k - 1 and c_ 1 < c_ 2 . Throughout William' s life he observed q changes of two types happening to the arrays: Add the arithmetic progression d, d \u00b7 2, d \u00b7 3, . . . , d \u00b7 k to the suffix of the array a of length k . The array after the change looks like this: [ a_ 1, a_ 2, . . . , a_ n - k, a_ n - k + 1 + d, a_ n - k + 2 + d \u00b7 2, . . . , a_ n + d \u00b7 k] . The same operation, but for array b . After each change a matrix d is created from arrays a and b , of size n \u00d7 m , where d_ i, j= a_ i + b_ j . William wants to get from cell ( 1, 1 ) to cell ( n, m ) of this matrix. From cell ( x, y ) he can only move to cells ( x + 1, y ) and ( x, y + 1 ) . The length of a path is calculated as the sum of numbers in cells visited by William, including the first and the last cells. After each change William wants you to help find out the minimal length of the path he could take.",
    "input": "The first line contains three integers n , m and q ( 2 \u2264 n \u2264 100, 2 \u2264 m \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) , the sizes of the arrays and the number of changes. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) , the contents of array a . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 12 ) , the contents of array b . Each of the next q lines contains three integers type , k and d ( 1 \u2264 type \u2264 2 , if type = 1 , then 1 \u2264 k \u2264 n otherwise 1 \u2264 k \u2264 m , 1 \u2264 d \u2264 10^ 3 ) .",
    "output": "After each change, output one integer, the minimum length of the path in the constructed matrix.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1609G"
  },
  {
    "title": "Social Network",
    "url": "https://codeforces.com/problemset/problem/1609/D",
    "history": "William arrived at a conference dedicated to cryptocurrencies. Networking, meeting new people, and using friends' connections are essential to stay up to date with the latest news from the world of cryptocurrencies. The conference has n participants, who are initially unfamiliar with each other. William can introduce any two people, a and b , who were not familiar before, to each other. William has d conditions, i ' th of which requires person x_ i to have a connection to person y_ i . Formally, two people x and y have a connection if there is such a chain p_ 1= x, p_ 2, p_ 3, . . . , p_ k= y for which for all i from 1 to k - 1 it' s true that two people with numbers p_ i and p_ i + 1 know each other. For every i ( 1 \u2264 i \u2264 d ) William wants you to calculate the maximal number of acquaintances one person can have, assuming that William satisfied all conditions from 1 and up to and including i and performed exactly i introductions. The conditions are being checked after William performed i introductions. The answer for each i must be calculated independently. It means that when you compute an answer for i , you should assume that no two people have been introduced to each other yet.",
    "input": "The first line contains two integers n and d ( 2 \u2264 n \u2264 10^ 3, 1 \u2264 d \u2264 n - 1 ) , the number of people, and number of conditions, respectively. Each of the next d lines each contain two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n, x_ i = \u0338 y_ i ) , the numbers of people which must have a connection according to condition i .",
    "output": "Output d integers. i th number must equal the number of acquaintances the person with the maximal possible acquaintances will have, if William performed i introductions and satisfied the first i conditions.",
    "note": "The explanation for the first test case: In this explanation, the circles and the numbers in them denote a person with the corresponding number. The line denotes that William introduced two connected people. The person marked with red has the most acquaintances. These are not the only correct ways to introduce people.",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1609D"
  },
  {
    "title": "Divide and Multiply",
    "url": "https://codeforces.com/problemset/problem/1609/A",
    "history": "William has array of n numbers a_ 1, a_ 2, . . . , a_ n . He can perform the following sequence of operations any number of times: Pick any two items from array a_ i and a_ j , where a_ i must be a multiple of 2 a_ i = a_ i/ 2 a_ j = a_ j \u00b7 2 Help William find the maximal sum of array elements, which he can get by performing the sequence of operations described above.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 15) , the number of elements in William' s array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i < 16) , the contents of William' s array.",
    "output": "For each test case output the maximal sum of array elements after performing an optimal sequence of operations.",
    "note": "In the first example test case the optimal sequence would be: Pick i = 2 and j = 1 . After performing a sequence of operations a_ 2 = 4/ 2 = 2 and a_ 1 = 6 \u00b7 2 = 12 , making the array look as: [ 12, 2, 2] . Pick i = 2 and j = 1 . After performing a sequence of operations a_ 2 = 2/ 2 = 1 and a_ 1 = 12 \u00b7 2 = 24 , making the array look as: [ 24, 1, 2] . Pick i = 3 and j = 1 . After performing a sequence of operations a_ 3 = 2/ 2 = 1 and a_ 1 = 24 \u00b7 2 = 48 , making the array look as: [ 48, 1, 1] . The final answer 48 + 1 + 1 = 50 . In the third example test case there is no way to change the sum of elements, so the answer is 10 .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ],
    "id": "1609A"
  },
  {
    "title": "Game Master",
    "url": "https://codeforces.com/problemset/problem/1608/C",
    "history": "n players are playing a game. There are two different maps in the game. For each player, we know his strength on each map. When two players fight on a specific map, the player with higher strength on that map always wins. No two players have the same strength on the same map. You are the game master and want to organize a tournament. There will be a total of n- 1 battles. While there is more than one player in the tournament, choose any map and any two remaining players to fight on it. The player who loses will be eliminated from the tournament. In the end, exactly one player will remain, and he is declared the winner of the tournament. For each player determine if he can win the tournament.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of players. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 , a_ i = \u0338 a_ j for i = \u0338 j ) , where a_ i is the strength of the i - th player on the first map. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 , b_ i = \u0338 b_ j for i = \u0338 j ) , where b_ i is the strength of the i - th player on the second map. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a string of length n . i - th character should be \" 1\" if the i - th player can win the tournament, or \" 0\" otherwise.",
    "note": "In the first test case, the 4 - th player will beat any other player on any game, so he will definitely win the tournament. In the second test case, everyone can be a winner. In the third test case, there is only one player. Clearly, he will win the tournament.",
    "topics": [
      "data structures",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "two pointers"
    ],
    "id": "1608C"
  },
  {
    "title": "Build the Permutation",
    "url": "https://codeforces.com/problemset/problem/1608/B",
    "history": "You are given three integers n, a, b . Determine if there exists a permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , such that: There are exactly a integers i with 2 \u2264 i \u2264 n- 1 such that p_ i- 1 < p_ i > p_ i+ 1 ( in other words, there are exactly a local maximums) . There are exactly b integers i with 2 \u2264 i \u2264 n- 1 such that p_ i- 1 > p_ i < p_ i+ 1 ( in other words, there are exactly b local minimums) . If such permutations exist, find any such permutation.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of test cases follows. The only line of each test case contains three integers n , a and b ( 2 \u2264 n \u2264 10^ 5 , 0 \u2264 a, b \u2264 n ) . The sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, if there is no permutation with the requested properties, output - 1 . Otherwise, print the permutation that you are found. If there are several such permutations, you may print any of them.",
    "note": "In the first test case, one example of such permutations is [ 1, 3, 2, 4] . In it p_ 1 < p_ 2 > p_ 3 , and 2 is the only such index, and p_ 2> p_ 3 < p_ 4 , and 3 the only such index. One can show that there is no such permutation for the third test case.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1608B"
  },
  {
    "title": "Banquet Preparations 2",
    "url": "https://codeforces.com/problemset/problem/1607/H",
    "history": "The chef has cooked n dishes yet again: the i - th dish consists of a_ i grams of fish and b_ i grams of meat. Banquet organizers consider two dishes i and j equal if a_ i= a_ j and b_ i= b_ j at the same time. The banquet organizers estimate the variety of n dishes as follows. The variety of a set of dishes is equal to the number of different dishes in it. The less variety is, the better. In order to reduce the variety, a taster was invited. He will eat exactly m_ i grams of food from each dish. For each dish, the taster determines separately how much fish and how much meat he will eat. The only condition is that he will eat exactly m_ i grams of the i - th dish in total. Determine how much of what type of food the taster should eat from each dish so that the value of variety is the minimum possible. If there are several correct answers, you may output any of them.",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case' s description is preceded by a blank line. Next comes a line that contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of dishes. Then follows n lines, i - th of which contains three integers a_ i , b_ i and m_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 6 ; 0 \u2264 m_ i \u2264 a_ i+ b_ i ) \u2014 the mass of fish in i - th dish, the mass of meat in i - th dish and how many grams in total the taster should eat in i - th dish. The sum of all n values for all input data sets in the test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on the first line the minimum value of variety that can be achieved by eating exactly m_ i grams of food ( for all i from 1 to n ) from a dish i . Then print n lines that describe a way to do this: the i - th line should contain two integers x_ i and y_ i ( 0 \u2264 x_ i \u2264 a_ i ; 0 \u2264 y_ i \u2264 b_ i ; x_ i+ y_ i= m_ i ) , where x_ i is how many grams of fish the taster should eat from i - th dish, and y_ i is how many grams of meat. If there are several ways to achieve a minimum balance, print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1607H"
  },
  {
    "title": "Banquet Preparations 1",
    "url": "https://codeforces.com/problemset/problem/1607/G",
    "history": "A known chef has prepared n dishes: the i - th dish consists of a_ i grams of fish and b_ i grams of meat. The banquet organizers estimate the balance of n dishes as follows. The balance is equal to the absolute value of the difference between the total mass of fish and the total mass of meat. Technically, the balance equals to | \u2211_ i= 1^ n a_ i - \u2211_ i= 1^ n b_ i| . The smaller the balance, the better. In order to improve the balance, a taster was invited. He will eat exactly m grams of food from each dish. For each dish, the taster determines separately how much fish and how much meat he will eat. The only condition is that he should eat exactly m grams of each dish in total. Determine how much of what type of food the taster should eat from each dish so that the value of the balance is as minimal as possible. If there are several correct answers, you may choose any of them.",
    "input": "The first line of input data contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of the test cases. Each test case' s description is preceded by a blank line. Next comes a line that contains integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 0 \u2264 m \u2264 10^ 6 ) . The next n lines describe dishes, the i - th of them contains a pair of integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 6 ) \u2014 the masses of fish and meat in the i - th dish. It is guaranteed that it is possible to eat m grams of food from each dish. In other words, m \u2264 a_ i+ b_ i for all i from 1 to n inclusive. The sum of all n values over all test cases in the test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on the first line the minimal balance value that can be achieved by eating exactly m grams of food from each dish. Then print n lines that describe a way to do this: the i - th line should contain two integers x_ i and y_ i ( 0 \u2264 x_ i \u2264 a_ i ; 0 \u2264 y_ i \u2264 b_ i ; x_ i+ y_ i= m ) , where x_ i is how many grams of fish taster should eat from the i - th meal and y_ i is how many grams of meat. If there are several ways to achieve a minimal balance, find any of them.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1607G"
  },
  {
    "title": "Blue-Red Permutation",
    "url": "https://codeforces.com/problemset/problem/1607/D",
    "history": "You are given an array of integers a of length n . The elements of the array can be either different or the same. Each element of the array is colored either blue or red. There are no unpainted elements in the array. One of the two operations described below can be applied to an array in a single step: either you can select any blue element and decrease its value by 1 ; or you can select any red element and increase its value by 1 . Situations in which there are no elements of some color at all are also possible. For example, if the whole array is colored blue or red, one of the operations becomes unavailable. Determine whether it is possible to make 0 or more steps such that the resulting array is a permutation of numbers from 1 to n ? In other words, check whether there exists a sequence of steps ( possibly empty) such that after applying it, the array a contains in some order all numbers from 1 to n ( inclusive) , each exactly once.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of input data sets in the test. The description of each set of input data consists of three lines. The first line contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the original array a . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array elements themselves. The third line has length n and consists exclusively of the letters ' B' and/ or ' R' : i th character is ' B' if a_ i is colored blue, and is ' R' if colored red. It is guaranteed that the sum of n over all input sets does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each of which contains the answer to the corresponding test case of the input. Print YES as an answer if the corresponding array can be transformed into a permutation, and NO otherwise. You can print the answer in any case ( for example, the strings yEs, yes, Yes, and YES will be recognized as a positive answer) .",
    "note": "In the first test case of the example, the following sequence of moves can be performed: choose i= 3 , element a_ 3= 5 is blue, so we decrease it, we get a= [ 1, 2, 4, 2] ; choose i= 2 , element a_ 2= 2 is red, so we increase it, we get a= [ 1, 3, 4, 2] ; choose i= 3 , element a_ 3= 4 is blue, so we decrease it, we get a= [ 1, 3, 3, 2] ; choose i= 2 , element a_ 2= 2 is red, so we increase it, we get a= [ 1, 4, 3, 2] . We got that a is a permutation. Hence the answer is YES.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1607D"
  },
  {
    "title": "Banknotes",
    "url": "https://codeforces.com/problemset/problem/1606/C",
    "history": "In Berland, n different types of banknotes are used. Banknotes of the i - th type have denomination 10^ a_ i burles ( burles are the currency used in Berland) ; the denomination of banknotes of the first type is exactly 1 . Let' s denote f( s) as the minimum number of banknotes required to represent exactly s burles. For example, if the denominations of banknotes used in Berland are 1 , 10 and 100 , then f( 59) = 14 : 9 banknotes with denomination of 1 burle and 5 banknotes with denomination of 10 burles can be used to represent exactly 9 \u00b7 1 + 5 \u00b7 10 = 59 burles, and there' s no way to do it with fewer banknotes. For a given integer k , find the minimum positive number of burles s that cannot be represented with k or fewer banknotes ( that is, f( s) > k ) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 10; 1 \u2264 k \u2264 10^ 9 ) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 = a_ 1 < a_ 2 < . . . < a_ n \u2264 9 ) .",
    "output": "For each test case, print one integer \u2014 the minimum positive number of burles s that cannot be represented with k or fewer banknotes.",
    "note": "",
    "topics": [
      "greedy",
      "number theory"
    ],
    "id": "1606C"
  },
  {
    "title": "Update Files",
    "url": "https://codeforces.com/problemset/problem/1606/B",
    "history": "Berland State University has received a new update for the operating system. Initially it is installed only on the 1 - st computer. Update files should be copied to all n computers. The computers are not connected to the internet, so the only way to transfer update files from one computer to another is to copy them using a patch cable ( a cable connecting two computers directly) . Only one patch cable can be connected to a computer at a time. Thus, from any computer where the update files are installed, they can be copied to some other computer in exactly one hour. Your task is to find the minimum number of hours required to copy the update files to all n computers if there are only k patch cables in Berland State University.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Each test case consists of a single line that contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 18 ) \u2014 the number of computers and the number of patch cables.",
    "output": "For each test case print one integer \u2014 the minimum number of hours required to copy the update files to all n computers.",
    "note": "Let' s consider the test cases of the example: n= 8 , k= 3 : during the first hour, we copy the update files from the computer 1 to the computer 2 ; during the second hour, we copy the update files from the computer 1 to the computer 3 , and from the computer 2 to the computer 4 ; during the third hour, we copy the update files from the computer 1 to the computer 5 , from the computer 2 to the computer 6 , and from the computer 3 to the computer 7 ; during the fourth hour, we copy the update files from the computer 2 to the computer 8 . n= 6 , k= 6 : during the first hour, we copy the update files from the computer 1 to the computer 2 ; during the second hour, we copy the update files from the computer 1 to the computer 3 , and from the computer 2 to the computer 4 ; during the third hour, we copy the update files from the computer 1 to the computer 5 , and from the computer 2 to the computer 6 . n= 7 , k= 1 : during the first hour, we copy the update files from the computer 1 to the computer 2 ; during the second hour, we copy the update files from the computer 1 to the computer 3 ; during the third hour, we copy the update files from the computer 1 to the computer 4 ; during the fourth hour, we copy the update files from the computer 4 to the computer 5 ; during the fifth hour, we copy the update files from the computer 4 to the computer 6 ; during the sixth hour, we copy the update files from the computer 3 to the computer 7 .",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1606B"
  },
  {
    "title": "Array Equalizer",
    "url": "https://codeforces.com/problemset/problem/1605/E",
    "history": "Jeevan has two arrays a and b of size n . He is fond of performing weird operations on arrays. This time, he comes up with two types of operations: Choose any i ( 1 \u2264 i \u2264 n ) and increment a_ j by 1 for every j which is a multiple of i and 1 \u2264 j \u2264 n . Choose any i ( 1 \u2264 i \u2264 n ) and decrement a_ j by 1 for every j which is a multiple of i and 1 \u2264 j \u2264 n . He wants to convert array a into an array b using the minimum total number of operations. However, Jeevan seems to have forgotten the value of b_ 1 . So he makes some guesses. He will ask you q questions corresponding to his q guesses, the i - th of which is of the form: If b_ 1 = x_ i , what is the minimum number of operations required to convert a to b ? Help him by answering each question.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the size of arrays a and b . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 6 for i = \u0338 1 ; b_ 1 = - 1 , representing that the value of b_ 1 is unknown ) . The fourth line contains a single integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5) \u2014 the number of questions. Each of the following q lines contains a single integer x_ i ( 1 \u2264 x_ i \u2264 10^ 6) \u2014 representing the i - th question.",
    "output": "Output q integers \u2014 the answers to each of his q questions.",
    "note": "Consider the first test case. b_ 1 = 1 : We need to convert [ 3, 7] \u2192 [ 1, 5] . We can perform the following operations: [ 3, 7] [ 2, 6] [ 1, 5] Hence the answer is 2 . b_ 1 = 4 : We need to convert [ 3, 7] \u2192 [ 4, 5] . We can perform the following operations: [ 3, 7] [ 3, 6] [ 3, 5] [ 4, 6] [ 4, 5] Hence the answer is 4 . b_ 1 = 3 : We need to convert [ 3, 7] \u2192 [ 3, 5] . We can perform the following operations: [ 3, 7] [ 3, 6] [ 3, 5] Hence the answer is 2 .",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ],
    "id": "1605E"
  },
  {
    "title": "Treelabeling",
    "url": "https://codeforces.com/problemset/problem/1605/D",
    "history": "Eikooc and Sushi play a game. The game is played on a tree having n nodes numbered 1 to n . Recall that a tree having n nodes is an undirected, connected graph with n- 1 edges. They take turns alternately moving a token on the tree. Eikooc makes the first move, placing the token on any node of her choice. Sushi makes the next move, followed by Eikooc, followed by Sushi, and so on. In each turn after the first, a player must move the token to a node u such that u is adjacent to the node v the token is currently on u has not been visited before u \u2295 v \u2264 min( u, v) Here x \u2295 y denotes the bitwise XOR operation on integers x and y . Both the players play optimally. The player who is unable to make a move loses. The following are examples which demonstrate the rules of the game. Suppose Eikooc starts the game by placing the token at node 4 . Sushi then moves the token to node 6 , which is unvisited and adjacent to 4 . It also holds that 6 \u2295 4 = 2 \u2264 min( 6, 4) . In the next turn, Eikooc moves the token to node 5 , which is unvisited and adjacent to 6 . It holds that 5 \u2295 6 = 3 \u2264 min( 5, 6) . Sushi has no more moves to play, so she loses. Suppose Eikooc starts the game by placing the token at node 3 . Sushi moves the token to node 2 , which is unvisited and adjacent to 3 . It also holds that 3 \u2295 2 = 1 \u2264 min( 3, 2) . Eikooc cannot move the token to node 6 since 6 \u2295 2 = 4 \u2264\u0338 min( 6, 2) . Since Eikooc has no moves to play, she loses. Before the game begins, Eikooc decides to sneakily relabel the nodes of the tree in her favour. Formally, a relabeling is a permutation p of length n ( sequence of n integers wherein each integer from 1 to n occurs exactly once) where p_ i denotes the new numbering of node i . She wants to maximize the number of nodes she can choose in the first turn which will guarantee her a win. Help Eikooc find any relabeling which will help her do so.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. The description of each test case is as follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the number of nodes in the tree. The next n- 1 lines contain two integers u and v ( 1 \u2264 u, v \u2264 n; u = \u0338 v) \u2014 denoting an edge between nodes u and v . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print any suitable relabeling \u2014 a permutation of length n which maximizes the number of nodes that can be chosen in the first turn that guarantee a win for Eikooc. If there are multiple such relabelings, you may print any of them.",
    "note": "In the first test case, Eikooc has only one choice. Sushi will have no moves to play after Eikooc chooses this node and Eikooc will win. In the second test case, 1 \u2295 2 = 3 \u2264\u0338 min( 1, 2) . Hence, after Eikooc picks either of the nodes, Sushi will have no moves to play and Eikooc will win. Both { 1, 2} and { 2, 1} are optimal relabelings.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "dfs and similar",
      "games",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1605D"
  },
  {
    "title": "Dominant Character",
    "url": "https://codeforces.com/problemset/problem/1605/C",
    "history": "Ashish has a string s of length n containing only characters ' a' , ' b' and ' c' . He wants to find the length of the smallest substring, which satisfies the following conditions: Length of the substring is at least 2 ' a' occurs strictly more times in this substring than ' b' ' a' occurs strictly more times in this substring than ' c' Ashish is busy planning his next Codeforces round. Help him solve the problem. A string a is a substring of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters from the beginning and several ( possibly, zero or all) characters from the end.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 6) \u2014 the length of the string s . The second line of each test case contains a string s consisting only of characters ' a' , ' b' and ' c' . It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, output the length of the smallest substring which satisfies the given conditions or print - 1 if there is no such substring.",
    "note": "Consider the first test case. In the substring \" aa\" , ' a' occurs twice, while ' b' and ' c' occur zero times. Since ' a' occurs strictly more times than ' b' and ' c' , the substring \" aa\" satisfies the condition and the answer is 2 . The substring \" a\" also satisfies this condition, however its length is not at least 2 . In the second test case, it can be shown that in none of the substrings of \" cbabb\" does ' a' occur strictly more times than ' b' and ' c' each. In the third test case, \" cacabccc\" , the length of the smallest substring that satisfies the conditions is 3 .",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1605C"
  },
  {
    "title": "Reverse Sort",
    "url": "https://codeforces.com/problemset/problem/1605/B",
    "history": "Ashish has a binary string s of length n that he wants to sort in non- decreasing order. He can perform the following operation: Choose a subsequence of any length such that its elements are in non- increasing order. Formally, choose any k such that 1 \u2264 k \u2264 n and any sequence of k indices 1 \u2264 i_ 1 i_ 2 . . . i_ k \u2264 n such that s_ i_ 1\u2265 s_ i_ 2\u2265. . . \u2265 s_ i_ k . Reverse this subsequence in- place. Formally, swap s_ i_ 1 with s_ i_ k , swap s_ i_ 2 with s_ i_ k- 1 , . . . and swap s_ i_ \u230a k/ 2 \u230b with s_ i_ \u2308 k/ 2 \u2309 + 1 ( Here \u230a x \u230b denotes the largest integer not exceeding x , and \u2308 x \u2309 denotes the smallest integer not less than x ) Find the minimum number of operations required to sort the string in non- decreasing order. It can be proven that it is always possible to sort the given binary string in at most n operations.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 1000) \u2014 the length of the binary string s . The second line of each test case contains a binary string s of length n containing only 0 s and 1 s. It is guaranteed that the sum of n over all test cases does not exceed 1000 .",
    "output": "For each test case output the following: The minimum number of operations m in the first line ( 0 \u2264 m \u2264 n ) . Each of the following m lines should be of the form: k i_ 1 i_ 2 . . . i_ k , where k is the length and i_ 1 i_ 2 . . . i_ k are the indices of the chosen subsequence. For them the conditions from the statement must hold.",
    "note": "In the first test case, the binary string is already sorted in non- decreasing order. In the second test case, we can perform the following operation: k = 4: choose the indices { 1, 3, 4, 5} 1 0 1 0 0 \u2192 0 0 0 1 1 In the third test case, we can perform the following operation: k = 3: choose the indices { 3, 5, 6} 0 0 1 0 0 0 \u2192 0 0 0 0 0 1",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1605B"
  },
  {
    "title": "Era",
    "url": "https://codeforces.com/problemset/problem/1604/A",
    "history": "Shohag has an integer sequence a_ 1, a_ 2, . . . , a_ n . He can perform the following operation any number of times ( possibly, zero) : Select any positive integer k ( it can be different in different operations) . Choose any position in the sequence ( possibly the beginning or end of the sequence, or in between any two elements) and insert k into the sequence at this position. This way, the sequence a changes, and the next operation is performed on this changed sequence. For example, if a= [ 3, 3, 4] and he selects k = 2 , then after the operation he can obtain one of the sequences [ 2, 3, 3, 4] , [ 3, 2, 3, 4] , [ 3, 3, 2, 4] , or [ 3, 3, 4, 2] . Shohag wants this sequence to satisfy the following condition: for each 1 \u2264 i \u2264 | a| , a_ i \u2264 i . Here, | a| denotes the size of a . Help him to find the minimum number of operations that he has to perform to achieve this goal. We can show that under the constraints of the problem it' s always possible to achieve this goal in a finite number of operations.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the initial length of the sequence. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the sequence.",
    "output": "For each test case, print a single integer \u2014 the minimum number of operations needed to perform to achieve the goal mentioned in the statement.",
    "note": "In the first test case, we have to perform at least one operation, as a_ 2= 3> 2 . We can perform the operation [ 1, 3, 4] \u2192 [ 1, 2, 3, 4] ( the newly inserted element is underlined) , now the condition is satisfied. In the second test case, Shohag can perform the following operations: [ 1, 2, 5, 7, 4] \u2192 [ 1, 2, 3, 5, 7, 4] \u2192 [ 1, 2, 3, 4, 5, 7, 4] \u2192 [ 1, 2, 3, 4, 5, 3, 7, 4] . In the third test case, the sequence already satisfies the condition.",
    "topics": [
      "greedy"
    ],
    "id": "1604A"
  },
  {
    "title": "Extreme Extension",
    "url": "https://codeforces.com/problemset/problem/1603/C",
    "history": "For an array b of n integers, the extreme value of this array is the minimum number of times ( possibly, zero) the following operation has to be performed to make b non- decreasing: Select an index i such that 1 \u2264 i \u2264 | b| , where | b| is the current length of b . Replace b_ i with two elements x and y such that x and y both are positive integers and x + y = b_ i . This way, the array b changes and the next operation is performed on this modified array. For example, if b = [ 2, 4, 3] and index 2 gets selected, then the possible arrays after this operation are [ 2, 1, 3, 3] , [ 2, 2, 2, 3] , or [ 2, 3, 1, 3] . And consequently, for this array, this single operation is enough to make it non- decreasing: [ 2, 4, 3] \u2192 [ 2, 2, 2, 3] . It' s easy to see that every array of positive integers can be made non- decreasing this way. YouKn0wWho has an array a of n integers. Help him find the sum of extreme values of all nonempty subarrays of a modulo 998 244 353 . If a subarray appears in a multiple times, its extreme value should be counted the number of times it appears. An array d is a subarray of an array c if d can be obtained from c by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the sum of extreme values of all subarrays of a modulo 998 244 353 .",
    "note": "Let f( l, r) denote the extreme value of [ a_ l, a_ l+ 1, . . . , a_ r] . In the first test case, f( 1, 3) = 3 , because YouKn0wWho can perform the following operations on the subarray [ 5, 4, 3] ( the newly inserted elements are underlined) : [ 5, 4, 3] \u2192 [ 3, 2, 4, 3] \u2192 [ 3, 2, 2, 2, 3] \u2192 [ 1, 2, 2, 2, 2, 3] ; f( 1, 2) = 1 , because [ 5, 4] \u2192 [ 2, 3, 4] ; f( 2, 3) = 1 , because [ 4, 3] \u2192 [ 1, 3, 3] ; f( 1, 1) = f( 2, 2) = f( 3, 3) = 0 , because they are already non- decreasing. So the total sum of extreme values of all subarrays of a = 3 + 1 + 1 + 0 + 0 + 0 = 5 .",
    "topics": [
      "dp",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1603C"
  },
  {
    "title": "Phys Ed Online",
    "url": "https://codeforces.com/problemset/problem/1601/E",
    "history": "Students of one unknown college don' t have PE courses. That' s why q of them decided to visit a gym nearby by themselves. The gym is open for n days and has a ticket system. At the i - th day, the cost of one ticket is equal to a_ i . You are free to buy more than one ticket per day. You can activate a ticket purchased at day i either at day i or any day later. Each activated ticket is valid only for k days. In other words, if you activate ticket at day t , it will be valid only at days t, t + 1, . . . , t + k - 1 . You know that the j - th student wants to visit the gym at each day from l_ j to r_ j inclusive. Each student will use the following strategy of visiting the gym at any day i ( l_ j \u2264 i \u2264 r_ j ) : person comes to a desk selling tickets placed near the entrance and buy several tickets with cost a_ i apiece ( possibly, zero tickets) ; if the person has at least one activated and still valid ticket, they just go in. Otherwise, they activate one of tickets purchased today or earlier and go in. Note that each student will visit gym only starting l_ j , so each student has to buy at least one ticket at day l_ j . Help students to calculate the minimum amount of money they have to spend in order to go to the gym.",
    "input": "The first line contains three integers n , q and k ( 1 \u2264 n, q \u2264 300 000 ; 1 \u2264 k \u2264 n ) \u2014 the number of days, the number of students and the number of days each ticket is still valid. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the cost of one ticket at the corresponding day. Each of the next q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the segment of days the corresponding student want to visit the gym.",
    "output": "For each student, print the minimum possible amount of money they have to spend in order to go to the gym at desired days.",
    "note": "Let' s see how each student have to spend their money: The first student should buy one ticket at day 1 . The second student should buy one ticket at day 3 and two tickets at day 4 . Note that student can keep purchased tickets for the next days. The third student should buy one ticket at day 5 . The fourth student should buy one ticket at day 7 . The fifth student should buy one ticket at day 3 and one at day 4 .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1601E"
  },
  {
    "title": "Difficult Mountain",
    "url": "https://codeforces.com/problemset/problem/1601/D",
    "history": "A group of n alpinists has just reached the foot of the mountain. The initial difficulty of climbing this mountain can be described as an integer d . Each alpinist can be described by two integers s and a , where s is his skill of climbing mountains and a is his neatness. An alpinist of skill level s is able to climb a mountain of difficulty p only if p \u2264 s . As an alpinist climbs a mountain, they affect the path and thus may change mountain difficulty. Specifically, if an alpinist of neatness a climbs a mountain of difficulty p the difficulty of this mountain becomes max( p, a) . Alpinists will climb the mountain one by one. And before the start, they wonder, what is the maximum number of alpinists who will be able to climb the mountain if they choose the right order. As you are the only person in the group who does programming, you are to answer the question. Note that after the order is chosen, each alpinist who can climb the mountain, must climb the mountain at that time.",
    "input": "The first line contains two integers n and d ( 1 \u2264 n \u2264 500 000 ; 0 \u2264 d \u2264 10^ 9 ) \u2014 the number of alpinists and the initial difficulty of the mountain. Each of the next n lines contains two integers s_ i and a_ i ( 0 \u2264 s_ i, a_ i \u2264 10^ 9 ) that define the skill of climbing and the neatness of the i - th alpinist.",
    "output": "Print one integer equal to the maximum number of alpinists who can climb the mountain if they choose the right order to do so.",
    "note": "In the first example, alpinists 2 and 3 can climb the mountain if they go in this order. There is no other way to achieve the answer of 2 . In the second example, alpinist 1 is not able to climb because of the initial difficulty of the mountain, while alpinists 2 and 3 can go up in any order. In the third example, the mountain can be climbed by alpinists 5 , 3 and 4 in this particular order. There is no other way to achieve optimal answer.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1601D"
  },
  {
    "title": "Optimal Insertion",
    "url": "https://codeforces.com/problemset/problem/1601/C",
    "history": "You are given two arrays of integers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ m . You need to insert all elements of b into a in an arbitrary way. As a result you will get an array c_ 1, c_ 2, . . . , c_ n+ m of size n + m . Note that you are not allowed to change the order of elements in a , while you can insert elements of b at arbitrary positions. They can be inserted at the beginning, between any elements of a , or at the end. Moreover, elements of b can appear in the resulting array in any order. What is the minimum possible number of inversions in the resulting array c ? Recall that an inversion is a pair of indices ( i, j) such that i < j and c_ i > c_ j .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 6 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line of each test case contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n for all tests cases in one input doesn' t exceed 10^ 6 . The sum of m for all tests cases doesn' t exceed 10^ 6 as well.",
    "output": "For each test case, print one integer \u2014 the minimum possible number of inversions in the resulting array c .",
    "note": "Below is given the solution to get the optimal answer for each of the example test cases ( elements of a are underscored) . In the first test case, c = [ 1, 1, 2, 2, 3, 3, 4] . In the second test case, c = [ 1, 2, 3, 2, 1, 3] . In the third test case, c = [ 1, 1, 3, 3, 5, 3, 1, 4, 6] .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1601C"
  },
  {
    "title": "Array Elimination",
    "url": "https://codeforces.com/problemset/problem/1601/A",
    "history": "You are given array a_ 1, a_ 2, . . . , a_ n , consisting of non- negative integers. Let' s define operation of \" elimination\" with integer parameter k ( 1 \u2264 k \u2264 n ) as follows: Choose k distinct array indices 1 \u2264 i_ 1 < i_ 2 < . . . < i_ k \u2264 n . Calculate x = a_ i_ 1 & a_ i_ 2 & . . . & a_ i_ k , where & denotes the bitwise AND operation ( notes section contains formal definition) . Subtract x from each of a_ i_ 1, a_ i_ 2, . . . , a_ i_ k ; all other elements remain untouched. Find all possible values of k , such that it' s possible to make all elements of array a equal to 0 using a finite number of elimination operations with parameter k . It can be proven that exists at least one possible k for any array a . Note that you firstly choose k and only after that perform elimination operations with value k you' ve chosen initially.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) \u2014 array a itself. It' s guaranteed that the sum of n over all test cases doesn' t exceed 200 000 .",
    "output": "For each test case, print all values k , such that it' s possible to make all elements of a equal to 0 in a finite number of elimination operations with the given parameter k . Print them in increasing order.",
    "note": "In the first test case: If k = 1 , we can make four elimination operations with sets of indices { 1} , { 2} , { 3} , { 4} . Since & of one element is equal to the element itself, then for each operation x = a_ i , so a_ i - x = a_ i - a_ i = 0 . If k = 2 , we can make two elimination operations with, for example, sets of indices { 1, 3} and { 2, 4} : x = a_ 1 & a_ 3 = a_ 2 & a_ 4 = 4 & 4 = 4 . For both operations x = 4 , so after the first operation a_ 1 - x = 0 and a_ 3 - x = 0 , and after the second operation \u2014 a_ 2 - x = 0 and a_ 4 - x = 0 . If k = 3 , it' s impossible to make all a_ i equal to 0 . After performing the first operation, we' ll get three elements equal to 0 and one equal to 4 . After that, all elimination operations won' t change anything, since at least one chosen element will always be equal to 0 . If k = 4 , we can make one operation with set { 1, 2, 3, 4} , because x = a_ 1 & a_ 2 & a_ 3 & a_ 4 = 4 . In the second test case, if k = 2 then we can make the following elimination operations: Operation with indices { 1, 3} : x = a_ 1 & a_ 3 = 13 & 25 = 9 . a_ 1 - x = 13 - 9 = 4 and a_ 3 - x = 25 - 9 = 16 . Array a will become equal to [ 4, 7, 16, 19] . Operation with indices { 3, 4} : x = a_ 3 & a_ 4 = 16 & 19 = 16 . a_ 3 - x = 16 - 16 = 0 and a_ 4 - x = 19 - 16 = 3 . Array a will become equal to [ 4, 7, 0, 3] . Operation with indices { 2, 4} : x = a_ 2 & a_ 4 = 7 & 3 = 3 . a_ 2 - x = 7 - 3 = 4 and a_ 4 - x = 3 - 3 = 0 . Array a will become equal to [ 4, 4, 0, 0] . Operation with indices { 1, 2} : x = a_ 1 & a_ 2 = 4 & 4 = 4 . a_ 1 - x = 4 - 4 = 0 and a_ 2 - x = 4 - 4 = 0 . Array a will become equal to [ 0, 0, 0, 0] . Formal definition of bitwise AND: Let' s define bitwise AND ( & ) as follows. Suppose we have two non- negative integers x and y , let' s look at their binary representations ( possibly, with leading zeroes) : x_ k . . . x_ 2 x_ 1 x_ 0 and y_ k . . . y_ 2 y_ 1 y_ 0 . Here, x_ i is the i - th bit of number x , and y_ i is the i - th bit of number y . Let r = x & y is a result of operation & on number x and y . Then binary representation of r will be r_ k . . . r_ 2 r_ 1 r_ 0 , where: r_ i = 1, if x_ i = 1 and y_ i = 1 0, if x_ i = 0 or y_ i = 0",
    "topics": [
      "bitmasks",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1601A"
  },
  {
    "title": "Array Game",
    "url": "https://codeforces.com/problemset/problem/1600/E",
    "history": "Alice and Bob are playing a game. They are given an array A of length N . The array consists of integers. They are building a sequence together. In the beginning, the sequence is empty. In one turn a player can remove a number from the left or right side of the array and append it to the sequence. The rule is that the sequence they are building must be strictly increasing. The winner is the player that makes the last move. Alice is playing first. Given the starting array, under the assumption that they both play optimally, who wins the game?",
    "input": "The first line contains one integer N ( 1 \u2264 N \u2264 2* 10^ 5 ) - the length of the array A . The second line contains N integers A_ 1 , A_ 2 , . . . , A_ N ( 0 \u2264 A_ i \u2264 10^ 9 )",
    "output": "The first and only line of output consists of one string, the name of the winner. If Alice won, print \" Alice\" , otherwise, print \" Bob\" .",
    "note": "",
    "topics": [
      "games",
      "greedy",
      "two pointers"
    ],
    "id": "1600E"
  },
  {
    "title": "Bob's Beautiful Array",
    "url": "https://codeforces.com/problemset/problem/1599/J",
    "history": "Bob really likes playing with arrays of numbers. That' s why for his birthday, his friends bought him a really interesting machine \u2013 an array beautifier. The array beautifier takes an array A consisting of N integers, and it outputs a new array B of length N that it constructed based on the array given to it. The array beautifier constructs the new array in the following way: it takes two numbers at different indices from the original array and writes their sum to the end of the new array. It does this step N times - resulting in an output array of length N . During this process, the machine can take the same index multiple times in different steps. Bob was very excited about the gift that his friends gave him, so he put his favorite array in the machine. However, when the machine finished, Bob was not happy with the resulting array. He misses his favorite array very much, and hopes to get it back. Given the array that the machine outputted, help Bob find an array that could be the original array that he put in the machine. Sometimes the machine makes mistakes, so it is possible that no appropriate input array exists for the array it has outputted. In such case, let Bob know that his array is forever lost.",
    "input": "The first line contains one positive integer N ( 2 \u2264 N \u2264 10^ 3 ) \u2013 the length of Bob' s array. The second line contains N integers B_ 1 , B_ 2 , . . . , B_ N ( 1 \u2264 B_ i \u2264 10^ 6 ) \u2013 the elements of the array the machine outputted.",
    "output": "If an appropriate input array exists, print \" YES\" , followed by the input array A_ 1 , A_ 2 , . . . , A_ N ( - 10^ 9 \u2264 A_ i \u2264 10^ 9 ) in the next line. Otherwise, print \" NO\" .",
    "note": "",
    "topics": [
      "bitmasks",
      "brute force",
      "greedy"
    ],
    "id": "1599J"
  },
  {
    "title": "Weights",
    "url": "https://codeforces.com/problemset/problem/1599/A",
    "history": "You are given an array A of length N weights of masses A_ 1 , A_ 2 . . . A_ N . No two weights have the same mass. You can put every weight on one side of the balance ( left or right) . You don' t have to put weights in order A_ 1 , . . . , A_ N . There is also a string S consisting of characters \" L\" and \" R\" , meaning that after putting the i- th weight ( not A_ i , but i- th weight of your choice) left or right side of the balance should be heavier. Find the order of putting the weights on the balance such that rules of string S are satisfied.",
    "input": "The first line contains one integer N ( 1 \u2264 N \u2264 2* 10^ 5 ) - the length of the array A The second line contains N distinct integers: A_ 1 , A_ 2 , . . . , A_ N ( 1 \u2264 A_ i \u2264 10^ 9 ) - the weights given The third line contains string S of length N consisting only of letters \" L\" and \" R\" - string determining which side of the balance should be heavier after putting the i- th weight of your choice",
    "output": "The output contains N lines. In every line, you should print one integer and one letter - integer representing the weight you are putting on the balance in that move and the letter representing the side of the balance where you are putting the weight. If there is no solution, print - 1 .",
    "note": "Explanation for the test case: after the 1st weight: 3 L ( left side is heavier) after the 2nd weight: 2 R ( left side is heavier) after the 3rd weight: 8 R ( right side is heavier) after the 4th weight: 13 L ( left side is heavier) after the 5th weight: 7 L ( left side is heavier) So, the rules given by string S are fulfilled and our order of putting the weights is correct.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "two pointers"
    ],
    "id": "1599A"
  },
  {
    "title": "Make Them Equal",
    "url": "https://codeforces.com/problemset/problem/1594/C",
    "history": "Theofanis has a string s_ 1 s_ 2 . . . s_ n and a character c . He wants to make all characters of the string equal to c using the minimum number of operations. In one operation he can choose a number x ( 1 \u2264 x \u2264 n ) and for every position i , where i is not divisible by x , replace s_ i with c . Find the minimum number of operations required to make all the characters equal to c and the x - s that he should use in his operations.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains the integer n ( 3 \u2264 n \u2264 3 \u00b7 10^ 5 ) and a lowercase Latin letter c \u2014 the length of the string s and the character the resulting string should consist of. The second line of each test case contains a string s of lowercase Latin letters \u2014 the initial string. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, firstly print one integer m \u2014 the minimum number of operations required to make all the characters equal to c . Next, print m integers x_ 1, x_ 2, . . . , x_ m ( 1 \u2264 x_ j \u2264 n ) \u2014 the x - s that should be used in the order they are given. It can be proved that under given constraints, an answer always exists. If there are multiple answers, print any.",
    "note": "Let' s describe what happens in the third test case: x_ 1 = 2 : we choose all positions that are not divisible by 2 and replace them, i. e. bzyx \u2192 bzbx; x_ 2 = 3 : we choose all positions that are not divisible by 3 and replace them, i. e. bzbx \u2192 bbbb.",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "strings"
    ],
    "id": "1594C"
  },
  {
    "title": "Changing Brackets",
    "url": "https://codeforces.com/problemset/problem/1593/G",
    "history": "A sequence of round and square brackets is given. You can change the sequence by performing the following operations: change the direction of a bracket from opening to closing and vice versa without changing the form of the bracket: i. e. you can change ' ( ' to ' ) ' and ' ) ' to ' ( ' ; you can change ' [ ' to ' ] ' and ' ] ' to ' [ ' . The operation costs 0 burles. change any square bracket to round bracket having the same direction: i. e. you can change ' [ ' to ' ( ' but not from ' ( ' to ' [ ' ; similarly, you can change ' ] ' to ' ) ' but not from ' ) ' to ' ] ' . The operation costs 1 burle. The operations can be performed in any order any number of times. You are given a string s of the length n and q queries of the type \" l r\" where 1 \u2264 l < r \u2264 n . For every substring s[ l . . . r] , find the minimum cost to pay to make it a correct bracket sequence. It is guaranteed that the substring s[ l . . . r] has an even length. The queries must be processed independently, i. e. the changes made in the string for the answer to a question i don' t affect the queries j ( j > i ) . In other words, for every query, the substring s[ l . . . r] is given from the initially given string s . A correct bracket sequence is a sequence that can be built according the following rules: an empty sequence is a correct bracket sequence; if \" s\" is a correct bracket sequence, the sequences \" ( s) \" and \" [ s] \" are correct bracket sequences. if \" s\" and \" t\" are correct bracket sequences, the sequence \" st\" ( the concatenation of the sequences) is a correct bracket sequence. E. g. the sequences \" \" , \" ( ( ) [ ] ) \" , \" [ ( ) ( ) ] ( ) \" and \" ( ( ) ) ( ) \" are correct bracket sequences whereas \" ( \" , \" [ ( ] ) \" and \" ) ) ) \" are not.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. For each test case, the first line contains a non- empty string s containing only round ( ' ( ' , ' ) ' ) and square ( ' [ ' , ' ] ' ) brackets. The length of the string doesn' t exceed 10^ 6 . The string contains at least 2 characters. The second line contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Then q lines follow, each of them contains two integers l and r ( 1 \u2264 l < r \u2264 n where n is the length of s ) . It is guaranteed that the substring s[ l . . . r] has even length. It is guaranteed that the sum of the lengths of all strings given in all test cases doesn' t exceed 10^ 6 . The sum of all q given in all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output in a separate line for each query one integer x ( x \u2265 0 ) \u2014 the minimum cost to pay to make the given substring a correct bracket sequence.",
    "note": "Consider the first test case. The first query describes the whole given string, the string can be turned into the following correct bracket sequence: \" ( [ ( ) ] ) ( ) [ [ ] ] \" . The forms of the brackets aren' t changed so the cost of changing is 0 . The second query describes the substring \" ) [ ) ( ) ] \" . It may be turned into \" ( ( ) ( ) ) \" , the cost is equal to 2 . The third query describes the substring \" ) ) [ ) \" . It may be turned into \" ( ) ( ) \" , the cost is equal to 1 . The substrings of the second test case contain only round brackets. It' s possible to prove that any sequence of round brackets having an even length may be turned into a correct bracket sequence for the cost of 0 burles. In the third test case, the single query describes the string \" [ ] \" that is already a correct bracket sequence.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1593G"
  },
  {
    "title": "Gardener and Tree",
    "url": "https://codeforces.com/problemset/problem/1593/E",
    "history": "A tree is an undirected connected graph in which there are no cycles. This problem is about non- rooted trees. A leaf of a tree is a vertex that is connected to at most one vertex. The gardener Vitaly grew a tree from n vertices. He decided to trim the tree. To do this, he performs a number of operations. In one operation, he removes all leaves of the tree. Example of a tree. For example, consider the tree shown in the figure above. The figure below shows the result of applying exactly one operation to the tree. The result of applying the operation \" remove all leaves\" to the tree. Note the special cases of the operation: applying an operation to an empty tree ( of 0 vertices) does not change it; applying an operation to a tree of one vertex removes this vertex ( this vertex is treated as a leaf) ; applying an operation to a tree of two vertices removes both vertices ( both vertices are treated as leaves) . Vitaly applied k operations sequentially to the tree. How many vertices remain?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case is preceded by an empty line. Each test case consists of several lines. The first line of the test case contains two integers n and k ( 1 \u2264 n \u2264 4 \u00b7 10^ 5 , 1 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree and the number of operations, respectively. Then n - 1 lines follow, each of them contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) which describe a pair of vertices connected by an edge. It is guaranteed that the given graph is a tree and has no loops or multiple edges. It is guaranteed that the sum of n from all test cases does not exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case output on a separate line a single integer \u2014 the number of vertices that remain in the tree after applying k operations.",
    "note": "The first test case is considered in the statement. The second test case contains a tree of two vertices. 200000 operations are applied to it. The first one removes all two vertices, the other operations do not change the tree. In the third test case, a tree of three vertices is given. As a result of the first operation, only 1 vertex remains in it ( with the index 2 ) , the second operation makes the tree empty.",
    "topics": [
      "brute force",
      "data structures",
      "dfs and similar",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1593E"
  },
  {
    "title": "Save More Mice",
    "url": "https://codeforces.com/problemset/problem/1593/C",
    "history": "There are one cat, k mice, and one hole on a coordinate line. The cat is located at the point 0 , the hole is located at the point n . All mice are located between the cat and the hole: the i - th mouse is located at the point x_ i ( 0 < x_ i < n ) . At each point, many mice can be located. In one second, the following happens. First, exactly one mouse moves to the right by 1 . If the mouse reaches the hole, it hides ( i. e. the mouse will not any more move to any point and will not be eaten by the cat) . Then ( after that the mouse has finished its move) the cat moves to the right by 1 . If at the new cat' s position, some mice are located, the cat eats them ( they will not be able to move after that) . The actions are performed until any mouse hasn' t been hidden or isn' t eaten. In other words, the first move is made by a mouse. If the mouse has reached the hole, it' s saved. Then the cat makes a move. The cat eats the mice located at the pointed the cat has reached ( if the cat has reached the hole, it eats nobody) . Each second, you can select a mouse that will make a move. What is the maximum number of mice that can reach the hole without being eaten?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of two lines. The first line contains two integers n and k ( 2 \u2264 n \u2264 10^ 9 , 1 \u2264 k \u2264 4 \u00b7 10^ 5 ) . The second line contains k integers x_ 1, x_ 2, . . . x_ k ( 1 \u2264 x_ i < n ) \u2014 the initial coordinates of the mice. It is guaranteed that the sum of all k given in the input doesn' t exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case output on a separate line an integer m ( m \u2265 0 ) \u2014 the maximum number of mice that can reach the hole without being eaten.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "greedy"
    ],
    "id": "1593C"
  },
  {
    "title": "Make it Divisible by 25",
    "url": "https://codeforces.com/problemset/problem/1593/B",
    "history": "It is given a positive integer n . In 1 move, one can select any single digit and remove it ( i. e. one selects some position in the number and removes the digit located at this position) . The operation cannot be performed if only one digit remains. If the resulting number contains leading zeroes, they are automatically removed. E. g. if one removes from the number 32925 the 3 - rd digit, the resulting number will be 3225 . If one removes from the number 20099050 the first digit, the resulting number will be 99050 ( the 2 zeroes going next to the first digit are automatically removed) . What is the minimum number of steps to get a number such that it is divisible by 25 and positive? It is guaranteed that, for each n occurring in the input, the answer exists. It is guaranteed that the number n has no leading zeros.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of one line containing one integer n ( 25 \u2264 n \u2264 10^ 18 ) . It is guaranteed that, for each n occurring in the input, the answer exists. It is guaranteed that the number n has no leading zeros.",
    "output": "For each test case output on a separate line an integer k ( k \u2265 0 ) \u2014 the minimum number of steps to get a number such that it is divisible by 25 and positive.",
    "note": "In the first test case, it is already given a number divisible by 25 . In the second test case, we can remove the digits 1 , 3 , and 4 to get the number 75 . In the third test case, it' s enough to remove the last digit to get the number 325 . In the fourth test case, we can remove the three last digits to get the number 50 . In the fifth test case, it' s enough to remove the digits 4 and 7 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "math",
      "math"
    ],
    "id": "1593B"
  },
  {
    "title": "Alice and Recoloring 2",
    "url": "https://codeforces.com/problemset/problem/1592/F2",
    "history": "The difference between the versions is in the costs of operations. Solution for one version won' t work for another! Alice has a grid of size n \u00d7 m , initially all its cells are colored white. The cell on the intersection of i - th row and j - th column is denoted as ( i, j) . Alice can do the following operations with this grid: Choose any subrectangle containing cell ( 1, 1) , and flip the colors of all its cells. ( Flipping means changing its color from white to black or from black to white) . This operation costs 1 coin. Choose any subrectangle containing cell ( n, 1) , and flip the colors of all its cells. This operation costs 3 coins. Choose any subrectangle containing cell ( 1, m) , and flip the colors of all its cells. This operation costs 4 coins. Choose any subrectangle containing cell ( n, m) , and flip the colors of all its cells. This operation costs 2 coins. As a reminder, subrectangle is a set of all cells ( x, y) with x_ 1 \u2264 x \u2264 x_ 2 , y_ 1 \u2264 y \u2264 y_ 2 for some 1 \u2264 x_ 1 \u2264 x_ 2 \u2264 n , 1 \u2264 y_ 1 \u2264 y_ 2 \u2264 m . Alice wants to obtain her favorite coloring with these operations. What' s the smallest number of coins that she would have to spend? It can be shown that it' s always possible to transform the initial grid into any other.",
    "input": "The first line of the input contains 2 integers n, m ( 1 \u2264 n, m \u2264 500 ) \u2014 the dimensions of the grid. The i - th of the next n lines contains a string s_ i of length m , consisting of letters W and B. The j - th character of string s_ i is W if the cell ( i, j) is colored white in the favorite coloring of Alice, and B if it' s colored black.",
    "output": "Output the smallest number of coins Alice would have to spend to achieve her favorite coloring.",
    "note": "In the first sample, it' s optimal to just apply the fourth operation once to the rectangle containing cells ( 2, 2) , ( 2, 3) , ( 3, 2) , ( 3, 3) . This would cost 2 coins.",
    "topics": [
      "constructive algorithms",
      "flows",
      "graph matchings",
      "greedy"
    ],
    "id": "1592F2"
  },
  {
    "title": "Alice and Recoloring 1",
    "url": "https://codeforces.com/problemset/problem/1592/F1",
    "history": "The difference between the versions is in the costs of operations. Solution for one version won' t work for another! Alice has a grid of size n \u00d7 m , initially all its cells are colored white. The cell on the intersection of i - th row and j - th column is denoted as ( i, j) . Alice can do the following operations with this grid: Choose any subrectangle containing cell ( 1, 1) , and flip the colors of all its cells. ( Flipping means changing its color from white to black or from black to white) . This operation costs 1 coin. Choose any subrectangle containing cell ( n, 1) , and flip the colors of all its cells. This operation costs 2 coins. Choose any subrectangle containing cell ( 1, m) , and flip the colors of all its cells. This operation costs 4 coins. Choose any subrectangle containing cell ( n, m) , and flip the colors of all its cells. This operation costs 3 coins. As a reminder, subrectangle is a set of all cells ( x, y) with x_ 1 \u2264 x \u2264 x_ 2 , y_ 1 \u2264 y \u2264 y_ 2 for some 1 \u2264 x_ 1 \u2264 x_ 2 \u2264 n , 1 \u2264 y_ 1 \u2264 y_ 2 \u2264 m . Alice wants to obtain her favorite coloring with these operations. What' s the smallest number of coins that she would have to spend? It can be shown that it' s always possible to transform the initial grid into any other.",
    "input": "The first line of the input contains 2 integers n, m ( 1 \u2264 n, m \u2264 500 ) \u2014 the dimensions of the grid. The i - th of the next n lines contains a string s_ i of length m , consisting of letters W and B. The j - th character of string s_ i is W if the cell ( i, j) is colored white in the favorite coloring of Alice, and B if it' s colored black.",
    "output": "Output the smallest number of coins Alice would have to spend to achieve her favorite coloring.",
    "note": "In the first sample, it' s optimal to just apply the fourth operation once to the rectangle containing cells ( 2, 2) , ( 2, 3) , ( 3, 2) , ( 3, 3) . This would cost 3 coins.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1592F1"
  },
  {
    "title": "Bored Bakry",
    "url": "https://codeforces.com/problemset/problem/1592/E",
    "history": "Bakry got bored of solving problems related to xor, so he asked you to solve this problem for him. You are given an array a of n integers [ a_ 1, a_ 2, . . . , a_ n] . Let' s call a subarray a_ l, a_ l+ 1, a_ l+ 2, . . . , a_ r good if a_ l & a_ l+ 1 & a_ l+ 2 . . . & a_ r > a_ l \u2295 a_ l+ 1\u2295 a_ l+ 2. . . \u2295 a_ r , where \u2295 denotes the bitwise XOR operation and & denotes the bitwise AND operation. Find the length of the longest good subarray of a , or determine that no such subarray exists.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 elements of the array.",
    "output": "Print a single integer \u2014 the length of the longest good subarray. If there are no good subarrays, print 0 .",
    "note": "In the first case, the answer is 2 , as the whole array is good: 5 & 6 = 4 > 5 \u2295 6 = 3 . In the third case, the answer is 4 , and one of the longest good subarrays is [ a_ 2, a_ 3, a_ 4, a_ 5] : 1& 3 & 3 & 1 = 1 > 1\u2295 3 \u2295 3\u2295 1 = 0 .",
    "topics": [
      "bitmasks",
      "greedy",
      "math",
      "two pointers"
    ],
    "id": "1592E"
  },
  {
    "title": "Gamer Hemose",
    "url": "https://codeforces.com/problemset/problem/1592/A",
    "history": "One day, Ahmed_ Hossam went to Hemose and said \" Let' s solve a gym contest! \" . Hemose didn' t want to do that, as he was playing Valorant, so he came up with a problem and told it to Ahmed to distract him. Sadly, Ahmed can' t solve it. . . Could you help him? There is an Agent in Valorant, and he has n weapons. The i - th weapon has a damage value a_ i , and the Agent will face an enemy whose health value is H . The Agent will perform one or more moves until the enemy dies. In one move, he will choose a weapon and decrease the enemy' s health by its damage value. The enemy will die when his health will become less than or equal to 0 . However, not everything is so easy: the Agent can' t choose the same weapon for 2 times in a row. What is the minimum number of times that the Agent will need to use the weapons to kill the enemy?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5) . Description of the test cases follows. The first line of each test case contains two integers n and H ( 2 \u2264 n \u2264 10^ 3, 1 \u2264 H \u2264 10^ 9) \u2014 the number of available weapons and the initial health value of the enemy. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the damage values of the weapons. It' s guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of times that the Agent will have to use the weapons to kill the enemy.",
    "note": "In the first test case, the Agent can use the second weapon, making health value of the enemy equal to 4- 7= - 3 . - 3 \u2264 0 , so the enemy is dead, and using weapon 1 time was enough. In the second test case, the Agent can use the first weapon first, and then the second one. After this, the health of enemy will drop to 6- 4- 2 = 0 , meaning he would be killed after using weapons 2 times. In the third test case, the Agent can use the weapons in order ( third, first, third) , decreasing the health value of enemy to 11 - 7 - 2 - 7 = - 5 after using the weapons 3 times. Note that we can' t kill the enemy by using the third weapon twice, as even though 11- 7- 7< 0 , it' s not allowed to use the same weapon twice in a row.",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1592A"
  },
  {
    "title": "Minimize Distance",
    "url": "https://codeforces.com/problemset/problem/1585/C",
    "history": "A total of n depots are located on a number line. Depot i lies at the point x_ i for 1 \u2264 i \u2264 n . You are a salesman with n bags of goods, attempting to deliver one bag to each of the n depots. You and the n bags are initially at the origin 0 . You can carry up to k bags at a time. You must collect the required number of goods from the origin, deliver them to the respective depots, and then return to the origin to collect your next batch of goods. Calculate the minimum distance you need to cover to deliver all the bags of goods to the depots. You do not have to return to the origin after you have delivered all the bags.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 500 ) . Description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers x_ 1, x_ 2, . . . , x_ n ( - 10^ 9 \u2264 x_ i \u2264 10^ 9 ) . It is possible that some depots share the same position. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer denoting the minimum distance you need to cover to deliver all the bags of goods to the depots.",
    "note": "In the first test case, you can carry only one bag at a time. Thus, the following is a solution sequence that gives a minimum travel distance: 0 \u2192 2 \u2192 0 \u2192 4 \u2192 0 \u2192 3 \u2192 0 \u2192 1 \u2192 0 \u2192 5 , where each 0 means you go the origin and grab one bag, and each positive integer means you deliver the bag to a depot at this coordinate, giving a total distance of 25 units. It must be noted that there are other sequences that give the same distance. In the second test case, you can follow the following sequence, among multiple such sequences, to travel minimum distance: 0 \u2192 6 \u2192 8 \u2192 7 \u2192 0 \u2192 5 \u2192 4 \u2192 3 \u2192 0 \u2192 ( - 5) \u2192 ( - 10) \u2192 ( - 15) , with distance 41 . It can be shown that 41 is the optimal distance for this test case.",
    "topics": [
      "greedy"
    ],
    "id": "1585C"
  },
  {
    "title": "Array Eversion",
    "url": "https://codeforces.com/problemset/problem/1585/B",
    "history": "You are given an array a of length n . Let' s define the eversion operation. Let x = a_ n . Then array a is partitioned into two parts: left and right. The left part contains the elements of a that are not greater than x ( \u2264 x ) . The right part contains the elements of a that are strictly greater than x ( > x ) . The order of elements in each part is kept the same as before the operation, i. e. the partition is stable. Then the array is replaced with the concatenation of the left and the right parts. For example, if the array a is [ 2, 4, 1, 5, 3] , the eversion goes like this: [ 2, 4, 1, 5, 3] \u2192 [ 2, 1, 3] , [ 4, 5] \u2192 [ 2, 1, 3, 4, 5] . We start with the array a and perform eversions on this array. We can prove that after several eversions the array a stops changing. Output the minimum number k such that the array stops changing after k eversions.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer k \u2014 the number of eversions after which the array stops changing.",
    "note": "Consider the fist example. The first eversion: a = [ 1, 4, 2, 5, 3] , x = 3 . [ 2, 4, 1, 5, 3] \u2192 [ 2, 1, 3] , [ 4, 5] \u2192 [ 2, 1, 3, 4, 5] . The second and following eversions: a = [ 2, 1, 3, 4, 5] , x = 5 . [ 2, 1, 3, 4, 5] \u2192 [ 2, 1, 3, 4, 5] , [ ] \u2192 [ 2, 1, 3, 4, 5] . This eversion does not change the array, so the answer is 1 . Consider the second example. The first eversion: a = [ 5, 3, 2, 4, 1] , x = 1 . [ 5, 3, 2, 4, 1] \u2192 [ 1] , [ 5, 3, 2, 4] \u2192 [ 1, 5, 3, 2, 4] . The second eversion: a = [ 1, 5, 3, 2, 4] , x = 4 . [ 1, 5, 3, 2, 4] \u2192 [ 1, 3, 2, 4] , [ 5] \u2192 [ 1, 3, 2, 4, 5] . The third and following eversions: a = [ 1, 3, 2, 4, 5] , x = 5 . [ 1, 3, 2, 4, 5] \u2192 [ 1, 3, 2, 4, 5] , [ ] \u2192 [ 1, 3, 2, 4, 5] . This eversion does not change the array, so the answer is 2 .",
    "topics": [
      "greedy"
    ],
    "id": "1585B"
  },
  {
    "title": "Strange LCS",
    "url": "https://codeforces.com/problemset/problem/1584/F",
    "history": "You are given n strings s_ 1, s_ 2, . . . , s_ n , each consisting of lowercase and uppercase English letters. In addition, it' s guaranteed that each character occurs in each string at most twice. Find the longest common subsequence of these strings. A string t is a subsequence of a string s if t can be obtained from s by deletion of several ( possibly, zero or all) symbols.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10 ) \u2014 the number of strings. Each of the next n lines contains the corresponding string s_ i . Each s_ i is non- empty, consists only of uppercase and lowercase English letters, and no character appears more than twice in each string.",
    "output": "For each test case print the answer in two lines: In the first line print the length of the longest common subsequence. In the second line print the longest common subsequence. If there are multiple such subsequences, print any of them.",
    "note": "In the first test case, the longest common subsequence is \" A\" . There are no common subsequences of length 2 . In the second test case, sets of characters of strings don' t intersect, so any non- empty string can' t be a common subsequence.",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "greedy",
      "strings"
    ],
    "id": "1584F"
  },
  {
    "title": "Game with Stones",
    "url": "https://codeforces.com/problemset/problem/1584/E",
    "history": "Bob decided to take a break from calculus homework and designed a game for himself. The game is played on a sequence of piles of stones, which can be described with a sequence of integers s_ 1, . . . , s_ k , where s_ i is the number of stones in the i - th pile. On each turn, Bob picks a pair of non- empty adjacent piles i and i+ 1 and takes one stone from each. If a pile becomes empty, its adjacent piles do not become adjacent. The game ends when Bob can' t make turns anymore. Bob considers himself a winner if at the end all piles are empty. We consider a sequence of piles winning if Bob can start with it and win with some sequence of moves. You are given a sequence a_ 1, . . . , a_ n , count the number of subsegments of a that describe a winning sequence of piles. In other words find the number of segments [ l, r] ( 1 \u2264 l \u2264 r \u2264 n ) , such that the sequence a_ l, a_ l+ 1, . . . , a_ r is winning.",
    "input": "Each test consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "Print a single integer for each test case \u2014 the answer to the problem.",
    "note": "In the first test case, Bob can' t win on subsegments of length 1 , as there is no pair of adjacent piles in an array of length 1 . In the second test case, every subsegment is not winning. In the fourth test case, the subsegment [ 1, 4] is winning, because Bob can make moves with pairs of adjacent piles: ( 2, 3) , ( 1, 2) , ( 3, 4) . Another winning subsegment is [ 2, 3] .",
    "topics": [
      "binary search",
      "data structures",
      "games",
      "greedy"
    ],
    "id": "1584E"
  },
  {
    "title": "Two Arrays",
    "url": "https://codeforces.com/problemset/problem/1584/C",
    "history": "You are given two arrays of integers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ n . Let' s define a transformation of the array a : Choose any non- negative integer k such that 0 \u2264 k \u2264 n . Choose k distinct array indices 1 \u2264 i_ 1 < i_ 2 < . . . < i_ k \u2264 n . Add 1 to each of a_ i_ 1, a_ i_ 2, . . . , a_ i_ k , all other elements of array a remain unchanged. Permute the elements of array a in any order. Is it possible to perform some transformation of the array a exactly once, so that the resulting array is equal to b ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Descriptions of test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the size of arrays a and b . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 100 \u2264 a_ i \u2264 100 ) . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( - 100 \u2264 b_ i \u2264 100 ) .",
    "output": "For each test case, print \" YES\" ( without quotes) if it is possible to perform a transformation of the array a , so that the resulting array is equal to b . Print \" NO\" ( without quotes) otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, we can make the following transformation: Choose k = 2 . Choose i_ 1 = 1 , i_ 2 = 2 . Add 1 to a_ 1 and a_ 2 . The resulting array is [ 0, 2, 0] . Swap the elements on the second and third positions. In the second test case there is no suitable transformation. In the third test case we choose k = 0 and do not change the order of elements.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1584C"
  },
  {
    "title": "Coloring Rectangles",
    "url": "https://codeforces.com/problemset/problem/1584/B",
    "history": "David was given a red checkered rectangle of size n \u00d7 m . But he doesn' t like it. So David cuts the original or any other rectangle piece obtained during the cutting into two new pieces along the grid lines. He can do this operation as many times as he wants. As a result, he will get a set of rectangles. Rectangles 1 \u00d7 1 are forbidden. David also knows how to paint the cells blue. He wants each rectangle from the resulting set of pieces to be colored such that any pair of adjacent cells by side ( from the same piece) have different colors. What is the minimum number of cells David will have to paint?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The next lines contain descriptions of test cases. The only line of each test case contains two integers n , m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 4 , n \u00b7 m \u2265 2 ) .",
    "output": "For each test case print a single integer \u2014 the minimum number of cells David will have to paint blue.",
    "note": "The following pictures show how the initial rectangle can be split and cells colored blue. In the first test case: In the second test case: In the third test case: In the fourth test case:",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1584B"
  },
  {
    "title": "Moment of Bloom",
    "url": "https://codeforces.com/problemset/problem/1583/E",
    "history": "She does her utmost to flawlessly carry out a person' s last rites and preserve the world' s balance of yin and yang. Hu Tao, being the little prankster she is, has tried to scare you with this graph problem! You are given a connected undirected graph of n nodes with m edges. You also have q queries. Each query consists of two nodes a and b . Initially, all edges in the graph have a weight of 0 . For each query, you must choose a simple path starting from a and ending at b . Then you add 1 to every edge along this path. Determine if it' s possible, after processing all q queries, for all edges in this graph to have an even weight. If so, output the choice of paths for each query. If it is not possible, determine the smallest number of extra queries you could add to make it possible. It can be shown that this number will not exceed 10^ 18 under the given constraints. A simple path is defined as any path that does not visit a node more than once. An edge is said to have an even weight if its value is divisible by 2 .",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , n- 1 \u2264 m \u2264min( n( n- 1) / 2, 3 \u00b7 10^ 5) ) . Each of the next m lines contains two integers x and y ( 1 \u2264 x, y \u2264 n , x= \u0338 y ) indicating an undirected edge between node x and y . The input will not contain self- loops or duplicate edges, and the provided graph will be connected. The next line contains a single integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) . Each of the next q lines contains two integers a and b ( 1 \u2264 a, b \u2264 n, a = \u0338 b ) , the description of each query. It is guaranteed that nq \u2264 3 \u00b7 10^ 5 .",
    "output": "If it is possible to force all edge weights to be even, print \" YES\" on the first line, followed by 2q lines indicating the choice of path for each query in the same order the queries are given. For each query, the first line should contain a single integer x : the number of nodes in the chosen path. The next line should then contain x spaced separated integers p_ i indicating the path you take ( p_ 1 = a, p_ x = b and all numbers should fall between 1 and n ) . This path cannot contain duplicate nodes and must be a valid simple path in the graph. If it is impossible to force all edge weights to be even, print \" NO\" on the first line and the minimum number of added queries on the second line.",
    "note": "Here is what the queries look like for the first test case ( red corresponds to the 1st query, blue 2nd query, and green 3rd query) : Notice that every edge in the graph is part of either 0 or 2 colored query edges. The graph in the second test case looks like this: There does not exist an assignment of paths that will force all edges to have even weights with the given queries. One must add at least 2 new queries to obtain a set of queries that can satisfy the condition.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graph matchings",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1583E"
  },
  {
    "title": "Omkar and the Meaning of Life",
    "url": "https://codeforces.com/problemset/problem/1583/D",
    "history": "It turns out that the meaning of life is a permutation p_ 1, p_ 2, . . . , p_ n of the integers 1, 2, . . . , n ( 2 \u2264 n \u2264 100 ) . Omkar, having created all life, knows this permutation, and will allow you to figure it out using some queries. A query consists of an array a_ 1, a_ 2, . . . , a_ n of integers between 1 and n . a is not required to be a permutation. Omkar will first compute the pairwise sum of a and p , meaning that he will compute an array s where s_ j = p_ j + a_ j for all j = 1, 2, . . . , n . Then, he will find the smallest index k such that s_ k occurs more than once in s , and answer with k . If there is no such index k , then he will answer with 0 . You can perform at most 2n queries. Figure out the meaning of life p . InteractionStart the interaction by reading single integer n ( 2 \u2264 n \u2264 100 ) \u2014 the length of the permutation p . You can then make queries. A query consists of a single line \" ? a_ 1 a_ 2 . . . a_ n \" ( 1 \u2264 a_ j \u2264 n ) . The answer to each query will be a single integer k as described above ( 0 \u2264 k \u2264 n ) . After making a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. To output your answer, print a single line \" ! p_ 1 p_ 2 . . . p_ n \" then terminate. You can make at most 2n queries. Outputting the answer does not count as a query. Hack FormatTo hack, first output a line containing n ( 2 \u2264 n \u2264 100 ) , then output another line containing the hidden permutation p_ 1, p_ 2, . . . , p_ n of numbers from 1 to n .",
    "input": "",
    "output": "",
    "note": "In the sample, the hidden permutation p is [ 3, 2, 1, 5, 4] . Three queries were made. The first query is a = [ 4, 4, 2, 3, 2] . This yields s = [ 3 + 4, 2 + 4, 1 + 2, 5 + 3, 4 + 2] = [ 7, 6, 3, 8, 6] . 6 is the only number that appears more than once, and it appears first at index 2 , making the answer to the query 2 . The second query is a = [ 3, 5, 1, 5, 5] . This yields s = [ 3 + 3, 2 + 5, 1 + 1, 5 + 5, 4 + 5] = [ 6, 7, 2, 10, 9] . There are no numbers that appear more than once here, so the answer to the query is 0 . The third query is a = [ 5, 2, 4, 3, 1] . This yields s = [ 3 + 5, 2 + 2, 1 + 4, 5 + 3, 4 + 1] = [ 8, 4, 5, 8, 5] . 5 and 8 both occur more than once here. 5 first appears at index 3 , while 8 first appears at index 1 , and 1 < 3 , making the answer to the query 1 . Note that the sample is only meant to provide an example of how the interaction works; it is not guaranteed that the above queries represent a correct strategy with which to determine the answer.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "interactive"
    ],
    "id": "1583D"
  },
  {
    "title": "Korney Korneevich and XOR (hard version)",
    "url": "https://codeforces.com/problemset/problem/1582/F2",
    "history": "This is a harder version of the problem with bigger constraints. Korney Korneevich dag up an array a of length n . Korney Korneevich has recently read about the operation bitwise XOR, so he wished to experiment with it. For this purpose, he decided to find all integers x \u2265 0 such that there exists an increasing subsequence of the array a , in which the bitwise XOR of numbers is equal to x . It didn' t take a long time for Korney Korneevich to find all such x , and he wants to check his result. That' s why he asked you to solve this problem! A sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several ( possibly, zero or all) elements. A sequence s_ 1, s_ 2, . . . , s_ m is called increasing if s_ 1 < s_ 2 < . . . < s_ m .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 5000 ) \u2014 the elements of the array a .",
    "output": "In the first line print a single integer k \u2014 the number of found x values. In the second line print k integers in increasing order x_ 1, x_ 2, . . . x_ k ( 0 \u2264 x_ 1 < . . . < x_ k ) \u2014 found x values.",
    "note": "In the first test case: To get value x = 0 it is possible to choose and empty subsequence To get value x = 2 it is possible to choose a subsequence [ 2] To get value x = 4 it is possible to choose a subsequence [ 4] To get value x = 6 it is possible to choose a subsequence [ 2, 4]",
    "topics": [
      "binary search",
      "brute force",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1582F2"
  },
  {
    "title": "Korney Korneevich and XOR (easy version)",
    "url": "https://codeforces.com/problemset/problem/1582/F1",
    "history": "This is an easier version of the problem with smaller constraints. Korney Korneevich dag up an array a of length n . Korney Korneevich has recently read about the operation bitwise XOR, so he wished to experiment with it. For this purpose, he decided to find all integers x \u2265 0 such that there exists an increasing subsequence of the array a , in which the bitwise XOR of numbers is equal to x . It didn' t take a long time for Korney Korneevich to find all such x , and he wants to check his result. That' s why he asked you to solve this problem! A sequence s is a subsequence of a sequence b if s can be obtained from b by deletion of several ( possibly, zero or all) elements. A sequence s_ 1, s_ 2, . . . , s_ m is called increasing if s_ 1 < s_ 2 < . . . < s_ m .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 500 ) \u2014 the elements of the array a .",
    "output": "In the first line print a single integer k \u2014 the number of found x values. In the second line print k integers in increasing order x_ 1, x_ 2, . . . x_ k ( 0 \u2264 x_ 1 < . . . < x_ k ) \u2014 found x values.",
    "note": "In the first test case: To get value x = 0 it is possible to choose and empty subsequence To get value x = 2 it is possible to choose a subsequence [ 2] To get value x = 4 it is possible to choose a subsequence [ 4] To get value x = 6 it is possible to choose a subsequence [ 2, 4]",
    "topics": [
      "bitmasks",
      "dp",
      "greedy"
    ],
    "id": "1582F1"
  },
  {
    "title": "Pchelyonok and Segments",
    "url": "https://codeforces.com/problemset/problem/1582/E",
    "history": "Pchelyonok decided to give Mila a gift. Pchelenok has already bought an array a of length n , but gifting an array is too common. Instead of that, he decided to gift Mila the segments of that array! Pchelyonok wants his gift to be beautiful, so he decided to choose k non- overlapping segments of the array [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . [ l_ k, r_ k] such that: the length of the first segment [ l_ 1, r_ 1] is k , the length of the second segment [ l_ 2, r_ 2] is k- 1 , . . . , the length of the k - th segment [ l_ k, r_ k] is 1 for each i< j , the i - th segment occurs in the array earlier than the j - th ( i. e. r_ i< l_ j ) the sums in these segments are strictly increasing ( i. e. let sum( l . . . r) = \u2211_ i= l^ r a_ i \u2014 the sum of numbers in the segment [ l, r] of the array, then sum( l_ 1 . . . r_ 1) < sum( l_ 2 . . . r_ 2) < . . . < sum( l_ k . . . r_ k) ) . Pchelenok also wants his gift to be as beautiful as possible, so he asks you to find the maximal value of k such that he can give Mila a gift!",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The next 2 \u00b7 t lines contain the descriptions of test cases. The description of each test case consists of two lines. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print the maximum possible value of k .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1582E"
  },
  {
    "title": "Grandma Capa Knits a Scarf",
    "url": "https://codeforces.com/problemset/problem/1582/C",
    "history": "Grandma Capa has decided to knit a scarf and asked Grandpa Sher to make a pattern for it, a pattern is a string consisting of lowercase English letters. Grandpa Sher wrote a string s of length n . Grandma Capa wants to knit a beautiful scarf, and in her opinion, a beautiful scarf can only be knit from a string that is a palindrome. She wants to change the pattern written by Grandpa Sher, but to avoid offending him, she will choose one lowercase English letter and erase some ( at her choice, possibly none or all) occurrences of that letter in string s . She also wants to minimize the number of erased symbols from the pattern. Please help her and find the minimum number of symbols she can erase to make string s a palindrome, or tell her that it' s impossible. Notice that she can only erase symbols equal to the one letter she chose. A string is a palindrome if it is the same from the left to the right and from the right to the left. For example, the strings ' kek' , ' abacaba' , ' r' and ' papicipap' are palindromes, while the strings ' abb' and ' iq' are not.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The next 2 \u00b7 t lines contain the description of test cases. The description of each test case consists of two lines. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the string. The second line of each test case contains the string s consisting of n lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print the minimum number of erased symbols required to make the string a palindrome, if it is possible, and - 1 , if it is impossible.",
    "note": "In the first test case, you can choose a letter ' a' and erase its first and last occurrences, you will get a string ' bcaacb' , which is a palindrome. You can also choose a letter ' b' and erase all its occurrences, you will get a string ' acaaca' , which is a palindrome as well. In the second test case, it can be shown that it is impossible to choose a letter and erase some of its occurrences to get a palindrome. In the third test case, you don' t have to erase any symbols because the string is already a palindrome.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "strings",
      "two pointers"
    ],
    "id": "1582C"
  },
  {
    "title": "Diameter of Graph",
    "url": "https://codeforces.com/problemset/problem/1581/B",
    "history": "CQXYM wants to create a connected undirected graph with n nodes and m edges, and the diameter of the graph must be strictly less than k- 1 . Also, CQXYM doesn' t want a graph that contains self- loops or multiple edges ( i. e. each edge connects two different vertices and between each pair of vertices there is at most one edge) . The diameter of a graph is the maximum distance between any two nodes. The distance between two nodes is the minimum number of the edges on the path which endpoints are the two nodes. CQXYM wonders whether it is possible to create such a graph.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. The description of the test cases follows. Only one line of each test case contains three integers n( 1 \u2264 n \u2264 10^ 9) , m , k ( 0 \u2264 m, k \u2264 10^ 9) .",
    "output": "For each test case, print YES if it is possible to create the graph, or print NO if it is impossible. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, the graph' s diameter equal to 0. In the second test case, the graph' s diameter can only be 2. In the third test case, the graph' s diameter can only be 1.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1581B"
  },
  {
    "title": "Subsequence",
    "url": "https://codeforces.com/problemset/problem/1580/D",
    "history": "Alice has an integer sequence a of length n and all elements are different. She will choose a subsequence of a of length m , and defines the value of a subsequence a_ b_ 1, a_ b_ 2, . . . , a_ b_ m as \u2211_ i = 1^ m ( m \u00b7 a_ b_ i) - \u2211_ i = 1^ m \u2211_ j = 1^ m f( min( b_ i, b_ j) , max( b_ i, b_ j) ) , where f( i, j) denotes min( a_ i, a_ i + 1, . . . , a_ j) . Alice wants you to help her to maximize the value of the subsequence she choose. A sequence s is a subsequence of a sequence t if s can be obtained from t by deletion of several ( possibly, zero or all) elements.",
    "input": "The first line contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 4000 ) . The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i < 2^ 31 ) .",
    "output": "Print the maximal value Alice can get.",
    "note": "In the first example, Alice can choose the subsequence [ 15, 2, 18, 13] , which has the value 4 \u00b7 ( 15 + 2 + 18 + 13) - ( 15 + 2 + 2 + 2) - ( 2 + 2 + 2 + 2) - ( 2 + 2 + 18 + 12) - ( 2 + 2 + 12 + 13) = 100 . In the second example, there are a variety of subsequences with value 176 , and one of them is [ 9, 7, 12, 20, 18] .",
    "topics": [
      "brute force",
      "divide and conquer",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1580D"
  },
  {
    "title": "Portal",
    "url": "https://codeforces.com/problemset/problem/1580/A",
    "history": "CQXYM found a rectangle A of size n \u00d7 m . There are n rows and m columns of blocks. Each block of the rectangle is an obsidian block or empty. CQXYM can change an obsidian block to an empty block or an empty block to an obsidian block in one operation. A rectangle M size of a \u00d7 b is called a portal if and only if it satisfies the following conditions: a \u2265 5, b \u2265 4 . For all 1 < x < a , blocks M_ x, 1 and M_ x, b are obsidian blocks. For all 1 < x < b , blocks M_ 1, x and M_ a, x are obsidian blocks. For all 1< x< a, 1< y< b , block M_ x, y is an empty block. M_ 1, 1, M_ 1, b, M_ a, 1, M_ a, b can be any type. Note that the there must be a rows and b columns, not b rows and a columns. Note that corners can be any typeCQXYM wants to know the minimum number of operations he needs to make at least one sub- rectangle a portal.",
    "input": "The first line contains an integer t ( t \u2265 1 ) , which is the number of test cases. For each test case, the first line contains two integers n and m ( 5 \u2264 n \u2264 400 , 4 \u2264 m \u2264 400 ) . Then n lines follow, each line contains m characters 0 or 1 . If the j - th character of i - th line is 0 , block A_ i, j is an empty block. Otherwise, block A_ i, j is an obsidian block. It is guaranteed that the sum of n over all test cases does not exceed 400 . It is guaranteed that the sum of m over all test cases does not exceed 400 .",
    "output": "Output t answers, and each answer in a line.",
    "note": "In the first test case, the final portal is like this: 11101001100110010111",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1580A"
  },
  {
    "title": "Array Optimization by Deque",
    "url": "https://codeforces.com/problemset/problem/1579/E2",
    "history": "In fact, the problems E1 and E2 do not have much in common. You should probably think of them as two separate problems. You are given an integer array a[ 1 . . . n] = [ a_ 1, a_ 2, . . . , a_ n] . Let us consider an empty deque ( double- ended queue) . A deque is a data structure that supports adding elements to both the beginning and the end. So, if there are elements [ 3, 4, 4] currently in the deque, adding an element 1 to the beginning will produce the sequence [ 1, 3, 4, 4] , and adding the same element to the end will produce [ 3, 4, 4, 1] . The elements of the array are sequentially added to the initially empty deque, starting with a_ 1 and finishing with a_ n . Before adding each element to the deque, you may choose whether to add it to the beginning or to the end. For example, if we consider an array a = [ 3, 7, 5, 5] , one of the possible sequences of actions looks like this: 1. add 3 to the beginning of the deque: deque has a sequence [ 3] in it; 2. add 7 to the end of the deque: deque has a sequence [ 3, 7] in it; 3. add 5 to the end of the deque: deque has a sequence [ 3, 7, 5] in it; 4. add 5 to the beginning of the deque: deque has a sequence [ 5, 3, 7, 5] in it; Find the minimal possible number of inversions in the deque after the whole array is processed. An inversion in sequence d is a pair of indices ( i, j) such that i < j and d_ i > d_ j . For example, the array d = [ 5, 3, 7, 5] has exactly two inversions \u2014 ( 1, 2) and ( 3, 4) , since d_ 1 = 5 > 3 = d_ 2 and d_ 3 = 7 > 5 = d_ 4 .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of each test case description contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 array size. The second line of the description contains n space- separated integers a_ i ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each line containing the answer to the corresponding test case. The answer to a test case should be a single integer \u2014 the minimal possible number of inversions in the deque after executing the described algorithm.",
    "note": "One of the ways to get the sequence [ 5, 3, 7, 5] in the deque, containing only two inversions, from the initial array [ 3, 7, 5, 5] ( the first sample test case) is described in the problem statement. Also, in this example, you could get the answer of two inversions by simply putting each element of the original array at the end of the deque. In this case, the original sequence [ 3, 7, 5, 5] , also containing exactly two inversions, will be in the deque as- is.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1579E2"
  },
  {
    "title": "Permutation Minimization by Deque",
    "url": "https://codeforces.com/problemset/problem/1579/E1",
    "history": "In fact, the problems E1 and E2 do not have much in common. You should probably think of them as two separate problems. A permutation p of size n is given. A permutation of size n is an array of size n in which each integer from 1 to n occurs exactly once. For example, [ 1, 4, 3, 2] and [ 4, 2, 1, 3] are correct permutations while [ 1, 2, 4] and [ 1, 2, 2] are not. Let us consider an empty deque ( double- ended queue) . A deque is a data structure that supports adding elements to both the beginning and the end. So, if there are elements [ 1, 5, 2] currently in the deque, adding an element 4 to the beginning will produce the sequence [ 4, 1, 5, 2] , and adding same element to the end will produce [ 1, 5, 2, 4] . The elements of the permutation are sequentially added to the initially empty deque, starting with p_ 1 and finishing with p_ n . Before adding each element to the deque, you may choose whether to add it to the beginning or the end. For example, if we consider a permutation p = [ 3, 1, 2, 4] , one of the possible sequences of actions looks like this: 1. add 3 to the end of the deque: deque has a sequence [ 3] in it; 2. add 1 to the beginning of the deque: deque has a sequence [ 1, 3] in it; 3. add 2 to the end of the deque: deque has a sequence [ 1, 3, 2] in it; 4. add 4 to the end of the deque: deque has a sequence [ 1, 3, 2, 4] in it; Find the lexicographically smallest possible sequence of elements in the deque after the entire permutation has been processed. A sequence [ x_ 1, x_ 2, . . . , x_ n] is lexicographically smaller than the sequence [ y_ 1, y_ 2, . . . , y_ n] if there exists such i \u2264 n that x_ 1 = y_ 1 , x_ 2 = y_ 2 , . . . , x_ i - 1 = y_ i - 1 and x_ i < y_ i . In other words, if the sequences x and y have some ( possibly empty) matching prefix, and the next element of the sequence x is strictly smaller than the corresponding element of the sequence y . For example, the sequence [ 1, 3, 2, 4] is smaller than the sequence [ 1, 3, 4, 2] because after the two matching elements [ 1, 3] in the start the first sequence has an element 2 which is smaller than the corresponding element 4 in the second sequence.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of each test case description contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 permutation size. The second line of the description contains n space- separated integers p_ i ( 1 \u2264 p_ i \u2264 n ; all p_ i are all unique) \u2014 elements of the permutation. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t lines, each line containing the answer to the corresponding test case. The answer to a test case should contain n space- separated integer numbers \u2014 the elements of the lexicographically smallest permutation that is possible to find in the deque after executing the described algorithm.",
    "note": "One of the ways to get a lexicographically smallest permutation [ 1, 3, 2, 4] from the permutation [ 3, 1, 2, 4] ( the first sample test case) is described in the problem statement.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1579E1"
  },
  {
    "title": "Productive Meeting",
    "url": "https://codeforces.com/problemset/problem/1579/D",
    "history": "An important meeting is to be held and there are exactly n people invited. At any moment, any two people can step back and talk in private. The same two people can talk several ( as many as they want) times per meeting. Each person has limited sociability. The sociability of the i - th person is a non- negative integer a_ i . This means that after exactly a_ i talks this person leaves the meeting ( and does not talk to anyone else anymore) . If a_ i = 0 , the i - th person leaves the meeting immediately after it starts. A meeting is considered most productive if the maximum possible number of talks took place during it. You are given an array of sociability a , determine which people should talk to each other so that the total number of talks is as large as possible.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next 2t lines contain descriptions of the test cases. The first line of each test case description contains an integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014the number of people in the meeting. The second line consists of n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the sociability parameters of all people. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 . It is also guaranteed that the sum of all a_ i ( over all test cases and all i ) does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t answers to all test cases. On the first line of each answer print the number k \u2014 the maximum number of talks possible in a meeting. On each of the next k lines print two integers i and j ( 1 \u2264 i, j \u2264 n and i = \u0338 j ) \u2014 the numbers of people who will have another talk. If there are several possible answers, you may print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "1579D"
  },
  {
    "title": "Ticks",
    "url": "https://codeforces.com/problemset/problem/1579/C",
    "history": "Casimir has a rectangular piece of paper with a checkered field of size n \u00d7 m . Initially, all cells of the field are white. Let us denote the cell with coordinates i vertically and j horizontally by ( i, j) . The upper left cell will be referred to as ( 1, 1) and the lower right cell as ( n, m) . Casimir draws ticks of different sizes on the field. A tick of size d ( d > 0 ) with its center in cell ( i, j) is drawn as follows: First, the center cell ( i, j) is painted black. Then exactly d cells on the top- left diagonally to the center and exactly d cells on the top- right diagonally to the center are also painted black. That is all the cells with coordinates ( i - h, j \u00b1 h) for all h between 0 and d are painted. In particular, a tick consists of 2d + 1 black cells. An already painted cell will remain black if painted again. Below you can find an example of the 4 \u00d7 9 box, with two ticks of sizes 2 and 3 . You are given a description of a checkered field of size n \u00d7 m . Casimir claims that this field came about after he drew some ( possibly 0 ) ticks on it. The ticks could be of different sizes, but the size of each tick is at least k ( that is, d \u2265 k for all the ticks) . Determine whether this field can indeed be obtained by drawing some ( possibly none) ticks of sizes d \u2265 k or not.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number test cases. The following lines contain the descriptions of the test cases. The first line of the test case description contains the integers n , m , and k ( 1 \u2264 k \u2264 n \u2264 10 ; 1 \u2264 m \u2264 19 ) \u2014 the field size and the minimum size of the ticks that Casimir drew. The following n lines describe the field: each line consists of m characters either being ' . ' if the corresponding cell is not yet painted or ' * ' otherwise.",
    "output": "Print t lines, each line containing the answer to the corresponding test case. The answer to a test case should be YES if the given field can be obtained by drawing ticks of at least the given size and NO otherwise. You may print every letter in any case you want ( so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answers) .",
    "note": "The first sample test case consists of two asterisks neither of which can be independent ticks since ticks of size 0 don' t exist. The second sample test case is already described in the statement ( check the picture in the statement) . This field can be obtained by drawing ticks of sizes 2 and 3 , as shown in the figure. The field in the third sample test case corresponds to three ticks of size 1 . Their center cells are marked with blue , red and green colors: * . * . * * * * . * * . . . . . The field in the fourth sample test case could have been obtained by drawing two ticks of sizes 1 and 2 . Their vertices are marked below with blue and red colors respectively: . . . . . * . . . * . * . * . . . * . * . . . * . The field in the fifth sample test case can not be obtained because k = 2 , and the last asterisk in the fourth row from the top with coordinates ( 4, 5) can only be a part of a tick of size 1 . The field in the sixth sample test case can not be obtained because the top left asterisk ( 1, 1) can' t be an independent tick, since the sizes of the ticks must be positive, and cannot be part of a tick with the center cell in the last row, since it is separated from it by a gap ( a point, ' . ' ) in ( 2, 2) . In the seventh sample test case, similarly, the field can not be obtained by the described process because the asterisks with coordinates ( 1, 2) ( second cell in the first row) , ( 3, 1) and ( 3, 3) ( leftmost and rightmost cells in the bottom) can not be parts of any ticks.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1579C"
  },
  {
    "title": "Labyrinth",
    "url": "https://codeforces.com/problemset/problem/1578/L",
    "history": "In a dream, Lucy found herself in a labyrinth. This labyrinth consists of n rooms, connected by m passages ( i - th passage is w_ i cm wide) . Each passage can be traversed in both directions. It is guaranteed that it is possible to get from any room to any other room. But this is not an ordinary labyrinth \u2014 each room in this labyrinth contains a magic candy. When Lucy eats this magic candy, she is getting wider. Specifically, if she eats candy from room i she becomes wider by c_ i cm. Note that she is not obliged to eat candy the first time she visits a particular room, but she can eat each candy only once. Unfortunately, passages in this labyrinth are pretty narrow, so after eating some candy, Lucy can get too wide and will not be able to traverse them \u2014 her width should not be greater than the width of the corresponding passage. Lucy starts her journey in a room number 1 . She wants to eat all the candies. After that, she will just wake up, so she does not have to be able to return to the room 1 . She realizes that with her current width, she may not be able to do so, so she plans a workout before embarking on her journey. Lucy wants to know if it is possible to start with some positive width and still eat all the candies. If yes, then what is the maximal starting width with which it is possible.",
    "input": "The first line contains two integers, n and m ( 2 \u2264 n \u2264 10^ 5; n - 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of rooms and the number of passages. The second line contains n integers \u2014 c_ i ( 1 \u2264 c_ i \u2264 10^ 9 ) . Next m lines contain three integers each \u2014 a_ i , b_ i and w_ i ( 1 \u2264 a_ i, b_ i \u2264 n; a_ i b_ i; 1 \u2264 w_ i \u2264 10^ 9 ) describing passage that connects rooms a_ i and b_ i and is w_ i cm wide. It is guaranteed that the resulting labyrinth is connected and there is at most one passage between any pair of rooms.",
    "output": "If it is possible to eat all the candies, output the maximal possible starting width, otherwise output - 1 .",
    "note": "",
    "topics": [
      "binary search",
      "dsu",
      "greedy"
    ],
    "id": "1578L"
  },
  {
    "title": "The Strongest Build",
    "url": "https://codeforces.com/problemset/problem/1574/D",
    "history": "Ivan is playing yet another roguelike computer game. He controls a single hero in the game. The hero has n equipment slots. There is a list of c_ i items for the i - th slot, the j - th of them increases the hero strength by a_ i, j . The items for each slot are pairwise distinct and are listed in the increasing order of their strength increase. So, a_ i, 1 < a_ i, 2 < . . . < a_ i, c_ i . For each slot Ivan chooses exactly one item. Let the chosen item for the i - th slot be the b_ i - th item in the corresponding list. The sequence of choices [ b_ 1, b_ 2, . . . , b_ n] is called a build. The strength of a build is the sum of the strength increases of the items in it. Some builds are banned from the game. There is a list of m pairwise distinct banned builds. It' s guaranteed that there' s at least one build that' s not banned. What is the build with the maximum strength that is not banned from the game? If there are multiple builds with maximum strength, print any of them.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10 ) \u2014 the number of equipment slots. The i - th of the next n lines contains the description of the items for the i - th slot. First, one integer c_ i ( 1 \u2264 c_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the number of items for the i - th slot. Then c_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, c_ i ( 1 \u2264 a_ i, 1 < a_ i, 2 < . . . < a_ i, c_ i\u2264 10^ 8 ) . The sum of c_ i doesn' t exceed 2 \u00b7 10^ 5 . The next line contains a single integer m ( 0 \u2264 m \u2264 10^ 5 ) \u2014 the number of banned builds. Each of the next m lines contains a description of a banned build \u2014 a sequence of n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 c_ i ) . The builds are pairwise distinct, and there' s at least one build that' s not banned.",
    "output": "Print the build with the maximum strength that is not banned from the game. If there are multiple builds with maximum strength, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "hashing",
      "implementation"
    ],
    "id": "1574D"
  },
  {
    "title": "Slay the Dragon",
    "url": "https://codeforces.com/problemset/problem/1574/C",
    "history": "Recently, Petya learned about a new game \" Slay the Dragon\" . As the name suggests, the player will have to fight with dragons. To defeat a dragon, you have to kill it and defend your castle. To do this, the player has a squad of n heroes, the strength of the i - th hero is equal to a_ i . According to the rules of the game, exactly one hero should go kill the dragon, all the others will defend the castle. If the dragon' s defense is equal to x , then you have to send a hero with a strength of at least x to kill it. If the dragon' s attack power is y , then the total strength of the heroes defending the castle should be at least y . The player can increase the strength of any hero by 1 for one gold coin. This operation can be done any number of times. There are m dragons in the game, the i - th of them has defense equal to x_ i and attack power equal to y_ i . Petya was wondering what is the minimum number of coins he needs to spend to defeat the i - th dragon. Note that the task is solved independently for each dragon ( improvements are not saved) .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 number of heroes. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) , where a_ i is the strength of the i - th hero. The third line contains a single integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of dragons. The next m lines contain two integers each, x_ i and y_ i ( 1 \u2264 x_ i \u2264 10^ 12; 1 \u2264 y_ i \u2264 10^ 18 ) \u2014 defense and attack power of the i - th dragon.",
    "output": "Print m lines, i - th of which contains a single integer \u2014 the minimum number of coins that should be spent to defeat the i - th dragon.",
    "note": "To defeat the first dragon, you can increase the strength of the third hero by 1 , then the strength of the heroes will be equal to [ 3, 6, 3, 3] . To kill the dragon, you can choose the first hero. To defeat the second dragon, you can increase the forces of the second and third heroes by 1 , then the strength of the heroes will be equal to [ 3, 7, 3, 3] . To kill the dragon, you can choose a second hero. To defeat the third dragon, you can increase the strength of all the heroes by 1 , then the strength of the heroes will be equal to [ 4, 7, 3, 4] . To kill the dragon, you can choose a fourth hero. To defeat the fourth dragon, you don' t need to improve the heroes and choose a third hero to kill the dragon. To defeat the fifth dragon, you can increase the strength of the second hero by 2 , then the strength of the heroes will be equal to [ 3, 8, 2, 3] . To kill the dragon, you can choose a second hero.",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "ternary search"
    ],
    "id": "1574C"
  },
  {
    "title": "Combinatorics Homework",
    "url": "https://codeforces.com/problemset/problem/1574/B",
    "history": "You are given four integer values a , b , c and m . Check if there exists a string that contains: a letters ' A' ; b letters ' B' ; c letters ' C' ; no other letters; exactly m pairs of adjacent equal letters ( exactly m such positions i that the i - th letter is equal to the ( i+ 1) - th one) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. Each of the next t lines contains the description of the testcase \u2014 four integers a , b , c and m ( 1 \u2264 a, b, c \u2264 10^ 8 ; 0 \u2264 m \u2264 10^ 8 ) .",
    "output": "For each testcase print \" YES\" if there exists a string that satisfies all the requirements. Print \" NO\" if there are no such strings. You may print every letter in any case you want ( so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer) .",
    "note": "In the first testcase strings \" ABCAB\" or \" BCABA\" satisfy the requirements. There exist other possible strings. In the second testcase there' s no way to put adjacent equal letters if there' s no letter that appears at least twice. In the third testcase string \" CABBCC\" satisfies the requirements. There exist other possible strings.",
    "topics": [
      "combinatorics",
      "greedy",
      "math"
    ],
    "id": "1574B"
  },
  {
    "title": "Swaps",
    "url": "https://codeforces.com/problemset/problem/1573/B",
    "history": "You are given two arrays a and b of length n . Array a contains each odd integer from 1 to 2n in an arbitrary order, and array b contains each even integer from 1 to 2n in an arbitrary order. You can perform the following operation on those arrays: choose one of the two arrays pick an index i from 1 to n- 1 swap the i - th and the ( i+ 1) - th elements of the chosen array Compute the minimum number of operations needed to make array a lexicographically smaller than array b . For two different arrays x and y of the same length n , we say that x is lexicographically smaller than y if in the first position where x and y differ, the array x has a smaller element than the corresponding element in y .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the arrays. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2n , all a_ i are odd and pairwise distinct) \u2014 array a . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 2n , all b_ i are even and pairwise distinct) \u2014 array b . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print one integer: the minimum number of operations needed to make array a lexicographically smaller than array b . We can show that an answer always exists.",
    "note": "In the first example, the array a is already lexicographically smaller than array b , so no operations are required. In the second example, we can swap 5 and 3 and then swap 2 and 4 , which results in [ 3, 5, 1] and [ 4, 2, 6] . Another correct way is to swap 3 and 1 and then swap 5 and 1 , which results in [ 1, 5, 3] and [ 2, 4, 6] . Yet another correct way is to swap 4 and 6 and then swap 2 and 6 , which results in [ 5, 3, 1] and [ 6, 2, 4] .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1573B"
  },
  {
    "title": "Countdown",
    "url": "https://codeforces.com/problemset/problem/1573/A",
    "history": "You are given a digital clock with n digits. Each digit shows an integer from 0 to 9 , so the whole clock shows an integer from 0 to 10^ n- 1 . The clock will show leading zeroes if the number is smaller than 10^ n- 1 . You want the clock to show 0 with as few operations as possible. In an operation, you can do one of the following: decrease the number on the clock by 1 , or swap two digits ( you can choose which digits to swap, and they don' t have to be adjacent) . Your task is to determine the minimum number of operations needed to make the clock show 0 .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 3 ) . The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 number of digits on the clock. The second line of each test case contains a string of n digits s_ 1, s_ 2, . . . , s_ n ( 0 \u2264 s_ 1, s_ 2, . . . , s_ n \u2264 9 ) \u2014 the number on the clock. Note: If the number is smaller than 10^ n- 1 the clock will show leading zeroes.",
    "output": "For each test case, print one integer: the minimum number of operations needed to make the clock show 0 .",
    "note": "In the first example, it' s optimal to just decrease the number 7 times. In the second example, we can first swap the first and last position and then decrease the number by 1 . In the third example, the clock already shows 0 , so we don' t have to perform any operations.",
    "topics": [
      "greedy"
    ],
    "id": "1573A"
  },
  {
    "title": "Bridge Club",
    "url": "https://codeforces.com/problemset/problem/1572/D",
    "history": "There are currently n hot topics numbered from 0 to n- 1 at your local bridge club and 2^ n players numbered from 0 to 2^ n- 1 . Each player holds a different set of views on those n topics, more specifically, the i - th player holds a positive view on the j - th topic if i & 2^ j > 0 , and a negative view otherwise. Here & denotes the bitwise AND operation. You are going to organize a bridge tournament capable of accommodating at most k pairs of players ( bridge is played in teams of two people) . You can select teams arbitrarily while each player is in at most one team, but there is one catch: two players cannot be in the same pair if they disagree on 2 or more of those n topics, as they would argue too much during the play. You know that the i - th player will pay you a_ i dollars if they play in this tournament. Compute the maximum amount of money that you can earn if you pair the players in your club optimally.",
    "input": "The first line contains two integers n , k ( 1 \u2264 n \u2264 20 , 1 \u2264 k \u2264 200 ) \u2014 the number of hot topics and the number of pairs of players that your tournament can accommodate. The second line contains 2^ n integers a_ 0, a_ 1, . . . , a_ 2^ n- 1 ( 0 \u2264 a_ i \u2264 10^ 6 ) \u2014 the amounts of money that the players will pay to play in the tournament.",
    "output": "Print one integer: the maximum amount of money that you can earn if you pair the players in your club optimally under the above conditions.",
    "note": "In the first example, the best we can do is to pair together the 0 - th player and the 2 - nd player resulting in earnings of 8 + 5 = 13 dollars. Although pairing the 0 - th player with the 5 - th player would give us 8 + 10 = 18 dollars, we cannot do this because those two players disagree on 2 of the 3 hot topics. In the second example, we can pair the 0 - th player with the 1 - st player and pair the 2 - nd player with the 3 - rd player resulting in earnings of 7 + 4 + 5 + 7 = 23 dollars.",
    "topics": [
      "flows",
      "graph matchings",
      "graphs",
      "greedy"
    ],
    "id": "1572D"
  },
  {
    "title": "Paint",
    "url": "https://codeforces.com/problemset/problem/1572/C",
    "history": "You are given a 1 by n pixel image. The i - th pixel of the image has color a_ i . For each color, the number of pixels of that color is at most 20 . You can perform the following operation, which works like the bucket tool in paint programs, on this image: pick a color \u2014 an integer from 1 to n ; choose a pixel in the image; for all pixels connected to the selected pixel, change their colors to the selected color ( two pixels of the same color are considered connected if all the pixels between them have the same color as those two pixels) . Compute the minimum number of operations needed to make all the pixels in the image have the same color.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 3 ) . The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3\u00b710^ 3 ) \u2014 the number of pixels in the image. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the colors of the pixels in the image. Note: for each color, the number of pixels of that color is at most 20 . It is guaranteed that the sum of n over all test cases does not exceed 3\u00b710^ 3 .",
    "output": "For each test case, print one integer: the minimum number of operations needed to make all the pixels in the image have the same color.",
    "note": "In the first example, the optimal solution is to apply the operation on the third pixel changing its color to 2 and then to apply the operation on any pixel that has color 2 changing its color and the color of all pixels connected to it to 1 . The sequence of operations is then: [ 1, 2, 3, 2, 1] \u2192 [ 1, 2, 2, 2, 1] \u2192 [ 1, 1, 1, 1, 1] . In the second example, we can either change the 1 s to 2 s in one operation or change the 2 s to 1 s also in one operation. In the third example, one possible way to make all the pixels have the same color is to apply the operation on the first, third and the fourth pixel each time changing its color to 2 .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1572C"
  },
  {
    "title": "Xor of 3",
    "url": "https://codeforces.com/problemset/problem/1572/B",
    "history": "You are given a sequence a of length n consisting of 0 s and 1 s. You can perform the following operation on this sequence: Pick an index i from 1 to n- 2 ( inclusive) . Change all of a_ i , a_ i+ 1 , a_ i+ 2 to a_ i\u2295 a_ i+ 1\u2295 a_ i+ 2 simultaneously, where \u2295 denotes the bitwise XOR operation Find a sequence of at most n operations that changes all elements of a to 0 s or report that it' s impossible. We can prove that if there exists a sequence of operations of any length that changes all elements of a to 0 s, then there is also such a sequence of length not greater than n .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( a_ i = 0 or a_ i = 1 ) \u2014 elements of a . It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, do the following: if there is no way of making all the elements of a equal to 0 after performing the above operation some number of times, print \" NO\" . otherwise, in the first line print \" YES\" , in the second line print k ( 0 \u2264 k \u2264 n ) \u2014 the number of operations that you want to perform on a , and in the third line print a sequence b_ 1, b_ 2, . . . , b_ k ( 1 \u2264 b_ i \u2264 n - 2 ) \u2014 the indices on which the operation should be applied. If there are multiple solutions, you may print any.",
    "note": "In the first example, the sequence contains only 0 s so we don' t need to change anything. In the second example, we can transform [ 1, 1, 1, 1, 0] to [ 1, 1, 0, 0, 0] and then to [ 0, 0, 0, 0, 0] by performing the operation on the third element of a and then on the first element of a . In the third example, no matter whether we first perform the operation on the first or on the second element of a we will get [ 1, 1, 1, 1] , which cannot be transformed to [ 0, 0, 0, 0] .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "two pointers"
    ],
    "id": "1572B"
  },
  {
    "title": "Fix the String",
    "url": "https://codeforces.com/problemset/problem/1571/E",
    "history": "A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \" 1\" and \" + \" between the original characters of the sequence. For example: bracket sequences \" ( ) ( ) \" and \" ( ( ) ) \" are regular ( the resulting expressions are: \" ( 1) + ( 1) \" and \" ( ( 1+ 1) + 1) \" ) ; bracket sequences \" ) ( \" , \" ( \" and \" ) \" are not. You are given two strings s and a , the string s has length n , the string a has length n - 3 . The string s is a bracket sequence ( i. e. each element of this string is either an opening bracket character or a closing bracket character) . The string a is a binary string ( i. e. each element of this string is either 1 or 0) . The string a imposes some constraints on the string s : for every i such that a_ i is 1, the string s_ i s_ i+ 1 s_ i+ 2 s_ i+ 3 should be a regular bracket sequence. Characters of a equal to 0 don' t impose any constraints. Initially, the string s may or may not meet these constraints. You can perform the following operation any number of times: replace some character of s with its inverse ( i. e. you can replace an opening bracket with a closing bracket, or vice versa) . Determine if it is possible to change some characters in s so that it meets all of the constraints, and if it is possible, calculate the minimum number of characters to be changed.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case consists of three lines. The first line contains one integer n ( 4 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains the string s , consisting of exactly n characters; each character of s is either ' ( ' or ' ) ' . The third line contains the string a , consisting of exactly n - 3 characters; each character of a is either ' 1' or ' 0' . Additional constraint on the input: the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer: the minimum number of characters that need to be changed in s , or - 1 if it is impossible.",
    "note": "",
    "topics": [
      "*special",
      "bitmasks",
      "dp",
      "greedy"
    ],
    "id": "1571E"
  },
  {
    "title": "Expression Evaluation Error",
    "url": "https://codeforces.com/problemset/problem/1567/D",
    "history": "On the board, Bob wrote n positive integers in base 10 with sum s ( i. e. in decimal numeral system) . Alice sees the board, but accidentally interprets the numbers on the board as base- 11 integers and adds them up ( in base 11 ) . What numbers should Bob write on the board, so Alice' s sum is as large as possible?",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The only line of each test case contains two integers s and n ( 1 \u2264 s \u2264 10^ 9 ; 1 \u2264 n \u2264min( 100, s) ) \u2014 the sum and amount of numbers on the board, respectively. Numbers s and n are given in decimal notation ( base 10 ) .",
    "output": "For each test case, output n positive integers \u2014 the numbers Bob should write on the board, so Alice' s sum is as large as possible. If there are multiple answers, print any of them.",
    "note": "In the first test case, 70_ 10 + 27_ 10 = 97_ 10 , and Alice' s sum is 70_ 11 + 27_ 11 = 97_ 11 = 9 \u00b7 11 + 7 = 106_ 10. ( Here x_ b represents the number x in base b . ) It can be shown that it is impossible for Alice to get a larger sum than 106_ 10 . In the second test case, Bob can only write a single number on the board, so he must write 17 . In the third test case, 3_ 10 + 4_ 10 + 100_ 10 + 4_ 10 = 111_ 10 , and Alice' s sum is 3_ 11 + 4_ 11 + 100_ 11 + 4_ 11 = 110_ 11 = 1 \u00b7 11^ 2 + 1 \u00b7 11 = 132_ 10. It can be shown that it is impossible for Alice to get a larger sum than 132_ 10 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1567D"
  },
  {
    "title": "MEXor Mixup",
    "url": "https://codeforces.com/problemset/problem/1567/B",
    "history": "Alice gave Bob two integers a and b ( a > 0 and b \u2265 0 ) . Being a curious boy, Bob wrote down an array of non- negative integers with MEX value of all elements equal to a and XOR value of all elements equal to b . What is the shortest possible length of the array Bob wrote? Recall that the MEX ( Minimum EXcluded) of an array is the minimum non- negative integer that does not belong to the array and the XOR of an array is the bitwise XOR of all the elements of the array.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The only line of each test case contains two integers a and b ( 1 \u2264 a \u2264 3 \u00b7 10^ 5 ; 0 \u2264 b \u2264 3 \u00b7 10^ 5 ) \u2014 the MEX and XOR of the array, respectively.",
    "output": "For each test case, output one ( positive) integer \u2014 the length of the shortest array with MEX a and XOR b . We can show that such an array always exists.",
    "note": "In the first test case, one of the shortest arrays with MEX 1 and XOR 1 is [ 0, 2020, 2021] . In the second test case, one of the shortest arrays with MEX 2 and XOR 1 is [ 0, 1] . It can be shown that these arrays are the shortest arrays possible.",
    "topics": [
      "bitmasks",
      "greedy"
    ],
    "id": "1567B"
  },
  {
    "title": "Four Vertices",
    "url": "https://codeforces.com/problemset/problem/1566/G",
    "history": "You are given an undirected weighted graph, consisting of n vertices and m edges. Some queries happen with this graph: Delete an existing edge from the graph. Add a non- existing edge to the graph. At the beginning and after each query, you should find four different vertices a , b , c , d such that there exists a path between a and b , there exists a path between c and d , and the sum of lengths of two shortest paths from a to b and from c to d is minimal. The answer to the query is the sum of the lengths of these two shortest paths. The length of the path is equal to the sum of weights of edges in this path.",
    "input": "The first line contains two integers n and m ( 4 \u2264 n, m \u2264 10^ 5) \u2014 the number of vertices and edges in the graph respectively. Each of the next m lines contain three integers v , u , w ( 1 \u2264 v, u \u2264 n, v = \u0338 u , 1 \u2264 w \u2264 10^ 9 ) \u2014 this triple means that there is an edge between vertices v and u with weight w . The next line contains a single integer q ( 0 \u2264 q \u2264 10^ 5) \u2014 the number of queries. The next q lines contain the queries of two types: 0 v u \u2014 this query means deleting an edge between v and u ( 1 \u2264 v, u \u2264 n, v = \u0338 u) . It is guaranteed that such edge exists in the graph. 1 v u w \u2014 this query means adding an edge between vertices v and u with weight w ( 1 \u2264 v, u \u2264 n, v = \u0338 u , 1 \u2264 w \u2264 10^ 9 ) . It is guaranteed that there was no such edge in the graph. It is guaranteed that the initial graph does not contain multiple edges. At the beginning and after each query, the graph doesn' t need to be connected. It is guaranteed that at each moment the number of edges will be at least 4 . It can be proven, that at each moment there exist some four vertices a , b , c , d such that there exists a path between vertices a and b , and there exists a path between vertices c and d .",
    "output": "Print q + 1 integers \u2014 the minimal sum of lengths of shortest paths between chosen pairs of vertices before the queries and after each of them.",
    "note": "Before the queries you can choose vertices ( a, b) = ( 3, 2) and ( c, d) = ( 1, 4) . The sum of lengths of two shortest paths is 3 + 1 = 4 . After the first query you can choose vertices ( a, b) = ( 2, 5) and ( c, d) = ( 1, 4) . The sum of lengths of two shortest paths is 2 + 1 = 3 . After the second query you can choose vertices ( a, b) = ( 3, 4) and ( c, d) = ( 2, 5) . The sum of lengths of two shortest paths is 1 + 2 = 3 . After the third query, you can choose vertices ( a, b) = ( 2, 6) and ( c, d) = ( 4, 5) . The sum of lengths of two shortest paths is 4 + 3 = 7 . After the last query you can choose vertices ( a, b) = ( 1, 6) and ( c, d) = ( 2, 5) . The sum of lengths of two shortest paths is 3 + 2 = 5 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1566G"
  },
  {
    "title": "Points Movement",
    "url": "https://codeforces.com/problemset/problem/1566/F",
    "history": "There are n points and m segments on the coordinate line. The initial coordinate of the i - th point is a_ i . The endpoints of the j - th segment are l_ j and r_ j \u2014 left and right endpoints, respectively. You can move the points. In one move you can move any point from its current coordinate x to the coordinate x - 1 or the coordinate x + 1 . The cost of this move is 1 . You should move the points in such a way that each segment is visited by at least one point. A point visits the segment [ l, r] if there is a moment when its coordinate was on the segment [ l, r] ( including endpoints) . You should find the minimal possible total cost of all moves such that all segments are visited.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of points and segments respectively. The next line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial coordinates of the points. Each of the next m lines contains two integers l_ j , r_ j ( - 10^ 9 \u2264 l_ j \u2264 r_ j \u2264 10^ 9 ) \u2014 the left and the right endpoints of the j - th segment. It' s guaranteed that the sum of n and the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total cost of all moves such that all segments are visited.",
    "note": "In the first test case the points can be moved as follows: Move the second point from the coordinate 6 to the coordinate 5 . Move the third point from the coordinate 14 to the coordinate 13 . Move the fourth point from the coordinate 18 to the coordinate 17 . Move the third point from the coordinate 13 to the coordinate 12 . Move the fourth point from the coordinate 17 to the coordinate 16 . The total cost of moves is 5 . It is easy to see, that all segments are visited by these movements. For example, the tenth segment ( [ 7, 13] ) is visited after the second move by the third point. Here is the image that describes the first test case:",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1566F"
  },
  {
    "title": "Buds Re-hanging",
    "url": "https://codeforces.com/problemset/problem/1566/E",
    "history": "A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. The parent of a vertex v ( different from root) is the previous to v vertex on the shortest path from the root to the vertex v . Children of the vertex v are all vertices for which v is the parent. A vertex is a leaf if it has no children. We call a vertex a bud, if the following three conditions are satisfied: it is not a root, it has at least one child, and all its children are leaves. You are given a rooted tree with n vertices. The vertex 1 is the root. In one operation you can choose any bud with all its children ( they are leaves) and re- hang them to any other vertex of the tree. By doing that you delete the edge connecting the bud and its parent and add an edge between the bud and the chosen vertex of the tree. The chosen vertex cannot be the bud itself or any of its children. All children of the bud stay connected to the bud. What is the minimum number of leaves it is possible to get if you can make any number of the above- mentioned operations ( possibly zero) ?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of the vertices in the given tree. Each of the next n- 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) meaning that there is an edge between vertices u and v in the tree. It is guaranteed that the given graph is a tree. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal number of leaves that is possible to get after some operations.",
    "note": "In the first test case the tree looks as follows: Firstly you can choose a bud vertex 4 and re- hang it to vertex 3 . After that you can choose a bud vertex 2 and re- hang it to vertex 7 . As a result, you will have the following tree with 2 leaves: It can be proved that it is the minimal number of leaves possible to get. In the second test case the tree looks as follows: You can choose a bud vertex 3 and re- hang it to vertex 5 . As a result, you will have the following tree with 2 leaves: It can be proved that it is the minimal number of leaves possible to get.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1566E"
  },
  {
    "title": "Seating Arrangements (hard version) ",
    "url": "https://codeforces.com/problemset/problem/1566/D2",
    "history": "It is the hard version of the problem. The only difference is that in this version 1 \u2264 n \u2264 300 . In the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n . The seats in each row are numbered with consecutive integers from left to right: in the k - th row from m ( k - 1) + 1 to m k for all rows 1 \u2264 k \u2264 n . 1 2 \u22ef m - 1 m m + 1 m + 2 \u22ef 2 m - 1 2 m 2m + 1 2m + 2 \u22ef 3 m - 1 3 m \u22ee \u22ee \u22f1 \u22ee \u22ee m ( n - 1) + 1 m ( n - 1) + 2 \u22ef n m - 1 n m The table with seats indices There are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm . You should give exactly one seat to each person. It is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i - th person has the level of sight a_ i . Let' s define s_ i as the seat index, that will be given to i - th person. You want to give better places for people with lower sight levels, so for any two people i , j such that a_ i < a_ j it should be satisfied that s_ i < s_ j . After you will give seats to all people they will start coming to their seats. In the order from 1 to nm , each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat' s row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through. Let' s consider an example: m = 5 , the person has the seat 4 in the first row, the seats 1 , 3 , 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2 , because he will go through occupied seats 1 and 3 . Find the minimal total inconvenience ( the sum of inconveniences of all people) , that is possible to have by giving places for all people ( all conditions should be satisfied) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 300 ) \u2014 the number of rows and places in each row respectively. The second line of each test case contains n \u00b7 m integers a_ 1, a_ 2, . . . , a_ n \u00b7 m ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the sight level of i - th person. It' s guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total inconvenience that can be achieved.",
    "note": "In the first test case, there is a single way to give seats: the first person sits in the first place and the second person \u2014 in the second. The total inconvenience is 1 . In the second test case the optimal seating looks like this: In the third test case the optimal seating looks like this: The number in a cell is the person' s index that sits on this place.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1566D2"
  },
  {
    "title": "Seating Arrangements (easy version) ",
    "url": "https://codeforces.com/problemset/problem/1566/D1",
    "history": "It is the easy version of the problem. The only difference is that in this version n = 1 . In the cinema seats can be represented as the table with n rows and m columns. The rows are numbered with integers from 1 to n . The seats in each row are numbered with consecutive integers from left to right: in the k - th row from m ( k - 1) + 1 to m k for all rows 1 \u2264 k \u2264 n . 1 2 \u22ef m - 1 m m + 1 m + 2 \u22ef 2 m - 1 2 m 2m + 1 2m + 2 \u22ef 3 m - 1 3 m \u22ee \u22ee \u22f1 \u22ee \u22ee m ( n - 1) + 1 m ( n - 1) + 2 \u22ef n m - 1 n m The table with seats indices There are nm people who want to go to the cinema to watch a new film. They are numbered with integers from 1 to nm . You should give exactly one seat to each person. It is known, that in this cinema as lower seat index you have as better you can see everything happening on the screen. i - th person has the level of sight a_ i . Let' s define s_ i as the seat index, that will be given to i - th person. You want to give better places for people with lower sight levels, so for any two people i , j such that a_ i < a_ j it should be satisfied that s_ i < s_ j . After you will give seats to all people they will start coming to their seats. In the order from 1 to nm , each person will enter the hall and sit in their seat. To get to their place, the person will go to their seat' s row and start moving from the first seat in this row to theirs from left to right. While moving some places will be free, some will be occupied with people already seated. The inconvenience of the person is equal to the number of occupied seats he or she will go through. Let' s consider an example: m = 5 , the person has the seat 4 in the first row, the seats 1 , 3 , 5 in the first row are already occupied, the seats 2 and 4 are free. The inconvenience of this person will be 2 , because he will go through occupied seats 1 and 3 . Find the minimal total inconvenience ( the sum of inconveniences of all people) , that is possible to have by giving places for all people ( all conditions should be satisfied) .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and m ( n = 1 , 1 \u2264 m \u2264 300 ) \u2014 the number of rows and places in each row respectively. The second line of each test case contains n \u00b7 m integers a_ 1, a_ 2, . . . , a_ n \u00b7 m ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the sight level of i - th person. It' s guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal total inconvenience that can be achieved.",
    "note": "In the first test case, there is a single way to arrange people, because all sight levels are distinct. The first person will sit on the first seat, the second person will sit on the second place, the third person will sit on the third place. So inconvenience of the first person will be 0 , inconvenience of the second person will be 1 and inconvenience of the third person will be 2 . The total inconvenience is 0 + 1 + 2 = 3 . In the second test case, people should sit as follows: s_ 1 = 2 , s_ 2 = 1 , s_ 3 = 5 , s_ 4 = 4 , s_ 5 = 3 . The total inconvenience will be 6 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1566D1"
  },
  {
    "title": "MAX-MEX Cut",
    "url": "https://codeforces.com/problemset/problem/1566/C",
    "history": "A binary string is a string that consists of characters 0 and 1 . A bi- table is a table that has exactly two rows of equal length, each being a binary string. Let MEX of a bi- table be the smallest digit among 0 , 1 , or 2 that does not occur in the bi- table. For example, MEX for [ 0011; 1010 ] is 2 , because 0 and 1 occur in the bi- table at least once. MEX for [ 111; 111 ] is 0 , because 0 and 2 do not occur in the bi- table, and 0 < 2 . You are given a bi- table with n columns. You should cut it into any number of bi- tables ( each consisting of consecutive columns) so that each column is in exactly one bi- table. It is possible to cut the bi- table into a single bi- table \u2014 the whole bi- table. What is the maximal sum of MEX of all resulting bi- tables can be?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of the description of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of columns in the bi- table. Each of the next two lines contains a binary string of length n \u2014 the rows of the bi- table. It' s guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the maximal sum of MEX of all bi- tables that it is possible to get by cutting the given bi- table optimally.",
    "note": "In the first test case you can cut the bi- table as follows: [ 0; 1 ] , its MEX is 2 . [ 10; 10 ] , its MEX is 2 . [ 1; 1 ] , its MEX is 0 . [ 0; 1 ] , its MEX is 2 . [ 0; 0 ] , its MEX is 1 . [ 0; 0 ] , its MEX is 1 . The sum of MEX is 8 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1566C"
  },
  {
    "title": "MIN-MEX Cut",
    "url": "https://codeforces.com/problemset/problem/1566/B",
    "history": "A binary string is a string that consists of characters 0 and 1 . Let MEX of a binary string be the smallest digit among 0 , 1 , or 2 that does not occur in the string. For example, MEX of 001011 is 2 , because 0 and 1 occur in the string at least once, MEX of 1111 is 0 , because 0 and 2 do not occur in the string and 0 < 2 . A binary string s is given. You should cut it into any number of substrings such that each character is in exactly one substring. It is possible to cut the string into a single substring \u2014 the whole string. A string a is a substring of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters from the beginning and several ( possibly, zero or all) characters from the end. What is the minimal sum of MEX of all substrings pieces can be?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. Each test case contains a single binary string s ( 1 \u2264 | s| \u2264 10^ 5 ) . It' s guaranteed that the sum of lengths of s over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the minimal sum of MEX of all substrings that it is possible to get by cutting s optimally.",
    "note": "In the first test case the minimal sum is MEX( 0) + MEX( 1) = 1 + 0 = 1 . In the second test case the minimal sum is MEX( 1111) = 0 . In the third test case the minimal sum is MEX( 01100) = 2 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1566B"
  },
  {
    "title": "Median Maximization",
    "url": "https://codeforces.com/problemset/problem/1566/A",
    "history": "You are given two positive integers n and s . Find the maximum possible median of an array of n non- negative integers ( not necessarily distinct) , such that the sum of its elements is equal to s . A median of an array of integers of length m is the number standing on the \u2308m/ 2\u2309 - th ( rounding up) position in the non- decreasing ordering of its elements. Positions are numbered starting from 1 . For example, a median of the array [ 20, 40, 20, 50, 50, 30] is the \u2308m/ 2\u2309 - th element of [ 20, 20, 30, 40, 50, 50] , so it is 30 . There exist other definitions of the median, but in this problem we use the described definition.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. Each test case contains a single line with two integers n and s ( 1 \u2264 n, s \u2264 10^ 9 ) \u2014 the length of the array and the required sum of the elements.",
    "output": "For each test case print a single integer \u2014 the maximum possible median.",
    "note": "Possible arrays for the first three test cases ( in each array the median is underlined) : In the first test case [ 5] In the second test case [ 2, 3] In the third test case [ 1, 2, 2]",
    "topics": [
      "binary search",
      "greedy",
      "math"
    ],
    "id": "1566A"
  },
  {
    "title": "Rescue Niwen!",
    "url": "https://codeforces.com/problemset/problem/1562/E",
    "history": "Morning desert sun horizonRise above the sands of time. . . Fates Warning, \" Exodus\" After crossing the Windswept Wastes, Ori has finally reached the Windtorn Ruins to find the Heart of the Forest! However, the ancient repository containing this priceless Willow light did not want to open! Ori was taken aback, but the Voice of the Forest explained to him that the cunning Gorleks had decided to add protection to the repository. The Gorleks were very fond of the \" string expansion\" operation. They were also very fond of increasing subsequences. Suppose a string s_ 1s_ 2s_ 3 . . . s_ n is given. Then its \" expansion\" is defined as the sequence of strings s_ 1 , s_ 1 s_ 2 , . . . , s_ 1 s_ 2 . . . s_ n , s_ 2 , s_ 2 s_ 3 , . . . , s_ 2 s_ 3 . . . s_ n , s_ 3 , s_ 3 s_ 4 , . . . , s_ n- 1 s_ n , s_ n . For example, the \" expansion\" the string ' abcd' will be the following sequence of strings: ' a' , ' ab' , ' abc' , ' abcd' , ' b' , ' bc' , ' bcd' , ' c' , ' cd' , ' d' . To open the ancient repository, Ori must find the size of the largest increasing subsequence of the \" expansion\" of the string s . Here, strings are compared lexicographically. Help Ori with this task! A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "Each test contains multiple test cases. The first line contains one positive integer t ( 1 \u2264 t \u2264 10^ 3 ) , denoting the number of test cases. Description of the test cases follows. The first line of each test case contains one positive integer n ( 1 \u2264 n \u2264 5000 ) \u2014 length of the string. The second line of each test case contains a non- empty string of length n , which consists of lowercase latin letters. It is guaranteed that the sum of n over all test cases does not exceed 10^ 4 .",
    "output": "For every test case print one non- negative integer \u2014 the answer to the problem.",
    "note": "In first test case the \" expansion\" of the string is: ' a' , ' ac' , ' acb' , ' acba' , ' acbac' , ' c' , ' cb' , ' cba' , ' cbac' , ' b' , ' ba' , ' bac' , ' a' , ' ac' , ' c' . The answer can be, for example, ' a' , ' ac' , ' acb' , ' acba' , ' acbac' , ' b' , ' ba' , ' bac' , ' c' .",
    "topics": [
      "dp",
      "greedy",
      "string suffix structures",
      "strings"
    ],
    "id": "1562E"
  },
  {
    "title": "The Miracle and the Sleeper",
    "url": "https://codeforces.com/problemset/problem/1562/A",
    "history": "You are given two integers l and r , l\u2264 r . Find the largest possible value of a b over all pairs ( a, b) of integers for which r\u2265 a \u2265 b \u2265 l . As a reminder, a b is a remainder we get when dividing a by b . For example, 26 8 = 2 .",
    "input": "Each test contains multiple test cases. The first line contains one positive integer t ( 1\u2264 t\u2264 10^ 4) , denoting the number of test cases. Description of the test cases follows. The only line of each test case contains two integers l , r ( 1\u2264 l \u2264 r \u2264 10^ 9 ) .",
    "output": "For every test case, output the largest possible value of a b over all pairs ( a, b) of integers for which r\u2265 a \u2265 b \u2265 l .",
    "note": "In the first test case, the only allowed pair is ( a, b) = ( 1, 1) , for which a b = 1 1 = 0 . In the second test case, the optimal choice is pair ( a, b) = ( 1000000000, 999999999) , for which a b = 1 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1562A"
  },
  {
    "title": "Deep Down Below",
    "url": "https://codeforces.com/problemset/problem/1561/C",
    "history": "In a certain video game, the player controls a hero characterized by a single integer value: power. The hero will have to beat monsters that are also characterized by a single integer value: armor. On the current level, the hero is facing n caves. To pass the level, the hero must enter all the caves in some order, each cave exactly once, and exit every cave safe and sound. When the hero enters cave i , he will have to fight k_ i monsters in a row: first a monster with armor a_ i, 1 , then a monster with armor a_ i, 2 and so on, finally, a monster with armor a_ i, k_ i . The hero can beat a monster if and only if the hero' s power is strictly greater than the monster' s armor. If the hero can' t beat the monster he' s fighting, the game ends and the player loses. Note that once the hero enters a cave, he can' t exit it before he fights all the monsters in it, strictly in the given order. Each time the hero beats a monster, the hero' s power increases by 1 . Find the smallest possible power the hero must start the level with to be able to enter all the caves in some order and beat all the monsters.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of caves. The i - th of the next n lines contains an integer k_ i ( 1 \u2264 k_ i \u2264 10^ 5 ) \u2014 the number of monsters in the i - th cave, followed by k_ i integers a_ i, 1, a_ i, 2, . . . , a_ i, k_ i ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 armor levels of the monsters in cave i in order the hero has to fight them. It is guaranteed that the sum of k_ i over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the smallest possible power the hero must start the level with to be able to enter all the caves in some order and beat all the monsters.",
    "note": "In the first test case, the hero has to beat a single monster with armor 42 , it' s enough to have power 43 to achieve that. In the second test case, the hero can pass the level with initial power 13 as follows: enter cave 2 : beat a monster with armor 12 , power increases to 14 ; beat a monster with armor 11 , power increases to 15 ; enter cave 1 : beat a monster with armor 10 , power increases to 16 ; beat a monster with armor 15 , power increases to 17 ; beat a monster with armor 8 , power increases to 18 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1561C"
  },
  {
    "title": "Nearest Beautiful Number (hard version)",
    "url": "https://codeforces.com/problemset/problem/1560/F2",
    "history": "It is a complicated version of problem F1. The difference between them is the constraints ( F1: k \u2264 2 , F2: k \u2264 10 ) . You are given an integer n . Find the minimum integer x such that x \u2265 n and the number x is k - beautiful. A number is called k - beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E. g. if k = 2 , the numbers 3434443 , 55550 , 777 and 21 are k - beautiful whereas the numbers 120 , 445435 and 998244353 are not.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of one line containing two integers n and k ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 k \u2264 10 ) .",
    "output": "For each test case output on a separate line x \u2014 the minimum k - beautiful integer such that x \u2265 n .",
    "note": "",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy"
    ],
    "id": "1560F2"
  },
  {
    "title": "Nearest Beautiful Number (easy version)",
    "url": "https://codeforces.com/problemset/problem/1560/F1",
    "history": "It is a simplified version of problem F2. The difference between them is the constraints ( F1: k \u2264 2 , F2: k \u2264 10 ) . You are given an integer n . Find the minimum integer x such that x \u2265 n and the number x is k - beautiful. A number is called k - beautiful if its decimal representation having no leading zeroes contains no more than k different digits. E. g. if k = 2 , the numbers 3434443 , 55550 , 777 and 21 are k - beautiful whereas the numbers 120 , 445435 and 998244353 are not.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of one line containing two integers n and k ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 k \u2264 2 ) .",
    "output": "For each test case output on a separate line x \u2014 the minimum k - beautiful integer such that x \u2265 n .",
    "note": "",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "greedy"
    ],
    "id": "1560F1"
  },
  {
    "title": "Make a Power of Two",
    "url": "https://codeforces.com/problemset/problem/1560/D",
    "history": "You are given an integer n . In 1 move, you can do one of the following actions: erase any digit of the number ( it' s acceptable that the number before the operation has exactly one digit and after the operation, it is \" empty\" ) ; add one digit to the right. The actions may be performed in any order any number of times. Note that if, after deleting some digit from a number, it will contain leading zeroes, they will not be deleted. E. g. if you delete from the number 301 the digit 3 , the result is the number 01 ( not 1 ) . You need to perform the minimum number of actions to make the number any power of 2 ( i. e. there' s an integer k ( k \u2265 0 ) such that the resulting number is equal to 2^ k ) . The resulting number must not have leading zeroes. E. g. consider n= 1052 . The answer is equal to 2 . First, let' s add to the right one digit 4 ( the result will be 10524 ) . Then let' s erase the digit 5 , so the result will be 1024 which is a power of 2 . E. g. consider n= 8888 . The answer is equal to 3 . Let' s erase any of the digits 8 three times. The result will be 8 which is a power of 2 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of one line containing one integer n ( 1 \u2264 n \u2264 10^ 9 ) .",
    "output": "For each test case, output in a separate line one integer m \u2014 the minimum number of moves to transform the number into any power of 2 .",
    "note": "The answer for the first test case was considered above. The answer for the second test case was considered above. In the third test case, it' s enough to add to the right the digit 4 \u2014 the number 6 will turn into 64 . In the fourth test case, let' s add to the right the digit 8 and then erase 7 and 5 \u2014 the taken number will turn into 8 . The numbers of the fifth and the sixth test cases are already powers of two so there' s no need to make any move. In the seventh test case, you can delete first of all the digit 3 ( the result is 01 ) and then the digit 0 ( the result is 1 ) .",
    "topics": [
      "greedy",
      "math",
      "strings"
    ],
    "id": "1560D"
  },
  {
    "title": "Mocha and Diana (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1559/D2",
    "history": "This is the hard version of the problem. The only difference between the two versions is the constraint on n . You can make hacks only if all versions of the problem are solved. A forest is an undirected graph without cycles ( not necessarily connected) . Mocha and Diana are friends in Zhijiang, both of them have a forest with nodes numbered from 1 to n , and they would like to add edges to their forests such that: After adding edges, both of their graphs are still forests. They add the same edges. That is, if an edge ( u, v) is added to Mocha' s forest, then an edge ( u, v) is added to Diana' s forest, and vice versa. Mocha and Diana want to know the maximum number of edges they can add, and which edges to add.",
    "input": "The first line contains three integers n , m_ 1 and m_ 2 ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m_ 1, m_ 2 < n ) \u2014 the number of nodes and the number of initial edges in Mocha' s forest and Diana' s forest. Each of the next m_ 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edges in Mocha' s forest. Each of the next m_ 2 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edges in Diana' s forest.",
    "output": "The first line contains only one integer h , the maximum number of edges Mocha and Diana can add. Each of the next h lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edge you add each time. If there are multiple correct answers, you can print any one of them.",
    "note": "In the first example, we cannot add any edge. In the second example, the initial forests are as follows. We can add an edge ( 2, 4) .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "trees",
      "two pointers"
    ],
    "id": "1559D2"
  },
  {
    "title": "Mocha and Diana (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1559/D1",
    "history": "This is the easy version of the problem. The only difference between the two versions is the constraint on n . You can make hacks only if all versions of the problem are solved. A forest is an undirected graph without cycles ( not necessarily connected) . Mocha and Diana are friends in Zhijiang, both of them have a forest with nodes numbered from 1 to n , and they would like to add edges to their forests such that: After adding edges, both of their graphs are still forests. They add the same edges. That is, if an edge ( u, v) is added to Mocha' s forest, then an edge ( u, v) is added to Diana' s forest, and vice versa. Mocha and Diana want to know the maximum number of edges they can add, and which edges to add.",
    "input": "The first line contains three integers n , m_ 1 and m_ 2 ( 1 \u2264 n \u2264 1000 , 0 \u2264 m_ 1, m_ 2 < n ) \u2014 the number of nodes and the number of initial edges in Mocha' s forest and Diana' s forest. Each of the next m_ 1 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edges in Mocha' s forest. Each of the next m_ 2 lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edges in Diana' s forest.",
    "output": "The first line contains only one integer h , the maximum number of edges Mocha and Diana can add ( in each forest) . Each of the next h lines contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) \u2014 the edge you add each time. If there are multiple correct answers, you can print any one of them.",
    "note": "In the first example, we cannot add any edge. In the second example, the initial forests are as follows. We can add an edge ( 2, 4) .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1559D1"
  },
  {
    "title": "Mocha and Red and Blue",
    "url": "https://codeforces.com/problemset/problem/1559/B",
    "history": "As their story unravels, a timeless tale is told once again. . . Shirahime, a friend of Mocha' s, is keen on playing the music game Arcaea and sharing Mocha interesting puzzles to solve. This day, Shirahime comes up with a new simple puzzle and wants Mocha to solve them. However, these puzzles are too easy for Mocha to solve, so she wants you to solve them and tell her the answers. The puzzles are described as follow. There are n squares arranged in a row, and each of them can be painted either red or blue. Among these squares, some of them have been painted already, and the others are blank. You can decide which color to paint on each blank square. Some pairs of adjacent squares may have the same color, which is imperfect. We define the imperfectness as the number of pairs of adjacent squares that share the same color. For example, the imperfectness of \" BRRRBBR\" is 3 , with \" BB\" occurred once and \" RR\" occurred twice. Your goal is to minimize the imperfectness and print out the colors of the squares after painting.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains an integer n ( 1\u2264 n\u2264 100 ) \u2014 the length of the squares row. The second line of each test case contains a string s with length n , containing characters ' B' , ' R' and ' ? ' . Here ' B' stands for a blue square, ' R' for a red square, and ' ? ' for a blank square.",
    "output": "For each test case, print a line with a string only containing ' B' and ' R' , the colors of the squares after painting, which imperfectness is minimized. If there are multiple solutions, print any of them.",
    "note": "In the first test case, if the squares are painted \" BRRBRBR\" , the imperfectness is 1 ( since squares 2 and 3 have the same color) , which is the minimum possible imperfectness.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1559B"
  },
  {
    "title": "Down Below",
    "url": "https://codeforces.com/problemset/problem/1558/E",
    "history": "In a certain video game, the player controls a hero characterized by a single integer value: power. On the current level, the hero got into a system of n caves numbered from 1 to n , and m tunnels between them. Each tunnel connects two distinct caves. Any two caves are connected with at most one tunnel. Any cave can be reached from any other cave by moving via tunnels. The hero starts the level in cave 1 , and every other cave contains a monster. The hero can move between caves via tunnels. If the hero leaves a cave and enters a tunnel, he must finish his movement and arrive at the opposite end of the tunnel. The hero can use each tunnel to move in both directions. However, the hero can not use the same tunnel twice in a row. Formally, if the hero has just moved from cave i to cave j via a tunnel, he can not head back to cave i immediately after, but he can head to any other cave connected to cave j with a tunnel. It is known that at least two tunnels come out of every cave, thus, the hero will never find himself in a dead end even considering the above requirement. To pass the level, the hero must beat the monsters in all the caves. When the hero enters a cave for the first time, he will have to fight the monster in it. The hero can beat the monster in cave i if and only if the hero' s power is strictly greater than a_ i . In case of beating the monster, the hero' s power increases by b_ i . If the hero can' t beat the monster he' s fighting, the game ends and the player loses. After the hero beats the monster in cave i , all subsequent visits to cave i won' t have any consequences: the cave won' t have any monsters, and the hero' s power won' t change either. Find the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 3 \u2264 n \u2264 1000 ; n \u2264 m \u2264 min( n( n- 1) / 2, 2000) ) \u2014 the number of caves and tunnels. The second line contains n- 1 integers a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 values the hero' s power are compared to while fighting monsters in caves 2, 3, . . . , n . The third line contains n- 1 integers b_ 2, b_ 3, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 increases applied to the hero' s power for beating monsters in caves 2, 3, . . . , n . Each of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) \u2014 the numbers of caves connected with a tunnel. No two caves are connected with more than one tunnel. Any cave can be reached from any other cave by moving via tunnels. At least two tunnels come out of every cave. It is guaranteed that the sum of n over all test cases does not exceed 1000 , and the sum of m over all test cases does not exceed 2000 .",
    "output": "For each test case print a single integer \u2014 the smallest possible power the hero must start the level with to be able to beat all the monsters and pass the level.",
    "note": "In the first test case, the hero can pass the level with initial power 15 as follows: move from cave 1 to cave 2 : since 15 > 11 , the hero beats the monster, and his power increases to 15 + 8 = 23 ; move from cave 2 to cave 3 : since 23 > 22 , the hero beats the monster, and his power increases to 23 + 7 = 30 ; move from cave 3 to cave 4 : since 30 > 13 , the hero beats the monster, and his power increases to 30 + 5 = 35 . In the second test case, the situation is similar except that the power increases for beating monsters in caves 2 and 4 are exchanged. The hero can follow a different route, 1 \u2192 4 \u2192 3 \u2192 2 , and pass the level with initial power 15 . In the third test case, the hero can pass the level with initial power 19 as follows: move from cave 1 to cave 2 : since 19 > 10 , the hero beats the monster, and his power increases to 19 + 7 = 26 ; move from cave 2 to cave 4 : since 26 > 20 , the hero beats the monster, and his power increases to 26 + 10 = 36 ; move from cave 4 to cave 5 : since 36 > 30 , the hero beats the monster, and his power increases to 36 + 5 = 41 ; move from cave 5 to cave 2 : there is no monster in this cave anymore, nothing happens; move from cave 2 to cave 3 : since 41 > 40 , the hero beats the monster, and his power increases to 41 + 2 = 43 .",
    "topics": [
      "binary search",
      "dfs and similar",
      "graphs",
      "greedy",
      "meet-in-the-middle",
      "shortest paths"
    ],
    "id": "1558E"
  },
  {
    "title": "Bottom-Tier Reversals",
    "url": "https://codeforces.com/problemset/problem/1558/C",
    "history": "You have a permutation: an array a = [ a_ 1, a_ 2, . . . , a_ n] of distinct integers from 1 to n . The length of the permutation n is odd. You need to sort the permutation in increasing order. In one step, you can choose any prefix of the permutation with an odd length and reverse it. Formally, if a = [ a_ 1, a_ 2, . . . , a_ n] , you can choose any odd integer p between 1 and n , inclusive, and set a to [ a_ p, a_ p- 1, . . . , a_ 1, a_ p+ 1, a_ p+ 2, . . . , a_ n] . Find a way to sort a using no more than 5n/ 2 reversals of the above kind, or determine that such a way doesn' t exist. The number of reversals doesn' t have to be minimized.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 3 \u2264 n \u2264 2021 ; n is odd) \u2014 the length of the permutation. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the permutation itself. It is guaranteed that the sum of n over all test cases does not exceed 2021 .",
    "output": "For each test case, if it' s impossible to sort the given permutation in at most 5n/ 2 reversals, print a single integer - 1 . Otherwise, print an integer m ( 0 \u2264 m \u22645n/ 2 ) , denoting the number of reversals in your sequence of steps, followed by m integers p_ i ( 1 \u2264 p_ i \u2264 n ; p_ i is odd) , denoting the lengths of the prefixes of a to be reversed, in chronological order. Note that m doesn' t have to be minimized. If there are multiple answers, print any.",
    "note": "In the first test case, the permutation is already sorted. Any even number of reversals of the length 3 prefix doesn' t change that fact. In the second test case, after reversing the prefix of length 3 the permutation will change to [ 5, 4, 3, 2, 1] , and then after reversing the prefix of length 5 the permutation will change to [ 1, 2, 3, 4, 5] . In the third test case, it' s impossible to sort the permutation.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1558C"
  },
  {
    "title": "Ezzat and Grid",
    "url": "https://codeforces.com/problemset/problem/1557/D",
    "history": "Moamen was drawing a grid of n rows and 10^ 9 columns containing only digits 0 and 1 . Ezzat noticed what Moamen was drawing and became interested in the minimum number of rows one needs to remove to make the grid beautiful. A grid is beautiful if and only if for every two consecutive rows there is at least one column containing 1 in these two rows. Ezzat will give you the number of rows n , and m segments of the grid that contain digits 1 . Every segment is represented with three integers i , l , and r , where i represents the row number, and l and r represent the first and the last column of the segment in that row. For example, if n = 3 , m = 6 , and the segments are ( 1, 1, 1) , ( 1, 7, 8) , ( 2, 7, 7) , ( 2, 15, 15) , ( 3, 1, 1) , ( 3, 15, 15) , then the grid is: Your task is to tell Ezzat the minimum number of rows that should be removed to make the grid beautiful.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3\u00b710^ 5 ) . Each of the next m lines contains three integers i , l , and r ( 1 \u2264 i \u2264 n , 1 \u2264 l \u2264 r \u2264 10^ 9 ) . Each of these m lines means that row number i contains digits 1 in columns from l to r , inclusive. Note that the segments may overlap.",
    "output": "In the first line, print a single integer k \u2014 the minimum number of rows that should be removed. In the second line print k distinct integers r_ 1, r_ 2, . . . , r_ k , representing the rows that should be removed ( 1 \u2264 r_ i \u2264 n ) , in any order. If there are multiple answers, print any.",
    "note": "In the first test case, the grid is the one explained in the problem statement. The grid has the following properties: The 1 - st row and the 2 - nd row have a common 1 in the column 7 . The 2 - nd row and the 3 - rd row have a common 1 in the column 15 . As a result, this grid is beautiful and we do not need to remove any row. In the second test case, the given grid is as follows:",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1557D"
  },
  {
    "title": "Moamen and k-subarrays",
    "url": "https://codeforces.com/problemset/problem/1557/B",
    "history": "Moamen has an array of n distinct integers. He wants to sort that array in non- decreasing order by doing the following operations in order exactly once: Split the array into exactly k non- empty subarrays such that each element belongs to exactly one subarray. Reorder these subarrays arbitrary. Merge the subarrays in their new order. A sequence a is a subarray of a sequence b if a can be obtained from b by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end. Can you tell Moamen if there is a way to sort the array in non- decreasing order using the operations written above?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 | a_ i| \u2264 10^ 9 ) . It is guaranteed that all numbers are distinct. It is guaranteed that the sum of n over all test cases does not exceed 3\u00b710^ 5 .",
    "output": "For each test case, you should output a single string. If Moamen can sort the array in non- decreasing order, output \" YES\" ( without quotes) . Otherwise, output \" NO\" ( without quotes) . You can print each letter of \" YES\" and \" NO\" in any case ( upper or lower) .",
    "note": "In the first test case, a = [ 6, 3, 4, 2, 1] , and k = 4 , so we can do the operations as follows: Split a into { [ 6] , [ 3, 4] , [ 2] , [ 1] } . Reorder them: { [ 1] , [ 2] , [ 3, 4] , [ 6] } . Merge them: [ 1, 2, 3, 4, 6] , so now the array is sorted. In the second test case, there is no way to sort the array by splitting it into only 2 subarrays. As an example, if we split it into { [ 1, - 4] , [ 0, - 2] } , we can reorder them into { [ 1, - 4] , [ 0, - 2] } or { [ 0, - 2] , [ 1, - 4] } . However, after merging the subarrays, it is impossible to get a sorted array.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1557B"
  },
  {
    "title": "DIY Tree",
    "url": "https://codeforces.com/problemset/problem/1556/H",
    "history": "William really likes puzzle kits. For one of his birthdays, his friends gifted him a complete undirected edge- weighted graph consisting of n vertices. He wants to build a spanning tree of this graph, such that for the first k vertices the following condition is satisfied: the degree of a vertex with index i does not exceed d_ i . Vertices from k + 1 to n may have any degree. William wants you to find the minimum weight of a spanning tree that satisfies all the conditions. A spanning tree is a subset of edges of a graph that forms a tree on all n vertices of the graph. The weight of a spanning tree is defined as the sum of weights of all the edges included in a spanning tree.",
    "input": "The first line of input contains two integers n , k ( 2 \u2264 n \u2264 50 , 1 \u2264 k \u2264 min( n - 1, 5) ) . The second line contains k integers d_ 1, d_ 2, . . . , d_ k ( 1 \u2264 d_ i \u2264 n ) . The i - th of the next n - 1 lines contains n - i integers w_ i, i+ 1, w_ i, i+ 2, . . . , w_ i, n ( 1 \u2264 w_ i, j\u2264 100 ) : weights of edges ( i, i+ 1) , ( i, i+ 2) , . . . , ( i, n) .",
    "output": "Print one integer: the minimum weight of a spanning tree under given degree constraints for the first k vertices.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "math",
      "probabilities"
    ],
    "id": "1556H"
  },
  {
    "title": "Equilibrium",
    "url": "https://codeforces.com/problemset/problem/1556/E",
    "history": "William has two arrays a and b , each consisting of n items. For some segments l. . r of these arrays William wants to know if it is possible to equalize the values of items in these segments using a balancing operation. Formally, the values are equalized if for each i from l to r holds a_ i = b_ i . To perform a balancing operation an even number of indices must be selected, such that l \u2264 pos_ 1 < pos_ 2 < . . . < pos_ k \u2264 r . Next the items of array a at positions pos_ 1, pos_ 3, pos_ 5, . . . get incremented by one and the items of array b at positions pos_ 2, pos_ 4, pos_ 6, . . . get incremented by one. William wants to find out if it is possible to equalize the values of elements in two arrays for each segment using some number of balancing operations, and what is the minimal number of operations required for that. Note that for each segment the operations are performed independently.",
    "input": "The first line contains a two integers n and q ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 q \u2264 10^ 5 ) , the size of arrays a and b and the number of segments. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 9) . Each of the next q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i < r_ i \u2264 n) , the edges of segments.",
    "output": "For each segment output a single number \u2014 the minimal number of balancing operations needed or \" - 1\" if it is impossible to equalize segments of arrays.",
    "note": "For the first segment from 2 to 6 you can do one operation with pos = [ 2, 3, 5, 6] , after this operation the arrays will be: a = [ 0, 2, 2, 9, 4, 2, 7, 5] , b = [ 2, 2, 2, 9, 4, 2, 5, 8] . Arrays are equal on a segment from 2 to 6 after this operation. For the second segment from 1 to 7 you can do three following operations: pos = [ 1, 3, 5, 6] pos = [ 1, 7] pos = [ 2, 7] After these operations, the arrays will be: a = [ 2, 2, 2, 9, 4, 2, 7, 5] , b = [ 2, 2, 2, 9, 4, 2, 7, 8] . Arrays are equal on a segment from 1 to 7 after these operations. For the third segment from 2 to 4 you can do one operation with pos = [ 2, 3] , after the operation arrays will be: a = [ 0, 2, 2, 9, 3, 2, 7, 5] , b = [ 2, 2, 2, 9, 4, 1, 5, 8] . Arrays are equal on a segment from 2 to 4 after this operation. It is impossible to equalize the fourth and the fifth segment.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1556E"
  },
  {
    "title": "Diane",
    "url": "https://codeforces.com/problemset/problem/1554/D",
    "history": "You are given an integer n . Find any string s of length n consisting only of English lowercase letters such that each non- empty substring of s occurs in s an odd number of times. If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints. A string a is a substring of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters from the beginning and several ( possibly, zero or all) characters from the end.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line containing the string s . If there are multiple such strings, output any. It can be shown that such string always exists under the given constraints.",
    "note": "In the first test case, each substring of \" abc\" occurs exactly once. In the third test case, each substring of \" bbcaabbba\" occurs an odd number of times. In particular, \" b\" occurs 5 times, \" a\" and \" bb\" occur 3 times each, and each of the remaining substrings occurs exactly once.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1554D"
  },
  {
    "title": "Mikasa",
    "url": "https://codeforces.com/problemset/problem/1554/C",
    "history": "You are given two integers n and m . Find the MEX of the sequence n \u2295 0, n \u2295 1, . . . , n \u2295 m . Here, \u2295 is the bitwise XOR operator. MEX of the sequence of non- negative integers is the smallest non- negative integer that doesn' t appear in this sequence. For example, MEX( 0, 1, 2, 4) = 3 , and MEX( 1, 2021) = 0 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 30 000 ) \u2014 the number of test cases. The first and only line of each test case contains two integers n and m ( 0 \u2264 n, m \u2264 10^ 9 ) .",
    "output": "For each test case, print a single integer \u2014 the answer to the problem.",
    "note": "In the first test case, the sequence is 3 \u2295 0, 3 \u2295 1, 3 \u2295 2, 3 \u2295 3, 3 \u2295 4, 3 \u2295 5 , or 3, 2, 1, 0, 7, 6 . The smallest non- negative integer which isn' t present in the sequence i. e. the MEX of the sequence is 4 . In the second test case, the sequence is 4 \u2295 0, 4 \u2295 1, 4 \u2295 2, 4 \u2295 3, 4 \u2295 4, 4 \u2295 5, 4 \u2295 6 , or 4, 5, 6, 7, 0, 1, 2 . The smallest non- negative integer which isn' t present in the sequence i. e. the MEX of the sequence is 3 . In the third test case, the sequence is 3 \u2295 0, 3 \u2295 1, 3 \u2295 2 , or 3, 2, 1 . The smallest non- negative integer which isn' t present in the sequence i. e. the MEX of the sequence is 0 .",
    "topics": [
      "binary search",
      "bitmasks",
      "greedy",
      "implementation"
    ],
    "id": "1554C"
  },
  {
    "title": "Cobb",
    "url": "https://codeforces.com/problemset/problem/1554/B",
    "history": "You are given n integers a_ 1, a_ 2, . . . , a_ n and an integer k . Find the maximum value of i \u00b7 j - k \u00b7 ( a_ i | a_ j) over all pairs ( i, j) of integers with 1 \u2264 i < j \u2264 n . Here, | is the bitwise OR operator.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The first line of each test case contains two integers n ( 2 \u2264 n \u2264 10^ 5 ) and k ( 1 \u2264 k \u2264min( n, 100) ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum possible value of i \u00b7 j - k \u00b7 ( a_ i | a_ j) .",
    "note": "Let f( i, j) = i \u00b7 j - k \u00b7 ( a_ i | a_ j) . In the first test case, f( 1, 2) = 1 \u00b7 2 - k \u00b7 ( a_ 1 | a_ 2) = 2 - 3 \u00b7 ( 1 | 1) = - 1 . f( 1, 3) = 1 \u00b7 3 - k \u00b7 ( a_ 1 | a_ 3) = 3 - 3 \u00b7 ( 1 | 3) = - 6 . f( 2, 3) = 2 \u00b7 3 - k \u00b7 ( a_ 2 | a_ 3) = 6 - 3 \u00b7 ( 1 | 3) = - 3 . So the maximum is f( 1, 2) = - 1 . In the fourth test case, the maximum is f( 3, 4) = 12 .",
    "topics": [
      "bitmasks",
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1554B"
  },
  {
    "title": "Cherry",
    "url": "https://codeforces.com/problemset/problem/1554/A",
    "history": "You are given n integers a_ 1, a_ 2, . . . , a_ n . Find the maximum value of max( a_ l, a_ l + 1, . . . , a_ r) \u00b7 min( a_ l, a_ l + 1, . . . , a_ r) over all pairs ( l, r) of integers for which 1 \u2264 l < r \u2264 n .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum possible value of the product from the statement.",
    "note": "Let f( l, r) = max( a_ l, a_ l + 1, . . . , a_ r) \u00b7 min( a_ l, a_ l + 1, . . . , a_ r) . In the first test case, f( 1, 2) = max( a_ 1, a_ 2) \u00b7 min( a_ 1, a_ 2) = max( 2, 4) \u00b7 min( 2, 4) = 4 \u00b7 2 = 8 . f( 1, 3) = max( a_ 1, a_ 2, a_ 3) \u00b7 min( a_ 1, a_ 2, a_ 3) = max( 2, 4, 3) \u00b7 min( 2, 4, 3) = 4 \u00b7 2 = 8 . f( 2, 3) = max( a_ 2, a_ 3) \u00b7 min( a_ 2, a_ 3) = max( 4, 3) \u00b7 min( 4, 3) = 4 \u00b7 3 = 12 . So the maximum is f( 2, 3) = 12 . In the second test case, the maximum is f( 1, 2) = f( 1, 3) = f( 2, 3) = 6 .",
    "topics": [
      "greedy"
    ],
    "id": "1554A"
  },
  {
    "title": "Backspace",
    "url": "https://codeforces.com/problemset/problem/1553/D",
    "history": "You are given two strings s and t , both consisting of lowercase English letters. You are going to type the string s character by character, from the first character to the last one. When typing a character, instead of pressing the button corresponding to it, you can press the \" Backspace\" button. It deletes the last character you have typed among those that aren' t deleted yet ( or does nothing if there are no characters in the current string) . For example, if s is \" abcbd\" and you press Backspace instead of typing the first and the fourth characters, you will get the string \" bd\" ( the first press of Backspace deletes no character, and the second press deletes the character ' c' ) . Another example, if s is \" abcaa\" and you press Backspace instead of the last two letters, then the resulting text is \" a\" . Your task is to determine whether you can obtain the string t , if you type the string s and press \" Backspace\" instead of typing several ( maybe zero) characters of s .",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains the string s ( 1 \u2264 | s| \u2264 10^ 5 ) . Each character of s is a lowercase English letter. The second line of each test case contains the string t ( 1 \u2264 | t| \u2264 10^ 5 ) . Each character of t is a lowercase English letter. It is guaranteed that the total number of characters in the strings over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" if you can obtain the string t by typing the string s and replacing some characters with presses of \" Backspace\" button, or \" NO\" if you cannot. You may print each letter in any case ( YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer) .",
    "note": "Consider the example test from the statement. In order to obtain \" ba\" from \" ababa\" , you may press Backspace instead of typing the first and the fourth characters. There' s no way to obtain \" bb\" while typing \" ababa\" . There' s no way to obtain \" aaaa\" while typing \" aaa\" . In order to obtain \" ababa\" while typing \" aababa\" , you have to press Backspace instead of typing the first character, then type all the remaining characters.",
    "topics": [
      "dp",
      "greedy",
      "strings",
      "two pointers"
    ],
    "id": "1553D"
  },
  {
    "title": "Penalty",
    "url": "https://codeforces.com/problemset/problem/1553/C",
    "history": "Consider a simplified penalty phase at the end of a football match. A penalty phase consists of at most 10 kicks, the first team takes the first kick, the second team takes the second kick, then the first team takes the third kick, and so on. The team that scores more goals wins; if both teams score the same number of goals, the game results in a tie ( note that it goes against the usual football rules) . The penalty phase is stopped if one team has scored more goals than the other team could reach with all of its remaining kicks. For example, if after the 7 - th kick the first team has scored 1 goal, and the second team has scored 3 goals, the penalty phase ends \u2014 the first team cannot reach 3 goals. You know which player will be taking each kick, so you have your predictions for each of the 10 kicks. These predictions are represented by a string s consisting of 10 characters. Each character can either be 1, 0, or ? . This string represents your predictions in the following way: if s_ i is 1, then the i - th kick will definitely score a goal; if s_ i is 0, then the i - th kick definitely won' t score a goal; if s_ i is ? , then the i - th kick could go either way. Based on your predictions, you have to calculate the minimum possible number of kicks there can be in the penalty phase ( that means, the earliest moment when the penalty phase is stopped, considering all possible ways it could go) . Note that the referee doesn' t take into account any predictions when deciding to stop the penalty phase \u2014 you may know that some kick will/ won' t be scored, but the referee doesn' t.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1 000 ) \u2014 the number of test cases. Each test case is represented by one line containing the string s , consisting of exactly 10 characters. Each character is either 1, 0, or ? .",
    "output": "For each test case, print one integer \u2014 the minimum possible number of kicks in the penalty phase.",
    "note": "Consider the example test: In the first test case, consider the situation when the 1 - st, 5 - th and 7 - th kicks score goals, and kicks 2 , 3 , 4 and 6 are unsuccessful. Then the current number of goals for the first team is 3 , for the second team is 0 , and the referee sees that the second team can score at most 2 goals in the remaining kicks. So the penalty phase can be stopped after the 7 - th kick. In the second test case, the penalty phase won' t be stopped until all 10 kicks are finished. In the third test case, if the first team doesn' t score any of its three first kicks and the second team scores all of its three first kicks, then after the 6 - th kick, the first team has scored 0 goals and the second team has scored 3 goals, and the referee sees that the first team can score at most 2 goals in the remaining kicks. So, the penalty phase can be stopped after the 6 - th kick. In the fourth test case, even though you can predict the whole penalty phase, the referee understands that the phase should be ended only after the 9 - th kick.",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1553C"
  },
  {
    "title": "Colors and Intervals",
    "url": "https://codeforces.com/problemset/problem/1552/E",
    "history": "The numbers 1, 2, . . . , n \u00b7 k are colored with n colors. These colors are indexed by 1, 2, . . . , n . For each 1 \u2264 i \u2264 n , there are exactly k numbers colored with color i . Let [ a, b] denote the interval of integers between a and b inclusive, that is, the set { a, a + 1, . . . , b} . You must choose n intervals [ a_ 1, b_ 1] , [ a_ 2, b_ 2] , . . . , [ a_ n, b_ n] such that: for each 1 \u2264 i \u2264 n , it holds 1 \u2264 a_ i < b_ i \u2264 n \u00b7 k ; for each 1 \u2264 i \u2264 n , the numbers a_ i and b_ i are colored with color i ; each number 1 \u2264 x \u2264 n \u00b7 k belongs to at most \u2308n/ k - 1\u2309 intervals. One can show that such a family of intervals always exists under the given constraints.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 100 , 2 \u2264 k \u2264 100 ) \u2014 the number of colors and the number of occurrences of each color. The second line contains n \u00b7 k integers c_ 1, c_ 2, . . . , c_ nk ( 1 \u2264 c_ j \u2264 n ) , where c_ j is the color of number j . It is guaranteed that, for each 1 \u2264 i \u2264 n , it holds c_ j = i for exactly k distinct indices j .",
    "output": "Output n lines. The i - th line should contain the two integers a_ i and b_ i . If there are multiple valid choices of the intervals, output any.",
    "note": "In the first sample, each number can be contained in at most \u23084/ 3 - 1\u2309 = 2 intervals. The output is described by the following picture: In the second sample, the only interval to be chosen is forced to be [ 1, 2] , and each number is indeed contained in at most \u23081/ 2 - 1\u2309 = 1 interval. In the third sample, each number can be contained in at most \u23083/ 3 - 1\u2309 = 2 intervals. The output is described by the following picture:",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1552E"
  },
  {
    "title": "Maximize the Intersections",
    "url": "https://codeforces.com/problemset/problem/1552/C",
    "history": "On a circle lie 2n distinct points, with the following property: however you choose 3 chords that connect 3 disjoint pairs of points, no point strictly inside the circle belongs to all 3 chords. The points are numbered 1, 2, . . . , 2n in clockwise order. Initially, k chords connect k pairs of points, in such a way that all the 2k endpoints of these chords are distinct. You want to draw n - k additional chords that connect the remaining 2( n - k) points ( each point must be an endpoint of exactly one chord) . In the end, let x be the total number of intersections among all n chords. Compute the maximum value that x can attain if you choose the n - k chords optimally. Note that the exact position of the 2n points is not relevant, as long as the property stated in the first paragraph holds.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 100 , 0 \u2264 k \u2264 n ) \u2014 half the number of points and the number of chords initially drawn. Then k lines follow. The i - th of them contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 2n , x_ i y_ i ) \u2014 the endpoints of the i - th chord. It is guaranteed that the 2k numbers x_ 1, y_ 1, x_ 2, y_ 2, . . . , x_ k, y_ k are all distinct.",
    "output": "For each test case, output the maximum number of intersections that can be obtained by drawing n - k additional chords.",
    "note": "In the first test case, there are three ways to draw the 2 additional chords, shown below ( black chords are the ones initially drawn, while red chords are the new ones) : We see that the third way gives the maximum number of intersections, namely 4 . In the second test case, there are no more chords to draw. Of course, with only one chord present there are no intersections. In the third test case, we can make at most one intersection by drawing chords 1- 3 and 2- 4 , as shown below:",
    "topics": [
      "combinatorics",
      "constructive algorithms",
      "geometry",
      "greedy",
      "sortings"
    ],
    "id": "1552C"
  },
  {
    "title": "Running for Gold",
    "url": "https://codeforces.com/problemset/problem/1552/B",
    "history": "The Olympic Games have just started and Federico is eager to watch the marathon race. There will be n athletes, numbered from 1 to n , competing in the marathon, and all of them have taken part in 5 important marathons, numbered from 1 to 5 , in the past. For each 1\u2264 i\u2264 n and 1\u2264 j\u2264 5 , Federico remembers that athlete i ranked r_ i, j - th in marathon j ( e. g. , r_ 2, 4= 3 means that athlete 2 was third in marathon 4 ) . Federico considers athlete x superior to athlete y if athlete x ranked better than athlete y in at least 3 past marathons, i. e. , r_ x, j< r_ y, j for at least 3 distinct values of j . Federico believes that an athlete is likely to get the gold medal at the Olympics if he is superior to all other athletes. Find any athlete who is likely to get the gold medal ( that is, an athlete who is superior to all other athletes) , or determine that there is no such athlete.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 50 000 ) \u2014 the number of athletes. Then n lines follow, each describing the ranking positions of one athlete. The i - th of these lines contains the 5 integers r_ i, 1, r_ i, 2, r_ i, 3, r_ i, 4, r_ i, 5 ( 1\u2264 r_ i, j\u2264 50 000 ) \u2014 the ranking positions of athlete i in the past 5 marathons. It is guaranteed that, in each of the 5 past marathons, the n athletes have distinct ranking positions, i. e. , for each 1\u2264 j\u2264 5 , the n values r_ 1, j, r_ 2, j, . . . , r_ n, j are distinct. It is guaranteed that the sum of n over all test cases does not exceed 50 000 .",
    "output": "For each test case, print a single integer \u2014 the number of an athlete who is likely to get the gold medal ( that is, an athlete who is superior to all other athletes) . If there are no such athletes, print - 1 . If there is more than such one athlete, print any of them.",
    "note": "Explanation of the first test case: There is only one athlete, therefore he is superior to everyone else ( since there is no one else) , and thus he is likely to get the gold medal. Explanation of the second test case: There are n= 3 athletes. Athlete 1 is superior to athlete 2 . Indeed athlete 1 ranks better than athlete 2 in the marathons 1 , 2 and 3 . Athlete 2 is superior to athlete 3 . Indeed athlete 2 ranks better than athlete 3 in the marathons 1 , 2 , 4 and 5 . Athlete 3 is superior to athlete 1 . Indeed athlete 3 ranks better than athlete 1 in the marathons 3 , 4 and 5 . Explanation of the third test case: There are n= 3 athletes. Athlete 1 is superior to athletes 2 and 3 . Since he is superior to all other athletes, he is likely to get the gold medal. Athlete 2 is superior to athlete 3 . Athlete 3 is not superior to any other athlete. Explanation of the fourth test case: There are n= 6 athletes. Athlete 1 is superior to athletes 3 , 4 , 6 . Athlete 2 is superior to athletes 1 , 4 , 6 . Athlete 3 is superior to athletes 2 , 4 , 6 . Athlete 4 is not superior to any other athlete. Athlete 5 is superior to athletes 1 , 2 , 3 , 4 , 6 . Since he is superior to all other athletes, he is likely to get the gold medal. Athlete 6 is only superior to athlete 4 .",
    "topics": [
      "combinatorics",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1552B"
  },
  {
    "title": "Interesting Story",
    "url": "https://codeforces.com/problemset/problem/1551/C",
    "history": "Stephen Queen wants to write a story. He is a very unusual writer, he uses only letters ' a' , ' b' , ' c' , ' d' and ' e' ! To compose a story, Stephen wrote out n words consisting of the first 5 lowercase letters of the Latin alphabet. He wants to select the maximum number of words to make an interesting story. Let a story be a sequence of words that are not necessarily different. A story is called interesting if there exists a letter which occurs among all words of the story more times than all other letters together. For example, the story consisting of three words \" bac\" , \" aaada\" , \" e\" is interesting ( the letter ' a' occurs 5 times, all other letters occur 4 times in total) . But the story consisting of two words \" aba\" , \" abcde\" is not ( no such letter that it occurs more than all other letters in total) . You are given a sequence of n words consisting of letters ' a' , ' b' , ' c' , ' d' and ' e' . Your task is to choose the maximum number of them to make an interesting story. If there' s no way to make a non- empty story, output 0 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of the words in the sequence. Then n lines follow, each of them contains a word \u2014 a non- empty string consisting of lowercase letters of the Latin alphabet. The words in the sequence may be non- distinct ( i. e. duplicates are allowed) . Only the letters ' a' , ' b' , ' c' , ' d' and ' e' may occur in the words. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 ; the sum of the lengths of all words over all test cases doesn' t exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case, output the maximum number of words that compose an interesting story. Print 0 if there' s no way to make a non- empty interesting story.",
    "note": "In the first test case of the example, all 3 words can be used to make an interesting story. The interesting story is \" bac aaada e\" . In the second test case of the example, the 1 - st and the 3 - rd words can be used to make an interesting story. The interesting story is \" aba aba\" . Stephen can' t use all three words at the same time. In the third test case of the example, Stephen can' t make a non- empty interesting story. So the answer is 0 . In the fourth test case of the example, Stephen can use the 3 - rd and the 4 - th words to make an interesting story. The interesting story is \" c bc\" .",
    "topics": [
      "greedy",
      "sortings",
      "strings"
    ],
    "id": "1551C"
  },
  {
    "title": "Wonderful Coloring - 2",
    "url": "https://codeforces.com/problemset/problem/1551/B2",
    "history": "This problem is an extension of the problem \" Wonderful Coloring - 1\" . It has quite many differences, so you should read this statement completely. Recently, Paul and Mary have found a new favorite sequence of integers a_ 1, a_ 2, . . . , a_ n . They want to paint it using pieces of chalk of k colors. The coloring of a sequence is called wonderful if the following conditions are met: each element of the sequence is either painted in one of k colors or isn' t painted; each two elements which are painted in the same color are different ( i. e. there' s no two equal values painted in the same color) ; let' s calculate for each of k colors the number of elements painted in the color \u2014 all calculated numbers must be equal; the total number of painted elements of the sequence is the maximum among all colorings of the sequence which meet the first three conditions. E. g. consider a sequence a= [ 3, 1, 1, 1, 1, 10, 3, 10, 10, 2] and k= 3 . One of the wonderful colorings of the sequence is shown in the figure. The example of a wonderful coloring of the sequence a= [ 3, 1, 1, 1, 1, 10, 3, 10, 10, 2] and k= 3 . Note that one of the elements isn' t painted. Help Paul and Mary to find a wonderful coloring of a given sequence a .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of two lines. The first one contains two integers n and k ( 1 \u2264 n \u2264 2\u00b710^ 5 , 1 \u2264 k \u2264 n ) \u2014 the length of a given sequence and the number of colors, respectively. The second one contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Output t lines, each of them must contain a description of a wonderful coloring for the corresponding test case. Each wonderful coloring must be printed as a sequence of n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 k ) separated by spaces where c_ i= 0 , if i - th element isn' t painted; c_ i> 0 , if i - th element is painted in the c_ i - th color. Remember that you need to maximize the total count of painted elements for the wonderful coloring. If there are multiple solutions, print any one.",
    "note": "In the first test case, the answer is shown in the figure in the statement. The red color has number 1 , the blue color \u2014 2 , the green \u2014 3 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1551B2"
  },
  {
    "title": "Wonderful Coloring - 1",
    "url": "https://codeforces.com/problemset/problem/1551/B1",
    "history": "This is a simplified version of the problem B2. Perhaps you should read the problem B2 before you start solving B1. Paul and Mary have a favorite string s which consists of lowercase letters of the Latin alphabet. They want to paint it using pieces of chalk of two colors: red and green. Let' s call a coloring of a string wonderful if the following conditions are met: each letter of the string is either painted in exactly one color ( red or green) or isn' t painted; each two letters which are painted in the same color are different; the number of letters painted in red is equal to the number of letters painted in green; the number of painted letters of this coloring is maximum among all colorings of the string which meet the first three conditions. E. g. consider a string s equal to \" kzaaa\" . One of the wonderful colorings of the string is shown in the figure. The example of a wonderful coloring of the string \" kzaaa\" . Paul and Mary want to learn by themselves how to find a wonderful coloring of the string. But they are very young, so they need a hint. Help them find k \u2014 the number of red ( or green, these numbers are equal) letters in a wonderful coloring.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of one non- empty string s which consists of lowercase letters of the Latin alphabet. The number of characters in the string doesn' t exceed 50 .",
    "output": "For each test case, output a separate line containing one non- negative integer k \u2014 the number of letters which will be painted in red in a wonderful coloring.",
    "note": "The first test case contains the string from the statement. One of the wonderful colorings is shown in the figure. There' s no wonderful coloring containing 3 or more red letters because the total number of painted symbols will exceed the string' s length. The string from the second test case can be painted as follows. Let' s paint the first occurrence of each of the letters \" c\" , \" o\" , \" e\" in red and the second ones in green. Let' s paint the letters \" d\" , \" f\" in red and \" r\" , \" s\" in green. So every letter will be painted in red or green, hence the answer better than 5 doesn' t exist. The third test case contains the string of distinct letters, so you can paint any set of characters in red, as long as the size of this set doesn' t exceed half of the size of the string and is the maximum possible. The fourth test case contains a single letter which cannot be painted in red because there will be no letter able to be painted in green. The fifth test case contains a string of identical letters, so there' s no way to paint more than one letter in red.",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1551B1"
  },
  {
    "title": "Polycarp and Coins",
    "url": "https://codeforces.com/problemset/problem/1551/A",
    "history": "Polycarp must pay exactly n burles at the checkout. He has coins of two nominal values: 1 burle and 2 burles. Polycarp likes both kinds of coins equally. So he doesn' t want to pay with more coins of one type than with the other. Thus, Polycarp wants to minimize the difference between the count of coins of 1 burle and 2 burles being used. Help him by determining two non- negative integer values c_ 1 and c_ 2 which are the number of coins of 1 burle and 2 burles, respectively, so that the total value of that number of coins is exactly n ( i. e. c_ 1 + 2 \u00b7 c_ 2 = n ) , and the absolute value of the difference between c_ 1 and c_ 2 is as little as possible ( i. e. you must minimize | c_ 1- c_ 2| ) .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of one line. This line contains one integer n ( 1 \u2264 n \u2264 10^ 9 ) \u2014 the number of burles to be paid by Polycarp.",
    "output": "For each test case, output a separate line containing two integers c_ 1 and c_ 2 ( c_ 1, c_ 2 \u2265 0 ) separated by a space where c_ 1 is the number of coins of 1 burle and c_ 2 is the number of coins of 2 burles. If there are multiple optimal solutions, print any one.",
    "note": "The answer for the first test case is \" 334 333\" . The sum of the nominal values of all coins is 334 \u00b7 1 + 333 \u00b7 2 = 1000 , whereas | 334 - 333| = 1 . One can' t get the better value because if | c_ 1 - c_ 2| = 0 , then c_ 1 = c_ 2 and c_ 1 \u00b7 1 + c_ 1 \u00b7 2 = 1000 , but then the value of c_ 1 isn' t an integer. The answer for the second test case is \" 10 10\" . The sum of the nominal values is 10 \u00b7 1 + 10 \u00b7 2 = 30 and | 10 - 10| = 0 , whereas there' s no number having an absolute value less than 0 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1551A"
  },
  {
    "title": "Manhattan Subarrays",
    "url": "https://codeforces.com/problemset/problem/1550/C",
    "history": "Suppose you have two points p = ( x_ p, y_ p) and q = ( x_ q, y_ q) . Let' s denote the Manhattan distance between them as d( p, q) = | x_ p - x_ q| + | y_ p - y_ q| . Let' s say that three points p , q , r form a bad triple if d( p, r) = d( p, q) + d( q, r) . Let' s say that an array b_ 1, b_ 2, . . . , b_ m is good if it is impossible to choose three distinct indices i , j , k such that the points ( b_ i, i) , ( b_ j, j) and ( b_ k, k) form a bad triple. You are given an array a_ 1, a_ 2, . . . , a_ n . Calculate the number of good subarrays of a . A subarray of the array a is the array a_ l, a_ l + 1, . . . , a_ r for some 1 \u2264 l \u2264 r \u2264 n . Note that, according to the definition, subarrays of length 1 and 2 are good.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It' s guaranteed that the sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of good subarrays of array a .",
    "note": "In the first test case, it can be proven that any subarray of a is good. For example, subarray [ a_ 2, a_ 3, a_ 4] is good since it contains only three elements and: d( ( a_ 2, 2) , ( a_ 4, 4) ) = | 4 - 3| + | 2 - 4| = 3 < d( ( a_ 2, 2) , ( a_ 3, 3) ) + d( ( a_ 3, 3) , ( a_ 4, 4) ) = 3 + 1 + 2 + 1 = 7 ; d( ( a_ 2, 2) , ( a_ 3, 3) ) < d( ( a_ 2, 2) , ( a_ 4, 4) ) + d( ( a_ 4, 4) , ( a_ 3, 3) ) ; d( ( a_ 3, 3) , ( a_ 4, 4) ) < d( ( a_ 3, 3) , ( a_ 2, 2) ) + d( ( a_ 2, 2) , ( a_ 4, 4) ) ; In the second test case, for example, subarray [ a_ 1, a_ 2, a_ 3, a_ 4] is not good, since it contains a bad triple ( a_ 1, 1) , ( a_ 2, 2) , ( a_ 4, 4) : d( ( a_ 1, 1) , ( a_ 4, 4) ) = | 6 - 9| + | 1 - 4| = 6 ; d( ( a_ 1, 1) , ( a_ 2, 2) ) = | 6 - 9| + | 1 - 2| = 4 ; d( ( a_ 2, 2) , ( a_ 4, 4) ) = | 9 - 9| + | 2 - 4| = 2 ; So, d( ( a_ 1, 1) , ( a_ 4, 4) ) = d( ( a_ 1, 1) , ( a_ 2, 2) ) + d( ( a_ 2, 2) , ( a_ 4, 4) ) .",
    "topics": [
      "brute force",
      "geometry",
      "greedy",
      "implementation"
    ],
    "id": "1550C"
  },
  {
    "title": "Maximum Cost Deletion",
    "url": "https://codeforces.com/problemset/problem/1550/B",
    "history": "You are given a string s of length n consisting only of the characters 0 and 1. You perform the following operation until the string becomes empty: choose some consecutive substring of equal characters, erase it from the string and glue the remaining two parts together ( any of them can be empty) in the same order. For example, if you erase the substring 111 from the string 111110, you will get the string 110. When you delete a substring of length l , you get a \u00b7 l + b points. Your task is to calculate the maximum number of points that you can score in total, if you have to make the given string empty.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of testcases. The first line of each testcase contains three integers n , a and b ( 1 \u2264 n \u2264 100; - 100 \u2264 a, b \u2264 100 ) \u2014 the length of the string s and the parameters a and b . The second line contains the string s . The string s consists only of the characters 0 and 1.",
    "output": "For each testcase, print a single integer \u2014 the maximum number of points that you can score.",
    "note": "In the first example, it is enough to delete the entire string, then we will get 2 \u00b7 3 + 0 = 6 points. In the second example, if we delete characters one by one, then for each deleted character we will get ( - 2) \u00b7 1 + 5 = 3 points, i. e. 15 points in total. In the third example, we can delete the substring 00 from the string 100111, we get 1 \u00b7 2 + ( - 4) = - 2 points, and the string will be equal to 1111, removing it entirely we get 1 \u00b7 4 + ( - 4) = 0 points. In total, we got - 2 points for 2 operations.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1550B"
  },
  {
    "title": "Find The Array",
    "url": "https://codeforces.com/problemset/problem/1550/A",
    "history": "Let' s call an array a consisting of n positive ( greater than 0 ) integers beautiful if the following condition is held for every i from 1 to n : either a_ i = 1 , or at least one of the numbers a_ i - 1 and a_ i - 2 exists in the array as well. For example: the array [ 5, 3, 1] is beautiful: for a_ 1 , the number a_ 1 - 2 = 3 exists in the array; for a_ 2 , the number a_ 2 - 2 = 1 exists in the array; for a_ 3 , the condition a_ 3 = 1 holds; the array [ 1, 2, 2, 2, 2] is beautiful: for a_ 1 , the condition a_ 1 = 1 holds; for every other number a_ i , the number a_ i - 1 = 1 exists in the array; the array [ 1, 4] is not beautiful: for a_ 2 , neither a_ 2 - 2 = 2 nor a_ 2 - 1 = 3 exists in the array, and a_ 2 1 ; the array [ 2] is not beautiful: for a_ 1 , neither a_ 1 - 1 = 1 nor a_ 1 - 2 = 0 exists in the array, and a_ 1 1 ; the array [ 2, 1, 3] is beautiful: for a_ 1 , the number a_ 1 - 1 = 1 exists in the array; for a_ 2 , the condition a_ 2 = 1 holds; for a_ 3 , the number a_ 3 - 2 = 1 exists in the array. You are given a positive integer s . Find the minimum possible size of a beautiful array with the sum of elements equal to s .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. Then t lines follow, the i - th line contains one integer s ( 1 \u2264 s \u2264 5000 ) for the i - th test case.",
    "output": "Print t integers, the i - th integer should be the answer for the i - th testcase: the minimum possible size of a beautiful array with the sum of elements equal to s .",
    "note": "Consider the example test: in the first test case, the array [ 1] meets all conditions; in the second test case, the array [ 3, 4, 1] meets all conditions; in the third test case, the array [ 1, 2, 4] meets all conditions; in the fourth test case, the array [ 1, 4, 6, 8, 10, 2, 11] meets all conditions.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1550A"
  },
  {
    "title": "Gregor and the Pawn Game",
    "url": "https://codeforces.com/problemset/problem/1549/B",
    "history": "There is a chessboard of size n by n . The square in the i - th row from top and j - th column from the left is labelled ( i, j) . Currently, Gregor has some pawns in the n - th row. There are also enemy pawns in the 1 - st row. On one turn, Gregor moves one of his pawns. A pawn can move one square up ( from ( i, j) to ( i- 1, j) ) if there is no pawn in the destination square. Additionally, a pawn can move one square diagonally up ( from ( i, j) to either ( i- 1, j- 1) or ( i- 1, j+ 1) ) if and only if there is an enemy pawn in that square. The enemy pawn is also removed. Gregor wants to know what is the maximum number of his pawns that can reach row 1 ? Note that only Gregor takes turns in this game, and the enemy pawns never move. Also, when Gregor' s pawn reaches row 1 , it is stuck and cannot make any further moves.",
    "input": "The first line of the input contains one integer t ( 1\u2264 t\u2264 2\u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of three lines. The first line contains a single integer n ( 2\u2264 n\u2264 2\u00b710^ 5 ) \u2014 the size of the chessboard. The second line consists of a string of binary digits of length n , where a 1 in the i - th position corresponds to an enemy pawn in the i - th cell from the left, and 0 corresponds to an empty cell. The third line consists of a string of binary digits of length n , where a 1 in the i - th position corresponds to a Gregor' s pawn in the i - th cell from the left, and 0 corresponds to an empty cell. It is guaranteed that the sum of n across all test cases is less than 2\u00b710^ 5 .",
    "output": "For each test case, print one integer: the maximum number of Gregor' s pawns which can reach the 1 - st row.",
    "note": "In the first example, Gregor can simply advance all 3 of his pawns forward. Thus, the answer is 3 . In the second example, Gregor can guarantee that all 4 of his pawns reach the enemy row, by following the colored paths as demonstrated in the diagram below. Remember, only Gregor takes turns in this \" game\" ! In the third example, Gregor' s only pawn is stuck behind the enemy pawn, and cannot reach the end. In the fourth example, Gregor has no pawns, so the answer is clearly 0 .",
    "topics": [
      "dfs and similar",
      "dp",
      "flows",
      "graph matchings",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1549B"
  },
  {
    "title": "Gregor and the Two Painters",
    "url": "https://codeforces.com/problemset/problem/1548/E",
    "history": "Two painters, Amin and Benj, are repainting Gregor' s living room ceiling! The ceiling can be modeled as an n \u00d7 m grid. For each i between 1 and n , inclusive, painter Amin applies a_ i layers of paint to the entire i - th row. For each j between 1 and m , inclusive, painter Benj applies b_ j layers of paint to the entire j - th column. Therefore, the cell ( i, j) ends up with a_ i+ b_ j layers of paint. Gregor considers the cell ( i, j) to be badly painted if a_ i+ b_ j \u2264 x . Define a badly painted region to be a maximal connected component of badly painted cells, i. e. a connected component of badly painted cells such that all adjacent to the component cells are not badly painted. Two cells are considered adjacent if they share a side. Gregor is appalled by the state of the finished ceiling, and wants to know the number of badly painted regions.",
    "input": "The first line contains three integers n , m and x ( 1 \u2264 n, m \u2264 2\u00b7 10^ 5 , 1 \u2264 x \u2264 2\u00b7 10^ 5 ) \u2014 the dimensions of Gregor' s ceiling, and the maximum number of paint layers in a badly painted cell. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2\u00b7 10^ 5 ) , the number of paint layers Amin applies to each row. The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ j \u2264 2\u00b7 10^ 5 ) , the number of paint layers Benj applies to each column.",
    "output": "Print a single integer, the number of badly painted regions.",
    "note": "The diagram below represents the first example. The numbers to the left of each row represent the list a , and the numbers above each column represent the list b . The numbers inside each cell represent the number of paint layers in that cell. The colored cells correspond to badly painted cells. The red and blue cells respectively form 2 badly painted regions.",
    "topics": [
      "data structures",
      "divide and conquer",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1548E"
  },
  {
    "title": "Web of Lies",
    "url": "https://codeforces.com/problemset/problem/1548/A",
    "history": "When you play the game of thrones, you win, or you die. There is no middle ground. Cersei Lannister, A Game of Thrones by George R. R. MartinThere are n nobles, numbered from 1 to n . Noble i has a power of i . There are also m \" friendships\" . A friendship between nobles a and b is always mutual. A noble is defined to be vulnerable if both of the following conditions are satisfied: the noble has at least one friend, and all of that noble' s friends have a higher power. You will have to process the following three types of queries. Add a friendship between nobles u and v . Remove a friendship between nobles u and v . Calculate the answer to the following process. The process: all vulnerable nobles are simultaneously killed, and all their friendships end. Then, it is possible that new nobles become vulnerable. The process repeats itself until no nobles are vulnerable. It can be proven that the process will end in finite time. After the process is complete, you need to calculate the number of remaining nobles. Note that the results of the process are not carried over between queries, that is, every process starts with all nobles being alive!",
    "input": "The first line contains the integers n and m ( 1 \u2264 n \u2264 2\u00b7 10^ 5 , 0 \u2264 m \u2264 2\u00b7 10^ 5 ) \u2014 the number of nobles and number of original friendships respectively. The next m lines each contain the integers u and v ( 1 \u2264 u, v \u2264 n , u v ) , describing a friendship. No friendship is listed twice. The next line contains the integer q ( 1 \u2264 q \u2264 2\u00b710^ 5 ) \u2014 the number of queries. The next q lines contain the queries themselves, each query has one of the following three formats. 1 u v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 add a friendship between u and v . It is guaranteed that u and v are not friends at this moment. 2 u v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 remove a friendship between u and v . It is guaranteed that u and v are friends at this moment. 3 \u2014 print the answer to the process described in the statement.",
    "output": "For each type 3 query print one integer to a new line. It is guaranteed that there will be at least one type 3 query.",
    "note": "Consider the first example. In the first type 3 query, we have the diagram below. In the first round of the process, noble 1 is weaker than all of his friends ( 2 and 3 ) , and is thus killed. No other noble is vulnerable in round 1. In round 2, noble 3 is weaker than his only friend, noble 4 , and is therefore killed. At this point, the process ends, and the answer is 2 . In the second type 3 query, the only surviving noble is 4 . The second example consists of only one type 3 query. In the first round, two nobles are killed, and in the second round, one noble is killed. The final answer is 1 , since only one noble survives.",
    "topics": [
      "brute force",
      "graphs",
      "greedy"
    ],
    "id": "1548A"
  },
  {
    "title": "Co-growing Sequence",
    "url": "https://codeforces.com/problemset/problem/1547/D",
    "history": "A sequence of non- negative integers a_ 1, a_ 2, . . . , a_ n is called growing if for all i from 1 to n - 1 all ones ( of binary representation) in a_ i are in the places of ones ( of binary representation) in a_ i + 1 ( in other words, a_ i & a_ i + 1 = a_ i , where & denotes bitwise AND) . If n = 1 then the sequence is considered growing as well. For example, the following four sequences are growing: [ 2, 3, 15, 175] \u2014 in binary it' s [ 10_ 2, 11_ 2, 1111_ 2, 10101111_ 2] ; [ 5] \u2014 in binary it' s [ 101_ 2] ; [ 1, 3, 7, 15] \u2014 in binary it' s [ 1_ 2, 11_ 2, 111_ 2, 1111_ 2] ; [ 0, 0, 0] \u2014 in binary it' s [ 0_ 2, 0_ 2, 0_ 2] . The following three sequences are non- growing: [ 3, 4, 5] \u2014 in binary it' s [ 11_ 2, 100_ 2, 101_ 2] ; [ 5, 4, 3] \u2014 in binary it' s [ 101_ 2, 100_ 2, 011_ 2] ; [ 1, 2, 4, 8] \u2014 in binary it' s [ 0001_ 2, 0010_ 2, 0100_ 2, 1000_ 2] . Consider two sequences of non- negative integers x_ 1, x_ 2, . . . , x_ n and y_ 1, y_ 2, . . . , y_ n . Let' s call this pair of sequences co- growing if the sequence x_ 1 \u2295 y_ 1, x_ 2 \u2295 y_ 2, . . . , x_ n \u2295 y_ n is growing where \u2295 denotes bitwise XOR. You are given a sequence of integers x_ 1, x_ 2, . . . , x_ n . Find the lexicographically minimal sequence y_ 1, y_ 2, . . . , y_ n such that sequences x_ i and y_ i are co- growing. The sequence a_ 1, a_ 2, . . . , a_ n is lexicographically smaller than the sequence b_ 1, b_ 2, . . . , b_ n if there exists 1 \u2264 k \u2264 n such that a_ i = b_ i for any 1 \u2264 i < k but a_ k < b_ k .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 length of the sequence x_ i . The second line contains n integers x_ 1, x_ 2, . . . , x_ n ( 0 \u2264 x_ i < 2^ 30 ) \u2014 elements of the sequence x_ i . It is guaranteed that the sum of n overall all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print n integers y_ 1, y_ 2, . . . , y_ n ( 0 \u2264 y_ i < 2^ 30 ) \u2014 lexicographically minimal sequence such that such that it' s co- growing with given sequence x_ i .",
    "note": "",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1547D"
  },
  {
    "title": "Pair Programming",
    "url": "https://codeforces.com/problemset/problem/1547/C",
    "history": "Monocarp and Polycarp are learning new programming techniques. Now they decided to try pair programming. It' s known that they have worked together on the same file for n + m minutes. Every minute exactly one of them made one change to the file. Before they started, there were already k lines written in the file. Every minute exactly one of them does one of two actions: adds a new line to the end of the file or changes one of its lines. Monocarp worked in total for n minutes and performed the sequence of actions [ a_ 1, a_ 2, . . . , a_ n] . If a_ i = 0 , then he adds a new line to the end of the file. If a_ i > 0 , then he changes the line with the number a_ i . Monocarp performed actions strictly in this order: a_ 1 , then a_ 2 , . . . , a_ n . Polycarp worked in total for m minutes and performed the sequence of actions [ b_ 1, b_ 2, . . . , b_ m] . If b_ j = 0 , then he adds a new line to the end of the file. If b_ j > 0 , then he changes the line with the number b_ j . Polycarp performed actions strictly in this order: b_ 1 , then b_ 2 , . . . , b_ m . Restore their common sequence of actions of length n + m such that all actions would be correct \u2014 there should be no changes to lines that do not yet exist. Keep in mind that in the common sequence Monocarp' s actions should form the subsequence [ a_ 1, a_ 2, . . . , a_ n] and Polycarp' s \u2014 subsequence [ b_ 1, b_ 2, . . . , b_ m] . They can replace each other at the computer any number of times. Let' s look at an example. Suppose k = 3 . Monocarp first changed the line with the number 2 and then added a new line ( thus, n = 2, a = [ 2, 0] ) . Polycarp first added a new line and then changed the line with the number 5 ( thus, m = 2, b = [ 0, 5] ) . Since the initial length of the file was 3 , in order for Polycarp to change line number 5 two new lines must be added beforehand. Examples of correct sequences of changes, in this case, would be [ 0, 2, 0, 5] and [ 2, 0, 0, 5] . Changes [ 0, 0, 5, 2] ( wrong order of actions) and [ 0, 5, 2, 0] ( line 5 cannot be edited yet) are not correct.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) . Then t test cases follow. Before each test case, there is an empty line. Each test case contains three lines. The first line contains three integers k , n , m ( 0 \u2264 k \u2264 100 , 1 \u2264 n, m \u2264 100 ) \u2014 the initial number of lines in file and lengths of Monocarp' s and Polycarp' s sequences of changes respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 300 ) . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 0 \u2264 b_ j \u2264 300 ) .",
    "output": "For each test case print any correct common sequence of Monocarp' s and Polycarp' s actions of length n + m or - 1 if such sequence doesn' t exist.",
    "note": "",
    "topics": [
      "greedy",
      "two pointers"
    ],
    "id": "1547C"
  },
  {
    "title": "Alphabetical Strings",
    "url": "https://codeforces.com/problemset/problem/1547/B",
    "history": "A string s of length n ( 1 \u2264 n \u2264 26 ) is called alphabetical if it can be obtained using the following algorithm: first, write an empty string to s ( i. e. perform the assignment s : = \" \" ) ; then perform the next step n times; at the i - th step take i - th lowercase letter of the Latin alphabet and write it either to the left of the string s or to the right of the string s ( i. e. perform the assignment s : = c+ s or s : = s+ c , where c is the i - th letter of the Latin alphabet) . In other words, iterate over the n first letters of the Latin alphabet starting from ' a' and etc. Each time we prepend a letter to the left of the string s or append a letter to the right of the string s . Strings that can be obtained in that way are alphabetical. For example, the following strings are alphabetical: \" a\" , \" ba\" , \" ab\" , \" bac\" and \" ihfcbadeg\" . The following strings are not alphabetical: \" z\" , \" aa\" , \" ca\" , \" acb\" , \" xyz\" and \" ddcba\" . From the given string, determine if it is alphabetical.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case is written on a separate line that contains one string s . String s consists of lowercase letters of the Latin alphabet and has a length between 1 and 26 , inclusive.",
    "output": "Output t lines, each of them must contain the answer to the corresponding test case. Output YES if the given string s is alphabetical and NO otherwise. You can output YES and NO in any case ( for example, strings yEs, yes, Yes and YES will be recognized as a positive answer) .",
    "note": "The example contains test cases from the main part of the condition.",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1547B"
  },
  {
    "title": "AquaMoon and Two Arrays",
    "url": "https://codeforces.com/problemset/problem/1546/A",
    "history": "AquaMoon and Cirno are playing an interesting game with arrays. Cirno has prepared two arrays a and b , both consist of n non- negative integers. AquaMoon can perform the following operation an arbitrary number of times ( possibly zero) : She chooses two indices i and j ( 1 \u2264 i, j \u2264 n ) , then decreases the i - th element of array a by 1 , and increases the j - th element of array a by 1 . The resulting values at i - th and j - th index of array a are a_ i - 1 and a_ j + 1 , respectively. Each element of array a must be non- negative after each operation. If i = j this operation doesn' t change the array a . AquaMoon wants to make some operations to make arrays a and b equal. Two arrays a and b are considered equal if and only if a_ i = b_ i for all 1 \u2264 i \u2264 n . Help AquaMoon to find a sequence of operations that will solve her problem or find, that it is impossible to make arrays a and b equal. Please note, that you don' t have to minimize the number of operations.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 100 ) . The sum of all a_ i does not exceed 100 . The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 100 ) . The sum of all b_ i does not exceed 100 .",
    "output": "For each test case print \" - 1\" on the only line if it is impossible to make two arrays equal with some sequence of operations. Otherwise, print an integer m ( 0 \u2264 m \u2264 100 ) in the first line \u2014 the number of operations. Then print m lines, each line consists of two integers i and j \u2014 the indices you choose for the operation. It can be proven that if it is possible to make two arrays equal with some sequence of operations, there exists a sequence with m \u2264 100 . If there are multiple possible solutions, you can print any.",
    "note": "In the first example, we do the following operations: i = 2 , j = 1 : [ 1, 2, 3, 4] \u2192 [ 2, 1, 3, 4] ; i = 3 , j = 1 : [ 2, 1, 3, 4] \u2192 [ 3, 1, 2, 4] ; In the second example, it' s impossible to make two arrays equal.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1546A"
  },
  {
    "title": "The Final Pursuit",
    "url": "https://codeforces.com/problemset/problem/1543/E",
    "history": "Finally, you have defeated Razor and now, you are the Most Wanted street racer. Sergeant Cross has sent the full police force after you in a deadly pursuit. Fortunately, you have found a hiding spot but you fear that Cross and his force will eventually find you. To increase your chances of survival, you want to tune and repaint your BMW M3 GTR. The car can be imagined as a permuted n - dimensional hypercube. A simple n - dimensional hypercube is an undirected unweighted graph built recursively as follows: Take two simple ( n- 1) - dimensional hypercubes one having vertices numbered from 0 to 2^ n- 1- 1 and the other having vertices numbered from 2^ n- 1 to 2^ n- 1 . A simple 0 - dimensional Hypercube is just a single vertex. Add an edge between the vertices i and i+ 2^ n- 1 for each 0\u2264 i < 2^ n- 1 . A permuted n - dimensional hypercube is formed by permuting the vertex numbers of a simple n - dimensional hypercube in any arbitrary manner. Examples of a simple and permuted 3 - dimensional hypercubes are given below: Note that a permuted n - dimensional hypercube has the following properties: There are exactly 2^ n vertices. There are exactly n\u00b7 2^ n- 1 edges. Each vertex is connected to exactly n other vertices. There are no self- loops or duplicate edges. Let' s denote the permutation used to generate the permuted n - dimensional hypercube, representing your car, from a simple n - dimensional hypercube by P . Before messing up the functionalities of the car, you want to find this permutation so that you can restore the car if anything goes wrong. But the job isn' t done yet. You have n different colours numbered from 0 to n- 1 . You want to colour the vertices of this permuted n - dimensional hypercube in such a way that for each and every vertex u satisfying 0\u2264 u < 2^ n and for each and every colour c satisfying 0\u2264 c < n , there is at least one vertex v adjacent to u having a colour c . In other words, from each and every vertex, it must be possible to reach a vertex of any colour by just moving to an adjacent vertex. Given the permuted n - dimensional hypercube, find any valid permutation P and colouring.",
    "input": "The first line of input contains a single integer t ( 1\u2264 t\u2264 4096 ) \u2014 the number of test cases. For each test case, the first line contains a single integer n ( 1\u2264 n\u2264 16 ) . Each of the next n\u00b7 2^ n- 1 lines contain two integers u and v ( 0\u2264 u, v < 2^ n ) denoting that there is an edge between the vertices numbered u and v . It is guaranteed that the graph described in the input is a permuted n - dimensional hypercube. Additionally, it is guaranteed that the sum of 2^ n over all test cases does not exceed 2^ 16= 65 536 .",
    "output": "For each test case, print two lines. In the first line, output any permutation P of length 2^ n that can be used to transform a simple n - dimensional hypercube to the permuted n - dimensional hypercube given in the input. Two permuted hypercubes are considered the same if they have the same set of edges. If there are multiple answers, output any of them. In the second line, print the colouring. If there is no way to colour the vertices satisfying the conditions, output - 1 . Otherwise, output a single line containing 2^ n space separated integers. The i - th integer must be the colour of the vertex numbered ( i- 1) in the permuted n - dimensional hypercube. If there are multiple answers, output any of them.",
    "note": "The colouring and the permuted hypercube for the first test case is shown below: The colouring and the permuted hypercube for the second test case is shown below: The permuted hypercube for the third test case is given in the problem statement. However, it can be shown that there exists no way to colour that cube satifying all the conditions. Note that some other permutations like [ 0, 5, 7, 3, 1, 2, 4, 6] and [ 0, 1, 5, 2, 7, 4, 3, 6] will also give the same permuted hypercube.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "divide and conquer",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1543E"
  },
  {
    "title": "Customising the Track",
    "url": "https://codeforces.com/problemset/problem/1543/B",
    "history": "Highway 201 is the most busy street in Rockport. Traffic cars cause a lot of hindrances to races, especially when there are a lot of them. The track which passes through this highway can be divided into n sub- tracks. You are given an array a where a_ i represents the number of traffic cars in the i - th sub- track. You define the inconvenience of the track as \u2211_ i= 1^ n\u2211_ j= i+ 1^ n| a_ i- a_ j| , where | x| is the absolute value of x . You can perform the following operation any ( possibly zero) number of times: choose a traffic car and move it from its current sub- track to any other sub- track. Find the minimum inconvenience you can achieve.",
    "input": "The first line of input contains a single integer t ( 1\u2264 t\u2264 10 000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i\u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print a single line containing a single integer: the minimum inconvenience you can achieve by applying the given operation any ( possibly zero) number of times.",
    "note": "For the first test case, you can move a car from the 3 - rd sub- track to the 1 - st sub- track to obtain 0 inconvenience. For the second test case, moving any car won' t decrease the inconvenience of the track.",
    "topics": [
      "combinatorics",
      "greedy",
      "math"
    ],
    "id": "1543B"
  },
  {
    "title": "Exciting Bets",
    "url": "https://codeforces.com/problemset/problem/1543/A",
    "history": "Welcome to Rockport City! It is time for your first ever race in the game against Ronnie. To make the race interesting, you have bet a dollars and Ronnie has bet b dollars. But the fans seem to be disappointed. The excitement of the fans is given by gcd( a, b) , where gcd( x, y) denotes the greatest common divisor ( GCD) of integers x and y . To make the race more exciting, you can perform two types of operations: Increase both a and b by 1 . Decrease both a and b by 1 . This operation can only be performed if both a and b are greater than 0 . In one move, you can perform any one of these operations. You can perform arbitrary ( possibly zero) number of moves. Determine the maximum excitement the fans can get and the minimum number of moves required to achieve it. Note that gcd( x, 0) = x for any x \u2265 0 .",
    "input": "The first line of input contains a single integer t ( 1\u2264 t\u2264 5\u00b7 10^ 3 ) \u2014 the number of test cases. The first and the only line of each test case contains two integers a and b ( 0\u2264 a, b\u2264 10^ 18 ) .",
    "output": "For each test case, print a single line containing two integers. If the fans can get infinite excitement, print 0 0. Otherwise, the first integer must be the maximum excitement the fans can get, and the second integer must be the minimum number of moves required to achieve that excitement.",
    "note": "For the first test case, you can apply the first operation 1 time to get a= 9 and b= 6 . It can be shown that 3 is the maximum excitement possible. For the second test case, no matter how many operations you apply, the fans will always have an excitement equal to 1 . Since the initial excitement is also 1 , you don' t need to apply any operation. For the third case, the fans can get infinite excitement by applying the first operation an infinite amount of times. For the fourth test case, you can apply the second operation 3 times to get a= 0 and b= 6 . Since, gcd( 0, 6) = 6 , the fans will get an excitement of 6 .",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1543A"
  },
  {
    "title": "Pretty Permutations",
    "url": "https://codeforces.com/problemset/problem/1541/A",
    "history": "There are n cats in a line, labeled from 1 to n , with the i - th cat at position i . They are bored of gyrating in the same spot all day, so they want to reorder themselves such that no cat is in the same place as before. They are also lazy, so they want to minimize the total distance they move. Help them decide what cat should be at each location after the reordering. For example, if there are 3 cats, this is a valid reordering: [ 3, 1, 2] . No cat is in its original position. The total distance the cats move is 1 + 1 + 2 = 4 as cat 1 moves one place to the right, cat 2 moves one place to the right, and cat 3 moves two places to the left.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first and only line of each test case contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of cats. It can be proven that under the constraints of the problem, an answer always exist.",
    "output": "Output t answers, one for each test case. Each answer consists of n integers \u2014 a permutation with the minimum total distance. If there are multiple answers, print any.",
    "note": "For the first test case, there is only one possible permutation that satisfies the conditions: [ 2, 1] . The second test case was described in the statement. Another possible answer is [ 2, 3, 1] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1541A"
  },
  {
    "title": "Great Graphs",
    "url": "https://codeforces.com/problemset/problem/1540/A",
    "history": "Farmer John has a farm that consists of n pastures connected by one- directional roads. Each road has a weight, representing the time it takes to go from the start to the end of the road. The roads could have negative weight, where the cows go so fast that they go back in time! However, Farmer John guarantees that it is impossible for the cows to get stuck in a time loop, where they can infinitely go back in time by traveling across a sequence of roads. Also, each pair of pastures is connected by at most one road in each direction. Unfortunately, Farmer John lost the map of the farm. All he remembers is an array d , where d_ i is the smallest amount of time it took the cows to reach the i - th pasture from pasture 1 using a sequence of roads. The cost of his farm is the sum of the weights of each of the roads, and Farmer John needs to know the minimal cost of a farm that is consistent with his memory.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of pastures. The second line of each test case contains n space separated integers d_ 1, d_ 2, . . . , d_ n ( 0 \u2264 d_ i \u2264 10^ 9 ) \u2014 the array d . It is guaranteed that d_ 1 = 0 . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output the minimum possible cost of a farm that is consistent with Farmer John' s memory.",
    "note": "In the first test case, you can add roads from pasture 1 to pasture 2 with a time of 2 , from pasture 2 to pasture 3 with a time of 1 , from pasture 3 to pasture 1 with a time of - 3 , from pasture 3 to pasture 2 with a time of - 1 , from pasture 2 to pasture 1 with a time of - 2 . The total cost is 2 + 1 + - 3 + - 1 + - 2 = - 3 . In the second test case, you can add a road from pasture 1 to pasture 2 with cost 1000000000 and a road from pasture 2 to pasture 1 with cost - 1000000000 . The total cost is 1000000000 + - 1000000000 = 0 . In the third test case, you can' t add any roads. The total cost is 0 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ],
    "id": "1540A"
  },
  {
    "title": "Strange Array",
    "url": "https://codeforces.com/problemset/problem/1539/F",
    "history": "Vasya has an array of n integers a_ 1, a_ 2, . . . , a_ n . Vasya thinks that all numbers in his array are strange for some reason. To calculate how strange the i - th number is, Vasya created the following algorithm. He chooses a subsegment a_ l, a_ l+ 1, . . . , a_ r , such that 1 \u2264 l \u2264 i \u2264 r \u2264 n , sort its elements in increasing order in his head ( he can arrange equal elements arbitrary) . After that he finds the center of the segment. The center of a segment is the element at position ( l + r) / 2 , if the length of the segment is odd, and at position ( l + r + 1) / 2 otherwise. Now Vasya finds the element that was at position i before the sorting, and calculates the distance between its current position and the center of the subsegment ( the distance between the elements with indices j and k is | j - k| ) . The strangeness of the number at position i is the maximum distance among all suitable choices of l and r . Vasya wants to calculate the strangeness of each number in his array. Help him to do it.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the size of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 Vasya' s array.",
    "output": "Print a single line with n numbers. The i - th of them must be equal to the strangeness of the i - th element of the array.",
    "note": "In the first example: For the first position we choose the segment from 1 to 5 . After sorting, it looks like [ 1, 2, 3, 4, 5] , the center is 3 . The distance from the center to 5 is 2 . For the second position we choose the segment from 2 to 4 . For the third position we choose the segment from 3 to 5 . For the fourth position we choose the segment from 1 to 4 . After sorting, it looks like [ 2, 3, 4, 5] , the center is 4 . The distance from the center to 2 is 2 . For the fifth position we choose the segment from 1 to 5 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1539F"
  },
  {
    "title": "Game with Cards",
    "url": "https://codeforces.com/problemset/problem/1539/E",
    "history": "The Alice' s computer is broken, so she can' t play her favorite card game now. To help Alice, Bob wants to answer n her questions. Initially, Bob holds one card with number 0 in the left hand and one in the right hand. In the i - th question, Alice asks Bob to replace a card in the left or right hand with a card with number k_ i ( Bob chooses which of two cards he changes, Bob must replace exactly one card) . After this action, Alice wants the numbers on the left and right cards to belong to given segments ( segments for left and right cards can be different) . Formally, let the number on the left card be x , and on the right card be y . Then after the i - th swap the following conditions must be satisfied: a_ l, i\u2264 x \u2264 b_ l, i , and a_ r, i\u2264 y \u2264 b_ r, i . Please determine if Bob can answer all requests. If it is possible, find a way to do it.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 100 000 , 2 \u2264 m \u2264 10^ 9 ) \u2014 the number of questions and the maximum possible value on the card. Then n queries are described. Every description contains 3 lines. The first line of the description of the i - th query contains a single integer k_ i ( 0 \u2264 k_ i \u2264 m ) \u2014 the number on a new card. The second line of the description of the i - th query contains two integers a_ l, i and b_ l, i ( 0 \u2264 a_ l, i\u2264 b_ l, i\u2264 m ) \u2014 the minimum and maximum values of the card at the left hand after the replacement. The third line of the description of the i - th query contains two integers a_ r, i and b_ r, i ( 0 \u2264 a_ r, i\u2264 b_ r, i\u2264 m ) \u2014 the minimum and maximum values of the card at the right hand after the replacement.",
    "output": "At the first line, print \" Yes\" , if Bob can answer all queries, and \" No\" otherwise. If Bob can answer all n queries, then at the second line print n numbers: a way to satisfy all requirements. If in i - th query Bob needs to replace the card in the left hand, print 0 , otherwise print 1 . If there are multiple answers, print any.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1539E"
  },
  {
    "title": "PriceFixed",
    "url": "https://codeforces.com/problemset/problem/1539/D",
    "history": "Lena is the most economical girl in Moscow. So, when her dad asks her to buy some food for a trip to the country, she goes to the best store \u2014 \" PriceFixed\" . Here are some rules of that store: The store has an infinite number of items of every product. All products have the same price: 2 rubles per item. For every product i there is a discount for experienced buyers: if you buy b_ i items of products ( of any type, not necessarily type i ) , then for all future purchases of the i - th product there is a 50% discount ( so you can buy an item of the i - th product for 1 ruble! ) . Lena needs to buy n products: she must purchase at least a_ i items of the i - th product. Help Lena to calculate the minimum amount of money she needs to spend if she optimally chooses the order of purchasing. Note that if she wants, she can buy more items of some product than needed.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the number of products. Each of next n lines contains a product description. Each description consists of two integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 10^ 14 , 1 \u2264 b_ i \u2264 10^ 14 ) \u2014 the required number of the i - th product and how many products you need to buy to get the discount on the i - th product. The sum of all a_ i does not exceed 10^ 14 .",
    "output": "Output the minimum sum that Lena needs to make all purchases.",
    "note": "In the first example, Lena can purchase the products in the following way: one item of product 3 for 2 rubles, one item of product 1 for 2 rubles, one item of product 1 for 2 rubles, one item of product 2 for 1 ruble ( she can use the discount because 3 items are already purchased) , one item of product 1 for 1 ruble ( she can use the discount because 4 items are already purchased) . In total, she spends 8 rubles. It can be proved that it is impossible to spend less. In the second example Lena can purchase the products in the following way: one item of product 1 for 2 rubles, two items of product 2 for 2 rubles for each, one item of product 5 for 2 rubles, one item of product 3 for 1 ruble, two items of product 4 for 1 ruble for each, one item of product 1 for 1 ruble. In total, she spends 12 rubles.",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1539D"
  },
  {
    "title": "Stable Groups",
    "url": "https://codeforces.com/problemset/problem/1539/C",
    "history": "There are n students numerated from 1 to n . The level of the i - th student is a_ i . You need to split the students into stable groups. A group of students is called stable, if in the sorted array of their levels no two neighboring elements differ by more than x . For example, if x = 4 , then the group with levels [ 1, 10, 8, 4, 4] is stable ( because 4 - 1 \u2264 x , 4 - 4 \u2264 x , 8 - 4 \u2264 x , 10 - 8 \u2264 x ) , while the group with levels [ 2, 10, 10, 7] is not stable ( 7 - 2 = 5 > x ) . Apart from the n given students, teachers can invite at most k additional students with arbitrary levels ( at teachers' choice) . Find the minimum number of stable groups teachers can form from all students ( including the newly invited) . For example, if there are two students with levels 1 and 5 ; x = 2 ; and k \u2265 1 , then you can invite a new student with level 3 and put all the students in one stable group.",
    "input": "The first line contains three integers n , k , x ( 1 \u2264 n \u2264 200 000 , 0 \u2264 k \u2264 10^ 18 , 1 \u2264 x \u2264 10^ 18 ) \u2014 the initial number of students, the number of students you can additionally invite, and the maximum allowed level difference. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 18 ) \u2014 the students levels.",
    "output": "In the only line print a single integer: the minimum number of stable groups you can split the students into.",
    "note": "In the first example you can invite two students with levels 2 and 11 . Then you can split the students into two stable groups: [ 1, 1, 2, 5, 8, 11, 12, 13] , [ 20, 22] . In the second example you are not allowed to invite new students, so you need 3 groups: [ 1, 1, 5, 5, 20, 20] [ 60, 70, 70, 70, 80, 90] [ 420]",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1539C"
  },
  {
    "title": "Contest Start",
    "url": "https://codeforces.com/problemset/problem/1539/A",
    "history": "There are n people participating in some contest, they start participating in x minutes intervals. That means the first participant starts at time 0 , the second participant starts at time x , the third \u2014 at time 2 \u00b7 x , and so on. Duration of contest is t minutes for each participant, so the first participant finishes the contest at time t , the second \u2014 at time t + x , and so on. When a participant finishes the contest, their dissatisfaction equals to the number of participants that started the contest ( or starting it now) , but haven' t yet finished it. Determine the sum of dissatisfaction of all participants.",
    "input": "The first line contains a single integer k ( 1 \u2264 k \u2264 1000 ) \u2014 the number of test cases. Each of the next k lines contains three integers n , x , t ( 1 \u2264 n, x, t \u2264 2 \u00b7 10^ 9 ) \u2014 the number of participants, the start interval and the contest duration.",
    "output": "Print k lines, in the i - th line print the total dissatisfaction of participants in the i - th test case.",
    "note": "In the first example the first participant starts at 0 and finishes at time 5 . By that time the second and the third participants start, so the dissatisfaction of the first participant is 2 . The second participant starts at time 2 and finishes at time 7 . By that time the third the fourth participants start, so the dissatisfaction of the second participant is 2 . The third participant starts at 4 and finishes at 9 . By that time the fourth participant starts, so the dissatisfaction of the third participant is 1 . The fourth participant starts at 6 and finishes at 11 . By time 11 everyone finishes the contest, so the dissatisfaction of the fourth participant is 0 . In the second example the first participant starts at 0 and finishes at time 2 . By that time the second participants starts, and the third starts at exactly time 2 . So the dissatisfaction of the first participant is 2 . The second participant starts at time 1 and finishes at time 3 . At that time the third participant is solving the contest.",
    "topics": [
      "combinatorics",
      "geometry",
      "greedy",
      "math"
    ],
    "id": "1539A"
  },
  {
    "title": "Gift Set",
    "url": "https://codeforces.com/problemset/problem/1538/G",
    "history": "Polycarp has x of red and y of blue candies. Using them, he wants to make gift sets. Each gift set contains either a red candies and b blue candies, or a blue candies and b red candies. Any candy can belong to at most one gift set. Help Polycarp to find the largest number of gift sets he can create. For example, if x = 10 , y = 12 , a = 5 , and b = 2 , then Polycarp can make three gift sets: In the first set there will be 5 red candies and 2 blue candies; In the second set there will be 5 blue candies and 2 red candies; In the third set will be 5 blue candies and 2 red candies. Note that in this example there is one red candy that Polycarp does not use in any gift set.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. Each test case consists of a single string containing four integers x , y , a , and b ( 1 \u2264 x, y, a, b \u2264 10^ 9 ) .",
    "output": "For each test case, output one number \u2014 the maximum number of gift sets that Polycarp can make.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "ternary search"
    ],
    "id": "1538G"
  },
  {
    "title": "Friends and Candies",
    "url": "https://codeforces.com/problemset/problem/1538/B",
    "history": "Polycarp has n friends, the i - th of his friends has a_ i candies. Polycarp' s friends do not like when they have different numbers of candies. In other words they want all a_ i to be the same. To solve this, Polycarp performs the following set of actions exactly once: Polycarp chooses k ( 0 \u2264 k \u2264 n ) arbitrary friends ( let' s say he chooses friends with indices i_ 1, i_ 2, . . . , i_ k ) ; Polycarp distributes their a_ i_ 1 + a_ i_ 2 + . . . + a_ i_ k candies among all n friends. During distribution for each of a_ i_ 1 + a_ i_ 2 + . . . + a_ i_ k candies he chooses new owner. That can be any of n friends. Note, that any candy can be given to the person, who has owned that candy before the distribution process. Note that the number k is not fixed in advance and can be arbitrary. Your task is to find the minimum value of k . For example, if n= 4 and a= [ 4, 5, 2, 5] , then Polycarp could make the following distribution of the candies: Polycarp chooses k= 2 friends with indices i= [ 2, 4] and distributes a_ 2 + a_ 4 = 10 candies to make a= [ 4, 4, 4, 4] ( two candies go to person 3 ) . Note that in this example Polycarp cannot choose k= 1 friend so that he can redistribute candies so that in the end all a_ i are equal. For the data n and a , determine the minimum value k . With this value k , Polycarp should be able to select k friends and redistribute their candies so that everyone will end up with the same number of candies.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 4 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output: the minimum value of k , such that Polycarp can choose exactly k friends so that he can redistribute the candies in the desired way; \" - 1\" if no such value k exists.",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1538B"
  },
  {
    "title": "Stone Game",
    "url": "https://codeforces.com/problemset/problem/1538/A",
    "history": "Polycarp is playing a new computer game. This game has n stones in a row. The stone on the position i has integer power a_ i . The powers of all stones are distinct. Each turn Polycarp can destroy either stone on the first position or stone on the last position ( in other words, either the leftmost or the rightmost stone) . When Polycarp destroys the stone it does not exist any more. Now, Polycarp wants two achievements. He gets them if he destroys the stone with the least power and the stone with the greatest power. Help Polycarp find out what is the minimum number of moves he should make in order to achieve his goal. For example, if n = 5 and a = [ 1, 5, 4, 3, 2] , then Polycarp could make the following moves: Destroy the leftmost stone. After this move a = [ 5, 4, 3, 2] ; Destroy the rightmost stone. After this move a = [ 5, 4, 3] ; Destroy the leftmost stone. After this move a = [ 4, 3] . Polycarp destroyed the stones with the greatest and least power, so he can end the game. Please note that in the example above, you can complete the game in two steps. For example: Destroy the leftmost stone. After this move a = [ 5, 4, 3, 2] ; Destroy the leftmost stone. After this move a = [ 4, 3, 2] . Polycarp destroyed the stones with the greatest and least power, so he can end the game.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 100 ) . Then t test cases follow. The first line of each test case contains one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of stones. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the power of the stones.",
    "output": "For each test case, output the minimum number of moves required to destroy the stones with the greatest and the lowest power.",
    "note": "",
    "topics": [
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1538A"
  },
  {
    "title": "Figure Fixing",
    "url": "https://codeforces.com/problemset/problem/1537/F",
    "history": "You have a connected undirected graph made of n nodes and m edges. The i - th node has a value v_ i and a target value t_ i . In an operation, you can choose an edge ( i, j) and add k to both v_ i and v_ j , where k can be any integer. In particular, k can be negative. Your task to determine if it is possible that by doing some finite number of operations ( possibly zero) , you can achieve for every node i , v_ i = t_ i .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) , the number of test cases. Then the test cases follow. The first line of each test case contains two integers n , m ( 2 \u2264 n \u2264 2\u00b7 10^ 5 , n- 1\u2264 m\u2264min( 2\u00b7 10^ 5, n( n- 1) / 2) ) \u2014 the number of nodes and edges respectively. The second line contains n integers v_ 1. . . , v_ n ( - 10^ 9 \u2264 v_ i \u2264 10^ 9 ) \u2014 initial values of nodes. The third line contains n integers t_ 1. . . , t_ n ( - 10^ 9 \u2264 t_ i \u2264 10^ 9 ) \u2014 target values of nodes. Each of the next m lines contains two integers i and j representing an edge between node i and node j ( 1 \u2264 i, j \u2264 n , i j ) . It is guaranteed that the graph is connected and there is at most one edge between the same pair of nodes. It is guaranteed that the sum of n over all testcases does not exceed 2 \u00b7 10^ 5 and the sum of m over all testcases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, if it is possible for every node to reach its target after some number of operations, print \" YES\" . Otherwise, print \" NO\" .",
    "note": "Here is a visualization of the first test case ( the orange values denote the initial values and the blue ones the desired values) : One possible order of operations to obtain the desired values for each node is the following: Operation 1 : Add 2 to nodes 2 and 3 . Operation 2 : Add - 2 to nodes 1 and 4 . Operation 3 : Add 6 to nodes 3 and 4 . Now we can see that in total we added - 2 to node 1 , 2 to node 2 , 8 to node 3 and 4 to node 4 which brings each node exactly to it' s desired value. For the graph from the second test case it' s impossible to get the target values.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1537F"
  },
  {
    "title": "Erase and Extend (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1537/E2",
    "history": "This is the hard version of the problem. The only difference is the constraints on n and k . You can make hacks only if all versions of the problem are solved. You have a string s , and you can do two types of operations on it: Delete the last character of the string. Duplicate the string: s: = s+ s , where + denotes concatenation. You can use each operation any number of times ( possibly none) . Your task is to find the lexicographically smallest string of length exactly k that can be obtained by doing these operations on string s . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; In the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains two integers n , k ( 1 \u2264 n, k \u2264 5\u00b7 10^ 5 ) \u2014 the length of the original string s and the length of the desired string. The second line contains the string s , consisting of n lowercase English letters.",
    "output": "Print the lexicographically smallest string of length k that can be obtained by doing the operations on string s .",
    "note": "In the first test, it is optimal to make one duplication: \" dbcadabc\" \u2192 \" dbcadabcdbcadabc\" . In the second test it is optimal to delete the last 3 characters, then duplicate the string 3 times, then delete the last 3 characters to make the string have length k . \" abcd\" \u2192 \" abc\" \u2192 \" ab\" \u2192 \" a\" \u2192 \" aa\" \u2192 \" aaaa\" \u2192 \" aaaaaaaa\" \u2192 \" aaaaaaa\" \u2192 \" aaaaaa\" \u2192 \" aaaaa\" .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "hashing",
      "string suffix structures",
      "strings",
      "two pointers"
    ],
    "id": "1537E2"
  },
  {
    "title": "Erase and Extend (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1537/E1",
    "history": "This is the easy version of the problem. The only difference is the constraints on n and k . You can make hacks only if all versions of the problem are solved. You have a string s , and you can do two types of operations on it: Delete the last character of the string. Duplicate the string: s: = s+ s , where + denotes concatenation. You can use each operation any number of times ( possibly none) . Your task is to find the lexicographically smallest string of length exactly k that can be obtained by doing these operations on string s . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; In the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains two integers n , k ( 1 \u2264 n, k \u2264 5000 ) \u2014 the length of the original string s and the length of the desired string. The second line contains the string s , consisting of n lowercase English letters.",
    "output": "Print the lexicographically smallest string of length k that can be obtained by doing the operations on string s .",
    "note": "In the first test, it is optimal to make one duplication: \" dbcadabc\" \u2192 \" dbcadabcdbcadabc\" . In the second test it is optimal to delete the last 3 characters, then duplicate the string 3 times, then delete the last 3 characters to make the string have length k . \" abcd\" \u2192 \" abc\" \u2192 \" ab\" \u2192 \" a\" \u2192 \" aa\" \u2192 \" aaaa\" \u2192 \" aaaaaaaa\" \u2192 \" aaaaaaa\" \u2192 \" aaaaaa\" \u2192 \" aaaaa\" .",
    "topics": [
      "binary search",
      "brute force",
      "dp",
      "greedy",
      "hashing",
      "implementation",
      "string suffix structures",
      "strings",
      "two pointers"
    ],
    "id": "1537E1"
  },
  {
    "title": "Challenging Cliffs",
    "url": "https://codeforces.com/problemset/problem/1537/C",
    "history": "You are a game designer and want to make an obstacle course. The player will walk from left to right. You have n heights of mountains already selected and want to arrange them so that the absolute difference of the heights of the first and last mountains is as small as possible. In addition, you want to make the game difficult, and since walking uphill or flat is harder than walking downhill, the difficulty of the level will be the number of mountains i ( 1 \u2264 i < n ) such that h_ i \u2264 h_ i+ 1 where h_ i is the height of the i - th mountain. You don' t want to waste any of the mountains you modelled, so you have to use all of them. From all the arrangements that minimize | h_ 1- h_ n| , find one that is the most difficult. If there are multiple orders that satisfy these requirements, you may find any.",
    "input": "The first line will contain a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of mountains. The second line of each test case contains n integers h_ 1, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 9 ) , where h_ i is the height of the i - th mountain. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output n integers \u2014 the given heights in an order that maximizes the difficulty score among all orders that minimize | h_ 1- h_ n| . If there are multiple orders that satisfy these requirements, you may output any.",
    "note": "In the first test case: The player begins at height 2 , next going up to height 4 increasing the difficulty by 1 . After that he will go down to height 1 and the difficulty doesn' t change because he is going downhill. Finally the player will go up to height 2 and the difficulty will increase by 1 . The absolute difference between the starting height and the end height is equal to 0 and it' s minimal. The difficulty is maximal. In the second test case: The player begins at height 1 , next going up to height 3 increasing the difficulty by 1 . The absolute difference between the starting height and the end height is equal to 2 and it' s minimal as they are the only heights. The difficulty is maximal.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1537C"
  },
  {
    "title": "Bad Boy",
    "url": "https://codeforces.com/problemset/problem/1537/B",
    "history": "Riley is a very bad boy, but at the same time, he is a yo- yo master. So, he decided to use his yo- yo skills to annoy his friend Anton. Anton' s room can be represented as a grid with n rows and m columns. Let ( i, j) denote the cell in row i and column j . Anton is currently standing at position ( i, j) in his room. To annoy Anton, Riley decided to throw exactly two yo- yos in cells of the room ( they can be in the same cell) . Because Anton doesn' t like yo- yos thrown on the floor, he has to pick up both of them and return back to the initial position. The distance travelled by Anton is the shortest path that goes through the positions of both yo- yos and returns back to ( i, j) by travelling only to adjacent by side cells. That is, if he is in cell ( x, y) then he can travel to the cells ( x + 1, y) , ( x - 1, y) , ( x, y + 1) and ( x, y - 1) in one step ( if a cell with those coordinates exists) . Riley is wondering where he should throw these two yo- yos so that the distance travelled by Anton is maximized. But because he is very busy, he asked you to tell him.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The only line of each test case contains four integers n , m , i , j ( 1 \u2264 n, m \u2264 10^ 9 , 1\u2264 i\u2264 n , 1\u2264 j\u2264 m ) \u2014 the dimensions of the room, and the cell at which Anton is currently standing.",
    "output": "For each test case, print four integers x_ 1 , y_ 1 , x_ 2 , y_ 2 ( 1 \u2264 x_ 1, x_ 2 \u2264 n , 1\u2264 y_ 1, y_ 2\u2264 m ) \u2014 the coordinates of where the two yo- yos should be thrown. They will be thrown at coordinates ( x_ 1, y_ 1) and ( x_ 2, y_ 2) . If there are multiple answers, you may print any.",
    "note": "Here is a visualization of the first test case.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1537B"
  },
  {
    "title": "Arithmetic Array",
    "url": "https://codeforces.com/problemset/problem/1537/A",
    "history": "An array b of length k is called good if its arithmetic mean is equal to 1 . More formally, if b_ 1 + \u22ef + b_ k/ k= 1. Note that the value b_ 1+ \u22ef+ b_ k/ k is not rounded up or down. For example, the array [ 1, 1, 1, 2] has an arithmetic mean of 1. 25 , which is not equal to 1 . You are given an integer array a of length n . In an operation, you can append a non- negative integer to the end of the array. What' s the minimum number of operations required to make the array good? We have a proof that it is always possible with finitely many operations.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of the initial array a . The second line of each test case contains n integers a_ 1, . . . , a_ n ( - 10^ 4\u2264 a_ i \u2264 10^ 4 ) , the elements of the array.",
    "output": "For each test case, output a single integer \u2014 the minimum number of non- negative integers you have to append to the array so that the arithmetic mean of the array will be exactly 1 .",
    "note": "In the first test case, we don' t need to add any element because the arithmetic mean of the array is already 1 , so the answer is 0 . In the second test case, the arithmetic mean is not 1 initially so we need to add at least one more number. If we add 0 then the arithmetic mean of the whole array becomes 1 , so the answer is 1 . In the third test case, the minimum number of elements that need to be added is 16 since only non- negative integers can be added. In the fourth test case, we can add a single integer 4 . The arithmetic mean becomes - 2+ 4/ 2 which is equal to 1 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1537A"
  },
  {
    "title": "Omkar and Medians",
    "url": "https://codeforces.com/problemset/problem/1536/D",
    "history": "Uh oh! Ray lost his array yet again! However, Omkar might be able to help because he thinks he has found the OmkArray of Ray' s array. The OmkArray of an array a with elements a_ 1, a_ 2, . . . , a_ 2k- 1 , is the array b with elements b_ 1, b_ 2, . . . , b_ k such that b_ i is equal to the median of a_ 1, a_ 2, . . . , a_ 2i- 1 for all i . Omkar has found an array b of size n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , - 10^ 9 \u2264 b_ i \u2264 10^ 9 ) . Given this array b , Ray wants to test Omkar' s claim and see if b actually is an OmkArray of some array a . Can you help Ray? The median of a set of numbers a_ 1, a_ 2, . . . , a_ 2i- 1 is the number c_ i where c_ 1, c_ 2, . . . , c_ 2i- 1 represents a_ 1, a_ 2, . . . , a_ 2i- 1 sorted in nondecreasing order.",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array b . The second line contains n integers b_ 1, b_ 2, . . . , b_ n ( - 10^ 9 \u2264 b_ i \u2264 10^ 9 ) \u2014 the elements of b . It is guaranteed the sum of n across all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one line containing YES if there exists an array a such that b_ i is the median of a_ 1, a_ 2, . . . , a_ 2i- 1 for all i , and NO otherwise. The case of letters in YES and NO do not matter ( so yEs and No will also be accepted) .",
    "note": "In the second case of the first sample, the array [ 4] will generate an OmkArray of [ 4] , as the median of the first element is 4 . In the fourth case of the first sample, the array [ 3, 2, 5] will generate an OmkArray of [ 3, 3] , as the median of 3 is 3 and the median of 2, 3, 5 is 3 . In the fifth case of the first sample, the array [ 2, 1, 0, 3, 4, 4, 3] will generate an OmkArray of [ 2, 1, 2, 3] as the median of 2 is 2 the median of 0, 1, 2 is 1 the median of 0, 1, 2, 3, 4 is 2 and the median of 0, 1, 2, 3, 3, 4, 4 is 3 . In the second case of the second sample, the array [ 1, 0, 4, 3, 5, - 2, - 2, - 2, - 4, - 3, - 4, - 1, 5] will generate an OmkArray of [ 1, 1, 3, 1, 0, - 2, - 1] , as the median of 1 is 1 the median of 0, 1, 4 is 1 the median of 0, 1, 3, 4, 5 is 3 the median of - 2, - 2, 0, 1, 3, 4, 5 is 1 the median of - 4, - 2, - 2, - 2, 0, 1, 3, 4, 5 is 0 the median of - 4, - 4, - 3, - 2, - 2, - 2, 0, 1, 3, 4, 5 is - 2 and the median of - 4, - 4, - 3, - 2, - 2, - 2, - 1, 0, 1, 3, 4, 5, 5 is - 1 For all cases where the answer is NO, it can be proven that it is impossible to find an array a such that b is the OmkArray of a .",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1536D"
  },
  {
    "title": "Gold Transfer",
    "url": "https://codeforces.com/problemset/problem/1535/E",
    "history": "You are given a rooted tree. Each vertex contains a_ i tons of gold, which costs c_ i per one ton. Initially, the tree consists only a root numbered 0 with a_ 0 tons of gold and price c_ 0 per ton. There are q queries. Each query has one of two types: Add vertex i ( where i is an index of query) as a son to some vertex p_ i ; vertex i will have a_ i tons of gold with c_ i per ton. It' s guaranteed that c_ i > c_ p_ i . For a given vertex v_ i consider the simple path from v_ i to the root. We need to purchase w_ i tons of gold from vertices on this path, spending the minimum amount of money. If there isn' t enough gold on the path, we buy all we can. If we buy x tons of gold in some vertex v the remaining amount of gold in it decreases by x ( of course, we can' t buy more gold that vertex has at the moment) . For each query of the second type, calculate the resulting amount of gold we bought and the amount of money we should spend. Note that you should solve the problem in online mode. It means that you can' t read the whole input at once. You can read each query only after writing the answer for the last query, so don' t forget to flush output after printing answers. You can use functions like fflush( stdout) in C+ + and BufferedWriter. flush in Java or similar after each writing in your program. In standard ( if you don' t tweak I/ O) , endl flushes cout in C+ + and System. out. println in Java ( or println in Kotlin) makes automatic flush as well.",
    "input": "The first line contains three integers q , a_ 0 and c_ 0 ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ; 1 \u2264 a_ 0, c_ 0 < 10^ 6 ) \u2014 the number of queries, the amount of gold in the root and its price. Next q lines contain descriptions of queries; The i - th query has one of two types: \" 1 p_ i a_ i c_ i \" ( 0 \u2264 p_ i < i ; 1 \u2264 a_ i, c_ i < 10^ 6 ) : add vertex i as a son to vertex p_ i . The vertex i will have a_ i tons of gold with price c_ i per one ton. It' s guaranteed that p_ i exists and c_ i > c_ p_ i . \" 2 v_ i w_ i \" ( 0 \u2264 v_ i < i ; 1 \u2264 w_ i < 10^ 6 ) : buy w_ i tons of gold from vertices on path from v_ i to 0 spending the minimum amount of money. If there isn' t enough gold, we buy as much as we can. It' s guaranteed that vertex v_ i exist. It' s guaranteed that there is at least one query of the second type.",
    "output": "For each query of the second type, print the resulting amount of gold we bought and the minimum amount of money we should spend.",
    "note": "Explanation of the sample: At the first query, the tree consist of root, so we purchase 2 tons of gold and pay 2 \u00b7 2 = 4 . 3 tons remain in the root. At the second query, we add vertex 2 as a son of vertex 0 . Vertex 2 now has 3 tons of gold with price 4 per one ton. At the third query, a path from 2 to 0 consists of only vertices 0 and 2 and since c_ 0 < c_ 2 we buy 3 remaining tons of gold in vertex 0 and 1 ton in vertex 2 . So we bought 3 + 1 = 4 tons and paid 3 \u00b7 2 + 1 \u00b7 4 = 10 . Now, in vertex 0 no gold left and 2 tons of gold remain in vertex 2 . At the fourth query, we add vertex 4 as a son of vertex 0 . Vertex 4 now has 1 ton of gold with price 3 . At the fifth query, a path from 4 to 0 consists of only vertices 0 and 4 . But since no gold left in vertex 0 and only 1 ton is in vertex 4 , we buy 1 ton of gold in vertex 4 and spend 1 \u00b7 3 = 3 . Now, in vertex 4 no gold left.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "interactive",
      "trees"
    ],
    "id": "1535E"
  },
  {
    "title": "Unstable String",
    "url": "https://codeforces.com/problemset/problem/1535/C",
    "history": "You are given a string s consisting of the characters 0, 1, and ? . Let' s call a string unstable if it consists of the characters 0 and 1 and any two adjacent characters are different ( i. e. it has the form 010101. . . or 101010. . . ) . Let' s call a string beautiful if it consists of the characters 0, 1, and ? , and you can replace the characters ? to 0 or 1 ( for each character, the choice is independent) , so that the string becomes unstable. For example, the strings 0? ? 10, 0, and ? ? ? are beautiful, and the strings 00 and ? 1? ? 1 are not. Calculate the number of beautiful contiguous substrings of the string s .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 number of test cases. The first and only line of each test case contains the string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) consisting of characters 0, 1, and ? . It is guaranteed that the sum of the string lengths over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the number of beautiful substrings of the string s .",
    "note": "",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "implementation",
      "strings",
      "two pointers"
    ],
    "id": "1535C"
  },
  {
    "title": "Array Reodering",
    "url": "https://codeforces.com/problemset/problem/1535/B",
    "history": "You are given an array a consisting of n integers. Let' s call a pair of indices i , j good if 1 \u2264 i < j \u2264 n and ( a_ i, 2a_ j) > 1 ( where ( x, y) is the greatest common divisor of x and y ) . Find the maximum number of good index pairs if you can reorder the array a in an arbitrary way.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of the test case contains a single integer n ( 2 \u2264 n \u2264 2000 ) \u2014 the number of elements in the array. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) . It is guaranteed that the sum of n over all test cases does not exceed 2000 .",
    "output": "For each test case, output a single integer \u2014 the maximum number of good index pairs if you can reorder the array a in an arbitrary way.",
    "note": "In the first example, the array elements can be rearranged as follows: [ 6, 3, 5, 3] . In the third example, the array elements can be rearranged as follows: [ 4, 4, 2, 1, 1] .",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "number theory",
      "sortings"
    ],
    "id": "1535B"
  },
  {
    "title": "Falling Sand (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1534/F2",
    "history": "This is the hard version of the problem. The difference between the versions is the constraints on a_ i . You can make hacks only if all versions of the problem are solved. Little Dormi has recently received a puzzle from his friend and needs your help to solve it. The puzzle consists of an upright board with n rows and m columns of cells, some empty and some filled with blocks of sand, and m non- negative integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) . In this version of the problem, a_ i will always be not greater than the number of blocks of sand in column i . When a cell filled with a block of sand is disturbed, the block of sand will fall from its cell to the sand counter at the bottom of the column ( each column has a sand counter) . While a block of sand is falling, other blocks of sand that are adjacent at any point to the falling block of sand will also be disturbed and start to fall. Specifically, a block of sand disturbed at a cell ( i, j) will pass through all cells below and including the cell ( i, j) within the column, disturbing all adjacent cells along the way. Here, the cells adjacent to a cell ( i, j) are defined as ( i- 1, j) , ( i, j- 1) , ( i+ 1, j) , and ( i, j+ 1) ( if they are within the grid) . Note that the newly falling blocks can disturb other blocks. In one operation you are able to disturb any piece of sand. The puzzle is solved when there are at least a_ i blocks of sand counted in the i - th sand counter for each column from 1 to m . You are now tasked with finding the minimum amount of operations in order to solve the puzzle. Note that Little Dormi will never give you a puzzle that is impossible to solve.",
    "input": "The first line consists of two space- separated positive integers n and m ( 1 \u2264 n \u00b7 m \u2264 400 000 ) . Each of the next n lines contains m characters, describing each row of the board. If a character on a line is ' . ' , the corresponding cell is empty. If it is ' # ' , the cell contains a block of sand. The final line contains m non- negative integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) \u2014 the minimum amount of blocks of sand that needs to fall below the board in each column. In this version of the problem, a_ i will always be not greater than the number of blocks of sand in column i .",
    "output": "Print one non- negative integer, the minimum amount of operations needed to solve the puzzle.",
    "note": "For example 1 , by disturbing both blocks of sand on the first row from the top at the first and sixth columns from the left, and the block of sand on the second row from the top and the fourth column from the left, it is possible to have all the required amounts of sand fall in each column. It can be proved that this is not possible with fewer than 3 operations, and as such the answer is 3 . Here is the puzzle from the first example. For example 2 , by disturbing the cell on the top row and rightmost column, one can cause all of the blocks of sand in the board to fall into the counters at the bottom. Thus, the answer is 1 . Here is the puzzle from the second example. For example 3 , by disturbing the cell on the top row and rightmost column, it is possible to have all the required amounts of sand fall in each column. It can be proved that this is not possible with fewer than 1 operation, and as such the answer is 1 . Here is the puzzle from the third example.",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1534F2"
  },
  {
    "title": "Falling Sand (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1534/F1",
    "history": "This is the easy version of the problem. The difference between the versions is the constraints on a_ i . You can make hacks only if all versions of the problem are solved. Little Dormi has recently received a puzzle from his friend and needs your help to solve it. The puzzle consists of an upright board with n rows and m columns of cells, some empty and some filled with blocks of sand, and m non- negative integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) . In this version of the problem, a_ i will be equal to the number of blocks of sand in column i . When a cell filled with a block of sand is disturbed, the block of sand will fall from its cell to the sand counter at the bottom of the column ( each column has a sand counter) . While a block of sand is falling, other blocks of sand that are adjacent at any point to the falling block of sand will also be disturbed and start to fall. Specifically, a block of sand disturbed at a cell ( i, j) will pass through all cells below and including the cell ( i, j) within the column, disturbing all adjacent cells along the way. Here, the cells adjacent to a cell ( i, j) are defined as ( i- 1, j) , ( i, j- 1) , ( i+ 1, j) , and ( i, j+ 1) ( if they are within the grid) . Note that the newly falling blocks can disturb other blocks. In one operation you are able to disturb any piece of sand. The puzzle is solved when there are at least a_ i blocks of sand counted in the i - th sand counter for each column from 1 to m . You are now tasked with finding the minimum amount of operations in order to solve the puzzle. Note that Little Dormi will never give you a puzzle that is impossible to solve.",
    "input": "The first line consists of two space- separated positive integers n and m ( 1 \u2264 n \u00b7 m \u2264 400 000 ) . Each of the next n lines contains m characters, describing each row of the board. If a character on a line is ' . ' , the corresponding cell is empty. If it is ' # ' , the cell contains a block of sand. The final line contains m non- negative integers a_ 1, a_ 2, . . . , a_ m ( 0 \u2264 a_ i \u2264 n ) \u2014 the minimum amount of blocks of sand that needs to fall below the board in each column. In this version of the problem, a_ i will be equal to the number of blocks of sand in column i .",
    "output": "Print one non- negative integer, the minimum amount of operations needed to solve the puzzle.",
    "note": "For example 1 , by disturbing both blocks of sand on the first row from the top at the first and sixth columns from the left, and the block of sand on the second row from the top and the fourth column from the left, it is possible to have all the required amounts of sand fall in each column. It can be proved that this is not possible with fewer than 3 operations, and as such the answer is 3 . Here is the puzzle from the first example. For example 2 , by disturbing the cell on the top row and rightmost column, one can cause all of the blocks of sand in the board to fall into the counters at the bottom. Thus, the answer is 1 . Here is the puzzle from the second example.",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1534F1"
  },
  {
    "title": "Lost Array",
    "url": "https://codeforces.com/problemset/problem/1534/E",
    "history": "This is an interactive problem. Note: the XOR- sum of an array a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) is defined as a_ 1 \u2295 a_ 2 \u2295. . . \u2295 a_ n , where \u2295 denotes the bitwise XOR operation. Little Dormi received an array of n integers a_ 1, a_ 2, . . . , a_ n for Christmas. However, while playing with it over the winter break, he accidentally dropped it into his XOR machine, and the array got lost. The XOR machine is currently configured with a query size of k ( which you cannot change) , and allows you to perform the following type of query: by giving the machine k distinct indices x_ 1, x_ 2, . . . , x_ k , it will output a_ x_ 1\u2295 a_ x_ 2\u2295. . . \u2295 a_ x_ k . As Little Dormi' s older brother, you would like to help him recover the XOR- sum of his array a_ 1, a_ 2, . . . , a_ n by querying the XOR machine. Little Dormi isn' t very patient, so to be as fast as possible, you must query the XOR machine the minimum number of times to find the XOR- sum of his array. Formally, let d be the minimum number of queries needed to find the XOR- sum of any array of length n with a query size of k . Your program will be accepted if you find the correct XOR- sum in at most d queries. Lastly, you also noticed that with certain configurations of the machine k and values of n , it may not be possible to recover the XOR- sum of Little Dormi' s lost array. If that is the case, you should report it as well. The array a_ 1, a_ 2, . . . , a_ n is fixed before you start querying the XOR machine and does not change with the queries. InteractionEach query is made in the format \" ? b\" , where b is an array of exactly k distinct integers from 1 to n denoting the indices of the elements in the lost array that you want to query the XOR sum of. You will then receive an integer x , the XOR sum of the queried elements. It can be proven that 0 \u2264 x \u2264 2 \u00b7 10^ 9 will always be true. After printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. If at any point you make an invalid query or try to make more than 500 queries ( which is the hard limit) , the interaction will terminate immediately and give you a Wrong Answer verdict. Note that if you exceed d queries, the interaction will continue normally unless you also exceed the 500 query hard limit, though you will still receive a Wrong Answer verdict either way. HacksTo hack a solution, use the following format. The first line contains the integers n and k ( 1 \u2264 n \u2264 500 , 1 \u2264 k \u2264 n ) . The second line contains the the array a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "input": "The only line of input contains the integers n and k ( 1 \u2264 n \u2264 500 , 1 \u2264 k \u2264 n ) , the length of the lost array and the configured query size of the XOR machine. Elements of the original array satisfy 1 \u2264 a_ i \u2264 10^ 9 . It can be proven that that if it is possible to recover the XOR sum under the given constraints, it can be done in at most 500 queries. That is, d \u2264 500 . After taking n and k , begin interaction.",
    "output": "If it is impossible to recover the XOR- sum of the array, output - 1 immediately after taking n and k . Do not begin interaction. Otherwise, when your program finds the XOR- sum of the lost array a_ 1, a_ 2, . . . , a_ n , report the answer in the following format: \" ! x\" , where x is the XOR sum of the array a_ 1, a_ 2, . . . , a_ n , and terminate your program normally immediately after flushing the output stream. Note that answering does not count as a query.",
    "note": "In the first example interaction, the array a_ 1, a_ 2, . . . , a_ n is 2, 1, 7, 5, 6 and its XOR- sum is 7 . The first query made asks for indices 1, 2, 3 , so the response is a_ 1 \u2295 a_ 2 \u2295 a_ 3 = 2 \u2295 1 \u2295 7 = 4 . The second query made asks for indices 2, 3, 5 , so the response is a_ 2 \u2295 a_ 3 \u2295 a_ 5 = 1 \u2295 7 \u2295 6 = 0 . The third query made asks for indices 4, 1, 5 , so the response is a_ 4 \u2295 a_ 1 \u2295 a_ 5 = 5 \u2295 2 \u2295 6 = 1 . Note that the indices may be output in any order. Additionally, even though three queries were made in the example interaction, it is just meant to demonstrate the interaction format and does not necessarily represent an optimal strategy. In the second example interaction, there is no way to recover the XOR- sum of Little Dormi' s array no matter what is queried, so the program immediately outputs - 1 and exits.",
    "topics": [
      "graphs",
      "greedy",
      "interactive",
      "shortest paths"
    ],
    "id": "1534E"
  },
  {
    "title": "Histogram Ugliness",
    "url": "https://codeforces.com/problemset/problem/1534/B",
    "history": "Little Dormi received a histogram with n bars of height a_ 1, a_ 2, . . . , a_ n for Christmas. However, the more he played with his new histogram, the more he realized its imperfections, so today he wanted to modify it to his liking. To modify the histogram, Little Dormi is able to perform the following operation an arbitrary number of times: Select an index i ( 1 \u2264 i \u2264 n ) where a_ i> 0 , and assign a_ i : = a_ i- 1 . Little Dormi defines the ugliness score of his histogram ( after performing some number of operations) as the sum of the vertical length of its outline and the number of operations he performed on it. And to make the histogram as perfect as possible, he would like to minimize the ugliness score after modifying it with some number of operations. However, as his histogram is very large, Little Dormi is having trouble minimizing the ugliness score, so as Little Dormi' s older brother, help him find the minimal ugliness. Consider the following example where the histogram has 4 columns of heights 4, 8, 9, 6 : The blue region represents the histogram, and the red lines represent the vertical portion of the outline. Currently, the vertical length of the outline is 4+ 4+ 1+ 3+ 6 = 18 , so if Little Dormi does not modify the histogram at all, the ugliness would be 18 . However, Little Dormi can apply the operation once on column 2 and twice on column 3 , resulting in a histogram with heights 4, 7, 7, 6 : Now, as the total vertical length of the outline ( red lines) is 4+ 3+ 1+ 6= 14 , the ugliness is 14+ 3= 17 dollars. It can be proven that this is optimal.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 4 \u00b7 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 4 \u00b7 10^ 5 .",
    "output": "For each test case output one integer, the minimal ugliness Little Dormi can achieve with the histogram in that test case.",
    "note": "Example 1 is the example described in the statement. The initial histogram for example 2 is given below: The ugliness is currently 2+ 1+ 6+ 3+ 4= 16 . By applying the operation once on column 1 , six times on column 3 , and three times on column 4 , we can end up with a histogram with heights 1, 1, 1, 1, 0, 0 : The vertical length of the outline is now 1+ 1= 2 and Little Dormi made 1+ 6+ 3= 10 operations, so the final ugliness is 2+ 10= 12 , which can be proven to be optimal.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1534B"
  },
  {
    "title": "Binary String Partition",
    "url": "https://codeforces.com/problemset/problem/1533/F",
    "history": "Let' s call a string t consisting of characters 0 and/ or 1 beautiful, if either the number of occurrences of character 0 in this string does not exceed k , or the number of occurrences of characters 1 in this string does not exceed k ( or both) . For example, if k = 3 , the strings 101010, 111, 0, 00000, 1111111000 are beautiful, and the strings 1111110000, 01010101 are not beautiful. You are given a string s . You have to divide it into the minimum possible number of beautiful strings, i. e. , find a sequence of strings t_ 1, t_ 2, . . . , t_ m such that every t_ i is beautiful, t_ 1 + t_ 2 + . . . + t_ m = s ( where + is the concatenation operator) , and m is minimum possible. For every k from 1 to | s| , find the minimum possible number of strings such that s can be divided into them ( i. e. the minimum possible m in the partition) .",
    "input": "The only line contains one string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) . Each character of s is either 0 or 1.",
    "output": "Print | s| integers. The i - th integer should be equal to the minimum number of strings in the partition of s , when k = i .",
    "note": "",
    "topics": [
      "*special",
      "binary search",
      "greedy"
    ],
    "id": "1533F"
  },
  {
    "title": "Chess Team Forming",
    "url": "https://codeforces.com/problemset/problem/1533/E",
    "history": "Polycarp is coaching a team for an upcoming game at the chess tournament. A complete team for the tournament should consist of n+ 1 members. There are n members in his team, the i - th member' s skill value is a_ i . Polycarp is yet to choose the final member for the team. The opposing team has n+ 1 members, the j - th member' s skill value is b_ j . Polycarp has m options for the final player of the team. The k - th of them has a skill value c_ k . Before the game starts, Polycarp pairs up the members of his team with the members of the opposing team. Every member of both teams is in exactly one pair. The difficulty of a game for a certain player is the difference between his paired opponent' s skill and his own skill. So if the i - th player of the Polycarp' s team is paired up with the j - th member of the opposing team, then the difficulty is equal to b_ j - a_ i . The difficulty of the game for a team is the maximum difficulty of all its players. So, before the game starts, Polycarp wants to pair up the players in such a way that the difficulty of the game for his team is minimized. For each of the m options for the final player print the smallest difficulty of the game for the team Polycarp can achieve.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of members in the Polycarp' s team. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the skill value of the i - th player of the Polycarp' s team. The third line contains n+ 1 integers b_ 1, b_ 2, . . . , b_ n+ 1 ( 1 \u2264 b_ j \u2264 10^ 9 ) , where b_ j is the skill value of the j - th player of the opposing team. The fourth line contains a single integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of options for the final player. The fifth line contains m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ k \u2264 10^ 9 ) , where c_ k is the skill value of the k - th of the options for the final player of the Polycarp' s team.",
    "output": "Print m integers \u2014 the k - th of them should be equal to the smallest difficulty of the game for the team Polycarp can achieve if he picks the k - th option player as the final one.",
    "note": "In the first example the optimal pairings for the first three options are the following. Note that there might be multiple valid pairing for the minimum answer. First option: Polycarp' s team: 6 1 3 1 10 4Opposing team: 9 4 2 5 9 8The respective difficulties of the game for each player are: 3, 3, - 1, 4, - 1, 4. The maximum is 4, thus it' s the difficulty of the game for the team. Second option: Polycarp' s team: 10 4 1 3 7 6Opposing team: 9 4 2 5 9 8Third option: Polycarp' s team: 6 3 1 4 10 6Opposing team: 9 4 2 5 9 8",
    "topics": [
      "*special",
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1533E"
  },
  {
    "title": "Minimax",
    "url": "https://codeforces.com/problemset/problem/1530/E",
    "history": "Prefix function of string t = t_ 1 t_ 2 . . . t_ n and position i in it is defined as the length k of the longest proper ( not equal to the whole substring) prefix of substring t_ 1 t_ 2 . . . t_ i which is also a suffix of the same substring. For example, for string t = abacaba the values of the prefix function in positions 1, 2, . . . , 7 are equal to [ 0, 0, 1, 0, 1, 2, 3] . Let f( t) be equal to the maximum value of the prefix function of string t over all its positions. For example, f( abacaba ) = 3 . You are given a string s . Reorder its characters arbitrarily to get a string t ( the number of occurrences of any character in strings s and t must be equal) . The value of f( t) must be minimized. Out of all options to minimize f( t) , choose the one where string t is the lexicographically smallest.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The only line of each test case contains string s ( 1 \u2264 | s| \u2264 10^ 5 ) consisting of lowercase English letters. It is guaranteed that the sum of lengths of s over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single string t . The multisets of letters in strings s and t must be equal. The value of f( t) , the maximum of prefix functions in string t , must be as small as possible. String t must be the lexicographically smallest string out of all strings satisfying the previous conditions.",
    "note": "A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b . In the first test case, f( t) = 0 and the values of prefix function are [ 0, 0, 0, 0, 0] for any permutation of letters. String ckpuv is the lexicographically smallest permutation of letters of string vkcup. In the second test case, f( t) = 1 and the values of prefix function are [ 0, 1, 0, 1, 0, 1, 0] . In the third test case, f( t) = 5 and the values of prefix function are [ 0, 1, 2, 3, 4, 5] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1530E"
  },
  {
    "title": "Secret Santa",
    "url": "https://codeforces.com/problemset/problem/1530/D",
    "history": "Every December, VK traditionally holds an event for its employees named \" Secret Santa\" . Here' s how it happens. n employees numbered from 1 to n take part in the event. Each employee i is assigned a different employee b_ i , to which employee i has to make a new year gift. Each employee is assigned to exactly one other employee, and nobody is assigned to themselves ( but two employees may be assigned to each other) . Formally, all b_ i must be distinct integers between 1 and n , and for any i , b_ i i must hold. The assignment is usually generated randomly. This year, as an experiment, all event participants have been asked who they wish to make a gift to. Each employee i has said that they wish to make a gift to employee a_ i . Find a valid assignment b that maximizes the number of fulfilled wishes of the employees.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. Each test case consists of two lines. The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of participants of the event. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ; a_ i i ) \u2014 wishes of the employees in order from 1 to n . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print two lines. In the first line, print a single integer k ( 0 \u2264 k \u2264 n ) \u2014 the number of fulfilled wishes in your assignment. In the second line, print n distinct integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ; b_ i i ) \u2014 the numbers of employees assigned to employees 1, 2, . . . , n . k must be equal to the number of values of i such that a_ i = b_ i , and must be as large as possible. If there are multiple answers, print any.",
    "note": "In the first test case, two valid assignments exist: [ 3, 1, 2] and [ 2, 3, 1] . The former assignment fulfills two wishes, while the latter assignment fulfills only one. Therefore, k = 2 , and the only correct answer is [ 3, 1, 2] .",
    "topics": [
      "constructive algorithms",
      "flows",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1530D"
  },
  {
    "title": "Pursuit",
    "url": "https://codeforces.com/problemset/problem/1530/C",
    "history": "You and your friend Ilya are participating in an individual programming contest consisting of multiple stages. A contestant can get between 0 and 100 points, inclusive, for each stage, independently of other contestants. Points received by contestants in different stages are used for forming overall contest results. Suppose that k stages of the contest are completed. For each contestant, k - \u230ak/ 4\u230b stages with the highest scores are selected, and these scores are added up. This sum is the overall result of the contestant. ( Here \u230a t \u230b denotes rounding t down. ) For example, suppose 9 stages are completed, and your scores are 50, 30, 50, 50, 100, 10, 30, 100, 50 . First, 7 stages with the highest scores are chosen \u2014 for example, all stages except for the 2 - nd and the 6 - th can be chosen. Then your overall result is equal to 50 + 50 + 50 + 100 + 30 + 100 + 50 = 430 . As of now, n stages are completed, and you know the points you and Ilya got for these stages. However, it is unknown how many more stages will be held. You wonder what the smallest number of additional stages is, after which your result might become greater than or equal to Ilya' s result, at least in theory. Find this number!",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of completed stages. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 100 ) \u2014 your points for the completed stages. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 100 ) \u2014 Ilya' s points for the completed stages. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the smallest number of additional stages required for your result to be able to become greater than or equal to Ilya' s result. If your result is already not less than Ilya' s result, print 0 .",
    "note": "In the first test case, you have scored 100 points for the first stage, while Ilya has scored 0 . Thus, your overall result ( 100 ) is already not less than Ilya' s result ( 0 ) . In the second test case, you have scored 0 points for the first stage, while Ilya has scored 100 . A single stage with an opposite result is enough for both your and Ilya' s overall scores to become equal to 100 . In the third test case, your overall result is 30 + 40 + 50 = 120 , while Ilya' s result is 100 + 100 + 100 = 300 . After three additional stages your result might become equal to 420 , while Ilya' s result might become equal to 400 . In the fourth test case, your overall result after four additional stages might become equal to 470 , while Ilya' s result might become equal to 400 . Three stages are not enough.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1530C"
  },
  {
    "title": "Binary Decimal",
    "url": "https://codeforces.com/problemset/problem/1530/A",
    "history": "Let' s call a number a binary decimal if it' s a positive integer and all digits in its decimal notation are either 0 or 1 . For example, 1 010 111 is a binary decimal, while 10 201 and 787 788 are not. Given a number n , you are asked to represent n as a sum of some ( not necessarily distinct) binary decimals. Compute the smallest number of binary decimals required for that.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) , denoting the number of test cases. The only line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 9 ) , denoting the number to be represented.",
    "output": "For each test case, output the smallest number of binary decimals required to represent n as a sum.",
    "note": "In the first test case, 121 can be represented as 121 = 110 + 11 or 121 = 111 + 10 . In the second test case, 5 can be represented as 5 = 1 + 1 + 1 + 1 + 1 . In the third test case, 1 000 000 000 is a binary decimal itself, thus the answer is 1 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1530A"
  },
  {
    "title": "Sifid and Strange Subsequences",
    "url": "https://codeforces.com/problemset/problem/1529/B",
    "history": "A sequence ( b_ 1, b_ 2, . . . , b_ k) is called strange, if the absolute difference between any pair of its elements is greater than or equal to the maximum element in the sequence. Formally speaking, it' s strange if for every pair ( i, j) with 1 \u2264 i< j \u2264 k , we have | a_ i- a_ j| \u2265 MAX , where MAX is the largest element of the sequence. In particular, any sequence of length at most 1 is strange. For example, the sequences ( - 2021, - 1, - 1, - 1) and ( - 1, 0, 1) are strange, but ( 3, 0, 1) is not, because | 0 - 1| < 3 . Sifid has an array a of n integers. Sifid likes everything big, so among all the strange subsequences of a , he wants to find the length of the longest one. Can you help him? A sequence c is a subsequence of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements.",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 10^ 4) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1\u2264 n\u2264 10^ 5) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i \u2264 10^ 9) \u2014 the elements of the array a . It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the length of the longest strange subsequence of a .",
    "note": "In the first test case, one of the longest strange subsequences is ( a_ 1, a_ 2, a_ 3, a_ 4) In the second test case, one of the longest strange subsequences is ( a_ 1, a_ 3, a_ 4, a_ 5, a_ 7) . In the third test case, one of the longest strange subsequences is ( a_ 1, a_ 3, a_ 4, a_ 5) . In the fourth test case, one of the longest strange subsequences is ( a_ 2) . In the fifth test case, one of the longest strange subsequences is ( a_ 1, a_ 2, a_ 4) .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1529B"
  },
  {
    "title": "Eshag Loves Big Arrays",
    "url": "https://codeforces.com/problemset/problem/1529/A",
    "history": "Eshag has an array a consisting of n integers. Eshag can perform the following operation any number of times: choose some subsequence of a and delete every element from it which is strictly larger than AVG , where AVG is the average of the numbers in the chosen subsequence. For example, if a = [ 1 , 4 , 3 , 2 , 4] and Eshag applies the operation to the subsequence containing a_ 1 , a_ 2 , a_ 4 and a_ 5 , then he will delete those of these 4 elements which are larger than a_ 1+ a_ 2+ a_ 4+ a_ 5/ 4 = 11/ 4 , so after the operation, the array a will become a = [ 1 , 3 , 2] . Your task is to find the maximum number of elements Eshag can delete from the array a by applying the operation described above some number ( maybe, zero) times. A sequence b is a subsequence of an array c if b can be obtained from c by deletion of several ( possibly, zero or all) elements.",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 100) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1\u2264 n\u2264 100) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i \u2264 100) \u2014 the elements of the array a .",
    "output": "For each test case print a single integer \u2014 the maximum number of elements Eshag can delete from the array a .",
    "note": "Consider the first test case. Initially a = [ 1, 1, 1, 2, 2, 3] . In the first operation, Eshag can choose the subsequence containing a_ 1 , a_ 5 and a_ 6 , their average is equal to a_ 1 + a_ 5 + a_ 6/ 3 = 6/ 3 = 2 . So a_ 6 will be deleted. After this a = [ 1, 1, 1, 2, 2] . In the second operation, Eshag can choose the subsequence containing the whole array a , the average of all its elements is equal to 7/ 5 . So a_ 4 and a_ 5 will be deleted. After this a = [ 1, 1, 1] . In the second test case, Eshag can' t delete any element.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1529A"
  },
  {
    "title": "Trees of Tranquillity",
    "url": "https://codeforces.com/problemset/problem/1528/C",
    "history": "Soroush and Keshi each have a labeled and rooted tree on n vertices. Both of their trees are rooted from vertex 1 . Soroush and Keshi used to be at war. After endless decades of fighting, they finally became allies to prepare a Codeforces round. To celebrate this fortunate event, they decided to make a memorial graph on n vertices. They add an edge between vertices u and v in the memorial graph if both of the following conditions hold: One of u or v is the ancestor of the other in Soroush' s tree. Neither of u or v is the ancestor of the other in Keshi' s tree. Here vertex u is considered ancestor of vertex v , if u lies on the path from 1 ( the root) to the v . Popping out of nowhere, Mashtali tried to find the maximum clique in the memorial graph for no reason. He failed because the graph was too big. Help Mashtali by finding the size of the maximum clique in the memorial graph. As a reminder, clique is a subset of vertices of the graph, each two of which are connected by an edge.",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 3 \u00b7 10^ 5) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 2\u2264 n\u2264 3 \u00b7 10^ 5) . The second line of each test case contains n- 1 integers a_ 2, . . . , a_ n ( 1 \u2264 a_ i < i) , a_ i being the parent of the vertex i in Soroush' s tree. The third line of each test case contains n- 1 integers b_ 2, . . . , b_ n ( 1 \u2264 b_ i < i) , b_ i being the parent of the vertex i in Keshi' s tree. It is guaranteed that the given graphs are trees. It is guaranteed that the sum of n over all test cases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the size of the maximum clique in the memorial graph.",
    "note": "In the first and third test cases, you can pick any vertex. In the second test case, one of the maximum cliques is { 2, 3, 4, 5} . In the fourth test case, one of the maximum cliques is { 3, 4, 6} .",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1528C"
  },
  {
    "title": "Parsa's Humongous Tree",
    "url": "https://codeforces.com/problemset/problem/1528/A",
    "history": "Parsa has a humongous tree on n vertices. On each vertex v he has written two integers l_ v and r_ v . To make Parsa' s tree look even more majestic, Nima wants to assign a number a_ v ( l_ v \u2264 a_ v \u2264 r_ v ) to each vertex v such that the beauty of Parsa' s tree is maximized. Nima' s sense of the beauty is rather bizarre. He defines the beauty of the tree as the sum of | a_ u - a_ v| over all edges ( u, v) of the tree. Since Parsa' s tree is too large, Nima can' t maximize its beauty on his own. Your task is to find the maximum possible beauty for Parsa' s tree.",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 250) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2\u2264 n\u2264 10^ 5) \u2014 the number of vertices in Parsa' s tree. The i - th of the following n lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9) . Each of the next n- 1 lines contains two integers u and v ( 1 \u2264 u , v \u2264 n, u= \u0338 v) meaning that there is an edge between the vertices u and v in Parsa' s tree. It is guaranteed that the given graph is a tree. It is guaranteed that the sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print the maximum possible beauty for Parsa' s tree.",
    "note": "The trees in the example: In the first test case, one possible assignment is a = { 1, 8} which results in | 1 - 8| = 7 . In the second test case, one of the possible assignments is a = { 1, 5, 9} which results in a beauty of | 1 - 5| + | 5 - 9| = 8",
    "topics": [
      "dfs and similar",
      "divide and conquer",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1528A"
  },
  {
    "title": "Potions (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1526/C2",
    "history": "This is the hard version of the problem. The only difference is that in this version n \u2264 200000 . You can make hacks only if both versions of the problem are solved. There are n potions in a line, with potion 1 on the far left and potion n on the far right. Each potion will increase your health by a_ i when drunk. a_ i can be negative, meaning that potion will decrease will health. You start with 0 health and you will walk from left to right, from first potion to the last one. At each potion, you may choose to drink it or ignore it. You must ensure that your health is always non- negative. What is the largest number of potions you can drink?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200000 ) \u2014 the number of potions. The next line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) which represent the change in health after drinking that potion.",
    "output": "Output a single integer, the maximum number of potions you can drink without your health becoming negative.",
    "note": "For the sample, you can drink 5 potions by taking potions 1 , 3 , 4 , 5 and 6 . It is not possible to drink all 6 potions because your health will go negative at some point",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1526C2"
  },
  {
    "title": "Potions (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1526/C1",
    "history": "This is the easy version of the problem. The only difference is that in this version n \u2264 2000 . You can make hacks only if both versions of the problem are solved. There are n potions in a line, with potion 1 on the far left and potion n on the far right. Each potion will increase your health by a_ i when drunk. a_ i can be negative, meaning that potion will decrease will health. You start with 0 health and you will walk from left to right, from first potion to the last one. At each potion, you may choose to drink it or ignore it. You must ensure that your health is always non- negative. What is the largest number of potions you can drink?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of potions. The next line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) which represent the change in health after drinking that potion.",
    "output": "Output a single integer, the maximum number of potions you can drink without your health becoming negative.",
    "note": "For the sample, you can drink 5 potions by taking potions 1 , 3 , 4 , 5 and 6 . It is not possible to drink all 6 potions because your health will go negative at some point",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1526C1"
  },
  {
    "title": "Armchairs",
    "url": "https://codeforces.com/problemset/problem/1525/D",
    "history": "There are n armchairs, numbered from 1 to n from left to right. Some armchairs are occupied by people ( at most one person per armchair) , others are not. The number of occupied armchairs is not greater than n/ 2 . For some reason, you would like to tell people to move from their armchairs to some other ones. If the i - th armchair is occupied by someone and the j - th armchair is not, you can tell the person sitting in the i - th armchair to move to the j - th armchair. The time it takes a person to move from the i - th armchair to the j - th one is | i - j| minutes. You may perform this operation any number of times, but these operations must be done sequentially, i. e. you cannot tell a person to move until the person you asked to move in the last operation has finished moving to their destination armchair. You want to achieve the following situation: every seat that was initially occupied must be free. What is the minimum time you need to do it?",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 5000 ) \u2014 the number of armchairs. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) . a_ i = 1 means that the i - th armchair is initially occupied, a_ i = 0 means that it is initially free. The number of occupied armchairs is at most n/ 2 .",
    "output": "Print one integer \u2014 the minimum number of minutes you have to spend to achieve the following situation: every seat that was initially occupied must be free.",
    "note": "In the first test, you can perform the following sequence: ask a person to move from armchair 1 to armchair 2 , it takes 1 minute; ask a person to move from armchair 7 to armchair 6 , it takes 1 minute; ask a person to move from armchair 4 to armchair 5 , it takes 1 minute. In the second test, you can perform the following sequence: ask a person to move from armchair 1 to armchair 4 , it takes 3 minutes; ask a person to move from armchair 2 to armchair 6 , it takes 4 minutes; ask a person to move from armchair 4 to armchair 5 , it takes 1 minute; ask a person to move from armchair 3 to armchair 4 , it takes 1 minute. In the third test, no seat is occupied so your goal is achieved instantly.",
    "topics": [
      "dp",
      "flows",
      "graph matchings",
      "greedy"
    ],
    "id": "1525D"
  },
  {
    "title": "Robot Collisions",
    "url": "https://codeforces.com/problemset/problem/1525/C",
    "history": "There are n robots driving along an OX axis. There are also two walls: one is at coordinate 0 and one is at coordinate m . The i - th robot starts at an integer coordinate x_ i ( 0 < x_ i < m) and moves either left ( towards the 0 ) or right with the speed of 1 unit per second. No two robots start at the same coordinate. Whenever a robot reaches a wall, it turns around instantly and continues his ride in the opposite direction with the same speed. Whenever several robots meet at the same integer coordinate, they collide and explode into dust. Once a robot has exploded, it doesn' t collide with any other robot. Note that if several robots meet at a non- integer coordinate, nothing happens. For each robot find out if it ever explodes and print the time of explosion if it happens and - 1 otherwise.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The first line of each testcase contains two integers n and m ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ; 2 \u2264 m \u2264 10^ 8 ) \u2014 the number of robots and the coordinate of the right wall. The second line of each testcase contains n integers x_ 1, x_ 2, . . . , x_ n ( 0 < x_ i < m ) \u2014 the starting coordinates of the robots. The third line of each testcase contains n space- separated characters ' L' or ' R' \u2014 the starting directions of the robots ( ' L' stands for left and ' R' stands for right) . All coordinates x_ i in the testcase are distinct. The sum of n over all testcases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each testcase print n integers \u2014 for the i - th robot output the time it explodes at if it does and - 1 otherwise.",
    "note": "Here is the picture for the seconds 0, 1, 2 and 3 of the first testcase: Notice that robots 2 and 3 don' t collide because they meet at the same point 2. 5 , which is not integer. After second 3 robot 6 just drive infinitely because there' s no robot to collide with.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1525C"
  },
  {
    "title": "Permutation Sort",
    "url": "https://codeforces.com/problemset/problem/1525/B",
    "history": "You are given a permutation a consisting of n numbers 1 , 2 , . . . , n ( a permutation is an array in which each element from 1 to n occurs exactly once) . You can perform the following operation: choose some subarray ( contiguous subsegment) of a and rearrange the elements in it in any way you want. But this operation cannot be applied to the whole array. For example, if a = [ 2, 1, 4, 5, 3] and we want to apply the operation to the subarray a[ 2, 4] ( the subarray containing all elements from the 2 - nd to the 4 - th) , then after the operation, the array can become a = [ 2, 5, 1, 4, 3] or, for example, a = [ 2, 1, 5, 4, 3] . Your task is to calculate the minimum number of operations described above to sort the permutation a in ascending order.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of test cases. The first line of the test case contains a single integer n ( 3 \u2264 n \u2264 50 ) \u2014 the number of elements in the permutation. The second line of the test case contains n distinct integers from 1 to n \u2014 the given permutation a .",
    "output": "For each test case, output a single integer \u2014 the minimum number of operations described above to sort the array a in ascending order.",
    "note": "In the explanations, a[ i, j] defines the subarray of a that starts from the i - th element and ends with the j - th element. In the first test case of the example, you can select the subarray a[ 2, 3] and swap the elements in it. In the second test case of the example, the permutation is already sorted, so you don' t need to apply any operations. In the third test case of the example, you can select the subarray a[ 3, 5] and reorder the elements in it so a becomes [ 2, 1, 3, 4, 5] , and then select the subarray a[ 1, 2] and swap the elements in it, so a becomes [ 1, 2, 3, 4, 5] .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1525B"
  },
  {
    "title": "Compression and Expansion",
    "url": "https://codeforces.com/problemset/problem/1523/C",
    "history": "William is a huge fan of planning ahead. That is why he starts his morning routine by creating a nested list of upcoming errands. A valid nested list is any list which can be created from a list with one item \" 1\" by applying some operations. Each operation inserts a new item into the list, on a new line, just after one of existing items a_ 1 . a_ 2 . a_ 3 . \u22ef . a_ k and can be one of two types: Add an item a_ 1 . a_ 2 . a_ 3 . \u22ef . a_ k . 1 ( starting a list of a deeper level) , or Add an item a_ 1 . a_ 2 . a_ 3 . \u22ef . ( a_ k + 1) ( continuing the current level) . Operation can only be applied if the list does not contain two identical items afterwards. And also, if we consider every item as a sequence of numbers, then the sequence of items should always remain increasing in lexicographical order. Examples of valid and invalid lists that are shown in the picture can found in the \" Notes\" section. When William decided to save a Word document with the list of his errands he accidentally hit a completely different keyboard shortcut from the \" Ctrl- S\" he wanted to hit. It' s not known exactly what shortcut he pressed but after triggering it all items in the list were replaced by a single number: the last number originally written in the item number. William wants you to help him restore a fitting original nested list.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 3 ) , which is the number of lines in the list. Each of the next n lines contains a single integer a_ i ( 1 \u2264 a_ i \u2264 n ) , which is what remains of William' s nested list. It is guaranteed that in each test case at least one fitting list exists. It is guaranteed that the sum of values n across all test cases does not exceed 10^ 3 .",
    "output": "For each test case output n lines which represent a valid nested list, which could become the data provided to you by William. If there are multiple answers, print any.",
    "note": "In the second example test case one example of a fitting list is: 11. 1 1. 1. 11. 1. 21. 21. 2. 122. 12. 2This list can be produced by using the sequence of operations shown below: Original list with a single item 1 . Insert item 2 by using the insertion operation of the second type after item 1 . Insert item 1. 1 by using the insertion operation of the first type after item 1 . Insert item 1. 2 by using the insertion operation of the second type after item 1. 1 . Insert item 1. 1. 1 by using the insertion operation of the first type after item 1. 1 . Insert item 1. 1. 2 by using the insertion operation of the second type after item 1. 1. 1 . Insert item 1. 2. 1 by using the insertion operation of the first type after item 1. 2 . Insert item 2. 1 by using the insertion operation of the first type after item 2 . Insert item 2. 2 by using the insertion operation of the second type after item 2. 1 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1523C"
  },
  {
    "title": "Nastia and a Beautiful Matrix",
    "url": "https://codeforces.com/problemset/problem/1521/E",
    "history": "You like numbers, don' t you? Nastia has a lot of numbers and she wants to share them with you! Isn' t it amazing? Let a_ i be how many numbers i ( 1 \u2264 i \u2264 k ) you have. An n \u00d7 n matrix is called beautiful if it contains all the numbers you have, and for each 2 \u00d7 2 submatrix of the original matrix is satisfied: The number of occupied cells doesn' t exceed 3 ; The numbers on each diagonal are distinct. Make a beautiful matrix of minimum size.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The first line of each test case contains 2 integers m and k ( 1 \u2264 m, k \u2264 10^ 5 ) \u2014 how many numbers Nastia gave you and the length of the array a , respectively. The second line of each test case contains k integers a_ 1, a_ 2, . . . , a_ k ( 0 \u2264 a_ i \u2264 m , a_ 1 + a_ 2 + . . . + a_ k = m ) , where a_ i is how many numbers i you have. It' s guaranteed that the sum of m and k in one test doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each t test case print a single integer n \u2014 the size of the beautiful matrix. In the next n lines print n integers b_ i, j ( 0 \u2264 b_ i, j\u2264 k ; if position is empty, print b_ i, j = 0 ) \u2014 the beautiful matrix b you made up.",
    "note": "Note that 0 in this problem represents a blank, not a number. Examples of possible answers for the first test case: [ 1 1; 4 0; ] [ 1 4; 1 0; ] [ 4 0; 1 1; ] Examples of not beautiful matrices for the first test case: [ 1 0; 4 1; ] [ 4 1; 7 1; ] [ 1 0; 4 0; ] The example of the not beautiful matrix for the second test case: [ 3 4 0 2 2; 3 2 3 3 0; 0 1 0 0 0; 3 0 0 0 0; 2 1 3 3 3; ] Everything is okay, except the left- top submatrix contains 4 numbers.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1521E"
  },
  {
    "title": "Nastia Plays with a Tree",
    "url": "https://codeforces.com/problemset/problem/1521/D",
    "history": "Nastia has an unweighted tree with n vertices and wants to play with it! The girl will perform the following operation with her tree, as long as she needs: Remove any existing edge. Add an edge between any pair of vertices. What is the minimum number of operations Nastia needs to get a bamboo from a tree? A bamboo is a tree in which no node has a degree greater than 2 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices in the tree. Next n - 1 lines of each test cases describe the edges of the tree in form a_ i , b_ i ( 1 \u2264 a_ i, b_ i \u2264 n , a_ i = \u0338 b_ i ) . It' s guaranteed the given graph is a tree and the sum of n in one test doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case in the first line print a single integer k \u2014 the minimum number of operations required to obtain a bamboo from the initial tree. In the next k lines print 4 integers x_ 1 , y_ 1 , x_ 2 , y_ 2 ( 1 \u2264 x_ 1, y_ 1, x_ 2, y_ 2\u2264 n , x_ 1 = \u0338 y_ 1 , x_ 2 = \u0338 y_ 2 ) \u2014 this way you remove the edge ( x_ 1, y_ 1) and add an undirected edge ( x_ 2, y_ 2) . Note that the edge ( x_ 1, y_ 1) must be present in the graph at the moment of removing.",
    "note": "Note the graph can be unconnected after a certain operation. Consider the first test case of the example: The red edges are removed, and the green ones are added.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "dp",
      "dsu",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1521D"
  },
  {
    "title": "To Go Or Not To Go?",
    "url": "https://codeforces.com/problemset/problem/1520/G",
    "history": "Dima overslept the alarm clock, which was supposed to raise him to school. Dima wonders if he will have time to come to the first lesson. To do this, he needs to know the minimum time it will take him to get from home to school. The city where Dima lives is a rectangular field of n \u00d7 m size. Each cell ( i, j) on this field is denoted by one number a_ ij : The number - 1 means that the passage through the cell is prohibited; The number 0 means that the cell is free and Dima can walk though it. The number x ( 1 \u2264 x \u2264 10^ 9 ) means that the cell contains a portal with a cost of x . A cell with a portal is also considered free. From any portal, Dima can go to any other portal, while the time of moving from the portal ( i, j) to the portal ( x, y) corresponds to the sum of their costs a_ ij + a_ xy . In addition to moving between portals, Dima can also move between unoccupied cells adjacent to one side in time w . In particular, he can enter a cell with a portal and not use it. Initially, Dima is in the upper- left cell ( 1, 1) , and the school is in the lower right cell ( n, m) .",
    "input": "The first line contains three integers n , m and w ( 2 \u2264 n, m \u2264 2 \u00b7 10^ 3 , 1 \u2264 w \u2264 10^ 9 ) , where n and m are city size, w is time during which Dima moves between unoccupied cells. The next n lines each contain m numbers ( - 1 \u2264 a_ ij\u2264 10^ 9 ) \u2014 descriptions of cells. It is guaranteed that the cells ( 1, 1) and ( n, m) are free.",
    "output": "Output the minimum time it will take for Dima to get to school. If he cannot get to school at all, then output \" - 1\" .",
    "note": "Explanation for the first sample:",
    "topics": [
      "brute force",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1520G"
  },
  {
    "title": "Arranging The Sheep",
    "url": "https://codeforces.com/problemset/problem/1520/E",
    "history": "You are playing the game \" Arranging The Sheep\" . The goal of this game is to make the sheep line up. The level in the game is described by a string of length n , consisting of the characters ' . ' ( empty space) and ' * ' ( sheep) . In one move, you can move any sheep one square to the left or one square to the right, if the corresponding square exists and is empty. The game ends as soon as the sheep are lined up, that is, there should be no empty cells between any sheep. For example, if n= 6 and the level is described by the string \" * * . * . . \" , then the following game scenario is possible: the sheep at the 4 position moves to the right, the state of the level: \" * * . . * . \" ; the sheep at the 2 position moves to the right, the state of the level: \" * . * . * . \" ; the sheep at the 1 position moves to the right, the state of the level: \" . * * . * . \" ; the sheep at the 3 position moves to the right, the state of the level: \" . * . * * . \" ; the sheep at the 2 position moves to the right, the state of the level: \" . . * * * . \" ; the sheep are lined up and the game ends. For a given level, determine the minimum number of moves you need to make to complete the level.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 6 ) . The second line of each test case contains a string of length n , consisting of the characters ' . ' ( empty space) and ' * ' ( sheep) \u2014 the description of the level. It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 .",
    "output": "For each test case output the minimum number of moves you need to make to complete the level.",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1520E"
  },
  {
    "title": "Berland Regional",
    "url": "https://codeforces.com/problemset/problem/1519/C",
    "history": "Polycarp is an organizer of a Berland ICPC regional event. There are n universities in Berland numbered from 1 to n . Polycarp knows all competitive programmers in the region. There are n students: the i - th student is enrolled at a university u_ i and has a programming skill s_ i . Polycarp has to decide on the rules now. In particular, the number of members in the team. Polycarp knows that if he chooses the size of the team to be some integer k , each university will send their k strongest ( with the highest programming skill s ) students in the first team, the next k strongest students in the second team and so on. If there are fewer than k students left, then the team can' t be formed. Note that there might be universities that send zero teams. The strength of the region is the total skill of the members of all present teams. If there are no teams present, then the strength is 0 . Help Polycarp to find the strength of the region for each choice of k from 1 to n .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of universities and the number of students. The second line of each testcase contains n integers u_ 1, u_ 2, . . . , u_ n ( 1 \u2264 u_ i \u2264 n ) \u2014 the university the i - th student is enrolled at. The third line of each testcase contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the programming skill of the i - th student. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase print n integers: the strength of the region \u2014 the total skill of the members of the present teams \u2014 for each choice of team size k .",
    "note": "In the first testcase the teams from each university for each k are: k= 1 : university 1 : [ 6] , [ 5] , [ 5] , [ 3] ; university 2 : [ 8] , [ 1] , [ 1] ; k= 2 : university 1 : [ 6, 5] , [ 5, 3] ; university 2 : [ 8, 1] ; k= 3 : university 1 : [ 6, 5, 5] ; university 2 : [ 8, 1, 1] ; k= 4 : university 1 : [ 6, 5, 5, 3] ;",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "number theory",
      "sortings"
    ],
    "id": "1519C"
  },
  {
    "title": "Fillomino 2",
    "url": "https://codeforces.com/problemset/problem/1517/C",
    "history": "Fillomino is a classic logic puzzle. ( You do not need to know Fillomino in order to solve this problem. ) In one classroom in Yunqi town, some volunteers are playing a board game variant of it: Consider an n by n chessboard. Its rows are numbered from 1 to n from the top to the bottom. Its columns are numbered from 1 to n from the left to the right. A cell on an intersection of x - th row and y - th column is denoted ( x, y) . The main diagonal of the chessboard is cells ( x, x) for all 1 \u2264 x \u2264 n . A permutation of { 1, 2, 3, . . . , n} is written on the main diagonal of the chessboard. There is exactly one number written on each of the cells. The problem is to partition the cells under and on the main diagonal ( there are exactly 1+ 2+ . . . + n such cells) into n connected regions satisfying the following constraints: Every region should be connected. That means that we can move from any cell of a region to any other cell of the same region visiting only cells of the same region and moving from a cell to an adjacent cell. The x - th region should contain cell on the main diagonal with number x for all 1\u2264 x\u2264 n . The number of cells that belong to the x - th region should be equal to x for all 1\u2264 x\u2264 n . Each cell under and on the main diagonal should belong to exactly one region.",
    "input": "The first line contains a single integer n ( 1\u2264 n \u2264 500 ) denoting the size of the chessboard. The second line contains n integers p_ 1 , p_ 2 , . . . , p_ n . p_ i is the number written on cell ( i, i) . It is guaranteed that each integer from { 1, . . . , n} appears exactly once in p_ 1 , . . . , p_ n .",
    "output": "If no solution exists, output - 1 . Otherwise, output n lines. The i - th line should contain i numbers. The j - th number on the i - th line should be x if cell ( i, j) belongs to the the region with x cells.",
    "note": "The solutions to the examples are illustrated in the following pictures:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "implementation"
    ],
    "id": "1517C"
  },
  {
    "title": "Morning Jogging",
    "url": "https://codeforces.com/problemset/problem/1517/B",
    "history": "The 2050 volunteers are organizing the \" Run! Chase the Rising Sun\" activity. Starting on Apr 25 at 7: 30 am, runners will complete the 6km trail around the Yunqi town. There are n+ 1 checkpoints on the trail. They are numbered by 0 , 1 , . . . , n . A runner must start at checkpoint 0 and finish at checkpoint n . No checkpoint is skippable \u2014 he must run from checkpoint 0 to checkpoint 1 , then from checkpoint 1 to checkpoint 2 and so on. Look at the picture in notes section for clarification. Between any two adjacent checkpoints, there are m different paths to choose. For any 1\u2264 i\u2264 n , to run from checkpoint i- 1 to checkpoint i , a runner can choose exactly one from the m possible paths. The length of the j - th path between checkpoint i- 1 and i is b_ i, j for any 1\u2264 j\u2264 m and 1\u2264 i\u2264 n . To test the trail, we have m runners. Each runner must run from the checkpoint 0 to the checkpoint n once, visiting all the checkpoints. Every path between every pair of adjacent checkpoints needs to be ran by exactly one runner. If a runner chooses the path of length l_ i between checkpoint i- 1 and i ( 1\u2264 i\u2264 n ) , his tiredness is min_ i= 1^ n l_ i, i. e. the minimum length of the paths he takes. Please arrange the paths of the m runners to minimize the sum of tiredness of them.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 100 ) . The i - th of the next n lines contains m integers b_ i, 1 , b_ i, 2 , . . . , b_ i, m ( 1 \u2264 b_ i, j\u2264 10^ 9 ) . It is guaranteed that the sum of n\u00b7 m over all test cases does not exceed 10^ 4 .",
    "output": "For each test case, output n lines. The j - th number in the i - th line should contain the length of the path that runner j chooses to run from checkpoint i- 1 to checkpoint i . There should be exactly m integers in the i - th line and these integers should form a permuatation of b_ i, 1 , . . . , b_ i, m for all 1\u2264 i\u2264 n . If there are multiple answers, print any.",
    "note": "In the first case, the sum of tiredness is min( 2, 5) + min( 3, 3) + min( 4, 1) = 6 . In the second case, the sum of tiredness is min( 2, 4, 3) + min( 3, 1, 5) = 3 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1517B"
  },
  {
    "title": "Sum of 2050",
    "url": "https://codeforces.com/problemset/problem/1517/A",
    "history": "A number is called 2050- number if it is 2050 , 20500 , . . . , ( 2050 \u00b7 10^ k for integer k \u2265 0 ) . Given a number n , you are asked to represent n as the sum of some ( not necessarily distinct) 2050- numbers. Compute the minimum number of 2050- numbers required for that.",
    "input": "The first line contains a single integer T ( 1\u2264 T\u2264 1 000 ) denoting the number of test cases. The only line of each test case contains a single integer n ( 1\u2264 n\u2264 10^ 18 ) denoting the number to be represented.",
    "output": "For each test case, output the minimum number of 2050- numbers in one line. If n cannot be represented as the sum of 2050- numbers, output - 1 instead.",
    "note": "In the third case, 4100 = 2050 + 2050 . In the fifth case, 22550 = 20500 + 2050 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1517A"
  },
  {
    "title": "AGAGA XOOORRR",
    "url": "https://codeforces.com/problemset/problem/1516/B",
    "history": "Baby Ehab is known for his love for a certain operation. He has an array a of length n , and he decided to keep doing the following operation on it: he picks 2 adjacent elements; he then removes them and places a single integer in their place: their bitwise XOR. Note that the length of the array decreases by one. Now he asks you if he can make all elements of the array equal. Since babies like to make your life harder, he requires that you leave at least 2 elements remaining.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 15 ) \u2014 the number of test cases you need to solve. The first line of each test case contains an integers n ( 2 \u2264 n \u2264 2000 ) \u2014 the number of elements in the array a . The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i < 2^ 30 ) \u2014 the elements of the array a .",
    "output": "If Baby Ehab can make all elements equal while leaving at least 2 elements standing, print \" YES\" . Otherwise, print \" NO\" .",
    "note": "In the first sample, he can remove the first 2 elements, 0 and 2 , and replace them by 0 \u2295 2= 2 . The array will be [ 2, 2] , so all the elements are equal. In the second sample, there' s no way to make all the elements equal.",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1516B"
  },
  {
    "title": "Tit for Tat",
    "url": "https://codeforces.com/problemset/problem/1516/A",
    "history": "Given an array a of length n , you can do at most k operations of the following type on it: choose 2 different elements in the array, add 1 to the first, and subtract 1 from the second. However, all the elements of a have to remain non- negative after this operation. What is lexicographically the smallest array you can obtain? An array x is lexicographically smaller than an array y if there exists an index i such that x_ i< y_ i , and x_ j= y_ j for all 1 \u2264 j < i . Less formally, at the first index i in which they differ, x_ i< y_ i .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 20 ) \u2013 the number of test cases you need to solve. The first line of each test case contains 2 integers n and k ( 2 \u2264 n \u2264 100 , 1 \u2264 k \u2264 10000 ) \u2014 the number of elements in the array and the maximum number of operations you can make. The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 100 ) \u2014 the elements of the array a .",
    "output": "For each test case, print the lexicographically smallest array you can obtain after at most k operations.",
    "note": "In the second test case, we start by subtracting 1 from the first element and adding 1 to the second. Then, we can' t get any lexicographically smaller arrays, because we can' t make any of the elements negative.",
    "topics": [
      "greedy"
    ],
    "id": "1516A"
  },
  {
    "title": "Phoenix and Earthquake",
    "url": "https://codeforces.com/problemset/problem/1515/F",
    "history": "Phoenix' s homeland, the Fire Nation had n cities that were connected by m roads, but the roads were all destroyed by an earthquake. The Fire Nation wishes to repair n- 1 of these roads so that all the cities are connected again. The i - th city has a_ i tons of asphalt. x tons of asphalt are used up when repairing a road, and to repair a road between i and j , cities i and j must have at least x tons of asphalt between them. In other words, if city i had a_ i tons of asphalt and city j had a_ j tons, there would remain a_ i+ a_ j- x tons after repairing the road between them. Asphalt can be moved between cities if the road between them is already repaired. Please determine if it is possible to connect all the cities, and if so, output any sequence of roads to repair.",
    "input": "The first line contains integers n , m , and x ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ; n- 1 \u2264 m \u2264 3 \u00b7 10^ 5 ; 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of cities, number of roads, and amount of asphalt needed to repair one road. The next line contains n space- separated integer a_ i ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the amount of asphalt initially at city i . The next m lines contains two integers x_ i and y_ i ( x_ i y_ i ; 1 \u2264 x_ i, y_ i \u2264 n ) \u2014 the cities connected by the i - th road. It is guaranteed that there is at most one road between each pair of cities, and that the city was originally connected before the earthquake.",
    "output": "If it is not possible to connect all the cities, print NO. Otherwise, print YES followed by n- 1 integers e_ 1, e_ 2, . . . , e_ n- 1 , the order in which the roads should be repaired. e_ i is the index of the i - th road to repair. If there are multiple solutions, print any.",
    "note": "In the first example, the roads are repaired in the following order: Road 3 is repaired, connecting cities 3 and 4 . City 4 originally had 4 tons of asphalt. After this road is constructed, 3 tons remain. Road 2 is repaired, connecting cities 2 and 3 . The asphalt from city 4 can be transported to city 3 and used for the road. 2 tons remain. Road 1 is repaired, connecting cities 1 and 2 . The asphalt is transported to city 2 and used for the road. 1 ton remain. Road 4 is repaired, connecting cities 4 and 5 . The asphalt is transported to city 4 and used for the road. No asphalt remains. All the cities are now connected. In the second example, cities 1 and 2 use all their asphalt together to build the road. They each have 1 ton, so together they have 2 tons, which is enough. In the third example, there isn' t enough asphalt to connect cities 1 and 2 .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1515F"
  },
  {
    "title": "Phoenix and Socks",
    "url": "https://codeforces.com/problemset/problem/1515/D",
    "history": "To satisfy his love of matching socks, Phoenix has brought his n socks ( n is even) to the sock store. Each of his socks has a color c_ i and is either a left sock or right sock. Phoenix can pay one dollar to the sock store to either: recolor a sock to any color c' ( 1 \u2264 c' \u2264 n) turn a left sock into a right sock turn a right sock into a left sock The sock store may perform each of these changes any number of times. Note that the color of a left sock doesn' t change when it turns into a right sock, and vice versa. A matching pair of socks is a left and right sock with the same color. What is the minimum cost for Phoenix to make n/ 2 matching pairs? Each sock must be included in exactly one matching pair.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , l , and r ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; n is even; 0 \u2264 l, r \u2264 n ; l+ r= n ) \u2014 the total number of socks, and the number of left and right socks, respectively. The next line contains n integers c_ i ( 1 \u2264 c_ i \u2264 n ) \u2014 the colors of the socks. The first l socks are left socks, while the next r socks are right socks. It is guaranteed that the sum of n across all the test cases will not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum cost for Phoenix to make n/ 2 matching pairs. Each sock must be included in exactly one matching pair.",
    "note": "In the first test case, Phoenix can pay 2 dollars to: recolor sock 1 to color 2 recolor sock 3 to color 2 There are now 3 matching pairs. For example, pairs ( 1, 4) , ( 2, 5) , and ( 3, 6) are matching. In the second test case, Phoenix can pay 3 dollars to: turn sock 6 from a right sock to a left sock recolor sock 3 to color 1 recolor sock 4 to color 1 There are now 3 matching pairs. For example, pairs ( 1, 3) , ( 2, 4) , and ( 5, 6) are matching.",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1515D"
  },
  {
    "title": "Phoenix and Towers",
    "url": "https://codeforces.com/problemset/problem/1515/C",
    "history": "Phoenix has n blocks of height h_ 1, h_ 2, . . . , h_ n , and all h_ i don' t exceed some value x . He plans to stack all n blocks into m separate towers. The height of a tower is simply the sum of the heights of its blocks. For the towers to look beautiful, no two towers may have a height difference of strictly more than x . Please help Phoenix build m towers that look beautiful. Each tower must have at least one block and all blocks must be used.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , m , and x ( 1 \u2264 m \u2264 n \u2264 10^ 5 ; 1 \u2264 x \u2264 10^ 4 ) \u2014 the number of blocks, the number of towers to build, and the maximum acceptable height difference of any two towers, respectively. The second line of each test case contains n space- separated integers ( 1 \u2264 h_ i \u2264 x ) \u2014 the heights of the blocks. It is guaranteed that the sum of n over all the test cases will not exceed 10^ 5 .",
    "output": "For each test case, if Phoenix cannot build m towers that look beautiful, print NO. Otherwise, print YES, followed by n integers y_ 1, y_ 2, . . . , y_ n , where y_ i ( 1 \u2264 y_ i \u2264 m ) is the index of the tower that the i - th block is placed in. If there are multiple solutions, print any of them.",
    "note": "In the first test case, the first tower has height 1+ 2+ 3= 6 and the second tower has height 1+ 2= 3 . Their difference is 6- 3= 3 which doesn' t exceed x= 3 , so the towers are beautiful. In the second test case, the first tower has height 1 , the second tower has height 1+ 2= 3 , and the third tower has height 3 . The maximum height difference of any two towers is 3- 1= 2 which doesn' t exceed x= 3 , so the towers are beautiful.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1515C"
  },
  {
    "title": "Phoenix and Gold",
    "url": "https://codeforces.com/problemset/problem/1515/A",
    "history": "Phoenix has collected n pieces of gold, and he wants to weigh them together so he can feel rich. The i - th piece of gold has weight w_ i . All weights are distinct. He will put his n pieces of gold on a weight scale, one piece at a time. The scale has an unusual defect: if the total weight on it is exactly x , it will explode. Can he put all n gold pieces onto the scale in some order, without the scale exploding during the process? If so, help him find some possible order. Formally, rearrange the array w so that for each i ( 1 \u2264 i \u2264 n) , \u2211_ j = 1^ iw_ j x .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 100 ; 1 \u2264 x \u2264 10^ 4 ) \u2014 the number of gold pieces that Phoenix has and the weight to avoid, respectively. The second line of each test case contains n space- separated integers ( 1 \u2264 w_ i \u2264 100) \u2014 the weights of the gold pieces. It is guaranteed that the weights are pairwise distinct.",
    "output": "For each test case, if Phoenix cannot place all n pieces without the scale exploding, print NO. Otherwise, print YES followed by the rearranged array w . If there are multiple solutions, print any.",
    "note": "In the first test case, Phoenix puts the gold piece with weight 3 on the scale first, then the piece with weight 2 , and finally the piece with weight 1 . The total weight on the scale is 3 , then 5 , then 6 . The scale does not explode because the total weight on the scale is never 2 . In the second test case, the total weight on the scale is 8 , 9 , 11 , 14 , then 18 . It is never 3 . In the third test case, Phoenix must put the gold piece with weight 5 on the scale, and the scale will always explode.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1515A"
  },
  {
    "title": "Cut and Stick",
    "url": "https://codeforces.com/problemset/problem/1514/D",
    "history": "Baby Ehab has a piece of Cut and Stick with an array a of length n written on it. He plans to grab a pair of scissors and do the following to it: pick a range ( l, r) and cut out every element a_ l , a_ l + 1 , . . . , a_ r in this range; stick some of the elements together in the same order they were in the array; end up with multiple pieces, where every piece contains some of the elements and every element belongs to some piece. More formally, he partitions the sequence a_ l , a_ l + 1 , . . . , a_ r into subsequences. He thinks a partitioning is beautiful if for every piece ( subsequence) it holds that, if it has length x , then no value occurs strictly more than \u2308x/ 2\u2309 times in it. He didn' t pick a range yet, so he' s wondering: for q ranges ( l, r) , what is the minimum number of pieces he needs to partition the elements a_ l , a_ l + 1 , . . . , a_ r into so that the partitioning is beautiful. A sequence b is a subsequence of an array a if b can be obtained from a by deleting some ( possibly zero) elements. Note that it does not have to be contiguous.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array a and the number of queries. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the elements of the array a . Each of the next q lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 the range of this query.",
    "output": "For each query, print the minimum number of subsequences you need to partition this range into so that the partitioning is beautiful. We can prove such partitioning always exists.",
    "note": "In the first query, you can just put the whole array in one subsequence, since its length is 6 , and no value occurs more than 3 times in it. In the second query, the elements of the query range are [ 3, 2, 3, 3] . You can' t put them all in one subsequence, since its length is 4 , and 3 occurs more than 2 times. However, you can partition it into two subsequences: [ 3] and [ 2, 3, 3] .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1514D"
  },
  {
    "title": "Product 1 Modulo N",
    "url": "https://codeforces.com/problemset/problem/1514/C",
    "history": "Now you get Baby Ehab' s first words: \" Given an integer n , find the longest subsequence of [ 1, 2, . . . , n- 1] whose product is 1 modulo n . \" Please solve the problem. A sequence b is a subsequence of an array a if b can be obtained from a by deleting some ( possibly all) elements. The product of an empty subsequence is equal to 1 .",
    "input": "The only line contains the integer n ( 2 \u2264 n \u2264 10^ 5 ) .",
    "output": "The first line should contain a single integer, the length of the longest subsequence. The second line should contain the elements of the subsequence, in increasing order. If there are multiple solutions, you can print any.",
    "note": "In the first example, the product of the elements is 6 which is congruent to 1 modulo 5 . The only longer subsequence is [ 1, 2, 3, 4] . Its product is 24 which is congruent to 4 modulo 5 . Hence, the answer is [ 1, 2, 3] .",
    "topics": [
      "greedy",
      "number theory"
    ],
    "id": "1514C"
  },
  {
    "title": "GCD and MST",
    "url": "https://codeforces.com/problemset/problem/1513/D",
    "history": "You are given an array a of n ( n \u2265 2 ) positive integers and an integer p . Consider an undirected weighted graph of n vertices numbered from 1 to n for which the edges between the vertices i and j ( i< j ) are added in the following manner: If gcd( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) = min( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) , then there is an edge of weight min( a_ i, a_ i+ 1, a_ i+ 2, . . . , a_ j) between i and j . If i+ 1= j , then there is an edge of weight p between i and j . Here gcd( x, y, . . . ) denotes the greatest common divisor ( GCD) of integers x , y , . . . . Note that there could be multiple edges between i and j if both of the above conditions are true, and if both the conditions fail for i and j , then there is no edge between these vertices. The goal is to find the weight of the minimum spanning tree of this graph.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) and p ( 1 \u2264 p \u2264 10^ 9 ) \u2014 the number of nodes and the parameter p . The second line contains n integers a_ 1, a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output t lines. For each test case print the weight of the corresponding graph.",
    "note": "Here are the graphs for the four test cases of the example ( the edges of a possible MST of the graphs are marked pink) : For test case 1 For test case 2 For test case 3 For test case 4",
    "topics": [
      "constructive algorithms",
      "dsu",
      "graphs",
      "greedy",
      "number theory",
      "sortings"
    ],
    "id": "1513D"
  },
  {
    "title": "Education",
    "url": "https://codeforces.com/problemset/problem/1512/F",
    "history": "Polycarp is wondering about buying a new computer, which costs c tugriks. To do this, he wants to get a job as a programmer in a big company. There are n positions in Polycarp' s company, numbered starting from one. An employee in position i earns a[ i] tugriks every day. The higher the position number, the more tugriks the employee receives. Initially, Polycarp gets a position with the number 1 and has 0 tugriks. Each day Polycarp can do one of two things: If Polycarp is in the position of x , then he can earn a[ x] tugriks. If Polycarp is in the position of x ( x < n ) and has at least b[ x] tugriks, then he can spend b[ x] tugriks on an online course and move to the position x+ 1 . For example, if n= 4 , c= 15 , a= [ 1, 3, 10, 11] , b= [ 1, 2, 7] , then Polycarp can act like this: On the first day, Polycarp is in the 1 - st position and earns 1 tugrik. Now he has 1 tugrik; On the second day, Polycarp is in the 1 - st position and move to the 2 - nd position. Now he has 0 tugriks; On the third day, Polycarp is in the 2 - nd position and earns 3 tugriks. Now he has 3 tugriks; On the fourth day, Polycarp is in the 2 - nd position and is transferred to the 3 - rd position. Now he has 1 tugriks; On the fifth day, Polycarp is in the 3 - rd position and earns 10 tugriks. Now he has 11 tugriks; On the sixth day, Polycarp is in the 3 - rd position and earns 10 tugriks. Now he has 21 tugriks; Six days later, Polycarp can buy himself a new computer. Find the minimum number of days after which Polycarp will be able to buy himself a new computer.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains two integers n and c ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 c \u2264 10^ 9 ) \u2014 the number of positions in the company and the cost of a new computer. The second line of each test case contains n integers a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line of each test case contains n - 1 integer b_ 1, b_ 2, . . . , b_ n- 1 ( 1 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the minimum number of days after which Polycarp will be able to buy a new computer.",
    "note": "",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1512F"
  },
  {
    "title": "Permutation by Sum",
    "url": "https://codeforces.com/problemset/problem/1512/E",
    "history": "A permutation is a sequence of n integers from 1 to n , in which all the numbers occur exactly once. For example, [ 1] , [ 3, 5, 2, 1, 4] , [ 1, 3, 2] are permutations, and [ 2, 3, 2] , [ 4, 3, 1] , [ 0] are not. Polycarp was given four integers n , l , r ( 1 \u2264 l \u2264 r \u2264 n) and s ( 1 \u2264 s \u2264n ( n+ 1) / 2 ) and asked to find a permutation p of numbers from 1 to n that satisfies the following condition: s = p_ l + p_ l+ 1 + . . . + p_ r . For example, for n= 5 , l= 3 , r= 5 , and s= 8 , the following permutations are suitable ( not all options are listed) : p = [ 3, 4, 5, 2, 1] ; p = [ 5, 2, 4, 3, 1] ; p = [ 5, 2, 1, 3, 4] . But, for example, there is no permutation suitable for the condition above for n= 4 , l= 1 , r= 1 , and s= 5 . Help Polycarp, for the given n , l , r , and s , find a permutation of numbers from 1 to n that fits the condition above. If there are several suitable permutations, print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) . Then t test cases follow. Each test case consist of one line with four integers n ( 1 \u2264 n \u2264 500 ) , l ( 1 \u2264 l \u2264 n ) , r ( l \u2264 r \u2264 n ) , s ( 1 \u2264 s \u2264n ( n+ 1) / 2 ) . It is guaranteed that the sum of n for all input data sets does not exceed 500 .",
    "output": "For each test case, output on a separate line: n integers \u2014 a permutation of length n that fits the condition above if such a permutation exists; - 1, otherwise. If there are several suitable permutations, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1512E"
  },
  {
    "title": "Corrupted Array",
    "url": "https://codeforces.com/problemset/problem/1512/D",
    "history": "You are given a number n and an array b_ 1, b_ 2, . . . , b_ n+ 2 , obtained according to the following algorithm: some array a_ 1, a_ 2, . . . , a_ n was guessed; array a was written to array b , i. e. b_ i = a_ i ( 1 \u2264 i \u2264 n ) ; The ( n+ 1) - th element of the array b is the sum of the numbers in the array a , i. e. b_ n+ 1 = a_ 1+ a_ 2+ . . . + a_ n ; The ( n+ 2) - th element of the array b was written some number x ( 1 \u2264 x \u2264 10^ 9 ) , i. e. b_ n+ 2 = x ; The array b was shuffled. For example, the array b= [ 2, 3, 7, 12 , 2] it could be obtained in the following ways: a= [ 2, 2, 3] and x= 12 ; a= [ 3, 2, 7] and x= 2 . For the given array b , find any array a that could have been guessed initially.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second row of each test case contains n+ 2 integers b_ 1, b_ 2, . . . , b_ n+ 2 ( 1 \u2264 b_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output: \" - 1\" , if the array b could not be obtained from any array a ; n integers a_ 1, a_ 2, . . . , a_ n , otherwise. If there are several arrays of a , you can output any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1512D"
  },
  {
    "title": "Colorings and Dominoes",
    "url": "https://codeforces.com/problemset/problem/1511/E",
    "history": "You have a large rectangular board which is divided into n \u00d7 m cells ( the board has n rows and m columns) . Each cell is either white or black. You paint each white cell either red or blue. Obviously, the number of different ways to paint them is 2^ w , where w is the number of white cells. After painting the white cells of the board, you want to place the maximum number of dominoes on it, according to the following rules: each domino covers two adjacent cells; each cell is covered by at most one domino; if a domino is placed horizontally ( it covers two adjacent cells in one of the rows) , it should cover only red cells; if a domino is placed vertically ( it covers two adjacent cells in one of the columns) , it should cover only blue cells. Let the value of the board be the maximum number of dominoes you can place. Calculate the sum of values of the board over all 2^ w possible ways to paint it. Since it can be huge, print it modulo 998 244 353 .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 5 ; nm \u2264 3 \u00b7 10^ 5 ) \u2014 the number of rows and columns, respectively. Then n lines follow, each line contains a string of m characters. The j - th character in the i - th string is * if the j - th cell in the i - th row is black; otherwise, that character is o.",
    "output": "Print one integer \u2014 the sum of values of the board over all 2^ w possible ways to paint it, taken modulo 998 244 353 .",
    "note": "",
    "topics": [
      "combinatorics",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1511E"
  },
  {
    "title": "Min Cost String",
    "url": "https://codeforces.com/problemset/problem/1511/D",
    "history": "Let' s define the cost of a string s as the number of index pairs i and j ( 1 \u2264 i < j < | s| ) such that s_ i = s_ j and s_ i+ 1 = s_ j+ 1 . You are given two positive integers n and k . Among all strings with length n that contain only the first k characters of the Latin alphabet, find a string with minimum possible cost. If there are multiple such strings with minimum cost \u2014 find any of them.",
    "input": "The only line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5; 1 \u2264 k \u2264 26 ) .",
    "output": "Print the string s such that it consists of n characters, each its character is one of the k first Latin letters, and it has the minimum possible cost among all these strings. If there are multiple such strings \u2014 print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "strings"
    ],
    "id": "1511D"
  },
  {
    "title": "Review Site",
    "url": "https://codeforces.com/problemset/problem/1511/A",
    "history": "You are an upcoming movie director, and you have just released your first movie. You have also launched a simple review site with two buttons to press \u2014 upvote and downvote. However, the site is not so simple on the inside. There are two servers, each with its separate counts for the upvotes and the downvotes. n reviewers enter the site one by one. Each reviewer is one of the following types: type 1 : a reviewer has watched the movie, and they like it \u2014 they press the upvote button; type 2 : a reviewer has watched the movie, and they dislike it \u2014 they press the downvote button; type 3 : a reviewer hasn' t watched the movie \u2014 they look at the current number of upvotes and downvotes of the movie on the server they are in and decide what button to press. If there are more downvotes than upvotes, then a reviewer downvotes the movie. Otherwise, they upvote the movie. Each reviewer votes on the movie exactly once. Since you have two servers, you can actually manipulate the votes so that your movie gets as many upvotes as possible. When a reviewer enters a site, you know their type, and you can send them either to the first server or to the second one. What is the maximum total number of upvotes you can gather over both servers if you decide which server to send each reviewer to?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of reviewers. The second line of each testcase contains n integers r_ 1, r_ 2, . . . , r_ n ( 1 \u2264 r_ i \u2264 3 ) \u2014 the types of the reviewers in the same order they enter the site.",
    "output": "For each testcase print a single integer \u2014 the maximum total number of upvotes you can gather over both servers if you decide which server to send each reviewer to.",
    "note": "In the first testcase of the example you can send the only reviewer to either of the servers \u2014 they' ll downvote anyway. The movie won' t receive any upvotes. In the second testcase of the example you can send all reviewers to the first server: the first reviewer upvotes; the second reviewer downvotes; the last reviewer sees that the number of downvotes is not greater than the number of upvotes \u2014 upvote themselves. There are two upvotes in total. Alternatevely, you can send the first and the second reviewers to the first server and the last reviewer \u2014 to the second server: the first reviewer upvotes on the first server; the second reviewer downvotes on the first server; the last reviewer sees no upvotes or downvotes on the second server \u2014 upvote themselves.",
    "topics": [
      "greedy"
    ],
    "id": "1511A"
  },
  {
    "title": "Is It Rated?",
    "url": "https://codeforces.com/problemset/problem/1510/I",
    "history": "The popular improv website Interpretation Impetus hosts regular improv contests and maintains a rating of the best performers. However, since improv can often go horribly wrong, the website is notorious for declaring improv contests unrated. It now holds a wager before each improv contest where the participants try to predict whether it will be rated or unrated, and they are now more popular than the improv itself. Izzy and n other participants take part in each wager. First, they each make their prediction, expressed as 1 ( \" rated\" ) or 0 ( \" unrated\" ) . Izzy always goes last, so she knows the predictions of the other participants when making her own. Then, the actual competition takes place and it is declared either rated or unrated. You need to write a program that will interactively play as Izzy. There will be m wagers held in 2021, and Izzy' s goal is to have at most 1. 3\u00b7 b + 100 wrong predictions after all those wagers, where b is the smallest number of wrong predictions that any other wager participant will have after all those wagers. The number b is not known in advance. Izzy also knows nothing about the other participants \u2014 they might somehow always guess correctly, or their predictions might be correlated. Izzy' s predictions, though, do not affect the predictions of the other participants and the decision on the contest being rated or not \u2014 in other words, in each test case, your program always receives the same inputs, no matter what it outputs. InteractionFirst, a solution must read two integers n ( 1 \u2264 n \u2264 1000 ) and m ( 1 \u2264 m \u2264 10 000 ) . Then, the solution must process m wagers. For each of them, the solution must first read a string consisting of n 0s and 1s, in which the i - th character denotes the guess of the i - th participant. Then, the solution must print Izzy' s guess as 0 or 1. Don' t forget to flush the output after printing it! Then, the solution must read the actual outcome, also as 0 or 1, and then proceed to the next wager, if this wasn' t the last one. Your solution will be considered correct if it makes at most 1. 3\u00b7 b + 100 mistakes, where b is the smallest number of mistakes made by any other participant. Note that if a solution outputs anything except 0 or 1 for a wager, it will be considered incorrect even if it made no other mistakes. There are 200 test cases in this problem.",
    "input": "",
    "output": "",
    "note": "In the example, the participants made 1, 2, and 3 mistakes respectively, therefore b= 1 ( the smallest of these numbers) . Izzy made 3 mistakes, which were not more than 1. 3\u00b7 b + 100= 101. 3 , so these outputs are good enough to pass this test case ( as are any other valid outputs) .",
    "topics": [
      "greedy",
      "interactive",
      "math",
      "probabilities"
    ],
    "id": "1510I"
  },
  {
    "title": "The Sports Festival",
    "url": "https://codeforces.com/problemset/problem/1509/C",
    "history": "The student council is preparing for the relay race at the sports festival. The council consists of n members. They will run one after the other in the race, the speed of member i is s_ i . The discrepancy d_ i of the i - th stage is the difference between the maximum and the minimum running speed among the first i members who ran. Formally, if a_ i denotes the speed of the i - th member who participated in the race, then d_ i = max( a_ 1, a_ 2, . . . , a_ i) - min( a_ 1, a_ 2, . . . , a_ i) . You want to minimize the sum of the discrepancies d_ 1 + d_ 2 + . . . + d_ n . To do this, you are allowed to change the order in which the members run. What is the minimum possible sum that can be achieved?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of members of the student council. The second line contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9 ) \u2013 the running speeds of the members.",
    "output": "Print a single integer \u2014 the minimum possible value of d_ 1 + d_ 2 + . . . + d_ n after choosing the order of the members.",
    "note": "In the first test case, we may choose to make the third member run first, followed by the first member, and finally the second. Thus a_ 1 = 2 , a_ 2 = 3 , and a_ 3 = 1 . We have: d_ 1 = max( 2) - min( 2) = 2 - 2 = 0 . d_ 2 = max( 2, 3) - min( 2, 3) = 3 - 2 = 1 . d_ 3 = max( 2, 3, 1) - min( 2, 3, 1) = 3 - 1 = 2 . The resulting sum is d_ 1 + d_ 2 + d_ 3 = 0 + 1 + 2 = 3 . It can be shown that it is impossible to achieve a smaller value. In the second test case, the only possible rearrangement gives d_ 1 = 0 , so the minimum possible result is 0 .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1509C"
  },
  {
    "title": "TMT Document",
    "url": "https://codeforces.com/problemset/problem/1509/B",
    "history": "The student council has a shared document file. Every day, some members of the student council write the sequence TMT ( short for Towa Maji Tenshi) in it. However, one day, the members somehow entered the sequence into the document at the same time, creating a jumbled mess. Therefore, it is Suguru Doujima' s task to figure out whether the document has malfunctioned. Specifically, he is given a string of length n whose characters are all either T or M, and he wants to figure out if it is possible to partition it into some number of disjoint subsequences, all of which are equal to TMT. That is, each character of the string should belong to exactly one of the subsequences. A string a is a subsequence of a string b if a can be obtained from b by deletion of several ( possibly, zero) characters.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 3 \u2264 n < 10^ 5 ) , the number of characters in the string entered in the document. It is guaranteed that n is divisible by 3 . The second line of each test case contains a string of length n consisting of only the characters T and M. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single line containing YES if the described partition exists, and a single line containing NO otherwise.",
    "note": "In the first test case, the string itself is already a sequence equal to TMT. In the third test case, we may partition the string into the subsequences TMTMTT. Both the bolded and the non- bolded subsequences are equal to TMT.",
    "topics": [
      "greedy"
    ],
    "id": "1509B"
  },
  {
    "title": "Complete the MST",
    "url": "https://codeforces.com/problemset/problem/1508/C",
    "history": "As a teacher, Riko Hakozaki often needs to help her students with problems from various subjects. Today, she is asked a programming task which goes as follows. You are given an undirected complete graph with n nodes, where some edges are pre- assigned with a positive weight while the rest aren' t. You need to assign all unassigned edges with non- negative weights so that in the resulting fully- assigned complete graph the XOR sum of all weights would be equal to 0 . Define the ugliness of a fully- assigned complete graph the weight of its minimum spanning tree, where the weight of a spanning tree equals the sum of weights of its edges. You need to assign the weights so that the ugliness of the resulting graph is as small as possible. As a reminder, an undirected complete graph with n nodes contains all edges ( u, v) with 1 \u2264 u < v \u2264 n ; such a graph has n( n- 1) / 2 edges. She is not sure how to solve this problem, so she asks you to solve it for her.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264min( 2 \u00b7 10^ 5, n( n- 1) / 2 - 1) ) \u2014 the number of nodes and the number of pre- assigned edges. The inputs are given so that there is at least one unassigned edge. The i - th of the following m lines contains three integers u_ i , v_ i , and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u v , 1 \u2264 w_ i < 2^ 30 ) , representing the edge from u_ i to v_ i has been pre- assigned with the weight w_ i . No edge appears in the input more than once.",
    "output": "Print on one line one integer \u2014 the minimum ugliness among all weight assignments with XOR sum equal to 0 .",
    "note": "The following image showcases the first test case. The black weights are pre- assigned from the statement, the red weights are assigned by us, and the minimum spanning tree is denoted by the blue edges.",
    "topics": [
      "bitmasks",
      "brute force",
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1508C"
  },
  {
    "title": "Binary Literature",
    "url": "https://codeforces.com/problemset/problem/1508/A",
    "history": "A bitstring is a string that contains only the characters 0 and 1. Koyomi Kanou is working hard towards her dream of becoming a writer. To practice, she decided to participate in the Binary Novel Writing Contest. The writing prompt for the contest consists of three bitstrings of length 2n . A valid novel for the contest is a bitstring of length at most 3n that contains at least two of the three given strings as subsequences. Koyomi has just received the three prompt strings from the contest organizers. Help her write a valid novel for the contest. A string a is a subsequence of a string b if a can be obtained from b by deletion of several ( possibly, zero) characters.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . Each of the following three lines contains a bitstring of length 2n . It is guaranteed that these three strings are pairwise distinct. It is guaranteed that the sum of n across all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single line containing a bitstring of length at most 3n that has at least two of the given bitstrings as subsequences. It can be proven that under the constraints of the problem, such a bitstring always exists. If there are multiple possible answers, you may output any of them.",
    "note": "In the first test case, the bitstrings 00 and 01 are subsequences of the output string: 010 and 010. Note that 11 is not a subsequence of the output string, but this is not required. In the second test case all three input strings are subsequences of the output string: 011001010, 011001010 and 011001010.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "strings",
      "two pointers"
    ],
    "id": "1508A"
  },
  {
    "title": "Maximize the Remaining String",
    "url": "https://codeforces.com/problemset/problem/1506/G",
    "history": "You are given a string s , consisting of lowercase Latin letters. While there is at least one character in the string s that is repeated at least twice, you perform the following operation: you choose the index i ( 1 \u2264 i \u2264 | s| ) such that the character at position i occurs at least two times in the string s , and delete the character at position i , that is, replace s with s_ 1 s_ 2 . . . s_ i- 1 s_ i+ 1 s_ i+ 2. . . s_ n . For example, if s= \" codeforces\" , then you can apply the following sequence of operations: i= 6 \u21d2 s= \" codefrces\" ; i= 1 \u21d2 s= \" odefrces\" ; i= 7 \u21d2 s= \" odefrcs\" ; Given a given string s , find the lexicographically maximum string that can be obtained after applying a certain sequence of operations after which all characters in the string become unique. A string a of length n is lexicographically less than a string b of length m , if: there is an index i ( 1 \u2264 i \u2264min( n, m) ) such that the first i- 1 characters of the strings a and b are the same, and the i - th character of the string a is less than i - th character of string b ; or the first min( n, m) characters in the strings a and b are the same and n < m . For example, the string a= \" aezakmi\" is lexicographically less than the string b= \" aezus\" .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. Each test case is characterized by a string s , consisting of lowercase Latin letters ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) . It is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the lexicographically maximum string that can be obtained after applying a certain sequence of operations after which all characters in the string become unique.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1506G"
  },
  {
    "title": "Epic Transformation",
    "url": "https://codeforces.com/problemset/problem/1506/D",
    "history": "You are given an array a of length n consisting of integers. You can apply the following operation, consisting of several steps, on the array a zero or more times: you select two different numbers in the array a_ i and a_ j ; you remove i - th and j - th elements from the array. For example, if n= 6 and a= [ 1, 6, 1, 1, 4, 4] , then you can perform the following sequence of operations: select i= 1, j= 5 . The array a becomes equal to [ 6, 1, 1, 4] ; select i= 1, j= 2 . The array a becomes equal to [ 1, 4] . What can be the minimum size of the array after applying some sequence of operations to it?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) . Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) is length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output the minimum possible size of the array after applying some sequence of operations to it.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1506D"
  },
  {
    "title": "Partial Replacement",
    "url": "https://codeforces.com/problemset/problem/1506/B",
    "history": "You are given a number k and a string s of length n , consisting of the characters ' . ' and ' * ' . You want to replace some of the ' * ' characters with ' x' characters so that the following conditions are met: The first character ' * ' in the original string should be replaced with ' x' ; The last character ' * ' in the original string should be replaced with ' x' ; The distance between two neighboring replaced characters ' x' must not exceed k ( more formally, if you replaced characters at positions i and j ( i < j ) and at positions [ i+ 1, j- 1] there is no \" x\" symbol, then j- i must be no more than k ) . For example, if n= 7 , s= . * * . * * * and k= 3 , then the following strings will satisfy the conditions above: . xx. * xx; . x* . x* x; . xx. xxx. But, for example, the following strings will not meet the conditions: . * * . * xx ( the first character ' * ' should be replaced with ' x' ) ; . x* . xx* ( the last character ' * ' should be replaced with ' x' ) ; . x* . * xx ( the distance between characters at positions 2 and 6 is greater than k= 3 ) . Given n , k , and s , find the minimum number of ' * ' characters that must be replaced with ' x' in order to meet the above conditions.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 500 ) . Then t test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 50 ) . The second line of each test case contains a string s of length n , consisting of the characters ' . ' and ' * ' . It is guaranteed that there is at least one ' * ' in the string s . It is guaranteed that the distance between any two neighboring ' * ' characters does not exceed k .",
    "output": "For each test case output the minimum number of ' * ' characters that must be replaced with ' x' characters in order to satisfy the conditions above.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1506B"
  },
  {
    "title": "Cakewalk",
    "url": "https://codeforces.com/problemset/problem/1505/E",
    "history": "A mouse encountered a nice big cake and decided to take a walk across it, eating the berries on top of the cake on its way. The cake is rectangular, neatly divided into squares; some of the squares have a berry in them, and some don' t. The mouse is in a bit of a hurry, though, so once she enters the cake from its northwest corner ( the top left cell in the input data) , she will only go east ( right) or south ( down) , until she reaches the southeast corner ( the bottom right cell) . She will eat every berry in the squares she passes through, but not in the other squares. The mouse tries to choose her path so as to maximize the number of berries consumed. However, her haste and hunger might be clouding her judgement, leading her to suboptimal decisions. . .",
    "input": "The first line of input contains two integers H and W ( 1 \u2264 H, W \u2264 5 ) , separated by a space, \u2014 the height and the width of the cake. The next H lines contain a string of W characters each, representing the squares of the cake in that row: ' . ' represents an empty square, and ' * ' represents a square with a berry.",
    "output": "Output the number of berries the mouse will eat following her strategy.",
    "note": "",
    "topics": [
      "*special",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1505E"
  },
  {
    "title": "Flip the Bits",
    "url": "https://codeforces.com/problemset/problem/1504/B",
    "history": "There is a binary string a of length n . In one operation, you can select any prefix of a with an equal number of 0 and 1 symbols. Then all symbols in the prefix are inverted: each 0 becomes 1 and each 1 becomes 0 . For example, suppose a= 0111010000 . In the first operation, we can select the prefix of length 8 since it has four 0 ' s and four 1 ' s: [ 01110100] 00\u2192 [ 10001011] 00 . In the second operation, we can select the prefix of length 2 since it has one 0 and one 1 : [ 10] 00101100\u2192 [ 01] 00101100 . It is illegal to select the prefix of length 4 for the third operation, because it has three 0 ' s and one 1 . Can you transform the string a into the string b using some finite number of operations ( possibly, none) ?",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1\u2264 n\u2264 3\u00b7 10^ 5 ) \u2014 the length of the strings a and b . The following two lines contain strings a and b of length n , consisting of symbols 0 and 1 . The sum of n across all test cases does not exceed 3\u00b7 10^ 5 .",
    "output": "For each test case, output \" YES\" if it is possible to transform a into b , or \" NO\" if it is impossible. You can print each letter in any case ( upper or lower) .",
    "note": "The first test case is shown in the statement. In the second test case, we transform a into b by using zero operations. In the third test case, there is no legal operation, so it is impossible to transform a into b . In the fourth test case, here is one such transformation: Select the length 2 prefix to get 100101010101 . Select the length 12 prefix to get 011010101010 . Select the length 8 prefix to get 100101011010 . Select the length 4 prefix to get 011001011010 . Select the length 6 prefix to get 100110011010 . In the fifth test case, the only legal operation is to transform a into 111000 . From there, the only legal operation is to return to the string we started with, so we cannot transform a into b .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1504B"
  },
  {
    "title": "Flip the Cards",
    "url": "https://codeforces.com/problemset/problem/1503/D",
    "history": "There is a deck of n cards. The i - th card has a number a_ i on the front and a number b_ i on the back. Every integer between 1 and 2n appears exactly once on the cards. A deck is called sorted if the front values are in increasing order and the back values are in decreasing order. That is, if a_ i< a_ i+ 1 and b_ i> b_ i+ 1 for all 1\u2264 i< n . To flip a card i means swapping the values of a_ i and b_ i . You must flip some subset of cards ( possibly, none) , then put all the cards in any order you like. What is the minimum number of cards you must flip in order to sort the deck?",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of cards. The next n lines describe the cards. The i - th of these lines contains two integers a_ i, b_ i ( 1\u2264 a_ i, b_ i\u2264 2n ) . Every integer between 1 and 2n appears exactly once.",
    "output": "If it is impossible to sort the deck, output \" - 1\" . Otherwise, output the minimum number of flips required to sort the deck.",
    "note": "In the first test case, we flip the cards ( 1, 9) and ( 2, 7) . The deck is then ordered ( 3, 10) , ( 5, 8) , ( 6, 4) , ( 7, 2) , ( 9, 1) . It is sorted because 3< 5< 6< 7< 9 and 10> 8> 4> 2> 1 . In the second test case, it is impossible to sort the deck.",
    "topics": [
      "2-sat",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1503D"
  },
  {
    "title": "Travelling Salesman Problem",
    "url": "https://codeforces.com/problemset/problem/1503/C",
    "history": "There are n cities numbered from 1 to n , and city i has beauty a_ i . A salesman wants to start at city 1 , visit every city exactly once, and return to city 1 . For all i j , a flight from city i to city j costs max( c_ i, a_ j- a_ i) dollars, where c_ i is the price floor enforced by city i . Note that there is no absolute value. Find the minimum total cost for the salesman to complete his trip.",
    "input": "The first line contains a single integer n ( 2\u2264 n\u2264 10^ 5 ) \u2014 the number of cities. The i - th of the next n lines contains two integers a_ i , c_ i ( 0\u2264 a_ i, c_ i\u2264 10^ 9 ) \u2014 the beauty and price floor of the i - th city.",
    "output": "Output a single integer \u2014 the minimum total cost.",
    "note": "In the first test case, we can travel in order 1\u2192 3\u2192 2\u2192 1 . The flight 1\u2192 3 costs max( c_ 1, a_ 3- a_ 1) = max( 9, 4- 1) = 9 . The flight 3\u2192 2 costs max( c_ 3, a_ 2- a_ 3) = max( 1, 2- 4) = 1 . The flight 2\u2192 1 costs max( c_ 2, a_ 1- a_ 2) = max( 1, 1- 2) = 1 . The total cost is 11 , and we cannot do better.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "shortest paths",
      "sortings",
      "two pointers"
    ],
    "id": "1503C"
  },
  {
    "title": "Balance the Bits",
    "url": "https://codeforces.com/problemset/problem/1503/A",
    "history": "A sequence of brackets is called balanced if one can turn it into a valid math expression by adding characters ' + ' and ' 1' . For example, sequences ' ( ( ) ) ( ) ' , ' ( ) ' , and ' ( ( ) ( ( ) ) ) ' are balanced, while ' ) ( ' , ' ( ( ) ' , and ' ( ( ) ) ) ( ' are not. You are given a binary string s of length n . Construct two balanced bracket sequences a and b of length n such that for all 1\u2264 i\u2264 n : if s_ i= 1 , then a_ i= b_ i if s_ i= 0 , then a_ i b_ i If it is impossible, you should report about it.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2\u2264 n\u2264 2\u00b7 10^ 5 , n is even) . The next line contains a string s of length n , consisting of characters 0 and 1. The sum of n across all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "If such two balanced bracked sequences exist, output \" YES\" on the first line, otherwise output \" NO\" . You can print each letter in any case ( upper or lower) . If the answer is \" YES\" , output the balanced bracket sequences a and b satisfying the conditions on the next two lines. If there are multiple solutions, you may print any.",
    "note": "In the first test case, a= \" ( ) ( ) ( ) \" and b= \" ( ( ( ) ) ) \" . The characters are equal in positions 1 , 3 , 4 , and 6 , which are the exact same positions where s_ i= 1 . In the second test case, a= \" ( ) ( ) ( ( ( ) ) ) \" and b= \" ( ( ) ) ( ) ( ) ( ) \" . The characters are equal in positions 1 , 4 , 5 , 7 , 8 , 10 , which are the exact same positions where s_ i= 1 . In the third test case, there is no solution.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1503A"
  },
  {
    "title": "Matrix Sorting",
    "url": "https://codeforces.com/problemset/problem/1500/C",
    "history": "You are given two tables A and B of size n \u00d7 m . We define a sorting by column as the following: we choose a column and reorder the rows of the table by the value in this column, from the rows with the smallest value to the rows with the largest. In case there are two or more rows with equal value in this column, their relative order does not change ( such sorting algorithms are called stable) . You can find this behavior of sorting by column in many office software for managing spreadsheets. Petya works in one, and he has a table A opened right now. He wants to perform zero of more sortings by column to transform this table to table B . Determine if it is possible to do so, and if yes, find a sequence of columns to sort by. Note that you do not need to minimize the number of sortings.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 1500 ) \u2014 the sizes of the tables. Each of the next n lines contains m integers a_ i, j ( 1 \u2264 a_ i, j\u2264 n ) , denoting the elements of the table A . Each of the next n lines contains m integers b_ i, j ( 1 \u2264 b_ i, j\u2264 n ) , denoting the elements of the table B .",
    "output": "If it is not possible to transform A into B , print - 1 . Otherwise, first print an integer k ( 0 \u2264 k \u2264 5000 ) \u2014 the number of sortings in your solution. Then print k integers c_ 1, . . . , c_ k ( 1 \u2264 c_ i \u2264 m ) \u2014 the columns, by which Petya needs to perform a sorting. We can show that if a solution exists, there is one in no more than 5000 sortings.",
    "note": "Consider the second example. After the sorting by the first column the table becomes 1 3 3 1 1 2 2 3 2. After the sorting by the second column the table becomes 1 1 2 1 3 3 2 3 2, and this is what we need. In the third test any sorting does not change anything, because the columns are already sorted.",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "greedy",
      "two pointers"
    ],
    "id": "1500C"
  },
  {
    "title": "Minimum Grid Path",
    "url": "https://codeforces.com/problemset/problem/1499/C",
    "history": "Let' s say you are standing on the XY - plane at point ( 0, 0) and you want to reach point ( n, n) . You can move only in two directions: to the right, i. e. horizontally and in the direction that increase your x coordinate, or up, i. e. vertically and in the direction that increase your y coordinate. In other words, your path will have the following structure: initially, you choose to go to the right or up; then you go some positive integer distance in the chosen direction ( distances can be chosen independently) ; after that you change your direction ( from right to up, or from up to right) and repeat the process. You don' t like to change your direction too much, so you will make no more than n - 1 direction changes. As a result, your path will be a polygonal chain from ( 0, 0) to ( n, n) , consisting of at most n line segments where each segment has positive integer length and vertical and horizontal segments alternate. Not all paths are equal. You have n integers c_ 1, c_ 2, . . . , c_ n where c_ i is the cost of the i - th segment. Using these costs we can define the cost of the path as the sum of lengths of the segments of this path multiplied by their cost, i. e. if the path consists of k segments ( k \u2264 n ) , then the cost of the path is equal to \u2211_ i= 1^ kc_ i \u00b7 length_ i ( segments are numbered from 1 to k in the order they are in the path) . Find the path of the minimum cost and print its cost.",
    "input": "The first line contains the single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the costs of each segment. It' s guaranteed that the total sum of n doesn' t exceed 10^ 5 .",
    "output": "For each test case, print the minimum possible cost of the path from ( 0, 0) to ( n, n) consisting of at most n alternating segments.",
    "note": "In the first test case, to reach ( 2, 2) you need to make at least one turn, so your path will consist of exactly 2 segments: one horizontal of length 2 and one vertical of length 2 . The cost of the path will be equal to 2 \u00b7 c_ 1 + 2 \u00b7 c_ 2 = 26 + 176 = 202 . In the second test case, one of the optimal paths consists of 3 segments: the first segment of length 1 , the second segment of length 3 and the third segment of length 2 . The cost of the path is 1 \u00b7 2 + 3 \u00b7 3 + 2 \u00b7 1 = 13 . In the third test case, one of the optimal paths consists of 4 segments: the first segment of length 1 , the second one \u2014 1 , the third one \u2014 4 , the fourth one \u2014 4 . The cost of the path is 1 \u00b7 4 + 1 \u00b7 3 + 4 \u00b7 2 + 4 \u00b7 1 = 19 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1499C"
  },
  {
    "title": "Binary Removals",
    "url": "https://codeforces.com/problemset/problem/1499/B",
    "history": "You are given a string s , consisting only of characters ' 0' or ' 1' . Let | s| be the length of s . You are asked to choose some integer k ( k > 0 ) and find a sequence a of length k such that: 1 \u2264 a_ 1 < a_ 2 < . . . < a_ k \u2264 | s| ; a_ i- 1 + 1 < a_ i for all i from 2 to k . The characters at positions a_ 1, a_ 2, . . . , a_ k are removed, the remaining characters are concatenated without changing the order. So, in other words, the positions in the sequence a should not be adjacent. Let the resulting string be s' . s' is called sorted if for all i from 2 to | s' | s' _ i- 1\u2264 s' _ i . Does there exist such a sequence a that the resulting string s' is sorted?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The only line of each testcase contains a string s ( 2 \u2264 | s| \u2264 100 ) . Each character is either ' 0' or ' 1' .",
    "output": "For each testcase print \" YES\" if there exists a sequence a such that removing the characters at positions a_ 1, a_ 2, . . . , a_ k and concatenating the parts without changing the order produces a sorted string. Otherwise, print \" NO\" . You may print every letter in any case you want ( so, for example, the strings yEs, yes, Yes and YES are all recognized as positive answer) .",
    "note": "In the first testcase you can choose a sequence a= [ 1, 3, 6, 9] . Removing the underlined letters from \" 10101011011\" will produce a string \" 0011111\" , which is sorted. In the second and the third testcases the sequences are already sorted. In the fourth testcase you can choose a sequence a= [ 3] . s' = \" 11\" , which is sorted. In the fifth testcase there is no way to choose a sequence a such that s' is sorted.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1499B"
  },
  {
    "title": "Two Houses",
    "url": "https://codeforces.com/problemset/problem/1498/E",
    "history": "This is an interactive problem. Remember to flush your output while communicating with the testing program. You may use fflush( stdout) in C+ + , system. out. flush( ) in Java, stdout. flush( ) in Python or flush( output) in Pascal to flush the output. If you use some other programming language, consult its documentation. You may also refer to the guide on interactive problems: https: / / codeforces. com/ blog/ entry/ 45307. There is a city in which Dixit lives. In the city, there are n houses. There is exactly one directed road between every pair of houses. For example, consider two houses A and B, then there is a directed road either from A to B or from B to A but not both. The number of roads leading to the i - th house is k_ i . Two houses A and B are bi- reachable if A is reachable from B and B is reachable from A. We say that house B is reachable from house A when there is a path from house A to house B. Dixit wants to buy two houses in the city, that is, one for living and one for studying. Of course, he would like to travel from one house to another. So, he wants to find a pair of bi- reachable houses A and B. Among all such pairs, he wants to choose one with the maximum value of | k_ A - k_ B| , where k_ i is the number of roads leading to the house i . If more than one optimal pair exists, any of them is suitable. Since Dixit is busy preparing CodeCraft, can you help him find the desired pair of houses, or tell him that no such houses exist? In the problem input, you are not given the direction of each road. You are given \u2014 for each house \u2014 only the number of incoming roads to that house ( k_ i ) . You are allowed to ask only one type of query from the judge: give two houses A and B, and the judge answers whether B is reachable from A. There is no upper limit on the number of queries. But, you cannot ask more queries after the judge answers \" Yes\" to any of your queries. Also, you cannot ask the same query twice. Once you have exhausted all your queries ( or the judge responds \" Yes\" to any of your queries) , your program must output its guess for the two houses and quit. See the Interaction section below for more details. InteractionTo ask a query, print \" ? A B\" ( 1 \u2264 A, B \u2264 N, A= \u0338 B) . The judge will respond \" Yes\" if house B is reachable from house A, or \" No\" otherwise. To output the final answer, print \" ! A B\" , where A and B are bi- reachable with the maximum possible value of | k_ A - k_ B| . If there does not exist such pair of houses A and B, output \" ! 0 0\" . After outputting the final answer, your program must terminate immediately, otherwise you will receive Wrong Answer verdict. You cannot ask the same query twice. There is no upper limit to the number of queries you ask, but, you cannot ask more queries after the judge answers \" Yes\" to any of your queries. Your program must now output the final answer ( \" ! A B\" or \" ! 0 0\" ) and terminate. If you ask a query in incorrect format or repeat a previous query, you will get Wrong Answer verdict. After printing a query do not forget to output the end of the line and flush the output. Otherwise, you will get the Idleness limit exceeded error. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages.",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 500 ) denoting the number of houses in the city. The next line contains n space- separated integers k_ 1, k_ 2, . . . , k_ n ( 0 \u2264 k_ i \u2264 n - 1 ) , the i - th of them represents the number of incoming roads to the i - th house.",
    "output": "",
    "note": "In the first sample input, we are given a city of three houses with one incoming road each. The user program asks one query: \" ? 1 2\" : asking whether we can reach from house 1 to house 2 . The judge responds with \" Yes\" . The user program now concludes that this is sufficient information to determine the correct answer. So, it outputs \" ! 1 2\" and quits. In the second sample input, the user program queries for six different pairs of houses, and finally answers \" ! 0 0\" as it is convinced that no two houses as desired in the question exist in this city.",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "interactive",
      "sortings"
    ],
    "id": "1498E"
  },
  {
    "title": "Box Fitting",
    "url": "https://codeforces.com/problemset/problem/1498/B",
    "history": "You are given n rectangles, each of height 1 . Each rectangle' s width is a power of 2 ( i. e. it can be represented as 2^ x for some non- negative integer x ) . You are also given a two- dimensional box of width W . Note that W may or may not be a power of 2 . Moreover, W is at least as large as the width of the largest rectangle. You have to find the smallest height of this box, such that it is able to fit all the given rectangles. It is allowed to have some empty space left in this box after fitting all the rectangles. You cannot rotate the given rectangles to make them fit into the box. Moreover, any two distinct rectangles must not overlap, i. e. , any two distinct rectangles must have zero intersection area. See notes for visual explanation of sample input.",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 3 ) \u2014 the number of test cases. Each test case consists of two lines. For each test case: the first line contains two integers n ( 1 \u2264 n \u2264 10^ 5 ) and W ( 1 \u2264 W \u2264 10^ 9 ) ; the second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 6 ) , where w_ i is the width of the i - th rectangle. Each w_ i is a power of 2 ; additionally, max_ i= 1^ n w_ i \u2264 W . The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "Output t integers. The i - th integer should be equal to the answer to the i - th test case \u2014 the smallest height of the box.",
    "note": "For the first test case in the sample input, the following figure shows one way to fit the given five rectangles into the 2D box with minimum height: In the figure above, the number inside each rectangle is its width. The width of the 2D box is 16 ( indicated with arrow below) . The minimum height required for the 2D box in this case is 2 ( indicated on the left) . In the second test case, you can have a minimum height of three by keeping two blocks ( one each of widths eight and two) on each of the three levels.",
    "topics": [
      "binary search",
      "bitmasks",
      "data structures",
      "greedy"
    ],
    "id": "1498B"
  },
  {
    "title": "Square-free division (hard version)",
    "url": "https://codeforces.com/problemset/problem/1497/E2",
    "history": "This is the hard version of the problem. The only difference is that in this version 0 \u2264 k \u2264 20 . There is an array a_ 1, a_ 2, . . . , a_ n of n positive integers. You should divide it into a minimal number of continuous segments, such that in each segment there are no two numbers ( on different positions) , whose product is a perfect square. Moreover, it is allowed to do at most k such operations before the division: choose a number in the array and change its value to any positive integer. What is the minimum number of continuous segments you should use if you will make changes optimally?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The first line of each test case contains two integers n , k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k \u2264 20 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) . It' s guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the answer to the problem.",
    "note": "In the first test case it is possible to change the array this way: [ 3, 6, 2, 4, 5] ( changed elements are underlined) . After that the array does not need to be divided, so the answer is 1 . In the second test case it is possible to change the array this way: [ 6, 2, 3, 8, 9, 5, 3, 6, 10, 11, 7] . After that such division is optimal: [ 6, 2, 3] [ 8, 9, 5, 3, 6, 10, 11, 7]",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1497E2"
  },
  {
    "title": "Square-Free Division (easy version)",
    "url": "https://codeforces.com/problemset/problem/1497/E1",
    "history": "This is the easy version of the problem. The only difference is that in this version k = 0 . There is an array a_ 1, a_ 2, . . . , a_ n of n positive integers. You should divide it into a minimal number of continuous segments, such that in each segment there are no two numbers ( on different positions) , whose product is a perfect square. Moreover, it is allowed to do at most k such operations before the division: choose a number in the array and change its value to any positive integer. But in this version k = 0 , so it is not important. What is the minimum number of continuous segments you should use if you will make changes optimally?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The first line of each test case contains two integers n , k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , k = 0 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) . It' s guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the answer to the problem.",
    "note": "In the first test case the division may be as follows: [ 18, 6] [ 2, 4] [ 1]",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "number theory",
      "two pointers"
    ],
    "id": "1497E1"
  },
  {
    "title": "M-arrays",
    "url": "https://codeforces.com/problemset/problem/1497/B",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n consisting of n positive integers and a positive integer m . You should divide elements of this array into some arrays. You can order the elements in the new arrays as you want. Let' s call an array m - divisible if for each two adjacent numbers in the array ( two numbers on the positions i and i+ 1 are called adjacent for each i ) their sum is divisible by m . An array of one element is m - divisible. Find the smallest number of m - divisible arrays that a_ 1, a_ 2, . . . , a_ n is possible to divide into.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The first line of each test case contains two integers n , m ( 1 \u2264 n \u2264 10^ 5, 1 \u2264 m \u2264 10^ 5) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) . It is guaranteed that the sum of n and the sum of m over all test cases do not exceed 10^ 5 .",
    "output": "For each test case print the answer to the problem.",
    "note": "In the first test case we can divide the elements as follows: [ 4, 8] . It is a 4 - divisible array because 4+ 8 is divisible by 4 . [ 2, 6, 2] . It is a 4 - divisible array because 2+ 6 and 6+ 2 are divisible by 4 . [ 9] . It is a 4 - divisible array because it consists of one element.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1497B"
  },
  {
    "title": "Meximization",
    "url": "https://codeforces.com/problemset/problem/1497/A",
    "history": "You are given an integer n and an array a_ 1, a_ 2, . . . , a_ n . You should reorder the elements of the array a in such way that the sum of MEX on prefixes ( i - th prefix is a_ 1, a_ 2, . . . , a_ i ) is maximized. Formally, you should find an array b_ 1, b_ 2, . . . , b_ n , such that the sets of elements of arrays a and b are equal ( it is equivalent to array b can be found as an array a with some reordering of its elements) and \u2211_ i= 1^ nMEX( b_ 1, b_ 2, . . . , b_ i) is maximized. MEX of a set of nonnegative integers is the minimal nonnegative integer such that it is not in the set. For example, MEX( { 1, 2, 3} ) = 0 , MEX( { 0, 1, 2, 4, 5} ) = 3 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 100) .",
    "output": "For each test case print an array b_ 1, b_ 2, . . . , b_ n \u2014 the optimal reordering of a_ 1, a_ 2, . . . , a_ n , so the sum of MEX on its prefixes is maximized. If there exist multiple optimal answers you can find any.",
    "note": "In the first test case in the answer MEX for prefixes will be: MEX( { 0} ) = 1 MEX( { 0, 1} ) = 2 MEX( { 0, 1, 2} ) = 3 MEX( { 0, 1, 2, 3} ) = 4 MEX( { 0, 1, 2, 3, 4} ) = 5 MEX( { 0, 1, 2, 3, 4, 7} ) = 5 MEX( { 0, 1, 2, 3, 4, 7, 3} ) = 5 The sum of MEX = 1 + 2 + 3 + 4 + 5 + 5 + 5 = 25 . It can be proven, that it is a maximum possible sum of MEX on prefixes.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1497A"
  },
  {
    "title": "Split it!",
    "url": "https://codeforces.com/problemset/problem/1496/A",
    "history": "Kawashiro Nitori is a girl who loves competitive programming. One day she found a string and an integer. As an advanced problem setter, she quickly thought of a problem. Given a string s and a parameter k , you need to check if there exist k+ 1 non- empty strings a_ 1, a_ 2. . . , a_ k+ 1 , such that s= a_ 1+ a_ 2+ . . . + a_ k+ a_ k+ 1+ R( a_ k) + R( a_ k- 1) + . . . + R( a_ 1) . Here + represents concatenation. We define R( x) as a reversed string x . For example R( abcd) = dcba . Note that in the formula above the part R( a_ k+ 1) is intentionally skipped.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case description contains two integers n , k ( 1\u2264 n\u2264 100 , 0\u2264 k\u2264\u230an/ 2\u230b ) \u2014 the length of the string s and the parameter k . The second line of each test case description contains a single string s of length n , consisting of lowercase English letters.",
    "output": "For each test case, print \" YES\" ( without quotes) , if it is possible to find a_ 1, a_ 2, . . . , a_ k+ 1 , and \" NO\" ( without quotes) otherwise. You can print letters in any case ( upper or lower) .",
    "note": "In the first test case, one possible solution is a_ 1= qw and a_ 2= q . In the third test case, one possible solution is a_ 1= i and a_ 2= o . In the fifth test case, one possible solution is a_ 1= dokidokiliteratureclub .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1496A"
  },
  {
    "title": "Qingshan and Daniel",
    "url": "https://codeforces.com/problemset/problem/1495/E",
    "history": "Qingshan and Daniel are going to play a card game. But it will be so boring if only two persons play this. So they will make n robots in total to play this game automatically. Robots made by Qingshan belong to the team 1 , and robots made by Daniel belong to the team 2 . Robot i belongs to team t_ i . Before the game starts, a_ i cards are given for robot i . The rules for this card game are simple: Before the start, the robots are arranged in a circle in the order or their indices. The robots will discard cards in some order, in each step one robot discards a single card. When the game starts, robot 1 will discard one of its cards. After that, robots will follow the following rules: If robot i discards the card last, the nearest robot whose team is opposite from i ' s will discard the card next. In another word j will discard a card right after i , if and only if among all j that satisfy t_ i t_ j , dist( i, j) ( definition is below) is minimum. The robot who has no cards should quit the game immediately. This robot won' t be considered in the next steps. When no robot can discard the card next, the game ends. We define the distance from robot x to robot y as dist( x, y) = ( y- x+ n) n . It is similar to the oriented distance on the circle. For example, when n= 5 , the distance from 1 to 3 is dist( 1, 3) = ( 3- 1+ 5) 5= 2 , the distance from 3 to 1 is dist( 3, 1) = ( 1- 3+ 5) 5 = 3 . Later, Qingshan finds out that it will take so much time to see how robots play. She wants to know the result as quickly as possible. You, as Qingshan' s fan, are asked to calculate an array [ ans_ 1, ans_ 2, . . . , ans_ n] \u2014 ans_ i is equal to the number of cards, that i - th robot will discard during the game. You need to hurry! To avoid the large size of the input, the team and the number of cards of each robot will be generated in your code with some auxiliary arrays.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5\u00b7 10^ 6 ) \u2014 the number of robots playing this game. The second line contains one integer m ( 1 \u2264 m \u2264min( n, 200 000) ) . Each of the next m line contains four integers p_ i , k_ i , b_ i , w_ i ( 1 \u2264 p_ i \u2264 n , 1 \u2264 k_ i \u2264 10^ 9+ 7 , 0 \u2264 b_ i , w_ i< k_ i ) . It' s guaranteed that p_ m= n and p_ j- 1< p_ j ( 2 \u2264 j \u2264 m ) . Arrays a_ j and t_ j should be generated by the following pseudo code: seed = 0base = 0function rnd( ) : ret = seed seed = ( seed * base + 233) mod 1000000007 return retp[ 0] = 0for i = 1 to m: seed = b[ i] base = w[ i] for j = p[ i - 1] + 1 to p[ i] : t[ j] = ( rnd( ) mod 2) + 1 a[ j] = ( rnd( ) mod k[ i] ) + 1",
    "output": "Print a single integer ( \u220f_ i= 1^ n ( ( ans_ i \u2295 i^ 2) + 1) ) 10^ 9+ 7 , where \u2295 denotes the bitwise XOR operation.",
    "note": "In the first test case a= [ 5, 5, 1] and t= [ 1, 2, 2] . The robot 1 discards the card first. Then robot 2 discards the card next. Robot 3 doesn' t discard the card next because dist( 1, 2) < dist( 1, 3) . Then robot 1 discards the card next. Robot 3 doesn' t discard the card next because t_ 2= t_ 3 . If we write down the index of the robot who discards a card in time order, it will be the sequence [ 1, 2, 1, 2, 1, 2, 1, 2] . So robots 1 , 2 and 3 discard 5 , 5 and 0 cards, respectively. And the answer is ( ( ( 5 \u2295 1^ 2) + 1) \u00d7( ( 5 \u2295 2^ 2) + 1) \u00d7( ( 0 \u2295 3^ 2) + 1) ) 10^ 9+ 7= ( 5\u00d7 2 \u00d7 10) 10^ 9+ 7= 100 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1495E"
  },
  {
    "title": "Let's Go Hiking",
    "url": "https://codeforces.com/problemset/problem/1495/B",
    "history": "On a weekend, Qingshan suggests that she and her friend Daniel go hiking. Unfortunately, they are busy high school students, so they can only go hiking on scratch paper. A permutation p is written from left to right on the paper. First Qingshan chooses an integer index x ( 1\u2264 x\u2264 n ) and tells it to Daniel. After that, Daniel chooses another integer index y ( 1\u2264 y\u2264 n , y x ) . The game progresses turn by turn and as usual, Qingshan moves first. The rules follow: If it is Qingshan' s turn, Qingshan must change x to such an index x' that 1\u2264 x' \u2264 n , | x' - x| = 1 , x' y , and p_ x' < p_ x at the same time. If it is Daniel' s turn, Daniel must change y to such an index y' that 1\u2264 y' \u2264 n , | y' - y| = 1 , y' x , and p_ y' > p_ y at the same time. The person who can' t make her or his move loses, and the other wins. You, as Qingshan' s fan, are asked to calculate the number of possible x to make Qingshan win in the case both players play optimally.",
    "input": "The first line contains a single integer n ( 2\u2264 n\u2264 10^ 5 ) \u2014 the length of the permutation. The second line contains n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1\u2264 p_ i\u2264 n ) \u2014 the permutation.",
    "output": "Print the number of possible values of x that Qingshan can choose to make her win.",
    "note": "In the first test case, Qingshan can only choose x= 3 to win, so the answer is 1 . In the second test case, if Qingshan will choose x= 4 , Daniel can choose y= 1 . In the first turn ( Qingshan' s) Qingshan chooses x' = 3 and changes x to 3 . In the second turn ( Daniel' s) Daniel chooses y' = 2 and changes y to 2 . Qingshan can' t choose x' = 2 because y= 2 at this time. Then Qingshan loses.",
    "topics": [
      "games",
      "greedy"
    ],
    "id": "1495B"
  },
  {
    "title": "Diamond Miner",
    "url": "https://codeforces.com/problemset/problem/1495/A",
    "history": "Diamond Miner is a game that is similar to Gold Miner, but there are n miners instead of 1 in this game. The mining area can be described as a plane. The n miners can be regarded as n points on the y- axis. There are n diamond mines in the mining area. We can regard them as n points on the x- axis. For some reason, no miners or diamond mines can be at the origin ( point ( 0, 0) ) . Every miner should mine exactly one diamond mine. Every miner has a hook, which can be used to mine a diamond mine. If a miner at the point ( a, b) uses his hook to mine a diamond mine at the point ( c, d) , he will spend \u221a( ( a- c) ^ 2+ ( b- d) ^ 2) energy to mine it ( the distance between these points) . The miners can' t move or help each other. The object of this game is to minimize the sum of the energy that miners spend. Can you find this minimum?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1\u2264 t\u2264 10 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of miners and mines. Each of the next 2n lines contains two space- separated integers x ( - 10^ 8 \u2264 x \u2264 10^ 8 ) and y ( - 10^ 8 \u2264 y \u2264 10^ 8 ) , which represent the point ( x, y) to describe a miner' s or a diamond mine' s position. Either x = 0 , meaning there is a miner at the point ( 0, y) , or y = 0 , meaning there is a diamond mine at the point ( x, 0) . There can be multiple miners or diamond mines at the same point. It is guaranteed that no point is at the origin. It is guaranteed that the number of points on the x- axis is equal to n and the number of points on the y- axis is equal to n . It' s guaranteed that the sum of n for all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print a single real number \u2014 the minimal sum of energy that should be spent. Your answer is considered correct if its absolute or relative error does not exceed 10^ - 9 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 9 .",
    "note": "In the first test case, the miners are at ( 0, 1) and ( 0, - 1) , while the diamond mines are at ( 1, 0) and ( - 2, 0) . If you arrange the miners to get the diamond mines in the way, shown in the picture, you can get the sum of the energy \u221a( 2) + \u221a( 5) .",
    "topics": [
      "geometry",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1495A"
  },
  {
    "title": "Dogeforces",
    "url": "https://codeforces.com/problemset/problem/1494/D",
    "history": "The Dogeforces company has k employees. Each employee, except for lower- level employees, has at least 2 subordinates. Lower- level employees have no subordinates. Each employee, except for the head of the company, has exactly one direct supervisor. The head of the company is a direct or indirect supervisor of all employees. It is known that in Dogeforces, each supervisor receives a salary strictly more than all his subordinates. The full structure of the company is a secret, but you know the number of lower- level employees and for each pair of lower- level employees, the salary of their common supervisor is known ( if there are several such supervisors, then the supervisor with the minimum salary) . You have to restore the structure of the company.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 500 ) \u2014 the number of lower- level employees. This is followed by n lines, where i - th line contains n integers a_ i, 1, a_ i, 2, . . . , a_ i, n ( 1 \u2264 a_ i, j\u2264 5000 ) \u2014 salary of the common supervisor of employees with numbers i and j . It is guaranteed that a_ i, j = a_ j, i . Note that a_ i, i is equal to the salary of the i - th employee.",
    "output": "In the first line, print a single integer k \u2014 the number of employees in the company. In the second line, print k integers c_ 1, c_ 2, . . . , c_ k , where c_ i is the salary of the employee with the number i . In the third line, print a single integer r \u2014 the number of the employee who is the head of the company. In the following k- 1 lines, print two integers v and u ( 1 \u2264 v, u \u2264 k ) \u2014 the number of the employee and his direct supervisor. Note that the lower- level employees have numbers from 1 to n , and for the rest of the employees, you have to assign numbers from n+ 1 to k . If there are several correct company structures, you can print any of them.",
    "note": "One of the possible structures in the first example:",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dsu",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1494D"
  },
  {
    "title": "1D Sokoban",
    "url": "https://codeforces.com/problemset/problem/1494/C",
    "history": "You are playing a game similar to Sokoban on an infinite number line. The game is discrete, so you only consider integer positions on the line. You start on a position 0 . There are n boxes, the i - th box is on a position a_ i . All positions of the boxes are distinct. There are also m special positions, the j - th position is b_ j . All the special positions are also distinct. In one move you can go one position to the left or to the right. If there is a box in the direction of your move, then you push the box to the next position in that direction. If the next position is taken by another box, then that box is also pushed to the next position, and so on. You can' t go through the boxes. You can' t pull the boxes towards you. You are allowed to perform any number of moves ( possibly, zero) . Your goal is to place as many boxes on special positions as possible. Note that some boxes can be initially placed on special positions.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then descriptions of t testcases follow. The first line of each testcase contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of boxes and the number of special positions, respectively. The second line of each testcase contains n distinct integers in the increasing order a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ 1 < a_ 2 < . . . < a_ n \u2264 10^ 9 ; a_ i = \u0338 0 ) \u2014 the initial positions of the boxes. The third line of each testcase contains m distinct integers in the increasing order b_ 1, b_ 2, . . . , b_ m ( - 10^ 9 \u2264 b_ 1 < b_ 2 < . . . < b_ m \u2264 10^ 9 ; b_ i = \u0338 0 ) \u2014 the special positions. The sum of n over all testcases doesn' t exceed 2 \u00b7 10^ 5 . The sum of m over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase print a single integer \u2014 the maximum number of boxes that can be placed on special positions.",
    "note": "In the first testcase you can go 5 to the right: the box on position 1 gets pushed to position 6 and the box on position 5 gets pushed to position 7 . Then you can go 6 to the left to end up on position - 1 and push a box to - 2 . At the end, the boxes are on positions [ - 2, 6, 7, 11, 15] , respectively. Among them positions [ - 2, 6, 7, 15] are special, thus, the answer is 4 . In the second testcase you can push the box from - 1 to - 10^ 9 , then the box from 1 to 10^ 9 and obtain the answer 2 . The third testcase showcases that you are not allowed to pull the boxes, thus, you can' t bring them closer to special positions. In the fourth testcase all the boxes are already on special positions, so you can do nothing and still obtain the answer 3 . In the fifth testcase there are fewer special positions than boxes. You can move either 8 or 9 to the right to have some box on position 10 .",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1494C"
  },
  {
    "title": "Berland Crossword",
    "url": "https://codeforces.com/problemset/problem/1494/B",
    "history": "Berland crossword is a puzzle that is solved on a square grid with n rows and n columns. Initially all the cells are white. To solve the puzzle one has to color some cells on the border of the grid black in such a way that: exactly U cells in the top row are black; exactly R cells in the rightmost column are black; exactly D cells in the bottom row are black; exactly L cells in the leftmost column are black. Note that you can color zero cells black and leave every cell white. Your task is to check if there exists a solution to the given puzzle.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The only line of each testcase contains 5 integers n, U, R, D, L ( 2 \u2264 n \u2264 100 ; 0 \u2264 U, R, D, L \u2264 n ) .",
    "output": "For each testcase print \" YES\" if the solution exists and \" NO\" otherwise. You may print every letter in any case you want ( so, for example, the strings yEs, yes, Yes and YES are all recognized as positive answer) .",
    "note": "Here are possible solutions to testcases 1 , 2 and 4 :",
    "topics": [
      "bitmasks",
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1494B"
  },
  {
    "title": "Enormous XOR",
    "url": "https://codeforces.com/problemset/problem/1493/E",
    "history": "You are given two integers l and r in binary representation. Let g( x, y) be equal to the bitwise XOR of all integers from x to y inclusive ( that is x \u2295 ( x+ 1) \u2295. . . \u2295 ( y- 1) \u2295 y ) . Let' s define f( l, r) as the maximum of all values of g( x, y) satisfying l \u2264 x \u2264 y \u2264 r . Output f( l, r) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the length of the binary representation of r . The second line contains the binary representation of l \u2014 a string of length n consisting of digits 0 and 1 ( 0 \u2264 l < 2^ n ) . The third line contains the binary representation of r \u2014 a string of length n consisting of digits 0 and 1 ( 0 \u2264 r < 2^ n ) . It is guaranteed that l \u2264 r . The binary representation of r does not contain any extra leading zeros ( if r= 0 , the binary representation of it consists of a single zero) . The binary representation of l is preceded with leading zeros so that its length is equal to n .",
    "output": "In a single line output the value of f( l, r) for the given pair of l and r in binary representation without extra leading zeros.",
    "note": "In sample test case l= 19 , r= 122 . f( x, y) is maximal and is equal to 127 , with x= 27 , y= 100 , for example.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy",
      "math",
      "strings",
      "two pointers"
    ],
    "id": "1493E"
  },
  {
    "title": "K-beautiful Strings",
    "url": "https://codeforces.com/problemset/problem/1493/C",
    "history": "You are given a string s consisting of lowercase English letters and a number k . Let' s call a string consisting of lowercase English letters beautiful if the number of occurrences of each letter in that string is divisible by k . You are asked to find the lexicographically smallest beautiful string of length n , which is lexicographically greater or equal to string s . If such a string does not exist, output - 1 . A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 10 000 ) \u2014 the number of test cases. The next 2 \u00b7 T lines contain the description of test cases. The description of each test case consists of two lines. The first line of the description contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 5 ) \u2014 the length of string s and number k respectively. The second line contains string s consisting of lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output in a separate line lexicographically smallest beautiful string of length n , which is greater or equal to string s , or - 1 if such a string does not exist.",
    "note": "In the first test case \" acac\" is greater than or equal to s , and each letter appears 2 or 0 times in it, so it is beautiful. In the second test case each letter appears 0 or 1 times in s , so s itself is the answer. We can show that there is no suitable string in the third test case. In the fourth test case each letter appears 0 , 3 , or 6 times in \" abaabaaab\" . All these integers are divisible by 3 .",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1493C"
  },
  {
    "title": "Anti-knapsack",
    "url": "https://codeforces.com/problemset/problem/1493/A",
    "history": "You are given two integers n and k . You are asked to choose maximum number of distinct integers from 1 to n so that there is no subset of chosen numbers with sum equal to k . A subset of a set is a set that can be obtained from initial one by removing some ( possibly all or none) elements of it.",
    "input": "The first line contains the number of test cases T ( 1 \u2264 T \u2264 100 ) . Each of the next T lines contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 1000 ) \u2014 the description of test cases.",
    "output": "For each test case output two lines. In the first line output a single integer m \u2014 the number of chosen integers. In the second line output m distinct integers from 1 to n \u2014 the chosen numbers. If there are multiple answers, print any. You can print the numbers in any order.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1493A"
  },
  {
    "title": "Almost Fault-Tolerant Database",
    "url": "https://codeforces.com/problemset/problem/1492/E",
    "history": "You are storing an integer array of length m in a database. To maintain internal integrity and protect data, the database stores n copies of this array. Unfortunately, the recent incident may have altered the stored information in every copy in the database. It' s believed, that the incident altered at most two elements in every copy. You need to recover the original array based on the current state of the database. In case there are multiple ways to restore the array, report any. If there is no array that differs from every copy in no more than two positions, report that as well.",
    "input": "The first line contains integers n and m ( 2 \u2264 n ; 1 \u2264 m ; n \u00b7 m \u2264 250 000 ) \u2014 the number of copies and the size of the array. Each of the following n lines describes one of the currently stored copies in the database, it consists of m integers s_ i, 1, s_ i, 2, . . . , s_ i, m ( 1 \u2264 s_ i, j\u2264 10^ 9 ) .",
    "output": "If there is an array consistent with all given copies, print \" Yes\" and then the array itself. The array must have length m and contain integers between 1 and 10^ 9 only. Otherwise, print \" No\" . If there are multiple possible arrays, print any of them.",
    "note": "In the first example, the array [ 1, 10, 1, 100] differs from first and second copies in just one position, and from the third copy in two positions. In the second example, array [ 1, 1, 1, 1, 1, 1, 1] is the same as the first copy and differs from all other copies in at most two positions. In the third example, there is no array differing in at most two positions from every database' s copy.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "implementation"
    ],
    "id": "1492E"
  },
  {
    "title": "Genius's Gambit",
    "url": "https://codeforces.com/problemset/problem/1492/D",
    "history": "You are given three integers a , b , k . Find two binary integers x and y ( x \u2265 y ) such that both x and y consist of a zeroes and b ones; x - y ( also written in binary form) has exactly k ones. You are not allowed to use leading zeros for x and y .",
    "input": "The only line contains three integers a , b , and k ( 0 \u2264 a ; 1 \u2264 b ; 0 \u2264 k \u2264 a + b \u2264 2 \u00b7 10^ 5 ) \u2014 the number of zeroes, ones, and the number of ones in the result.",
    "output": "If it' s possible to find two suitable integers, print \" Yes\" followed by x and y in base- 2. Otherwise print \" No\" . If there are multiple possible answers, print any of them.",
    "note": "In the first example, x = 101000_ 2 = 2^ 5 + 2^ 3 = 40_ 10 , y = 100001_ 2 = 2^ 5 + 2^ 0 = 33_ 10 , 40_ 10 - 33_ 10 = 7_ 10 = 2^ 2 + 2^ 1 + 2^ 0 = 111_ 2 . Hence x- y has 3 ones in base- 2. In the second example, x = 10100_ 2 = 2^ 4 + 2^ 2 = 20_ 10 , y = 10010_ 2 = 2^ 4 + 2^ 1 = 18 , x - y = 20 - 18 = 2_ 10 = 10_ 2 . This is precisely one 1. In the third example, one may show, that it' s impossible to find an answer.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1492D"
  },
  {
    "title": "Maximum width",
    "url": "https://codeforces.com/problemset/problem/1492/C",
    "history": "Your classmate, whom you do not like because he is boring, but whom you respect for his intellect, has two strings: s of length n and t of length m . A sequence p_ 1, p_ 2, . . . , p_ m , where 1 \u2264 p_ 1 < p_ 2 < . . . < p_ m \u2264 n , is called beautiful, if s_ p_ i = t_ i for all i from 1 to m . The width of a sequence is defined as max_ 1 \u2264 i < m( p_ i + 1 - p_ i) . Please help your classmate to identify the beautiful sequence with the maximum width. Your classmate promised you that for the given strings s and t there is at least one beautiful sequence.",
    "input": "The first input line contains two integers n and m ( 2 \u2264 m \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the lengths of the strings s and t . The following line contains a single string s of length n , consisting of lowercase letters of the Latin alphabet. The last line contains a single string t of length m , consisting of lowercase letters of the Latin alphabet. It is guaranteed that there is at least one beautiful sequence for the given strings.",
    "output": "Output one integer \u2014 the maximum width of a beautiful sequence.",
    "note": "In the first example there are two beautiful sequences of width 3 : they are { 1, 2, 5} and { 1, 4, 5} . In the second example the beautiful sequence with the maximum width is { 1, 5} . In the third example there is exactly one beautiful sequence \u2014 it is { 1, 2, 3, 4, 5} . In the fourth example there is exactly one beautiful sequence \u2014 it is { 1, 2} .",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1492C"
  },
  {
    "title": "Card Deck",
    "url": "https://codeforces.com/problemset/problem/1492/B",
    "history": "You have a deck of n cards, and you' d like to reorder it to a new one. Each card has a value between 1 and n equal to p_ i . All p_ i are pairwise distinct. Cards in a deck are numbered from bottom to top, i. e. p_ 1 stands for the bottom card, p_ n is the top card. In each step you pick some integer k > 0 , take the top k cards from the original deck and place them, in the order they are now, on top of the new deck. You perform this operation until the original deck is empty. ( Refer to the notes section for the better understanding. ) Let' s define an order of a deck as \u2211_ i = 1^ nn^ n - i\u00b7 p_ i . Given the original deck, output the deck with maximum possible order you can make using the operation above.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the size of deck you have. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ; p_ i = \u0338 p_ j if i = \u0338 j ) \u2014 values of card in the deck from bottom to top. It' s guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case print the deck with maximum possible order. Print values of cards in the deck from bottom to top. If there are multiple answers, print any of them.",
    "note": "In the first test case, one of the optimal strategies is the next one: take 1 card from the top of p and move it to p' : p becomes [ 1, 2, 3] , p' becomes [ 4] ; take 1 card from the top of p : p becomes [ 1, 2] , p' becomes [ 4, 3] ; take 1 card from the top of p : p becomes [ 1] , p' becomes [ 4, 3, 2] ; take 1 card from the top of p : p becomes empty, p' becomes [ 4, 3, 2, 1] . In result, p' has order equal to 4^ 3 \u00b7 4 + 4^ 2 \u00b7 3 + 4^ 1 \u00b7 2 + 4^ 0 \u00b7 1 = 256 + 48 + 8 + 1 = 313 . In the second test case, one of the optimal strategies is: take 4 cards from the top of p and move it to p' : p becomes [ 1] , p' becomes [ 5, 2, 4, 3] ; take 1 card from the top of p and move it to p' : p becomes empty, p' becomes [ 5, 2, 4, 3, 1] ; In result, p' has order equal to 5^ 4 \u00b7 5 + 5^ 3 \u00b7 2 + 5^ 2 \u00b7 4 + 5^ 1 \u00b7 3 + 5^ 0 \u00b7 1 = 3125 + 250 + 100 + 15 + 1 = 3491 . In the third test case, one of the optimal strategies is: take 2 cards from the top of p and move it to p' : p becomes [ 4, 2, 5, 3] , p' becomes [ 6, 1] ; take 2 cards from the top of p and move it to p' : p becomes [ 4, 2] , p' becomes [ 6, 1, 5, 3] ; take 2 cards from the top of p and move it to p' : p becomes empty, p' becomes [ 6, 1, 5, 3, 4, 2] . In result, p' has order equal to 6^ 5 \u00b7 6 + 6^ 4 \u00b7 1 + 6^ 3 \u00b7 5 + 6^ 2 \u00b7 3 + 6^ 1 \u00b7 4 + 6^ 0 \u00b7 2 = 46656 + 1296 + 1080 + 108 + 24 + 2 = 49166 .",
    "topics": [
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1492B"
  },
  {
    "title": "Zookeeper and The Infinite Zoo",
    "url": "https://codeforces.com/problemset/problem/1491/D",
    "history": "There is a new attraction in Singapore Zoo: The Infinite Zoo. The Infinite Zoo can be represented by a graph with an infinite number of vertices labeled 1, 2, 3, . . . . There is a directed edge from vertex u to vertex u+ v if and only if u& v= v , where & denotes the bitwise AND operation. There are no other edges in the graph. Zookeeper has q queries. In the i - th query she will ask you if she can travel from vertex u_ i to vertex v_ i by going through directed edges.",
    "input": "The first line contains an integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. The i - th of the next q lines will contain two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i < 2^ 30 ) \u2014 a query made by Zookeeper.",
    "output": "For the i - th of the q queries, output \" YES\" in a single line if Zookeeper can travel from vertex u_ i to vertex v_ i . Otherwise, output \" NO\" . You can print your answer in any case. For example, if the answer is \" YES\" , then the output \" Yes\" or \" yeS\" will also be considered as correct answer.",
    "note": "The subgraph on vertices 1, 2, 3, 4, 5, 6 is shown below.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1491D"
  },
  {
    "title": "Pekora and Trampoline",
    "url": "https://codeforces.com/problemset/problem/1491/C",
    "history": "There is a trampoline park with n trampolines in a line. The i - th of which has strength S_ i . Pekora can jump on trampolines in multiple passes. She starts the pass by jumping on any trampoline of her choice. If at the moment Pekora jumps on trampoline i , the trampoline will launch her to position i + S_ i , and S_ i will become equal to max( S_ i- 1, 1) . In other words, S_ i will decrease by 1 , except of the case S_ i= 1 , when S_ i will remain equal to 1 . If there is no trampoline in position i + S_ i , then this pass is over. Otherwise, Pekora will continue the pass by jumping from the trampoline at position i + S_ i by the same rule as above. Pekora can' t stop jumping during the pass until she lands at the position larger than n ( in which there is no trampoline) . Poor Pekora! Pekora is a naughty rabbit and wants to ruin the trampoline park by reducing all S_ i to 1 . What is the minimum number of passes she needs to reduce all S_ i to 1 ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the number of trampolines. The second line of each test case contains n integers S_ 1, S_ 2, . . . , S_ n ( 1 \u2264 S_ i \u2264 10^ 9 ) , where S_ i is the strength of the i - th trampoline. It' s guaranteed that the sum of n over all test cases doesn' t exceed 5000 .",
    "output": "For each test case, output a single integer \u2014 the minimum number of passes Pekora needs to do to reduce all S_ i to 1 .",
    "note": "For the first test case, here is an optimal series of passes Pekora can take. ( The bolded numbers are the positions that Pekora jumps into during these passes. ) [ 1, 4, 2, 2, 2, 2, 2] [ 1, 4, 1, 2, 1, 2, 1] [ 1, 3, 1, 2, 1, 1, 1] [ 1, 2, 1, 2, 1, 1, 1] For the second test case, the optimal series of passes is show below. [ 2, 3] [ 1, 3] [ 1, 2] For the third test case, all S_ i are already equal to 1 .",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1491C"
  },
  {
    "title": "K-th Largest Value",
    "url": "https://codeforces.com/problemset/problem/1491/A",
    "history": "You are given an array a consisting of n integers. Initially all elements of a are either 0 or 1 . You need to process q queries of two kinds: 1 x : Assign to a_ x the value 1 - a_ x . 2 k : Print the k - th largest value of the array. As a reminder, k - th largest value of the array b is defined as following: Sort the array in the non- increasing order, return k - th element from it. For example, the second largest element in array [ 0, 1, 0, 1] is 1 , as after sorting in non- increasing order it becomes [ 1, 1, 0, 0] , and the second element in this array is equal to 1 .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 10^ 5 ) \u2014 the length of the given array and the number of queries. The second line contains n integers a_ 1, a_ 2, a_ 3, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) \u2014 elements of the initial array. Each of the following q lines contains two integers. The first integer is t ( 1 \u2264 t \u2264 2 ) \u2014 the type of query. If t = 1 the second integer is x ( 1 \u2264 x \u2264 n ) \u2014 the position of the modified number. You have to assign to a_ x the value 1 - a_ x . If t = 2 the second integer is k ( 1 \u2264 k \u2264 n ) \u2014 you need to print the k - th largest value of the array. It' s guaranteed that there will be at least one query of the second type ( satisfying t = 2 ) .",
    "output": "For each query of the second type, print a single integer \u2014 the answer to the query.",
    "note": "Initially a = [ 1, 1, 0, 1, 0] . The first operation is printing the third largest value, which is 1 . The second operation is assigning a_ 2 the value 0 , a becomes [ 1, 0, 0, 1, 0] . The third operation is printing the third largest value, it is 0 . The fourth operation is printing the first largest value, it is 1 . The last operation is printing the fifth largest value, it is 0 .",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1491A"
  },
  {
    "title": "Equalize the Array",
    "url": "https://codeforces.com/problemset/problem/1490/F",
    "history": "Polycarp was gifted an array a of length n . Polycarp considers an array beautiful if there exists a number C , such that each number in the array occurs either zero or C times. Polycarp wants to remove some elements from the array a to make it beautiful. For example, if n= 6 and a = [ 1, 3, 2, 1, 4, 2] , then the following options are possible to make the array a array beautiful: Polycarp removes elements at positions 2 and 5 , array a becomes equal to [ 1, 2, 1, 2] ; Polycarp removes elements at positions 1 and 6 , array a becomes equal to [ 3, 2, 1, 4] ; Polycarp removes elements at positions 1, 2 and 6 , array a becomes equal to [ 2, 1, 4] ; Help Polycarp determine the minimum number of elements to remove from the array a to make it beautiful.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case consists of one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 array a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one integer \u2014 the minimum number of elements that Polycarp has to remove from the array a to make it beautiful.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1490F"
  },
  {
    "title": "Accidental Victory",
    "url": "https://codeforces.com/problemset/problem/1490/E",
    "history": "A championship is held in Berland, in which n players participate. The player with the number i has a_ i ( a_ i \u2265 1 ) tokens. The championship consists of n- 1 games, which are played according to the following rules: in each game, two random players with non- zero tokens are selected; the player with more tokens is considered the winner of the game ( in case of a tie, the winner is chosen randomly) ; the winning player takes all of the loser' s tokens; The last player with non- zero tokens is the winner of the championship. All random decisions that are made during the championship are made equally probable and independently. For example, if n= 4 , a = [ 1, 2, 4, 3] , then one of the options for the game ( there could be other options) is: during the first game, the first and fourth players were selected. The fourth player has more tokens, so he takes the first player' s tokens. Now a = [ 0, 2, 4, 4] ; during the second game, the fourth and third players were selected. They have the same number of tokens, but in a random way, the third player is the winner. Now a = [ 0, 2, 8, 0] ; during the third game, the second and third players were selected. The third player has more tokens, so he takes the second player' s tokens. Now a = [ 0, 0, 10, 0] ; the third player is declared the winner of the championship. Championship winners will receive personalized prizes. Therefore, the judges want to know in advance which players have a chance of winning, i. e have a non- zero probability of winning the championship. You have been asked to find all such players.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case consists of one positive integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of players in the championship. The second line of each test case contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of tokens the players have. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the number of players who have a nonzero probability of winning the championship. On the next line print the numbers of these players in increasing order. Players are numbered starting from one in the order in which they appear in the input.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1490E"
  },
  {
    "title": "Dense Array",
    "url": "https://codeforces.com/problemset/problem/1490/A",
    "history": "Polycarp calls an array dense if the greater of any two adjacent elements is not more than twice bigger than the smaller. More formally, for any i ( 1 \u2264 i \u2264 n- 1 ) , this condition must be satisfied: max( a[ i] , a[ i+ 1] ) / min( a[ i] , a[ i+ 1] ) \u2264 2 For example, the arrays [ 1, 2, 3, 4, 3] , [ 1, 1, 1] and [ 5, 10] are dense. And the arrays [ 5, 11] , [ 1, 4, 2] , [ 6, 6, 1] are not dense. You are given an array a of n integers. What is the minimum number of numbers you need to add to an array to make it dense? You can insert numbers anywhere in the array. If the array is already dense, no numbers need to be added. For example, if a= [ 4, 2, 10, 1] , then the answer is 5 , and the array itself after inserting elements into it may look like this: a= [ 4, 2, 3, 5, 10, 6, 4, 2, 1] ( there are other ways to build such a ) .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) . Then t test cases follow. The first line of each test case contains one integer n ( 2 \u2264 n \u2264 50 ) \u2014 the length of the array a . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 50 ) .",
    "output": "For each test case, output one integer \u2014 the minimum number of numbers that must be added to the array to make it dense.",
    "note": "The first test case is explained in the statements. In the second test case, you can insert one element, a= [ 1, 2, 3] . In the third test case, you can insert two elements, a= [ 6, 4, 2, 1] . In the fourth test case, you can insert one element, a= [ 1, 2, 4, 2] . In the fifth test case, the array a is already dense.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1490A"
  },
  {
    "title": "Painting Numbers",
    "url": "https://codeforces.com/problemset/problem/1488/G",
    "history": "You are given n integers, each integer is from 1 to n , all of them are pairwise distinct. You have to paint them red and blue ( each integer should have exactly one color) . The cost of painting is the number of pairs ( x, y) such that y x = 0 , y is red and x is blue. For each k \u2208 [ 1, n] , calculate the maximum cost of painting if exactly k integers should have a red color.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 10^ 5 ) .",
    "output": "For each k \u2208 [ 1, n] print one integer \u2014 the maximum cost of painting, if exactly k integers should be red.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "number theory"
    ],
    "id": "1488G"
  },
  {
    "title": "Problemsolving Marathon",
    "url": "https://codeforces.com/problemset/problem/1488/D",
    "history": "Polycarp has decided to do a problemsolving marathon. He wants to solve s problems in n days. Let a_ i be the number of problems he solves during the i - th day. He wants to find a distribution of problems into days such that: a_ i is an integer value for all i from 1 to n ; a_ i \u2265 1 for all i from 1 to n ; a_ i + 1\u2265 a_ i for all i from 1 to n- 1 ; a_ i + 1\u2264 2 \u00b7 a_ i for all i from 1 to n- 1 ; a_ n is maximized. Note that a_ 1 can be arbitrarily large. What is the largest value of a_ n Polycarp can obtain?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then the descriptions of t testcases follow. The only line of each testcase contains two integers n and s ( 1 \u2264 n \u2264 s \u2264 10^ 18 ) \u2014 the number of days and the number of problems Polycarp wants to solve. It' s guaranteed that the distribution always exists within the given constraints.",
    "output": "For each testcase print a single integer \u2014 the maximum value of a_ n .",
    "note": "In the first testcase there is only one distribution: [ 15] . In the second testcase the distribution that maximizes a_ n is: [ 2, 3, 4] . In the third testcase the distribution that maximizes a_ n is: [ 2, 4] . [ 3, 3] is a valid distribution but a_ n= 3 which is smaller than 4 . [ 1, 5] is not a valid distribution because 5 > 2 \u00b7 1 .",
    "topics": [
      "*special",
      "binary search",
      "greedy"
    ],
    "id": "1488D"
  },
  {
    "title": "RBS Deletion",
    "url": "https://codeforces.com/problemset/problem/1488/B",
    "history": "A bracket sequence is a string containing only characters \" ( \" and \" ) \" . A regular bracket sequence ( or, shortly, an RBS) is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \" 1\" and \" + \" between the original characters of the sequence. For example: bracket sequences \" ( ) ( ) \" and \" ( ( ) ) \" are regular ( the resulting expressions are: \" ( 1) + ( 1) \" and \" ( ( 1+ 1) + 1) \" ) ; bracket sequences \" ) ( \" , \" ( \" and \" ) \" are not. You are given a string s , which is an RBS. You can apply any number of operations to this string. Each operation can have one of the following types: choose some non- empty prefix of s and remove it from s , so s is still an RBS. For example, we can apply this operation as follows: \" ( ( ) ) ( ) ( ( ) ) ( ) ( ) \" \u2192 \" ( ) ( ) \" ( the first 10 characters are removed) ; choose some contiguous non- empty substring of s and remove it from s , so s is still an RBS. For example, we can apply this operation as follows: \" ( ( ) ) ( ) ( ( ) ) ( ) ( ) \" \u2192 \" ( ( ) ) ( ) ( ) ( ) \" ( the characters from the 7 - th to the 10 - th are removed) . The operation 2 can be applied at most k times. Calculate the maximum number of operations you can apply until s becomes empty.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Each test case is described by two lines. The first line contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ; n is even) \u2014 the length of s and the maximum number of operations of type 2 you can apply. The second line contains a string s of n characters ' ( ' and ' ) ' . This string is an RBS. The sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the maximum number of operations you can apply.",
    "note": "",
    "topics": [
      "*special",
      "greedy"
    ],
    "id": "1488B"
  },
  {
    "title": "Ones",
    "url": "https://codeforces.com/problemset/problem/1487/F",
    "history": "You are given a positive ( greater than zero) integer n . You have to represent n as the sum of integers ( possibly negative) consisting only of ones ( digits ' 1' ) . For example, 24 = 11 + 11 + 1 + 1 and 102 = 111 - 11 + 1 + 1 . Among all possible representations, you have to find the one that uses the minimum number of ones in total.",
    "input": "The single line contains one integer n ( 1 \u2264 n < 10^ 50 ) .",
    "output": "Print one integer x \u2014 the minimum number of ones, such that there exist a representation of n as the sum of integers ( possibly negative) that uses x ones in total.",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "shortest paths"
    ],
    "id": "1487F"
  },
  {
    "title": "Cheap Dinner",
    "url": "https://codeforces.com/problemset/problem/1487/E",
    "history": "Ivan wants to have a good dinner. A good dinner should consist of a first course, a second course, a drink, and a dessert. There are n_ 1 different types of first courses Ivan can buy ( the i - th of them costs a_ i coins) , n_ 2 different types of second courses ( the i - th of them costs b_ i coins) , n_ 3 different types of drinks ( the i - th of them costs c_ i coins) and n_ 4 different types of desserts ( the i - th of them costs d_ i coins) . Some dishes don' t go well with each other. There are m_ 1 pairs of first courses and second courses that don' t go well with each other, m_ 2 pairs of second courses and drinks, and m_ 3 pairs of drinks and desserts that don' t go well with each other. Ivan wants to buy exactly one first course, one second course, one drink, and one dessert so that they go well with each other, and the total cost of the dinner is the minimum possible. Help him to find the cheapest dinner option!",
    "input": "The first line contains four integers n_ 1 , n_ 2 , n_ 3 and n_ 4 ( 1 \u2264 n_ i \u2264 150000 ) \u2014 the number of types of first courses, second courses, drinks and desserts, respectively. Then four lines follow. The first line contains n_ 1 integers a_ 1, a_ 2, . . . , a_ n_ 1 ( 1 \u2264 a_ i \u2264 10^ 8 ) , where a_ i is the cost of the i - th type of first course. Three next lines denote the costs of second courses, drinks, and desserts in the same way ( 1 \u2264 b_ i, c_ i, d_ i \u2264 10^ 8 ) . The next line contains one integer m_ 1 ( 0 \u2264 m_ 1 \u2264 200000 ) \u2014 the number of pairs of first and second courses that don' t go well with each other. Each of the next m_ 1 lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i \u2264 n_ 1 ; 1 \u2264 y_ i \u2264 n_ 2 ) denoting that the first course number x_ i doesn' t go well with the second course number y_ i . All these pairs are different. The block of pairs of second dishes and drinks that don' t go well with each other is given in the same format. The same for pairs of drinks and desserts that don' t go well with each other ( 0 \u2264 m_ 2, m_ 3 \u2264 200000 ) .",
    "output": "If it' s impossible to choose a first course, a second course, a drink, and a dessert so that they go well with each other, print - 1 . Otherwise, print one integer \u2014 the minimum total cost of the dinner.",
    "note": "The best option in the first example is to take the first course 2 , the second course 1 , the drink 2 and the dessert 1 . In the second example, the only pair of the first course and the second course is bad, so it' s impossible to have dinner.",
    "topics": [
      "brute force",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1487E"
  },
  {
    "title": "Minimum Ties",
    "url": "https://codeforces.com/problemset/problem/1487/C",
    "history": "A big football championship will occur soon! n teams will compete in it, and each pair of teams will play exactly one game against each other. There are two possible outcomes of a game: the game may result in a tie, then both teams get 1 point; one team might win in a game, then the winning team gets 3 points and the losing team gets 0 points. The score of a team is the number of points it gained during all games that it played. You are interested in a hypothetical situation when all teams get the same score at the end of the championship. A simple example of that situation is when all games result in ties, but you want to minimize the number of ties as well. Your task is to describe a situation ( choose the result of each game) so that all teams get the same score, and the number of ties is the minimum possible.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then the test cases follow. Each test case is described by one line containing one integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of teams.",
    "output": "For each test case, print n( n - 1) / 2 integers describing the results of the games in the following order: the first integer should correspond to the match between team 1 and team 2 , the second \u2014 between team 1 and team 3 , then 1 and 4 , . . . , 1 and n , 2 and 3 , 2 and 4 , . . . , 2 and n , and so on, until the game between the team n - 1 and the team n . The integer corresponding to the game between the team x and the team y should be 1 if x wins, - 1 if y wins, or 0 if the game results in a tie. All teams should get the same score, and the number of ties should be the minimum possible. If there are multiple optimal answers, print any of them. It can be shown that there always exists a way to make all teams have the same score.",
    "note": "In the first test case of the example, both teams get 1 point since the game between them is a tie. In the second test case of the example, team 1 defeats team 2 ( team 1 gets 3 points) , team 1 loses to team 3 ( team 3 gets 3 points) , and team 2 wins against team 3 ( team 2 gets 3 points) .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1487C"
  },
  {
    "title": "Shifting Stacks",
    "url": "https://codeforces.com/problemset/problem/1486/A",
    "history": "You have n stacks of blocks. The i - th stack contains h_ i blocks and it' s height is the number of blocks in it. In one move you can take a block from the i - th stack ( if there is at least one block) and put it to the i + 1 - th stack. Can you make the sequence of heights strictly increasing? Note that the number of stacks always remains n : stacks don' t disappear when they have 0 blocks.",
    "input": "First line contains a single integer t ( 1 \u2264 t \u2264 10^ 4) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100) . The second line of each test case contains n integers h_ i ( 0 \u2264 h_ i \u2264 10^ 9) \u2014 starting heights of the stacks. It' s guaranteed that the sum of all n does not exceed 10^ 4 .",
    "output": "For each test case output YES if you can make the sequence of heights strictly increasing and NO otherwise. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case there is no need to make any moves, the sequence of heights is already increasing. In the second test case we need to move one block from the first stack to the second. Then the heights become 0 1 . In the third test case we could move one block from the first stack to the second and then from the second to the third, which would make the heights 3 4 5 . In the fourth test case we can' t make a move, but the sequence is not increasing, so the answer is NO. In the fifth test case we can only make one move ( from the second to the third stack) , which would make the heights 0 0 1 . Both 0 1 0 and 0 0 1 are not increasing sequences, so the answer is NO.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1486A"
  },
  {
    "title": "Move and Swap",
    "url": "https://codeforces.com/problemset/problem/1485/E",
    "history": "You are given n - 1 integers a_ 2, . . . , a_ n and a tree with n vertices rooted at vertex 1 . The leaves are all at the same distance d from the root. Recall that a tree is a connected undirected graph without cycles. The distance between two vertices is the number of edges on the simple path between them. All non- root vertices with degree 1 are leaves. If vertices s and f are connected by an edge and the distance of f from the root is greater than the distance of s from the root, then f is called a child of s . Initially, there are a red coin and a blue coin on the vertex 1 . Let r be the vertex where the red coin is and let b be the vertex where the blue coin is. You should make d moves. A move consists of three steps: Move the red coin to any child of r . Move the blue coin to any vertex b' such that dist( 1, b' ) = dist( 1, b) + 1 . Here dist( x, y) indicates the length of the simple path between x and y . Note that b and b' are not necessarily connected by an edge. You can optionally swap the two coins ( or skip this step) . Note that r and b can be equal at any time, and there is no number written on the root. After each move, you gain | a_ r - a_ b| points. What' s the maximum number of points you can gain after d moves?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The second line of each test case contains n- 1 integers v_ 2, v_ 3, . . . , v_ n ( 1 \u2264 v_ i \u2264 n , v_ i = \u0338 i ) \u2014 the i - th of them indicates that there is an edge between vertices i and v_ i . It is guaranteed, that these edges form a tree. The third line of each test case contains n- 1 integers a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the numbers written on the vertices. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer: the maximum number of points you can gain after d moves.",
    "note": "In the first test case, an optimal solution is to: move 1 : r = 4 , b = 2 ; no swap; move 2 : r = 7 , b = 6 ; swap ( after it r = 6 , b = 7 ) ; move 3 : r = 11 , b = 9 ; no swap. The total number of points is | 7 - 2| + | 6 - 9| + | 3 - 9| = 14 . In the second test case, an optimal solution is to: move 1 : r = 2 , b = 2 ; no swap; move 2 : r = 3 , b = 4 ; no swap; move 3 : r = 5 , b = 6 ; no swap. The total number of points is | 32 - 32| + | 78 - 69| + | 5 - 41| = 45 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1485E"
  },
  {
    "title": "Add and Divide",
    "url": "https://codeforces.com/problemset/problem/1485/A",
    "history": "You have two positive integers a and b . You can perform two kinds of operations: a = \u230aa/ b\u230b ( replace a with the integer part of the division between a and b ) b= b+ 1 ( increase b by 1 ) Find the minimum number of operations required to make a= 0 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The only line of the description of each test case contains two integers a , b ( 1 \u2264 a, b \u2264 10^ 9 ) .",
    "output": "For each test case, print a single integer: the minimum number of operations required to make a= 0 .",
    "note": "In the first test case, one of the optimal solutions is: Divide a by b . After this operation a = 4 and b = 2 . Divide a by b . After this operation a = 2 and b = 2 . Increase b . After this operation a = 2 and b = 3 . Divide a by b . After this operation a = 0 and b = 3 .",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1485A"
  },
  {
    "title": "Basic Diplomacy",
    "url": "https://codeforces.com/problemset/problem/1482/C",
    "history": "Aleksey has n friends. He is also on a vacation right now, so he has m days to play this new viral cooperative game! But since it' s cooperative, Aleksey will need one teammate in each of these m days. On each of these days some friends will be available for playing, and all others will not. On each day Aleksey must choose one of his available friends to offer him playing the game ( and they, of course, always agree) . However, if any of them happens to be chosen strictly more than \u2308m2\u2309 times, then all other friends are offended. Of course, Aleksey doesn' t want to offend anyone. Help him to choose teammates so that nobody is chosen strictly more than \u2308m2\u2309 times.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 000 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1\u2264 n, m\u2264 100 000 ) standing for the number of friends and the number of days to play, respectively. The i - th of the following m lines contains an integer k_ i ( 1\u2264 k_ i\u2264 n ) , followed by k_ i distinct integers f_ i1 , . . . , f_ ik_ i ( 1\u2264 f_ ij\u2264 n ) , separated by spaces \u2014 indices of available friends on the day i . It is guaranteed that the sums of n and m over all test cases do not exceed 100 000 . It' s guaranteed that the sum of all k_ i over all days of all test cases doesn' t exceed 200 000 .",
    "output": "Print an answer for each test case. If there is no way to achieve the goal, print \" NO\" . Otherwise, in the first line print \" YES\" , and in the second line print m space separated integers c_ 1 , . . . , c_ m . Each c_ i must denote the chosen friend on day i ( and therefore must be one of f_ ij ) . No value must occur more than \u2308m2\u2309 times. If there is more than one possible answer, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1482C"
  },
  {
    "title": "AB Tree",
    "url": "https://codeforces.com/problemset/problem/1481/F",
    "history": "Kilani and Abd are neighbors for 3000 years, but then the day came and Kilani decided to move to another house. As a farewell gift, Kilani is going to challenge Abd with a problem written by their other neighbor with the same name Abd. The problem is: You are given a connected tree rooted at node 1 . You should assign a character a or b to every node in the tree so that the total number of a' s is equal to x and the total number of b' s is equal to n - x . Let' s define a string for each node v of the tree as follows: if v is root then the string is just one character assigned to v : otherwise, let' s take a string defined for the v ' s parent p_ v and add to the end of it a character assigned to v . You should assign every node a character in a way that minimizes the number of distinct strings among the strings of all nodes.",
    "input": "The first line contains two integers n and x ( 1 \u2264 n \u2264 10^ 5 ; 0 \u2264 x \u2264 n ) \u2014 the number of vertices in the tree the number of a' s. The second line contains n - 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ; p_ i = \u0338 i ) , where p_ i is the parent of node i . It is guaranteed that the input describes a connected tree.",
    "output": "In the first line, print the minimum possible total number of distinct strings. In the second line, print n characters, where all characters are either a or b and the i - th character is the character assigned to the i - th node. Make sure that the total number of a' s is equal to x and the total number of b' s is equal to n - x . If there is more than one answer you can print any of them.",
    "note": "The tree from the sample is shown below: The tree after assigning characters to every node ( according to the output) is the following: Strings for all nodes are the following: string of node 1 is: a string of node 2 is: aa string of node 3 is: aab string of node 4 is: aab string of node 5 is: aabb string of node 6 is: aabb string of node 7 is: aabb string of node 8 is: aabb string of node 9 is: aa The set of unique strings is { a, aa, aab, aabb} , so the number of distinct strings is 4 .",
    "topics": [
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1481F"
  },
  {
    "title": "Sorting Books",
    "url": "https://codeforces.com/problemset/problem/1481/E",
    "history": "One day you wanted to read something, so you went to your bookshelf to grab some book. But when you saw how messy the bookshelf was you decided to clean it up first. There are n books standing in a row on the shelf, the i - th book has color a_ i . You' d like to rearrange the books to make the shelf look beautiful. The shelf is considered beautiful if all books of the same color are next to each other. In one operation you can take one book from any position on the shelf and move it to the right end of the shelf. What is the minimum number of operations you need to make the shelf beautiful?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of books. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the book colors.",
    "output": "Output the minimum number of operations to make the shelf beautiful.",
    "note": "In the first example, we have the bookshelf [ 1, 2, 2, 1, 3] and can, for example: take a book on position 4 and move to the right end: we' ll get [ 1, 2, 2, 3, 1] ; take a book on position 1 and move to the right end: we' ll get [ 2, 2, 3, 1, 1] . In the second example, we can move the first book to the end of the bookshelf and get [ 2, 2, 1, 1, 1] .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1481E"
  },
  {
    "title": "AB Graph",
    "url": "https://codeforces.com/problemset/problem/1481/D",
    "history": "Your friend Salem is Warawreh' s brother and only loves math and geometry problems. He has solved plenty of such problems, but according to Warawreh, in order to graduate from university he has to solve more graph problems. Since Salem is not good with graphs he asked your help with the following problem. You are given a complete directed graph with n vertices without self- loops. In other words, you have n vertices and each pair of vertices u and v ( u = \u0338 v ) has both directed edges ( u, v) and ( v, u) . Every directed edge of the graph is labeled with a single character: either ' a' or ' b' ( edges ( u, v) and ( v, u) may have different labels) . You are also given an integer m > 0 . You should find a path of length m such that the string obtained by writing out edges' labels when going along the path is a palindrome. The length of the path is the number of edges in it. You can visit the same vertex and the same directed edge any number of times.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 1000 ; 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of vertices in the graph and desirable length of the palindrome. Each of the next n lines contains n characters. The j - th character of the i - th line describes the character on the edge that is going from node i to node j . Every character is either ' a' or ' b' if i = \u0338 j , or ' * ' if i = j , since the graph doesn' t contain self- loops. It' s guaranteed that the sum of n over test cases doesn' t exceed 1000 and the sum of m doesn' t exceed 10^ 5 .",
    "output": "For each test case, if it is possible to find such path, print \" YES\" and the path itself as a sequence of m + 1 integers: indices of vertices in the path in the appropriate order. If there are several valid paths, print any of them. Otherwise, ( if there is no answer) print \" NO\" .",
    "note": "The graph from the first three test cases is shown below: In the first test case, the answer sequence is [ 1, 2] which means that the path is: 1 2 So the string that is obtained by the given path is b. In the second test case, the answer sequence is [ 2, 1, 3, 2] which means that the path is: 2 1 3 2 So the string that is obtained by the given path is bab. In the third test case, the answer sequence is [ 1, 3, 1, 3, 1] which means that the path is: 1 3 1 3 1 So the string that is obtained by the given path is aaaa. The string obtained in the fourth test case is abaaba.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1481D"
  },
  {
    "title": "Fence Painting",
    "url": "https://codeforces.com/problemset/problem/1481/C",
    "history": "You finally woke up after this crazy dream and decided to walk around to clear your head. Outside you saw your house' s fence \u2014 so plain and boring, that you' d like to repaint it. You have a fence consisting of n planks, where the i - th plank has the color a_ i . You want to repaint the fence in such a way that the i - th plank has the color b_ i . You' ve invited m painters for this purpose. The j - th painter will arrive at the moment j and will recolor exactly one plank to color c_ j . For each painter you can choose which plank to recolor, but you can' t turn them down, i. e. each painter has to color exactly one plank. Can you get the coloring b you want? If it' s possible, print for each painter which plank he must paint.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of planks in the fence and the number of painters. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the initial colors of the fence. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n ) \u2014 the desired colors of the fence. The fourth line of each test case contains m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ j \u2264 n ) \u2014 the colors painters have. It' s guaranteed that the sum of n doesn' t exceed 10^ 5 and the sum of m doesn' t exceed 10^ 5 over all test cases.",
    "output": "For each test case, output \" NO\" if it is impossible to achieve the coloring b . Otherwise, print \" YES\" and m integers x_ 1, x_ 2, . . . , x_ m , where x_ j is the index of plank the j - th painter should paint. You may print every letter in any case you want ( so, for example, the strings \" yEs\" , \" yes\" , \" Yes\" and \" YES\" are all recognized as positive answer) .",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1481C"
  },
  {
    "title": "New Colony",
    "url": "https://codeforces.com/problemset/problem/1481/B",
    "history": "After reaching your destination, you want to build a new colony on the new planet. Since this planet has many mountains and the colony must be built on a flat surface you decided to flatten the mountains using boulders ( you are still dreaming so this makes sense to you) . You are given an array h_ 1, h_ 2, . . . , h_ n , where h_ i is the height of the i - th mountain, and k \u2014 the number of boulders you have. You will start throwing boulders from the top of the first mountain one by one and they will roll as follows ( let' s assume that the height of the current mountain is h_ i ) : if h_ i \u2265 h_ i + 1 , the boulder will roll to the next mountain; if h_ i < h_ i + 1 , the boulder will stop rolling and increase the mountain height by 1 ( h_ i = h_ i + 1 ) ; if the boulder reaches the last mountain it will fall to the waste collection system and disappear. You want to find the position of the k - th boulder or determine that it will fall into the waste collection system.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Each test case consists of two lines. The first line in each test case contains two integers n and k ( 1 \u2264 n \u2264 100 ; 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of mountains and the number of boulders. The second line contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 100 ) \u2014 the height of the mountains. It is guaranteed that the sum of n over all test cases does not exceed 100 .",
    "output": "For each test case, print - 1 if the k - th boulder will fall into the collection system. Otherwise, print the position of the k - th boulder.",
    "note": "Let' s simulate the first case: The first boulder starts at i = 1 ; since h_ 1 \u2265 h_ 2 it rolls to i = 2 and stops there because h_ 2 < h_ 3 . The new heights are [ 4, 2, 2, 3] . The second boulder starts at i = 1 ; since h_ 1 \u2265 h_ 2 the boulder rolls to i = 2 ; since h_ 2 \u2265 h_ 3 the boulder rolls to i = 3 and stops there because h_ 3 < h_ 4 . The new heights are [ 4, 2, 3, 3] . The third boulder starts at i = 1 ; since h_ 1 \u2265 h_ 2 it rolls to i = 2 and stops there because h_ 2 < h_ 3 . The new heights are [ 4, 3, 3, 3] . The positions where each boulder stopped are the following: [ 2, 3, 2] . In the second case, all 7 boulders will stop right at the first mountain rising its height from 1 to 8 . The third case is similar to the first one but now you' ll throw 5 boulders. The first three will roll in the same way as in the first test case. After that, mountain heights will be equal to [ 4, 3, 3, 3] , that' s why the other two boulders will fall into the collection system. In the fourth case, the first and only boulders will fall straight into the collection system.",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1481B"
  },
  {
    "title": "Space Navigation ",
    "url": "https://codeforces.com/problemset/problem/1481/A",
    "history": "You were dreaming that you are traveling to a planet named Planetforces on your personal spaceship. Unfortunately, its piloting system was corrupted and now you need to fix it in order to reach Planetforces. Space can be represented as the XY plane. You are starting at point ( 0, 0) , and Planetforces is located in point ( p_ x, p_ y) . The piloting system of your spaceship follows its list of orders which can be represented as a string s . The system reads s from left to right. Suppose you are at point ( x, y) and current order is s_ i : if s_ i = U , you move to ( x, y + 1) ; if s_ i = D , you move to ( x, y - 1) ; if s_ i = R , you move to ( x + 1, y) ; if s_ i = L , you move to ( x - 1, y) . Since string s could be corrupted, there is a possibility that you won' t reach Planetforces in the end. Fortunately, you can delete some orders from s but you can' t change their positions. Can you delete several orders ( possibly, zero) from s in such a way, that you' ll reach Planetforces after the system processes all orders?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line in each test case contains two integers p_ x and p_ y ( - 10^ 5 \u2264 p_ x, p_ y \u2264 10^ 5 ; ( p_ x, p_ y) = \u0338 ( 0, 0) ) \u2014 the coordinates of Planetforces ( p_ x, p_ y) . The second line contains the string s ( 1 \u2264 | s| \u2264 10^ 5 : | s| is the length of string s ) \u2014 the list of orders. It is guaranteed that the sum of | s| over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, print \" YES\" if you can delete several orders ( possibly, zero) from s in such a way, that you' ll reach Planetforces. Otherwise, print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first case, you don' t need to modify s , since the given s will bring you to Planetforces. In the second case, you can delete orders s_ 2 , s_ 3 , s_ 4 , s_ 6 , s_ 7 and s_ 8 , so s becomes equal to \" UR\" . In the third test case, you have to delete order s_ 9 , otherwise, you won' t finish in the position of Planetforces.",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1481A"
  },
  {
    "title": "The Great Hero",
    "url": "https://codeforces.com/problemset/problem/1480/B",
    "history": "The great hero guards the country where Homer lives. The hero has attack power A and initial health value B . There are n monsters in front of the hero. The i - th monster has attack power a_ i and initial health value b_ i . The hero or a monster is said to be living, if his or its health value is positive ( greater than or equal to 1 ) ; and he or it is said to be dead, if his or its health value is non- positive ( less than or equal to 0 ) . In order to protect people in the country, the hero will fight with monsters until either the hero is dead or all the monsters are dead. In each fight, the hero can select an arbitrary living monster and fight with it. Suppose the i - th monster is selected, and the health values of the hero and the i - th monster are x and y before the fight, respectively. After the fight, the health values of the hero and the i - th monster become x- a_ i and y- A , respectively. Note that the hero can fight the same monster more than once. For the safety of the people in the country, please tell them whether the great hero can kill all the monsters ( even if the great hero himself is dead after killing the last monster) .",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains three integers A ( 1 \u2264 A \u2264 10^ 6 ) , B ( 1 \u2264 B \u2264 10^ 6 ) and n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the attack power of the great hero, the initial health value of the great hero, and the number of monsters. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) , where a_ i denotes the attack power of the i - th monster. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 6 ) , where b_ i denotes the initial health value of the i - th monster. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print the answer: \" YES\" ( without quotes) if the great hero can kill all the monsters. Otherwise, print \" NO\" ( without quotes) .",
    "note": "In the first example: There will be 6 fights between the hero and the only monster. After that, the monster is dead and the health value of the hero becomes 17 - 6 \u00d7 2 = 5 > 0 . So the answer is \" YES\" , and moreover, the hero is still living. In the second example: After all monsters are dead, the health value of the hero will become 709 , regardless of the order of all fights. So the answer is \" YES\" . In the third example: A possible order is to fight with the 1 - st, 2 - nd, 3 - rd and 4 - th monsters. After all fights, the health value of the hero becomes - 400 . Unfortunately, the hero is dead, but all monsters are also dead. So the answer is \" YES\" . In the fourth example: The hero becomes dead but the monster is still living with health value 1000 - 999 = 1 . So the answer is \" NO\" .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1480B"
  },
  {
    "title": "Yet Another String Game",
    "url": "https://codeforces.com/problemset/problem/1480/A",
    "history": "Homer has two friends Alice and Bob. Both of them are string fans. One day, Alice and Bob decide to play a game on a string s = s_ 1 s_ 2 . . . s_ n of length n consisting of lowercase English letters. They move in turns alternatively and Alice makes the first move. In a move, a player must choose an index i ( 1 \u2264 i \u2264 n ) that has not been chosen before, and change s_ i to any other lowercase English letter c that c = \u0338 s_ i . When all indices have been chosen, the game ends. The goal of Alice is to make the final string lexicographically as small as possible, while the goal of Bob is to make the final string lexicographically as large as possible. Both of them are game experts, so they always play games optimally. Homer is not a game expert, so he wonders what the final string will be. A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Description of the test cases follows. The only line of each test case contains a single string s ( 1 \u2264 | s| \u2264 50 ) consisting of lowercase English letters.",
    "output": "For each test case, print the final string in a single line.",
    "note": "In the first test case: Alice makes the first move and must change the only letter to a different one, so she changes it to ' b' . In the second test case: Alice changes the first letter to ' a' , then Bob changes the second letter to ' z' , Alice changes the third letter to ' a' and then Bob changes the fourth letter to ' z' . In the third test case: Alice changes the first letter to ' b' , and then Bob changes the second letter to ' y' .",
    "topics": [
      "games",
      "greedy",
      "strings"
    ],
    "id": "1480A"
  },
  {
    "title": "Painting the Array II",
    "url": "https://codeforces.com/problemset/problem/1479/B2",
    "history": "The only difference between the two versions is that this version asks the minimal possible answer. Homer likes arrays a lot. Today he is painting an array a_ 1, a_ 2, . . . , a_ n with two kinds of colors, white and black. A painting assignment for a_ 1, a_ 2, . . . , a_ n is described by an array b_ 1, b_ 2, . . . , b_ n that b_ i indicates the color of a_ i ( 0 for white and 1 for black) . According to a painting assignment b_ 1, b_ 2, . . . , b_ n , the array a is split into two new arrays a^ ( 0) and a^ ( 1) , where a^ ( 0) is the sub- sequence of all white elements in a and a^ ( 1) is the sub- sequence of all black elements in a . For example, if a = [ 1, 2, 3, 4, 5, 6] and b = [ 0, 1, 0, 1, 0, 0] , then a^ ( 0) = [ 1, 3, 5, 6] and a^ ( 1) = [ 2, 4] . The number of segments in an array c_ 1, c_ 2, . . . , c_ k , denoted seg( c) , is the number of elements if we merge all adjacent elements with the same value in c . For example, the number of segments in [ 1, 1, 2, 2, 3, 3, 3, 2] is 4 , because the array will become [ 1, 2, 3, 2] after merging adjacent elements with the same value. Especially, the number of segments in an empty array is 0 . Homer wants to find a painting assignment b , according to which the number of segments in both a^ ( 0) and a^ ( 1) , i. e. seg( a^ ( 0) ) + seg( a^ ( 1) ) , is as small as possible. Find this number.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "Output a single integer, indicating the minimal possible total number of segments.",
    "note": "In the first example, we can choose a^ ( 0) = [ 1, 1, 2, 2] , a^ ( 1) = [ 2, 3] and seg( a^ ( 0) ) = seg( a^ ( 1) ) = 2 . So the answer is 2+ 2 = 4 . In the second example, we can choose a^ ( 0) = [ 1, 1, 1, 1] , a^ ( 1) = [ 2, 2, 2] and seg( a^ ( 0) ) = seg( a^ ( 1) ) = 1 . So the answer is 1+ 1 = 2 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1479B2"
  },
  {
    "title": "Painting the Array I",
    "url": "https://codeforces.com/problemset/problem/1479/B1",
    "history": "The only difference between the two versions is that this version asks the maximal possible answer. Homer likes arrays a lot. Today he is painting an array a_ 1, a_ 2, . . . , a_ n with two kinds of colors, white and black. A painting assignment for a_ 1, a_ 2, . . . , a_ n is described by an array b_ 1, b_ 2, . . . , b_ n that b_ i indicates the color of a_ i ( 0 for white and 1 for black) . According to a painting assignment b_ 1, b_ 2, . . . , b_ n , the array a is split into two new arrays a^ ( 0) and a^ ( 1) , where a^ ( 0) is the sub- sequence of all white elements in a and a^ ( 1) is the sub- sequence of all black elements in a . For example, if a = [ 1, 2, 3, 4, 5, 6] and b = [ 0, 1, 0, 1, 0, 0] , then a^ ( 0) = [ 1, 3, 5, 6] and a^ ( 1) = [ 2, 4] . The number of segments in an array c_ 1, c_ 2, . . . , c_ k , denoted seg( c) , is the number of elements if we merge all adjacent elements with the same value in c . For example, the number of segments in [ 1, 1, 2, 2, 3, 3, 3, 2] is 4 , because the array will become [ 1, 2, 3, 2] after merging adjacent elements with the same value. Especially, the number of segments in an empty array is 0 . Homer wants to find a painting assignment b , according to which the number of segments in both a^ ( 0) and a^ ( 1) , i. e. seg( a^ ( 0) ) + seg( a^ ( 1) ) , is as large as possible. Find this number.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) .",
    "output": "Output a single integer, indicating the maximal possible total number of segments.",
    "note": "In the first example, we can choose a^ ( 0) = [ 1, 2, 3, 3] , a^ ( 1) = [ 1, 2, 3] and seg( a^ ( 0) ) = seg( a^ ( 1) ) = 3 . So the answer is 3+ 3 = 6 . In the second example, we can choose a^ ( 0) = [ 1, 2, 3, 4, 5, 6, 7] and a^ ( 1) is empty. We can see that seg( a^ ( 0) ) = 7 and seg( a^ ( 1) ) = 0 . So the answer is 7+ 0 = 7 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1479B1"
  },
  {
    "title": "Nezzar and Lucky Number",
    "url": "https://codeforces.com/problemset/problem/1478/B",
    "history": "Nezzar' s favorite digit among 1, . . . , 9 is d . He calls a positive integer lucky if d occurs at least once in its decimal representation. Given q integers a_ 1, a_ 2, . . . , a_ q , for each 1 \u2264 i \u2264 q Nezzar would like to know if a_ i can be equal to a sum of several ( one or more) lucky numbers.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 9 ) \u2014 the number of test cases. The first line of each test case contains two integers q and d ( 1 \u2264 q \u2264 10^ 4 , 1 \u2264 d \u2264 9 ) . The second line of each test case contains q integers a_ 1, a_ 2, . . . , a_ q ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "For each integer in each test case, print \" YES\" in a single line if a_ i can be equal to a sum of lucky numbers. Otherwise, print \" NO\" . You can print letters in any case ( upper or lower) .",
    "note": "In the first test case, 24 = 17 + 7 , 27 itself is a lucky number, 25 cannot be equal to a sum of lucky numbers.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1478B"
  },
  {
    "title": "Nezzar and Colorful Balls",
    "url": "https://codeforces.com/problemset/problem/1478/A",
    "history": "Nezzar has n balls, numbered with integers 1, 2, . . . , n . Numbers a_ 1, a_ 2, . . . , a_ n are written on them, respectively. Numbers on those balls form a non- decreasing sequence, which means that a_ i \u2264 a_ i+ 1 for all 1 \u2264 i < n . Nezzar wants to color the balls using the minimum number of colors, such that the following holds. For any color, numbers on balls will form a strictly increasing sequence if he keeps balls with this chosen color and discards all other balls. Note that a sequence with the length at most 1 is considered as a strictly increasing sequence. Please help Nezzar determine the minimum number of colors.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of testcases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guaranteed that a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n .",
    "output": "For each test case, output the minimum number of colors Nezzar can use.",
    "note": "Let' s match each color with some numbers. Then: In the first test case, one optimal color assignment is [ 1, 2, 3, 3, 2, 1] . In the second test case, one optimal color assignment is [ 1, 2, 1, 2, 1] .",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1478A"
  },
  {
    "title": "Nezzar and Tournaments",
    "url": "https://codeforces.com/problemset/problem/1477/E",
    "history": "In the famous Oh- Suit- United tournament, two teams are playing against each other for the grand prize of precious pepper points. The first team consists of n players, and the second team consists of m players. Each player has a potential: the potential of the i - th player in the first team is a_ i , and the potential of the i - th player in the second team is b_ i . In the tournament, all players will be on the stage in some order. There will be a scoring device, initially assigned to an integer k , which will be used to value the performance of all players. The scores for all players will be assigned in the order they appear on the stage. Let the potential of the current player be x , and the potential of the previous player be y ( y equals x for the first player) . Then, x- y is added to the value in the scoring device, Afterwards, if the value in the scoring device becomes negative, the value will be reset to 0 . Lastly, the player' s score is assigned to the current value on the scoring device. The score of a team is the sum of the scores of all its members. As an insane fan of the first team, Nezzar desperately wants the biggest win for the first team. He now wonders what is the maximum difference between scores of the first team and the second team. Formally, let the score of the first team be score_ f and the score of the second team be score_ s . Nezzar wants to find the maximum value of score_ f - score_ s over all possible orders of players on the stage. However, situation often changes and there are q events that will happen. There are three types of events: 1 pos x \u2014 change a_ pos to x ; 2 pos x \u2014 change b_ pos to x ; 3 x \u2014 tournament is held with k = x and Nezzar wants you to compute the maximum value of score_ f - score_ s . Can you help Nezzar to answer the queries of the third type?",
    "input": "The first line contains three integers n , m , and q ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5, 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 0 \u2264 b_ i \u2264 10^ 6 ) . The following q lines contain descriptions of events, described in the statement, each in one of the three possible formats: 1 pos x ( 1 \u2264 pos \u2264 n , 0 \u2264 x \u2264 10^ 6 ) ; 2 pos x ( 1 \u2264 pos \u2264 m , 0 \u2264 x \u2264 10^ 6 ) ; 3 x ( 0 \u2264 x \u2264 10^ 6 ) .",
    "output": "For each query of the third type print the answer to this query.",
    "note": "In the first query of the first test, the tournament is held with k = 5 . It would be optimal to arrange players in such way ( here their potentials are written) : 7 , 3 , 5 , 4 , 6 , 1 , 2 ( underlined numbers are potentials of players that are from the first team) . The individual scores of players, numbered in the order of their appearance, are: max( 5 + ( 7 - 7) , 0) = 5 for the 1 - st player; max( 5 + ( 3 - 7) , 0) = 1 for the 2 - nd player; max( 1 + ( 5 - 3) , 0) = 3 for the 3 - rd player; max( 3 + ( 4 - 5) , 0) = 2 for the 4 - th player; max( 2 + ( 6 - 4) , 0) = 4 for the 5 - th player; max( 4 + ( 1 - 6) , 0) = 0 for the 6 - th player; max( 0 + ( 2 - 1) , 0) = 1 for the 7 - th player. So, score_ f = 5 + 0 + 1 = 6 and score_ s = 1 + 3 + 2 + 4 = 10 . The score difference is 6 - 10 = - 4 . It can be proven, that it is the maximum possible score difference.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1477E"
  },
  {
    "title": "Nezzar and Nice Beatmap",
    "url": "https://codeforces.com/problemset/problem/1477/C",
    "history": "Nezzar loves the game osu! . osu! is played on beatmaps, which can be seen as an array consisting of distinct points on a plane. A beatmap is called nice if for any three consecutive points A, B, C listed in order, the angle between these three points, centered at B , is strictly less than 90 degrees. Points A, B, C on the left have angle less than 90 degrees, so they can be three consecutive points of a nice beatmap; Points A' , B' , C' on the right have angle greater or equal to 90 degrees, so they cannot be three consecutive points of a nice beatmap. Now Nezzar has a beatmap of n distinct points A_ 1, A_ 2, . . . , A_ n . Nezzar would like to reorder these n points so that the resulting beatmap is nice. Formally, you are required to find a permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , such that beatmap A_ p_ 1, A_ p_ 2, . . . , A_ p_ n is nice. If it is impossible, you should determine it.",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 5000 ) . Then n lines follow, i - th of them contains two integers x_ i , y_ i ( - 10^ 9 \u2264 x_ i, y_ i \u2264 10^ 9 ) \u2014 coordinates of point A_ i . It is guaranteed that all points are distinct.",
    "output": "If there is no solution, print - 1 . Otherwise, print n integers, representing a valid permutation p . If there are multiple possible answers, you can print any.",
    "note": "Here is the illustration for the first test: Please note that the angle between A_ 1 , A_ 2 and A_ 5 , centered at A_ 2 , is treated as 0 degrees. However, angle between A_ 1 , A_ 5 and A_ 2 , centered at A_ 5 , is treated as 180 degrees.",
    "topics": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1477C"
  },
  {
    "title": "Nezzar and Binary String",
    "url": "https://codeforces.com/problemset/problem/1477/B",
    "history": "Nezzar has a binary string s of length n that he wants to share with his best friend, Nanako. Nanako will spend q days inspecting the binary string. At the same time, Nezzar wants to change the string s into string f during these q days, because it looks better. It is known that Nanako loves consistency so much. On the i - th day, Nanako will inspect a segment of string s from position l_ i to position r_ i inclusive. If the segment contains both characters ' 0' and ' 1' , Nanako becomes unhappy and throws away the string. After this inspection, at the i - th night, Nezzar can secretly change strictly less than half of the characters in the segment from l_ i to r_ i inclusive, otherwise the change will be too obvious. Now Nezzar wonders, if it is possible to avoid Nanako being unhappy and at the same time have the string become equal to the string f at the end of these q days and nights.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains two integers n, q ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 q \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains a binary string s of length n . The third line of each test case contains a binary string f of length n . Then q lines follow, i - th of them contains two integers l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 bounds of the segment, that Nanako will inspect on the i - th day. It is guaranteed that the sum of n for all test cases doesn' t exceed 2 \u00b7 10^ 5 , and the sum of q for all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print \" YES\" on the single line if it is possible to avoid Nanako being unhappy and have the string f at the end of q days and nights. Otherwise, print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, 00000\u219200011 \u2192 00111 is one of the possible sequences of string changes. In the second test case, it can be shown that it is impossible to have the string f at the end.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1477B"
  },
  {
    "title": "Longest Simple Cycle",
    "url": "https://codeforces.com/problemset/problem/1476/C",
    "history": "You have n chains, the i - th chain consists of c_ i vertices. Vertices in each chain are numbered independently from 1 to c_ i along the chain. In other words, the i - th chain is the undirected graph with c_ i vertices and ( c_ i - 1) edges connecting the j - th and the ( j + 1) - th vertices for each 1 \u2264 j < c_ i . Now you decided to unite chains in one graph in the following way: the first chain is skipped; the 1 - st vertex of the i - th chain is connected by an edge with the a_ i - th vertex of the ( i - 1) - th chain; the last ( c_ i - th) vertex of the i - th chain is connected by an edge with the b_ i - th vertex of the ( i - 1) - th chain. Picture of the first test case. Dotted lines are the edges added during uniting process Calculate the length of the longest simple cycle in the resulting graph. A simple cycle is a chain where the first and last vertices are connected as well. If you travel along the simple cycle, each vertex of this cycle will be visited exactly once.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of chains you have. The second line of each test case contains n integers c_ 1, c_ 2, . . . , c_ n ( 2 \u2264 c_ i \u2264 10^ 9 ) \u2014 the number of vertices in the corresponding chains. The third line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( a_ 1 = - 1 ; 1 \u2264 a_ i \u2264 c_ i - 1 ) . The fourth line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( b_ 1 = - 1 ; 1 \u2264 b_ i \u2264 c_ i - 1 ) . Both a_ 1 and b_ 1 are equal to - 1 , they aren' t used in graph building and given just for index consistency. It' s guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print the length of the longest simple cycle.",
    "note": "In the first test case, the longest simple cycle is shown below: We can' t increase it with the first chain, since in such case it won' t be simple \u2014 the vertex 2 on the second chain will break simplicity.",
    "topics": [
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1476C"
  },
  {
    "title": "Inflation",
    "url": "https://codeforces.com/problemset/problem/1476/B",
    "history": "You have a statistic of price changes for one product represented as an array of n positive integers p_ 0, p_ 1, . . . , p_ n - 1 , where p_ 0 is the initial price of the product and p_ i is how the price was increased during the i - th month. Using these price changes you are asked to calculate the inflation coefficients for each month as the ratio of current price increase p_ i to the price at the start of this month ( p_ 0 + p_ 1 + . . . + p_ i - 1) . Your boss said you clearly that the inflation coefficients must not exceed k",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 2 \u2264 n \u2264 100 ; 1 \u2264 k \u2264 100 ) \u2014 the length of array p and coefficient k . The second line of each test case contains n integers p_ 0, p_ 1, . . . , p_ n - 1 ( 1 \u2264 p_ i \u2264 10^ 9 ) \u2014 the array p .",
    "output": "For each test case, print the minimum total sum of changes you need to make all inflation coefficients not more than k",
    "note": "In the first test case, you can, for example, increase p_ 0 by 50 and p_ 1 by 49 and get array [ 20150, 50, 202, 202] . Then you get the next inflation coefficients: 50/ 20150\u22641/ 100 ; 202/ 20150 + 50\u22641/ 100 ; 202/ 20200 + 202\u22641/ 100 ; In the second test case, you don' t need to modify array p , since the inflation coefficients are already good: 1/ 1\u2264100/ 100 ; 1/ 1 + 1\u2264100/ 100 ;",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1476B"
  },
  {
    "title": "K-divisible Sum",
    "url": "https://codeforces.com/problemset/problem/1476/A",
    "history": "You are given two integers n and k . You should create an array of n positive integers a_ 1, a_ 2, . . . , a_ n such that the sum ( a_ 1 + a_ 2 + . . . + a_ n) is divisible by k and maximum element in a is minimum possible. What is the minimum possible maximum element in a ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first and only line of each test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 9 ; 1 \u2264 k \u2264 10^ 9 ) .",
    "output": "For each test case, print one integer \u2014 the minimum possible maximum element in array a such that the sum ( a_ 1 + . . . + a_ n) is divisible by k .",
    "note": "In the first test case n = 1 , so the array consists of one element a_ 1 and if we make a_ 1 = 5 it will be divisible by k = 5 and the minimum possible. In the second test case, we can create array a = [ 1, 2, 1, 2] . The sum is divisible by k = 3 and the maximum is equal to 2 . In the third test case, we can create array a = [ 1, 1, 1, 1, 1, 1, 1, 1] . The sum is divisible by k = 8 and the maximum is equal to 1 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1476A"
  },
  {
    "title": "What Is It?",
    "url": "https://codeforces.com/problemset/problem/1474/E",
    "history": "Lunar rover finally reached planet X. After landing, he met an obstacle, that contains permutation p of length n . Scientists found out, that to overcome an obstacle, the robot should make p an identity permutation ( make p_ i = i for all i ) . Unfortunately, scientists can' t control the robot. Thus the only way to make p an identity permutation is applying the following operation to p multiple times: Select two indices i and j ( i = \u0338 j ) , such that p_ j = i and swap the values of p_ i and p_ j . It takes robot ( j - i) ^ 2 seconds to do this operation. Positions i and j are selected by the robot ( scientists can' t control it) . He will apply this operation while p isn' t an identity permutation. We can show that the robot will make no more than n operations regardless of the choice of i and j on each operation. Scientists asked you to find out the maximum possible time it will take the robot to finish making p an identity permutation ( i. e. worst- case scenario) , so they can decide whether they should construct a new lunar rover or just rest and wait. They won' t believe you without proof, so you should build an example of p and robot' s operations that maximizes the answer. For a better understanding of the statement, read the sample description.",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each of next t lines contains the single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2013 the length of p . Note, that p is not given to you. You should find the maximum possible time over all permutations of length n . It is guaranteed, that the total sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case in the first line, print how many seconds will the robot spend in the worst case. In the next line, print the initial value of p that you used to construct an answer. In the next line, print the number of operations m \u2264 n that the robot makes in your example. In the each of next m lines print two integers i and j \u2014 indices of positions that the robot will swap on this operation. Note that p_ j = i must holds ( at the time of operation) .",
    "note": "For n = 2 , p can be either [ 1, 2] or [ 2, 1] . In the first case p is already identity, otherwise robot will make it an identity permutation in 1 second regardless of choise i and j on the first operation. For n = 3 , p can be equals [ 2, 3, 1] . If robot will select i = 3, j = 2 on the first operation, p will become [ 2, 1, 3] in one second. Now robot can select only i = 1, j = 2 or i = 2, j = 1 . In both cases, p will become identity in one more second ( 2 seconds in total) . If robot will select i = 1, j = 3 on the first operation, p will become [ 1, 3, 2] in four seconds. Regardless of choise of i and j on the second operation, p will become identity in five seconds. We can show, that for permutation of length 3 robot will always finish all operation in no more than 5 seconds.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1474E"
  },
  {
    "title": "Cleaning",
    "url": "https://codeforces.com/problemset/problem/1474/D",
    "history": "During cleaning the coast, Alice found n piles of stones. The i - th pile has a_ i stones. Piles i and i + 1 are neighbouring for all 1 \u2264 i \u2264 n - 1 . If pile i becomes empty, piles i - 1 and i + 1 doesn' t become neighbouring. Alice is too lazy to remove these stones, so she asked you to take this duty. She allowed you to do only the following operation: Select two neighboring piles and, if both of them are not empty, remove one stone from each of them. Alice understands that sometimes it' s impossible to remove all stones with the given operation, so she allowed you to use the following superability: Before the start of cleaning, you can select two neighboring piles and swap them. Determine, if it is possible to remove all stones using the superability not more than once.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of piles. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of stones in each pile. It is guaranteed that the total sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print YES or NO \u2014 is it possible to remove all stones using the superability not more than once or not.",
    "note": "In the first test case, you can remove all stones without using a superability: [ 1, 2, 1] \u2192 [ 1, 1, 0] \u2192 [ 0, 0, 0] . In the second test case, you can apply superability to the second and the third piles and then act like in the first testcase. In the third test case, you can apply superability to the fourth and the fifth piles, thus getting a = [ 2, 2, 2, 3, 1] . In the fourth test case, you can apply superability to the first and the second piles, thus getting a = [ 1900, 2100, 1600, 3000, 1600] .",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1474D"
  },
  {
    "title": "Array Destruction",
    "url": "https://codeforces.com/problemset/problem/1474/C",
    "history": "You found a useless array a of 2n positive integers. You have realized that you actually don' t need this array, so you decided to throw out all elements of a . It could have been an easy task, but it turned out that you should follow some rules: In the beginning, you select any positive integer x . Then you do the following operation n times: select two elements of array with sum equals x ; remove them from a and replace x with maximum of that two numbers. For example, if initially a = [ 3, 5, 1, 2] , you can select x = 6 . Then you can select the second and the third elements of a with sum 5 + 1 = 6 and throw them out. After this operation, x equals 5 and there are two elements in array: 3 and 2 . You can throw them out on the next operation. Note, that you choose x before the start and can' t change it as you want between the operations. Determine how should you behave to throw out all elements of a .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 1 \u2264 n \u2264 1000 ) . The second line of each test case contains 2n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the initial array a . It is guaranteed that the total sum of n over all test cases doesn' t exceed 1000 .",
    "output": "For each test case in the first line print YES if it is possible to throw out all elements of the array and NO otherwise. If it is possible to throw out all elements, print the initial value of x you' ve chosen. Print description of n operations next. For each operation, print the pair of integers you remove.",
    "note": "The first test case was described in the statement. In the second and third test cases, we can show that it is impossible to throw out all elements of array a .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1474C"
  },
  {
    "title": "Different Divisors",
    "url": "https://codeforces.com/problemset/problem/1474/B",
    "history": "Positive integer x is called divisor of positive integer y , if y is divisible by x without remainder. For example, 1 is a divisor of 7 and 3 is not divisor of 8 . We gave you an integer d and asked you to find the smallest positive integer a , such that a has at least 4 divisors; difference between any two divisors of a is at least d .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 3000 ) \u2014 the number of test cases. The first line of each test case contains a single integer d ( 1 \u2264 d \u2264 10000 ) .",
    "output": "For each test case print one integer a \u2014 the answer for this test case.",
    "note": "In the first test case, integer 6 have following divisors: [ 1, 2, 3, 6] . There are 4 of them and the difference between any two of them is at least 1 . There is no smaller integer with at least 4 divisors. In the second test case, integer 15 have following divisors: [ 1, 3, 5, 15] . There are 4 of them and the difference between any two of them is at least 2 . The answer 12 is INVALID because divisors are [ 1, 2, 3, 4, 6, 12] . And the difference between, for example, divisors 2 and 3 is less than d= 2 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1474B"
  },
  {
    "title": "Puzzle From the Future",
    "url": "https://codeforces.com/problemset/problem/1474/A",
    "history": "In the 2022 year, Mike found two binary integers a and b of length n ( both of them are written only by digits 0 and 1 ) that can have leading zeroes. In order not to forget them, he wanted to construct integer d in the following way: he creates an integer c as a result of bitwise summing of a and b without transferring carry, so c may have one or more 2 - s. For example, the result of bitwise summing of 0110 and 1101 is 1211 or the sum of 011000 and 011000 is 022000 ; after that Mike replaces equal consecutive digits in c by one digit, thus getting d . In the cases above after this operation, 1211 becomes 121 and 022000 becomes 020 ( so, d won' t have equal consecutive digits) . Unfortunately, Mike lost integer a before he could calculate d himself. Now, to cheer him up, you want to find any binary integer a of length n such that d will be maximum possible as integer. Maximum possible as integer means that 102 > 21 , 012 < 101 , 021 = 21 and so on.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of a and b . The second line of each test case contains binary integer b of length n . The integer b consists only of digits 0 and 1 . It is guaranteed that the total sum of n over all t test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case output one binary integer a of length n . Note, that a or b may have leading zeroes but must have the same length n .",
    "note": "In the first test case, b = 0 and choosing a = 1 gives d = 1 as a result. In the second test case, b = 011 so: if you choose a = 000 , c will be equal to 011 , so d = 01 ; if you choose a = 111 , c will be equal to 122 , so d = 12 ; if you choose a = 010 , you' ll get d = 021 . If you select a = 110 , you' ll get d = 121 . We can show that answer a = 110 is optimal and d = 121 is maximum possible. In the third test case, b = 110 . If you choose a = 100 , you' ll get d = 210 and it' s the maximum possible d . In the fourth test case, b = 111000 . If you choose a = 101101 , you' ll get d = 212101 and it' s maximum possible d . In the fifth test case, b = 001011 . If you choose a = 101110 , you' ll get d = 102121 and it' s maximum possible d .",
    "topics": [
      "greedy"
    ],
    "id": "1474A"
  },
  {
    "title": "Replacing Elements",
    "url": "https://codeforces.com/problemset/problem/1473/A",
    "history": "You have an array a_ 1, a_ 2, . . . , a_ n . All a_ i are positive integers. In one step you can choose three distinct indices i , j , and k ( i = \u0338 j ; i = \u0338 k ; j = \u0338 k ) and assign the sum of a_ j and a_ k to a_ i , i. e. make a_ i = a_ j + a_ k . Can you make all a_ i lower or equal to d using the operation above any number of times ( possibly, zero) ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and d ( 3 \u2264 n \u2264 100 ; 1 \u2264 d \u2264 100 ) \u2014 the number of elements in the array a and the value d . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) \u2014 the array a .",
    "output": "For each test case, print YES, if it' s possible to make all elements a_ i less or equal than d using the operation above. Otherwise, print NO. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case, we can prove that we can' t make all a_ i \u2264 3 . In the second test case, all a_ i are already less or equal than d = 4 . In the third test case, we can, for example, choose i = 5 , j = 1 , k = 2 and make a_ 5 = a_ 1 + a_ 2 = 2 + 1 = 3 . Array a will become [ 2, 1, 5, 3, 3] . After that we can make a_ 3 = a_ 5 + a_ 2 = 3 + 1 = 4 . Array will become [ 2, 1, 4, 3, 3] and all elements are less or equal than d = 4 .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1473A"
  },
  {
    "title": "New Year's Puzzle",
    "url": "https://codeforces.com/problemset/problem/1472/F",
    "history": "Every year Santa Claus gives gifts to all children. However, each country has its own traditions, and this process takes place in different ways. For example, in Berland you need to solve the New Year' s puzzle. Polycarp got the following problem: given a grid strip of size 2 \u00d7 n , some cells of it are blocked. You need to check if it is possible to tile all free cells using the 2 \u00d7 1 and 1 \u00d7 2 tiles ( dominoes) . For example, if n = 5 and the strip looks like this ( black cells are blocked) : Then it can be tiled, for example, using two vertical and two horizontal tiles, as in the picture below ( different tiles are marked by different colors) . And if n = 3 and the strip looks like this: It is impossible to tile free cells. Polycarp easily solved this task and received his New Year' s gift. Can you solve it?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case is preceded by an empty line. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the strip and the number of blocked cells on it. Each of the next m lines contains two integers r_ i, c_ i ( 1 \u2264 r_ i \u2264 2, 1 \u2264 c_ i \u2264 n ) \u2014 numbers of rows and columns of blocked cells. It is guaranteed that all blocked cells are different, i. e. ( r_ i, c_ i) ( r_ j, c_ j) , i j . It is guaranteed that the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print on a separate line: \" YES\" , if it is possible to tile all unblocked squares with the 2 \u00d7 1 and 1 \u00d7 2 tiles; \" NO\" otherwise. You can output \" YES\" and \" NO\" in any case ( for example, the strings yEs, yes, Yes and YES will be recognized as positive) .",
    "note": "The first two test cases are explained in the statement. In the third test case the strip looks like this: It is easy to check that the unblocked squares on it can not be tiled.",
    "topics": [
      "brute force",
      "dp",
      "graph matchings",
      "greedy",
      "sortings"
    ],
    "id": "1472F"
  },
  {
    "title": "Even-Odd Game",
    "url": "https://codeforces.com/problemset/problem/1472/D",
    "history": "During their New Year holidays, Alice and Bob play the following game using an array a of n integers: Players take turns, Alice moves first. Each turn a player chooses any element and removes it from the array. If Alice chooses even value, then she adds it to her score. If the chosen value is odd, Alice' s score does not change. Similarly, if Bob chooses odd value, then he adds it to his score. If the chosen value is even, then Bob' s score does not change. If there are no numbers left in the array, then the game ends. The player with the highest score wins. If the scores of the players are equal, then a draw is declared. For example, if n = 4 and a = [ 5, 2, 7, 3] , then the game could go as follows ( there are other options) : On the first move, Alice chooses 2 and get two points. Her score is now 2 . The array a is now [ 5, 7, 3] . On the second move, Bob chooses 5 and get five points. His score is now 5 . The array a is now [ 7, 3] . On the third move, Alice chooses 7 and get no points. Her score is now 2 . The array a is now [ 3] . On the last move, Bob chooses 3 and get three points. His score is now 8 . The array a is empty now. Since Bob has more points at the end of the game, he is the winner. You want to find out who will win if both players play optimally. Note that there may be duplicate numbers in the array.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array a . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array a used to play the game. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output on a separate line: \" Alice\" if Alice wins with the optimal play; \" Bob\" if Bob wins with the optimal play; \" Tie\" , if a tie is declared during the optimal play.",
    "note": "",
    "topics": [
      "dp",
      "games",
      "greedy",
      "sortings"
    ],
    "id": "1472D"
  },
  {
    "title": "Fair Division",
    "url": "https://codeforces.com/problemset/problem/1472/B",
    "history": "Alice and Bob received n candies from their parents. Each candy weighs either 1 gram or 2 grams. Now they want to divide all candies among themselves fairly so that the total weight of Alice' s candies is equal to the total weight of Bob' s candies. Check if they can do that. Note that candies are not allowed to be cut in half.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of candies that Alice and Bob received. The next line contains n integers a_ 1, a_ 2, . . . , a_ n \u2014 the weights of the candies. The weight of each candy is either 1 or 2 . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output on a separate line: \" YES\" , if all candies can be divided into two sets with the same weight; \" NO\" otherwise. You can output \" YES\" and \" NO\" in any case ( for example, the strings yEs, yes, Yes and YES will be recognized as positive) .",
    "note": "In the first test case, Alice and Bob can each take one candy, then both will have a total weight of 1 . In the second test case, any division will be unfair. In the third test case, both Alice and Bob can take two candies, one of weight 1 and one of weight 2 . In the fourth test case, it is impossible to divide three identical candies between two people. In the fifth test case, any division will also be unfair.",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1472B"
  },
  {
    "title": "Cards for Friends",
    "url": "https://codeforces.com/problemset/problem/1472/A",
    "history": "For the New Year, Polycarp decided to send postcards to all his n friends. He wants to make postcards with his own hands. For this purpose, he has a sheet of paper of size w \u00d7 h , which can be cut into pieces. Polycarp can cut any sheet of paper w \u00d7 h that he has in only two cases: If w is even, then he can cut the sheet in half and get two sheets of size w/ 2\u00d7 h ; If h is even, then he can cut the sheet in half and get two sheets of size w \u00d7h/ 2 ; If w and h are even at the same time, then Polycarp can cut the sheet according to any of the rules above. After cutting a sheet of paper, the total number of sheets of paper is increased by 1 . Help Polycarp to find out if he can cut his sheet of size w \u00d7 h at into n or more pieces, using only the rules described above.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of one line containing three integers w , h , n ( 1 \u2264 w, h \u2264 10^ 4, 1 \u2264 n \u2264 10^ 9 ) \u2014 the width and height of the sheet Polycarp has and the number of friends he needs to send a postcard to.",
    "output": "For each test case, output on a separate line: \" YES\" , if it is possible to cut a sheet of size w \u00d7 h into at least n pieces; \" NO\" otherwise. You can output \" YES\" and \" NO\" in any case ( for example, the strings yEs, yes, Yes and YES will be recognized as positive) .",
    "note": "In the first test case, you can first cut the 2 \u00d7 2 sheet into two 2 \u00d7 1 sheets, and then cut each of them into two more sheets. As a result, we get four sheets 1 \u00d7 1 . We can choose any three of them and send them to our friends. In the second test case, a 3 \u00d7 3 sheet cannot be cut, so it is impossible to get two sheets. In the third test case, you can cut a 5 \u00d7 10 sheet into two 5 \u00d7 5 sheets. In the fourth test case, there is no need to cut the sheet, since we only need one sheet. In the fifth test case, you can first cut the 1 \u00d7 4 sheet into two 1 \u00d7 2 sheets, and then cut each of them into two more sheets. As a result, we get four sheets 1 \u00d7 1 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1472A"
  },
  {
    "title": "Strange List",
    "url": "https://codeforces.com/problemset/problem/1471/B",
    "history": "You have given an array a of length n and an integer x to a brand new robot. What the robot does is the following: it iterates over the elements of the array, let the current element be q . If q is divisible by x , the robot adds x copies of the integer q/ x to the end of the array, and moves on to the next element. Note that the newly added elements could be processed by the robot later. Otherwise, if q is not divisible by x , the robot shuts down. Please determine the sum of all values of the array at the end of the process.",
    "input": "The first input line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 10^ 5 , 2 \u2264 x \u2264 10^ 9 ) \u2014 the length of the array and the value which is used by the robot. The next line contains integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial values in the array. It is guaranteed that the sum of values n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output one integer \u2014 the sum of all elements at the end of the process.",
    "note": "In the first test case the array initially consists of a single element [ 12] , and x= 2 . After the robot processes the first element, the array becomes [ 12, 6, 6] . Then the robot processes the second element, and the array becomes [ 12, 6, 6, 3, 3] . After the robot processes the next element, the array becomes [ 12, 6, 6, 3, 3, 3, 3] , and then the robot shuts down, since it encounters an element that is not divisible by x = 2 . The sum of the elements in the resulting array is equal to 36 . In the second test case the array initially contains integers [ 4, 6, 8, 2] , and x= 2 . The resulting array in this case looks like [ 4, 6, 8, 2, 2, 2, 3, 3, 4, 4, 1, 1, 1, 1, 1, 1] .",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1471B"
  },
  {
    "title": "Strange Partition",
    "url": "https://codeforces.com/problemset/problem/1471/A",
    "history": "You are given an array a of length n , and an integer x . You can perform the following operation as many times as you would like ( possibly zero) : replace two adjacent elements of the array by their sum. For example, if the initial array was [ 3, 6, 9] , in a single operation one can replace the last two elements by their sum, yielding an array [ 3, 15] , or replace the first two elements to get an array [ 9, 9] . Note that the size of the array decreases after each operation. The beauty of an array b= [ b_ 1, . . . , b_ k] is defined as \u2211_ i= 1^ k \u2308b_ i/ x\u2309 , which means that we divide each element by x , round it up to the nearest integer, and sum up the resulting values. For example, if x = 3 , and the array is [ 4, 11, 6] , the beauty of the array is equal to \u23084/ 3\u2309 + \u230811/ 3\u2309 + \u23086/ 3\u2309 = 2 + 4 + 2 = 8 . Please determine the minimum and the maximum beauty you can get by performing some operations on the original array.",
    "input": "The first input line contains a single integer t \u2014 the number of test cases ( 1 \u2264 t \u2264 1000 ) . The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 x \u2264 10^ 9 ) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , the elements of the array a . It is guaranteed that the sum of values of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case output two integers \u2014 the minimal and the maximal possible beauty.",
    "note": "In the first test case the beauty of the array does not change if we perform any operations. In the second example we can leave the array unchanged to attain the maximum beauty, and to get the minimum beauty one can replace two elements 4 and 11 with their sum, yielding an array [ 6, 15] , which has its beauty equal to 7 .",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1471A"
  },
  {
    "title": "Strange Housing",
    "url": "https://codeforces.com/problemset/problem/1470/D",
    "history": "Students of Winter Informatics School are going to live in a set of houses connected by underground passages. Teachers are also going to live in some of these houses, but they can not be accommodated randomly. For safety reasons, the following must hold: All passages between two houses will be closed, if there are no teachers in both of them. All other passages will stay open. It should be possible to travel between any two houses using the underground passages that are open. Teachers should not live in houses, directly connected by a passage. Please help the organizers to choose the houses where teachers will live to satisfy the safety requirements or determine that it is impossible.",
    "input": "The first input line contains a single integer t \u2014 the number of test cases ( 1 \u2264 t \u2264 10^ 5 ) . Each test case starts with two integers n and m ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , 0 \u2264 m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of houses and the number of passages. Then m lines follow, each of them contains two integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , describing a passage between the houses u and v . It is guaranteed that there are no two passages connecting the same pair of houses. The sum of values n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of values m over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, if there is no way to choose the desired set of houses, output \" NO\" . Otherwise, output \" YES\" , then the total number of houses chosen, and then the indices of the chosen houses in arbitrary order.",
    "note": "The picture below shows the second example test.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graph matchings",
      "graphs",
      "greedy"
    ],
    "id": "1470D"
  },
  {
    "title": "Strange Birthday Party",
    "url": "https://codeforces.com/problemset/problem/1470/A",
    "history": "Petya organized a strange birthday party. He invited n friends and assigned an integer k_ i to the i - th of them. Now Petya would like to give a present to each of them. In the nearby shop there are m unique presents available, the j - th present costs c_ j dollars ( 1 \u2264 c_ 1 \u2264 c_ 2 \u2264. . . \u2264 c_ m ) . It' s not allowed to buy a single present more than once. For the i - th friend Petya can either buy them a present j \u2264 k_ i , which costs c_ j dollars, or just give them c_ k_ i dollars directly. Help Petya determine the minimum total cost of hosting his party.",
    "input": "The first input line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n, m \u2264 3 \u00b7 10^ 5 ) \u2014 the number of friends, and the number of unique presents available. The following line contains n integers k_ 1, k_ 2, . . . , k_ n ( 1 \u2264 k_ i \u2264 m ) , assigned by Petya to his friends. The next line contains m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ 1 \u2264 c_ 2 \u2264. . . \u2264 c_ m \u2264 10^ 9 ) \u2014 the prices of the presents. It is guaranteed that sum of values n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of values m over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case output a single integer \u2014 the minimum cost of the party.",
    "note": "In the first example, there are two test cases. In the first one, Petya has 5 friends and 4 available presents. Petya can spend only 30 dollars if he gives 5 dollars to the first friend. A present that costs 12 dollars to the second friend. A present that costs 5 dollars to the third friend. A present that costs 3 dollars to the fourth friend. 5 dollars to the fifth friend. In the second one, Petya has 5 and 5 available presents. Petya can spend only 190 dollars if he gives A present that costs 10 dollars to the first friend. A present that costs 40 dollars to the second friend. 90 dollars to the third friend. 40 dollars to the fourth friend. 10 dollars to the fifth friend.",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1470A"
  },
  {
    "title": "Power Sockets",
    "url": "https://codeforces.com/problemset/problem/1469/F",
    "history": "/ / We decided to drop the legend about the power sockets but feel free to come up with your own : ^ ) Define a chain: a chain of length 1 is a single vertex; a chain of length x is a chain of length x- 1 with a new vertex connected to the end of it with a single edge. You are given n chains of lengths l_ 1, l_ 2, . . . , l_ n . You plan to build a tree using some of them. Each vertex of the tree is either white or black. The tree initially only has a white root vertex. All chains initially consist only of white vertices. You can take one of the chains and connect any of its vertices to any white vertex of the tree with an edge. The chain becomes part of the tree. Both endpoints of this edge become black. Each chain can be used no more than once. Some chains can be left unused. The distance between two vertices of the tree is the number of edges on the shortest path between them. If there is at least k white vertices in the resulting tree, then the value of the tree is the distance between the root and the k - th closest white vertex. What' s the minimum value of the tree you can obtain? If there is no way to build a tree with at least k white vertices, then print - 1.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 2 \u2264 k \u2264 10^ 9 ) \u2014 the number of chains and the minimum number of white vertices a tree should have to have a value. The second line contains n integers l_ 1, l_ 2, . . . , l_ n ( 3 \u2264 l_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the lengths of the chains.",
    "output": "Print a single integer. If there is no way to build a tree with at least k white vertices, then print - 1. Otherwise, print the minimum value the tree can have.",
    "note": "You are allowed to not use all the chains, so it' s optimal to only use chain of length 4 in the second example.",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1469F"
  },
  {
    "title": "Building a Fence",
    "url": "https://codeforces.com/problemset/problem/1469/C",
    "history": "You want to build a fence that will consist of n equal sections. All sections have a width equal to 1 and height equal to k . You will place all sections in one line side by side. Unfortunately, the ground beneath the fence is not flat. For simplicity, you can think that the ground level under the i - th section is equal to h_ i . You should follow several rules to build the fence: the consecutive sections should have a common side of length at least 1 ; the first and the last sections should stand on the corresponding ground levels; the sections between may be either on the ground level or higher, but not higher than k - 1 from the ground level h_ i ( the height should be an integer) ; One of possible fences ( blue color) for the first test case Is it possible to build a fence that meets all rules?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 2 \u2264 k \u2264 10^ 8 ) \u2014 the number of sections in the fence and the height of each section. The second line of each test case contains n integers h_ 1, h_ 2, . . . , h_ n ( 0 \u2264 h_ i \u2264 10^ 8 ) , where h_ i is the ground level beneath the i - th section. It' s guaranteed that the sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print YES if it' s possible to build the fence that meets all rules. Otherwise, print NO. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case, one of the possible fences is shown in the picture. In the second test case, according to the second rule, you should build both sections on the corresponding ground levels, and since k = 3 , h_ 1 = 0 , and h_ 2 = 2 the first rule is also fulfilled. In the third test case, according to the second rule, you should build the first section on height 3 and the third section on height 2 . According to the first rule, the second section should be on the height of at least 2 ( to have a common side with the first section) , but according to the third rule, the second section can be built on the height of at most h_ 2 + k - 1 = 1 .",
    "topics": [
      "dp",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1469C"
  },
  {
    "title": "Red and Blue",
    "url": "https://codeforces.com/problemset/problem/1469/B",
    "history": "Monocarp had a sequence a consisting of n + m integers a_ 1, a_ 2, . . . , a_ n + m . He painted the elements into two colors, red and blue; n elements were painted red, all other m elements were painted blue. After painting the elements, he has written two sequences r_ 1, r_ 2, . . . , r_ n and b_ 1, b_ 2, . . . , b_ m . The sequence r consisted of all red elements of a in the order they appeared in a ; similarly, the sequence b consisted of all blue elements of a in the order they appeared in a as well. Unfortunately, the original sequence was lost, and Monocarp only has the sequences r and b . He wants to restore the original sequence. In case there are multiple ways to restore it, he wants to choose a way to restore that maximizes the value of f( a) = max( 0, a_ 1, ( a_ 1 + a_ 2) , ( a_ 1 + a_ 2 + a_ 3) , . . . , ( a_ 1 + a_ 2 + a_ 3 + . . . + a_ n + m) ) Help Monocarp to calculate the maximum possible value of f( a) .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then the test cases follow. Each test case consists of four lines. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 100 ) . The second line contains n integers r_ 1, r_ 2, . . . , r_ n ( - 100 \u2264 r_ i \u2264 100 ) . The third line contains one integer m ( 1 \u2264 m \u2264 100 ) . The fourth line contains m integers b_ 1, b_ 2, . . . , b_ m ( - 100 \u2264 b_ i \u2264 100 ) .",
    "output": "For each test case, print one integer \u2014 the maximum possible value of f( a) .",
    "note": "In the explanations for the sample test cases, red elements are marked as bold. In the first test case, one of the possible sequences a is [ 6, 2, - 5, 3, 7, - 3, - 4] . In the second test case, one of the possible sequences a is [ 10, 1, - 3, 1, 2, 2] . In the third test case, one of the possible sequences a is [ - 1, - 1, - 2, - 3, - 2, - 4, - 5, - 3, - 4, - 5] . In the fourth test case, one of the possible sequences a is [ 0, 0] .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1469B"
  },
  {
    "title": "Regular Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/1469/A",
    "history": "A bracket sequence is called regular if it is possible to obtain correct arithmetic expression by inserting characters + and 1 into this sequence. For example, sequences ( ( ) ) ( ) , ( ) and ( ( ) ( ( ) ) ) are regular, while ) ( , ( ( ) and ( ( ) ) ) ( are not. Let' s call a regular bracket sequence \" RBS\" . You are given a sequence s of n characters ( , ) , and/ or ? . There is exactly one character ( and exactly one character ) in this sequence. You have to replace every character ? with either ) or ( ( different characters ? can be replaced with different brackets) . You cannot reorder the characters, remove them, insert other characters, and each ? must be replaced. Determine if it is possible to obtain an RBS after these replacements.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of one line containing s ( 2 \u2264 | s| \u2264 100 ) \u2014 a sequence of characters ( , ) , and/ or ? . There is exactly one character ( and exactly one character ) in this sequence.",
    "output": "For each test case, print YES if it is possible to obtain a regular bracket sequence, or NO otherwise. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case, the sequence is already an RBS. In the third test case, you can obtain an RBS as follows: ( ) ( ) or ( ( ) ) . In the fourth test case, you can obtain an RBS as follows: ( ) ( ) .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1469A"
  },
  {
    "title": "Waste Sorting",
    "url": "https://codeforces.com/problemset/problem/1468/N",
    "history": "The progress is not standing still in Berland. Recently all garbage containers in Bertown, the capital of Berland, were replaced by differentiated recycling bins, each accepting some category of waste. While this will definitely improve the ecological situation, for some citizens it' s difficult to get used to the habit of sorting waste. Monocarp is one of those citizens who tries to get used to waste sorting. Today he has to take out the trash from his house. There are three containers near the Monocarp' s house, the first one accepts paper waste, the second one accepts plastic waste, and the third one \u2014 all other types of waste. It is possible to fit c_ 1 items into the first container, c_ 2 items into the second container and c_ 3 items into the third container. Monocarp has a lot of items to throw into containers. Some are made of paper, so Monocarp has to put them into the first container ( he has a_ 1 such items) , some are made of plastic, so he has to put them into the second container ( he has a_ 2 such items) , and some are neither paper nor plastic \u2014 so Monocarp has to put them into the third container ( he has a_ 3 such items) . Unfortunately, there are also two categories of items that Monocarp is unsure of: he has a_ 4 items which are partially made of paper, so he will put each of these items either into the first container or into the third container. Similarly, he has a_ 5 items partially made of plastic, so he has to put each of them either into the second container or into the third container. Obviously, this choice is made separately for each item \u2014 for example, Monocarp can throw several partially- plastic items into the second container, and all other partially- plastic items \u2014 into the third one. Now Monocarp wonders: is it possible to put each item into some container so that the first container will hold no more than c_ 1 items, the second one \u2014 no more than c_ 2 items, and the third one \u2014 no more than c_ 3 items?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 4 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains three integers c_ 1 , c_ 2 , c_ 3 ( 0 \u2264 c_ 1, c_ 2, c_ 3 \u2264 10^ 8 ) \u2014 the capacities of the containers. The second line of each test case contains five integers a_ 1 , a_ 2 , a_ 3 , a_ 4 , a_ 5 ( 0 \u2264 a_ i \u2264 10^ 8 ) , where a_ i is the number of items of the i - th category Monocarp has to throw out ( i = 1 is paper waste, i = 2 is plastic waste, i = 3 is general waste, i = 4 is partially- paper waste, i = 5 is partially- plastic waste) .",
    "output": "For each test case, print either YES if it is possible to fit all items into containers, or NO otherwise. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "Explanations for the example test cases: Monocarp can put 1 item of paper waste into the first container, 2 items of plastic waste into the second container, and 3 items of general waste into the third container; Monocarp can put 1 item of paper waste and 1 item of partially- paper waste into the first container, 2 items of plastic waste into the second container, and 3 items of general waste into the third container; there is no answer since either the second container should contain 3 items, or the third container should contain 4 items; Monocarp can put 1 item of paper waste into the first container, 2 items of plastic waste into the second container, and 3 items of general waste, 1 item of partially- paper waste and 1 item of partially- plastic waste into the third container; there is no waste at all, so all containers can be left empty; there' s no answer since it' s impossible to put a paper item into the third container; Monocarp can put 10 items of partially- paper waste into the first container, 37 items of partially- plastic waste into the second container, and 30 items of partially- paper waste and 10 items of partially- plastic waste into the third container.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1468N"
  },
  {
    "title": "Prime Divisors Selection",
    "url": "https://codeforces.com/problemset/problem/1468/L",
    "history": "Suppose you have a sequence of k integers A = [ a_ 1, a_ 2, . . . , a_ k] where each a_ i \u2265 2 . A sequence of prime integers P = [ p_ 1, p_ 2, . . . , p_ k] is called suitable for the sequence A if a_ 1 is divisible by p_ 1 , a_ 2 is divisible by p_ 2 and so on. A sequence of prime integers P is called friendly if there are no unique integers in this sequence. A sequence A is called ideal, if each sequence P that is suitable for A is friendly as well ( i. e. there is no sequence P that is suitable for A , but not friendly) . For example, the sequence [ 2, 4, 16] is ideal, while the sequence [ 2, 4, 6] is not ideal ( there exists a sequence P = [ 2, 2, 3] which is suitable for A , but not friendly) . You are given n different integers x_ 1 , x_ 2 , . . . , x_ n . You have to choose exactly k of them in such a way that they form an ideal sequence, or report that it is impossible. Note that no integer can be chosen more than once.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 1000 ) . The second line contains n pairwise distinct integers x_ 1 , x_ 2 , . . . , x_ n ( 2 \u2264 x_ i \u2264 10^ 18 ) .",
    "output": "If it is impossible to choose exactly k integers from x_ 1 , x_ 2 , . . . , x_ n in such a way that the chosen integers form an ideal sequence, print 0 . Otherwise, print k pairwise distinct integers \u2014 the elements of the chosen ideal sequence. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1468L"
  },
  {
    "title": "Road Reform",
    "url": "https://codeforces.com/problemset/problem/1468/J",
    "history": "There are n cities and m bidirectional roads in Berland. The i - th road connects the cities x_ i and y_ i , and has the speed limit s_ i . The road network allows everyone to get from any city to any other city. The Berland Transport Ministry is planning a road reform. First of all, maintaining all m roads is too costly, so m - ( n - 1) roads will be demolished in such a way that the remaining ( n - 1) roads still allow to get to any city from any other city. Formally, the remaining roads should represent an undirected tree. Secondly, the speed limits on the remaining roads might be changed. The changes will be done sequentially, each change is either increasing the speed limit on some road by 1 , or decreasing it by 1 . Since changing the speed limit requires a lot of work, the Ministry wants to minimize the number of changes. The goal of the Ministry is to have a road network of ( n - 1) roads with the maximum speed limit over all roads equal to exactly k . They assigned you the task of calculating the minimum number of speed limit changes they have to perform so the road network meets their requirements. For example, suppose the initial map of Berland looks like that, and k = 7 : Then one of the optimal courses of action is to demolish the roads 1 \u2013 4 and 3 \u2013 4 , and then decrease the speed limit on the road 2 \u2013 3 by 1 , so the resulting road network looks like that:",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; n - 1 \u2264 m \u2264min( 2 \u00b7 10^ 5, n( n- 1) / 2) ; 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of cities, the number of roads and the required maximum speed limit, respectively. Then m lines follow. The i - th line contains three integers x_ i , y_ i and s_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ; 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the cities connected by the i - th road and the speed limit on it, respectively. All roads are bidirectional. The road network in each test case is connected ( that is, it is possible to reach any city from any other city by traveling along the road) , and each pair of cities is connected by at most one road. The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 . Similarly, the sum of m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum number of changes the Ministry has to perform so that the maximum speed limit among the remaining ( n - 1) roads is exactly k .",
    "note": "The explanation for the example test: The first test case is described in the problem statement. In the second test case, the road network initially looks like that: The Ministry can demolish the roads 1 \u2013 2 , 3 \u2013 2 and 3 \u2013 4 , and then increase the speed limit on the road 1 \u2013 4 three times. In the third test case, the road network already meets all the requirements. In the fourth test case, it is enough to demolish the road 1 \u2013 2 so the resulting road network meets the requirements.",
    "topics": [
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1468J"
  },
  {
    "title": "K and Medians",
    "url": "https://codeforces.com/problemset/problem/1468/H",
    "history": "Let' s denote the median of a sequence s with odd length as the value in the middle of s if we sort s in non- decreasing order. For example, let s = [ 1, 2, 5, 7, 2, 3, 12] . After sorting, we get sequence [ 1, 2, 2, 3, 5, 7, 12] , and the median is equal to 3 . You have a sequence of n integers [ 1, 2, . . . , n] and an odd integer k . In one step, you choose any k elements from the sequence and erase all chosen elements except their median. These elements do not have to go continuously ( gaps are allowed between them) . For example, if you have a sequence [ 1, 2, 3, 4, 5, 6, 7] ( i. e. n= 7 ) and k = 3 , then the following options for the first step are possible: choose [ 1, 2, 3] ; 2 is their median, so it is not erased, and the resulting sequence is [ 2, 4, 5, 6, 7] ; choose [ 2, 4, 6] ; 4 is their median, so it is not erased, and the resulting sequence is [ 1, 3, 4, 5, 7] ; choose [ 1, 6, 7] ; 6 is their median, so it is not erased, and the resulting sequence is [ 2, 3, 4, 5, 6] ; and several others. You can do zero or more steps. Can you get a sequence b_ 1 , b_ 2 , . . . , b_ m after several steps? You' ll be given t test cases. Solve each test case independently.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains three integers n , k , and m ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ; 3 \u2264 k \u2264 n ; k is odd; 1 \u2264 m < n ) \u2014 the length of the sequence you have, the number of elements you choose in each step and the length of the sequence you' d like to get. The second line of each test case contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ 1 < b_ 2 < . . . < b_ m \u2264 n ) \u2014 the sequence you' d like to get, given in the ascending order. It' s guaranteed that the total sum of n over all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print YES if you can obtain the sequence b or NO otherwise. You may print each letter in any case ( for example, YES, Yes, yes, yEs will all be recognized as positive answer) .",
    "note": "In the first test case, you have sequence [ 1, 2, 3] . Since k = 3 you have only one way to choose k elements \u2014 it' s to choose all elements [ 1, 2, 3] with median 2 . That' s why after erasing all chosen elements except its median you' ll get sequence [ 2] . In other words, there is no way to get sequence b = [ 1] as the result. In the second test case, you have sequence [ 1, 2, 3, 4, 5, 6, 7] and one of the optimal strategies is following: choose k = 3 elements [ 2, 3, 4] and erase them except its median; you' ll get sequence [ 1, 3, 5, 6, 7] ; choose 3 elements [ 3, 5, 6] and erase them except its median; you' ll get desired sequence [ 1, 5, 7] ; In the fourth test case, you have sequence [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] . You can choose k= 7 elements [ 2, 4, 6, 7, 8, 10, 13] and erase them except its median to get sequence b .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1468H"
  },
  {
    "title": "Four Segments",
    "url": "https://codeforces.com/problemset/problem/1468/E",
    "history": "Monocarp wants to draw four line segments on a sheet of paper. He wants the i - th segment to have its length equal to a_ i ( 1 \u2264 i \u2264 4 ) . These segments can intersect with each other, and each segment should be either horizontal or vertical. Monocarp wants to draw the segments in such a way that they enclose a rectangular space, and the area of that rectangular space should be maximum possible. For example, if Monocarp wants to draw four segments with lengths 1 , 2 , 3 and 4 , he can do it the following way: Here, Monocarp has drawn segments AB ( with length 1 ) , CD ( with length 2 ) , BC ( with length 3 ) and EF ( with length 4 ) . He got a rectangle ABCF with area equal to 3 that is enclosed by the segments. Calculate the maximum area of a rectangle Monocarp can enclose with four segments.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 3 \u00b7 10^ 4 ) \u2014 the number of test cases. Each test case consists of a single line containing four integers a_ 1 , a_ 2 , a_ 3 , a_ 4 ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the lengths of the segments Monocarp wants to draw.",
    "output": "For each test case, print one integer \u2014 the maximum area of a rectangle Monocarp can enclose with four segments ( it can be shown that the answer is always an integer) .",
    "note": "The first test case of the example is described in the statement. For the second test case, Monocarp can draw the segments AB , BC , CD and DA as follows: Here, Monocarp has drawn segments AB ( with length 5 ) , BC ( with length 5 ) , CD ( with length 5 ) and DA ( with length 5 ) . He got a rectangle ABCD with area equal to 25 that is enclosed by the segments.",
    "topics": [
      "greedy"
    ],
    "id": "1468E"
  },
  {
    "title": "LaIS",
    "url": "https://codeforces.com/problemset/problem/1468/A",
    "history": "Let' s call a sequence b_ 1, b_ 2, b_ 3 . . . , b_ k - 1, b_ k almost increasing if min( b_ 1, b_ 2) \u2264min( b_ 2, b_ 3) \u2264. . . \u2264min( b_ k - 1, b_ k) . In particular, any sequence with no more than two elements is almost increasing. You are given a sequence of integers a_ 1, a_ 2, . . . , a_ n . Calculate the length of its longest almost increasing subsequence. You' ll be given t test cases. Solve each test case independently. Reminder: a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of independent test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the length of the sequence a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the sequence itself. It' s guaranteed that the total sum of n over all test cases doesn' t exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the length of the longest almost increasing subsequence.",
    "note": "In the first test case, one of the optimal answers is subsequence 1, 2, 7, 2, 2, 3 . In the second and third test cases, the whole sequence a is already almost increasing.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1468A"
  },
  {
    "title": "Three Bags",
    "url": "https://codeforces.com/problemset/problem/1467/C",
    "history": "You are given three bags. Each bag contains a non- empty multiset of numbers. You can perform a number of operations on these bags. In one operation, you can choose any two non- empty bags, and choose one number from each of the bags. Let' s say that you choose number a from the first bag and number b from the second bag. Then, you remove b from the second bag and replace a with a- b in the first bag. Note that if there are multiple occurrences of these numbers, then you shall only remove/ replace exactly one occurrence. You have to perform these operations in such a way that you have exactly one number remaining in exactly one of the bags ( the other two bags being empty) . It can be shown that you can always apply these operations to receive such a configuration in the end. Among all these configurations, find the one which has the maximum number left in the end.",
    "input": "The first line of the input contains three space- separated integers n_ 1 , n_ 2 and n_ 3 ( 1 \u2264 n_ 1, n_ 2, n_ 3 \u2264 3\u00b710^ 5 , 1 \u2264 n_ 1+ n_ 2+ n_ 3 \u2264 3\u00b710^ 5 ) \u2014 the number of numbers in the three bags. The i - th of the next three lines contain n_ i space- separated integers a_ i, 1 , a_ i, 2 , . . . , a_ i, n_ i ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the numbers in the i - th bag.",
    "output": "Print a single integer \u2014 the maximum number which you can achieve in the end.",
    "note": "In the first example input, let us perform the following operations: [ 1, 2] , [ 6, 3, 4, 5] , [ 5] [ - 5, 2] , [ 3, 4, 5] , [ 5] ( Applying an operation to ( 1, 6) ) [ - 10, 2] , [ 3, 4] , [ 5] ( Applying an operation to ( - 5, 5) ) [ 2] , [ 3, 4] , [ 15] ( Applying an operation to ( 5, - 10) ) [ - 1] , [ 4] , [ 15] ( Applying an operation to ( 2, 3) ) [ - 5] , [ ] , [ 15] ( Applying an operation to ( - 1, 4) ) [ ] , [ ] , [ 20] ( Applying an operation to ( 15, - 5) ) You can verify that you cannot achieve a bigger number. Hence, the answer is 20 .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1467C"
  },
  {
    "title": "Wizard of Orz",
    "url": "https://codeforces.com/problemset/problem/1467/A",
    "history": "There are n digital panels placed in a straight line. Each panel can show any digit from 0 to 9 . Initially, all panels show 0 . Every second, the digit shown by each panel increases by 1 . In other words, at the end of every second, a panel that showed 9 would now show 0 , a panel that showed 0 would now show 1 , a panel that showed 1 would now show 2 , and so on. When a panel is paused, the digit displayed on the panel does not change in the subsequent seconds. You must pause exactly one of these panels, at any second you wish. Then, the panels adjacent to it get paused one second later, the panels adjacent to those get paused 2 seconds later, and so on. In other words, if you pause panel x , panel y ( for all valid y ) would be paused exactly | x\u2212y| seconds later. For example, suppose there are 4 panels, and the 3 - rd panel is paused when the digit 9 is on it. The panel 1 pauses 2 seconds later, so it has the digit 1 ; the panel 2 pauses 1 second later, so it has the digit 0 ; the panel 4 pauses 1 second later, so it has the digit 0 . The resulting 4 - digit number is 1090 . Note that this example is not optimal for n = 4 . Once all panels have been paused, you write the digits displayed on them from left to right, to form an n digit number ( it can consist of leading zeros) . What is the largest possible number you can get? Initially, all panels show 0 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Each test case consists of a single line containing a single integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) . It is guaranteed that the sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "For each test case, print the largest number you can achieve, if you pause one panel optimally.",
    "note": "In the first test case, it is optimal to pause the first panel when the number 9 is displayed on it. In the second test case, it is optimal to pause the second panel when the number 8 is displayed on it.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1467A"
  },
  {
    "title": "Finding satisfactory solutions",
    "url": "https://codeforces.com/problemset/problem/1466/H",
    "history": "Getting so far in this contest is not an easy feat. By solving all the previous problems, you have impressed the gods greatly. Thus, they decided to spare you the story for this problem and grant a formal statement instead. Consider n agents. Each one of them initially has exactly one item, i - th agent has the item number i . We are interested in reassignments of these items among the agents. An assignment is valid iff each item is assigned to exactly one agent, and each agent is assigned exactly one item. Each agent has a preference over the items, which can be described by a permutation p of items sorted from the most to the least desirable. In other words, the agent prefers item i to item j iff i appears earlier in the permutation p . A preference profile is a list of n permutations of length n each, such that i - th permutation describes preferences of the i - th agent. It is possible that some of the agents are not happy with the assignment of items. A set of dissatisfied agents may choose not to cooperate with other agents. In such a case, they would exchange the items they possess initially ( i - th item belongs to i - th agent) only between themselves. Agents from this group don' t care about the satisfaction of agents outside of it. However, they need to exchange their items in such a way that will make at least one of them happier, and none of them less happy ( in comparison to the given assignment) . Formally, consider a valid assignment of items \u2014 A . Let A( i) denote the item assigned to i - th agent. Also, consider a subset of agents. Let S be the set of their indices. We will say this subset of agents is dissatisfied iff there exists a valid assignment B( i) such that: For each i \u2208 S , B( i) \u2208 S . No agent i \u2208 S prefers A( i) to B( i) ( no agent from the S is less happy) . At least one agent i \u2208 S prefers B( i) to A( i) ( at least one agent from the S is happier) . An assignment is optimal if no subset of the agents is dissatisfied. Note that the empty subset cannot be dissatisfied. It can be proven that for each preference profile, there is precisely one optimal assignment. Example: Consider 3 agents with the following preference profile: [ 2, 1, 3] [ 1, 2, 3] [ 1, 3, 2] And such an assignment: First agent gets item 2 Second agent gets item 3 . Third agent gets item 1 . See that the set of agents { 1, 2} is dissatisfied, because they can reassign their ( initial) items in the following way: First agent gets item 2 . Second agent gets item 1 . Third agent gets item 3 . This reassignment will make the second agent happier and make no difference to the first agent. As a result, the third agent got an item that is worse for him, but this does not prevent the set { 1, 2} from being dissatisfied ( he is not in this set) . The following assignment would be optimal: First agent gets item 2 . Second agent gets item 1 . Third agent gets item 3 . Given an assignment A , calculate the number of distinct preference profiles for which assignment A is optimal. As the answer can be huge, output it modulo 10^ 9+ 7 . Two preference profiles are different iff they assign different preference permutations to any agent.",
    "input": "In the first line of input there is an integer n ( 1 \u2264 n \u2264 40 ) . The next line contains n space separated integers, a permutation of numbers from 1 to n . The i - th number denotes the item assigned to agent i in the optimal assignment.",
    "output": "In a single line output one non- negative integer, the number of preference profiles for which the assignment of items given in the input is optimal modulo 10^ 9+ 7 .",
    "note": "Assignment from the first test case is optimal only for the following preference profile: 2, 1 1, 2 If any agent wants his initial item the most and is given another item, he would form a dissatisfied set. Hence the allocation is not optimal for any other preference profile.",
    "topics": [
      "combinatorics",
      "dp",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1466H"
  },
  {
    "title": "Euclid's nightmare",
    "url": "https://codeforces.com/problemset/problem/1466/F",
    "history": "You may know that Euclid was a mathematician. Well, as it turns out, Morpheus knew it too. So when he wanted to play a mean trick on Euclid, he sent him an appropriate nightmare. In his bad dream Euclid has a set S of n m - dimensional vectors over the Z_ 2 field and can perform vector addition on them. In other words he has vectors with m coordinates, each one equal either 0 or 1 . Vector addition is defined as follows: let u+ v = w , then w_ i = ( u_ i + v_ i) 2 . Euclid can sum any subset of S and archive another m - dimensional vector over Z_ 2 . In particular, he can sum together an empty subset; in such a case, the resulting vector has all coordinates equal 0 . Let T be the set of all the vectors that can be written as a sum of some vectors from S . Now Euclid wonders the size of T and whether he can use only a subset S' of S to obtain all the vectors from T . As it is usually the case in such scenarios, he will not wake up until he figures this out. So far, things are looking rather grim for the philosopher. But there is hope, as he noticed that all vectors in S have at most 2 coordinates equal 1 . Help Euclid and calculate | T| , the number of m - dimensional vectors over Z_ 2 that can be written as a sum of some vectors from S . As it can be quite large, calculate it modulo 10^ 9+ 7 . You should also find S' , the smallest such subset of S , that all vectors in T can be written as a sum of vectors from S' . In case there are multiple such sets with a minimal number of elements, output the lexicographically smallest one with respect to the order in which their elements are given in the input. Consider sets A and B such that | A| = | B| . Let a_ 1, a_ 2, . . . a_ | A| and b_ 1, b_ 2, . . . b_ | B| be increasing arrays of indices elements of A and B correspondingly. A is lexicographically smaller than B iff there exists such i that a_ j = b_ j for all j < i and a_ i < b_ i .",
    "input": "In the first line of input, there are two integers n , m ( 1 \u2264 n, m \u2264 5 \u00b7 10^ 5 ) denoting the number of vectors in S and the number of dimensions. Next n lines contain the description of the vectors in S . In each of them there is an integer k ( 1 \u2264 k \u2264 2 ) and then follow k distinct integers x_ 1, . . . x_ k ( 1 \u2264 x_ i \u2264 m ) . This encodes an m - dimensional vector having 1 s on coordinates x_ 1, . . . x_ k and 0 s on the rest of them. Among the n vectors, no two are the same.",
    "output": "In the first line, output two integers: remainder modulo 10^ 9+ 7 of | T| and | S' | . In the second line, output | S' | numbers, indices of the elements of S' in ascending order. The elements of S are numbered from 1 in the order they are given in the input.",
    "note": "In the first example we are given three vectors: 10 01 11 It turns out that we can represent all vectors from our 2 - dimensional space using these vectors: 00 is a sum of the empty subset of above vectors; 01 = 11 + 10 , is a sum of the first and third vector; 10 = 10 , is just the first vector; 11 = 10 + 01 , is a sum of the first and the second vector. Hence, T = { 00, 01, 10, 11} . We can choose any two of the three vectors from S and still be able to obtain all the vectors in T . In such a case, we choose the two vectors which appear first in the input. Since we cannot obtain all vectors in T using only a single vector from S , | S' | = 2 and S' = { 10, 01} ( indices 1 and 2 ) , as set { 1, 2 } is lexicographically the smallest. We can represent all vectors from T , using only vectors from S' , as shown below: 00 is a sum of the empty subset; 01 = 01 is just the second vector; 10 = 10 is just the first vector; 11 = 10 + 01 is a sum of the first and the second vector.",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1466F"
  },
  {
    "title": "13th Labour of Heracles",
    "url": "https://codeforces.com/problemset/problem/1466/D",
    "history": "You' ve probably heard about the twelve labors of Heracles, but do you have any idea about the thirteenth? It is commonly assumed it took him a dozen years to complete the twelve feats, so on average, a year to accomplish every one of them. As time flows faster these days, you have minutes rather than months to solve this task. But will you manage? In this problem, you are given a tree with n weighted vertices. A tree is a connected graph with n - 1 edges. Let us define its k - coloring as an assignment of k colors to the edges so that each edge has exactly one color assigned to it. Note that you don' t have to use all k colors. A subgraph of color x consists of these edges from the original tree, which are assigned color x , and only those vertices that are adjacent to at least one such edge. So there are no vertices of degree 0 in such a subgraph. The value of a connected component is the sum of weights of its vertices. Let us define the value of a subgraph as a maximum of values of its connected components. We will assume that the value of an empty subgraph equals 0 . There is also a value of a k - coloring, which equals the sum of values of subgraphs of all k colors. Given a tree, for each k from 1 to n - 1 calculate the maximal value of a k - coloring.",
    "input": "In the first line of input, there is a single integer t ( 1 \u2264 t \u2264 10^ 5 ) denoting the number of test cases. Then t test cases follow. First line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line consists of n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 9 ) , w_ i equals the weight of i - th vertex. In each of the following n - 1 lines, there are two integers u , v ( 1 \u2264 u, v \u2264 n ) describing an edge between vertices u and v . It is guaranteed that these edges form a tree. The sum of n in all test cases will not exceed 2 \u00b7 10^ 5 .",
    "output": "For every test case, your program should print one line containing n - 1 integers separated with a single space. The i - th number in a line should be the maximal value of a i - coloring of the tree.",
    "note": "The optimal k - colorings from the first test case are the following: In the 1 - coloring all edges are given the same color. The subgraph of color 1 contains all the edges and vertices from the original graph. Hence, its value equals 3 + 5 + 4 + 6 = 18 . In an optimal 2 - coloring edges ( 2, 1) and ( 3, 1) are assigned color 1 . Edge ( 4, 3) is of color 2 . Hence the subgraph of color 1 consists of a single connected component ( vertices 1, 2, 3 ) and its value equals 3 + 5 + 4 = 12 . The subgraph of color 2 contains two vertices and one edge. Its value equals 4 + 6 = 10 . In an optimal 3 - coloring all edges are assigned distinct colors. Hence subgraphs of each color consist of a single edge. They values are as follows: 3 + 4 = 7 , 4 + 6 = 10 , 3 + 5 = 8 .",
    "topics": [
      "data structures",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1466D"
  },
  {
    "title": "Canine poetry",
    "url": "https://codeforces.com/problemset/problem/1466/C",
    "history": "After his wife' s tragic death, Eurydice, Orpheus descended to the realm of death to see her. Reaching its gates was uneasy, but passing through them proved to be even more challenging. Mostly because of Cerberus, the three- headed hound of Hades. Orpheus, a famous poet, and musician plans to calm Cerberus with his poetry and safely walk past him. He created a very peculiar poem for Cerberus. It consists only of lowercase English letters. We call a poem' s substring a palindrome if and only if it reads the same backwards and forwards. A string a is a substring of a string b if a can be obtained from b by deleting several ( possibly zero or all) characters from the beginning and several ( possibly zero or all) characters from the end. Unfortunately, Cerberus dislikes palindromes of length greater than 1 . For example in the poem abaa the hound of Hades wouldn' t like substrings aba and aa. Orpheus can only calm Cerberus if the hound likes his poetry. That' s why he wants to change his poem so that it does not contain any palindrome substrings of length greater than 1 . Orpheus can modify the poem by replacing a letter at any position with any lowercase English letter. He can use this operation arbitrarily many times ( possibly zero) . Since there can be many palindromes in his poem, he may have to make some corrections. But how many, exactly? Given the poem, determine the minimal number of letters that have to be changed so that the poem does not contain any palindromes of length greater than 1 .",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) denoting the number of test cases, then t test cases follow. The first and only line of each test case contains a non- empty string of lowercase English letters, Orpheus' poem. The sum of the length of Orpheus' poems in all test cases will not exceed 10^ 5 .",
    "output": "You should output t lines, i - th line should contain a single integer, answer to the i - th test case.",
    "note": "In the first test case, we can replace the third character with c and obtain a palindrome- less poem bacba. In the second test case, we can replace the third character with d and obtain a palindrome- less poem abdac. In the third test case, the initial poem already doesn' t contain any palindromes, so Orpheus doesn' t need to change anything there.",
    "topics": [
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1466C"
  },
  {
    "title": "Last minute enhancements",
    "url": "https://codeforces.com/problemset/problem/1466/B",
    "history": "Athenaeus has just finished creating his latest musical composition and will present it tomorrow to the people of Athens. Unfortunately, the melody is rather dull and highly likely won' t be met with a warm reception. His song consists of n notes, which we will treat as positive integers. The diversity of a song is the number of different notes it contains. As a patron of music, Euterpe watches over composers and guides them throughout the process of creating new melodies. She decided to help Athenaeus by changing his song to make it more diverse. Being a minor goddess, she cannot arbitrarily change the song. Instead, for each of the n notes in the song, she can either leave it as it is or increase it by 1 . Given the song as a sequence of integers describing the notes, find out the maximal, achievable diversity.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. Then t test cases follow, each one is described in two lines. In the first line of each test case there is a single integer n ( 1 \u2264 n \u2264 10^ 5 ) denoting the length of the song. The next line contains a sequence of n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ 1 \u2264 x_ 2 \u2264. . . \u2264 x_ n \u2264 2 \u00b7 n) , describing the song. The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, you should output a single line containing precisely one integer, the maximal diversity of the song, i. e. the maximal possible number of different elements in the final sequence.",
    "note": "In the first test case, Euterpe can increase the second, fifth and sixth element to obtain the sequence 1, 3, 2, 2, 6, 7 , which has 5 different elements ( increased elements are underlined) . In the second test case, Euterpe can increase the first element to obtain the sequence 5, 4 , which has 2 different elements. In the third test case, Euterpe can increase the second, fifth and sixth element to obtain the sequence 1, 2, 3, 4, 5, 6 , which has 6 different elements.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1466B"
  },
  {
    "title": "Pairs",
    "url": "https://codeforces.com/problemset/problem/1463/D",
    "history": "You have 2n integers 1, 2, . . . , 2n . You have to redistribute these 2n elements into n pairs. After that, you choose x pairs and take minimum elements from them, and from the other n - x pairs, you take maximum elements. Your goal is to obtain the set of numbers { b_ 1, b_ 2, . . . , b_ n} as the result of taking elements from the pairs. What is the number of different x - s ( 0 \u2264 x \u2264 n ) such that it' s possible to obtain the set b if for each x you can choose how to distribute numbers into pairs and from which x pairs choose minimum elements?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ 1 < b_ 2 < . . . < b_ n \u2264 2n ) \u2014 the set you' d like to get. It' s guaranteed that the sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one number \u2014 the number of different x - s such that it' s possible to obtain the set b .",
    "note": "In the first test case, x = 1 is the only option: you have one pair ( 1, 2) and choose the minimum from this pair. In the second test case, there are three possible x - s. If x = 1 , then you can form the following pairs: ( 1, 6) , ( 2, 4) , ( 3, 5) , ( 7, 9) , ( 8, 10) . You can take minimum from ( 1, 6) ( equal to 1 ) and the maximum elements from all other pairs to get set b . If x = 2 , you can form pairs ( 1, 2) , ( 3, 4) , ( 5, 6) , ( 7, 9) , ( 8, 10) and take the minimum elements from ( 1, 2) , ( 5, 6) and the maximum elements from the other pairs. If x = 3 , you can form pairs ( 1, 3) , ( 4, 6) , ( 5, 7) , ( 2, 9) , ( 8, 10) and take the minimum elements from ( 1, 3) , ( 4, 6) , ( 5, 7) . In the third test case, x = 0 is the only option: you can form pairs ( 1, 3) , ( 2, 4) and take the maximum elements from both of them.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "two pointers"
    ],
    "id": "1463D"
  },
  {
    "title": "Find The Array",
    "url": "https://codeforces.com/problemset/problem/1463/B",
    "history": "You are given an array [ a_ 1, a_ 2, . . . , a_ n] such that 1 \u2264 a_ i \u2264 10^ 9 . Let S be the sum of all elements of the array a . Let' s call an array b of n integers beautiful if: 1 \u2264 b_ i \u2264 10^ 9 for each i from 1 to n ; for every pair of adjacent integers from the array ( b_ i, b_ i + 1) , either b_ i divides b_ i + 1 , or b_ i + 1 divides b_ i ( or both) ; 2 \u2211_ i = 1^ n | a_ i - b_ i| \u2264 S . Your task is to find any beautiful array. It can be shown that at least one beautiful array always exists.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains one integer n ( 2 \u2264 n \u2264 50 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "For each test case, print the beautiful array b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) on a separate line. It can be shown that at least one beautiful array exists under these circumstances. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1463B"
  },
  {
    "title": "The Treasure of The Segments",
    "url": "https://codeforces.com/problemset/problem/1462/F",
    "history": "Polycarp found n segments on the street. A segment with the index i is described by two integers l_ i and r_ i \u2014 coordinates of the beginning and end of the segment, respectively. Polycarp realized that he didn' t need all the segments, so he wanted to delete some of them. Polycarp believes that a set of k segments is good if there is a segment [ l_ i, r_ i] ( 1 \u2264 i \u2264 k ) from the set, such that it intersects every segment from the set ( the intersection must be a point or segment) . For example, a set of 3 segments [ [ 1, 4] , [ 2, 3] , [ 3, 6] ] is good, since the segment [ 2, 3] intersects each segment from the set. Set of 4 segments [ [ 1, 2] , [ 2, 3] , [ 3, 5] , [ 4, 5] ] is not good. Polycarp wonders, what is the minimum number of segments he has to delete so that the remaining segments form a good set?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments. This is followed by n lines describing the segments. Each segment is described by two integers l and r ( 1 \u2264 l \u2264 r \u2264 10^ 9 ) \u2014 coordinates of the beginning and end of the segment, respectively. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the minimum number of segments that need to be deleted in order for the set of remaining segments to become good.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1462F"
  },
  {
    "title": "Add to Neighbour and Remove",
    "url": "https://codeforces.com/problemset/problem/1462/D",
    "history": "Polycarp was given an array of a[ 1 . . . n] of n integers. He can perform the following operation with the array a no more than n times: Polycarp selects the index i and adds the value a_ i to one of his choice of its neighbors. More formally, Polycarp adds the value of a_ i to a_ i- 1 or to a_ i+ 1 ( if such a neighbor does not exist, then it is impossible to add to it) . After adding it, Polycarp removes the i - th element from the a array. During this step the length of a is decreased by 1 . The two items above together denote one single operation. For example, if Polycarp has an array a = [ 3, 1, 6, 6, 2] , then it can perform the following sequence of operations with it: Polycarp selects i = 2 and adds the value a_ i to ( i- 1) - th element: a = [ 4, 6, 6, 2] . Polycarp selects i = 1 and adds the value a_ i to ( i+ 1) - th element: a = [ 10, 6, 2] . Polycarp selects i = 3 and adds the value a_ i to ( i- 1) - th element: a = [ 10, 8] . Polycarp selects i = 2 and adds the value a_ i to ( i- 1) - th element: a = [ 18] . Note that Polycarp could stop performing operations at any time. Polycarp wondered how many minimum operations he would need to perform to make all the elements of a equal ( i. e. , he wants all a_ i are equal to each other) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 3000 ) \u2014 the number of test cases in the test. Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3000 ) \u2014 the length of the array. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 array a . It is guaranteed that the sum of n over all test cases does not exceed 3000 .",
    "output": "For each test case, output a single number \u2014 the minimum number of operations that Polycarp needs to perform so that all elements of the a array are the same ( equal) .",
    "note": "In the first test case of the example, the answer can be constructed like this ( just one way among many other ways) : [ 3, 1, 6, 6, 2] [ 3, 1, 12, 2] [ 3, 13, 2] [ 16, 2] [ 18] . All elements of the array [ 18] are the same. In the second test case of the example, the answer can be constructed like this ( just one way among other ways) : [ 1, 2, 2, 1] [ 3, 2, 1] [ 3, 3] . All elements of the array [ 3, 3] are the same. In the third test case of the example, Polycarp doesn' t need to perform any operations since [ 2, 2, 2] contains equal ( same) elements only. In the fourth test case of the example, the answer can be constructed like this ( just one way among other ways) : [ 6, 3, 2, 1] [ 6, 3, 3] [ 6, 6] . All elements of the array [ 6, 6] are the same.",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1462D"
  },
  {
    "title": "Unique Number",
    "url": "https://codeforces.com/problemset/problem/1462/C",
    "history": "You are given a positive number x . Find the smallest positive integer number that has the sum of digits equal to x and all digits are distinct ( unique) .",
    "input": "The first line contains a single positive integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases in the test. Then t test cases follow. Each test case consists of a single integer number x ( 1 \u2264 x \u2264 50 ) .",
    "output": "Output t answers to the test cases: if a positive integer number with the sum of digits equal to x and all digits are different exists, print the smallest such number; otherwise print - 1.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1462C"
  },
  {
    "title": "Mathematical Expression",
    "url": "https://codeforces.com/problemset/problem/1461/F",
    "history": "Barbara was late for her math class so as a punishment the teacher made her solve the task on a sheet of paper. Barbara looked at the sheet of paper and only saw n numbers a_ 1, a_ 2, . . . , a_ n without any mathematical symbols. The teacher explained to Barbara that she has to place the available symbols between the numbers in a way that would make the resulting expression' s value as large as possible. To find out which symbols were available the teacher has given Barbara a string s which contained that information. It' s easy to notice that Barbara has to place n - 1 symbols between numbers in total. The expression must start with a number and all symbols must be allowed ( i. e. included in s ) . Note that multiplication takes precedence over addition or subtraction, addition and subtraction have the same priority and performed from left to right. Help Barbara and create the required expression!",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the amount of numbers on the paper. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 9 ) , where a_ i is the i - th element of a . The third line of the input contains the string s ( 1 \u2264 | s| \u2264 3 ) \u2014 symbols allowed in the expression. It is guaranteed that the string may only consist of symbols \" - \" , \" + \" and \" * \" . It is also guaranteed that all symbols in the string are distinct.",
    "output": "Print n numbers separated by n - 1 symbols \u2014 a mathematical expression with the greatest result. If there are multiple equally valid results \u2014 output any one of them.",
    "note": "The following answers also fit the first example: \" 2+ 2+ 0\" , \" 2+ 2- 0\" , \" 2* 2+ 0\" .",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1461F"
  },
  {
    "title": "Water Level",
    "url": "https://codeforces.com/problemset/problem/1461/E",
    "history": "In recent years John has very successfully settled at his new job at the office. But John doesn' t like to idly sit around while his code is compiling, so he immediately found himself an interesting distraction. The point of his distraction was to maintain a water level in the water cooler used by other zebras. Originally the cooler contained exactly k liters of water. John decided that the amount of water must always be at least l liters of water but no more than r liters. John will stay at the office for exactly t days. He knows that each day exactly x liters of water will be used by his colleagues. At the beginning of each day he can add exactly y liters of water to the cooler, but at any point in time the amount of water in the cooler must be in the range [ l, r] . Now John wants to find out whether he will be able to maintain the water level at the necessary level for t days. Help him answer this question!",
    "input": "The first line of the input contains six integers k , l , r , t , x and y ( 1 \u2264 l \u2264 k \u2264 r \u2264 10^ 18; 1 \u2264 t \u2264 10^ 18; 1 \u2264 x \u2264 10^ 6; 1 \u2264 y \u2264 10^ 18 ) \u2014 initial water level, the required range, the number of days, daily water usage and the exact amount of water that can be added, respectively.",
    "output": "Print \" Yes\" if John can maintain the water level for t days and \" No\" otherwise.",
    "note": "In the first example, John can' t increase the amount of water at the beginning of the first day, since it would exceed the limit r . That is why after the first day the cooler will contain 2 liters of water. The next day John adds 4 liters to the cooler but loses 6 liters, leaving John with 0 liters, which is outside the range [ 1, 10] . In the second example, after the first day John is left with 2 liters of water. At the beginning of the next day he adds 5 liters, then 6 liters get used, leaving John with 1 liter of water which is in range [ 1, 10] . In the third example, after the first day John is left with 7 liters, after the second day \u2014 5 liters, after the fourth \u2014 1 liter. At the beginning of the fifth day John will add 9 liters and lose 2 liters. Meaning, after the fifth day he will have 8 liters left. Then each day the water level will decrease by 2 liters and after the eighth day John will have 2 liters and after the ninth day \u2014 0 liters. 0 is outside range [ 1, 10] , so the answer is \" No\" . In the fourth example, after the first day John is left with 15 liters of water. At the beginning of the second day he adds 7 liters and loses 5 , so after the second day he is left with 17 liters. At the beginning of the third day he adds 7 more liters of water and loses 5 , so after the third day he is left with 19 liters. 19 is in range [ 15, 25] so the answer is \" Yes\" .",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1461E"
  },
  {
    "title": "String Generation",
    "url": "https://codeforces.com/problemset/problem/1461/A",
    "history": "One fall day Joe got bored because he couldn' t find himself something interesting to do. Marty suggested Joe to generate a string of length n to entertain him somehow. It didn' t seem particularly difficult, but Joe' s generated string had to follow these rules: the string may only contain characters ' a' , ' b' , or ' c' ; the maximum length of a substring of this string that is a palindrome does not exceed k . A string a is a substring of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters from the beginning and several ( possibly, zero or all) characters from the end. For example, strings \" a\" , \" bc\" , \" abc\" are substrings of a string \" abc\" , while strings \" ac\" , \" ba\" , \" cba\" are not. A string is a palindrome if it reads the same from the left to the right and from the right to the left. For example, strings \" abccba\" , \" abbba\" , \" aba\" , \" abacaba\" , \" a\" , and \" bacab\" are palindromes, while strings \" abcbba\" , \" abb\" , and \" ab\" are not. Now Joe wants to find any correct string. Help him! It can be proven that the answer always exists under the given constraints.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 ) . The only line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 1 000 ) \u2014 the required string length and the maximum length of a palindrome substring, respectively.",
    "output": "For each test case, print any string that satisfies the conditions from the problem statement. If there are multiple correct answers, you can print any one of them. It can be proven that the answer always exists under the given constraints.",
    "note": "In the first test case of the example, the palindrome substring with the maximum length is \" aa\" . Its length does not exceed 2 , so it fits. In the second test case all palindrome substrings have the length one.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1461A"
  },
  {
    "title": "Flip and Reverse",
    "url": "https://codeforces.com/problemset/problem/1458/D",
    "history": "You are given a string s of 0' s and 1' s. You are allowed to perform the following operation: choose a non- empty contiguous substring of s that contains an equal number of 0' s and 1' s; flip all characters in the substring, that is, replace all 0' s with 1' s, and vice versa; reverse the substring. For example, consider s = 00111011, and the following operation: Choose the first six characters as the substring to act upon: 00111011. Note that the number of 0' s and 1' s are equal, so this is a legal choice. Choosing substrings 0, 110, or the entire string would not be possible. Flip all characters in the substring: 11000111. Reverse the substring: 10001111. Find the lexicographically smallest string that can be obtained from s after zero or more operations.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 5 \u00b7 10^ 5 ) \u2014 the number of test cases. Each of the following T lines contains a single non- empty string \u2014 the input string s for the respective test case. All strings consist of characters 0 and 1, and their total length does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, on a separate line print the lexicographically smallest string that can be obtained from s after zero or more operations.",
    "note": "In the first test case a single operation should be applied to the entire string. In the second test case two operations are needed: 0111001, 0110110. In the third test case the string stays the same after any operation.",
    "topics": [
      "data structures",
      "graphs",
      "greedy"
    ],
    "id": "1458D"
  },
  {
    "title": "XOR-ranges",
    "url": "https://codeforces.com/problemset/problem/1456/E",
    "history": "Given integers c_ 0, c_ 1, . . . , c_ k- 1 we can define the cost of a number 0 \u2264 x < 2^ k as p( x) = \u2211_ i= 0^ k- 1( \u230ax/ 2^ i\u230b 2 ) \u00b7 c_ i . In other words, the cost of number x is the sum of c_ i over the bits of x which are equal to one. Let' s define the cost of array a of length n \u2265 2 with elements from [ 0, 2^ k) as follows: cost( a) = \u2211_ i= 1^ n - 1 p( a_ i\u2295 a_ i+ 1) , where \u2295 denotes bitwise exclusive OR operation. You have to construct an array of length n with minimal cost, given that each element should belong to the given segment: l_ i\u2264 a_ i\u2264 r_ i .",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 50 , 1 \u2264 k \u2264 50 ) \u2014 the size of an array and bit length of the numbers in question. Next n lines contain the restrictions for elements of the array: the i - th line contains two integers l_ i and r_ i ( 0 \u2264 l_ i\u2264 r_ i < 2^ k ) . The last line contains integers c_ 0, c_ 1, . . . , c_ k- 1 ( 0 \u2264 c_ i\u2264 10^ 12 ) .",
    "output": "Output one integer \u2014 the minimal cost of an array satisfying all the restrictions.",
    "note": "In the first example there is only one array satisfying all the restrictions \u2014 [ 3, 5, 6, 1] \u2014 and its cost is equal to cost( [ 3, 5, 6, 1] ) = p( 3 \u2295 5) + p( 5 \u2295 6) + p( 6 \u2295 1) = p( 6) + p( 3) + p( 7) = ( c_ 1 + c_ 2) + ( c_ 0 + c_ 1) + ( c_ 0 + c_ 1 + c_ 2) = ( 2 + 7) + ( 5 + 2) + ( 5 + 2 + 7) = 30 . In the second example the only optimal array is [ 2, 3, 6] .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1456E"
  },
  {
    "title": "String and Operations",
    "url": "https://codeforces.com/problemset/problem/1455/F",
    "history": "You are given a string s consisting of n characters. These characters are among the first k lowercase letters of the Latin alphabet. You have to perform n operations with the string. During the i - th operation, you take the character that initially occupied the i - th position, and perform one of the following actions with it: swap it with the previous character in the string ( if it exists) . This operation is represented as L; swap it with the next character in the string ( if it exists) . This operation is represented as R; cyclically change it to the previous character in the alphabet ( b becomes a, c becomes b, and so on; a becomes the k - th letter of the Latin alphabet) . This operation is represented as D; cyclically change it to the next character in the alphabet ( a becomes b, b becomes c, and so on; the k - th letter of the Latin alphabet becomes a) . This operation is represented as U; do nothing. This operation is represented as 0. For example, suppose the initial string is test, k = 20 , and the sequence of operations is URLD. Then the string is transformed as follows: the first operation is U, so we change the underlined letter in test to the next one in the first 20 Latin letters, which is a. The string is now aest; the second operation is R, so we swap the underlined letter with the next one in the string aest. The string is now aset; the third operation is L, so we swap the underlined letter with the previous one in the string aset ( note that this is now the 2 - nd character of the string, but it was initially the 3 - rd one, so the 3 - rd operation is performed to it) . The resulting string is saet; the fourth operation is D, so we change the underlined letter in saet to the previous one in the first 20 Latin letters, which is s. The string is now saes. The result of performing the sequence of operations is saes. Given the string s and the value of k , find the lexicographically smallest string that can be obtained after applying a sequence of operations to s .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains two integers n and k ( 1 \u2264 n \u2264 500 ; 2 \u2264 k \u2264 26 ) . The second line contains a string s consisting of n characters. Each character is one of the k first letters of the Latin alphabet ( in lower case) .",
    "output": "For each test case, print one line containing the lexicographically smallest string that can be obtained from s using one sequence of operations.",
    "note": "",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1455F"
  },
  {
    "title": "Four Points",
    "url": "https://codeforces.com/problemset/problem/1455/E",
    "history": "You are given four different integer points p_ 1 , p_ 2 , p_ 3 and p_ 4 on XY grid. In one step you can choose one of the points p_ i and move it in one of four directions by one. In other words, if you have chosen point p_ i = ( x, y) you can move it to ( x, y + 1) , ( x, y - 1) , ( x + 1, y) or ( x - 1, y) . Your goal to move points in such a way that they will form a square with sides parallel to OX and OY axes ( a square with side 0 is allowed) . What is the minimum number of steps you need to make such a square?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case consists of four lines. Each line contains two integers x and y ( 0 \u2264 x, y \u2264 10^ 9 ) \u2014 coordinates of one of the points p_ i = ( x, y) . All points are different in one test case.",
    "output": "For each test case, print the single integer \u2014 the minimum number of steps to make a square.",
    "note": "In the first test case, one of the optimal solutions is shown below: Each point was moved two times, so the answer 2 + 2 + 2 + 2 = 8 . In the second test case, one of the optimal solutions is shown below: The answer is 3 + 1 + 0 + 3 = 7 . In the third test case, one of the optimal solutions is shown below: The answer is 1 + 1 + 2 + 1 = 5 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "flows",
      "geometry",
      "greedy",
      "implementation",
      "math",
      "ternary search"
    ],
    "id": "1455E"
  },
  {
    "title": "Sequence and Swaps",
    "url": "https://codeforces.com/problemset/problem/1455/D",
    "history": "You are given a sequence a consisting of n integers a_ 1, a_ 2, . . . , a_ n , and an integer x . Your task is to make the sequence a sorted ( it is considered sorted if the condition a_ 1 \u2264 a_ 2 \u2264 a_ 3 \u2264. . . \u2264 a_ n holds) . To make the sequence sorted, you may perform the following operation any number of times you want ( possibly zero) : choose an integer i such that 1 \u2264 i \u2264 n and a_ i > x , and swap the values of a_ i and x . For example, if a = [ 0, 2, 3, 5, 4] , x = 1 , the following sequence of operations is possible: choose i = 2 ( it is possible since a_ 2 > x ) , then a = [ 0, 1, 3, 5, 4] , x = 2 ; choose i = 3 ( it is possible since a_ 3 > x ) , then a = [ 0, 1, 2, 5, 4] , x = 3 ; choose i = 4 ( it is possible since a_ 4 > x ) , then a = [ 0, 1, 2, 3, 4] , x = 5 . Calculate the minimum number of operations you have to perform so that a becomes sorted, or report that it is impossible.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains two integers n and x ( 1 \u2264 n \u2264 500 , 0 \u2264 x \u2264 500 ) \u2014 the number of elements in the sequence and the initial value of x . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 500 ) . The sum of values of n over all test cases in the input does not exceed 500 .",
    "output": "For each test case, print one integer \u2014 the minimum number of operations you have to perform to make a sorted, or - 1 , if it is impossible.",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1455D"
  },
  {
    "title": "Array Partition",
    "url": "https://codeforces.com/problemset/problem/1454/F",
    "history": "You are given an array a consisting of n integers. Let min( l, r) be the minimum value among a_ l, a_ l + 1, . . . , a_ r and max( l, r) be the maximum value among a_ l, a_ l + 1, . . . , a_ r . Your task is to choose three positive ( greater than 0 ) integers x , y and z such that: x + y + z = n ; max( 1, x) = min( x + 1, x + y) = max( x + y + 1, n) . In other words, you have to split the array a into three consecutive non- empty parts that cover the whole array and the maximum in the first part equals the minimum in the second part and equals the maximum in the third part ( or determine it is impossible to find such a partition) . Among all such triples ( partitions) , you can choose any. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: NO in the only line if there is no such partition of a that satisfies the conditions from the problem statement. Otherwise, print YES in the first line and three integers x , y and z ( x + y + z = n ) in the second line. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1454F"
  },
  {
    "title": "Sequence Transformation",
    "url": "https://codeforces.com/problemset/problem/1454/C",
    "history": "You are given a sequence a , initially consisting of n integers. You want to transform this sequence so that all elements in it are equal ( i. e. it contains several occurrences of the same element) . To achieve this, you choose some integer x that occurs at least once in a , and then perform the following operation any number of times ( possibly zero) : choose some segment [ l, r] of the sequence and remove it. But there is one exception: you are not allowed to choose a segment that contains x . More formally, you choose some contiguous subsequence [ a_ l, a_ l + 1, . . . , a_ r] such that a_ i x if l \u2264 i \u2264 r , and remove it. After removal, the numbering of elements to the right of the removed segment changes: the element that was the ( r+ 1) - th is now l - th, the element that was ( r+ 2) - th is now ( l+ 1) - th, and so on ( i. e. the remaining sequence just collapses) . Note that you can not change x after you chose it. For example, suppose n = 6 , a = [ 1, 3, 2, 4, 1, 2] . Then one of the ways to transform it in two operations is to choose x = 1 , then: choose l = 2 , r = 4 , so the resulting sequence is a = [ 1, 1, 2] ; choose l = 3 , r = 3 , so the resulting sequence is a = [ 1, 1] . Note that choosing x is not an operation. Also, note that you can not remove any occurrence of x . Your task is to find the minimum number of operations required to transform the sequence in a way described above. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum number of operations required to transform the given sequence in a way described in the problem statement. It can be proven that it is always possible to perform a finite sequence of operations so the sequence is transformed in the required way.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1454C"
  },
  {
    "title": "Dog Snacks",
    "url": "https://codeforces.com/problemset/problem/1453/E",
    "history": "Gildong is playing with his dog, Badugi. They' re at a park that has n intersections and n- 1 bidirectional roads, each 1 meter in length and connecting two intersections with each other. The intersections are numbered from 1 to n , and for every a and b ( 1 \u2264 a, b \u2264 n ) , it is possible to get to the b - th intersection from the a - th intersection using some set of roads. Gildong has put one snack at every intersection of the park. Now Gildong will give Badugi a mission to eat all of the snacks. Badugi starts at the 1 - st intersection, and he will move by the following rules: Badugi looks for snacks that are as close to him as possible. Here, the distance is the length of the shortest path from Badugi' s current location to the intersection with the snack. However, Badugi' s sense of smell is limited to k meters, so he can only find snacks that are less than or equal to k meters away from himself. If he cannot find any such snack, he fails the mission. Among all the snacks that Badugi can smell from his current location, he chooses a snack that minimizes the distance he needs to travel from his current intersection. If there are multiple such snacks, Badugi will choose one arbitrarily. He repeats this process until he eats all n snacks. After that, he has to find the 1 - st intersection again which also must be less than or equal to k meters away from the last snack he just ate. If he manages to find it, he completes the mission. Otherwise, he fails the mission. Unfortunately, Gildong doesn' t know the value of k . So, he wants you to find the minimum value of k that makes it possible for Badugi to complete his mission, if Badugi moves optimally.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The first line of each test case contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of intersections of the park. The next n- 1 lines contain two integers u and v ( 1 \u2264 u, v \u2264 n , u v ) each, which means there is a road between intersection u and v . All roads are bidirectional and distinct. It is guaranteed that: For each test case, for every a and b ( 1 \u2264 a, b \u2264 n ) , it is possible to get to the b - th intersection from the a - th intersection. The sum of n in all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the minimum possible value of k such that Badugi can complete the mission.",
    "note": "In the first case, Badugi can complete his mission with k= 2 by moving as follows: Initially, Badugi is at the 1 - st intersection. The closest snack is obviously at the 1 - st intersection, so he just eats it. Next, he looks for the closest snack, which can be either the one at the 2 - nd or the one at the 3 - rd intersection. Assume that he chooses the 2 - nd intersection. He moves to the 2 - nd intersection, which is 1 meter away, and eats the snack. Now the only remaining snack is on the 3 - rd intersection, and he needs to move along 2 paths to get to it. After eating the snack at the 3 - rd intersection, he needs to find the 1 - st intersection again, which is only 1 meter away. As he gets back to it, he completes the mission. In the second case, the only possible sequence of moves he can make is 1 \u2013 2 \u2013 3 \u2013 4 \u2013 1 . Since the distance between the 4 - th intersection and the 1 - st intersection is 3 , k needs to be at least 3 for Badugi to complete his mission. In the third case, Badugi can make his moves as follows: 1 \u2013 5 \u2013 6 \u2013 7 \u2013 8 \u2013 2 \u2013 3 \u2013 4 \u2013 1 . It can be shown that this is the only possible sequence of moves for Badugi to complete his mission with k= 3 .",
    "topics": [
      "binary search",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1453E"
  },
  {
    "title": "Checkpoints",
    "url": "https://codeforces.com/problemset/problem/1453/D",
    "history": "Gildong is developing a game consisting of n stages numbered from 1 to n . The player starts the game from the 1 - st stage and should beat the stages in increasing order of the stage number. The player wins the game after beating the n - th stage. There is at most one checkpoint on each stage, and there is always a checkpoint on the 1 - st stage. At the beginning of the game, only the checkpoint on the 1 - st stage is activated, and all other checkpoints are deactivated. When the player gets to the i - th stage that has a checkpoint, that checkpoint is activated. For each try of a stage, the player can either beat the stage or fail the stage. If they beat the i - th stage, the player is moved to the i+ 1 - st stage. If they fail the i - th stage, the player is moved to the most recent checkpoint they activated, and they have to beat the stages after that checkpoint again. For example, assume that n = 4 and the checkpoints are on the 1 - st and 3 - rd stages. The player starts at the 1 - st stage. If they fail on the 1 - st stage, they need to retry the 1 - st stage because the checkpoint on the 1 - st stage is the most recent checkpoint they activated. If the player beats the 1 - st stage, they' re moved to the 2 - nd stage. If they fail it, they' re sent back to the 1 - st stage again. If they beat both the 1 - st stage and the 2 - nd stage, they get to the 3 - rd stage and the checkpoint on the 3 - rd stage is activated. Now whenever they fail on the 3 - rd stage, or the 4 - th stage after beating the 3 - rd stage, they' re sent back to the 3 - rd stage. If they beat both the 3 - rd stage and the 4 - th stage, they win the game. Gildong is going to build the stages to have equal difficulty. He wants you to find any series of stages and checkpoints using at most 2000 stages, where the expected number of tries over all stages is exactly k , for a player whose probability of beating each stage is exactly 12 .",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 50 ) . Each test case contains exactly one line. The line consists of a single integer k ( 1 \u2264 k \u2264 10^ 18 ) \u2014 the expected number of tries over all stages Gildong wants to set for a player whose probability of beating each stage is exactly 12 .",
    "output": "For each test case, print - 1 if it' s impossible to construct such a series of stages and checkpoints using at most 2000 stages. Otherwise, print two lines. The first line should contain a single integer n ( 1 \u2264 n \u2264 2000 ) \u2013 the number of stages. The second line should contain n integers, where the i - th integer represents whether the i - th stage has a checkpoint. The i - th integer should be 0 if the i - th stage doesn' t have a checkpoint, and 1 if it has a checkpoint. Note that the first integer must be 1 according to the description.",
    "note": "In the first and the second case, we can see that the ' easiest' series of stages is to have 1 stage with a checkpoint. This already requires 2 tries in expectation, so it is impossible to make it to require only 1 try. In the third case, it takes 2 tries in expectation to beat each stage, and the player can always retry that stage without falling back to one of the previous stages if they fail it. Therefore the total expected number of tries is 8 . Note that there exists an answer with fewer stages, but you are not required to minimize the number of stages used.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "probabilities"
    ],
    "id": "1453D"
  },
  {
    "title": "Triangles",
    "url": "https://codeforces.com/problemset/problem/1453/C",
    "history": "Gildong has a square board consisting of n rows and n columns of square cells, each consisting of a single digit ( from 0 to 9 ) . The cell at the j - th column of the i - th row can be represented as ( i, j) , and the length of the side of each cell is 1 . Gildong likes big things, so for each digit d , he wants to find a triangle such that: Each vertex of the triangle is in the center of a cell. The digit of every vertex of the triangle is d . At least one side of the triangle is parallel to one of the sides of the board. You may assume that a side of length 0 is parallel to both sides of the board. The area of the triangle is maximized. Of course, he can' t just be happy with finding these triangles as is. Therefore, for each digit d , he' s going to change the digit of exactly one cell of the board to d , then find such a triangle. He changes it back to its original digit after he is done with each digit. Find the maximum area of the triangle he can make for each digit. Note that he can put multiple vertices of the triangle on the same cell, and the triangle can be a degenerate triangle; i. e. the area of the triangle can be 0 . Also, note that he is allowed to change the digit of a cell from d to d .",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of rows and columns of the board. The next n lines of each test case each contain a string of n digits without spaces. The j - th digit of the i - th line is the digit of the cell at ( i, j) . Each digit is one of the characters from 0 to 9 . It is guaranteed that the sum of n^ 2 in all test cases doesn' t exceed 4 \u00b7 10^ 6 .",
    "output": "For each test case, print one line with 10 integers. The i - th integer is the maximum area of triangle Gildong can make when d = i- 1 , multiplied by 2 .",
    "note": "In the first case, for d= 0 , no matter which cell he chooses to use, the triangle with vertices at ( 1, 1) , ( 1, 3) , and ( 3, 1) is the biggest triangle with area of 2 \u00b7 22 = 2 . Since we should print it multiplied by 2 , the answer for d= 0 is 4 . For d= 1 , Gildong can change the digit of the cell at ( 1, 3) into 1 , making a triangle with vertices on all three 1 ' s that has an area of 2 . For d= 2 , Gildong can change the digit of one of the following six cells into 2 to make a triangle with an area of 12 : ( 1, 1) , ( 1, 2) , ( 1, 3) , ( 3, 1) , ( 3, 2) , and ( 3, 3) . For the remaining digits ( from 3 to 9 ) , the cell Gildong chooses to change will be the only cell that contains that digit. Therefore the triangle will always be a degenerate triangle with an area of 0 . In the third case, for d= 4 , note that the triangle will be bigger than the answer if Gildong changes the digit of the cell at ( 1, 4) and use it along with the cells at ( 2, 1) and ( 4, 3) , but this is invalid because it violates the condition that at least one side of the triangle must be parallel to one of the sides of the board.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1453C"
  },
  {
    "title": "Game On Tree",
    "url": "https://codeforces.com/problemset/problem/1452/G",
    "history": "Alice and Bob are playing a game. They have a tree consisting of n vertices. Initially, Bob has k chips, the i - th chip is located in the vertex a_ i ( all these vertices are unique) . Before the game starts, Alice will place a chip into one of the vertices of the tree. The game consists of turns. Each turn, the following events happen ( sequentially, exactly in the following order) : Alice either moves her chip to an adjacent vertex or doesn' t move it; for each Bob' s chip, he either moves it to an adjacent vertex or doesn' t move it. Note that this choice is done independently for each chip. The game ends when Alice' s chip shares the same vertex with one ( or multiple) of Bob' s chips. Note that Bob' s chips may share the same vertex, even though they are in different vertices at the beginning of the game. Alice wants to maximize the number of turns, Bob wants to minimize it. If the game ends in the middle of some turn ( Alice moves her chip to a vertex that contains one or multiple Bob' s chips) , this turn is counted. For each vertex, calculate the number of turns the game will last if Alice places her chip in that vertex.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. Then n - 1 lines follow, each line contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) that denote the endpoints of an edge. These edges form a tree. The next line contains one integer k ( 1 \u2264 k \u2264 n - 1 ) \u2014 the number of Bob' s chips. The last line contains k integers a_ 1 , a_ 2 , . . . , a_ k ( 1 \u2264 a_ i \u2264 n ; a_ i a_ j if i j ) \u2014 the vertices where the Bob' s chips are initially placed.",
    "output": "Print n integers. The i - th of them should be equal to the number of turns the game will last if Alice initially places her chip in the vertex i . If one of Bob' s chips is already placed in vertex i , then the answer for vertex i is 0 .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1452G"
  },
  {
    "title": "Divide Powers",
    "url": "https://codeforces.com/problemset/problem/1452/F",
    "history": "You are given a multiset of powers of two. More precisely, for each i from 0 to n exclusive you have cnt_ i elements equal to 2^ i . In one operation, you can choose any one element 2^ l > 1 and divide it into two elements 2^ l - 1 . You should perform q queries. Each query has one of two types: \" 1 pos val \" \u2014 assign cnt_ pos : = val ; \" 2 x k \" \u2014 calculate the minimum number of operations you need to make at least k elements with value lower or equal to 2^ x . Note that all queries of the second type don' t change the multiset; that is, you just calculate the minimum number of operations, you don' t perform them.",
    "input": "The first line contains two integers n and q ( 1 \u2264 n \u2264 30 ; 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the size of array cnt and the number of queries. The second line contains n integers cnt_ 0, cnt_ 1, . . . , cnt_ n - 1 ( 0 \u2264 cnt_ i \u2264 10^ 6 ) . Next q lines contain queries: one per line. Each query has one of two types: \" 1 pos val \" ( 0 \u2264 pos < n ; 0 \u2264 val \u2264 10^ 6 ) ; \" 2 x k \" ( 0 \u2264 x < n ; 1 \u2264 k \u2264 10^ 15 ) . It' s guaranteed that there is at least one query of the second type.",
    "output": "For each query of the second type, print the minimum number of operations you need to make at least k elements with a value lower or equal to 2^ x or - 1 if there is no way to do it.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1452F"
  },
  {
    "title": "Two Editorials",
    "url": "https://codeforces.com/problemset/problem/1452/E",
    "history": "Berland regional ICPC contest has just ended. There were m participants numbered from 1 to m , who competed on a problemset of n problems numbered from 1 to n . Now the editorial is about to take place. There are two problem authors, each of them is going to tell the tutorial to exactly k consecutive tasks of the problemset. The authors choose the segment of k consecutive tasks for themselves independently of each other. The segments can coincide, intersect or not intersect at all. The i - th participant is interested in listening to the tutorial of all consecutive tasks from l_ i to r_ i . Each participant always chooses to listen to only the problem author that tells the tutorials to the maximum number of tasks he is interested in. Let this maximum number be a_ i . No participant can listen to both of the authors, even if their segments don' t intersect. The authors want to choose the segments of k consecutive tasks for themselves in such a way that the sum of a_ i over all participants is maximized.",
    "input": "The first line contains three integers n, m and k ( 1 \u2264 n, m \u2264 2000 , 1 \u2264 k \u2264 n ) \u2014 the number of problems, the number of participants and the length of the segment of tasks each of the problem authors plans to tell the tutorial to. The i - th of the next m lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the segment of tasks the i - th participant is interested in listening to the tutorial to.",
    "output": "Print a single integer \u2014 the maximum sum of a_ i over all participants.",
    "note": "In the first example the first author can tell the tutorial to problems from 1 to 3 and the second one \u2014 from 6 to 8 . That way the sequence of a_ i will be [ 3, 2, 3, 3, 3] . Notice that the last participant can' t listen to both author, he only chooses the one that tells the maximum number of problems he' s interested in. In the second example the first one can tell problems 2 to 4 , the second one \u2014 4 to 6 . In the third example the first one can tell problems 1 to 1 , the second one \u2014 2 to 2 . Or 4 to 4 and 3 to 3 . Every pair of different problems will get the same sum of 2 . In the fourth example the first one can tell problems 1 to 5 , the second one \u2014 1 to 5 as well.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1452E"
  },
  {
    "title": "Two Brackets",
    "url": "https://codeforces.com/problemset/problem/1452/C",
    "history": "You are given a string s , consisting of brackets of two types: ' ( ' , ' ) ' , ' [ ' and ' ] ' . A string is called a regular bracket sequence ( RBS) if it' s of one of the following types: empty string; ' ( ' + RBS + ' ) ' ; ' [ ' + RBS + ' ] ' ; RBS + RBS. where plus is a concatenation of two strings. In one move you can choose a non- empty subsequence of the string s ( not necessarily consecutive) that is an RBS, remove it from the string and concatenate the remaining parts without changing the order. What is the maximum number of moves you can perform?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Each of the next t lines contains a non- empty string, consisting only of characters ' ( ' , ' ) ' , ' [ ' and ' ] ' . The total length of the strings over all testcases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase print a single integer \u2014 the maximum number of moves you can perform on a given string s .",
    "note": "In the first example you can just erase the whole string. In the second example you can first erase the brackets on positions 1 and 2 : \" [ ] ( ) \" , then \" ( ) \" is left. After that you can erase it whole. You could erase the whole string from the beginning but you would get one move instead of two. In the third example you can first erase the brackets on positions 1 and 3 : \" ( [ ) ] \" . They form an RBS \" ( ) \" . Then \" [ ] \" is left, so you can erase it whole. In the fourth example there is no subsequence that is an RBS, so you can' t perform a move at all. In the fifth example you can erase the brackets on positions 2 and 4 : \" ) [ ( ] \" and get \" ) ( \" as a result. You can erase nothing from it.",
    "topics": [
      "greedy"
    ],
    "id": "1452C"
  },
  {
    "title": "Toy Blocks",
    "url": "https://codeforces.com/problemset/problem/1452/B",
    "history": "You are asked to watch your nephew who likes to play with toy blocks in a strange way. He has n boxes and the i - th box has a_ i blocks. His game consists of two steps: he chooses an arbitrary box i ; he tries to move all blocks from the i - th box to other boxes. If he can make the same number of blocks in each of n - 1 other boxes then he will be happy, otherwise, will be sad. Note that your nephew can only move the blocks from the chosen box to the other boxes; he cannot move blocks from the other boxes. You don' t want to make your nephew sad, so you decided to put several extra blocks into some boxes in such a way that no matter which box i he chooses he won' t be sad. What is the minimum number of extra blocks you need to put?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains the integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of boxes. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of blocks in each box. It' s guaranteed that the sum of n over test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of blocks you need to put. It can be proved that the answer always exists, i. e. the number of blocks is finite.",
    "note": "In the first test case, you can, for example, put one extra block into the first box and make a = [ 4, 2, 2] . If your nephew chooses the box with 4 blocks, then we will move two blocks to the second box and two blocks to the third box. If he chooses the box with 2 blocks then he will move these two blocks to the other box with 2 blocks. In the second test case, you don' t need to put any extra blocks, since no matter which box your nephew chooses, he can always make other boxes equal. In the third test case, you should put 3 extra blocks. For example, you can put 2 blocks in the first box and 1 block in the third box. You' ll get array a = [ 2, 3, 1] .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1452B"
  },
  {
    "title": "String Equality",
    "url": "https://codeforces.com/problemset/problem/1451/C",
    "history": "Ashish has two strings a and b , each of length n , and an integer k . The strings only contain lowercase English letters. He wants to convert string a into string b by performing some ( possibly zero) operations on a . In one move, he can either choose an index i ( 1 \u2264 i\u2264 n- 1 ) and swap a_ i and a_ i+ 1 , or choose an index i ( 1 \u2264 i \u2264 n- k+ 1 ) and if a_ i, a_ i+ 1, . . . , a_ i+ k- 1 are all equal to some character c ( c = \u0338 ' z' ) , replace each one with the next character ( c+ 1) , that is, ' a' is replaced by ' b' , ' b' is replaced by ' c' and so on. Note that he can perform any number of operations, and the operations can only be performed on string a . Help Ashish determine if it is possible to convert string a into b after performing some ( possibly zero) operations on it.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of each test case is as follows. The first line of each test case contains two integers n ( 2 \u2264 n \u2264 10^ 6 ) and k ( 1 \u2264 k \u2264 n ) . The second line of each test case contains the string a of length n consisting of lowercase English letters. The third line of each test case contains the string b of length n consisting of lowercase English letters. It is guaranteed that the sum of values n among all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print \" Yes\" if Ashish can convert a into b after some moves, else print \" No\" . You may print the letters of the answer in any case ( upper or lower) .",
    "note": "In the first test case it can be shown that it is impossible to convert a into b . In the second test case, \" abba\" \" acca\" . . . \" azza\" . Here \" swap\" denotes an operation of the first type, and \" inc\" denotes an operation of the second type. In the fourth test case, \" aaabba\" \" aaabab\" \" aaaabb\" . . . \" ddaabb\" . . . \" ddddbb\" . . . \" ddddcc\" .",
    "topics": [
      "dp",
      "greedy",
      "hashing",
      "implementation",
      "strings"
    ],
    "id": "1451C"
  },
  {
    "title": "Non-Substring Subsequence",
    "url": "https://codeforces.com/problemset/problem/1451/B",
    "history": "Hr0d1y has q queries on a binary string s of length n . A binary string is a string containing only characters ' 0' and ' 1' . A query is described by a pair of integers l_ i , r_ i ( 1 \u2264 l_ i r_ i \u2264 n) . For each query, he has to determine whether there exists a good subsequence in s that is equal to the substring s[ l_ i. . . r_ i] . A substring s[ i. . . j] of a string s is the string formed by characters s_ i s_ i+ 1. . . s_ j . String a is said to be a subsequence of string b if a can be obtained from b by deleting some characters without changing the order of the remaining characters. A subsequence is said to be good if it is not contiguous and has length \u2265 2 . For example, if s is \" 1100110\" , then the subsequences s_ 1s_ 2s_ 4 ( \" 1100110\" ) and s_ 1s_ 5s_ 7 ( \" 1100110\" ) are good, while s_ 1s_ 2s_ 3 ( \" 1100110\" ) is not good. Can you help Hr0d1y answer each query?",
    "input": "The first line of the input contains a single integer t ( 1\u2264 t \u2264 100 ) \u2014 the number of test cases. The description of each test case is as follows. The first line contains two integers n ( 2 \u2264 n \u2264 100 ) and q ( 1\u2264 q \u2264 100 ) \u2014 the length of the string and the number of queries. The second line contains the string s . The i - th of the next q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i r_ i \u2264 n ) .",
    "output": "For each test case, output q lines. The i - th line of the output of each test case should contain \" YES\" if there exists a good subsequence equal to the substring s[ l_ i. . . r_ i] , and \" NO\" otherwise. You may print each letter in any case ( upper or lower) .",
    "note": "In the first test case, s[ 2. . . 4] = \" 010\" . In this case s_ 1s_ 3s_ 5 ( \" 001000\" ) and s_ 2s_ 3s_ 6 ( \" 001000\" ) are good suitable subsequences, while s_ 2s_ 3s_ 4 ( \" 001000\" ) is not good. s[ 1. . . 3] = \" 001\" . No suitable good subsequence exists. s[ 3. . . 5] = \" 100\" . Here s_ 3s_ 5s_ 6 ( \" 001000\" ) is a suitable good subsequence.",
    "topics": [
      "dp",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1451B"
  },
  {
    "title": "Subtract or Divide",
    "url": "https://codeforces.com/problemset/problem/1451/A",
    "history": "Ridbit starts with an integer n . In one move, he can perform one of the following operations: divide n by one of its proper divisors, or subtract 1 from n if n is greater than 1 . A proper divisor is a divisor of a number, excluding itself. For example, 1 , 2 , 4 , 5 , and 10 are proper divisors of 20 , but 20 itself is not. What is the minimum number of moves Ridbit is required to make to reduce n to 1 ?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The only line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 9 ) .",
    "output": "For each test case, output the minimum number of moves required to reduce n to 1 .",
    "note": "For the test cases in the example, n may be reduced to 1 using the following operations in sequence 1 2 1 3 2 1 4 2 1 6 2 1 9 3 2 1",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1451A"
  },
  {
    "title": "The Struggling Contestant",
    "url": "https://codeforces.com/problemset/problem/1450/F",
    "history": "To help those contestants who struggle a lot in contests, the headquarters of Codeforces are planning to introduce Division 5. In this new division, the tags of all problems will be announced prior to the round to help the contestants. The contest consists of n problems, where the tag of the i - th problem is denoted by an integer a_ i . You want to AK ( solve all problems) . To do that, you must solve the problems in some order. To make the contest funnier, you created extra limitations on yourself. You do not want to solve two problems consecutively with the same tag since it is boring. Also, you are afraid of big jumps in difficulties while solving them, so you want to minimize the number of times that you solve two problems consecutively that are not adjacent in the contest order. Formally, your solve order can be described by a permutation p of length n . The cost of a permutation is defined as the number of indices i ( 1\u2264 i< n ) where | p_ i+ 1- p_ i| > 1 . You have the requirement that a_ p_ i a_ p_ i+ 1 for all 1\u2264 i< n . You want to know the minimum possible cost of permutation that satisfies the requirement. If no permutations meet this requirement, you should report about it.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The first line of the description of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of problems in the contest. The next line contains n integers a_ 1, a_ 2, . . . a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the tags of the problems. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, if there are no permutations that satisfy the required condition, print - 1 . Otherwise, print the minimum possible cost of a permutation that satisfies the required condition.",
    "note": "In the first test case, let p= [ 5, 4, 3, 2, 1, 6] . The cost is 1 because we jump from p_ 5= 1 to p_ 6= 6 , and | 6- 1| > 1 . This permutation is valid because we don' t solve problems with the same tag twice in a row. We cannot find a permutation with a cost smaller than 1 . In the second test case, let p= [ 1, 5, 2, 4, 3] . The cost is 3 because | p_ 2- p_ 1| > 1 , | p_ 3- p_ 2| > 1 , and | p_ 4- p_ 3| > 1 . The permutation is valid because we don' t solve problems with the same tag twice in a row. We cannot find a permutation with a cost smaller than 3 . In the third test case, for any order of solving the problems, we will solve two problems with the same tag consecutively, so the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1450F"
  },
  {
    "title": "Rating Compression",
    "url": "https://codeforces.com/problemset/problem/1450/D",
    "history": "On the competitive programming platform CodeCook, every person has a rating graph described by an array of integers a of length n . You are now updating the infrastructure, so you' ve created a program to compress these graphs. The program works as follows. Given an integer parameter k , the program takes the minimum of each contiguous subarray of length k in a . More formally, for an array a of length n and an integer k , define the k - compression array of a as an array b of length n- k+ 1 , such that b_ j = min_ j\u2264 i\u2264 j+ k- 1a_ i For example, the 3 - compression array of [ 1, 3, 4, 5, 2] is [ min{ 1, 3, 4} , min{ 3, 4, 5} , min{ 4, 5, 2} ] = [ 1, 3, 2] . A permutation of length m is an array consisting of m distinct integers from 1 to m in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( m= 3 but there is 4 in the array) . A k - compression array will make CodeCook users happy if it will be a permutation. Given an array a , determine for all 1\u2264 k\u2264 n if CodeCook users will be happy after a k - compression of this array or not.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 10^ 4 ) \u2014 the number of test cases. The first line of the description of each test case contains a single integer n ( 1\u2264 n\u2264 3\u00b7 10^ 5 ) \u2014 the length of the array. The second line of the description of each test case contains n integers a_ 1, . . . , a_ n ( 1\u2264 a_ i\u2264 n ) \u2014 the elements of the array. It is guaranteed, that the sum of n for all test cases does not exceed 3\u00b7 10^ 5 .",
    "output": "For each test case, print a binary string of length n . The k - th character of the string should be 1 if CodeCook users will be happy after a k - compression of the array a , and 0 otherwise.",
    "note": "In the first test case, a= [ 1, 5, 3, 4, 2] . The 1 - compression of a is [ 1, 5, 3, 4, 2] and it is a permutation. The 2 - compression of a is [ 1, 3, 3, 2] and it is not a permutation, since 3 appears twice. The 3 - compression of a is [ 1, 3, 2] and it is a permutation. The 4 - compression of a is [ 1, 2] and it is a permutation. The 5 - compression of a is [ 1] and it is a permutation.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1450D"
  },
  {
    "title": "Balls of Steel",
    "url": "https://codeforces.com/problemset/problem/1450/B",
    "history": "You have n distinct points ( x_ 1, y_ 1) , . . . , ( x_ n, y_ n) on the plane and a non- negative integer parameter k . Each point is a microscopic steel ball and k is the attract power of a ball when it' s charged. The attract power is the same for all balls. In one operation, you can select a ball i to charge it. Once charged, all balls with Manhattan distance at most k from ball i move to the position of ball i . Many balls may have the same coordinate after an operation. More formally, for all balls j such that | x_ i - x_ j| + | y_ i - y_ j| \u2264 k , we assign x_ j: = x_ i and y_ j: = y_ i . An example of an operation. After charging the ball in the center, two other balls move to its position. On the right side, the red dot in the center is the common position of those balls. Your task is to find the minimum number of operations to move all balls to the same position, or report that this is impossible.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains two integers n , k ( 2 \u2264 n \u2264 100 , 0 \u2264 k \u2264 10^ 6 ) \u2014 the number of balls and the attract power of all balls, respectively. The following n lines describe the balls' coordinates. The i - th of these lines contains two integers x_ i , y_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 5 ) \u2014 the coordinates of the i - th ball. It is guaranteed that all points are distinct.",
    "output": "For each test case print a single integer \u2014 the minimum number of operations to move all balls to the same position, or - 1 if it is impossible.",
    "note": "In the first test case, there are three balls at ( 0, 0) , ( 3, 3) , and ( 1, 1) and the attract power is 2 . It is possible to move two balls together with one operation, but not all three balls together with any number of operations. In the second test case, there are three balls at ( 6, 7) , ( 8, 8) , and ( 6, 9) and the attract power is 3 . If we charge any ball, the other two will move to the same position, so we only require one operation. In the third test case, there are four balls at ( 0, 0) , ( 0, 1) , ( 0, 2) , and ( 0, 3) , and the attract power is 1 . We can show that it is impossible to move all balls to the same position with a sequence of operations.",
    "topics": [
      "brute force",
      "geometry",
      "greedy"
    ],
    "id": "1450B"
  },
  {
    "title": "Numbers Box",
    "url": "https://codeforces.com/problemset/problem/1447/B",
    "history": "You are given a rectangular grid with n rows and m columns. The cell located on the i - th row from the top and the j - th column from the left has a value a_ ij written in it. You can perform the following operation any number of times ( possibly zero) : Choose any two adjacent cells and multiply the values in them by - 1 . Two cells are called adjacent if they share a side. Note that you can use a cell more than once in different operations. You are interested in X , the sum of all the numbers in the grid. What is the maximum X you can achieve with these operations?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains two integers n , m ( 2 \u2264 n , m \u2264 10 ) . The following n lines contain m integers each, the j - th element in the i - th line is a_ ij ( - 100\u2264 a_ ij\u2264 100 ) .",
    "output": "For each testcase, print one integer X , the maximum possible sum of all the values in the grid after applying the operation as many times as you want.",
    "note": "In the first test case, there will always be at least one - 1 , so the answer is 2 . In the second test case, we can use the operation six times to elements adjacent horizontally and get all numbers to be non- negative. So the answer is: 2\u00d7 1 + 3\u00d72 + 3\u00d7 3 + 2\u00d7 4 + 1\u00d7 5 = 30 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1447B"
  },
  {
    "title": "Frequency Problem (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1446/D2",
    "history": "This is the hard version of the problem. The difference between the versions is in the constraints on the array elements. You can make hacks only if all versions of the problem are solved. You are given an array [ a_ 1, a_ 2, . . . , a_ n] . Your goal is to find the length of the longest subarray of this array such that the most frequent value in it is not unique. In other words, you are looking for a subarray such that if the most frequent value occurs f times in this subarray, then at least 2 different values should occur exactly f times. An array c is a subarray of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array.",
    "output": "You should output exactly one integer \u2014 the length of the longest subarray of the array whose most frequent value is not unique. If there is no such subarray, output 0 .",
    "note": "In the first sample, the subarray [ 1, 1, 2, 2, 3, 3] is good, but [ 1, 1, 2, 2, 3, 3, 3] isn' t: in the latter there are 3 occurrences of number 3 , and no other element appears 3 times.",
    "topics": [
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1446D2"
  },
  {
    "title": "Frequency Problem (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1446/D1",
    "history": "This is the easy version of the problem. The difference between the versions is in the constraints on the array elements. You can make hacks only if all versions of the problem are solved. You are given an array [ a_ 1, a_ 2, . . . , a_ n] . Your goal is to find the length of the longest subarray of this array such that the most frequent value in it is not unique. In other words, you are looking for a subarray such that if the most frequent value occurs f times in this subarray, then at least 2 different values should occur exactly f times. An array c is a subarray of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the length of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 min( n, 100) ) \u2014 elements of the array.",
    "output": "You should output exactly one integer \u2014 the length of the longest subarray of the array whose most frequent value is not unique. If there is no such subarray, output 0 .",
    "note": "In the first sample, the subarray [ 1, 1, 2, 2, 3, 3] is good, but [ 1, 1, 2, 2, 3, 3, 3] isn' t: in the latter there are 3 occurrences of number 3 , and no other element appears 3 times.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1446D1"
  },
  {
    "title": "Knapsack",
    "url": "https://codeforces.com/problemset/problem/1446/A",
    "history": "You have a knapsack with the capacity of W . There are also n items, the i - th one has weight w_ i . You want to put some of these items into the knapsack in such a way that their total weight C is at least half of its size, but ( obviously) does not exceed it. Formally, C should satisfy: \u2308W/ 2\u2309\u2264 C \u2264 W . Output the list of items you will put into the knapsack or determine that fulfilling the conditions is impossible. If there are several possible lists of items satisfying the conditions, you can output any. Note that you don' t have to maximize the sum of weights of items in the knapsack.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains integers n and W ( 1 \u2264 n \u2264 200 000 , 1\u2264 W \u2264 10^ 18 ) . The second line of each test case contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) \u2014 weights of the items. The sum of n over all test cases does not exceed 200 000 .",
    "output": "For each test case, if there is no solution, print a single integer - 1 . If there exists a solution consisting of m items, print m in the first line of the output and m integers j_ 1 , j_ 2 , . . . , j_ m ( 1 \u2264 j_ i \u2264 n , all j_ i are distinct) in the second line of the output \u2014 indices of the items you would like to pack into the knapsack. If there are several possible lists of items satisfying the conditions, you can output any. Note that you don' t have to maximize the sum of weights items in the knapsack.",
    "note": "In the first test case, you can take the item of weight 3 and fill the knapsack just right. In the second test case, all the items are larger than the knapsack' s capacity. Therefore, the answer is - 1 . In the third test case, you fill the knapsack exactly in half.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1446A"
  },
  {
    "title": "Elimination",
    "url": "https://codeforces.com/problemset/problem/1445/B",
    "history": "There is a famous olympiad, which has more than a hundred participants. The Olympiad consists of two stages: the elimination stage, and the final stage. At least a hundred participants will advance to the final stage. The elimination stage in turn consists of two contests. A result of the elimination stage is the total score in two contests, but, unfortunately, the jury lost the final standings and has only standings for the first and for the second contest separately. In each contest, the participants are ranked by their point score in non- increasing order. When two participants have a tie ( earned the same score) , they are ranked by their passport number ( in accordance with local regulations, all passport numbers are distinct) . In the first contest, the participant on the 100- th place scored a points. Also, the jury checked all participants from the 1- st to the 100- th place ( inclusive) in the first contest and found out that all of them have at least b points in the second contest. Similarly, for the second contest, the participant on the 100- th place has c points. And the jury checked that all the participants from the 1- st to the 100- th place ( inclusive) have at least d points in the first contest. After two contests, all participants are ranked by their total score in two contests in non- increasing order. When participants have the same total score, tie- breaking with passport numbers is used. The cutoff score to qualify to the final stage is the total score of the participant on the 100- th place. Given integers a , b , c , d , please help the jury determine the smallest possible value of the cutoff score.",
    "input": "You need to process t test cases. The first line contains an integer t ( 1 \u2264 t \u2264 3025 ) \u2014 the number of test cases. Then descriptions of t test cases follow. The first line of each test case contains four integers a , b , c , d ( 0 \u2264 a, b, c, d \u2264 9 ; d \u2264 a ; b \u2264 c ) . One can show that for any test case satisfying the constraints above, there is at least one olympiad scenario possible.",
    "output": "For each test case print a single integer \u2014 the smallest possible cutoff score in some olympiad scenario satisfying the given information.",
    "note": "For the first test case, consider the following olympiad scenario: there are 101 participants in the elimination stage, each having 1 point for the first contest and 2 points for the second contest. Hence the total score of the participant on the 100- th place is 3 . For the second test case, consider the following olympiad scenario: there are 50 participants with points 5 and 9 for the first and second contest respectively; 50 participants with points 4 and 8 for the first and second contest respectively; and 50 participants with points 2 and 9 for the first and second contest respectively. Hence the total point score of the participant on the 100- th place is 12 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1445B"
  },
  {
    "title": "Array Rearrangment",
    "url": "https://codeforces.com/problemset/problem/1445/A",
    "history": "You are given two arrays a and b , each consisting of n positive integers, and an integer x . Please determine if one can rearrange the elements of b so that a_ i + b_ i \u2264 x holds for each i ( 1 \u2264 i \u2264 n ) .",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. t blocks follow, each describing an individual test case. The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 50 ; 1 \u2264 x \u2264 1000 ) \u2014 the length of arrays a and b , and the parameter x , described in the problem statement. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 x ) \u2014 the elements of array a in non- descending order. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ 1 \u2264 b_ 2 \u2264. . . \u2264 b_ n \u2264 x ) \u2014 the elements of array b in non- descending order. Test cases are separated by a blank line.",
    "output": "For each test case print Yes if one can rearrange the corresponding array b so that a_ i + b_ i \u2264 x holds for each i ( 1 \u2264 i \u2264 n ) or No otherwise. Each character can be printed in any case.",
    "note": "In the first test case, one can rearrange b so it' ll look like [ 1, 2, 1] . In this case, 1 + 1 \u2264 4 ; 2 + 2 \u2264 4 ; 3 + 1 \u2264 4 . In the second test case, one can set b to [ 5, 2] , then 1 + 5 \u2264 6 ; 4 + 2 \u2264 6 . In the third test case, no matter how one shuffles array b , a_ 4 + b_ 4 = 4 + b_ 4 > 4 . In the fourth test case, there is only one rearrangement of array b and it doesn' t satisfy the condition since 5 + 5 > 5 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1445A"
  },
  {
    "title": "The Delivery Dilemma",
    "url": "https://codeforces.com/problemset/problem/1443/C",
    "history": "Petya is preparing for his birthday. He decided that there would be n different dishes on the dinner table, numbered from 1 to n . Since Petya doesn' t like to cook, he wants to order these dishes in restaurants. Unfortunately, all dishes are prepared in different restaurants and therefore Petya needs to pick up his orders from n different places. To speed up this process, he wants to order courier delivery at some restaurants. Thus, for each dish, there are two options for Petya how he can get it: the dish will be delivered by a courier from the restaurant i , in this case the courier will arrive in a_ i minutes, Petya goes to the restaurant i on his own and picks up the dish, he will spend b_ i minutes on this. Each restaurant has its own couriers and they start delivering the order at the moment Petya leaves the house. In other words, all couriers work in parallel. Petya must visit all restaurants in which he has not chosen delivery, he does this consistently. For example, if Petya wants to order n = 4 dishes and a = [ 3, 7, 4, 5] , and b = [ 2, 1, 2, 4] , then he can order delivery from the first and the fourth restaurant, and go to the second and third on your own. Then the courier of the first restaurant will bring the order in 3 minutes, the courier of the fourth restaurant will bring the order in 5 minutes, and Petya will pick up the remaining dishes in 1 + 2 = 3 minutes. Thus, in 5 minutes all the dishes will be at Petya' s house. Find the minimum time after which all the dishes can be at Petya' s home.",
    "input": "The first line contains one positive integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. Each test case begins with a line containing one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of dishes that Petya wants to order. The second line of each test case contains n integers a_ 1 . . . a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the time of courier delivery of the dish with the number i . The third line of each test case contains n integers b_ 1 . . . b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the time during which Petya will pick up the dish with the number i . The sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output one integer \u2014 the minimum time after which all dishes can be at Petya' s home.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1443C"
  },
  {
    "title": "Saving the City",
    "url": "https://codeforces.com/problemset/problem/1443/B",
    "history": "Bertown is a city with n buildings in a straight line. The city' s security service discovered that some buildings were mined. A map was compiled, which is a string of length n , where the i - th character is \" 1\" if there is a mine under the building number i and \" 0\" otherwise. Bertown' s best sapper knows how to activate mines so that the buildings above them are not damaged. When a mine under the building numbered x is activated, it explodes and activates two adjacent mines under the buildings numbered x- 1 and x+ 1 ( if there were no mines under the building, then nothing happens) . Thus, it is enough to activate any one mine on a continuous segment of mines to activate all the mines of this segment. For manual activation of one mine, the sapper takes a coins. He can repeat this operation as many times as you want. Also, a sapper can place a mine under a building if it wasn' t there. For such an operation, he takes b coins. He can also repeat this operation as many times as you want. The sapper can carry out operations in any order. You want to blow up all the mines in the city to make it safe. Find the minimum number of coins that the sapper will have to pay so that after his actions there are no mines left in the city.",
    "input": "The first line contains one positive integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. Each test case begins with a line containing two integers a and b ( 1 \u2264 a, b \u2264 1000 ) \u2014 the cost of activating and placing one mine, respectively. The next line contains a map of mines in the city \u2014 a string consisting of zeros and ones. The sum of the string lengths for all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output one integer \u2014 the minimum number of coins that the sapper will have to pay.",
    "note": "In the second test case, if we place a mine under the fourth building and then activate it, then all mines on the field are activated. The cost of such operations is six, b= 1 coin for placing a mine and a= 5 coins for activating.",
    "topics": [
      "dp",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1443B"
  },
  {
    "title": "Black, White and Grey Tree",
    "url": "https://codeforces.com/problemset/problem/1442/E",
    "history": "You are given a tree with each vertex coloured white, black or grey. You can remove elements from the tree by selecting a subset of vertices in a single connected component and removing them and their adjacent edges from the graph. The only restriction is that you are not allowed to select a subset containing a white and a black vertex at once. What is the minimum number of removals necessary to remove all vertices from the tree?",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 000 ) , denoting the number of test cases, followed by a description of the test cases. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 200 000 ) : the number of vertices in the tree. The second line of each test case contains n integers a_ v ( 0 \u2264 a_ v \u2264 2 ) : colours of vertices. Gray vertices have a_ v= 0 , white have a_ v= 1 , black have a_ v= 2 . Each of the next n- 1 lines contains two integers u, v ( 1 \u2264 u, v \u2264 n ) : tree edges. The sum of all n throughout the test is guaranteed to not exceed 200 000 .",
    "output": "For each test case, print one integer: the minimum number of operations to solve the problem.",
    "note": "In the first test case, both vertices are white, so you can remove them at the same time. In the second test case, three operations are enough. First, we need to remove both black vertices ( 2 and 4) , then separately remove vertices 1 and 3. We can' t remove them together because they end up in different connectivity components after vertex 2 is removed. In the third test case, we can remove vertices 1, 2, 3, 4 at the same time, because three of them are white and one is grey. After that, we can remove vertex 5. In the fourth test case, three operations are enough. One of the ways to solve the problem is to remove all black vertices at once, then remove white vertex 7, and finally, remove connected white vertices 1 and 3.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1442E"
  },
  {
    "title": "Sum",
    "url": "https://codeforces.com/problemset/problem/1442/D",
    "history": "You are given n non- decreasing arrays of non- negative numbers. Vasya repeats the following operation k times: Selects a non- empty array. Puts the first element of the selected array in his pocket. Removes the first element from the selected array. Vasya wants to maximize the sum of the elements in his pocket.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 3 000 ) : the number of arrays and operations. Each of the next n lines contain an array. The first integer in each line is t_ i ( 1 \u2264 t_ i \u2264 10^ 6 ) : the size of the i - th array. The following t_ i integers a_ i, j ( 0 \u2264 a_ i, 1\u2264. . . \u2264 a_ i, t_ i\u2264 10^ 8 ) are the elements of the i - th array. It is guaranteed that k \u2264\u2211_ i= 1^ n t_ i \u2264 10^ 6 .",
    "output": "Print one integer: the maximum possible sum of all elements in Vasya' s pocket after k operations.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy"
    ],
    "id": "1442D"
  },
  {
    "title": "Graph Transpositions",
    "url": "https://codeforces.com/problemset/problem/1442/C",
    "history": "You are given a directed graph of n vertices and m edges. Vertices are numbered from 1 to n . There is a token in vertex 1 . The following actions are allowed: Token movement. To move the token from vertex u to vertex v if there is an edge u \u2192 v in the graph. This action takes 1 second. Graph transposition. To transpose all the edges in the graph: replace each edge u \u2192 v by an edge v \u2192 u . This action takes increasingly more time: k - th transposition takes 2^ k- 1 seconds, i. e. the first transposition takes 1 second, the second one takes 2 seconds, the third one takes 4 seconds, and so on. The goal is to move the token from vertex 1 to vertex n in the shortest possible time. Print this time modulo 998 244 353 .",
    "input": "The first line of input contains two integers n, m ( 1 \u2264 n, m \u2264 200 000 ) . The next m lines contain two integers each: u, v ( 1 \u2264 u, v \u2264 n; u v ) , which represent the edges of the graph. It is guaranteed that all ordered pairs ( u, v) are distinct. It is guaranteed that it is possible to move the token from vertex 1 to vertex n using the actions above.",
    "output": "Print one integer: the minimum required time modulo 998 244 353 .",
    "note": "The first example can be solved by transposing the graph and moving the token to vertex 4 , taking 2 seconds. The best way to solve the second example is the following: transpose the graph, move the token to vertex 2 , transpose the graph again, move the token to vertex 3 , transpose the graph once more and move the token to vertex 4 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1442C"
  },
  {
    "title": "Identify the Operations",
    "url": "https://codeforces.com/problemset/problem/1442/B",
    "history": "We start with a permutation a_ 1, a_ 2, . . . , a_ n and with an empty array b . We apply the following operation k times. On the i - th iteration, we select an index t_ i ( 1 \u2264 t_ i \u2264 n- i+ 1 ) , remove a_ t_ i from the array, and append one of the numbers a_ t_ i- 1 or a_ t_ i+ 1 ( if t_ i- 1 or t_ i+ 1 are within the array bounds) to the right end of the array b . Then we move elements a_ t_ i+ 1, . . . , a_ n to the left in order to fill in the empty space. You are given the initial permutation a_ 1, a_ 2, . . . , a_ n and the resulting array b_ 1, b_ 2, . . . , b_ k . All elements of an array b are distinct. Calculate the number of possible sequences of indices t_ 1, t_ 2, . . . , t_ k modulo 998 244 353 .",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 000 ) , denoting the number of test cases, followed by a description of the test cases. The first line of each test case contains two integers n, k ( 1 \u2264 k < n \u2264 200 000 ) : sizes of arrays a and b . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) : elements of a . All elements of a are distinct. The third line of each test case contains k integers b_ 1, b_ 2, . . . , b_ k ( 1 \u2264 b_ i \u2264 n ) : elements of b . All elements of b are distinct. The sum of all n among all test cases is guaranteed to not exceed 200 000 .",
    "output": "For each test case print one integer: the number of possible sequences modulo 998 244 353 .",
    "note": "cancel Let' s denote as a_ 1 a_ 2 . . . a_ ia_ i+ 1. . . a_ n \u2192 a_ 1 a_ 2 . . . a_ i- 1 a_ i+ 1. . . a_ n- 1 an operation over an element with index i : removal of element a_ i from array a and appending element a_ i+ 1 to array b . In the first example test, the following two options can be used to produce the given array b : 1 2 34 5 \u2192 1 23 5 \u2192 1 25\u2192 1 2 ; ( t_ 1, t_ 2, t_ 3) = ( 4, 3, 2) ; 1 2 34 5 \u219212 3 5 \u2192 2 35\u2192 1 5 ; ( t_ 1, t_ 2, t_ 3) = ( 4, 1, 2) . In the second example test, it is impossible to achieve the given array no matter the operations used. That' s because, on the first application, we removed the element next to 4 , namely number 3 , which means that it couldn' t be added to array b on the second step. In the third example test, there are four options to achieve the given array b : 1 4 73 6 2 5 \u2192 1 4 3 62 5 \u219214 3 2 5 \u2192 4 3 25\u2192 4 3 5 ; 1 4 73 6 2 5 \u2192 1 4 3 62 5 \u2192 1 43 2 5 \u2192 1 4 25\u2192 1 4 5 ; 1 4 7 36 2 5 \u2192 1 4 7 32 5 \u219214 7 2 5 \u2192 4 7 25\u2192 4 7 5 ; 1 4 7 36 2 5 \u2192 1 4 7 32 5 \u2192 1 47 2 5 \u2192 1 4 25\u2192 1 4 5 ;",
    "topics": [
      "combinatorics",
      "data structures",
      "dsu",
      "greedy",
      "implementation"
    ],
    "id": "1442B"
  },
  {
    "title": "Extreme Subtraction",
    "url": "https://codeforces.com/problemset/problem/1442/A",
    "history": "You are given an array a of n positive integers. You can use the following operation as many times as you like: select any integer 1 \u2264 k \u2264 n and do one of two things: decrement by one k of the first elements of the array. decrement by one k of the last elements of the array. For example, if n= 5 and a= [ 3, 2, 2, 1, 4] , then you can apply one of the following operations to it ( not all possible options are listed below) : decrement from the first two elements of the array. After this operation a= [ 2, 1, 2, 1, 4] ; decrement from the last three elements of the array. After this operation a= [ 3, 2, 1, 0, 3] ; decrement from the first five elements of the array. After this operation a= [ 2, 1, 1, 0, 3] ; Determine if it is possible to make all the elements of the array equal to zero by applying a certain number of operations.",
    "input": "The first line contains one positive integer t ( 1 \u2264 t \u2264 30000 ) \u2014 the number of test cases. Then t test cases follow. Each test case begins with a line containing one integer n ( 1 \u2264 n \u2264 30000 ) \u2014 the number of elements in the array. The second line of each test case contains n integers a_ 1 . . . a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) . The sum of n over all test cases does not exceed 30000 .",
    "output": "For each test case, output on a separate line: YES, if it is possible to make all elements of the array equal to zero by applying a certain number of operations. NO, otherwise. The letters in the words YES and NO can be outputed in any case.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1442A"
  },
  {
    "title": "Sum of Medians",
    "url": "https://codeforces.com/problemset/problem/1440/B",
    "history": "A median of an array of integers of length n is the number standing on the \u2308n/ 2\u2309 ( rounding up) position in the non- decreasing ordering of its elements. Positions are numbered starting with 1 . For example, a median of the array [ 2, 6, 4, 1, 3, 5] is equal to 3 . There exist some other definitions of the median, but in this problem, we will use the described one. Given two integers n and k and non- decreasing array of nk integers. Divide all numbers into k arrays of size n , such that each number belongs to exactly one array. You want the sum of medians of all k arrays to be the maximum possible. Find this maximum possible sum.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The next 2t lines contain descriptions of test cases. The first line of the description of each test case contains two integers n , k ( 1 \u2264 n, k \u2264 1000 ) . The second line of the description of each test case contains nk integers a_ 1, a_ 2, . . . , a_ nk ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 given array. It is guaranteed that the array is non- decreasing: a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ nk . It is guaranteed that the sum of nk for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print a single integer \u2014 the maximum possible sum of medians of all k arrays.",
    "note": "The examples of possible divisions into arrays for all test cases of the first test: Test case 1 : [ 0, 24] , [ 34, 58] , [ 62, 64] , [ 69, 78] . The medians are 0, 34, 62, 69 . Their sum is 165 . Test case 2 : [ 27, 61] , [ 81, 91] . The medians are 27, 81 . Their sum is 108 . Test case 3 : [ 2, 91, 92, 95] , [ 4, 36, 53, 82] , [ 16, 18, 21, 27] . The medians are 91, 36, 18 . Their sum is 145 . Test case 4 : [ 3, 33, 35] , [ 11, 94, 99] , [ 12, 38, 67] , [ 22, 69, 71] . The medians are 33, 94, 38, 69 . Their sum is 234 . Test case 5 : [ 11, 41] . The median is 11 . The sum of the only median is 11 . Test case 6 : [ 1, 1, 1] , [ 1, 1, 1] , [ 1, 1, 1] . The medians are 1, 1, 1 . Their sum is 3 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1440B"
  },
  {
    "title": "Greedy Shopping",
    "url": "https://codeforces.com/problemset/problem/1439/C",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n of integers. This array is non- increasing. Let' s consider a line with n shops. The shops are numbered with integers from 1 to n from left to right. The cost of a meal in the i - th shop is equal to a_ i . You should process q queries of two types: 1 x y: for each shop 1 \u2264 i \u2264 x set a_ i = max( a_ i, y) . 2 x y: let' s consider a hungry man with y money. He visits the shops from x - th shop to n - th and if he can buy a meal in the current shop he buys one item of it. Find how many meals he will purchase. The man can buy a meal in the shop i if he has at least a_ i money, and after it his money decreases by a_ i .",
    "input": "The first line contains two integers n , q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 10^ 9) \u2014 the costs of the meals. It is guaranteed, that a_ 1 \u2265 a_ 2 \u2265. . . \u2265 a_ n . Each of the next q lines contains three integers t , x , y ( 1 \u2264 t \u2264 2 , 1\u2264 x \u2264 n , 1 \u2264 y \u2264 10^ 9 ) , each describing the next query. It is guaranteed that there exists at least one query of type 2 .",
    "output": "For each query of type 2 output the answer on the new line.",
    "note": "In the first query a hungry man will buy meals in all shops from 3 to 10 . In the second query a hungry man will buy meals in shops 4 , 9 , and 10 . After the third query the array a_ 1, a_ 2, . . . , a_ n of costs won' t change and will be { 10, 10, 10, 6, 6, 5, 5, 5, 3, 1} . In the fourth query a hungry man will buy meals in shops 2 , 3 , 4 , 5 , 9 , and 10 . After the fifth query the array a of costs will be { 10, 10, 10, 7, 6, 5, 5, 5, 3, 1} . In the sixth query a hungry man will buy meals in shops 2 and 4 .",
    "topics": [
      "binary search",
      "data structures",
      "divide and conquer",
      "greedy",
      "implementation"
    ],
    "id": "1439C"
  },
  {
    "title": "Binary Table (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1439/A2",
    "history": "This is the hard version of the problem. The difference between the versions is in the number of possible operations that can be made. You can make hacks if and only if you solved both versions of the problem. You are given a binary table of size n \u00d7 m . This table consists of symbols 0 and 1 . You can make such operation: select 3 different cells that belong to one 2 \u00d7 2 square and change the symbols in these cells ( change 0 to 1 and 1 to 0 ) . Your task is to make all symbols in the table equal to 0 . You are allowed to make at most nm operations. You don' t need to minimize the number of operations. It can be proved, that it is always possible.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. The next lines contain descriptions of test cases. The first line of the description of each test case contains two integers n , m ( 2 \u2264 n, m \u2264 100 ) . Each of the next n lines contains a binary string of length m , describing the symbols of the next row of the table. It is guaranteed, that the sum of nm for all test cases does not exceed 20000 .",
    "output": "For each test case print the integer k ( 0 \u2264 k \u2264 nm ) \u2014 the number of operations. In the each of the next k lines print 6 integers x_ 1, y_ 1, x_ 2, y_ 2, x_ 3, y_ 3 ( 1 \u2264 x_ 1, x_ 2, x_ 3 \u2264 n, 1 \u2264 y_ 1, y_ 2, y_ 3 \u2264 m ) describing the next operation. This operation will be made with three cells ( x_ 1, y_ 1) , ( x_ 2, y_ 2) , ( x_ 3, y_ 3) . These three cells should be different. These three cells should belong to some 2 \u00d7 2 square.",
    "note": "In the first test case, it is possible to make only one operation with cells ( 1, 1) , ( 2, 1) , ( 2, 2) . After that, all symbols will be equal to 0 . In the second test case: operation with cells ( 2, 1) , ( 3, 1) , ( 3, 2) . After it the table will be: 011001000 operation with cells ( 1, 2) , ( 1, 3) , ( 2, 3) . After it the table will be: 000000000 In the fifth test case: operation with cells ( 1, 3) , ( 2, 2) , ( 2, 3) . After it the table will be: 010110 operation with cells ( 1, 2) , ( 2, 1) , ( 2, 2) . After it the table will be: 000000",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1439A2"
  },
  {
    "title": "Valerii Against Everyone",
    "url": "https://codeforces.com/problemset/problem/1438/B",
    "history": "You' re given an array b of length n . Let' s define another array a , also of length n , for which a_ i = 2^ b_ i ( 1 \u2264 i \u2264 n ) . Valerii says that every two non- intersecting subarrays of a have different sums of elements. You want to determine if he is wrong. More formally, you need to determine if there exist four integers l_ 1, r_ 1, l_ 2, r_ 2 that satisfy the following conditions: 1 \u2264 l_ 1 \u2264 r_ 1 l_ 2 \u2264 r_ 2 \u2264 n ; a_ l_ 1+ a_ l_ 1+ 1+ . . . + a_ r_ 1- 1+ a_ r_ 1 = a_ l_ 2+ a_ l_ 2+ 1+ . . . + a_ r_ 2- 1+ a_ r_ 2 . If such four integers exist, you will prove Valerii wrong. Do they exist? An array c is a subarray of an array d if c can be obtained from d by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of every test case contains a single integer n ( 2 \u2264 n \u2264 1000 ) . The second line of every test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 9 ) .",
    "output": "For every test case, if there exist two non- intersecting subarrays in a that have the same sum, output YES on a separate line. Otherwise, output NO on a separate line. Also, note that each letter can be in any case.",
    "note": "In the first case, a = [ 16, 8, 1, 2, 4, 1] . Choosing l_ 1 = 1 , r_ 1 = 1 , l_ 2 = 2 and r_ 2 = 6 works because 16 = ( 8+ 1+ 2+ 4+ 1) . In the second case, you can verify that there is no way to select to such subarrays.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1438B"
  },
  {
    "title": "Minimal Height Tree",
    "url": "https://codeforces.com/problemset/problem/1437/D",
    "history": "Monocarp had a tree which consisted of n vertices and was rooted at vertex 1 . He decided to study BFS ( Breadth- first search) , so he ran BFS on his tree, starting from the root. BFS can be described by the following pseudocode: a = [ ] # the order in which vertices were processedq = Queue( ) q. put( 1) # place the root at the end of the queuewhile not q. empty( ) : k = q. pop( ) # retrieve the first vertex from the queue a. append( k) # append k to the end of the sequence in which vertices were visited for y in g[ k] : # g[ k] is the list of all children of vertex k, sorted in ascending order q. put( y) Monocarp was fascinated by BFS so much that, in the end, he lost his tree. Fortunately, he still has a sequence of vertices, in which order vertices were visited by the BFS algorithm ( the array a from the pseudocode) . Monocarp knows that each vertex was visited exactly once ( since they were put and taken from the queue exactly once) . Also, he knows that all children of each vertex were viewed in ascending order. Monocarp knows that there are many trees ( in the general case) with the same visiting order a , so he doesn' t hope to restore his tree. Monocarp is okay with any tree that has minimum height. The height of a tree is the maximum depth of the tree' s vertices, and the depth of a vertex is the number of edges in the path from the root to it. For example, the depth of vertex 1 is 0 , since it' s the root, and the depth of all root' s children are 1 . Help Monocarp to find any tree with given visiting order a and minimum height.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ; a_ i = \u0338 a_ j ; a_ 1 = 1 ) \u2014 the order in which the vertices were visited by the BFS algorithm. It' s guaranteed that the total sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print the minimum possible height of a tree with the given visiting order a .",
    "note": "In the first test case, there is only one tree with the given visiting order: In the second test case, there is only one tree with the given visiting order as well: In the third test case, an optimal tree with the given visiting order is shown below:",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1437D"
  },
  {
    "title": "Chef Monocarp",
    "url": "https://codeforces.com/problemset/problem/1437/C",
    "history": "Chef Monocarp has just put n dishes into an oven. He knows that the i - th dish has its optimal cooking time equal to t_ i minutes. At any positive integer minute T Monocarp can put no more than one dish out of the oven. If the i - th dish is put out at some minute T , then its unpleasant value is | T - t_ i| \u2014 the absolute difference between T and t_ i . Once the dish is out of the oven, it can' t go back in. Monocarp should put all the dishes out of the oven. What is the minimum total unpleasant value Monocarp can obtain?",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 200 ) \u2014 the number of testcases. Then q testcases follow. The first line of the testcase contains a single integer n ( 1 \u2264 n \u2264 200 ) \u2014 the number of dishes in the oven. The second line of the testcase contains n integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 n ) \u2014 the optimal cooking time for each dish. The sum of n over all q testcases doesn' t exceed 200 .",
    "output": "Print a single integer for each testcase \u2014 the minimum total unpleasant value Monocarp can obtain when he puts out all the dishes out of the oven. Remember that Monocarp can only put the dishes out at positive integer minutes and no more than one dish at any minute.",
    "note": "In the first example Monocarp can put out the dishes at minutes 3, 1, 5, 4, 6, 2 . That way the total unpleasant value will be | 4 - 3| + | 2 - 1| + | 4 - 5| + | 4 - 4| + | 6 - 5| + | 2 - 2| = 4 . In the second example Monocarp can put out the dishes at minutes 4, 5, 6, 7, 8, 9, 10 . In the third example Monocarp can put out the dish at minute 1 . In the fourth example Monocarp can put out the dishes at minutes 5, 1, 2, 4, 3 . In the fifth example Monocarp can put out the dishes at minutes 1, 3, 4, 5 .",
    "topics": [
      "dp",
      "flows",
      "graph matchings",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1437C"
  },
  {
    "title": "Reverse Binary Strings",
    "url": "https://codeforces.com/problemset/problem/1437/B",
    "history": "You are given a string s of even length n . String s is binary, in other words, consists only of 0' s and 1' s. String s has exactly n/ 2 zeroes and n/ 2 ones ( n is even) . In one operation you can reverse any substring of s . A substring of a string is a contiguous subsequence of that string. What is the minimum number of operations you need to make string s alternating? A string is alternating if s_ i = \u0338 s_ i + 1 for all i . There are two types of alternating strings in general: 01010101. . . or 10101010. . .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ; n is even) \u2014 the length of string s . The second line of each test case contains a binary string s of length n ( s_ i \u2208 0, 1) . String s has exactly n/ 2 zeroes and n/ 2 ones. It' s guaranteed that the total sum of n over test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print the minimum number of operations to make s alternating.",
    "note": "In the first test case, string 10 is already alternating. In the second test case, we can, for example, reverse the last two elements of s and get: 0110 \u2192 0101. In the third test case, we can, for example, make the following two operations: 11101000 \u2192 10101100; 10101100 \u2192 10101010.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1437B"
  },
  {
    "title": "Marketing Scheme",
    "url": "https://codeforces.com/problemset/problem/1437/A",
    "history": "You got a job as a marketer in a pet shop, and your current task is to boost sales of cat food. One of the strategies is to sell cans of food in packs with discounts. Suppose you decided to sell packs with a cans in a pack with a discount and some customer wants to buy x cans of cat food. Then he follows a greedy strategy: he buys \u230ax/ a\u230b packs with a discount; then he wants to buy the remaining ( x a) cans one by one. \u230ax/ a\u230b is x divided by a rounded down, x a is the remainer of x divided by a . But customers are greedy in general, so if the customer wants to buy ( x a) cans one by one and it happens that ( x a) \u2265a/ 2 he decides to buy the whole pack of a cans ( instead of buying ( x a) cans) . It makes you, as a marketer, happy since the customer bought more than he wanted initially. You know that each of the customers that come to your shop can buy any number of cans from l to r inclusive. Can you choose such size of pack a that each customer buys more cans than they wanted initially?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first and only line of each test case contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 10^ 9 ) \u2014 the range of the number of cans customers can buy.",
    "output": "For each test case, print YES if you can choose such size of pack a that each customer buys more cans than they wanted initially. Otherwise, print NO. You can print each character in any case.",
    "note": "In the first test case, you can take, for example, a = 5 as the size of the pack. Then if a customer wants to buy 3 cans, he' ll buy 5 instead ( 3 5 = 3 , 5/ 2 = 2. 5 ) . The one who wants 4 cans will also buy 5 cans. In the second test case, there is no way to choose a . In the third test case, you can take, for example, a = 80 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1437A"
  },
  {
    "title": "Bandit in a City",
    "url": "https://codeforces.com/problemset/problem/1436/D",
    "history": "Bandits appeared in the city! One of them is trying to catch as many citizens as he can. The city consists of n squares connected by n- 1 roads in such a way that it is possible to reach any square from any other square. The square number 1 is the main square. After Sunday walk all the roads were changed to one- way roads in such a way that it is possible to reach any square from the main square. At the moment when the bandit appeared on the main square there were a_ i citizens on the i - th square. Now the following process will begin. First, each citizen that is currently on a square with some outgoing one- way roads chooses one of such roads and moves along it to another square. Then the bandit chooses one of the one- way roads outgoing from the square he is located and moves along it. The process is repeated until the bandit is located on a square with no outgoing roads. The bandit catches all the citizens on that square. The bandit wants to catch as many citizens as possible; the citizens want to minimize the number of caught people. The bandit and the citizens know positions of all citizens at any time, the citizens can cooperate. If both sides act optimally, how many citizens will be caught?",
    "input": "The first line contains a single integer n \u2014 the number of squares in the city ( 2 \u2264 n \u2264 2\u00b710^ 5 ) . The second line contains n- 1 integers p_ 2, p_ 3 . . . p_ n meaning that there is a one- way road from the square p_ i to the square i ( 1 \u2264 p_ i < i ) . The third line contains n integers a_ 1, a_ 2, . . . , a_ n \u2014 the number of citizens on each square initially ( 0 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print a single integer \u2014 the number of citizens the bandit will catch if both sides act optimally.",
    "note": "In the first example the citizens on the square 1 can split into two groups 2 + 1 , so that the second and on the third squares will have 3 citizens each. In the second example no matter how citizens act the bandit can catch at least 4 citizens.",
    "topics": [
      "binary search",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1436D"
  },
  {
    "title": "Dominant Piranha",
    "url": "https://codeforces.com/problemset/problem/1433/C",
    "history": "There are n piranhas with sizes a_ 1, a_ 2, . . . , a_ n in the aquarium. Piranhas are numbered from left to right in order they live in the aquarium. Scientists of the Berland State University want to find if there is dominant piranha in the aquarium. The piranha is called dominant if it can eat all the other piranhas in the aquarium ( except itself, of course) . Other piranhas will do nothing while the dominant piranha will eat them. Because the aquarium is pretty narrow and long, the piranha can eat only one of the adjacent piranhas during one move. Piranha can do as many moves as it needs ( or as it can) . More precisely: The piranha i can eat the piranha i- 1 if the piranha i- 1 exists and a_ i - 1 < a_ i . The piranha i can eat the piranha i+ 1 if the piranha i+ 1 exists and a_ i + 1 < a_ i . When the piranha i eats some piranha, its size increases by one ( a_ i becomes a_ i + 1 ) . Your task is to find any dominant piranha in the aquarium or determine if there are no such piranhas. Note that you have to find any ( exactly one) dominant piranha, you don' t have to find all of them. For example, if a = [ 5, 3, 4, 4, 5] , then the third piranha can be dominant. Consider the sequence of its moves: The piranha eats the second piranha and a becomes [ 5, 5, 4, 5] ( the underlined piranha is our candidate) . The piranha eats the third piranha and a becomes [ 5, 6, 5] . The piranha eats the first piranha and a becomes [ 7, 5] . The piranha eats the second piranha and a becomes [ 8] . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of piranhas in the aquarium. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the size of the i - th piranha. It is guaranteed that the sum of n does not exceed 3 \u00b7 10^ 5 ( \u2211 n \u2264 3 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: - 1 if there are no dominant piranhas in the aquarium or index of any dominant piranha otherwise. If there are several answers, you can print any.",
    "note": "The first test case of the example is described in the problem statement. In the second test case of the example, there are no dominant piranhas in the aquarium. In the third test case of the example, the fourth piranha can firstly eat the piranha to the left and the aquarium becomes [ 4, 4, 5, 4] , then it can eat any other piranha in the aquarium.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1433C"
  },
  {
    "title": "Yet Another Bookshelf",
    "url": "https://codeforces.com/problemset/problem/1433/B",
    "history": "There is a bookshelf which can fit n books. The i - th position of bookshelf is a_ i = 1 if there is a book on this position and a_ i = 0 otherwise. It is guaranteed that there is at least one book on the bookshelf. In one move, you can choose some contiguous segment [ l; r] consisting of books ( i. e. for each i from l to r the condition a_ i = 1 holds) and: Shift it to the right by 1 : move the book at index i to i + 1 for all l \u2264 i \u2264 r . This move can be done only if r+ 1 \u2264 n and there is no book at the position r+ 1 . Shift it to the left by 1 : move the book at index i to i- 1 for all l \u2264 i \u2264 r . This move can be done only if l- 1 \u2265 1 and there is no book at the position l- 1 . Your task is to find the minimum number of moves required to collect all the books on the shelf as a contiguous ( consecutive) segment ( i. e. the segment without any gaps) . For example, for a = [ 0, 0, 1, 0, 1] there is a gap between books ( a_ 4 = 0 when a_ 3 = 1 and a_ 5 = 1 ) , for a = [ 1, 1, 0] there are no gaps between books and for a = [ 0, 0, 0] there are also no gaps between books. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of places on a bookshelf. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) , where a_ i is 1 if there is a book at this position and 0 otherwise. It is guaranteed that there is at least one book on the bookshelf.",
    "output": "For each test case, print one integer: the minimum number of moves required to collect all the books on the shelf as a contiguous ( consecutive) segment ( i. e. the segment without gaps) .",
    "note": "In the first test case of the example, you can shift the segment [ 3; 3] to the right and the segment [ 4; 5] to the right. After all moves, the books form the contiguous segment [ 5; 7] . So the answer is 2 . In the second test case of the example, you have nothing to do, all the books on the bookshelf form the contiguous segment already. In the third test case of the example, you can shift the segment [ 5; 5] to the left and then the segment [ 4; 4] to the left again. After all moves, the books form the contiguous segment [ 1; 3] . So the answer is 2 . In the fourth test case of the example, you can shift the segment [ 1; 1] to the right, the segment [ 2; 2] to the right, the segment [ 6; 6] to the left and then the segment [ 5; 5] to the left. After all moves, the books form the contiguous segment [ 3; 4] . So the answer is 4 . In the fifth test case of the example, you can shift the segment [ 1; 2] to the right. After all moves, the books form the contiguous segment [ 2; 5] . So the answer is 1 .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1433B"
  },
  {
    "title": "Rogue-like Game",
    "url": "https://codeforces.com/problemset/problem/1431/H",
    "history": "Marina plays a new rogue- like game. In this game, there are n different character species and m different classes. The game is played in runs; for each run, Marina has to select a species and a class for her character. If she selects the i - th species and the j - th class, she will get c_ i, j points for this run. Initially, some species and classes are unlocked, all others are locked. To unlock the i - th species, Marina has to get at least a_ i points in total for previous runs \u2014 that is, as soon as her total score for played runs is at least a_ i , this species is unlocked. Similarly, to unlock the j - th class, she has to get at least b_ j points in total for previous runs. If a_ i = 0 for some i , then this species is unlocked initially ( the same applies to classes with b_ j = 0 ) . Marina wants to unlock all species and classes in the minimum number of runs. Before playing the game, she can read exactly one guide on some combination of species and class, and reading a guide will increase the score she gets for all runs with that combination by k ( formally, before playing the game, she can increase exactly one value of c_ i, j by k ) . What is the minimum number of runs she has to play to unlock all species and classes if she chooses the combination to read a guide on optimally?",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n, m \u2264 1500 ; 0 \u2264 k \u2264 10^ 9 ) . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 = a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 10^ 12 ) , where a_ i is the number of points required to unlock the i - th species ( or 0 , if it is unlocked initially) . Note that a_ 1 = 0 , and these values are non- descending. The third line contains m integers b_ 1 , b_ 2 , . . . , b_ m ( 0 = b_ 1 \u2264 b_ 2 \u2264. . . \u2264 b_ m \u2264 10^ 12 ) , where b_ i is the number of points required to unlock the i - th class ( or 0 , if it is unlocked initially) . Note that b_ 1 = 0 , and these values are non- descending. Then n lines follow, each of them contains m integers. The j - th integer in the i - th line is c_ i, j ( 1 \u2264 c_ i, j\u2264 10^ 9 ) \u2014 the score Marina gets for a run with the i - th species and the j - th class.",
    "output": "Print one integer \u2014 the minimum number of runs Marina has to play to unlock all species and all classes if she can read exactly one guide before playing the game.",
    "note": "The explanation for the first test: Marina reads a guide on the combination of the 1 - st species and the 2 - nd class. Thus, c_ 1, 2 becomes 7 . Initially, only the 1 - st species and the 1 - st class are unlocked. Marina plays a run with the 1 - st species and the 1 - st class. Her score becomes 2 , and she unlocks the 2 - nd class. Marina plays a run with the 1 - st species and the 2 - nd class. Her score becomes 9 , and she unlocks everything except the 4 - th class. Marina plays a run with the 3 - rd species and the 3 - rd class. Her score becomes 11 , and she unlocks the 4 - th class. She has unlocked everything in 3 runs. Note that this way to unlock everything is not the only one. The explanation for the second test: Marina reads a guide on the combination of the 2 - nd species and the 1 - st class. Thus, c_ 2, 1 becomes 6 . Initially, only the 1 - st species and the 1 - st class are unlocked. Marina plays a run with the 1 - st species and the 1 - st class. Her score becomes 3 , and she unlocks the 2 - nd species and the 2 - nd class. Marina plays a run with the 2 - nd species and the 1 - st class. Her score becomes 9 , and she unlocks the 3 - rd species and the 4 - th species. She has unlocked everything in 2 runs. As in the 1 - st example, this is not the only way to unlock everything in 2 runs.",
    "topics": [
      "*special",
      "brute force",
      "greedy",
      "two pointers"
    ],
    "id": "1431H"
  },
  {
    "title": "Number Deletion Game",
    "url": "https://codeforces.com/problemset/problem/1431/G",
    "history": "Alice and Bob play a game. They have a set that initially consists of n integers. The game is played in k turns. During each turn, the following events happen: firstly, Alice chooses an integer from the set. She can choose any integer except for the maximum one. Let the integer chosen by Alice be a ; secondly, Bob chooses an integer from the set. He can choose any integer that is greater than a . Let the integer chosen by Bob be b ; finally, both a and b are erased from the set, and the value of b - a is added to the score of the game. Initially, the score is 0 . Alice wants to maximize the resulting score, Bob wants to minimize it. Assuming that both Alice and Bob play optimally, calculate the resulting score of the game.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 400 , 1 \u2264 k \u2264\u230an/ 2\u230b ) \u2014 the initial size of the set and the number of turns in the game. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the initial contents of the set. These integers are pairwise distinct.",
    "output": "Print one integer \u2014 the resulting score of the game ( assuming that both Alice and Bob play optimally) .",
    "note": "",
    "topics": [
      "*special",
      "dp",
      "games",
      "greedy"
    ],
    "id": "1431G"
  },
  {
    "title": "Neural Network Problem",
    "url": "https://codeforces.com/problemset/problem/1431/F",
    "history": "You want to train a neural network model for your graduation work. There are n images in the dataset, the i - th image' s size is a_ i bytes. You don' t have any powerful remote servers to train this model so you have to do it on your local machine. But there is a problem: the total size of the dataset is too big for your machine, so you decided to remove some images \u2014 though you don' t want to make the dataset too weak so you can remove no more than k images from it. Note that you can only remove images, you can' t change their order. You want to remove these images optimally so you came up with a metric ( you' re a data scientist after all) that allows to measure the result of removals. Consider the array b_ 1, b_ 2, . . . , b_ m after removing at most k images ( n - k \u2264 m \u2264 n ) . The data from this array will be uploaded to the machine in blocks of x consecutive elements each. More precisely: elements with indices from 1 to x ( b_ 1, b_ 2, . . . , b_ x ) belong to the first block; elements with indices from x + 1 to 2x ( b_ x + 1, b_ x + 2, . . . , b_ 2x ) belong to the second block; elements with indices from 2x + 1 to 3x ( b_ 2x + 1, b_ 2x + 2, . . . , b_ 3x ) belong to the third block; and so on. There will be cnt = \u2308m/ x\u2309 blocks in total. Note that if m is not divisible by x then the last block contains less than x elements, and it' s okay. Let w( i) be the total size of the i - th block \u2014 that is, the sum of sizes of images inside this block. For example, the size of the first block w( 1) is b_ 1 + b_ 2 + . . . + b_ x , the size of the second block w( 2) is b_ x + 1 + b_ x + 2 + . . . + b_ 2x . The value of the metric you came up with is the maximum block size over the blocks of the resulting dataset. In other words, the value of the metric is max_ i= 1^ cnt w( i) . You don' t want to overload your machine too much, so you have to remove at most k images in a way that minimizes the value of the metric described above.",
    "input": "The first line of the input contains three integers n , k and x ( 1 \u2264 n \u2264 10^ 5 ; 1 \u2264 k, x \u2264 n ) \u2014 the number of images in the dataset, the maximum number of images you can remove and the length of each block ( except maybe for the last one) , respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) , where a_ i is the size of the i - th image.",
    "output": "Print one integer: the minimum possible value of the metric described in the problem statement after removing no more than k images from the dataset.",
    "note": "In the first example, you can remove the whole array so the answer is 0 . In the second example, you can remove the first and the last elements of a and obtain b = [ 1, 5, 5] . The size of the first ( and the only) block is 11 . So the answer is 11 . In the third example, you can remove the second element of a and obtain b = [ 3, 1, 3, 1, 2] . The size of the first block is 8 and the size of the second block is 2 . So the answer is 8 . In the fourth example, you can keep the array a unchanged and obtain b = [ 2, 2, 1, 2, 2, 1] . The size of the first block is 5 as well as the size of the second block. So the answer is 5 .",
    "topics": [
      "*special",
      "binary search",
      "greedy"
    ],
    "id": "1431F"
  },
  {
    "title": "Used Markers",
    "url": "https://codeforces.com/problemset/problem/1431/D",
    "history": "Your University has a large auditorium and today you are on duty there. There will be n lectures today \u2014 all from different lecturers, and your current task is to choose in which order ord they will happen. Each lecturer will use one marker to write something on a board during their lecture. Unfortunately, markers become worse the more you use them and lecturers may decline using markers which became too bad in their opinion. Formally, the i - th lecturer has their acceptance value a_ i which means they will not use the marker that was used at least in a_ i lectures already and will ask for a replacement. More specifically: before the first lecture you place a new marker in the auditorium; before the ord_ j - th lecturer ( in the order you' ve chosen) starts, they check the quality of the marker and if it was used in at least a_ ord_ j lectures before, they will ask you for a new marker; if you were asked for a new marker, then you throw away the old one, place a new one in the auditorium, and the lecturer gives a lecture. You know: the better the marker \u2014 the easier for an audience to understand what a lecturer has written, so you want to maximize the number of used markers. Unfortunately, the higher- ups watch closely how many markers were spent, so you can' t just replace markers before each lecture. So, you have to replace markers only when you are asked by a lecturer. The marker is considered used if at least one lecturer used it for their lecture. You can choose the order ord in which lecturers will give lectures. Find such order that leads to the maximum possible number of the used markers.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of independent tests. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 500 ) \u2014 the number of lectures and lecturers. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 acceptance values of each lecturer.",
    "output": "For each test case, print n integers \u2014 the order ord of lecturers which maximizes the number of used markers. The lecturers are numbered from 1 to n in the order of the input. If there are multiple answers, print any of them.",
    "note": "In the first test case, one of the optimal orders is the following: the 4 - th lecturer comes first. The marker is new, so they don' t ask for a replacement; the 1 - st lecturer comes next. The marker is used once and since a_ 1 = 1 the lecturer asks for a replacement; the 3 - rd lecturer comes next. The second marker is used once and since a_ 3 = 1 the lecturer asks for a replacement; the 2 - nd lecturer comes last. The third marker is used once but a_ 2 = 2 so the lecturer uses this marker. In total, 3 markers are used. In the second test case, 2 markers are used. In the third test case, 3 markers are used. In the fourth test case, 3 markers are used.",
    "topics": [
      "*special",
      "greedy"
    ],
    "id": "1431D"
  },
  {
    "title": "Realistic Gameplay",
    "url": "https://codeforces.com/problemset/problem/1430/F",
    "history": "Recently you' ve discovered a new shooter. They say it has realistic game mechanics. Your character has a gun with magazine size equal to k and should exterminate n waves of monsters. The i - th wave consists of a_ i monsters and happens from the l_ i - th moment of time up to the r_ i - th moments of time. All a_ i monsters spawn at moment l_ i and you have to exterminate all of them before the moment r_ i ends ( you can kill monsters right at moment r_ i ) . For every two consecutive waves, the second wave starts not earlier than the first wave ends ( though the second wave can start at the same moment when the first wave ends) \u2014 formally, the condition r_ i \u2264 l_ i + 1 holds. Take a look at the notes for the examples to understand the process better. You are confident in yours and your character' s skills so you can assume that aiming and shooting are instant and you need exactly one bullet to kill one monster. But reloading takes exactly 1 unit of time. One of the realistic mechanics is a mechanic of reloading: when you reload you throw away the old magazine with all remaining bullets in it. That' s why constant reloads may cost you excessive amounts of spent bullets. You' ve taken a liking to this mechanic so now you are wondering: what is the minimum possible number of bullets you need to spend ( both used and thrown) to exterminate all waves. Note that you don' t throw the remaining bullets away after eradicating all monsters, and you start with a full magazine.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2000 ; 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of waves and magazine size. The next n lines contain descriptions of waves. The i - th line contains three integers l_ i , r_ i and a_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ; 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the period of time when the i - th wave happens and the number of monsters in it. It' s guaranteed that waves don' t overlap ( but may touch) and are given in the order they occur, i. e. r_ i \u2264 l_ i + 1 .",
    "output": "If there is no way to clear all waves, print - 1 . Otherwise, print the minimum possible number of bullets you need to spend ( both used and thrown) to clear all waves.",
    "note": "In the first example: At the moment 2 , the first wave occurs and 6 monsters spawn. You kill 3 monsters and start reloading. At the moment 3 , the second wave occurs and 3 more monsters spawn. You kill remaining 3 monsters from the first wave and start reloading. At the moment 4 , you kill remaining 3 monsters from the second wave. In total, you' ll spend 9 bullets. In the second example: At moment 3 , the first wave occurs and 11 monsters spawn. You kill 5 monsters and start reloading. At moment 4 , you kill 5 more monsters and start reloading. At moment 5 , you kill the last monster and start reloading throwing away old magazine with 4 bullets. At moment 10 , the second wave occurs and 15 monsters spawn. You kill 5 monsters and start reloading. At moment 11 , you kill 5 more monsters and start reloading. At moment 12 , you kill last 5 monsters. In total, you' ll spend 30 bullets.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1430F"
  },
  {
    "title": "String Reversal",
    "url": "https://codeforces.com/problemset/problem/1430/E",
    "history": "You are given a string s . You have to reverse it \u2014 that is, the first letter should become equal to the last letter before the reversal, the second letter should become equal to the second- to- last letter before the reversal \u2014 and so on. For example, if your goal is to reverse the string \" abddea\" , you should get the string \" aeddba\" . To accomplish your goal, you can swap the neighboring elements of the string. Your task is to calculate the minimum number of swaps you have to perform to reverse the given string.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 200 000 ) \u2014 the length of s . The second line contains s \u2014 a string consisting of n lowercase Latin letters.",
    "output": "Print one integer \u2014 the minimum number of swaps of neighboring elements you have to perform to reverse the string.",
    "note": "In the first example, you have to swap the third and the fourth elements, so the string becomes \" aazaa\" . Then you have to swap the second and the third elements, so the string becomes \" azaaa\" . So, it is possible to reverse the string in two swaps. Since the string in the second example is a palindrome, you don' t have to do anything to reverse it.",
    "topics": [
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "1430E"
  },
  {
    "title": "String Deletion",
    "url": "https://codeforces.com/problemset/problem/1430/D",
    "history": "You have a string s consisting of n characters. Each character is either 0 or 1. You can perform operations on the string. Each operation consists of two steps: select an integer i from 1 to the length of the string s , then delete the character s_ i ( the string length gets reduced by 1 , the indices of characters to the right of the deleted one also get reduced by 1 ) ; if the string s is not empty, delete the maximum length prefix consisting of the same characters ( the indices of the remaining characters and the string length get reduced by the length of the deleted prefix) . Note that both steps are mandatory in each operation, and their order cannot be changed. For example, if you have a string s = 111010, the first operation can be one of the following: select i = 1 : we' ll get 111010 \u2192 11010 \u2192 010; select i = 2 : we' ll get 111010 \u2192 11010 \u2192 010; select i = 3 : we' ll get 111010 \u2192 11010 \u2192 010; select i = 4 : we' ll get 111010 \u2192 11110 \u2192 0; select i = 5 : we' ll get 111010 \u2192 11100 \u2192 00; select i = 6 : we' ll get 111010 \u2192 11101 \u2192 01. You finish performing operations when the string s becomes empty. What is the maximum number of operations you can perform?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the string s . The second line contains string s of n characters. Each character is either 0 or 1. It' s guaranteed that the total sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum number of operations you can perform.",
    "note": "In the first test case, you can, for example, select i = 2 and get string 010 after the first operation. After that, you can select i = 3 and get string 1. Finally, you can only select i = 1 and get empty string.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1430D"
  },
  {
    "title": "Numbers on Whiteboard",
    "url": "https://codeforces.com/problemset/problem/1430/C",
    "history": "Numbers 1, 2, 3, . . . n ( each integer from 1 to n once) are written on a board. In one operation you can erase any two numbers a and b from the board and write one integer a + b/ 2 rounded up instead. You should perform the given operation n - 1 times and make the resulting number that will be left on the board as small as possible. For example, if n = 4 , the following course of action is optimal: choose a = 4 and b = 2 , so the new number is 3 , and the whiteboard contains [ 1, 3, 3] ; choose a = 3 and b = 3 , so the new number is 3 , and the whiteboard contains [ 1, 3] ; choose a = 1 and b = 3 , so the new number is 2 , and the whiteboard contains [ 2] . It' s easy to see that after n - 1 operations, there will be left only one number. Your goal is to minimize it.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The only line of each test case contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of integers written on the board initially. It' s guaranteed that the total sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, in the first line, print the minimum possible number left on the board after n - 1 operations. Each of the next n - 1 lines should contain two integers \u2014 numbers a and b chosen and erased in each operation.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1430C"
  },
  {
    "title": "Barrels",
    "url": "https://codeforces.com/problemset/problem/1430/B",
    "history": "You have n barrels lined up in a row, numbered from left to right from one. Initially, the i - th barrel contains a_ i liters of water. You can pour water from one barrel to another. In one act of pouring, you can choose two different barrels x and y ( the x - th barrel shouldn' t be empty) and pour any possible amount of water from barrel x to barrel y ( possibly, all water) . You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. Calculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most k times. Some examples: if you have four barrels, each containing 5 liters of water, and k = 1 , you may pour 5 liters from the second barrel into the fourth, so the amounts of water in the barrels are [ 5, 0, 5, 10] , and the difference between the maximum and the minimum is 10 ; if all barrels are empty, you can' t make any operation, so the difference between the maximum and the minimum amount is still 0 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 k < n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of barrels and the number of pourings you can make. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the initial amount of water the i - th barrel has. It' s guaranteed that the total sum of n over test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most k times.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1430B"
  },
  {
    "title": "Lucky Numbers (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1428/G2",
    "history": "This is the hard version of the problem. The only difference is in the constraint on q . You can make hacks only if all versions of the problem are solved. Zookeeper has been teaching his q sheep how to write and how to add. The i - th sheep has to write exactly k non- negative integers with the sum n_ i . Strangely, sheep have superstitions about digits and believe that the digits 3 , 6 , and 9 are lucky. To them, the fortune of a number depends on the decimal representation of the number; the fortune of a number is equal to the sum of fortunes of its digits, and the fortune of a digit depends on its value and position and can be described by the following table. For example, the number 319 has fortune F_ 2 + 3F_ 0 . Each sheep wants to maximize the sum of fortune among all its k written integers. Can you help them?",
    "input": "The first line contains a single integer k ( 1 \u2264 k \u2264 999999 ) : the number of numbers each sheep has to write. The next line contains six integers F_ 0 , F_ 1 , F_ 2 , F_ 3 , F_ 4 , F_ 5 ( 1 \u2264 F_ i \u2264 10^ 9 ) : the fortune assigned to each digit. The next line contains a single integer q ( 1 \u2264 q \u2264 100 000 ) : the number of sheep. Each of the next q lines contains a single integer n_ i ( 1 \u2264 n_ i \u2264 999999 ) : the sum of numbers that i - th sheep has to write.",
    "output": "Print q lines, where the i - th line contains the maximum sum of fortune of all numbers of the i - th sheep.",
    "note": "In the first test case, 57 = 9 + 9 + 39 . The three 9 ' s contribute 1 \u00b7 3 and 3 at the tens position contributes 2 \u00b7 1 . Hence the sum of fortune is 11 . In the second test case, 63 = 35 + 19 + 9 . The sum of fortune is 8 .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1428G2"
  },
  {
    "title": "Lucky Numbers (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1428/G1",
    "history": "This is the easy version of the problem. The only difference is that in this version q= 1 . You can make hacks only if all versions of the problem are solved. Zookeeper has been teaching his q sheep how to write and how to add. The i - th sheep has to write exactly k non- negative integers with the sum n_ i . Strangely, sheep have superstitions about digits and believe that the digits 3 , 6 , and 9 are lucky. To them, the fortune of a number depends on the decimal representation of the number; the fortune of a number is equal to the sum of fortunes of its digits, and the fortune of a digit depends on its value and position and can be described by the following table. For example, the number 319 has fortune F_ 2 + 3F_ 0 . Each sheep wants to maximize the sum of fortune among all its k written integers. Can you help them?",
    "input": "The first line contains a single integer k ( 1 \u2264 k \u2264 999999 ) : the number of numbers each sheep has to write. The next line contains six integers F_ 0 , F_ 1 , F_ 2 , F_ 3 , F_ 4 , F_ 5 ( 1 \u2264 F_ i \u2264 10^ 9 ) : the fortune assigned to each digit. The next line contains a single integer q ( q = 1 ) : the number of sheep. Each of the next q lines contains a single integer n_ i ( 1 \u2264 n_ i \u2264 999999 ) : the sum of numbers that i - th sheep has to write. In this version, there is only one line.",
    "output": "Print q lines, where the i - th line contains the maximum sum of fortune of all numbers of the i - th sheep. In this version, you should print only one line.",
    "note": "In the first test case, 57 = 9 + 9 + 39 . The three 9 ' s contribute 1 \u00b7 3 and 3 at the tens position contributes 2 \u00b7 1 . Hence the sum of fortune is 11 . In the second test case, 63 = 35 + 19 + 9 . The sum of fortune is 8 .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1428G1"
  },
  {
    "title": "Carrots for Rabbits",
    "url": "https://codeforces.com/problemset/problem/1428/E",
    "history": "There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought n carrots with lengths a_ 1, a_ 2, a_ 3, . . . , a_ n . However, rabbits are very fertile and multiply very quickly. Zookeeper now has k rabbits and does not have enough carrots to feed all of them. To solve this problem, Zookeeper decided to cut the carrots into k pieces. For some reason, all resulting carrot lengths must be positive integers. Big carrots are very difficult for rabbits to handle and eat, so the time needed to eat a carrot of size x is x^ 2 . Help Zookeeper split his carrots while minimizing the sum of time taken for rabbits to eat the carrots.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 k \u2264 10^ 5) : the initial number of carrots and the number of rabbits. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6) : lengths of carrots. It is guaranteed that the sum of a_ i is at least k .",
    "output": "Output one integer: the minimum sum of time taken for rabbits to eat carrots.",
    "note": "For the first test, the optimal sizes of carrots are { 1, 1, 1, 2, 2, 2} . The time taken is 1^ 2+ 1^ 2+ 1^ 2+ 2^ 2+ 2^ 2+ 2^ 2= 15 For the second test, the optimal sizes of carrots are { 4, 5, 5, 5} . The time taken is 4^ 2+ 5^ 2+ 5^ 2+ 5^ 2= 91 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1428E"
  },
  {
    "title": "Bouncing Boomerangs",
    "url": "https://codeforces.com/problemset/problem/1428/D",
    "history": "To improve the boomerang throwing skills of the animals, Zookeeper has set up an n \u00d7 n grid with some targets, where each row and each column has at most 2 targets each. The rows are numbered from 1 to n from top to bottom, and the columns are numbered from 1 to n from left to right. For each column, Zookeeper will throw a boomerang from the bottom of the column ( below the grid) upwards. When the boomerang hits any target, it will bounce off, make a 90 degree turn to the right and fly off in a straight line in its new direction. The boomerang can hit multiple targets and does not stop until it leaves the grid. In the above example, n= 6 and the black crosses are the targets. The boomerang in column 1 ( blue arrows) bounces 2 times while the boomerang in column 3 ( red arrows) bounces 3 times. The boomerang in column i hits exactly a_ i targets before flying out of the grid. It is known that a_ i \u2264 3 . However, Zookeeper has lost the original positions of the targets. Thus, he asks you to construct a valid configuration of targets that matches the number of hits for each column, or tell him that no such configuration exists. If multiple valid configurations exist, you may print any of them.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 3) .",
    "output": "If no configuration of targets exist, print - 1 . Otherwise, on the first line print a single integer t ( 0 \u2264 t \u2264 2n) : the number of targets in your configuration. Then print t lines with two spaced integers each per line. Each line should contain two integers r and c ( 1 \u2264 r, c \u2264 n) , where r is the target' s row and c is the target' s column. All targets should be different. Every row and every column in your configuration should have at most two targets each.",
    "note": "For the first test, the answer configuration is the same as in the picture from the statement. For the second test, the boomerang is not supposed to hit anything, so we can place 0 targets. For the third test, the following configuration of targets matches the number of hits, but is not allowed as row 3 has 4 targets. It can be shown for this test case that no valid configuration of targets will result in the given number of target hits.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1428D"
  },
  {
    "title": "ABBB",
    "url": "https://codeforces.com/problemset/problem/1428/C",
    "history": "Zookeeper is playing a game. In this game, Zookeeper must use bombs to bomb a string that consists of letters ' A' and ' B' . He can use bombs to bomb a substring which is either \" AB\" or \" BB\" . When he bombs such a substring, the substring gets deleted from the string and the remaining parts of the string get concatenated. For example, Zookeeper can use two such operations: AABABBA \u2192 AABBA \u2192 AAA. Zookeeper wonders what the shortest string he can make is. Can you help him find the length of the shortest string?",
    "input": "Each test contains multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 20000) \u2014 the number of test cases. The description of the test cases follows. Each of the next t lines contains a single test case each, consisting of a non- empty string s : the string that Zookeeper needs to bomb. It is guaranteed that all symbols of s are either ' A' or ' B' . It is guaranteed that the sum of | s| ( length of s ) among all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer: the length of the shortest string that Zookeeper can make.",
    "note": "For the first test case, you can' t make any moves, so the answer is 3 . For the second test case, one optimal sequence of moves is BABA \u2192 BA. So, the answer is 2 . For the third test case, one optimal sequence of moves is AABBBABBBB \u2192 AABBBABB \u2192 AABBBB \u2192 ABBB \u2192 AB \u2192 ( empty string) . So, the answer is 0 .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "1428C"
  },
  {
    "title": "Boring Card Game",
    "url": "https://codeforces.com/problemset/problem/1427/F",
    "history": "When they are bored, Federico and Giada often play the following card game with a deck containing 6n cards. Each card contains one number between 1 and 6n and each number appears on exactly one card. Initially the deck is sorted, so the first card contains the number 1 , the second card contains the number 2 , . . . , and the last one contains the number 6n . Federico and Giada take turns, alternating; Federico starts. In his turn, the player takes 3 contiguous cards from the deck and puts them in his pocket. The order of the cards remaining in the deck is not changed. They play until the deck is empty ( after exactly 2n turns) . At the end of the game both Federico and Giada have 3n cards in their pockets. You are given the cards in Federico' s pocket at the end of the game. Describe a sequence of moves that produces that set of cards in Federico' s pocket.",
    "input": "The first line of the input contains one integer n ( 1\u2264 n \u2264 200 ) . The second line of the input contains 3n numbers x_ 1, x_ 2, . . . , x_ 3n ( 1 \u2264 x_ 1 < x_ 2 < . . . < x_ 3n\u2264 6n ) \u2013 the cards in Federico' s pocket at the end of the game. It is guaranteed that for each test there is at least one sequence of moves that produces such set of cards in Federico' s pocket.",
    "output": "Print 2n lines, each containing 3 integers. The i - th line should contain, in increasing order, the integers a_ i< b_ i< c_ i written on the three cards taken by the player during the i - th turn ( so taken by Federico if i is odd and by Giada if i is even) . If there is more than one possible sequence of moves, you can print any.",
    "note": "Explanation of the first testcase: Initially the deck has 12 = 2\u00b7 6 sorted cards, so the deck is [ 1 2 3 4 5 6 7 8 9 10 11 12] . During turn 1 , Federico takes the three cards [ 9 10 11] . After his move, the deck is [ 1 2 3 4 5 6 7 8 12] . During turn 2 , Giada takes the three cards [ 6 7 8] . After her move, the deck is [ 1 2 3 4 5 12] . During turn 3 , Federico takes the three cards [ 2 3 4] . After his move, the deck is [ 1 5 12] . During turn 4 , Giada takes the three cards [ 1 5 12] . After her move, the deck is empty. At the end of the game, the cards in Federico' s pocket are [ 2 3 4 9 10 11] and the cards in Giada' s pocket are [ 1 5 6 7 8 12] .",
    "topics": [
      "data structures",
      "greedy",
      "trees"
    ],
    "id": "1427F"
  },
  {
    "title": "Chess Cheater",
    "url": "https://codeforces.com/problemset/problem/1427/B",
    "history": "You like playing chess tournaments online. In your last tournament you played n games. For the sake of this problem, each chess game is either won or lost ( no draws) . When you lose a game you get 0 points. When you win you get 1 or 2 points: if you have won also the previous game you get 2 points, otherwise you get 1 point. If you win the very first game of the tournament you get 1 point ( since there is not a \" previous game\" ) . The outcomes of the n games are represented by a string s of length n : the i - th character of s is W if you have won the i - th game, while it is L if you have lost the i - th game. After the tournament, you notice a bug on the website that allows you to change the outcome of at most k of your games ( meaning that at most k times you can change some symbol L to W, or W to L) . Since your only goal is to improve your chess rating, you decide to cheat and use the bug. Compute the maximum score you can get by cheating in the optimal way.",
    "input": "Each test contains multiple test cases. The first line contains an integer t ( 1\u2264 t \u2264 20, 000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each testcase contains two integers n, k ( 1\u2264 n\u2264 100, 000 , 0\u2264 k\u2264 n ) \u2013 the number of games played and the number of outcomes that you can change. The second line contains a string s of length n containing only the characters W and L. If you have won the i - th game then s_ i= W, if you have lost the i - th game then s_ i= L. It is guaranteed that the sum of n over all testcases does not exceed 200, 000 .",
    "output": "For each testcase, print a single integer \u2013 the maximum score you can get by cheating in the optimal way.",
    "note": "Explanation of the first testcase. Before changing any outcome, the score is 2 . Indeed, you won the first game, so you got 1 point, and you won also the third, so you got another 1 point ( and not 2 because you lost the second game) . An optimal way to cheat is to change the outcomes of the second and fourth game. Doing so, you end up winning the first four games ( the string of the outcomes becomes WWWWL) . Hence, the new score is 7= 1+ 2+ 2+ 2 : 1 point for the first game and 2 points for the second, third and fourth game. Explanation of the second testcase. Before changing any outcome, the score is 3 . Indeed, you won the fourth game, so you got 1 point, and you won also the fifth game, so you got 2 more points ( since you won also the previous game) . An optimal way to cheat is to change the outcomes of the first, second, third and sixth game. Doing so, you end up winning all games ( the string of the outcomes becomes WWWWWW) . Hence, the new score is 11 = 1+ 2+ 2+ 2+ 2+ 2 : 1 point for the first game and 2 points for all the other games.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1427B"
  },
  {
    "title": "Rock, Paper, Scissors",
    "url": "https://codeforces.com/problemset/problem/1426/E",
    "history": "Alice and Bob have decided to play the game \" Rock, Paper, Scissors\" . The game consists of several rounds, each round is independent of each other. In each round, both players show one of the following things at the same time: rock, paper or scissors. If both players showed the same things then the round outcome is a draw. Otherwise, the following rules applied: if one player showed rock and the other one showed scissors, then the player who showed rock is considered the winner and the other one is considered the loser; if one player showed scissors and the other one showed paper, then the player who showed scissors is considered the winner and the other one is considered the loser; if one player showed paper and the other one showed rock, then the player who showed paper is considered the winner and the other one is considered the loser. Alice and Bob decided to play exactly n rounds of the game described above. Alice decided to show rock a_ 1 times, show scissors a_ 2 times and show paper a_ 3 times. Bob decided to show rock b_ 1 times, show scissors b_ 2 times and show paper b_ 3 times. Though, both Alice and Bob did not choose the sequence in which they show things. It is guaranteed that a_ 1 + a_ 2 + a_ 3 = n and b_ 1 + b_ 2 + b_ 3 = n . Your task is to find two numbers: the minimum number of round Alice can win; the maximum number of rounds Alice can win.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 10^ 9 ) \u2014 the number of rounds. The second line of the input contains three integers a_ 1, a_ 2, a_ 3 ( 0 \u2264 a_ i \u2264 n ) \u2014 the number of times Alice will show rock, scissors and paper, respectively. It is guaranteed that a_ 1 + a_ 2 + a_ 3 = n . The third line of the input contains three integers b_ 1, b_ 2, b_ 3 ( 0 \u2264 b_ j \u2264 n ) \u2014 the number of times Bob will show rock, scissors and paper, respectively. It is guaranteed that b_ 1 + b_ 2 + b_ 3 = n .",
    "output": "Print two integers: the minimum and the maximum number of rounds Alice can win.",
    "note": "In the first example, Alice will not win any rounds if she shows scissors and then paper and Bob shows rock and then scissors. In the best outcome, Alice will win one round if she shows paper and then scissors, and Bob shows rock and then scissors. In the second example, Alice will not win any rounds if Bob shows the same things as Alice each round. In the third example, Alice always shows paper and Bob always shows rock so Alice will win all three rounds anyway.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "flows",
      "greedy",
      "math"
    ],
    "id": "1426E"
  },
  {
    "title": "Non-zero Segments",
    "url": "https://codeforces.com/problemset/problem/1426/D",
    "history": "Kolya got an integer array a_ 1, a_ 2, . . . , a_ n . The array can contain both positive and negative integers, but Kolya doesn' t like 0 , so the array doesn' t contain any zeros. Kolya doesn' t like that the sum of some subsegments of his array can be 0 . The subsegment is some consecutive segment of elements of the array. You have to help Kolya and change his array in such a way that it doesn' t contain any subsegments with the sum 0 . To reach this goal, you can insert any integers between any pair of adjacent elements of the array ( integers can be really any: positive, negative, 0 , any by absolute value, even such a huge that they can' t be represented in most standard programming languages) . Your task is to find the minimum number of integers you have to insert into Kolya' s array in such a way that the resulting array doesn' t contain any subsegments with the sum 0 .",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 200 000 ) \u2014 the number of elements in Kolya' s array. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i \u2264 10^ 9, a_ i = \u0338 0 ) \u2014 the description of Kolya' s array.",
    "output": "Print the minimum number of integers you have to insert into Kolya' s array in such a way that the resulting array doesn' t contain any subsegments with the sum 0 .",
    "note": "Consider the first example. There is only one subsegment with the sum 0 . It starts in the second element and ends in the fourth element. It' s enough to insert one element so the array doesn' t contain any subsegments with the sum equal to zero. For example, it is possible to insert the integer 1 between second and third elements of the array. There are no subsegments having sum 0 in the second example so you don' t need to do anything.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1426D"
  },
  {
    "title": "Excitation of Atoms",
    "url": "https://codeforces.com/problemset/problem/1425/E",
    "history": "Mr. Chanek is currently participating in a science fair that is popular in town. He finds an exciting puzzle in the fair and wants to solve it. There are N atoms numbered from 1 to N . These atoms are especially quirky. Initially, each atom is in normal state. Each atom can be in an excited. Exciting atom i requires D_ i energy. When atom i is excited, it will give A_ i energy. You can excite any number of atoms ( including zero) . These atoms also form a peculiar one- way bond. For each i , ( 1 \u2264 i < N) , if atom i is excited, atom E_ i will also be excited at no cost. Initially, E_ i = i+ 1 . Note that atom N cannot form a bond to any atom. Mr. Chanek must change exactly K bonds. Exactly K times, Mr. Chanek chooses an atom i , ( 1 \u2264 i < N) and changes E_ i to a different value other than i and the current E_ i . Note that an atom' s bond can remain unchanged or changed more than once. Help Mr. Chanek determine the maximum energy that he can achieve! note: You must first change exactly K bonds before you can start exciting atoms.",
    "input": "The first line contains two integers N K ( 4 \u2264 N \u2264 10^ 5, 0 \u2264 K < N) , the number of atoms, and the number of bonds that must be changed. The second line contains N integers A_ i ( 1 \u2264 A_ i \u2264 10^ 6) , which denotes the energy given by atom i when on excited state. The third line contains N integers D_ i ( 1 \u2264 D_ i \u2264 10^ 6) , which denotes the energy needed to excite atom i .",
    "output": "A line with an integer that denotes the maximum number of energy that Mr. Chanek can get.",
    "note": "An optimal solution to change E_ 5 to 1 and then excite atom 5 with energy 1. It will cause atoms 1, 2, 3, 4, 5 be excited. The total energy gained by Mr. Chanek is ( 5 + 6 + 7 + 8 + 10) - 1 = 35. Another possible way is to change E_ 3 to 1 and then exciting atom 3 ( which will excite atom 1, 2, 3) and exciting atom 4 ( which will excite atom 4, 5, 6) . The total energy gained by Mr. Chanek is ( 5 + 6 + 7 + 8 + 10 + 2) - ( 6 + 7) = 25 which is not optimal.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1425E"
  },
  {
    "title": "Arena of Greed",
    "url": "https://codeforces.com/problemset/problem/1425/A",
    "history": "Lately, Mr. Chanek frequently plays the game Arena of Greed. As the name implies, the game' s goal is to find the greediest of them all, who will then be crowned king of Compfestnesia. The game is played by two people taking turns, where Mr. Chanek takes the first turn. Initially, there is a treasure chest containing N gold coins. The game ends if there are no more gold coins in the chest. In each turn, the players can make one of the following moves: Take one gold coin from the chest. Take half of the gold coins on the chest. This move is only available if the number of coins in the chest is even. Both players will try to maximize the number of coins they have. Mr. Chanek asks your help to find the maximum number of coins he can get at the end of the game if both he and the opponent plays optimally.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 10^ 5) denotes the number of test cases. The next T lines each contain a single integer N ( 1 \u2264 N \u2264 10^ 18) .",
    "output": "T lines, each line is the answer requested by Mr. Chanek.",
    "note": "For the first case, the game is as follows: Mr. Chanek takes one coin. The opponent takes two coins. Mr. Chanek takes one coin. The opponent takes one coin. For the second case, the game is as follows: Mr. Chanek takes three coins. The opponent takes one coin. Mr. Chanek takes one coin. The opponent takes one coin.",
    "topics": [
      "games",
      "greedy"
    ],
    "id": "1425A"
  },
  {
    "title": "Minlexes",
    "url": "https://codeforces.com/problemset/problem/1422/E",
    "history": "Some time ago Lesha found an entertaining string s consisting of lowercase English letters. Lesha immediately developed an unique algorithm for this string and shared it with you. The algorithm is as follows. Lesha chooses an arbitrary ( possibly zero) number of pairs on positions ( i, i + 1) in such a way that the following conditions are satisfied: for each pair ( i, i + 1) the inequality 0 \u2264 i < | s| - 1 holds; for each pair ( i, i + 1) the equality s_ i = s_ i + 1 holds; there is no index that is contained in more than one pair. After that Lesha removes all characters on indexes contained in these pairs and the algorithm is over. Lesha is interested in the lexicographically smallest strings he can obtain by applying the algorithm to the suffixes of the given string.",
    "input": "The only line contains the string s ( 1 \u2264 | s| \u2264 10^ 5 ) \u2014 the initial string consisting of lowercase English letters only.",
    "output": "In | s| lines print the lengths of the answers and the answers themselves, starting with the answer for the longest suffix. The output can be large, so, when some answer is longer than 10 characters, instead print the first 5 characters, then \" . . . \" , then the last 2 characters of the answer.",
    "note": "Consider the first example. The longest suffix is the whole string \" abcdd\" . Choosing one pair ( 4, 5) , Lesha obtains \" abc\" . The next longest suffix is \" bcdd\" . Choosing one pair ( 3, 4) , we obtain \" bc\" . The next longest suffix is \" cdd\" . Choosing one pair ( 2, 3) , we obtain \" c\" . The next longest suffix is \" dd\" . Choosing one pair ( 1, 2) , we obtain \" \" ( an empty string) . The last suffix is the string \" d\" . No pair can be chosen, so the answer is \" d\" . In the second example, for the longest suffix \" abbcdddeaaffdfouurtytwoo\" choose three pairs ( 11, 12) , ( 16, 17) , ( 23, 24) and we obtain \" abbcdddeaadfortytw\"",
    "topics": [
      "dp",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1422E"
  },
  {
    "title": "Nice Matrix",
    "url": "https://codeforces.com/problemset/problem/1422/B",
    "history": "A matrix of size n \u00d7 m is called nice, if all rows and columns of the matrix are palindromes. A sequence of integers ( a_ 1, a_ 2, . . . , a_ k) is a palindrome, if for any integer i ( 1 \u2264 i \u2264 k ) the equality a_ i = a_ k - i + 1 holds. Sasha owns a matrix a of size n \u00d7 m . In one operation he can increase or decrease any number in the matrix by one. Sasha wants to make the matrix nice. He is interested what is the minimum number of operations he needs. Help him!",
    "input": "The first line contains a single integer t \u2014 the number of test cases ( 1 \u2264 t \u2264 10 ) . The t tests follow. The first line of each test contains two integers n and m ( 1 \u2264 n, m \u2264 100 ) \u2014 the size of the matrix. Each of the next n lines contains m integers a_ i, j ( 0 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the elements of the matrix.",
    "output": "For each test output the smallest number of operations required to make the matrix nice.",
    "note": "In the first test case we can, for example, obtain the following nice matrix in 8 operations: 2 24 44 42 2In the second test case we can, for example, obtain the following nice matrix in 42 operations: 5 6 6 56 6 6 65 6 6 5",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1422B"
  },
  {
    "title": "Hexagons",
    "url": "https://codeforces.com/problemset/problem/1421/D",
    "history": "Lindsey Buckingham told Stevie Nicks \" Go your own way\" . Nicks is now sad and wants to go away as quickly as possible, but she lives in a 2D hexagonal world. Consider a hexagonal tiling of the plane as on the picture below. Nicks wishes to go from the cell marked ( 0, 0) to a certain cell given by the coordinates. She may go from a hexagon to any of its six neighbors you want, but there is a cost associated with each of them. The costs depend only on the direction in which you travel. Going from ( 0, 0) to ( 1, 1) will take the exact same cost as going from ( - 2, - 1) to ( - 1, 0) . The costs are given in the input in the order c_ 1 , c_ 2 , c_ 3 , c_ 4 , c_ 5 , c_ 6 as in the picture below. Print the smallest cost of a path from the origin which has coordinates ( 0, 0) to the given cell.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The first line of each test case contains two integers x and y ( - 10^ 9\u2264 x, y \u2264 10^ 9 ) representing the coordinates of the target hexagon. The second line of each test case contains six integers c_ 1 , c_ 2 , c_ 3 , c_ 4 , c_ 5 , c_ 6 ( 1 \u2264 c_ 1, c_ 2, c_ 3, c_ 4, c_ 5, c_ 6 \u2264 10^ 9 ) representing the six costs of the making one step in a particular direction ( refer to the picture above to see which edge is for each value) .",
    "output": "For each testcase output the smallest cost of a path from the origin to the given cell.",
    "note": "The picture below shows the solution for the first sample. The cost 18 is reached by taking c_ 3 3 times and c_ 2 once, amounting to 5+ 5+ 5+ 3= 18 .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "shortest paths"
    ],
    "id": "1421D"
  },
  {
    "title": "XORwice",
    "url": "https://codeforces.com/problemset/problem/1421/A",
    "history": "In order to celebrate Twice' s 5th anniversary, Tzuyu and Sana decided to play a game. Tzuyu gave Sana two integers a and b and a really important quest. In order to complete the quest, Sana has to output the smallest possible value of ( a \u2295 x ) + ( b \u2295 x ) for any given x , where \u2295 denotes the bitwise XOR operation.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Description of the test cases follows. The only line of each test case contains two integers a and b ( 1 \u2264 a, b \u2264 10^ 9 ) .",
    "output": "For each testcase, output the smallest possible value of the given expression.",
    "note": "For the first test case Sana can choose x= 4 and the value will be ( 6 \u2295 4 ) + ( 12 \u2295 4 ) = 2 + 8 = 10 . It can be shown that this is the smallest possible value.",
    "topics": [
      "bitmasks",
      "greedy",
      "math"
    ],
    "id": "1421A"
  },
  {
    "title": "Battle Lemmings",
    "url": "https://codeforces.com/problemset/problem/1420/E",
    "history": "A lighthouse keeper Peter commands an army of n battle lemmings. He ordered his army to stand in a line and numbered the lemmings from 1 to n from left to right. Some of the lemmings hold shields. Each lemming cannot hold more than one shield. The more protected Peter' s army is, the better. To calculate the protection of the army, he finds the number of protected pairs of lemmings, that is such pairs that both lemmings in the pair don' t hold a shield, but there is a lemming with a shield between them. Now it' s time to prepare for defence and increase the protection of the army. To do this, Peter can give orders. He chooses a lemming with a shield and gives him one of the two orders: give the shield to the left neighbor if it exists and doesn' t have a shield; give the shield to the right neighbor if it exists and doesn' t have a shield. In one second Peter can give exactly one order. It' s not clear how much time Peter has before the defence. So he decided to determine the maximal value of army protection for each k from 0 to n( n- 1) / 2 , if he gives no more that k orders. Help Peter to calculate it!",
    "input": "First line contains a single integer n ( 1 \u2264 n \u2264 80 ) , the number of lemmings in Peter' s army. Second line contains n integers a_ i ( 0 \u2264 a_ i \u2264 1 ) . If a_ i = 1 , then the i - th lemming has a shield, otherwise a_ i = 0 .",
    "output": "Print n( n- 1) / 2 + 1 numbers, the greatest possible protection after no more than 0, 1, . . . , n( n- 1) / 2 orders.",
    "note": "Consider the first example. The protection is initially equal to zero, because for each pair of lemmings without shields there is no lemmings with shield. In one second Peter can order the first lemming give his shield to the right neighbor. In this case, the protection is two, as there are two protected pairs of lemmings, ( 1, 3) and ( 1, 4) . In two seconds Peter can act in the following way. First, he orders the fifth lemming to give a shield to the left neighbor. Then, he orders the first lemming to give a shield to the right neighbor. In this case Peter has three protected pairs of lemmings \u2014 ( 1, 3) , ( 1, 5) and ( 3, 5) . You can make sure that it' s impossible to give orders in such a way that the protection becomes greater than three.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1420E"
  },
  {
    "title": "Pok\u00e9mon Army (hard version)",
    "url": "https://codeforces.com/problemset/problem/1420/C2",
    "history": "This is the hard version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved. Pikachu is a cute and friendly poke\u0301mon living in the wild pikachu herd. But it has become known recently that infamous team R wanted to steal all these poke\u0301mon! Poke\u0301mon trainer Andrew decided to help Pikachu to build a poke\u0301mon army to resist. First, Andrew counted all the poke\u0301mon \u2014 there were exactly n pikachu. The strength of the i - th poke\u0301mon is equal to a_ i , and all these numbers are distinct. As an army, Andrew can choose any non- empty subsequence of pokemons. In other words, Andrew chooses some array b from k indices such that 1 \u2264 b_ 1 < b_ 2 < . . . < b_ k \u2264 n , and his army will consist of poke\u0301mons with forces a_ b_ 1, a_ b_ 2, . . . , a_ b_ k . The strength of the army is equal to the alternating sum of elements of the subsequence; that is, a_ b_ 1 - a_ b_ 2 + a_ b_ 3 - a_ b_ 4 + . . . . Andrew is experimenting with poke\u0301mon order. He performs q operations. In i - th operation Andrew swaps l_ i - th and r_ i - th poke\u0301mon. Andrew wants to know the maximal stregth of the army he can achieve with the initial poke\u0301mon placement. He also needs to know the maximal strength after each operation. Help Andrew and the poke\u0301mon, or team R will realize their tricky plan!",
    "input": "Each test contains multiple test cases. The first line contains one positive integer t ( 1 \u2264 t \u2264 10^ 3 ) denoting the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and q ( 1 \u2264 n \u2264 3 \u00b7 10^ 5, 0 \u2264 q \u2264 3 \u00b7 10^ 5 ) denoting the number of poke\u0301mon and number of operations respectively. The second line contains n distinct positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) denoting the strengths of the poke\u0301mon. i - th of the last q lines contains two positive integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) denoting the indices of poke\u0301mon that were swapped in the i - th operation. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of q over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print q+ 1 integers: the maximal strength of army before the swaps and after each swap.",
    "note": "Let' s look at the third test case: Initially we can build an army in such way: [ 1 2 5 4 3 6 7] , its strength will be 5- 3+ 7= 9 . After first operation we can build an army in such way: [ 2 1 5 4 3 6 7] , its strength will be 2- 1+ 5- 3+ 7= 10 . After second operation we can build an army in such way: [ 2 1 5 4 3 7 6] , its strength will be 2- 1+ 5- 3+ 7= 10 . After third operation we can build an army in such way: [ 2 1 4 5 3 7 6] , its strength will be 2- 1+ 5- 3+ 7= 10 . After forth operation we can build an army in such way: [ 1 2 4 5 3 7 6] , its strength will be 5- 3+ 7= 9 . After all operations we can build an army in such way: [ 1 4 2 5 3 7 6] , its strength will be 4- 2+ 5- 3+ 7= 11 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1420C2"
  },
  {
    "title": "Pok\u00e9mon Army (easy version)",
    "url": "https://codeforces.com/problemset/problem/1420/C1",
    "history": "This is the easy version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved. Pikachu is a cute and friendly poke\u0301mon living in the wild pikachu herd. But it has become known recently that infamous team R wanted to steal all these poke\u0301mon! Poke\u0301mon trainer Andrew decided to help Pikachu to build a poke\u0301mon army to resist. First, Andrew counted all the poke\u0301mon \u2014 there were exactly n pikachu. The strength of the i - th poke\u0301mon is equal to a_ i , and all these numbers are distinct. As an army, Andrew can choose any non- empty subsequence of pokemons. In other words, Andrew chooses some array b from k indices such that 1 \u2264 b_ 1 < b_ 2 < . . . < b_ k \u2264 n , and his army will consist of poke\u0301mons with forces a_ b_ 1, a_ b_ 2, . . . , a_ b_ k . The strength of the army is equal to the alternating sum of elements of the subsequence; that is, a_ b_ 1 - a_ b_ 2 + a_ b_ 3 - a_ b_ 4 + . . . . Andrew is experimenting with poke\u0301mon order. He performs q operations. In i - th operation Andrew swaps l_ i - th and r_ i - th poke\u0301mon. Note: q= 0 in this version of the task. Andrew wants to know the maximal stregth of the army he can achieve with the initial poke\u0301mon placement. He also needs to know the maximal strength after each operation. Help Andrew and the poke\u0301mon, or team R will realize their tricky plan!",
    "input": "Each test contains multiple test cases. The first line contains one positive integer t ( 1 \u2264 t \u2264 10^ 3 ) denoting the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and q ( 1 \u2264 n \u2264 3 \u00b7 10^ 5, q = 0 ) denoting the number of poke\u0301mon and number of operations respectively. The second line contains n distinct positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) denoting the strengths of the poke\u0301mon. i - th of the last q lines contains two positive integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) denoting the indices of poke\u0301mon that were swapped in the i - th operation. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 , and the sum of q over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, print q+ 1 integers: the maximal strength of army before the swaps and after each swap.",
    "note": "In third test case we can build an army in such way: [ 1 2 5 4 3 6 7] , its strength will be 5\u22123+ 7= 9 .",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1420C1"
  },
  {
    "title": "Sage's Birthday (hard version)",
    "url": "https://codeforces.com/problemset/problem/1419/D2",
    "history": "This is the hard version of the problem. The difference between the versions is that in the easy version all prices a_ i are different. You can make hacks if and only if you solved both versions of the problem. Today is Sage' s birthday, and she will go shopping to buy ice spheres. All n ice spheres are placed in a row and they are numbered from 1 to n from left to right. Each ice sphere has a positive integer price. In this version, some prices can be equal. An ice sphere is cheap if it costs strictly less than two neighboring ice spheres: the nearest to the left and the nearest to the right. The leftmost and the rightmost ice spheres are not cheap. Sage will choose all cheap ice spheres and then buy only them. You can visit the shop before Sage and reorder the ice spheres as you wish. Find out the maximum number of ice spheres that Sage can buy, and show how the ice spheres should be reordered.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 the number of ice spheres in the shop. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the prices of ice spheres.",
    "output": "In the first line print the maximum number of ice spheres that Sage can buy. In the second line print the prices of ice spheres in the optimal order. If there are several correct answers, you can print any of them.",
    "note": "In the sample it' s not possible to place the ice spheres in any order so that Sage would buy 4 of them. If the spheres are placed in the order ( 3, 1, 4, 2, 4, 2, 5) , then Sage will buy one sphere for 1 and two spheres for 2 each.",
    "topics": [
      "binary search",
      "brute force",
      "constructive algorithms",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1419D2"
  },
  {
    "title": "Sage's Birthday (easy version)",
    "url": "https://codeforces.com/problemset/problem/1419/D1",
    "history": "This is the easy version of the problem. The difference between the versions is that in the easy version all prices a_ i are different. You can make hacks if and only if you solved both versions of the problem. Today is Sage' s birthday, and she will go shopping to buy ice spheres. All n ice spheres are placed in a row and they are numbered from 1 to n from left to right. Each ice sphere has a positive integer price. In this version all prices are different. An ice sphere is cheap if it costs strictly less than two neighboring ice spheres: the nearest to the left and the nearest to the right. The leftmost and the rightmost ice spheres are not cheap. Sage will choose all cheap ice spheres and then buy only them. You can visit the shop before Sage and reorder the ice spheres as you wish. Find out the maximum number of ice spheres that Sage can buy, and show how the ice spheres should be reordered.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 the number of ice spheres in the shop. The second line contains n different integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the prices of ice spheres.",
    "output": "In the first line print the maximum number of ice spheres that Sage can buy. In the second line print the prices of ice spheres in the optimal order. If there are several correct answers, you can print any of them.",
    "note": "In the example it' s not possible to place ice spheres in any order so that Sage would buy 3 of them. If the ice spheres are placed like this ( 3, 1, 4, 2, 5) , then Sage will buy two spheres: one for 1 and one for 2 , because they are cheap.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1419D1"
  },
  {
    "title": "Killjoy",
    "url": "https://codeforces.com/problemset/problem/1419/C",
    "history": "A new agent called Killjoy invented a virus COVID- 2069 that infects accounts on Codeforces. Each account has a rating, described by an integer ( it can possibly be negative or very large) . Killjoy' s account is already infected and has a rating equal to x . Its rating is constant. There are n accounts except hers, numbered from 1 to n . The i - th account' s initial rating is a_ i . Any infected account ( initially the only infected account is Killjoy' s) instantly infects any uninfected account if their ratings are equal. This can happen at the beginning ( before any rating changes) and after each contest. If an account is infected, it can not be healed. Contests are regularly held on Codeforces. In each contest, any of these n accounts ( including infected ones) can participate. Killjoy can' t participate. After each contest ratings are changed this way: each participant' s rating is changed by an integer, but the sum of all changes must be equal to zero. New ratings can be any integer. Find out the minimal number of contests needed to infect all accounts. You can choose which accounts will participate in each contest and how the ratings will change. It can be proven that all accounts can be infected in some finite number of contests.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100) \u2014 the number of test cases. The next 2t lines contain the descriptions of all test cases. The first line of each test case contains two integers n and x ( 2 \u2264 n \u2264 10^ 3 , - 4000 \u2264 x \u2264 4000 ) \u2014 the number of accounts on Codeforces and the rating of Killjoy' s account. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 4000 \u2264 a_ i \u2264 4000) \u2014 the ratings of other accounts.",
    "output": "For each test case output the minimal number of contests needed to infect all accounts.",
    "note": "In the first test case it' s possible to make all ratings equal to 69 . First account' s rating will increase by 1 , and second account' s rating will decrease by 1 , so the sum of all changes will be equal to zero. In the second test case all accounts will be instantly infected, because all ratings ( including Killjoy' s account' s rating) are equal to 4 .",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1419C"
  },
  {
    "title": "Stairs",
    "url": "https://codeforces.com/problemset/problem/1419/B",
    "history": "Jett is tired after destroying the town and she wants to have a rest. She likes high places, that' s why for having a rest she wants to get high and she decided to craft staircases. A staircase is a squared figure that consists of square cells. Each staircase consists of an arbitrary number of stairs. If a staircase has n stairs, then it is made of n columns, the first column is 1 cell high, the second column is 2 cells high, . . . , the n - th column if n cells high. The lowest cells of all stairs must be in the same row. A staircase with n stairs is called nice, if it may be covered by n disjoint squares made of cells. All squares should fully consist of cells of a staircase. This is how a nice covered staircase with 7 stairs looks like: Find out the maximal number of different nice staircases, that can be built, using no more than x cells, in total. No cell can be used more than once.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000) \u2014 the number of test cases. The description of each test case contains a single integer x ( 1 \u2264 x \u2264 10^ 18) \u2014 the number of cells for building staircases.",
    "output": "For each test case output a single integer \u2014 the number of different nice staircases, that can be built, using not more than x cells, in total.",
    "note": "In the first test case, it is possible to build only one staircase, that consists of 1 stair. It' s nice. That' s why the answer is 1 . In the second test case, it is possible to build two different nice staircases: one consists of 1 stair, and another consists of 3 stairs. This will cost 7 cells. In this case, there is one cell left, but it is not possible to use it for building any nice staircases, that have not been built yet. That' s why the answer is 2 . In the third test case, it is possible to build only one of two nice staircases: with 1 stair or with 3 stairs. In the first case, there will be 5 cells left, that may be used only to build a staircase with 2 stairs. This staircase is not nice, and Jett only builds nice staircases. That' s why in this case the answer is 1 . If Jett builds a staircase with 3 stairs, then there are no more cells left, so the answer is 1 again.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1419B"
  },
  {
    "title": "Digit Game",
    "url": "https://codeforces.com/problemset/problem/1419/A",
    "history": "Everyone knows that agents in Valorant decide, who will play as attackers, and who will play as defenders. To do that Raze and Breach decided to play t matches of a digit game. . . In each of t matches of the digit game, a positive integer is generated. It consists of n digits. The digits of this integer are numerated from 1 to n from the highest- order digit to the lowest- order digit. After this integer is announced, the match starts. Agents play in turns. Raze starts. In one turn an agent can choose any unmarked digit and mark it. Raze can choose digits on odd positions, but can not choose digits on even positions. Breach can choose digits on even positions, but can not choose digits on odd positions. The match ends, when there is only one unmarked digit left. If the single last digit is odd, then Raze wins, else Breach wins. It can be proved, that before the end of the match ( for every initial integer with n digits) each agent has an ability to make a turn, i. e. there is at least one unmarked digit, that stands on a position of required parity. For each of t matches find out, which agent wins, if both of them want to win and play optimally.",
    "input": "First line of input contains an integer t ( 1 \u2264 t \u2264 100) \u2014 the number of matches. The first line of each match description contains an integer n ( 1 \u2264 n \u2264 10^ 3) \u2014 the number of digits of the generated number. The second line of each match description contains an n - digit positive integer without leading zeros.",
    "output": "For each match print 1 , if Raze wins, and 2 , if Breach wins.",
    "note": "In the first match no one can make a turn, the only digit left is 2 , it' s even, so Breach wins. In the second match the only digit left is 3 , it' s odd, so Raze wins. In the third match Raze can mark the last digit, after that Breach can only mark 0 . 1 will be the last digit left, it' s odd, so Raze wins. In the fourth match no matter how Raze plays, Breach can mark 9 , and in the end there will be digit 0 . It' s even, so Breach wins.",
    "topics": [
      "games",
      "greedy",
      "implementation"
    ],
    "id": "1419A"
  },
  {
    "title": "Mortal Kombat Tower",
    "url": "https://codeforces.com/problemset/problem/1418/C",
    "history": "You and your friend are playing the game Mortal Kombat XI. You are trying to pass a challenge tower. There are n bosses in this tower, numbered from 1 to n . The type of the i - th boss is a_ i . If the i - th boss is easy then its type is a_ i = 0 , otherwise this boss is hard and its type is a_ i = 1 . During one session, either you or your friend can kill one or two bosses ( neither you nor your friend can skip the session, so the minimum number of bosses killed during one session is at least one) . After your friend session, your session begins, then again your friend session begins, your session begins, and so on. The first session is your friend' s session. Your friend needs to get good because he can' t actually kill hard bosses. To kill them, he uses skip points. One skip point can be used to kill one hard boss. Your task is to find the minimum number of skip points your friend needs to use so you and your friend kill all n bosses in the given order. For example: suppose n = 8 , a = [ 1, 0, 1, 1, 0, 1, 1, 1] . Then the best course of action is the following: your friend kills two first bosses, using one skip point for the first boss; you kill the third and the fourth bosses; your friend kills the fifth boss; you kill the sixth and the seventh bosses; your friend kills the last boss, using one skip point, so the tower is completed using two skip points. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of bosses. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) , where a_ i is the type of the i - th boss. It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: the minimum number of skip points your friend needs to use so you and your friend kill all n bosses in the given order.",
    "note": "",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1418C"
  },
  {
    "title": "Negative Prefixes",
    "url": "https://codeforces.com/problemset/problem/1418/B",
    "history": "You are given an array a , consisting of n integers. Each position i ( 1 \u2264 i \u2264 n ) of the array is either locked or unlocked. You can take the values on the unlocked positions, rearrange them in any order and place them back into the unlocked positions. You are not allowed to remove any values, add the new ones or rearrange the values on the locked positions. You are allowed to leave the values in the same order as they were. For example, let a = [ - 1, 1, 3, 2, - 2, 1, - 4, 0] , the underlined positions are locked. You can obtain the following arrays: [ - 1, 1, 3, 2, - 2, 1, - 4, 0] ; [ - 4, - 1, 3, 2, - 2, 1, 1, 0] ; [ 1, - 1, 3, 2, - 2, 1, - 4, 0] ; [ 1, 2, 3, - 1, - 2, - 4, 1, 0] ; and some others. Let p be a sequence of prefix sums of the array a after the rearrangement. So p_ 1 = a_ 1 , p_ 2 = a_ 1 + a_ 2 , p_ 3 = a_ 1 + a_ 2 + a_ 3 , . . . , p_ n = a_ 1 + a_ 2 + . . . + a_ n . Let k be the maximum j ( 1 \u2264 j \u2264 n ) such that p_ j < 0 . If there are no j such that p_ j < 0 , then k = 0 . Your goal is to rearrange the values in such a way that k is minimum possible. Output the array a after the rearrangement such that the value k for it is minimum possible. If there are multiple answers then print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Then t testcases follow. The first line of each testcase contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of elements in the array a . The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 5 \u2264 a_ i \u2264 10^ 5 ) \u2014 the initial array a . The third line of each testcase contains n integers l_ 1, l_ 2, . . . , l_ n ( 0 \u2264 l_ i \u2264 1 ) , where l_ i = 0 means that the position i is unlocked and l_ i = 1 means that the position i is locked.",
    "output": "Print n integers \u2014 the array a after the rearrangement. Value k ( the maximum j such that p_ j < 0 ( or 0 if there are no such j ) ) should be minimum possible. For each locked position the printed value should be equal to the initial one. The values on the unlocked positions should be an arrangement of the initial ones. If there are multiple answers then print any of them.",
    "note": "In the first testcase you can rearrange all values however you want but any arrangement will result in k = 0 . For example, for an arrangement [ 1, 2, 3] , p= [ 1, 3, 6] , so there are no j such that p_ j < 0 . Thus, k = 0 . In the second testcase you are not allowed to rearrange any elements. Thus, the printed array should be exactly the same as the initial one. In the third testcase the prefix sums for the printed array are p = [ - 8, - 14, - 13, - 9, - 5, 2, 0] . The maximum j is 5 , thus k = 5 . There are no arrangements such that k < 5 . In the fourth testcase p = [ - 4, - 4, - 3, 3, 6] . In the fifth testcase p = [ - 1, 3, 10, 2, 12, 11] .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1418B"
  },
  {
    "title": "Two Arrays",
    "url": "https://codeforces.com/problemset/problem/1417/B",
    "history": "RedDreamer has an array a consisting of n non- negative integers, and an unlucky integer T . Let' s denote the misfortune of array b having length m as f( b) \u2014 the number of pairs of integers ( i, j) such that 1 \u2264 i < j \u2264 m and b_ i + b_ j = T . RedDreamer has to paint each element of a into one of two colors, white and black ( for each element, the color is chosen independently) , and then create two arrays c and d so that all white elements belong to c , and all black elements belong to d ( it is possible that one of these two arrays becomes empty) . RedDreamer wants to paint the elements in such a way that f( c) + f( d) is minimum possible. For example: if n = 6 , T = 7 and a = [ 1, 2, 3, 4, 5, 6] , it is possible to paint the 1 - st, the 4 - th and the 5 - th elements white, and all other elements black. So c = [ 1, 4, 5] , d = [ 2, 3, 6] , and f( c) + f( d) = 0 + 0 = 0 ; if n = 3 , T = 6 and a = [ 3, 3, 3] , it is possible to paint the 1 - st element white, and all other elements black. So c = [ 3] , d = [ 3, 3] , and f( c) + f( d) = 0 + 1 = 1 . Help RedDreamer to paint the array optimally!",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and T ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 T \u2264 10^ 9 ) \u2014 the number of elements in the array and the unlucky integer, respectively. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. The sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print n integers: p_ 1 , p_ 2 , . . . , p_ n ( each p_ i is either 0 or 1 ) denoting the colors. If p_ i is 0 , then a_ i is white and belongs to the array c , otherwise it is black and belongs to the array d . If there are multiple answers that minimize the value of f( c) + f( d) , print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1417B"
  },
  {
    "title": "Copy-paste",
    "url": "https://codeforces.com/problemset/problem/1417/A",
    "history": "\u2014 Hey folks, how do you like this problem? \u2014 That' ll do it. BThero is a powerful magician. He has got n piles of candies, the i - th pile initially contains a_ i candies. BThero can cast a copy- paste spell as follows: He chooses two piles ( i, j) such that 1 \u2264 i, j \u2264 n and i j . All candies from pile i are copied into pile j . Formally, the operation a_ j : = a_ j + a_ i is performed. BThero can cast this spell any number of times he wants to \u2014 but unfortunately, if some pile contains strictly more than k candies, he loses his magic power. What is the maximum number of times BThero can cast the spell without losing his power?",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 500 ) \u2014 the number of test cases. Each test case consists of two lines: the first line contains two integers n and k ( 2 \u2264 n \u2264 1000 , 2 \u2264 k \u2264 10^ 4 ) ; the second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 k ) . It is guaranteed that the sum of n over all test cases does not exceed 1000 , and the sum of k over all test cases does not exceed 10^ 4 .",
    "output": "For each test case, print one integer \u2014 the maximum number of times BThero can cast the spell without losing his magic power.",
    "note": "In the first test case we get either a = [ 1, 2] or a = [ 2, 1] after casting the spell for the first time, and it is impossible to cast it again.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1417A"
  },
  {
    "title": "Showing Off",
    "url": "https://codeforces.com/problemset/problem/1416/F",
    "history": "Another dull quarantine day was going by when BThero decided to start researching matrices of size n \u00d7 m . The rows are numerated 1 through n from top to bottom, and the columns are numerated 1 through m from left to right. The cell in the i - th row and j - th column is denoted as ( i, j) . For each cell ( i, j) BThero had two values: The cost of the cell, which is a single positive integer. The direction of the cell, which is one of characters L, R, D, U. Those characters correspond to transitions to adjacent cells ( i, j - 1) , ( i, j + 1) , ( i + 1, j) or ( i - 1, j) , respectively. No transition pointed outside of the matrix. Let us call a cell ( i_ 2, j_ 2) reachable from ( i_ 1, j_ 1) , if, starting from ( i_ 1, j_ 1) and repeatedly moving to the adjacent cell according to our current direction, we will, sooner or later, visit ( i_ 2, j_ 2) . BThero decided to create another matrix from the existing two. For a cell ( i, j) , let us denote S_ i, j as a set of all reachable cells from it ( including ( i, j) itself) . Then, the value at the cell ( i, j) in the new matrix will be equal to the sum of costs of all cells in S_ i, j . After quickly computing the new matrix, BThero immediately sent it to his friends. However, he did not save any of the initial matrices! Help him to restore any two valid matrices, which produce the current one.",
    "input": "The first line of input file contains a single integer T ( 1 \u2264 T \u2264 100 ) denoting the number of test cases. The description of T test cases follows. First line of a test case contains two integers n and m ( 1 \u2264 n \u00b7 m \u2264 10^ 5 ) . Each of the following n lines contain exactly m integers \u2014 the elements of the produced matrix. Each element belongs to the segment [ 2, 10^ 9] . It is guaranteed that \u2211( n \u00b7 m) over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, if an answer does not exist, print a single word NO. Otherwise, print YES and both matrices in the same format as in the input. The first matrix should be the cost matrix and the second matrix should be the direction matrix. All integers in the cost matrix should be positive. All characters in the direction matrix should be valid. No direction should point outside of the matrix.",
    "note": "",
    "topics": [
      "flows",
      "graph matchings",
      "greedy",
      "implementation"
    ],
    "id": "1416F"
  },
  {
    "title": "Split",
    "url": "https://codeforces.com/problemset/problem/1416/E",
    "history": "One day, BThero decided to play around with arrays and came up with the following problem: You are given an array a , which consists of n positive integers. The array is numerated 1 through n . You execute the following procedure exactly once: You create a new array b which consists of 2n positive integers, where for each 1 \u2264 i \u2264 n the condition b_ 2i- 1+ b_ 2i = a_ i holds. For example, for the array a = [ 6, 8, 2] you can create b = [ 2, 4, 4, 4, 1, 1] . You merge consecutive equal numbers in b . For example, b = [ 2, 4, 4, 4, 1, 1] becomes b = [ 2, 4, 1] . Find and print the minimum possible value of | b| ( size of b ) which can be achieved at the end of the procedure. It can be shown that under the given constraints there is at least one way to construct b .",
    "input": "The first line of the input file contains a single integer T ( 1 \u2264 T \u2264 5 \u00b7 10^ 5 ) denoting the number of test cases. The description of T test cases follows. The first line of each test contains a single integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) . The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 2 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that \u2211n over all test cases does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each test case, print a single line containing one integer \u2014 the minimum possible value of | b| .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1416E"
  },
  {
    "title": "XOR Inverse",
    "url": "https://codeforces.com/problemset/problem/1416/C",
    "history": "You are given an array a consisting of n non- negative integers. You have to choose a non- negative integer x and form a new array b of size n according to the following rule: for all i from 1 to n , b_ i = a_ i \u2295 x ( \u2295 denotes the operation bitwise XOR) . An inversion in the b array is a pair of integers i and j such that 1 \u2264 i < j \u2264 n and b_ i > b_ j . You should choose x in such a way that the number of inversions in b is minimized. If there are several options for x \u2014 output the smallest one.",
    "input": "First line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of elements in a . Second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of a .",
    "output": "Output two integers: the minimum possible number of inversions in b , and the minimum possible value of x , which achieves those number of inversions.",
    "note": "In the first sample it is optimal to leave the array as it is by choosing x = 0 . In the second sample the selection of x = 14 results in b : [ 4, 9, 7, 4, 9, 11, 11, 13, 11] . It has 4 inversions: i = 2 , j = 3 ; i = 2 , j = 4 ; i = 3 , j = 4 ; i = 8 , j = 9 . In the third sample the selection of x = 8 results in b : [ 0, 2, 11] . It has no inversions.",
    "topics": [
      "bitmasks",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy",
      "math",
      "sortings",
      "strings",
      "trees"
    ],
    "id": "1416C"
  },
  {
    "title": "Make Them Equal",
    "url": "https://codeforces.com/problemset/problem/1416/B",
    "history": "You are given an array a consisting of n positive integers, numbered from 1 to n . You can perform the following operation no more than 3n times: choose three integers i , j and x ( 1 \u2264 i, j \u2264 n ; 0 \u2264 x \u2264 10^ 9 ) ; assign a_ i : = a_ i - x \u00b7 i , a_ j : = a_ j + x \u00b7 i . After each operation, all elements of the array should be non- negative. Can you find a sequence of no more than 3n operations after which all elements of the array are equal?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 4 ) \u2014 the number of elements in the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^ 4 .",
    "output": "For each test case print the answer to it as follows: if there is no suitable sequence of operations, print - 1 ; otherwise, print one integer k ( 0 \u2264 k \u2264 3n ) \u2014 the number of operations in the sequence. Then print k lines, the m - th of which should contain three integers i , j and x ( 1 \u2264 i, j \u2264 n ; 0 \u2264 x \u2264 10^ 9 ) for the m - th operation. If there are multiple suitable sequences of operations, print any of them. Note that you don' t have to minimize k .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1416B"
  },
  {
    "title": "New Game Plus!",
    "url": "https://codeforces.com/problemset/problem/1415/E",
    "history": "Wabbit is playing a game with n bosses numbered from 1 to n . The bosses can be fought in any order. Each boss needs to be defeated exactly once. There is a parameter called boss bonus which is initially 0 . When the i - th boss is defeated, the current boss bonus is added to Wabbit' s score, and then the value of the boss bonus increases by the point increment c_ i . Note that c_ i can be negative, which means that other bosses now give fewer points. However, Wabbit has found a glitch in the game. At any point in time, he can reset the playthrough and start a New Game Plus playthrough. This will set the current boss bonus to 0 , while all defeated bosses remain defeated. The current score is also saved and does not reset to zero after this operation. This glitch can be used at most k times. He can reset after defeating any number of bosses ( including before or after defeating all of them) , and he also can reset the game several times in a row without defeating any boss. Help Wabbit determine the maximum score he can obtain if he has to defeat all n bosses.",
    "input": "The first line of input contains two spaced integers n and k ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 , 0 \u2264 k \u2264 5 \u00b7 10^ 5 ) , representing the number of bosses and the number of resets allowed. The next line of input contains n spaced integers c_ 1, c_ 2, . . . , c_ n ( - 10^ 6 \u2264 c_ i \u2264 10^ 6 ) , the point increments of the n bosses.",
    "output": "Output a single integer, the maximum score Wabbit can obtain by defeating all n bosses ( this value may be negative) .",
    "note": "In the first test case, no resets are allowed. An optimal sequence of fights would be Fight the first boss ( + 0) . Boss bonus becomes equal to 1 . Fight the second boss ( + 1) . Boss bonus becomes equal to 2 . Fight the third boss ( + 2) . Boss bonus becomes equal to 3 . Thus the answer for the first test case is 0+ 1+ 2= 3 . In the second test case, it can be shown that one possible optimal sequence of fights is Fight the fifth boss ( + 0) . Boss bonus becomes equal to 5 . Fight the first boss ( + 5) . Boss bonus becomes equal to 4 . Fight the second boss ( + 4) . Boss bonus becomes equal to 2 . Fight the third boss ( + 2) . Boss bonus becomes equal to - 1 . Reset. Boss bonus becomes equal to 0 . Fight the fourth boss ( + 0) . Boss bonus becomes equal to - 4 . Hence the answer for the second test case is 0+ 5+ 4+ 2+ 0= 11 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1415E"
  },
  {
    "title": "Repainting Street",
    "url": "https://codeforces.com/problemset/problem/1415/B",
    "history": "There is a street with n houses in a line, numbered from 1 to n . The house i is initially painted in color c_ i . The street is considered beautiful if all houses are painted in the same color. Tom, the painter, is in charge of making the street beautiful. Tom' s painting capacity is defined by an integer, let' s call it k . On one day, Tom can do the following repainting process that consists of two steps: He chooses two integers l and r such that 1 \u2264 l \u2264 r \u2264 n and r - l + 1 = k . For each house i such that l \u2264 i \u2264 r , he can either repaint it with any color he wants, or ignore it and let it keep its current color. Note that in the same day Tom can use different colors to repaint different houses. Tom wants to know the minimum number of days needed to repaint the street so that it becomes beautiful.",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) , the number of test cases. Description of test cases follows. In the first line of a test case description there are two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 5 ) . The second line contains n space- separated integers. The i - th of these integers represents c_ i ( 1 \u2264 c_ i \u2264 100 ) , the color which house i is initially painted in. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "Print t lines, each with one integer: the minimum number of days Tom needs to make the street beautiful for each test case.",
    "note": "In the first test case Tom should paint houses 1 and 2 in the first day in color 2, houses 5 and 6 in the second day in color 2, and the last house in color 2 on the third day. In the second test case Tom can, for example, spend 6 days to paint houses 1, 2, 4, 5, 6, 7 in color 3. In the third test case Tom can paint the first house in the first day and houses 6, 7, and 8 in the second day in color 3.",
    "topics": [
      "brute force",
      "brute force",
      "greedy"
    ],
    "id": "1415B"
  },
  {
    "title": "Solo mid Oracle",
    "url": "https://codeforces.com/problemset/problem/1413/E",
    "history": "Meka- Naruto plays a computer game. His character has the following ability: given an enemy hero, deal a instant damage to him, and then heal that enemy b health points at the end of every second, for exactly c seconds, starting one second after the ability is used. That means that if the ability is used at time t , the enemy' s health decreases by a at time t , and then increases by b at time points t + 1 , t + 2 , . . . , t + c due to this ability. The ability has a cooldown of d seconds, i. e. if Meka- Naruto uses it at time moment t , next time he can use it is the time t + d . Please note that he can only use the ability at integer points in time, so all changes to the enemy' s health also occur at integer times only. The effects from different uses of the ability may stack with each other; that is, the enemy which is currently under k spells gets k\u00b7 b amount of heal this time. Also, if several health changes occur at the same moment, they are all counted at once. Now Meka- Naruto wonders if he can kill the enemy by just using the ability each time he can ( that is, every d seconds) . The enemy is killed if their health points become 0 or less. Assume that the enemy' s health is not affected in any way other than by Meka- Naruto' s character ability. What is the maximal number of health points the enemy can have so that Meka- Naruto is able to kill them?",
    "input": "The first line contains an integer t ( 1\u2264 t\u2264 10^ 5 ) standing for the number of testcases. Each test case is described with one line containing four numbers a , b , c and d ( 1\u2264 a, b, c, d\u2264 10^ 6 ) denoting the amount of instant damage, the amount of heal per second, the number of heals and the ability cooldown, respectively.",
    "output": "For each testcase in a separate line print - 1 if the skill can kill an enemy hero with an arbitrary number of health points, otherwise print the maximal number of health points of the enemy that can be killed.",
    "note": "In the first test case of the example each unit of damage is cancelled in a second, so Meka- Naruto cannot deal more than 1 damage. In the fourth test case of the example the enemy gets: 4 damage ( 1 - st spell cast) at time 0 ; 4 damage ( 2 - nd spell cast) and 3 heal ( 1 - st spell cast) at time 1 ( the total of 5 damage to the initial health) ; 4 damage ( 3 - nd spell cast) and 6 heal ( 1 - st and 2 - nd spell casts) at time 2 ( the total of 3 damage to the initial health) ; and so on. One can prove that there is no time where the enemy gets the total of 6 damage or more, so the answer is 5 . Please note how the health is recalculated: for example, 8 - health enemy would not die at time 1 , as if we first subtracted 4 damage from his health and then considered him dead, before adding 3 heal. In the sixth test case an arbitrarily healthy enemy can be killed in a sufficient amount of time. In the seventh test case the answer does not fit into a 32- bit integer type.",
    "topics": [
      "greedy",
      "math",
      "ternary search"
    ],
    "id": "1413E"
  },
  {
    "title": "Shurikens",
    "url": "https://codeforces.com/problemset/problem/1413/D",
    "history": "Tenten runs a weapon shop for ninjas. Today she is willing to sell n shurikens which cost 1 , 2 , . . . , n ryo ( local currency) . During a day, Tenten will place the shurikens onto the showcase, which is empty at the beginning of the day. Her job is fairly simple: sometimes Tenten places another shuriken ( from the available shurikens) on the showcase, and sometimes a ninja comes in and buys a shuriken from the showcase. Since ninjas are thrifty, they always buy the cheapest shuriken from the showcase. Tenten keeps a record for all events, and she ends up with a list of the following types of records: + means that she placed another shuriken on the showcase; - x means that the shuriken of price x was bought. Today was a lucky day, and all shurikens were bought. Now Tenten wonders if her list is consistent, and what could be a possible order of placing the shurikens on the showcase. Help her to find this out!",
    "input": "The first line contains the only integer n ( 1\u2264 n\u2264 10^ 5 ) standing for the number of shurikens. The following 2n lines describe the events in the format described above. It' s guaranteed that there are exactly n events of the first type, and each price from 1 to n occurs exactly once in the events of the second type.",
    "output": "If the list is consistent, print \" YES\" . Otherwise ( that is, if the list is contradictory and there is no valid order of shurikens placement) , print \" NO\" . In the first case the second line must contain n space- separated integers denoting the prices of shurikens in order they were placed. If there are multiple answers, print any.",
    "note": "In the first example Tenten first placed shurikens with prices 4 and 2 . After this a customer came in and bought the cheapest shuriken which costed 2 . Next, Tenten added a shuriken with price 3 on the showcase to the already placed 4 - ryo. Then a new customer bought this 3 - ryo shuriken. After this she added a 1 - ryo shuriken. Finally, the last two customers bought shurikens 1 and 4 , respectively. Note that the order [ 2, 4, 3, 1] is also valid. In the second example the first customer bought a shuriken before anything was placed, which is clearly impossible. In the third example Tenten put all her shurikens onto the showcase, after which a customer came in and bought a shuriken with price 2 . This is impossible since the shuriken was not the cheapest, we know that the 1 - ryo shuriken was also there.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1413D"
  },
  {
    "title": "The Thorny Path",
    "url": "https://codeforces.com/problemset/problem/1411/F",
    "history": "According to a legend the Hanoi Temple holds a permutation of integers from 1 to n . There are n stones of distinct colors lying in one line in front of the temple. Monks can perform the following operation on stones: choose a position i ( 1 \u2264 i \u2264 n ) and cyclically shift stones at positions i , p[ i] , p[ p[ i] ] , . . . . That is, a stone from position i will move to position p[ i] , a stone from position p[ i] will move to position p[ p[ i] ] , and so on, a stone from position j , such that p[ j] = i , will move to position i . Each day the monks must obtain a new arrangement of stones using an arbitrary number of these operations. When all possible arrangements will have been obtained, the world will end. You are wondering, what if some elements of the permutation could be swapped just before the beginning? How many days would the world last? You want to get a permutation that will allow the world to last as long as possible, using the minimum number of exchanges of two elements of the permutation. Two arrangements of stones are considered different if there exists a position i such that the colors of the stones on that position are different in these arrangements.",
    "input": "Each test consists of multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 3 ) . Description of the test cases follows. The first line of each test case contains n ( 3 \u2264 n \u2264 10^ 6 ) . The next line contains n integers p_ 1, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . It is guaranteed that p is a permutation. It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 .",
    "output": "For each of the t test cases, print two integers on a new line: the largest possible number of days the world can last, modulo 10^ 9 + 7 , and the minimum number of exchanges required for that.",
    "note": "Let' s label the colors of the stones with letters. Explanations for the first two test cases of the first example: Using the permutation [ 2, 3, 1] , we can additionally obtain the arrangements CAB and BCA from ABC. This is already the maximum possible result. Using the permutation [ 2, 1, 3] , the only BAC can be obtained from ABC. As we saw in the previous case, two arrangements are not the maximum possible number of distinct arrangements for n = 3 . To get an optimal permutation, for example, we can swap 1 and 3 , so we will get the permutation [ 2, 3, 1] .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1411F"
  },
  {
    "title": "Poman Numbers",
    "url": "https://codeforces.com/problemset/problem/1411/E",
    "history": "You' ve got a string S consisting of n lowercase English letters from your friend. It turned out that this is a number written in poman numerals. The poman numeral system is long forgotten. All that' s left is the algorithm to transform number from poman numerals to the numeral system familiar to us. Characters of S are numbered from 1 to n from left to right. Let' s denote the value of S as f( S) , it is defined as follows: If | S| > 1 , an arbitrary integer m ( 1 \u2264 m < | S| ) is chosen, and it is defined that f( S) = - f( S[ 1, m] ) + f( S[ m + 1, | S| ] ) , where S[ l, r] denotes the substring of S from the l - th to the r - th position, inclusively. Otherwise S = c , where c is some English letter. Then f( S) = 2^ pos( c) , where pos( c) is the position of letter c in the alphabet ( pos( a ) = 0 , pos( z ) = 25 ) . Note that m is chosen independently on each step. Your friend thinks it is possible to get f( S) = T by choosing the right m on every step. Is he right?",
    "input": "The first line contains two integers n and T ( 2 \u2264 n \u2264 10^ 5 , - 10^ 15\u2264 T \u2264 10^ 15 ) . The second line contains a string S consisting of n lowercase English letters.",
    "output": "Print \" Yes\" if it is possible to get the desired value. Otherwise, print \" No\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the second example, you cannot get - 7 . But you can get 1 , for example, as follows: First choose m = 1 , then f( abc ) = - f( a ) + f( bc ) f( a ) = 2^ 0 = 1 f( bc ) = - f( b ) + f( c ) = - 2^ 1 + 2^ 2 = 2 In the end f( abc ) = - 1 + 2 = 1",
    "topics": [
      "bitmasks",
      "greedy",
      "math",
      "strings"
    ],
    "id": "1411E"
  },
  {
    "title": "Grime Zoo",
    "url": "https://codeforces.com/problemset/problem/1411/D",
    "history": "Currently, XXOC' s rap is a string consisting of zeroes, ones, and question marks. Unfortunately, haters gonna hate. They will write x angry comments for every occurrence of subsequence 01 and y angry comments for every occurrence of subsequence 10. You should replace all the question marks with 0 or 1 in such a way that the number of angry comments would be as small as possible. String b is a subsequence of string a , if it can be obtained by removing some characters from a . Two occurrences of a subsequence are considered distinct if sets of positions of remaining characters are distinct.",
    "input": "The first line contains string s \u2014 XXOC' s rap ( 1 \u2264 | s| \u2264 10^ 5 ) . The second line contains two integers x and y \u2014 the number of angry comments XXOC will recieve for every occurrence of 01 and 10 accordingly ( 0 \u2264 x, y \u2264 10^ 6 ) .",
    "output": "Output a single integer \u2014 the minimum number of angry comments.",
    "note": "In the first example one of the optimum ways to replace is 001. Then there will be 2 subsequences 01 and 0 subsequences 10. Total number of angry comments will be equal to 2 \u00b7 2 + 0 \u00b7 3 = 4 . In the second example one of the optimum ways to replace is 11111. Then there will be 0 subsequences 01 and 0 subsequences 10. Total number of angry comments will be equal to 0 \u00b7 13 + 0 \u00b7 37 = 0 . In the third example one of the optimum ways to replace is 1100. Then there will be 0 subsequences 01 and 4 subsequences 10. Total number of angry comments will be equal to 0 \u00b7 239 + 4 \u00b7 7 = 28 . In the fourth example one of the optimum ways to replace is 01101001. Then there will be 8 subsequences 01 and 8 subsequences 10. Total number of angry comments will be equal to 8 \u00b7 5 + 8 \u00b7 7 = 96 .",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1411D"
  },
  {
    "title": "Decrease the Sum of Digits",
    "url": "https://codeforces.com/problemset/problem/1409/D",
    "history": "You are given a positive integer n . In one move, you can increase n by one ( i. e. make n : = n + 1 ) . Your task is to find the minimum number of moves you need to perform in order to make the sum of digits of n be less than or equal to s . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains two integers n and s ( 1 \u2264 n \u2264 10^ 18 ; 1 \u2264 s \u2264 162 ) .",
    "output": "For each test case, print the answer: the minimum number of moves you need to perform in order to make the sum of digits of n be less than or equal to s .",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1409D"
  },
  {
    "title": "Minimum Product",
    "url": "https://codeforces.com/problemset/problem/1409/B",
    "history": "You are given four integers a , b , x and y . Initially, a \u2265 x and b \u2265 y . You can do the following operation no more than n times: Choose either a or b and decrease it by one. However, as a result of this operation, value of a cannot become less than x , and value of b cannot become less than y . Your task is to find the minimum possible product of a and b ( a \u00b7 b ) you can achieve by applying the given operation no more than n times. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains five integers a , b , x , y and n ( 1 \u2264 a, b, x, y, n \u2264 10^ 9 ) . Additional constraint on the input: a \u2265 x and b \u2265 y always holds.",
    "output": "For each test case, print one integer: the minimum possible product of a and b ( a \u00b7 b ) you can achieve by applying the given operation no more than n times.",
    "note": "In the first test case of the example, you need to decrease b three times and obtain 10 \u00b7 7 = 70 . In the second test case of the example, you need to decrease a one time, b one time and obtain 11 \u00b7 7 = 77 . In the sixth test case of the example, you need to decrease a five times and obtain 5 \u00b7 11 = 55 . In the seventh test case of the example, you need to decrease b ten times and obtain 10 \u00b7 1 = 10 .",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1409B"
  },
  {
    "title": "Yet Another Two Integers Problem",
    "url": "https://codeforces.com/problemset/problem/1409/A",
    "history": "You are given two integers a and b . In one move, you can choose some integer k from 1 to 10 and add it to a or subtract it from a . In other words, you choose an integer k \u2208 [ 1; 10] and perform a : = a + k or a : = a - k . You may use different values of k in different moves. Your task is to find the minimum number of moves required to obtain b from a . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains two integers a and b ( 1 \u2264 a, b \u2264 10^ 9 ) .",
    "output": "For each test case, print the answer: the minimum number of moves required to obtain b from a .",
    "note": "In the first test case of the example, you don' t need to do anything. In the second test case of the example, the following sequence of moves can be applied: 13 \u2192 23 \u2192 32 \u2192 42 ( add 10 , add 9 , add 10 ) . In the third test case of the example, the following sequence of moves can be applied: 18 \u2192 10 \u2192 4 ( subtract 8 , subtract 6 ) .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1409A"
  },
  {
    "title": "Rainbow Triples",
    "url": "https://codeforces.com/problemset/problem/1408/H",
    "history": "You are given a sequence a_ 1, a_ 2, . . . , a_ n of non- negative integers. You need to find the largest number m of triples ( i_ 1, j_ 1, k_ 1) , ( i_ 2, j_ 2, k_ 2) , . . . , ( i_ m, j_ m, k_ m) such that: 1 \u2264 i_ p < j_ p < k_ p \u2264 n for each p in 1, 2, . . . , m ; a_ i_ p = a_ k_ p = 0 , a_ j_ p= \u0338 0 ; all a_ j_ 1, a_ j_ 2, . . . , a_ j_ m are different; all i_ 1, j_ 1, k_ 1, i_ 2, j_ 2, k_ 2, . . . , i_ m, j_ m, k_ m are different.",
    "input": "The first line of input contains one integer t ( 1 \u2264 t \u2264 500 000 ) : the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 500 000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) . The total sum of n is at most 500 000 .",
    "output": "For each test case, print one integer m : the largest number of proper triples that you can find.",
    "note": "In the first two test cases, there are not enough elements even for a single triple, so the answer is 0 . In the third test case we can select one triple ( 1, 2, 3) . In the fourth test case we can select two triples ( 1, 3, 5) and ( 2, 4, 6) . In the fifth test case we can select one triple ( 1, 2, 3) . We can' t select two triples ( 1, 2, 3) and ( 4, 5, 6) , because a_ 2 = a_ 5 .",
    "topics": [
      "binary search",
      "data structures",
      "flows",
      "greedy"
    ],
    "id": "1408H"
  },
  {
    "title": "Avoid Rainbow Cycles",
    "url": "https://codeforces.com/problemset/problem/1408/E",
    "history": "You are given m sets of integers A_ 1, A_ 2, . . . , A_ m ; elements of these sets are integers between 1 and n , inclusive. There are two arrays of positive integers a_ 1, a_ 2, . . . , a_ m and b_ 1, b_ 2, . . . , b_ n . In one operation you can delete an element j from the set A_ i and pay a_ i + b_ j coins for that. You can make several ( maybe none) operations ( some sets can become empty) . After that, you will make an edge- colored undirected graph consisting of n vertices. For each set A_ i you will add an edge ( x, y) with color i for all x, y \u2208 A_ i and x < y . Some pairs of vertices can be connected with more than one edge, but such edges have different colors. You call a cycle i_ 1 \u2192 e_ 1 \u2192 i_ 2 \u2192 e_ 2 \u2192. . . \u2192 i_ k \u2192 e_ k \u2192 i_ 1 ( e_ j is some edge connecting vertices i_ j and i_ j+ 1 in this graph) rainbow if all edges on it have different colors. Find the minimum number of coins you should pay to get a graph without rainbow cycles.",
    "input": "The first line contains two integers m and n ( 1 \u2264 m, n \u2264 10^ 5 ) , the number of sets and the number of vertices in the graph. The second line contains m integers a_ 1, a_ 2, . . . , a_ m ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) . In the each of the next of m lines there are descriptions of sets. In the i - th line the first integer s_ i ( 1 \u2264 s_ i \u2264 n ) is equal to the size of A_ i . Then s_ i integers follow: the elements of the set A_ i . These integers are from 1 to n and distinct. It is guaranteed that the sum of s_ i for all 1 \u2264 i \u2264 m does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print one integer: the minimum number of coins you should pay for operations to avoid rainbow cycles in the obtained graph.",
    "note": "In the first test, you can make such operations: Delete element 1 from set 1 . You should pay a_ 1 + b_ 1 = 5 coins for that. Delete element 1 from set 2 . You should pay a_ 2 + b_ 1 = 6 coins for that. You pay 11 coins in total. After these operations, the first and the second sets will be equal to { 2} and the third set will be equal to { 1, 2} . So, the graph will consist of one edge ( 1, 2) of color 3 . In the second test, you can make such operations: Delete element 1 from set 1 . You should pay a_ 1 + b_ 1 = 11 coins for that. Delete element 4 from set 2 . You should pay a_ 2 + b_ 4 = 13 coins for that. Delete element 7 from set 3 . You should pay a_ 3 + b_ 7 = 13 coins for that. Delete element 4 from set 4 . You should pay a_ 4 + b_ 4 = 16 coins for that. Delete element 7 from set 6 . You should pay a_ 6 + b_ 7 = 13 coins for that. You pay 66 coins in total. After these operations, the sets will be: { 2, 3} ; { 1} ; { 1, 3} ; { 3} ; { 3, 4, 5, 6, 7} ; { 5} ; { 8} . We will get the graph: There are no rainbow cycles in it.",
    "topics": [
      "data structures",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1408E"
  },
  {
    "title": "Arrays Sum",
    "url": "https://codeforces.com/problemset/problem/1408/B",
    "history": "You are given a non- decreasing array of non- negative integers a_ 1, a_ 2, . . . , a_ n . Also you are given a positive integer k . You want to find m non- decreasing arrays of non- negative integers b_ 1, b_ 2, . . . , b_ m , such that: The size of b_ i is equal to n for all 1 \u2264 i \u2264 m . For all 1 \u2264 j \u2264 n , a_ j = b_ 1, j + b_ 2, j + . . . + b_ m, j . In the other word, array a is the sum of arrays b_ i . The number of different elements in the array b_ i is at most k for all 1 \u2264 i \u2264 m . Find the minimum possible value of m , or report that there is no possible m .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) : the number of test cases. The first line of each test case contains two integers n , k ( 1 \u2264 n \u2264 100 , 1 \u2264 k \u2264 n ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n \u2264 100 , a_ n > 0 ) .",
    "output": "For each test case print a single integer: the minimum possible value of m . If there is no such m , print - 1 .",
    "note": "In the first test case, there is no possible m , because all elements of all arrays should be equal to 0 . But in this case, it is impossible to get a_ 4 = 1 as the sum of zeros. In the second test case, we can take b_ 1 = [ 3, 3, 3] . 1 is the smallest possible value of m . In the third test case, we can take b_ 1 = [ 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2] and b_ 2 = [ 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2] . It' s easy to see, that a_ i = b_ 1, i + b_ 2, i for all i and the number of different elements in b_ 1 and in b_ 2 is equal to 3 ( so it is at most 3 ) . It can be proven that 2 is the smallest possible value of m .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1408B"
  },
  {
    "title": "Egor in the Republic of Dagestan",
    "url": "https://codeforces.com/problemset/problem/1407/E",
    "history": "Egor is a famous Russian singer, rapper, actor and blogger, and finally he decided to give a concert in the sunny Republic of Dagestan. There are n cities in the republic, some of them are connected by m directed roads without any additional conditions. In other words, road system of Dagestan represents an arbitrary directed graph. Egor will arrive to the city 1 , travel to the city n by roads along some path, give a concert and fly away. As any famous artist, Egor has lots of haters and too annoying fans, so he can travel only by safe roads. There are two types of the roads in Dagestan, black and white: black roads are safe at night only, and white roads \u2014 in the morning. Before the trip Egor' s manager' s going to make a schedule: for each city he' ll specify it' s color, black or white, and then if during the trip they visit some city, the only time they can leave it is determined by the city' s color: night, if it' s black, and morning, if it' s white. After creating the schedule Egor chooses an available path from 1 to n , and for security reasons it has to be the shortest possible. Egor' s manager likes Dagestan very much and wants to stay here as long as possible, so he asks you to make such schedule that there would be no path from 1 to n or the shortest path' s length would be greatest possible. A path is one city or a sequence of roads such that for every road ( excluding the first one) the city this road goes from is equal to the city previous road goes into. Egor can move only along paths consisting of safe roads only. The path length is equal to the number of roads in it. The shortest path in a graph is a path with smallest length.",
    "input": "The first line contains two integers n , m ( 1 \u2264 n \u2264 500000 , 0 \u2264 m \u2264 500000 ) \u2014 the number of cities and the number of roads. The i - th of next m lines contains three integers \u2014 u_ i , v_ i and t_ i ( 1 \u2264 u_ i, v_ i \u2264 n , t_ i \u2208{ 0, 1} ) \u2014 numbers of cities connected by road and its type, respectively ( 0 \u2014 night road, 1 \u2014 morning road) .",
    "output": "In the first line output the length of the desired path ( or - 1 , if it' s possible to choose such schedule that there' s no path from 1 to n ) . In the second line output the desired schedule \u2014 a string of n digits, where i - th digit is 0 , if the i - th city is a night one, and 1 if it' s a morning one. If there are multiple answers, print any.",
    "note": "For the first sample, if we paint city 1 white, the shortest path is 1 \u2192 3 . Otherwise, it' s 1 \u2192 2 \u2192 3 regardless of other cities' colors. For the second sample, we should paint city 3 black, and there are both black and white roads going from 2 to 4 . Note that there can be a road connecting a city with itself.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1407E"
  },
  {
    "title": "Big Vova",
    "url": "https://codeforces.com/problemset/problem/1407/B",
    "history": "Alexander is a well- known programmer. Today he decided to finally go out and play football, but with the first hit he left a dent on the new Rolls- Royce of the wealthy businessman Big Vova. Vladimir has recently opened a store on the popular online marketplace \" Zmey- Gorynych\" , and offers Alex a job: if he shows his programming skills by solving a task, he' ll work as a cybersecurity specialist. Otherwise, he' ll be delivering some doubtful products for the next two years. You' re given n positive integers a_ 1, a_ 2, . . . , a_ n . Using each of them exactly at once, you' re to make such sequence b_ 1, b_ 2, . . . , b_ n that sequence c_ 1, c_ 2, . . . , c_ n is lexicographically maximal, where c_ i= GCD( b_ 1, . . . , b_ i) - the greatest common divisor of the first i elements of b . Alexander is really afraid of the conditions of this simple task, so he asks you to solve it. A sequence a is lexicographically smaller than a sequence b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the sequence a has a smaller element than the corresponding element in b .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 3 ) . Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 3 ) \u2014 the length of the sequence a . The second line of each test case contains n integers a_ 1, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 3 ) \u2014 the sequence a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 3 .",
    "output": "For each test case output the answer in a single line \u2014 the desired sequence b . If there are multiple answers, print any.",
    "note": "In the first test case of the example, there are only two possible permutations b \u2014 [ 2, 5] and [ 5, 2] : for the first one c= [ 2, 1] , for the second one c= [ 5, 1] . In the third test case of the example, number 9 should be the first in b , and GCD( 9, 3) = 3 , GCD( 9, 8) = 1 , so the second number of b should be 3 . In the seventh test case of the example, first four numbers pairwise have a common divisor ( a power of two) , but none of them can be the first in the optimal permutation b .",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1407B"
  },
  {
    "title": "Three Sequences",
    "url": "https://codeforces.com/problemset/problem/1406/D",
    "history": "You are given a sequence of n integers a_ 1, a_ 2, . . . , a_ n . You have to construct two sequences of integers b and c with length n that satisfy: for every i ( 1\u2264 i\u2264 n ) b_ i+ c_ i= a_ i b is non- decreasing, which means that for every 1< i\u2264 n , b_ i\u2265 b_ i- 1 must hold c is non- increasing, which means that for every 1< i\u2264 n , c_ i\u2264 c_ i- 1 must hold You have to minimize max( b_ i, c_ i) . In other words, you have to minimize the maximum number in sequences b and c . Also there will be q changes, the i - th change is described by three integers l, r, x . You should add x to a_ l, a_ l+ 1, . . . , a_ r . You have to find the minimum possible value of max( b_ i, c_ i) for the initial sequence and for sequence after each change.",
    "input": "The first line contains an integer n ( 1\u2264 n\u2264 10^ 5 ) . The secound line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 i\u2264 n , - 10^ 9\u2264 a_ i\u2264 10^ 9 ) . The third line contains an integer q ( 1\u2264 q\u2264 10^ 5 ) . Each of the next q lines contains three integers l, r, x ( 1\u2264 l\u2264 r\u2264 n, - 10^ 9\u2264 x\u2264 10^ 9 ) , desribing the next change.",
    "output": "Print q+ 1 lines. On the i - th ( 1 \u2264 i \u2264 q+ 1 ) line, print the answer to the problem for the sequence after i- 1 changes.",
    "note": "In the first test: The initial sequence a = ( 2, - 1, 7, 3) . Two sequences b= ( - 3, - 3, 5, 5) , c= ( 5, 2, 2, - 2) is a possible choice. After the first change a = ( 2, - 4, 4, 0) . Two sequences b= ( - 3, - 3, 5, 5) , c= ( 5, - 1, - 1, - 5) is a possible choice. After the second change a = ( 2, - 4, 6, 2) . Two sequences b= ( - 4, - 4, 6, 6) , c= ( 6, 0, 0, - 4) is a possible choice.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1406D"
  },
  {
    "title": "Maximum Product",
    "url": "https://codeforces.com/problemset/problem/1406/B",
    "history": "You are given an array of integers a_ 1, a_ 2, . . . , a_ n . Find the maximum possible value of a_ ia_ ja_ ka_ la_ t among all five indices ( i, j, k, l, t) ( i< j< k< l< t ) .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1\u2264 t\u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 5\u2264 n\u2264 10^ 5 ) \u2014 the size of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 3\u00d7 10^ 3\u2264 a_ i\u2264 3\u00d7 10^ 3 ) \u2014 given array. It' s guaranteed that the sum of n over all test cases does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case, print one integer \u2014 the answer to the problem.",
    "note": "In the first test case, choosing a_ 1, a_ 2, a_ 3, a_ 4, a_ 5 is a best choice: ( - 1) \u00b7 ( - 2) \u00b7 ( - 3) \u00b7 ( - 4) \u00b7 ( - 5) = - 120 . In the second test case, choosing a_ 1, a_ 2, a_ 3, a_ 5, a_ 6 is a best choice: ( - 1) \u00b7 ( - 2) \u00b7 ( - 3) \u00b7 2\u00b7 ( - 1) = 12 . In the third test case, choosing a_ 1, a_ 2, a_ 3, a_ 4, a_ 5 is a best choice: ( - 1) \u00b7 0\u00b7 0\u00b7 0\u00b7 ( - 1) = 0 . In the fourth test case, choosing a_ 1, a_ 2, a_ 3, a_ 4, a_ 6 is a best choice: ( - 9) \u00b7 ( - 7) \u00b7 ( - 5) \u00b7 ( - 3) \u00b7 1= 945 .",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1406B"
  },
  {
    "title": "Subset Mex",
    "url": "https://codeforces.com/problemset/problem/1406/A",
    "history": "Given a set of integers ( it can contain equal elements) . You have to split it into two subsets A and B ( both of them can contain equal elements or be empty) . You have to maximize the value of mex( A) + mex( B) . Here mex of a set denotes the smallest non- negative integer that doesn' t exist in the set. For example: mex( { 1, 4, 0, 2, 2, 1} ) = 3 mex( { 3, 3, 2, 1, 3, 0, 0} ) = 4 mex( \u2205) = 0 ( mex for empty set) The set is splitted into two subsets A and B if for any integer number x the number of occurrences of x into this set is equal to the sum of the number of occurrences of x into A and the number of occurrences of x into B .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 1\u2264 n\u2264 100 ) \u2014 the size of the set. The second line of each testcase contains n integers a_ 1, a_ 2, . . . a_ n ( 0\u2264 a_ i\u2264 100 ) \u2014 the numbers in the set.",
    "output": "For each test case, print the maximum value of mex( A) + mex( B) .",
    "note": "In the first test case, A= { 0, 1, 2} , B= { 0, 1, 5} is a possible choice. In the second test case, A= { 0, 1, 2} , B= \u2205 is a possible choice. In the third test case, A= { 0, 1, 2} , B= { 0} is a possible choice. In the fourth test case, A= { 1, 3, 5} , B= { 2, 4, 6} is a possible choice.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1406A"
  },
  {
    "title": "Fixed Point Removal",
    "url": "https://codeforces.com/problemset/problem/1404/C",
    "history": "Let a_ 1, . . . , a_ n be an array of n positive integers. In one operation, you can choose an index i such that a_ i = i , and remove a_ i from the array ( after the removal, the remaining parts are concatenated) . The weight of a is defined as the maximum number of elements you can remove. You must answer q independent queries ( x, y) : after replacing the x first elements of a and the y last elements of a by n+ 1 ( making them impossible to remove) , what would be the weight of a ?",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array and the number of queries. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 elements of the array. The i - th of the next q lines contains two integers x and y ( x, y \u2265 0 and x+ y < n ) .",
    "output": "Print q lines, i - th line should contain a single integer \u2014 the answer to the i - th query.",
    "note": "Explanation of the first query: After making first x = 3 and last y = 1 elements impossible to remove, a becomes [ \u00d7, \u00d7, \u00d7, 9, 5, 4, 6, 5, 7, 8, 3, 11, \u00d7] ( we represent 14 as \u00d7 for clarity) . Here is a strategy that removes 5 elements ( the element removed is colored in red) : [ \u00d7, \u00d7, \u00d7, 9, 5, 4, 6, 5, 7, 8, 3, 11, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 6, 5, 7, 8, 3, 11, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 6, 5, 7, 8, 3, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 5, 7, 8, 3, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 5, 7, 3, \u00d7] [ \u00d7, \u00d7, \u00d7, 9, 4, 5, 3, \u00d7] ( final state) It is impossible to remove more than 5 elements, hence the weight is 5 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1404C"
  },
  {
    "title": "Maximum Distributed Tree",
    "url": "https://codeforces.com/problemset/problem/1401/D",
    "history": "You are given a tree that consists of n nodes. You should label each of its n- 1 edges with an integer in such way that satisfies the following conditions: each integer must be greater than 0 ; the product of all n- 1 numbers should be equal to k ; the number of 1 - s among all n- 1 integers must be minimum possible. Let' s define f( u, v) as the sum of the numbers on the simple path from node u to node v . Also, let \u2211_ i= 1^ n- 1\u2211_ j= i+ 1^ n f( i, j) be a distribution index of the tree. Find the maximum possible distribution index you can get. Since answer can be too large, print it modulo 10^ 9 + 7 . In this problem, since the number k can be large, the result of the prime factorization of k is given instead.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of nodes in the tree. Each of the next n- 1 lines describes an edge: the i - th line contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i v_ i ) \u2014 indices of vertices connected by the i - th edge. Next line contains a single integer m ( 1 \u2264 m \u2264 6 \u00b7 10^ 4 ) \u2014 the number of prime factors of k . Next line contains m prime numbers p_ 1, p_ 2, . . . , p_ m ( 2 \u2264 p_ i < 6 \u00b7 10^ 4 ) such that k = p_ 1 \u00b7 p_ 2 \u00b7. . . \u00b7 p_ m . It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 , the sum of m over all test cases doesn' t exceed 6 \u00b7 10^ 4 , and the given edges for each test cases form a tree.",
    "output": "Print the maximum distribution index you can get. Since answer can be too large, print it modulo 10^ 9+ 7 .",
    "note": "In the first test case, one of the optimal ways is on the following image: In this case, f( 1, 2) = 1 , f( 1, 3) = 3 , f( 1, 4) = 5 , f( 2, 3) = 2 , f( 2, 4) = 4 , f( 3, 4) = 2 , so the sum of these 6 numbers is 17 . In the second test case, one of the optimal ways is on the following image: In this case, f( 1, 2) = 3 , f( 1, 3) = 1 , f( 1, 4) = 4 , f( 2, 3) = 2 , f( 2, 4) = 5 , f( 3, 4) = 3 , so the sum of these 6 numbers is 18 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "trees"
    ],
    "id": "1401D"
  },
  {
    "title": "Ternary Sequence",
    "url": "https://codeforces.com/problemset/problem/1401/B",
    "history": "You are given two sequences a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ n . Each element of both sequences is either 0 , 1 or 2 . The number of elements 0 , 1 , 2 in the sequence a is x_ 1 , y_ 1 , z_ 1 respectively, and the number of elements 0 , 1 , 2 in the sequence b is x_ 2 , y_ 2 , z_ 2 respectively. You can rearrange the elements in both sequences a and b however you like. After that, let' s define a sequence c as follows: c_ i = a_ i b_ i a_ i > b_ i 0 a_ i = b_ i - a_ i b_ i a_ i < b_ i You' d like to make \u2211_ i= 1^ n c_ i ( the sum of all elements of the sequence c ) as large as possible. What is the maximum possible sum?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case contains three integers x_ 1 , y_ 1 , z_ 1 ( 0 \u2264 x_ 1, y_ 1, z_ 1 \u2264 10^ 8 ) \u2014 the number of 0 - s, 1 - s and 2 - s in the sequence a . The second line of each test case also contains three integers x_ 2 , y_ 2 , z_ 2 ( 0 \u2264 x_ 2, y_ 2, z_ 2 \u2264 10^ 8 ; x_ 1 + y_ 1 + z_ 1 = x_ 2 + y_ 2 + z_ 2 > 0 ) \u2014 the number of 0 - s, 1 - s and 2 - s in the sequence b .",
    "output": "For each test case, print the maximum possible sum of the sequence c .",
    "note": "In the first sample, one of the optimal solutions is: a = { 2, 0, 1, 1, 0, 2, 1} b = { 1, 0, 1, 0, 2, 1, 0} c = { 2, 0, 0, 0, 0, 2, 0} In the second sample, one of the optimal solutions is: a = { 0, 2, 0, 0, 0} b = { 1, 1, 0, 1, 0} c = { 0, 2, 0, 0, 0} In the third sample, the only possible solution is: a = { 2} b = { 2} c = { 0}",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1401B"
  },
  {
    "title": "Clear the Multiset",
    "url": "https://codeforces.com/problemset/problem/1400/E",
    "history": "You have a multiset containing several integers. Initially, it contains a_ 1 elements equal to 1 , a_ 2 elements equal to 2 , . . . , a_ n elements equal to n . You may apply two types of operations: choose two integers l and r ( l \u2264 r ) , then remove one occurrence of l , one occurrence of l + 1 , . . . , one occurrence of r from the multiset. This operation can be applied only if each number from l to r occurs at least once in the multiset; choose two integers i and x ( x \u2265 1 ) , then remove x occurrences of i from the multiset. This operation can be applied only if the multiset contains at least x occurrences of i . What is the minimum number of operations required to delete all elements from the multiset?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5000 ) . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the minimum number of operations required to delete all elements from the multiset.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "dp",
      "greedy"
    ],
    "id": "1400E"
  },
  {
    "title": "Binary String Reconstruction",
    "url": "https://codeforces.com/problemset/problem/1400/C",
    "history": "Consider the following process. You have a binary string ( a string where each character is either 0 or 1) w of length n and an integer x . You build a new binary string s consisting of n characters. The i - th character of s is chosen as follows: if the character w_ i- x exists and is equal to 1, then s_ i is 1 ( formally, if i > x and w_ i- x = 1, then s_ i = 1) ; if the character w_ i+ x exists and is equal to 1, then s_ i is 1 ( formally, if i + x \u2264 n and w_ i+ x = 1, then s_ i = 1) ; if both of the aforementioned conditions are false, then s_ i is 0. You are given the integer x and the resulting string s . Reconstruct the original string w .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains the resulting string s ( 2 \u2264 | s| \u2264 10^ 5 , each character of s is either 0 or 1) . The second line contains one integer x ( 1 \u2264 x \u2264 | s| - 1 ) . The total length of all strings s in the input does not exceed 10^ 5 .",
    "output": "For each test case, print the answer on a separate line as follows: if no string w can produce the string s at the end of the process, print - 1 ; otherwise, print the binary string w consisting of | s| characters. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "2-sat",
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1400C"
  },
  {
    "title": "RPG Protagonist",
    "url": "https://codeforces.com/problemset/problem/1400/B",
    "history": "You are playing one RPG from the 2010s. You are planning to raise your smithing skill, so you need as many resources as possible. So how to get resources? By stealing, of course. You decided to rob a town' s blacksmith and you take a follower with you. You can carry at most p units and your follower \u2014 at most f units. In the blacksmith shop, you found cnt_ s swords and cnt_ w war axes. Each sword weights s units and each war axe \u2014 w units. You don' t care what to take, since each of them will melt into one steel ingot. What is the maximum number of weapons ( both swords and war axes) you and your follower can carry out from the shop?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains two integers p and f ( 1 \u2264 p, f \u2264 10^ 9 ) \u2014 yours and your follower' s capacities. The second line of each test case contains two integers cnt_ s and cnt_ w ( 1 \u2264 cnt_ s, cnt_ w \u2264 2 \u00b7 10^ 5 ) \u2014 the number of swords and war axes in the shop. The third line of each test case contains two integers s and w ( 1 \u2264 s, w \u2264 10^ 9 ) \u2014 the weights of each sword and each war axe. It' s guaranteed that the total number of swords and the total number of war axes in all test cases don' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the maximum number of weapons ( both swords and war axes) you and your follower can carry.",
    "note": "In the first test case: you should take 3 swords and 3 war axes: 3 \u00b7 5 + 3 \u00b7 6 = 33 \u2264 33 and your follower \u2014 3 swords and 2 war axes: 3 \u00b7 5 + 2 \u00b7 6 = 27 \u2264 27 . 3 + 3 + 3 + 2 = 11 weapons in total. In the second test case, you can take all available weapons even without your follower' s help, since 5 \u00b7 10 + 5 \u00b7 10 \u2264 100 . In the third test case, you can' t take anything, but your follower can take 3 war axes: 3 \u00b7 5 \u2264 19 .",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1400B"
  },
  {
    "title": "Weights Division (hard version)",
    "url": "https://codeforces.com/problemset/problem/1399/E2",
    "history": "Easy and hard versions are actually different problems, so we advise you to read both statements carefully. You are given a weighted rooted tree, vertex 1 is the root of this tree. Also, each edge has its own cost. A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a vertex v is the last different from v vertex on the path from the root to the vertex v . Children of vertex v are all vertices for which v is the parent. A vertex is a leaf if it has no children. The weighted tree is such a tree that each edge of this tree has some weight. The weight of the path is the sum of edges weights on this path. The weight of the path from the vertex to itself is 0 . You can make a sequence of zero or more moves. On each move, you select an edge and divide its weight by 2 rounding down. More formally, during one move, you choose some edge i and divide its weight by 2 rounding down ( w_ i : = \u230aw_ i/ 2\u230b ) . Each edge i has an associated cost c_ i which is either 1 or 2 coins. Each move with edge i costs c_ i coins. Your task is to find the minimum total cost to make the sum of weights of paths from the root to each leaf at most S . In other words, if w( i, j) is the weight of the path from the vertex i to the vertex j , then you have to make \u2211_ v \u2208 leaves w( root, v) \u2264 S , where leaves is the list of all leaves. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and S ( 2 \u2264 n \u2264 10^ 5; 1 \u2264 S \u2264 10^ 16 ) \u2014 the number of vertices in the tree and the maximum possible sum of weights you have to obtain. The next n- 1 lines describe edges of the tree. The edge i is described as four integers v_ i , u_ i , w_ i and c_ i ( 1 \u2264 v_ i, u_ i \u2264 n; 1 \u2264 w_ i \u2264 10^ 6; 1 \u2264 c_ i \u2264 2 ) , where v_ i and u_ i are vertices the edge i connects, w_ i is the weight of this edge and c_ i is the cost of this edge. It is guaranteed that the sum of n does not exceed 10^ 5 ( \u2211 n \u2264 10^ 5 ) .",
    "output": "For each test case, print the answer: the minimum total cost required to make the sum of weights paths from the root to each leaf at most S .",
    "note": "",
    "topics": [
      "binary search",
      "dfs and similar",
      "greedy",
      "sortings",
      "trees",
      "two pointers"
    ],
    "id": "1399E2"
  },
  {
    "title": "Binary String To Subsequences",
    "url": "https://codeforces.com/problemset/problem/1399/D",
    "history": "You are given a binary string s consisting of n zeros and ones. Your task is to divide the given string into the minimum number of subsequences in such a way that each character of the string belongs to exactly one subsequence and each subsequence looks like \" 010101 . . . \" or \" 101010 . . . \" ( i. e. the subsequence should not contain two adjacent zeros or ones) . Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements. For example, subsequences of \" 1011101\" are \" 0\" , \" 1\" , \" 11111\" , \" 0111\" , \" 101\" , \" 1001\" , but not \" 000\" , \" 101010\" and \" 11100\" . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of s . The second line of the test case contains n characters ' 0' and ' 1' \u2014 the string s . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: in the first line print one integer k ( 1 \u2264 k \u2264 n ) \u2014 the minimum number of subsequences you can divide the string s to. In the second line print n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 k ) , where a_ i is the number of subsequence the i - th character of s belongs to. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1399D"
  },
  {
    "title": "Boats Competition",
    "url": "https://codeforces.com/problemset/problem/1399/C",
    "history": "There are n people who want to participate in a boat competition. The weight of the i - th participant is w_ i . Only teams consisting of two people can participate in this competition. As an organizer, you think that it' s fair to allow only teams with the same total weight. So, if there are k teams ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ k, b_ k) , where a_ i is the weight of the first participant of the i - th team and b_ i is the weight of the second participant of the i - th team, then the condition a_ 1 + b_ 1 = a_ 2 + b_ 2 = . . . = a_ k + b_ k = s , where s is the total weight of each team, should be satisfied. Your task is to choose such s that the number of teams people can create is the maximum possible. Note that each participant can be in no more than one team. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of participants. The second line of the test case contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 n ) , where w_ i is the weight of the i - th participant.",
    "output": "For each test case, print one integer k : the maximum number of teams people can compose with the total weight s , if you choose s optimally.",
    "note": "In the first test case of the example, we can reach the optimal answer for s= 6 . Then the first boat is used by participants 1 and 5 and the second boat is used by participants 2 and 4 ( indices are the same as weights) . In the second test case of the example, we can reach the optimal answer for s= 12 . Then first 6 participants can form 3 pairs. In the third test case of the example, we can reach the optimal answer for s= 3 . The answer is 4 because we have 4 participants with weight 1 and 4 participants with weight 2 . In the fourth test case of the example, we can reach the optimal answer for s= 4 or s= 6 . In the fifth test case of the example, we can reach the optimal answer for s= 3 . Note that participant with weight 3 can' t use the boat because there is no suitable pair for him in the list.",
    "topics": [
      "brute force",
      "greedy",
      "two pointers"
    ],
    "id": "1399C"
  },
  {
    "title": "Remove Smallest",
    "url": "https://codeforces.com/problemset/problem/1399/A",
    "history": "You are given the array a consisting of n positive ( greater than zero) integers. In one move, you can choose two indices i and j ( i j ) such that the absolute difference between a_ i and a_ j is no more than one ( | a_ i - a_ j| \u2264 1 ) and remove the smallest of these two elements. If two elements are equal, you can remove any of them ( but exactly one) . Your task is to find if it is possible to obtain the array consisting of only one element using several ( possibly, zero) such moves or not. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the i - th element of a .",
    "output": "For each test case, print the answer: \" YES\" if it is possible to obtain the array consisting of only one element using several ( possibly, zero) moves described in the problem statement, or \" NO\" otherwise.",
    "note": "In the first test case of the example, we can perform the following sequence of moves: choose i= 1 and j= 3 and remove a_ i ( so a becomes [ 2; 2] ) ; choose i= 1 and j= 2 and remove a_ j ( so a becomes [ 2] ) . In the second test case of the example, we can choose any possible i and j any move and it doesn' t matter which element we remove. In the third test case of the example, there is no way to get rid of 2 and 4 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1399A"
  },
  {
    "title": "Controversial Rounds",
    "url": "https://codeforces.com/problemset/problem/1398/F",
    "history": "Alice and Bob play a game. The game consists of several sets, and each set consists of several rounds. Each round is won either by Alice or by Bob, and the set ends when one of the players has won x rounds in a row. For example, if Bob won five rounds in a row and x = 2 , then two sets ends. You know that Alice and Bob have already played n rounds, and you know the results of some rounds. For each x from 1 to n , calculate the maximum possible number of sets that could have already finished if each set lasts until one of the players wins x rounds in a row. It is possible that the last set is still not finished \u2014 in that case, you should not count it in the answer.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of rounds. The second line contains one string s of length n \u2014 the descriptions of rounds. If the i - th element of the string is 0, then Alice won the i - th round; if it is 1, then Bob won the i - th round, and if it is ? , then you don' t know who won the i - th round.",
    "output": "In the only line print n integers. The i - th integer should be equal to the maximum possible number of sets that could have already finished if each set lasts until one of the players wins i rounds in a row.",
    "note": "Let' s consider the first test case: if x = 1 and s = 110000 or s = 111000 then there are six finished sets; if x = 2 and s = 110000 then there are three finished sets; if x = 3 and s = 111000 then there are two finished sets; if x = 4 and s = 110000 then there is one finished set; if x = 5 then there are no finished sets; if x = 6 then there are no finished sets.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1398F"
  },
  {
    "title": "Colored Rectangles",
    "url": "https://codeforces.com/problemset/problem/1398/D",
    "history": "You are given three multisets of pairs of colored sticks: R pairs of red sticks, the first pair has length r_ 1 , the second pair has length r_ 2 , . . . , the R - th pair has length r_ R ; G pairs of green sticks, the first pair has length g_ 1 , the second pair has length g_ 2 , . . . , the G - th pair has length g_ G ; B pairs of blue sticks, the first pair has length b_ 1 , the second pair has length b_ 2 , . . . , the B - th pair has length b_ B ; You are constructing rectangles from these pairs of sticks with the following process: take a pair of sticks of one color; take a pair of sticks of another color different from the first one; add the area of the resulting rectangle to the total area. Thus, you get such rectangles that their opposite sides are the same color and their adjacent sides are not the same color. Each pair of sticks can be used at most once, some pairs can be left unused. You are not allowed to split a pair into independent sticks. What is the maximum area you can achieve?",
    "input": "The first line contains three integers R , G , B ( 1 \u2264 R, G, B \u2264 200 ) \u2014 the number of pairs of red sticks, the number of pairs of green sticks and the number of pairs of blue sticks. The second line contains R integers r_ 1, r_ 2, . . . , r_ R ( 1 \u2264 r_ i \u2264 2000 ) \u2014 the lengths of sticks in each pair of red sticks. The third line contains G integers g_ 1, g_ 2, . . . , g_ G ( 1 \u2264 g_ i \u2264 2000 ) \u2014 the lengths of sticks in each pair of green sticks. The fourth line contains B integers b_ 1, b_ 2, . . . , b_ B ( 1 \u2264 b_ i \u2264 2000 ) \u2014 the lengths of sticks in each pair of blue sticks.",
    "output": "Print the maximum possible total area of the constructed rectangles.",
    "note": "In the first example you can construct one of these rectangles: red and green with sides 3 and 5 , red and blue with sides 3 and 4 and green and blue with sides 5 and 4 . The best area of them is 4 \u00d7 5 = 20 . In the second example the best rectangles are: red/ blue 9 \u00d7 8 , red/ blue 5 \u00d7 5 , green/ blue 2 \u00d7 1 . So the total area is 72 + 25 + 2 = 99 . In the third example the best rectangles are: red/ green 19 \u00d7 8 and red/ blue 20 \u00d7 11 . The total area is 152 + 220 = 372 . Note that you can' t construct more rectangles because you are not allowed to have both pairs taken to be the same color.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1398D"
  },
  {
    "title": "Substring Removal Game",
    "url": "https://codeforces.com/problemset/problem/1398/B",
    "history": "Alice and Bob play a game. They have a binary string s ( a string such that each character in it is either 0 or 1 ) . Alice moves first, then Bob, then Alice again, and so on. During their move, the player can choose any number ( not less than one) of consecutive equal characters in s and delete them. For example, if the string is 10110 , there are 6 possible moves ( deleted characters are bold) : 10110 \u2192 0110 ; 10110 \u2192 1110 ; 10110 \u2192 1010 ; 10110 \u2192 1010 ; 10110 \u2192 100 ; 10110\u2192 1011 . After the characters are removed, the characters to the left and to the right of the removed block become adjacent. I. e. the following sequence of moves is valid: 10110 \u2192 100\u2192 1 . The game ends when the string becomes empty, and the score of each player is the number of 1 - characters deleted by them. Each player wants to maximize their score. Calculate the resulting score of Alice.",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 500 ) \u2014 the number of test cases. Each test case contains exactly one line containing a binary string s ( 1 \u2264 | s| \u2264 100 ) .",
    "output": "For each test case, print one integer \u2014 the resulting score of Alice ( the number of 1 - characters deleted by her) .",
    "note": "Questions about the optimal strategy will be ignored.",
    "topics": [
      "games",
      "greedy",
      "sortings"
    ],
    "id": "1398B"
  },
  {
    "title": "Juggling Letters",
    "url": "https://codeforces.com/problemset/problem/1397/A",
    "history": "You are given n strings s_ 1, s_ 2, . . . , s_ n consisting of lowercase Latin letters. In one operation you can remove a character from a string s_ i and insert it to an arbitrary position in a string s_ j ( j may be equal to i ) . You may perform this operation any number of times. Is it possible to make all n strings equal?",
    "input": "The first line contains t ( 1 \u2264 t \u2264 10 ) : the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 1000 ) : the number of strings. n lines follow, the i - th line contains s_ i ( 1 \u2264| s_ i | \u2264 1000 ) . The sum of lengths of all strings in all test cases does not exceed 1000 .",
    "output": "If it is possible to make the strings equal, print \" YES\" ( without quotes) . Otherwise, print \" NO\" ( without quotes) . You can output each character in either lowercase or uppercase.",
    "note": "In the first test case, you can do the following: Remove the third character of the first string and insert it after the second character of the second string, making the two strings \" ca\" and \" cbab\" respectively. Remove the second character of the second string and insert it after the second character of the first string, making both strings equal to \" cab\" . In the second test case, it is impossible to make all n strings equal.",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1397A"
  },
  {
    "title": "Monster Invaders",
    "url": "https://codeforces.com/problemset/problem/1396/C",
    "history": "Ziota found a video game called \" Monster Invaders\" . Similar to every other shooting RPG game, \" Monster Invaders\" involves killing monsters and bosses with guns. For the sake of simplicity, we only consider two different types of monsters and three different types of guns. Namely, the two types of monsters are: a normal monster with 1 hp. a boss with 2 hp. And the three types of guns are: Pistol, deals 1 hp in damage to one monster, r_ 1 reloading time Laser gun, deals 1 hp in damage to all the monsters in the current level ( including the boss) , r_ 2 reloading time AWP, instantly kills any monster, r_ 3 reloading time The guns are initially not loaded, and the Ziota can only reload 1 gun at a time. The levels of the game can be considered as an array a_ 1, a_ 2, . . . , a_ n , in which the i - th stage has a_ i normal monsters and 1 boss. Due to the nature of the game, Ziota cannot use the Pistol ( the first type of gun) or AWP ( the third type of gun) to shoot the boss before killing all of the a_ i normal monsters. If Ziota damages the boss but does not kill it immediately, he is forced to move out of the current level to an arbitrary adjacent level ( adjacent levels of level i ( 1 < i < n) are levels i - 1 and i + 1 , the only adjacent level of level 1 is level 2 , the only adjacent level of level n is level n - 1 ) . Ziota can also choose to move to an adjacent level at any time. Each move between adjacent levels are managed by portals with d teleportation time. In order not to disrupt the space- time continuum within the game, it is strictly forbidden to reload or shoot monsters during teleportation. Ziota starts the game at level 1. The objective of the game is rather simple, to kill all the bosses in all the levels. He is curious about the minimum time to finish the game ( assuming it takes no time to shoot the monsters with a loaded gun and Ziota has infinite ammo on all the three guns) . Please help him find this value.",
    "input": "The first line of the input contains five integers separated by single spaces: n ( 2 \u2264 n \u2264 10^ 6) \u2014 the number of stages, r_ 1, r_ 2, r_ 3 ( 1 \u2264 r_ 1 \u2264 r_ 2 \u2264 r_ 3 \u2264 10^ 9) \u2014 the reload time of the three guns respectively, d ( 1 \u2264 d \u2264 10^ 9) \u2014 the time of moving between adjacent levels. The second line of the input contains n integers separated by single spaces a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6, 1 \u2264 i \u2264 n) .",
    "output": "Print one integer, the minimum time to finish the game.",
    "note": "In the first test case, the optimal strategy is: Use the pistol to kill three normal monsters and AWP to kill the boss ( Total time 1\u00b73+ 4= 7 ) Move to stage two ( Total time 7+ 3= 10 ) Use the pistol twice and AWP to kill the boss ( Total time 10+ 1\u00b72+ 4= 16 ) Move to stage three ( Total time 16+ 3= 19 ) Use the laser gun and forced to move to either stage four or two, here we move to stage four ( Total time 19+ 3+ 3= 25 ) Use the pistol once, use AWP to kill the boss ( Total time 25+ 1\u00b71+ 4= 30 ) Move back to stage three ( Total time 30+ 3= 33 ) Kill the boss at stage three with the pistol ( Total time 33+ 1= 34 ) Note that here, we do not finish at level n , but when all the bosses are killed.",
    "topics": [
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1396C"
  },
  {
    "title": "Stoned Game",
    "url": "https://codeforces.com/problemset/problem/1396/B",
    "history": "T is playing a game with his friend, HL. There are n piles of stones, the i - th pile initially has a_ i stones. T and HL will take alternating turns, with T going first. In each turn, a player chooses a non- empty pile and then removes a single stone from it. However, one cannot choose a pile that has been chosen in the previous turn ( the pile that was chosen by the other player, or if the current turn is the first turn then the player can choose any non- empty pile) . The player who cannot choose a pile in his turn loses, and the game ends. Assuming both players play optimally, given the starting configuration of t games, determine the winner of each game.",
    "input": "The first line of the input contains a single integer t ( 1 \u2264 t \u2264 100) \u2014 the number of games. The description of the games follows. Each description contains two lines: The first line contains a single integer n ( 1 \u2264 n \u2264 100) \u2014 the number of piles. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100) .",
    "output": "For each game, print on a single line the name of the winner, \" T\" or \" HL\" ( without quotes)",
    "note": "In the first game, T removes a single stone from the only pile in his first turn. After that, although the pile still contains 1 stone, HL cannot choose from this pile because it has been chosen by T in the previous turn. Therefore, T is the winner.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "games",
      "greedy"
    ],
    "id": "1396B"
  },
  {
    "title": "Multiples of Length",
    "url": "https://codeforces.com/problemset/problem/1396/A",
    "history": "You are given an array a of n integers. You want to make all elements of a equal to zero by doing the following operation exactly three times: Select a segment, for each number in this segment we can add a multiple of len to it, where len is the length of this segment ( added integers can be different) . It can be proven that it is always possible to make all elements of a equal to zero.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 100 000 ) : the number of elements of the array. The second line contains n elements of an array a separated by spaces: a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "The output should contain six lines representing three operations. For each operation, print two lines: The first line contains two integers l , r ( 1 \u2264 l \u2264 r \u2264 n ) : the bounds of the selected segment. The second line contains r- l+ 1 integers b_ l, b_ l+ 1, . . . , b_ r ( - 10^ 18\u2264 b_ i \u2264 10^ 18 ) : the numbers to add to a_ l, a_ l+ 1, . . . , a_ r , respectively; b_ i should be divisible by r - l + 1 .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "number theory"
    ],
    "id": "1396A"
  },
  {
    "title": "Boboniu Chats with Du",
    "url": "https://codeforces.com/problemset/problem/1394/A",
    "history": "Have you ever used the chat application QQ? Well, in a chat group of QQ, administrators can muzzle a user for days. In Boboniu' s chat group, there' s a person called Du Yi who likes to make fun of Boboniu every day. Du will chat in the group for n days. On the i - th day: If Du can speak, he' ll make fun of Boboniu with fun factor a_ i . But after that, he may be muzzled depending on Boboniu' s mood. Otherwise, Du won' t do anything. Boboniu' s mood is a constant m . On the i - th day: If Du can speak and a_ i> m , then Boboniu will be angry and muzzle him for d days, which means that Du won' t be able to speak on the i+ 1, i+ 2, \u22ef, min( i+ d, n) - th days. Otherwise, Boboniu won' t do anything. The total fun factor is the sum of the fun factors on the days when Du can speak. Du asked you to find the maximum total fun factor among all possible permutations of a .",
    "input": "The first line contains three integers n , d and m ( 1\u2264 d\u2264 n\u2264 10^ 5, 0\u2264 m\u2264 10^ 9 ) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i\u2264 10^ 9 ) .",
    "output": "Print one integer: the maximum total fun factor among all permutations of a .",
    "note": "In the first example, you can set a' = [ 15, 5, 8, 10, 23] . Then Du' s chatting record will be: Make fun of Boboniu with fun factor 15 . Be muzzled. Be muzzled. Make fun of Boboniu with fun factor 10 . Make fun of Boboniu with fun factor 23 . Thus the total fun factor is 48 .",
    "topics": [
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1394A"
  },
  {
    "title": "Pinkie Pie Eats Patty-cakes",
    "url": "https://codeforces.com/problemset/problem/1393/C",
    "history": "Pinkie Pie has bought a bag of patty- cakes with different fillings! But it appeared that not all patty- cakes differ from one another with filling. In other words, the bag contains some patty- cakes with the same filling. Pinkie Pie eats the patty- cakes one- by- one. She likes having fun so she decided not to simply eat the patty- cakes but to try not to eat the patty- cakes with the same filling way too often. To achieve this she wants the minimum distance between the eaten with the same filling to be the largest possible. Herein Pinkie Pie called the distance between two patty- cakes the number of eaten patty- cakes strictly between them. Pinkie Pie can eat the patty- cakes in any order. She is impatient about eating all the patty- cakes up so she asks you to help her to count the greatest minimum distance between the eaten patty- cakes with the same filling amongst all possible orders of eating! Pinkie Pie is going to buy more bags of patty- cakes so she asks you to solve this problem for several bags!",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) : the number of bags for which you need to solve the problem. The first line of each bag description contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) : the number of patty- cakes in it. The second line of the bag description contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) : the information of patty- cakes' fillings: same fillings are defined as same integers, different fillings are defined as different integers. It is guaranteed that each bag contains at least two patty- cakes with the same filling. It is guaranteed that the sum of n over all bags does not exceed 10^ 5 .",
    "output": "For each bag print in separate line one single integer: the largest minimum distance between the eaten patty- cakes with the same filling amongst all possible orders of eating for that bag.",
    "note": "For the first bag Pinkie Pie can eat the patty- cakes in the following order ( by fillings) : 1 , 6 , 4 , 7 , 1 , 6 , 4 ( in this way, the minimum distance is equal to 3 ) . For the second bag Pinkie Pie can eat the patty- cakes in the following order ( by fillings) : 1 , 4 , 6 , 7 , 4 , 1 , 6 , 4 ( in this way, the minimum distance is equal to 2 ) .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1393C"
  },
  {
    "title": "Applejack and Storages",
    "url": "https://codeforces.com/problemset/problem/1393/B",
    "history": "This year in Equestria was a year of plenty, so Applejack has decided to build some new apple storages. According to the advice of the farm designers, she chose to build two storages with non- zero area: one in the shape of a square and another one in the shape of a rectangle ( which possibly can be a square as well) . Applejack will build the storages using planks, she is going to spend exactly one plank on each side of the storage. She can get planks from her friend' s company. Initially, the company storehouse has n planks, Applejack knows their lengths. The company keeps working so it receives orders and orders the planks itself. Applejack' s friend can provide her with information about each operation. For convenience, he will give her information according to the following format: + x : the storehouse received a plank with length x - x : one plank with length x was removed from the storehouse ( it is guaranteed that the storehouse had some planks with length x ) . Applejack is still unsure about when she is going to order the planks so she wants to know if she can order the planks to build rectangular and square storages out of them after every event at the storehouse. Applejack is busy collecting apples and she has completely no time to do the calculations so she asked you for help! We remind you that all four sides of a square are equal, and a rectangle has two pairs of equal sides.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) : the initial amount of planks at the company' s storehouse, the second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) : the lengths of the planks. The third line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) : the number of events in the company. Each of the next q lines contains a description of the events in a given format: the type of the event ( a symbol + or - ) is given first, then goes the integer x ( 1 \u2264 x \u2264 10^ 5 ) .",
    "output": "After every event in the company, print \" YES\" if two storages of the required shape can be built from the planks of that company' s set, and print \" NO\" otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "After the second event Applejack can build a rectangular storage using planks with lengths 1 , 2 , 1 , 2 and a square storage using planks with lengths 1 , 1 , 1 , 1 . After the sixth event Applejack can build a rectangular storage using planks with lengths 2 , 2 , 2 , 2 and a square storage using planks with lengths 1 , 1 , 1 , 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1393B"
  },
  {
    "title": "Rainbow Dash, Fluttershy and Chess Coloring",
    "url": "https://codeforces.com/problemset/problem/1393/A",
    "history": "One evening Rainbow Dash and Fluttershy have come up with a game. Since the ponies are friends, they have decided not to compete in the game but to pursue a common goal. The game starts on a square flat grid, which initially has the outline borders built up. Rainbow Dash and Fluttershy have flat square blocks with size 1\u00d71 , Rainbow Dash has an infinite amount of light blue blocks, Fluttershy has an infinite amount of yellow blocks. The blocks are placed according to the following rule: each newly placed block must touch the built on the previous turns figure by a side ( note that the outline borders of the grid are built initially) . At each turn, one pony can place any number of blocks of her color according to the game rules. Rainbow and Fluttershy have found out that they can build patterns on the grid of the game that way. They have decided to start with something simple, so they made up their mind to place the blocks to form a chess coloring. Rainbow Dash is well- known for her speed, so she is interested in the minimum number of turns she and Fluttershy need to do to get a chess coloring, covering the whole grid with blocks. Please help her find that number! Since the ponies can play many times on different boards, Rainbow Dash asks you to find the minimum numbers of turns for several grids of the games. The chess coloring in two colors is the one in which each square is neighbor by side only with squares of different colors.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) : the number of grids of the games. Each of the next T lines contains a single integer n ( 1 \u2264 n \u2264 10^ 9 ) : the size of the side of the grid of the game.",
    "output": "For each grid of the game print the minimum number of turns required to build a chess coloring pattern out of blocks on it.",
    "note": "For 3\u00d73 grid ponies can make two following moves:",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1393A"
  },
  {
    "title": "Omkar and Waterslide",
    "url": "https://codeforces.com/problemset/problem/1392/C",
    "history": "Omkar is building a waterslide in his water park, and he needs your help to ensure that he does it as efficiently as possible. Omkar currently has n supports arranged in a line, the i - th of which has height a_ i . Omkar wants to build his waterslide from the right to the left, so his supports must be nondecreasing in height in order to support the waterslide. In 1 operation, Omkar can do the following: take any contiguous subsegment of supports which is nondecreasing by heights and add 1 to each of their heights. Help Omkar find the minimum number of operations he needs to perform to make his supports able to support his waterslide! An array b is a subsegment of an array c if b can be obtained from c by deletion of several ( possibly zero or all) elements from the beginning and several ( possibly zero or all) elements from the end. An array b_ 1, b_ 2, . . . , b_ n is called nondecreasing if b_ i\u2264 b_ i+ 1 for every i from 1 to n- 1 .",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of supports Omkar has. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i\u2264 10^ 9) \u2014 the heights of the supports. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output a single integer \u2014 the minimum number of operations Omkar needs to perform to make his supports able to support his waterslide.",
    "note": "The subarray with which Omkar performs the operation is bolded. In the first test case: First operation: [ 5, 3, 2, 5] \u2192 [ 5, 3, 3, 5] Second operation: [ 5, 3, 3, 5] \u2192 [ 5, 4, 4, 5] Third operation: [ 5, 4, 4, 5] \u2192 [ 5, 5, 5, 5] In the third test case, the array is already nondecreasing, so Omkar does 0 operations.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1392C"
  },
  {
    "title": "Omkar and Password",
    "url": "https://codeforces.com/problemset/problem/1392/A",
    "history": "Lord Omkar has permitted you to enter the Holy Church of Omkar! To test your worthiness, Omkar gives you a password which you must interpret! A password is an array a of n positive integers. You apply the following operation to the array: pick any two adjacent numbers that are not equal to each other and replace them with their sum. Formally, choose an index i such that 1 \u2264 i < n and a_ i= \u0338 a_ i+ 1 , delete both a_ i and a_ i+ 1 from the array and put a_ i+ a_ i+ 1 in their place. For example, for array [ 7, 4, 3, 7] you can choose i = 2 and the array will become [ 7, 4+ 3, 7] = [ 7, 7, 7] . Note that in this array you can' t apply this operation anymore. Notice that one operation will decrease the size of the password by 1 . What is the shortest possible length of the password after some number ( possibly 0 ) of operations?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . Description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the password. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 10^ 9 ) \u2014 the initial contents of your password. The sum of n over all test cases will not exceed 2 \u00b7 10^ 5 .",
    "output": "For each password, print one integer: the shortest possible length of the password after some number of operations.",
    "note": "In the first test case, you can do the following to achieve a length of 1 : Pick i= 2 to get [ 2, 4, 1] Pick i= 1 to get [ 6, 1] Pick i= 1 to get [ 7] In the second test case, you can' t perform any operations because there is no valid i that satisfies the requirements mentioned above.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1392A"
  },
  {
    "title": "505",
    "url": "https://codeforces.com/problemset/problem/1391/D",
    "history": "A binary matrix is called good if every even length square sub- matrix has an odd number of ones. Given a binary matrix a consisting of n rows and m columns, determine the minimum number of cells you need to change to make it good, or report that there is no way to make it good at all. All the terms above have their usual meanings \u2014 refer to the Notes section for their formal definitions.",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n \u2264 m \u2264 10^ 6 and n\u00b7 m \u2264 10^ 6 ) \u2014 the number of rows and columns in a , respectively. The following n lines each contain m characters, each of which is one of 0 and 1. If the j - th character on the i - th line is 1, then a_ i, j = 1 . Similarly, if the j - th character on the i - th line is 0, then a_ i, j = 0 .",
    "output": "Output the minimum number of cells you need to change to make a good, or output - 1 if it' s not possible at all.",
    "note": "In the first case, changing a_ 1, 1 to 0 and a_ 2, 2 to 1 is enough. You can verify that there is no way to make the matrix in the second case good. Some definitions \u2014 A binary matrix is one in which every element is either 1 or 0 . A sub- matrix is described by 4 parameters \u2014 r_ 1 , r_ 2 , c_ 1 , and c_ 2 ; here, 1 \u2264 r_ 1 \u2264 r_ 2 \u2264 n and 1 \u2264 c_ 1 \u2264 c_ 2 \u2264 m . This sub- matrix contains all elements a_ i, j that satisfy both r_ 1 \u2264 i \u2264 r_ 2 and c_ 1 \u2264 j \u2264 c_ 2 . A sub- matrix is, further, called an even length square if r_ 2- r_ 1 = c_ 2- c_ 1 and r_ 2- r_ 1+ 1 is divisible by 2 .",
    "topics": [
      "bitmasks",
      "brute force",
      "constructive algorithms",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1391D"
  },
  {
    "title": "Fix You",
    "url": "https://codeforces.com/problemset/problem/1391/B",
    "history": "Consider a conveyor belt represented using a grid consisting of n rows and m columns. The cell in the i - th row from the top and the j - th column from the left is labelled ( i, j) . Every cell, except ( n, m) , has a direction R ( Right) or D ( Down) assigned to it. If the cell ( i, j) is assigned direction R, any luggage kept on that will move to the cell ( i, j+ 1) . Similarly, if the cell ( i, j) is assigned direction D, any luggage kept on that will move to the cell ( i+ 1, j) . If at any moment, the luggage moves out of the grid, it is considered to be lost. There is a counter at the cell ( n, m) from where all luggage is picked. A conveyor belt is called functional if and only if any luggage reaches the counter regardless of which cell it is placed in initially. More formally, for every cell ( i, j) , any luggage placed in this cell should eventually end up in the cell ( n, m) . This may not hold initially; you are, however, allowed to change the directions of some cells to make the conveyor belt functional. Please determine the minimum amount of cells you have to change. Please note that it is always possible to make any conveyor belt functional by changing the directions of some set of cells.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 ) . Description of the test cases follows. The first line of each test case contains two integers n, m ( 1 \u2264 n \u2264 100 , 1 \u2264 m \u2264 100 ) \u2014 the number of rows and columns, respectively. The following n lines each contain m characters. The j - th character in the i - th line, a_ i, j is the initial direction of the cell ( i, j) . Please note that a_ n, m= C.",
    "output": "For each case, output in a new line the minimum number of cells that you have to change to make the conveyor belt functional.",
    "note": "In the first case, just changing the direction of ( 2, 3) to D is enough. You can verify that the resulting belt is functional. For example, if we place any luggage at ( 2, 2) , it first moves to ( 3, 2) and then to ( 3, 3) . In the second case, we have no option but to change the first 3 cells from D to R making the grid equal to RRRC.",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1391B"
  },
  {
    "title": "Good String",
    "url": "https://codeforces.com/problemset/problem/1389/C",
    "history": "Let' s call left cyclic shift of some string t_ 1 t_ 2 t_ 3 . . . t_ n - 1 t_ n as string t_ 2 t_ 3 . . . t_ n - 1 t_ n t_ 1 . Analogically, let' s call right cyclic shift of string t as string t_ n t_ 1 t_ 2 t_ 3 . . . t_ n - 1 . Let' s say string t is good if its left cyclic shift is equal to its right cyclic shift. You are given string s which consists of digits 0\u20139. What is the minimum number of characters you need to erase from s to make it good?",
    "input": "The first line contains single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Next t lines contains test cases \u2014 one per line. The first and only line of each test case contains string s ( 2 \u2264 | s| \u2264 2 \u00b7 10^ 5 ) . Each character s_ i is digit 0\u20139. It' s guaranteed that the total length of strings doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the minimum number of characters you need to erase from s to make it good.",
    "note": "In the first test case, you can erase any 3 characters, for example, the 1 - st, the 3 - rd, and the 4 - th. You' ll get string 51 and it is good. In the second test case, we can erase all characters except 0: the remaining string is 0000 and it' s good. In the third test case, the given string s is already good.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1389C"
  },
  {
    "title": "Array Walk",
    "url": "https://codeforces.com/problemset/problem/1389/B",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n , consisting of n positive integers. Initially you are standing at index 1 and have a score equal to a_ 1 . You can perform two kinds of moves: move right \u2014 go from your current index x to x+ 1 and add a_ x+ 1 to your score. This move can only be performed if x< n . move left \u2014 go from your current index x to x- 1 and add a_ x- 1 to your score. This move can only be performed if x> 1 . Also, you can' t perform two or more moves to the left in a row. You want to perform exactly k moves. Also, there should be no more than z moves to the left among them. What is the maximum score you can achieve?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of testcases. The first line of each testcase contains three integers n, k and z ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 n - 1 , 0 \u2264 z \u2264 min( 5, k) ) \u2014 the number of elements in the array, the total number of moves you should perform and the maximum number of moves to the left you can perform. The second line of each testcase contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the given array. The sum of n over all testcases does not exceed 3 \u00b7 10^ 5 .",
    "output": "Print t integers \u2014 for each testcase output the maximum score you can achieve if you make exactly k moves in total, no more than z of them are to the left and there are no two or more moves to the left in a row.",
    "note": "In the first testcase you are not allowed to move left at all. So you make four moves to the right and obtain the score a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5 . In the second example you can move one time to the left. So we can follow these moves: right, right, left, right. The score will be a_ 1 + a_ 2 + a_ 3 + a_ 2 + a_ 3 . In the third example you can move four times to the left but it' s not optimal anyway, you can just move four times to the right and obtain the score a_ 1 + a_ 2 + a_ 3 + a_ 4 + a_ 5 .",
    "topics": [
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1389B"
  },
  {
    "title": "LCM Problem",
    "url": "https://codeforces.com/problemset/problem/1389/A",
    "history": "Let LCM( x, y) be the minimum positive integer that is divisible by both x and y . For example, LCM( 13, 37) = 481 , LCM( 9, 6) = 18 . You are given two integers l and r . Find two integers x and y such that l \u2264 x < y \u2264 r and l \u2264 LCM( x, y) \u2264 r .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases. Each test case is represented by one line containing two integers l and r ( 1 \u2264 l < r \u2264 10^ 9 ) .",
    "output": "For each test case, print two integers: if it is impossible to find integers x and y meeting the constraints in the statement, print two integers equal to - 1 ; otherwise, print the values of x and y ( if there are multiple valid answers, you may print any of them) .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1389A"
  },
  {
    "title": "Captain Flint and Crew Recruitment",
    "url": "https://codeforces.com/problemset/problem/1388/A",
    "history": "Despite his bad reputation, Captain Flint is a friendly person ( at least, friendly to animals) . Now Captain Flint is searching worthy sailors to join his new crew ( solely for peaceful purposes) . A sailor is considered as worthy if he can solve Flint' s task. Recently, out of blue Captain Flint has been interested in math and even defined a new class of integers. Let' s define a positive integer x as nearly prime if it can be represented as p \u00b7 q , where 1 < p < q and p and q are prime numbers. For example, integers 6 and 10 are nearly primes ( since 2 \u00b7 3 = 6 and 2 \u00b7 5 = 10 ) , but integers 1 , 3 , 4 , 16 , 17 or 44 are not. Captain Flint guessed an integer n and asked you: can you represent it as the sum of 4 different positive integers where at least 3 of them should be nearly prime. Uncle Bogdan easily solved the task and joined the crew. Can you do the same?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Next t lines contain test cases \u2014 one per line. The first and only line of each test case contains the single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the number Flint guessed.",
    "output": "For each test case print: YES and 4 different positive integers such that at least 3 of them are nearly prime and their sum is equal to n ( if there are multiple answers print any of them) ; NO if there is no way to represent n as the sum of 4 different positive integers where at least 3 of them are nearly prime. You can print each character of YES or NO in any case.",
    "note": "In the first and second test cases, it can be proven that there are no four different positive integers such that at least three of them are nearly prime. In the third test case, n= 31= 2 \u00b7 7 + 2 \u00b7 5 + 2 \u00b7 3 + 1 : integers 14 , 10 , 6 are nearly prime. In the fourth test case, n= 36= 5 + 2 \u00b7 3 + 2 \u00b7 5 + 3 \u00b7 5 : integers 6 , 10 , 15 are nearly prime. In the fifth test case, n= 44= 2 \u00b7 3 + 7 + 2 \u00b7 5 + 3 \u00b7 7 : integers 6 , 10 , 21 are nearly prime. In the sixth test case, n= 100= 2 + 2 \u00b7 5 + 3 \u00b7 11 + 5 \u00b7 11 : integers 10 , 33 , 55 are nearly prime. In the seventh test case, n= 258= 2 \u00b7 5 + 3 \u00b7 7 + 13 \u00b7 17 + 2 \u00b7 3 : integers 10 , 21 , 221 , 6 are nearly prime.",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1388A"
  },
  {
    "title": "Koa and the Beach (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1384/B1",
    "history": "The only difference between easy and hard versions is on constraints. In this version constraints are lower. You can make hacks only if all versions of the problem are solved. Koa the Koala is at the beach! The beach consists ( from left to right) of a shore, n+ 1 meters of sea and an island at n+ 1 meters from the shore. She measured the depth of the sea at 1, 2, . . . , n meters from the shore and saved them in array d . d_ i denotes the depth of the sea at i meters from the shore for 1 \u2264 i \u2264 n . Like any beach this one has tide, the intensity of the tide is measured by parameter k and affects all depths from the beginning at time t= 0 in the following way: For a total of k seconds, each second, tide increases all depths by 1 . Then, for a total of k seconds, each second, tide decreases all depths by 1 . This process repeats again and again ( ie. depths increase for k seconds then decrease for k seconds and so on . . . ) . Formally, let' s define 0 - indexed array p = [ 0, 1, 2, . . . , k - 2, k - 1, k, k - 1, k - 2, . . . , 2, 1] of length 2k . At time t ( 0 \u2264 t ) depth at i meters from the shore equals d_ i + p[ t 2k] ( t 2k denotes the remainder of the division of t by 2k ) . Note that the changes occur instantaneously after each second, see the notes for better understanding. At time t= 0 Koa is standing at the shore and wants to get to the island. Suppose that at some time t ( 0 \u2264 t ) she is at x ( 0 \u2264 x \u2264 n ) meters from the shore: In one second Koa can swim 1 meter further from the shore ( x changes to x+ 1 ) or not swim at all ( x stays the same) , in both cases t changes to t+ 1 . As Koa is a bad swimmer, the depth of the sea at the point where she is can' t exceed l at integer points of time ( or she will drown) . More formally, if Koa is at x ( 1 \u2264 x \u2264 n ) meters from the shore at the moment t ( for some integer t\u2265 0 ) , the depth of the sea at this point \u2014 d_ x + p[ t 2k] \u2014 can' t exceed l . In other words, d_ x + p[ t 2k] \u2264 l must hold always. Once Koa reaches the island at n+ 1 meters from the shore, she stops and can rest. Note that while Koa swims tide doesn' t have effect on her ( ie. she can' t drown while swimming) . Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide ( they are solid ground and she won' t drown there) . Koa wants to know whether she can go from the shore to the island. Help her!",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains three integers n , k and l ( 1 \u2264 n \u2264 100; 1 \u2264 k \u2264 100; 1 \u2264 l \u2264 100 ) \u2014 the number of meters of sea Koa measured and parameters k and l . The second line of each test case contains n integers d_ 1, d_ 2, . . . , d_ n ( 0 \u2264 d_ i \u2264 100 ) \u2014 the depths of each meter of sea Koa measured. It is guaranteed that the sum of n over all test cases does not exceed 100 .",
    "output": "For each test case: Print Yes if Koa can get from the shore to the island, and No otherwise. You may print each letter in any case ( upper or lower) .",
    "note": "In the following s denotes the shore, i denotes the island, x denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at 1, 2, . . . , n meters from the shore. In test case 1 we have n = 2, k = 1, l = 1, p = [ 0, 1 ] . Koa wants to go from shore ( at x = 0 ) to the island ( at x = 3 ) . Let' s describe a possible solution: Initially at t = 0 the beach looks like this: [ s, 1, 0, i] . At t = 0 if Koa would decide to swim to x = 1 , beach would look like: [ s, 2, 1, i] at t = 1 , since 2 > 1 she would drown. So Koa waits 1 second instead and beach looks like [ s, 2, 1, i] at t = 1 . At t = 1 Koa swims to x = 1 , beach looks like [ s, 1, 0, i] at t = 2 . Koa doesn' t drown because 1 \u2264 1 . At t = 2 Koa swims to x = 2 , beach looks like [ s, 2, 1, i] at t = 3 . Koa doesn' t drown because 1 \u2264 1 . At t = 3 Koa swims to x = 3 , beach looks like [ s, 1, 0, i] at t = 4 . At t = 4 Koa is at x = 3 and she made it! We can show that in test case 2 Koa can' t get to the island.",
    "topics": [
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1384B1"
  },
  {
    "title": "Weights Division (easy version)",
    "url": "https://codeforces.com/problemset/problem/1399/E1",
    "history": "Easy and hard versions are actually different problems, so we advise you to read both statements carefully. You are given a weighted rooted tree, vertex 1 is the root of this tree. A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a vertex v is the last different from v vertex on the path from the root to the vertex v . Children of vertex v are all vertices for which v is the parent. A vertex is a leaf if it has no children. The weighted tree is such a tree that each edge of this tree has some weight. The weight of the path is the sum of edges weights on this path. The weight of the path from the vertex to itself is 0 . You can make a sequence of zero or more moves. On each move, you select an edge and divide its weight by 2 rounding down. More formally, during one move, you choose some edge i and divide its weight by 2 rounding down ( w_ i : = \u230aw_ i/ 2\u230b ) . Your task is to find the minimum number of moves required to make the sum of weights of paths from the root to each leaf at most S . In other words, if w( i, j) is the weight of the path from the vertex i to the vertex j , then you have to make \u2211_ v \u2208 leaves w( root, v) \u2264 S , where leaves is the list of all leaves. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and S ( 2 \u2264 n \u2264 10^ 5; 1 \u2264 S \u2264 10^ 16 ) \u2014 the number of vertices in the tree and the maximum possible sum of weights you have to obtain. The next n- 1 lines describe edges of the tree. The edge i is described as three integers v_ i , u_ i and w_ i ( 1 \u2264 v_ i, u_ i \u2264 n; 1 \u2264 w_ i \u2264 10^ 6 ) , where v_ i and u_ i are vertices the edge i connects and w_ i is the weight of this edge. It is guaranteed that the sum of n does not exceed 10^ 5 ( \u2211 n \u2264 10^ 5 ) .",
    "output": "For each test case, print the answer: the minimum number of moves required to make the sum of weights of paths from the root to each leaf at most S .",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1399E1"
  },
  {
    "title": "Gifts Fixing",
    "url": "https://codeforces.com/problemset/problem/1399/B",
    "history": "You have n gifts and you want to give all of them to children. Of course, you don' t want to offend anyone, so all gifts should be equal between each other. The i - th gift consists of a_ i candies and b_ i oranges. During one move, you can choose some gift 1 \u2264 i \u2264 n and do one of the following operations: eat exactly one candy from this gift ( decrease a_ i by one) ; eat exactly one orange from this gift ( decrease b_ i by one) ; eat exactly one candy and exactly one orange from this gift ( decrease both a_ i and b_ i by one) . Of course, you can not eat a candy or orange if it' s not present in the gift ( so neither a_ i nor b_ i can become less than zero) . As said above, all gifts should be equal. This means that after some sequence of moves the following two conditions should be satisfied: a_ 1 = a_ 2 = . . . = a_ n and b_ 1 = b_ 2 = . . . = b_ n ( and a_ i equals b_ i is not necessary) . Your task is to find the minimum number of moves required to equalize all the given gifts. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of gifts. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the number of candies in the i - th gift. The third line of the test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 9 ) , where b_ i is the number of oranges in the i - th gift.",
    "output": "For each test case, print one integer: the minimum number of moves required to equalize all the given gifts.",
    "note": "In the first test case of the example, we can perform the following sequence of moves: choose the first gift and eat one orange from it, so a = [ 3, 5, 6] and b = [ 2, 2, 3] ; choose the second gift and eat one candy from it, so a = [ 3, 4, 6] and b = [ 2, 2, 3] ; choose the second gift and eat one candy from it, so a = [ 3, 3, 6] and b = [ 2, 2, 3] ; choose the third gift and eat one candy and one orange from it, so a = [ 3, 3, 5] and b = [ 2, 2, 2] ; choose the third gift and eat one candy from it, so a = [ 3, 3, 4] and b = [ 2, 2, 2] ; choose the third gift and eat one candy from it, so a = [ 3, 3, 3] and b = [ 2, 2, 2] .",
    "topics": [
      "greedy"
    ],
    "id": "1399B"
  },
  {
    "title": "Two Types of Spells",
    "url": "https://codeforces.com/problemset/problem/1398/E",
    "history": "Polycarp plays a computer game ( yet again) . In this game, he fights monsters using magic spells. There are two types of spells: fire spell of power x deals x damage to the monster, and lightning spell of power y deals y damage to the monster and doubles the damage of the next spell Polycarp casts. Each spell can be cast only once per battle, but Polycarp can cast them in any order. For example, suppose that Polycarp knows three spells: a fire spell of power 5 , a lightning spell of power 1 , and a lightning spell of power 8 . There are 6 ways to choose the order in which he casts the spells: first, second, third. This order deals 5 + 1 + 2 \u00b7 8 = 22 damage; first, third, second. This order deals 5 + 8 + 2 \u00b7 1 = 15 damage; second, first, third. This order deals 1 + 2 \u00b7 5 + 8 = 19 damage; second, third, first. This order deals 1 + 2 \u00b7 8 + 2 \u00b7 5 = 27 damage; third, first, second. This order deals 8 + 2 \u00b7 5 + 1 = 19 damage; third, second, first. This order deals 8 + 2 \u00b7 1 + 2 \u00b7 5 = 20 damage. Initially, Polycarp knows 0 spells. His spell set changes n times, each time he either learns a new spell or forgets an already known one. After each change, calculate the maximum possible damage Polycarp may deal using the spells he knows.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of changes to the spell set. Each of the next n lines contains two integers tp and d ( 0 \u2264 tp_ i \u2264 1 ; - 10^ 9 \u2264 d \u2264 10^ 9 ; d_ i = \u0338 0 ) \u2014 the description of the change. If tp_ i if equal to 0 , then Polycarp learns ( or forgets) a fire spell, otherwise he learns ( or forgets) a lightning spell. If d_ i > 0 , then Polycarp learns a spell of power d_ i . Otherwise, Polycarp forgets a spell with power - d_ i , and it is guaranteed that he knew that spell before the change. It is guaranteed that the powers of all spells Polycarp knows after each change are different ( Polycarp never knows two spells with the same power) .",
    "output": "After each change, print the maximum damage Polycarp can deal with his current set of spells.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1398E"
  },
  {
    "title": "Boboniu and Bit Operations",
    "url": "https://codeforces.com/problemset/problem/1395/C",
    "history": "Boboniu likes bit operations. He wants to play a game with you. Boboniu gives you two sequences of non- negative integers a_ 1, a_ 2, . . . , a_ n and b_ 1, b_ 2, . . . , b_ m . For each i ( 1\u2264 i\u2264 n ) , you' re asked to choose a j ( 1\u2264 j\u2264 m ) and let c_ i= a_ i& b_ j , where & denotes the bitwise AND operation. Note that you can pick the same j for different i ' s. Find the minimum possible c_ 1 | c_ 2 | . . . | c_ n , where | denotes the bitwise OR operation.",
    "input": "The first line contains two integers n and m ( 1\u2264 n, m\u2264 200 ) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i < 2^ 9 ) . The next line contains m integers b_ 1, b_ 2, . . . , b_ m ( 0\u2264 b_ i < 2^ 9 ) .",
    "output": "Print one integer: the minimum possible c_ 1 | c_ 2 | . . . | c_ n .",
    "note": "For the first example, we have c_ 1= a_ 1& b_ 2= 0 , c_ 2= a_ 2& b_ 1= 2 , c_ 3= a_ 3& b_ 1= 0 , c_ 4 = a_ 4& b_ 1= 0 . Thus c_ 1 | c_ 2 | c_ 3 | c_ 4 = 2 , and this is the minimal answer we can get.",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1395C"
  },
  {
    "title": "Boboniu and Jianghu",
    "url": "https://codeforces.com/problemset/problem/1394/D",
    "history": "Since Boboniu finished building his Jianghu, he has been doing Kungfu on these mountains every day. Boboniu designs a map for his n mountains. He uses n- 1 roads to connect all n mountains. Every pair of mountains is connected via roads. For the i - th mountain, Boboniu estimated the tiredness of doing Kungfu on the top of it as t_ i . He also estimated the height of each mountain as h_ i . A path is a sequence of mountains M such that for each i ( 1 \u2264 i < | M| ) , there exists a road between M_ i and M_ i+ 1 . Boboniu would regard the path as a challenge if for each i ( 1\u2264 i< | M| ) , h_ M_ i\u2264 h_ M_ i+ 1 . Boboniu wants to divide all n- 1 roads into several challenges. Note that each road must appear in exactly one challenge, but a mountain may appear in several challenges. Boboniu wants to minimize the total tiredness to do all the challenges. The tiredness of a challenge M is the sum of tiredness of all mountains in it, i. e. \u2211_ i= 1^ | M| t_ M_ i . He asked you to find the minimum total tiredness. As a reward for your work, you' ll become a guardian in his Jianghu.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) , denoting the number of the mountains. The second line contains n integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 10^ 6 ) , denoting the tiredness for Boboniu to do Kungfu on each mountain. The third line contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 6 ) , denoting the height of each mountain. Each of the following n - 1 lines contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i = \u0338 v_ i ) , denoting the ends of the road. It' s guaranteed that all mountains are connected via roads.",
    "output": "Print one integer: the smallest sum of tiredness of all challenges.",
    "note": "For the first example: In the picture, the lighter a point is, the higher the mountain it represents. One of the best divisions is: Challenge 1 : 3 \u2192 1 \u2192 2 Challenge 2 : 5 \u2192 2 \u2192 4 The total tiredness of Boboniu is ( 30 + 40 + 10) + ( 20 + 10 + 50) = 160 . It can be shown that this is the minimum total tiredness.",
    "topics": [
      "dp",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1394D"
  },
  {
    "title": "Omkar and Landslide",
    "url": "https://codeforces.com/problemset/problem/1392/F",
    "history": "Omkar is standing at the foot of Celeste mountain. The summit is n meters away from him, and he can see all of the mountains up to the summit, so for all 1 \u2264 j \u2264 n he knows that the height of the mountain at the point j meters away from himself is h_ j meters. It turns out that for all j satisfying 1 \u2264 j \u2264 n - 1 , h_ j < h_ j + 1 ( meaning that heights are strictly increasing) . Suddenly, a landslide occurs! While the landslide is occurring, the following occurs: every minute, if h_ j + 2 \u2264 h_ j + 1 , then one square meter of dirt will slide from position j + 1 to position j , so that h_ j + 1 is decreased by 1 and h_ j is increased by 1 . These changes occur simultaneously, so for example, if h_ j + 2 \u2264 h_ j + 1 and h_ j + 1 + 2 \u2264 h_ j + 2 for some j , then h_ j will be increased by 1 , h_ j + 2 will be decreased by 1 , and h_ j + 1 will be both increased and decreased by 1 , meaning that in effect h_ j + 1 is unchanged during that minute. The landslide ends when there is no j such that h_ j + 2 \u2264 h_ j + 1 . Help Omkar figure out what the values of h_ 1, . . . , h_ n will be after the landslide ends. It can be proven that under the given constraints, the landslide will always end in finitely many minutes. Note that because of the large amount of input, it is recommended that your code uses fast IO.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) . The second line contains n integers h_ 1, h_ 2, . . . , h_ n satisfying 0 \u2264 h_ 1 < h_ 2 < . . . < h_ n \u2264 10^ 12 \u2014 the heights.",
    "output": "Output n integers, where the j - th integer is the value of h_ j after the landslide has stopped.",
    "note": "Initially, the mountain has heights 2, 6, 7, 8 . In the first minute, we have 2 + 2 \u2264 6 , so 2 increases to 3 and 6 decreases to 5 , leaving 3, 5, 7, 8 . In the second minute, we have 3 + 2 \u2264 5 and 5 + 2 \u2264 7 , so 3 increases to 4 , 5 is unchanged, and 7 decreases to 6 , leaving 4, 5, 6, 8 . In the third minute, we have 6 + 2 \u2264 8 , so 6 increases to 7 and 8 decreases to 7 , leaving 4, 5, 7, 7 . In the fourth minute, we have 5 + 2 \u2264 7 , so 5 increases to 6 and 7 decreases to 6 , leaving 4, 6, 6, 7 . In the fifth minute, we have 4 + 2 \u2264 6 , so 4 increases to 5 and 6 decreases to 5 , leaving 5, 5, 6, 7 . In the sixth minute, nothing else can change so the landslide stops and our answer is 5, 5, 6, 7 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1392F"
  },
  {
    "title": "Omkar and Bed Wars",
    "url": "https://codeforces.com/problemset/problem/1392/D",
    "history": "Omkar is playing his favorite pixelated video game, Bed Wars! In Bed Wars, there are n players arranged in a circle, so that for all j such that 2 \u2264 j \u2264 n , player j - 1 is to the left of the player j , and player j is to the right of player j - 1 . Additionally, player n is to the left of player 1 , and player 1 is to the right of player n . Currently, each player is attacking either the player to their left or the player to their right. This means that each player is currently being attacked by either 0 , 1 , or 2 other players. A key element of Bed Wars strategy is that if a player is being attacked by exactly 1 other player, then they should logically attack that player in response. If instead a player is being attacked by 0 or 2 other players, then Bed Wars strategy says that the player can logically attack either of the adjacent players. Unfortunately, it might be that some players in this game are not following Bed Wars strategy correctly. Omkar is aware of whom each player is currently attacking, and he can talk to any amount of the n players in the game to make them instead attack another player \u2014 i. e. if they are currently attacking the player to their left, Omkar can convince them to instead attack the player to their right; if they are currently attacking the player to their right, Omkar can convince them to instead attack the player to their left. Omkar would like all players to be acting logically. Calculate the minimum amount of players that Omkar needs to talk to so that after all players he talked to ( if any) have changed which player they are attacking, all players are acting logically according to Bed Wars strategy.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The descriptions of the test cases follows. The first line of each test case contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the amount of players ( and therefore beds) in this game of Bed Wars. The second line of each test case contains a string s of length n . The j - th character of s is equal to L if the j - th player is attacking the player to their left, and R if the j - th player is attacking the player to their right. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one integer: the minimum number of players Omkar needs to talk to to make it so that all players are acting logically according to Bed Wars strategy. It can be proven that it is always possible for Omkar to achieve this under the given constraints.",
    "note": "In the first test case, players 1 and 2 are attacking each other, and players 3 and 4 are attacking each other. Each player is being attacked by exactly 1 other player, and each player is attacking the player that is attacking them, so all players are already being logical according to Bed Wars strategy and Omkar does not need to talk to any of them, making the answer 0 . In the second test case, not every player acts logically: for example, player 3 is attacked only by player 2 , but doesn' t attack him in response. Omkar can talk to player 3 to convert the attack arrangement to LRLRRL, in which you can see that all players are being logical according to Bed Wars strategy, making the answer 1 .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1392D"
  },
  {
    "title": "Pairs of Pairs",
    "url": "https://codeforces.com/problemset/problem/1391/E",
    "history": "You have a simple and connected undirected graph consisting of n nodes and m edges. Consider any way to pair some subset of these n nodes such that no node is present in more than one pair. This pairing is valid if for every pair of pairs, the induced subgraph containing all 4 nodes, two from each pair, has at most 2 edges ( out of the 6 possible edges) . More formally, for any two pairs, ( a, b) and ( c, d) , the induced subgraph with nodes { a, b, c, d} should have at most 2 edges. Please note that the subgraph induced by a set of nodes contains nodes only from this set and edges which have both of its end points in this set. Now, do one of the following: Find a simple path consisting of at least \u2308n/ 2\u2309 nodes. Here, a path is called simple if it does not visit any node multiple times. Find a valid pairing in which at least \u2308n/ 2\u2309 nodes are paired. It can be shown that it is possible to find at least one of the two in every graph satisfying constraints from the statement.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 5 ) . Description of the test cases follows. The first line of each test case contains 2 integers n, m ( 2 \u2264 n \u2264 5\u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 6 ) , denoting the number of nodes and edges, respectively. The next m lines each contain 2 integers u and v ( 1 \u2264 u, v \u2264 n , u = \u0338 v ) , denoting that there is an undirected edge between nodes u and v in the given graph. It is guaranteed that the given graph is connected, and simple \u2014 it does not contain multiple edges between the same pair of nodes, nor does it have any self- loops. It is guaranteed that the sum of n over all test cases does not exceed 5\u00b7 10^ 5 . It is guaranteed that the sum of m over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, the output format is as follows. If you have found a pairing, in the first line output \" PAIRING\" ( without quotes) . Then, output k ( \u2308n/ 2\u2309\u2264 2\u00b7 k \u2264 n ) , the number of pairs in your pairing. Then, in each of the next k lines, output 2 integers a and b \u2014 denoting that a and b are paired with each other. Note that the graph does not have to have an edge between a and b ! This pairing has to be valid, and every node has to be a part of at most 1 pair. Otherwise, in the first line output \" PATH\" ( without quotes) . Then, output k ( \u2308n/ 2\u2309\u2264 k \u2264 n ) , the number of nodes in your path. Then, in the second line, output k integers, v_ 1, v_ 2, . . . , v_ k , in the order in which they appear on the path. Formally, v_ i and v_ i+ 1 should have an edge between them for every i ( 1 \u2264 i < k ) . This path has to be simple, meaning no node should appear more than once.",
    "note": "The path outputted in the first case is the following. The pairing outputted in the second case is the following. Here is an invalid pairing for the same graph \u2014 the subgraph { 1, 3, 4, 5} has 3 edges. Here is the pairing outputted in the third case. It' s valid because \u2014 The subgraph { 1, 8, 2, 5} has edges ( 1 , 2 ) and ( 1 , 5 ) . The subgraph { 1, 8, 4, 10} has edges ( 1 , 4 ) and ( 4 , 10 ) . The subgraph { 4, 10, 2, 5} has edges ( 2 , 4 ) and ( 4 , 10 ) . Here is the pairing outputted in the fourth case.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1391E"
  },
  {
    "title": "Segment Intersections",
    "url": "https://codeforces.com/problemset/problem/1389/D",
    "history": "You are given two lists of segments [ al_ 1, ar_ 1] , [ al_ 2, ar_ 2] , . . . , [ al_ n, ar_ n] and [ bl_ 1, br_ 1] , [ bl_ 2, br_ 2] , . . . , [ bl_ n, br_ n] . Initially, all segments [ al_ i, ar_ i] are equal to [ l_ 1, r_ 1] and all segments [ bl_ i, br_ i] are equal to [ l_ 2, r_ 2] . In one step, you can choose one segment ( either from the first or from the second list) and extend it by 1 . In other words, suppose you' ve chosen segment [ x, y] then you can transform it either into [ x - 1, y] or into [ x, y + 1] . Let' s define a total intersection I as the sum of lengths of intersections of the corresponding pairs of segments, i. e. \u2211_ i= 1^ nintersection_ length( [ al_ i, ar_ i] , [ bl_ i, br_ i] ) . Empty intersection has length 0 and length of a segment [ x, y] is equal to y - x . What is the minimum number of steps you need to make I greater or equal to k ?",
    "input": "The first line contains the single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 10^ 9 ) \u2014 the length of lists and the minimum required total intersection. The second line of each test case contains two integers l_ 1 and r_ 1 ( 1 \u2264 l_ 1 \u2264 r_ 1 \u2264 10^ 9 ) \u2014 the segment all [ al_ i, ar_ i] are equal to initially. The third line of each test case contains two integers l_ 2 and r_ 2 ( 1 \u2264 l_ 2 \u2264 r_ 2 \u2264 10^ 9 ) \u2014 the segment all [ bl_ i, br_ i] are equal to initially. It' s guaranteed that the sum of n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print t integers \u2014 one per test case. For each test case, print the minimum number of step you need to make I greater or equal to k .",
    "note": "In the first test case, we can achieve total intersection 5 , for example, using next strategy: make [ al_ 1, ar_ 1] from [ 1, 2] to [ 1, 4] in 2 steps; make [ al_ 2, ar_ 2] from [ 1, 2] to [ 1, 3] in 1 step; make [ bl_ 1, br_ 1] from [ 3, 4] to [ 1, 4] in 2 steps; make [ bl_ 2, br_ 2] from [ 3, 4] to [ 1, 4] in 2 steps. In result, I = intersection_ length( [ al_ 1, ar_ 1] , [ bl_ 1, br_ 1] ) + intersection_ length( [ al_ 2, ar_ 2] , [ bl_ 2, br_ 2] ) + + intersection_ length( [ al_ 3, ar_ 3] , [ bl_ 3, br_ 3] ) = 3 + 2 + 0 = 5 In the second test case, we can make [ al_ 1, ar_ 1] = [ 0, 1000000000] in 1000000000 steps and [ bl_ 1, br_ 1] = [ 0, 1000000000] in 1000000000 steps. In the third test case, the total intersection I is already equal to 10 > 3 , so we don' t need to do any steps.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1389D"
  },
  {
    "title": "Captain Flint and Treasure",
    "url": "https://codeforces.com/problemset/problem/1388/D",
    "history": "Captain Fint is involved in another treasure hunt, but have found only one strange problem. The problem may be connected to the treasure' s location or may not. That' s why captain Flint decided to leave the solving the problem to his crew and offered an absurdly high reward: one day off. The problem itself sounds like this. . . There are two arrays a and b of length n . Initially, an ans is equal to 0 and the following operation is defined: Choose position i ( 1 \u2264 i \u2264 n ) ; Add a_ i to ans ; If b_ i = \u0338 - 1 then add a_ i to a_ b_ i . What is the maximum ans you can get by performing the operation on each i ( 1 \u2264 i \u2264 n ) exactly once? Uncle Bogdan is eager to get the reward, so he is asking your help to find the optimal order of positions to perform the operation on them.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of arrays a and b . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( \u221210^ 6 \u2264 a_ i \u2264 10^ 6 ) . The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 n or b_ i = - 1 ) . Additional constraint: it' s guaranteed that for any i ( 1 \u2264 i \u2264 n ) the sequence b_ i, b_ b_ i, b_ b_ b_ i, . . . is not cyclic, in other words it will always end with - 1 .",
    "output": "In the first line, print the maximum ans you can get. In the second line, print the order of operations: n different integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) . The p_ i is the position which should be chosen at the i - th step. If there are multiple orders, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1388D"
  },
  {
    "title": "Uncle Bogdan and Country Happiness",
    "url": "https://codeforces.com/problemset/problem/1388/C",
    "history": "Uncle Bogdan is in captain Flint' s crew for a long time and sometimes gets nostalgic for his homeland. Today he told you how his country introduced a happiness index. There are n cities and n\u22121 undirected roads connecting pairs of cities. Citizens of any city can reach any other city traveling by these roads. Cities are numbered from 1 to n and the city 1 is a capital. In other words, the country has a tree structure. There are m citizens living in the country. A p_ i people live in the i - th city but all of them are working in the capital. At evening all citizens return to their home cities using the shortest paths. Every person has its own mood: somebody leaves his workplace in good mood but somebody are already in bad mood. Moreover any person can ruin his mood on the way to the hometown. If person is in bad mood he won' t improve it. Happiness detectors are installed in each city to monitor the happiness of each person who visits the city. The detector in the i - th city calculates a happiness index h_ i as the number of people in good mood minus the number of people in bad mood. Let' s say for the simplicity that mood of a person doesn' t change inside the city. Happiness detector is still in development, so there is a probability of a mistake in judging a person' s happiness. One late evening, when all citizens successfully returned home, the government asked uncle Bogdan ( the best programmer of the country) to check the correctness of the collected happiness indexes. Uncle Bogdan successfully solved the problem. Can you do the same? More formally, You need to check: \" Is it possible that, after all people return home, for each city i the happiness index will be equal exactly to h_ i \" .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 ; 0 \u2264 m \u2264 10^ 9 ) \u2014 the number of cities and citizens. The second line of each test case contains n integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i \u2264 m ; p_ 1 + p_ 2 + . . . + p_ n = m ) , where p_ i is the number of people living in the i - th city. The third line contains n integers h_ 1, h_ 2, . . . , h_ n ( - 10^ 9 \u2264 h_ i \u2264 10^ 9 ) , where h_ i is the calculated happiness index of the i - th city. Next n \u2212 1 lines contain description of the roads, one per line. Each line contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i = \u0338 y_ i ) , where x_ i and y_ i are cities connected by the i - th road. It' s guaranteed that the sum of n from all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print YES, if the collected data is correct, or NO \u2014 otherwise. You can print characters in YES or NO in any case.",
    "note": "Let' s look at the first test case of the first sample: At first, all citizens are in the capital. Let' s describe one of possible scenarios: a person from city 1 : he lives in the capital and is in good mood; a person from city 4 : he visited cities 1 and 4 , his mood was ruined between cities 1 and 4 ; a person from city 3 : he visited cities 1 and 3 in good mood; a person from city 6 : he visited cities 1 , 3 and 6 , his mood was ruined between cities 1 and 3 ; In total, h_ 1 = 4 - 0 = 4 , h_ 2 = 0 , h_ 3 = 1 - 1 = 0 , h_ 4 = 0 - 1 = - 1 , h_ 5 = 0 , h_ 6 = 0 - 1 = - 1 , h_ 7 = 0 . The second case of the first test: All people have already started in bad mood in the capital \u2014 this is the only possible scenario. The first case of the second test: The second case of the second test: It can be proven that there is no way to achieve given happiness indexes in both cases of the second test.",
    "topics": [
      "dfs and similar",
      "greedy",
      "math",
      "trees"
    ],
    "id": "1388C"
  },
  {
    "title": "Captain Flint and a Long Voyage",
    "url": "https://codeforces.com/problemset/problem/1388/B",
    "history": "Captain Flint and his crew keep heading to a savage shore of Byteland for several months already, drinking rum and telling stories. In such moments uncle Bogdan often remembers his nephew Denis. Today, he has told a story about how Denis helped him to come up with an interesting problem and asked the crew to solve it. In the beginning, uncle Bogdan wrote on a board a positive integer x consisting of n digits. After that, he wiped out x and wrote integer k instead, which was the concatenation of binary representations of digits x consists of ( without leading zeroes) . For example, let x = 729 , then k = 111101001 ( since 7 = 111 , 2 = 10 , 9 = 1001 ) . After some time, uncle Bogdan understood that he doesn' t know what to do with k and asked Denis to help. Denis decided to wipe last n digits of k and named the new number as r . As a result, Denis proposed to find such integer x of length n that r ( as number) is maximum possible. If there are multiple valid x then Denis is interested in the minimum one. All crew members, including captain Flint himself, easily solved the task. All, except cabin boy Kostya, who was too drunk to think straight. But what about you? Note: in this task, we compare integers ( x or k ) as numbers ( despite what representations they are written in) , so 729 < 1999 or 111 < 1000 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Next t lines contain test cases \u2014 one per test case. The one and only line of each test case contains the single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the integer x you need to find. It' s guaranteed that the sum of n from all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print the minimum integer x of length n such that obtained by Denis number r is maximum possible.",
    "note": "In the second test case ( with n = 3 ) , if uncle Bogdan had x = 998 then k = 100110011000 . Denis ( by wiping last n = 3 digits) will obtain r = 100110011 . It can be proved that the 100110011 is the maximum possible r Denis can obtain and 998 is the minimum x to obtain it.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1388B"
  },
  {
    "title": "Village (Minimum)",
    "url": "https://codeforces.com/problemset/problem/1387/B1",
    "history": "This problem is split into two tasks. In this task, you are required to find the minimum possible answer. In the task Village ( Maximum) you are required to find the maximum possible answer. Each task is worth 50 points. There are N houses in a certain village. A single villager lives in each of the houses. The houses are connected by roads. Each road connects two houses and is exactly 1 kilometer long. From each house it is possible to reach any other using one or several consecutive roads. In total there are N- 1 roads in the village. One day all villagers decided to move to different houses \u2014 that is, after moving each house should again have a single villager living in it, but no villager should be living in the same house as before. We would like to know the smallest possible total length in kilometers of the shortest paths between the old and the new houses for all villagers. Example village with seven houses For example, if there are seven houses connected by roads as shown on the figure, the smallest total length is 8 km ( this can be achieved by moving 1 \u2192 6 , 2 \u2192 4 , 3 \u2192 1 , 4 \u2192 2 , 5 \u2192 7 , 6 \u2192 3 , 7 \u2192 5 ) . Write a program that finds the smallest total length of the shortest paths in kilometers and an example assignment of the new houses to the villagers. ScoringSubtasks: ( 6 points) N \u2264 10 ( 19 points) N \u2264 1 000 ( 25 points) No further constraints",
    "input": "The first line contains an integer N ( 1 < N \u2264 10^ 5 ) . Houses are numbered by consecutive integers 1, 2, . . . , N . Then N- 1 lines follow that describe the roads. Each line contains two integers a and b ( 1 \u2264 a, b \u2264 N , a = \u0338 b ) denoting that there is a road connecting houses a and b .",
    "output": "In the first line output the smallest total length of the shortest paths in kilometers. In the second line describe one valid assignment of the new houses with the smallest total length: N space- separated distinct integers v_ 1, v_ 2, . . . , v_ N . For each i , v_ i is the house number where the villager from the house i should move ( v_ i = \u0338 i ) . If there are several valid assignments, output any of those.",
    "note": "",
    "topics": [
      "*special",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1387B1"
  },
  {
    "title": "Removing Leaves",
    "url": "https://codeforces.com/problemset/problem/1385/F",
    "history": "You are given a tree ( connected graph without cycles) consisting of n vertices. The tree is unrooted \u2014 it is just a connected undirected graph without cycles. In one move, you can choose exactly k leaves ( leaf is such a vertex that is connected to only one another vertex) connected to the same vertex and remove them with edges incident to them. I. e. you choose such leaves u_ 1, u_ 2, . . . , u_ k that there are edges ( u_ 1, v) , ( u_ 2, v) , . . . , ( u_ k, v) and remove these leaves and these edges. Your task is to find the maximum number of moves you can perform if you remove leaves optimally. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k < n ) \u2014 the number of vertices in the tree and the number of leaves you remove in one move, respectively. The next n- 1 lines describe edges. The i - th edge is represented as two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) , where x_ i and y_ i are vertices the i - th edge connects. It is guaranteed that the given set of edges forms a tree. It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the maximum number of moves you can perform if you remove leaves optimally.",
    "note": "The picture corresponding to the first test case of the example: There you can remove vertices 2 , 5 and 3 during the first move and vertices 1 , 7 and 4 during the second move. The picture corresponding to the second test case of the example: There you can remove vertices 7 , 8 and 9 during the first move, then vertices 5 , 6 and 10 during the second move and vertices 1 , 3 and 4 during the third move. The picture corresponding to the third test case of the example: There you can remove vertices 5 and 7 during the first move, then vertices 2 and 4 during the second move and vertices 1 and 6 during the third move.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1385F"
  },
  {
    "title": "Make It Good",
    "url": "https://codeforces.com/problemset/problem/1385/C",
    "history": "You are given an array a consisting of n integers. You have to find the length of the smallest ( shortest) prefix of elements you need to erase from a to make it a good array. Recall that the prefix of the array a= [ a_ 1, a_ 2, . . . , a_ n] is a subarray consisting several first elements: the prefix of the array a of length k is the array [ a_ 1, a_ 2, . . . , a_ k] ( 0 \u2264 k \u2264 n ) . The array b of length m is called good, if you can obtain a non- decreasing array c ( c_ 1 \u2264 c_ 2 \u2264. . . \u2264 c_ m ) from it, repeating the following operation m times ( initially, c is empty) : select either the first or the last element of b , remove it from b , and append it to the end of the array c . For example, if we do 4 operations: take b_ 1 , then b_ m , then b_ m- 1 and at last b_ 2 , then b becomes [ b_ 3, b_ 4, . . . , b_ m- 3] and c = [ b_ 1, b_ m, b_ m- 1, b_ 2] . Consider the following example: b = [ 1, 2, 3, 4, 4, 2, 1] . This array is good because we can obtain non- decreasing array c from it by the following sequence of operations: take the first element of b , so b = [ 2, 3, 4, 4, 2, 1] , c = [ 1] ; take the last element of b , so b = [ 2, 3, 4, 4, 2] , c = [ 1, 1] ; take the last element of b , so b = [ 2, 3, 4, 4] , c = [ 1, 1, 2] ; take the first element of b , so b = [ 3, 4, 4] , c = [ 1, 1, 2, 2] ; take the first element of b , so b = [ 4, 4] , c = [ 1, 1, 2, 2, 3] ; take the last element of b , so b = [ 4] , c = [ 1, 1, 2, 2, 3, 4] ; take the only element of b , so b = [ ] , c = [ 1, 1, 2, 2, 3, 4, 4] \u2014 c is non- decreasing. Note that the array consisting of one element is good. Print the length of the shortest prefix of a to delete ( erase) , to make a to be a good array. Note that the required length can be 0 . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer: the length of the shortest prefix of elements you need to erase from a to make it a good array.",
    "note": "In the first test case of the example, the array a is already good, so we don' t need to erase any prefix. In the second test case of the example, the initial array a is not good. Let' s erase first 4 elements of a , the result is [ 4, 5, 2] . The resulting array is good. You can prove that if you erase fewer number of first elements, the result will not be good.",
    "topics": [
      "greedy"
    ],
    "id": "1385C"
  },
  {
    "title": "Restore the Permutation by Merger",
    "url": "https://codeforces.com/problemset/problem/1385/B",
    "history": "A permutation of length n is a sequence of integers from 1 to n of length n containing each number exactly once. For example, [ 1] , [ 4, 3, 5, 1, 2] , [ 3, 2, 1] are permutations, and [ 1, 1] , [ 0, 1] , [ 2, 2, 1, 4] are not. There was a permutation p[ 1 . . . n] . It was merged with itself. In other words, let' s take two instances of p and insert elements of the second p into the first maintaining relative order of elements. The result is a sequence of the length 2n . For example, if p= [ 3, 1, 2] some possible results are: [ 3, 1, 2, 3, 1, 2] , [ 3, 3, 1, 1, 2, 2] , [ 3, 1, 3, 1, 2, 2] . The following sequences are not possible results of a merging: [ 1, 3, 2, 1, 2, 3 ] , [ 3, 1, 2, 3, 2, 1] , [ 3, 3, 1, 2, 2, 1] . For example, if p= [ 2, 1] the possible results are: [ 2, 2, 1, 1] , [ 2, 1, 2, 1] . The following sequences are not possible results of a merging: [ 1, 1, 2, 2 ] , [ 2, 1, 1, 2] , [ 1, 2, 2, 1] . Your task is to restore the permutation p by the given resulting sequence a . It is guaranteed that the answer exists and is unique. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 400 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of permutation. The second line of the test case contains 2n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the i - th element of a . It is guaranteed that the array a represents the result of merging of some permutation p with the same permutation p .",
    "output": "For each test case, print the answer: n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) , representing the initial permutation. It is guaranteed that the answer exists and is unique.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1385B"
  },
  {
    "title": "Koa and the Beach (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1384/B2",
    "history": "The only difference between easy and hard versions is on constraints. In this version constraints are higher. You can make hacks only if all versions of the problem are solved. Koa the Koala is at the beach! The beach consists ( from left to right) of a shore, n+ 1 meters of sea and an island at n+ 1 meters from the shore. She measured the depth of the sea at 1, 2, . . . , n meters from the shore and saved them in array d . d_ i denotes the depth of the sea at i meters from the shore for 1 \u2264 i \u2264 n . Like any beach this one has tide, the intensity of the tide is measured by parameter k and affects all depths from the beginning at time t= 0 in the following way: For a total of k seconds, each second, tide increases all depths by 1 . Then, for a total of k seconds, each second, tide decreases all depths by 1 . This process repeats again and again ( ie. depths increase for k seconds then decrease for k seconds and so on . . . ) . Formally, let' s define 0 - indexed array p = [ 0, 1, 2, . . . , k - 2, k - 1, k, k - 1, k - 2, . . . , 2, 1] of length 2k . At time t ( 0 \u2264 t ) depth at i meters from the shore equals d_ i + p[ t 2k] ( t 2k denotes the remainder of the division of t by 2k ) . Note that the changes occur instantaneously after each second, see the notes for better understanding. At time t= 0 Koa is standing at the shore and wants to get to the island. Suppose that at some time t ( 0 \u2264 t ) she is at x ( 0 \u2264 x \u2264 n ) meters from the shore: In one second Koa can swim 1 meter further from the shore ( x changes to x+ 1 ) or not swim at all ( x stays the same) , in both cases t changes to t+ 1 . As Koa is a bad swimmer, the depth of the sea at the point where she is can' t exceed l at integer points of time ( or she will drown) . More formally, if Koa is at x ( 1 \u2264 x \u2264 n ) meters from the shore at the moment t ( for some integer t\u2265 0 ) , the depth of the sea at this point \u2014 d_ x + p[ t 2k] \u2014 can' t exceed l . In other words, d_ x + p[ t 2k] \u2264 l must hold always. Once Koa reaches the island at n+ 1 meters from the shore, she stops and can rest. Note that while Koa swims tide doesn' t have effect on her ( ie. she can' t drown while swimming) . Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide ( they are solid ground and she won' t drown there) . Koa wants to know whether she can go from the shore to the island. Help her!",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains three integers n , k and l ( 1 \u2264 n \u2264 3 \u00b7 10^ 5; 1 \u2264 k \u2264 10^ 9; 1 \u2264 l \u2264 10^ 9 ) \u2014 the number of meters of sea Koa measured and parameters k and l . The second line of each test case contains n integers d_ 1, d_ 2, . . . , d_ n ( 0 \u2264 d_ i \u2264 10^ 9 ) \u2014 the depths of each meter of sea Koa measured. It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case: Print Yes if Koa can get from the shore to the island, and No otherwise. You may print each letter in any case ( upper or lower) .",
    "note": "In the following s denotes the shore, i denotes the island, x denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at 1, 2, . . . , n meters from the shore. In test case 1 we have n = 2, k = 1, l = 1, p = [ 0, 1 ] . Koa wants to go from shore ( at x = 0 ) to the island ( at x = 3 ) . Let' s describe a possible solution: Initially at t = 0 the beach looks like this: [ s, 1, 0, i] . At t = 0 if Koa would decide to swim to x = 1 , beach would look like: [ s, 2, 1, i] at t = 1 , since 2 > 1 she would drown. So Koa waits 1 second instead and beach looks like [ s, 2, 1, i] at t = 1 . At t = 1 Koa swims to x = 1 , beach looks like [ s, 1, 0, i] at t = 2 . Koa doesn' t drown because 1 \u2264 1 . At t = 2 Koa swims to x = 2 , beach looks like [ s, 2, 1, i] at t = 3 . Koa doesn' t drown because 1 \u2264 1 . At t = 3 Koa swims to x = 3 , beach looks like [ s, 1, 0, i] at t = 4 . At t = 4 Koa is at x = 3 and she made it! We can show that in test case 2 Koa can' t get to the island.",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1384B2"
  },
  {
    "title": "Common Prefixes",
    "url": "https://codeforces.com/problemset/problem/1384/A",
    "history": "The length of the longest common prefix of two strings s = s_ 1 s_ 2 . . . s_ n and t = t_ 1 t_ 2 . . . t_ m is defined as the maximum integer k ( 0 \u2264 k \u2264 min( n, m) ) such that s_ 1 s_ 2 . . . s_ k equals t_ 1 t_ 2 . . . t_ k . Koa the Koala initially has n+ 1 strings s_ 1, s_ 2, . . . , s_ n+ 1 . For each i ( 1 \u2264 i \u2264 n ) she calculated a_ i \u2014 the length of the longest common prefix of s_ i and s_ i+ 1 . Several days later Koa found these numbers, but she couldn' t remember the strings. So Koa would like to find some strings s_ 1, s_ 2, . . . , s_ n+ 1 which would have generated numbers a_ 1, a_ 2, . . . , a_ n . Can you help her? If there are many answers print any. We can show that answer always exists for the given constraints.",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of elements in the list a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 50 ) \u2014 the elements of a . It is guaranteed that the sum of n over all test cases does not exceed 100 .",
    "output": "For each test case: Output n+ 1 lines. In the i - th line print string s_ i ( 1 \u2264 | s_ i| \u2264 200 ) , consisting of lowercase Latin letters. Length of the longest common prefix of strings s_ i and s_ i+ 1 has to be equal to a_ i . If there are many answers print any. We can show that answer always exists for the given constraints.",
    "note": "In the 1 - st test case one of the possible answers is s = [ aeren, ari, arousal, around, ari] . Lengths of longest common prefixes are: Between aeren and ari \u2192 1 Between ari and arousal \u2192 2 Between arousal and around \u2192 4 Between around and ari \u2192 2",
    "topics": [
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1384A"
  },
  {
    "title": "Rearrange",
    "url": "https://codeforces.com/problemset/problem/1383/D",
    "history": "Koa the Koala has a matrix A of n rows and m columns. Elements of this matrix are distinct integers from 1 to n \u00b7 m ( each number from 1 to n \u00b7 m appears exactly once in the matrix) . For any matrix M of n rows and m columns let' s define the following: The i - th row of M is defined as R_ i( M) = [ M_ i1, M_ i2, . . . , M_ im ] for all i ( 1 \u2264 i \u2264 n ) . The j - th column of M is defined as C_ j( M) = [ M_ 1j, M_ 2j, . . . , M_ nj ] for all j ( 1 \u2264 j \u2264 m ) . Koa defines S( A) = ( X, Y) as the spectrum of A , where X is the set of the maximum values in rows of A and Y is the set of the maximum values in columns of A . More formally: X = { max( R_ 1( A) ) , max( R_ 2( A) ) , . . . , max( R_ n( A) ) } Y = { max( C_ 1( A) ) , max( C_ 2( A) ) , . . . , max( C_ m( A) ) } Koa asks you to find some matrix A' of n rows and m columns, such that each number from 1 to n \u00b7 m appears exactly once in the matrix, and the following conditions hold: S( A' ) = S( A) R_ i( A' ) is bitonic for all i ( 1 \u2264 i \u2264 n ) C_ j( A' ) is bitonic for all j ( 1 \u2264 j \u2264 m ) An array t ( t_ 1, t_ 2, . . . , t_ k ) is called bitonic if it first increases and then decreases. More formally: t is bitonic if there exists some position p ( 1 \u2264 p \u2264 k ) such that: t_ 1 < t_ 2 < . . . < t_ p > t_ p+ 1 > . . . > t_ k . Help Koa to find such matrix or to determine that it doesn' t exist.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 250 ) \u2014 the number of rows and columns of A . Each of the ollowing n lines contains m integers. The j - th integer in the i - th line denotes element A_ ij ( 1 \u2264 A_ ij\u2264 n \u00b7 m ) of matrix A . It is guaranteed that every number from 1 to n \u00b7 m appears exactly once among elements of the matrix.",
    "output": "If such matrix doesn' t exist, print - 1 on a single line. Otherwise, the output must consist of n lines, each one consisting of m space separated integers \u2014 a description of A' . The j - th number in the i - th line represents the element A' _ ij . Every integer from 1 to n \u00b7 m should appear exactly once in A' , every row and column in A' must be bitonic and S( A) = S( A' ) must hold. If there are many answers print any.",
    "note": "Let' s analyze the first sample: For matrix A we have: Rows: R_ 1( A) = [ 3, 5, 6] ; max( R_ 1( A) ) = 6 R_ 2( A) = [ 1, 7, 9] ; max( R_ 2( A) ) = 9 R_ 3( A) = [ 4, 8, 2] ; max( R_ 3( A) ) = 8 Columns: C_ 1( A) = [ 3, 1, 4] ; max( C_ 1( A) ) = 4 C_ 2( A) = [ 5, 7, 8] ; max( C_ 2( A) ) = 8 C_ 3( A) = [ 6, 9, 2] ; max( C_ 3( A) ) = 9 X = { max( R_ 1( A) ) , max( R_ 2( A) ) , max( R_ 3( A) ) } = { 6, 9, 8 } Y = { max( C_ 1( A) ) , max( C_ 2( A) ) , max( C_ 3( A) ) } = { 4, 8, 9 } So S( A) = ( X, Y) = ( { 6, 9, 8 } , { 4, 8, 9 } ) For matrix A' we have: Rows: R_ 1( A' ) = [ 9, 5, 1] ; max( R_ 1( A' ) ) = 9 R_ 2( A' ) = [ 7, 8, 2] ; max( R_ 2( A' ) ) = 8 R_ 3( A' ) = [ 3, 6, 4] ; max( R_ 3( A' ) ) = 6 Columns: C_ 1( A' ) = [ 9, 7, 3] ; max( C_ 1( A' ) ) = 9 C_ 2( A' ) = [ 5, 8, 6] ; max( C_ 2( A' ) ) = 8 C_ 3( A' ) = [ 1, 2, 4] ; max( C_ 3( A' ) ) = 4 Note that each of this arrays are bitonic. X = { max( R_ 1( A' ) ) , max( R_ 2( A' ) ) , max( R_ 3( A' ) ) } = { 9, 8, 6 } Y = { max( C_ 1( A' ) ) , max( C_ 2( A' ) ) , max( C_ 3( A' ) ) } = { 9, 8, 4 } So S( A' ) = ( X, Y) = ( { 9, 8, 6 } , { 9, 8, 4 } )",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1383D"
  },
  {
    "title": "GameGame",
    "url": "https://codeforces.com/problemset/problem/1383/B",
    "history": "Koa the Koala and her best friend want to play a game. The game starts with an array a of length n consisting of non- negative integers. Koa and her best friend move in turns and each have initially a score equal to 0 . Koa starts. Let' s describe a move in the game: During his move, a player chooses any element of the array and removes it from this array, xor- ing it with the current score of the player. More formally: if the current score of the player is x and the chosen element is y , his new score will be x \u2295 y . Here \u2295 denotes bitwise XOR operation. Note that after a move element y is removed from a . The game ends when the array is empty. At the end of the game the winner is the player with the maximum score. If both players have the same score then it' s a draw. If both players play optimally find out whether Koa will win, lose or draw the game.",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains the integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 elements of a . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print: WIN if Koa will win the game. LOSE if Koa will lose the game. DRAW if the game ends in a draw.",
    "note": "In testcase 1 of the first sample we have: a = [ 1, 2, 2] . Here Koa chooses 1 , other player has to choose 2 , Koa chooses another 2 . Score for Koa is 1 \u2295 2 = 3 and score for other player is 2 so Koa wins.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "dp",
      "games",
      "greedy",
      "math"
    ],
    "id": "1383B"
  },
  {
    "title": "String Transformation 1",
    "url": "https://codeforces.com/problemset/problem/1383/A",
    "history": "Note that the only difference between String Transformation 1 and String Transformation 2 is in the move Koa does. In this version the letter y Koa selects must be strictly greater alphabetically than x ( read statement for better understanding) . You can make hacks in these problems independently. Koa the Koala has two strings A and B of the same length n ( | A| = | B| = n ) consisting of the first 20 lowercase English alphabet letters ( ie. from a to t) . In one move Koa: selects some subset of positions p_ 1, p_ 2, . . . , p_ k ( k \u2265 1; 1 \u2264 p_ i \u2264 n; p_ i = \u0338 p_ j if i = \u0338 j ) of A such that A_ p_ 1 = A_ p_ 2 = . . . = A_ p_ k = x ( ie. all letters on this positions are equal to some letter x ) . selects a letter y ( from the first 20 lowercase letters in English alphabet) such that y> x ( ie. letter y is strictly greater alphabetically than x ) . sets each letter in positions p_ 1, p_ 2, . . . , p_ k to letter y . More formally: for each i ( 1 \u2264 i \u2264 k ) Koa sets A_ p_ i = y . Note that you can only modify letters in string A . Koa wants to know the smallest number of moves she has to do to make strings equal to each other ( A = B ) or to determine that there is no way to make them equal. Help her!",
    "input": "Each test contains multiple test cases. The first line contains t ( 1 \u2264 t \u2264 10 ) \u2014 the number of test cases. Description of the test cases follows. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of strings A and B . The second line of each test case contains string A ( | A| = n ) . The third line of each test case contains string B ( | B| = n ) . Both strings consists of the first 20 lowercase English alphabet letters ( ie. from a to t) . It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case: Print on a single line the smallest number of moves she has to do to make strings equal to each other ( A = B ) or - 1 if there is no way to make them equal.",
    "note": "In the 1 - st test case Koa: selects positions 1 and 2 and sets A_ 1 = A_ 2 = b ( aab \u2192bbb ) . selects positions 2 and 3 and sets A_ 2 = A_ 3 = c ( bbb\u2192 bcc ) . In the 2 - nd test case Koa has no way to make string A equal B . In the 3 - rd test case Koa: selects position 1 and sets A_ 1 = t ( abc \u2192tbc ) . selects position 2 and sets A_ 2 = s ( tbc \u2192 tsc ) . selects position 3 and sets A_ 3 = r ( tsc\u2192 tsr ) .",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "strings",
      "trees",
      "two pointers"
    ],
    "id": "1383A"
  },
  {
    "title": "The Majestic Brown Tree Snake",
    "url": "https://codeforces.com/problemset/problem/1381/D",
    "history": "There is an undirected tree of n vertices, connected by n- 1 bidirectional edges. There is also a snake stuck inside of this tree. Its head is at vertex a and its tail is at vertex b . The snake' s body occupies all vertices on the unique simple path between a and b . The snake wants to know if it can reverse itself \u2014 that is, to move its head to where its tail started, and its tail to where its head started. Unfortunately, the snake' s movements are restricted to the tree' s structure. In an operation, the snake can move its head to an adjacent vertex not currently occupied by the snake. When it does this, the tail moves one vertex closer to the head, so that the length of the snake remains unchanged. Similarly, the snake can also move its tail to an adjacent vertex not currently occupied by the snake. When it does this, the head moves one unit closer to the tail. Let' s denote a snake position by ( h, t) , where h is the index of the vertex with the snake' s head, t is the index of the vertex with the snake' s tail. This snake can reverse itself with the movements ( 4, 7) \u2192 ( 5, 1) \u2192 ( 4, 2) \u2192 ( 1, 3) \u2192 ( 7, 2) \u2192 ( 8, 1) \u2192 ( 7, 4) . Determine if it is possible to reverse the snake with some sequence of operations.",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 100 ) \u2014 the number of test cases. The next lines contain descriptions of test cases. The first line of each test case contains three integers n, a, b ( 2\u2264 n\u2264 10^ 5, 1\u2264 a, b\u2264 n, a b ) . Each of the next n- 1 lines contains two integers u_ i, v_ i ( 1\u2264 u_ i, v_ i\u2264 n, u_ i v_ i ) , indicating an edge between vertices u_ i and v_ i . It is guaranteed that the given edges form a tree. It is guaranteed that the sum of n across all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output \" YES\" if it is possible for the snake to reverse itself, or \" NO\" otherwise.",
    "note": "The first test case is pictured above. In the second test case, the tree is a path. We can show that the snake cannot reverse itself. In the third test case, we can show that the snake cannot reverse itself. In the fourth test case, an example solution is: ( 15, 12) \u2192 ( 16, 11) \u2192 ( 15, 13) \u2192 ( 10, 14) \u2192 ( 8, 13) \u2192 ( 4, 11) \u2192 ( 1, 10) \u2192 ( 2, 8) \u2192 ( 3, 4) \u2192 ( 2, 5) \u2192 ( 1, 6) \u2192 ( 4, 7) \u2192 ( 8, 6) \u2192 ( 10, 5) \u2192 ( 11, 4) \u2192 ( 13, 8) \u2192 ( 14, 10) \u2192 ( 13, 15) \u2192 ( 11, 16) \u2192 ( 12, 15) .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees",
      "two pointers"
    ],
    "id": "1381D"
  },
  {
    "title": "Mastermind",
    "url": "https://codeforces.com/problemset/problem/1381/C",
    "history": "In the game of Mastermind, there are two players \u2014 Alice and Bob. Alice has a secret code, which Bob tries to guess. Here, a code is defined as a sequence of n colors. There are exactly n+ 1 colors in the entire universe, numbered from 1 to n+ 1 inclusive. When Bob guesses a code, Alice tells him some information about how good of a guess it is, in the form of two integers x and y . The first integer x is the number of indices where Bob' s guess correctly matches Alice' s code. The second integer y is the size of the intersection of the two codes as multisets. That is, if Bob were to change the order of the colors in his guess, y is the maximum number of indices he could get correct. For example, suppose n= 5 , Alice' s code is [ 3, 1, 6, 1, 2] , and Bob' s guess is [ 3, 1, 1, 2, 5] . At indices 1 and 2 colors are equal, while in the other indices they are not equal. So x= 2 . And the two codes have the four colors 1, 1, 2, 3 in common, so y= 4 . Solid lines denote a matched color for the same index. Dashed lines denote a matched color at a different index. x is the number of solid lines, and y is the total number of lines. You are given Bob' s guess and two values x and y . Can you find one possibility of Alice' s code so that the values of x and y are correct?",
    "input": "The first line contains a single integer t ( 1\u2264 t\u2264 1000 ) \u2014 the number of test cases. Next 2t lines contain descriptions of test cases. The first line of each test case contains three integers n, x, y ( 1\u2264 n\u2264 10^ 5, 0\u2264 x\u2264 y\u2264 n ) \u2014 the length of the codes, and two values Alice responds with. The second line of each test case contains n integers b_ 1, . . . , b_ n ( 1\u2264 b_ i\u2264 n+ 1 ) \u2014 Bob' s guess, where b_ i is the i - th color of the guess. It is guaranteed that the sum of n across all test cases does not exceed 10^ 5 .",
    "output": "For each test case, on the first line, output \" YES\" if there is a solution, or \" NO\" if there is no possible secret code consistent with the described situation. You can print each character in any case ( upper or lower) . If the answer is \" YES\" , on the next line output n integers a_ 1, . . . , a_ n ( 1\u2264 a_ i\u2264 n+ 1 ) \u2014 Alice' s secret code, where a_ i is the i - th color of the code. If there are multiple solutions, output any.",
    "note": "The first test case is described in the statement. In the second test case, x= 3 because the colors are equal at indices 2, 4, 5 . And y= 4 because they share the colors 1, 1, 1, 2 . In the third test case, x= 0 because there is no index where the colors are the same. But y= 4 because they share the colors 3, 3, 5, 5 . In the fourth test case, it can be proved that no solution exists.",
    "topics": [
      "constructive algorithms",
      "graph matchings",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1381C"
  },
  {
    "title": "Circular Dungeon",
    "url": "https://codeforces.com/problemset/problem/1380/G",
    "history": "You are creating a level for a video game. The level consists of n rooms placed in a circle. The rooms are numbered 1 through n . Each room contains exactly one exit: completing the j - th room allows you to go the ( j+ 1) - th room ( and completing the n - th room allows you to go the 1 - st room) . You are given the description of the multiset of n chests: the i - th chest has treasure value c_ i . Each chest can be of one of two types: regular chest \u2014 when a player enters a room with this chest, he grabs the treasure and proceeds to the next room; mimic chest \u2014 when a player enters a room with this chest, the chest eats him alive, and he loses. The player starts in a random room with each room having an equal probability of being chosen. The players earnings is equal to the total value of treasure chests he' d collected before he lost. You are allowed to choose the order the chests go into the rooms. For each k from 1 to n place the chests into the rooms in such a way that: each room contains exactly one chest; exactly k chests are mimics; the expected value of players earnings is minimum possible. Please note that for each k the placement is chosen independently. It can be shown that it is in the form of P/ Q where P and Q are non- negative integers and Q 0 . Report the values of P \u00b7 Q^ - 1998244353 .",
    "input": "The first contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of rooms and the number of chests. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 6 ) \u2014 the treasure values of each chest.",
    "output": "Print n integers \u2014 the k - th value should be equal to the minimum possible expected value of players earnings if the chests are placed into the rooms in some order and exactly k of the chests are mimics. It can be shown that it is in the form of P/ Q where P and Q are non- negative integers and Q 0 . Report the values of P \u00b7 Q^ - 1998244353 .",
    "note": "In the first example the exact values of minimum expected values are: 1/ 2 , 0/ 2 . In the second example the exact values of minimum expected values are: 132/ 8 , 54/ 8 , 30/ 8 , 17/ 8 , 12/ 8 , 7/ 8 , 3/ 8 , 0/ 8 .",
    "topics": [
      "greedy",
      "math",
      "probabilities"
    ],
    "id": "1380G"
  },
  {
    "title": "Berserk And Fireball",
    "url": "https://codeforces.com/problemset/problem/1380/D",
    "history": "There are n warriors in a row. The power of the i - th warrior is a_ i . All powers are pairwise distinct. You have two types of spells which you may cast: Fireball: you spend x mana and destroy exactly k consecutive warriors; Berserk: you spend y mana, choose two consecutive warriors, and the warrior with greater power destroys the warrior with smaller power. For example, let the powers of warriors be [ 2, 3, 7, 8, 11, 5, 4] , and k = 3 . If you cast Berserk on warriors with powers 8 and 11 , the resulting sequence of powers becomes [ 2, 3, 7, 11, 5, 4] . Then, for example, if you cast Fireball on consecutive warriors with powers [ 7, 11, 5] , the resulting sequence of powers becomes [ 2, 3, 4] . You want to turn the current sequence of warriors powers a_ 1, a_ 2, . . . , a_ n into b_ 1, b_ 2, . . . , b_ m . Calculate the minimum amount of mana you need to spend on it.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the length of sequence a and the length of sequence b respectively. The second line contains three integers x, k, y ( 1 \u2264 x, y, \u2264 10^ 9; 1 \u2264 k \u2264 n ) \u2014 the cost of fireball, the range of fireball and the cost of berserk respectively. The third line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) . It is guaranteed that all integers a_ i are pairwise distinct. The fourth line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 n ) . It is guaranteed that all integers b_ i are pairwise distinct.",
    "output": "Print the minimum amount of mana for turning the sequnce a_ 1, a_ 2, . . . , a_ n into b_ 1, b_ 2, . . . , b_ m , or - 1 if it is impossible.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1380D"
  },
  {
    "title": "Create The Teams",
    "url": "https://codeforces.com/problemset/problem/1380/C",
    "history": "There are n programmers that you want to split into several non- empty teams. The skill of the i - th programmer is a_ i . You want to assemble the maximum number of teams from them. There is a restriction for each team: the number of programmers in the team multiplied by the minimum skill among all programmers in the team must be at least x . Each programmer should belong to at most one team. Some programmers may be left without a team. Calculate the maximum number of teams that you can assemble.",
    "input": "The first line contains the integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 10^ 5; 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of programmers and the restriction of team skill respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the skill of the i - th programmer. The sum of n over all inputs does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the maximum number of teams that you can assemble.",
    "note": "",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1380C"
  },
  {
    "title": "Universal Solution",
    "url": "https://codeforces.com/problemset/problem/1380/B",
    "history": "Recently, you found a bot to play \" Rock paper scissors\" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string s = s_ 1 s_ 2 . . . s_ n of length n where each letter is either R, S or P. While initializing, the bot is choosing a starting index pos ( 1 \u2264 pos \u2264 n ) , and then it can play any number of rounds. In the first round, he chooses \" Rock\" , \" Scissors\" or \" Paper\" based on the value of s_ pos : if s_ pos is equal to R the bot chooses \" Rock\" ; if s_ pos is equal to S the bot chooses \" Scissors\" ; if s_ pos is equal to P the bot chooses \" Paper\" ; In the second round, the bot' s choice is based on the value of s_ pos + 1 . In the third round \u2014 on s_ pos + 2 and so on. After s_ n the bot returns to s_ 1 and continues his game. You plan to play n rounds and you' ve already figured out the string s but still don' t know what is the starting index pos . But since the bot' s tactic is so boring, you' ve decided to find n choices to each round to maximize the average number of wins. In other words, let' s suggest your choices are c_ 1 c_ 2 . . . c_ n and if the bot starts from index pos then you' ll win in win( pos) rounds. Find c_ 1 c_ 2 . . . c_ n such that win( 1) + win( 2) + . . . + win( n) / n is maximum possible.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Next t lines contain test cases \u2014 one per line. The first and only line of each test case contains string s = s_ 1 s_ 2 . . . s_ n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; s_ i \u2208{ R, S, P} ) \u2014 the string of the bot. It' s guaranteed that the total length of all strings in one test doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print n choices c_ 1 c_ 2 . . . c_ n to maximize the average number of wins. Print them in the same manner as the string s . If there are multiple optimal answers, print any of them.",
    "note": "In the first test case, the bot ( wherever it starts) will always choose \" Rock\" , so we can always choose \" Paper\" . So, in any case, we will win all n = 4 rounds, so the average is also equal to 4 . In the second test case: if bot will start from pos = 1 , then ( s_ 1, c_ 1) is draw, ( s_ 2, c_ 2) is draw and ( s_ 3, c_ 3) is draw, so win( 1) = 0 ; if bot will start from pos = 2 , then ( s_ 2, c_ 1) is win, ( s_ 3, c_ 2) is win and ( s_ 1, c_ 3) is win, so win( 2) = 3 ; if bot will start from pos = 3 , then ( s_ 3, c_ 1) is lose, ( s_ 1, c_ 2) is lose and ( s_ 2, c_ 3) is lose, so win( 3) = 0 ; The average is equal to 0 + 3 + 0/ 3 = 1 and it can be proven that it' s the maximum possible average. A picture from Wikipedia explaining \" Rock paper scissors\" game:",
    "topics": [
      "greedy"
    ],
    "id": "1380B"
  },
  {
    "title": "Choosing flowers",
    "url": "https://codeforces.com/problemset/problem/1379/C",
    "history": "Vladimir would like to prepare a present for his wife: they have an anniversary! He decided to buy her exactly n flowers. Vladimir went to a flower shop, and he was amazed to see that there are m types of flowers being sold there, and there is unlimited supply of flowers of each type. Vladimir wants to choose flowers to maximize the happiness of his wife. He knows that after receiving the first flower of the i - th type happiness of his wife increases by a_ i and after receiving each consecutive flower of this type her happiness increases by b_ i . That is, if among the chosen flowers there are x_ i > 0 flowers of type i , his wife gets a_ i + ( x_ i - 1) \u00b7 b_ i additional happiness ( and if there are no flowers of type i , she gets nothing for this particular type) . Please help Vladimir to choose exactly n flowers to maximize the total happiness of his wife.",
    "input": "The first line contains the only integer t ( 1 \u2264 t \u2264 10 000 ) , the number of test cases. It is followed by t descriptions of the test cases. Each test case description starts with two integers n and m ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264 100 000 ) , the number of flowers Vladimir needs to choose and the number of types of available flowers. The following m lines describe the types of flowers: each line contains integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 9 ) for i - th available type of flowers. The test cases are separated by a blank line. It is guaranteed that the sum of values m among all test cases does not exceed 100 000 .",
    "output": "For each test case output a single integer: the maximum total happiness of Vladimir' s wife after choosing exactly n flowers optimally.",
    "note": "In the first example case Vladimir can pick 1 flower of the first type and 3 flowers of the second type, in this case the total happiness equals 5 + ( 1 + 2 \u00b7 4) = 14 . In the second example Vladimir can pick 2 flowers of the first type, 2 flowers of the second type, and 1 flower of the third type, in this case the total happiness equals ( 5 + 1 \u00b7 2) + ( 4 + 1 \u00b7 2) + 3 = 16 .",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "dfs and similar",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1379C"
  },
  {
    "title": "Inversion SwapSort",
    "url": "https://codeforces.com/problemset/problem/1375/E",
    "history": "Madeline has an array a of n integers. A pair ( u, v) of integers forms an inversion in a if: 1 \u2264 u < v \u2264 n . a_ u > a_ v . Madeline recently found a magical paper, which allows her to write two indices u and v and swap the values a_ u and a_ v . Being bored, she decided to write a list of pairs ( u_ i, v_ i) with the following conditions: all the pairs in the list are distinct and form an inversion in a . all the pairs that form an inversion in a are in the list. Starting from the given array, if you swap the values at indices u_ 1 and v_ 1 , then the values at indices u_ 2 and v_ 2 and so on, then after all pairs are processed, the array a will be sorted in non- decreasing order. Construct such a list or determine that no such list exists. If there are multiple possible answers, you may find any of them.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the length of the array. Next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 elements of the array.",
    "output": "Print - 1 if no such list exists. Otherwise in the first line you should print a single integer m ( 0 \u2264 m \u2264n( n- 1) 2 ) \u2014 number of pairs in the list. The i - th of the following m lines should contain two integers u_ i, v_ i ( 1 \u2264 u_ i < v_ i\u2264 n ) . If there are multiple possible answers, you may find any of them.",
    "note": "In the first sample test case the array will change in this order [ 3, 1, 2] \u2192 [ 2, 1, 3] \u2192 [ 1, 2, 3] . In the second sample test case it will be [ 1, 8, 1, 6] \u2192 [ 1, 6, 1, 8] \u2192 [ 1, 1, 6, 8] . In the third sample test case the array is already sorted.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1375E"
  },
  {
    "title": "Element Extermination",
    "url": "https://codeforces.com/problemset/problem/1375/C",
    "history": "You are given an array a of length n , which initially is a permutation of numbers from 1 to n . In one operation, you can choose an index i ( 1 \u2264 i < n ) such that a_ i < a_ i + 1 , and remove either a_ i or a_ i + 1 from the array ( after the removal, the remaining parts are concatenated) . For example, if you have the array [ 1, 3, 2] , you can choose i = 1 ( since a_ 1 = 1 < a_ 2 = 3 ) , then either remove a_ 1 which gives the new array [ 3, 2] , or remove a_ 2 which gives the new array [ 1, 2] . Is it possible to make the length of this array equal to 1 with these operations?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n , a_ i are pairwise distinct) \u2014 elements of the array. It is guaranteed that the sum of n over all test cases doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, output on a single line the word \" YES\" if it is possible to reduce the array to a single element using the aforementioned operation, or \" NO\" if it is impossible to do so.",
    "note": "For the first two test cases and the fourth test case, we can operate as follow ( the bolded elements are the pair chosen for that operation) : [ 1, 2, 3] \u2192 [ 1, 2] \u2192 [ 1] [ 3, 1, 2, 4] \u2192 [ 3, 1, 4] \u2192 [ 3, 4] \u2192 [ 4] [ 2, 4, 6, 1, 3, 5] \u2192 [ 4, 6, 1, 3, 5] \u2192 [ 4, 1, 3, 5] \u2192 [ 4, 1, 5] \u2192 [ 4, 5] \u2192 [ 4]",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1375C"
  },
  {
    "title": "Neighbor Grid",
    "url": "https://codeforces.com/problemset/problem/1375/B",
    "history": "You are given a grid with n rows and m columns, where each cell has a non- negative integer written on it. We say the grid is good if for each cell the following condition holds: if it has a number k > 0 written on it, then exactly k of its neighboring cells have a number greater than 0 written on them. Note that if the number in the cell is 0 , there is no such restriction on neighboring cells. You are allowed to take any number in the grid and increase it by 1 . You may apply this operation as many times as you want, to any numbers you want. Perform some operations ( possibly zero) to make the grid good, or say that it is impossible. If there are multiple possible answers, you may find any of them. Two cells are considered to be neighboring if they have a common edge.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m ( 2 \u2264 n, m \u2264 300 ) \u2014 the number of rows and columns, respectively. The following n lines contain m integers each, the j - th element in the i - th line a_ i, j is the number written in the j - th cell of the i - th row ( 0 \u2264 a_ i, j\u2264 10^ 9 ) . It is guaranteed that the sum of n \u00b7 m over all test cases does not exceed 10^ 5 .",
    "output": "If it is impossible to obtain a good grid, print a single line containing \" NO\" . Otherwise, print a single line containing \" YES\" , followed by n lines each containing m integers, which describe the final state of the grid. This final grid should be obtainable from the initial one by applying some operations ( possibly zero) . If there are multiple possible answers, you may print any of them.",
    "note": "In the first test case, we can obtain the resulting grid by increasing the number in row 2 , column 3 once. Both of the cells that contain 1 have exactly one neighbor that is greater than zero, so the grid is good. Many other solutions exist, such as the grid 0 1 0 0 0 2 1 0 0 0 0 0 All of them are accepted as valid answers. In the second test case, it is impossible to make the grid good. In the third test case, notice that no cell has a number greater than zero on it, so the grid is automatically good.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1375B"
  },
  {
    "title": "Reading Books (hard version)",
    "url": "https://codeforces.com/problemset/problem/1374/E2",
    "history": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. Summer vacation has started so Alice and Bob want to play and joy, but. . . Their mom doesn' t think so. She says that they have to read exactly m books before all entertainments. Alice and Bob will read each book together to end this exercise faster. There are n books in the family library. The i - th book is described by three integers: t_ i \u2014 the amount of time Alice and Bob need to spend to read it, a_ i ( equals 1 if Alice likes the i - th book and 0 if not) , and b_ i ( equals 1 if Bob likes the i - th book and 0 if not) . So they need to choose exactly m books from the given n books in such a way that: Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; the total reading time of these m books is minimized ( they are children and want to play and joy as soon a possible) . The set they choose is the same for both Alice an Bob ( it' s shared between them) and they read all books together, so the total reading time is the sum of t_ i over all books that are in the chosen set. Your task is to help them and find any suitable set of books or determine that it is impossible to find such a set.",
    "input": "The first line of the input contains three integers n , m and k ( 1 \u2264 k \u2264 m \u2264 n \u2264 2 \u00b7 10^ 5 ) . The next n lines contain descriptions of books, one description per line: the i - th line contains three integers t_ i , a_ i and b_ i ( 1 \u2264 t_ i \u2264 10^ 4 , 0 \u2264 a_ i, b_ i \u2264 1 ) , where: t_ i \u2014 the amount of time required for reading the i - th book; a_ i equals 1 if Alice likes the i - th book and 0 otherwise; b_ i equals 1 if Bob likes the i - th book and 0 otherwise.",
    "output": "If there is no solution, print only one integer - 1. If the solution exists, print T in the first line \u2014 the minimum total reading time of the suitable set of books. In the second line print m distinct integers from 1 to n in any order \u2014 indices of books which are in the set you found. If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings",
      "ternary search",
      "two pointers"
    ],
    "id": "1374E2"
  },
  {
    "title": "Reading Books (easy version)",
    "url": "https://codeforces.com/problemset/problem/1374/E1",
    "history": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully. Summer vacation has started so Alice and Bob want to play and joy, but. . . Their mom doesn' t think so. She says that they have to read some amount of books before all entertainments. Alice and Bob will read each book together to end this exercise faster. There are n books in the family library. The i - th book is described by three integers: t_ i \u2014 the amount of time Alice and Bob need to spend to read it, a_ i ( equals 1 if Alice likes the i - th book and 0 if not) , and b_ i ( equals 1 if Bob likes the i - th book and 0 if not) . So they need to choose some books from the given n books in such a way that: Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; the total reading time of these books is minimized ( they are children and want to play and joy as soon a possible) . The set they choose is the same for both Alice an Bob ( it' s shared between them) and they read all books together, so the total reading time is the sum of t_ i over all books that are in the chosen set. Your task is to help them and find any suitable set of books or determine that it is impossible to find such a set.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) . The next n lines contain descriptions of books, one description per line: the i - th line contains three integers t_ i , a_ i and b_ i ( 1 \u2264 t_ i \u2264 10^ 4 , 0 \u2264 a_ i, b_ i \u2264 1 ) , where: t_ i \u2014 the amount of time required for reading the i - th book; a_ i equals 1 if Alice likes the i - th book and 0 otherwise; b_ i equals 1 if Bob likes the i - th book and 0 otherwise.",
    "output": "If there is no solution, print only one integer - 1. Otherwise print one integer T \u2014 the minimum total reading time of the suitable set of books.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1374E1"
  },
  {
    "title": "Move Brackets",
    "url": "https://codeforces.com/problemset/problem/1374/C",
    "history": "You are given a bracket sequence s of length n , where n is even ( divisible by two) . The string s consists of n/ 2 opening brackets ' ( ' and n/ 2 closing brackets ' ) ' . In one move, you can choose exactly one bracket and move it to the beginning of the string or to the end of the string ( i. e. you choose some index i , remove the i - th character of s and insert it before or after all remaining characters of s ) . Your task is to find the minimum number of moves required to obtain regular bracket sequence from s . It can be proved that the answer always exists under the given constraints. Recall what the regular bracket sequence is: \" ( ) \" is regular bracket sequence; if s is regular bracket sequence then \" ( \" + s + \" ) \" is regular bracket sequence; if s and t are regular bracket sequences then s + t is regular bracket sequence. For example, \" ( ) ( ) \" , \" ( ( ) ) ( ) \" , \" ( ( ) ) \" and \" ( ) \" are regular bracket sequences, but \" ) ( \" , \" ( ) ( \" and \" ) ) ) \" are not. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 2 \u2264 n \u2264 50 ) \u2014 the length of s . It is guaranteed that n is even. The second line of the test case containg the string s consisting of n/ 2 opening and n/ 2 closing brackets.",
    "output": "For each test case, print the answer \u2014 the minimum number of moves required to obtain regular bracket sequence from s . It can be proved that the answer always exists under the given constraints.",
    "note": "In the first test case of the example, it is sufficient to move the first bracket to the end of the string. In the third test case of the example, it is sufficient to move the last bracket to the beginning of the string. In the fourth test case of the example, we can choose last three openning brackets, move them to the beginning of the string and obtain \" ( ( ( ) ) ) ( ( ) ) \" .",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1374C"
  },
  {
    "title": "Pawns",
    "url": "https://codeforces.com/problemset/problem/1373/G",
    "history": "You are given a chessboard consisting of n rows and n columns. Rows are numbered from bottom to top from 1 to n . Columns are numbered from left to right from 1 to n . The cell at the intersection of the x - th column and the y - th row is denoted as ( x, y) . Furthermore, the k - th column is a special column. Initially, the board is empty. There are m changes to the board. During the i - th change one pawn is added or removed from the board. The current board is good if we can move all pawns to the special column by the followings rules: Pawn in the cell ( x, y) can be moved to the cell ( x, y + 1) , ( x - 1, y + 1) or ( x + 1, y + 1) ; You can make as many such moves as you like; Pawns can not be moved outside the chessboard; Each cell can not contain more than one pawn. The current board may not always be good. To fix it, you can add new rows to the board. New rows are added at the top, i. e. they will have numbers n+ 1, n+ 2, n+ 3, . . . . After each of m changes, print one integer \u2014 the minimum number of rows which you have to add to make the board good.",
    "input": "The first line contains three integers n , k and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5; 1 \u2264 k \u2264 n ) \u2014 the size of the board, the index of the special column and the number of changes respectively. Then m lines follow. The i - th line contains two integers x and y ( 1 \u2264 x, y \u2264 n ) \u2014 the index of the column and the index of the row respectively. If there is no pawn in the cell ( x, y) , then you add a pawn to this cell, otherwise \u2014 you remove the pawn from this cell.",
    "output": "After each change print one integer \u2014 the minimum number of rows which you have to add to make the board good.",
    "note": "",
    "topics": [
      "data structures",
      "divide and conquer",
      "greedy"
    ],
    "id": "1373G"
  },
  {
    "title": "Network Coverage",
    "url": "https://codeforces.com/problemset/problem/1373/F",
    "history": "The government of Berland decided to improve network coverage in his country. Berland has a unique structure: the capital in the center and n cities in a circle around the capital. The capital already has a good network coverage ( so the government ignores it) , but the i - th city contains a_ i households that require a connection. The government designed a plan to build n network stations between all pairs of neighboring cities which will maintain connections only for these cities. In other words, the i - th network station will provide service only for the i - th and the ( i + 1) - th city ( the n - th station is connected to the n - th and the 1 - st city) . All network stations have capacities: the i - th station can provide the connection to at most b_ i households. Now the government asks you to check can the designed stations meet the needs of all cities or not \u2014 that is, is it possible to assign each household a network station so that each network station i provides the connection to at most b_ i households.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains the single integer n ( 2 \u2264 n \u2264 10^ 6 ) \u2014 the number of cities and stations. The second line of each test case contains n integers ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of households in the i - th city. The third line of each test case contains n integers ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the capacities of the designed stations. It' s guaranteed that the sum of n over test cases doesn' t exceed 10^ 6 .",
    "output": "For each test case, print YES, if the designed stations can meet the needs of all cities, or NO otherwise ( case insensitive) .",
    "note": "In the first test case: the first network station can provide 2 connections to the first city and 1 connection to the second city; the second station can provide 2 connections to the second city and 1 connection to the third city; the third station can provide 3 connections to the third city. In the second test case: the 1 - st station can provide 2 connections to the 1 - st city; the 2 - nd station can provide 3 connections to the 2 - nd city; the 3 - rd station can provide 3 connections to the 3 - rd city and 1 connection to the 1 - st station. In the third test case, the fourth city needs 5 connections, but the third and the fourth station has 4 connections in total.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1373F"
  },
  {
    "title": "Sum of Digits",
    "url": "https://codeforces.com/problemset/problem/1373/E",
    "history": "Let f( x) be the sum of digits of a decimal number x . Find the smallest non- negative integer x such that f( x) + f( x + 1) + . . . + f( x + k) = n .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 150 ) \u2014 the number of test cases. Each test case consists of one line containing two integers n and k ( 1 \u2264 n \u2264 150 , 0 \u2264 k \u2264 9 ) .",
    "output": "For each test case, print one integer without leading zeroes. If there is no such x that f( x) + f( x + 1) + . . . + f( x + k) = n , print - 1 ; otherwise, print the minimum x meeting that constraint.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1373E"
  },
  {
    "title": "Maximum Sum on Even Positions",
    "url": "https://codeforces.com/problemset/problem/1373/D",
    "history": "You are given an array a consisting of n integers. Indices of the array start from zero ( i. e. the first element is a_ 0 , the second one is a_ 1 , and so on) . You can reverse at most one subarray ( continuous subsegment) of this array. Recall that the subarray of a with borders l and r is a[ l; r] = a_ l, a_ l + 1, . . . , a_ r . Your task is to reverse such a subarray that the sum of elements on even positions of the resulting array is maximized ( i. e. the sum of elements a_ 0, a_ 2, . . . , a_ 2k for integer k = \u230an- 1/ 2\u230b should be maximum possible) . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a . The second line of the test case contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer on the separate line \u2014 the maximum possible sum of elements on even positions after reversing at most one subarray ( continuous subsegment) of a .",
    "note": "",
    "topics": [
      "divide and conquer",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1373D"
  },
  {
    "title": "Donut Shops",
    "url": "https://codeforces.com/problemset/problem/1373/A",
    "history": "There are two rival donut shops. The first shop sells donuts at retail: each donut costs a dollars. The second shop sells donuts only in bulk: box of b donuts costs c dollars. So if you want to buy x donuts from this shop, then you have to buy the smallest number of boxes such that the total number of donuts in them is greater or equal to x . You want to determine two positive integer values: how many donuts can you buy so that they are strictly cheaper in the first shop than in the second shop? how many donuts can you buy so that they are strictly cheaper in the second shop than in the first shop? If any of these values doesn' t exist then that value should be equal to - 1 . If there are multiple possible answers, then print any of them. The printed values should be less or equal to 10^ 9 . It can be shown that under the given constraints such values always exist if any values exist at all.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of testcases. Each of the next t lines contains three integers a , b and c ( 1 \u2264 a \u2264 10^ 9 , 2 \u2264 b \u2264 10^ 9 , 1 \u2264 c \u2264 10^ 9 ) .",
    "output": "For each testcase print two positive integers. For both shops print such x that buying x donuts in this shop is strictly cheaper than buying x donuts in the other shop. x should be greater than 0 and less or equal to 10^ 9 . If there is no such x , then print - 1 . If there are multiple answers, then print any of them.",
    "note": "In the first testcase buying any number of donuts will be cheaper in the second shop. For example, for 3 or 5 donuts you' ll have to buy a box of 10 donuts for 4 dollars. 3 or 5 donuts in the first shop would cost you 15 or 25 dollars, respectively, however. For 20 donuts you' ll have to buy two boxes for 8 dollars total. Note that 3 and 5 are also valid answers for the second shop, along with many other answers. In the second testcase buying any number of donuts will be either cheaper in the first shop or the same price. 8 donuts cost 32 dollars in the first shop and 40 dollars in the second shop ( because you have to buy two boxes) . 10 donuts will cost 40 dollars in both shops, so 10 is not a valid answer for any of the shops. In the third testcase 1 donut costs 2 and 3 dollars, respectively. 2 donuts cost 4 and 3 dollars. Thus, 1 is a valid answer for the first shop and 2 is a valid answer for the second shop. In the fourth testcase 10^ 9 donuts cost 10^ 18 dollars in the first shop and 10^ 9 dollars in the second shop.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1373A"
  },
  {
    "title": "Omkar and Last Floor",
    "url": "https://codeforces.com/problemset/problem/1372/E",
    "history": "Omkar is building a house. He wants to decide how to make the floor plan for the last floor. Omkar' s floor starts out as n rows of m zeros ( 1 \u2264 n, m \u2264 100 ) . Every row is divided into intervals such that every 0 in the row is in exactly 1 interval. For every interval for every row, Omkar can change exactly one of the 0 s contained in that interval to a 1 . Omkar defines the quality of a floor as the sum of the squares of the sums of the values in each column, i. e. if the sum of the values in the i - th column is q_ i , then the quality of the floor is \u2211_ i = 1^ m q_ i^ 2 . Help Omkar find the maximum quality that the floor can have.",
    "input": "The first line contains two integers, n and m ( 1 \u2264 n, m \u2264 100 ) , which are the number of rows and number of columns, respectively. You will then receive a description of the intervals in each row. For every row i from 1 to n : The first row contains a single integer k_ i ( 1 \u2264 k_ i \u2264 m ) , which is the number of intervals on row i . The j - th of the next k_ i lines contains two integers l_ i, j and r_ i, j , which are the left and right bound ( both inclusive) , respectively, of the j - th interval of the i - th row. It is guaranteed that all intervals other than the first interval will be directly after the interval before it. Formally, l_ i, 1 = 1 , l_ i, j\u2264 r_ i, j for all 1 \u2264 j \u2264 k_ i , r_ i, j- 1 + 1 = l_ i, j for all 2 \u2264 j \u2264 k_ i , and r_ i, k_ i = m .",
    "output": "Output one integer, which is the maximum possible quality of an eligible floor plan.",
    "note": "The given test case corresponds to the following diagram. Cells in the same row and have the same number are a part of the same interval. The most optimal assignment is: The sum of the 1 st column is 4 , the sum of the 2 nd column is 2 , the sum of the 3 rd and 4 th columns are 0 , and the sum of the 5 th column is 4 . The quality of this floor plan is 4^ 2 + 2^ 2 + 0^ 2 + 0^ 2 + 4^ 2 = 36 . You can show that there is no floor plan with a higher quality.",
    "topics": [
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1372E"
  },
  {
    "title": "Omkar and Circle",
    "url": "https://codeforces.com/problemset/problem/1372/D",
    "history": "Danny, the local Math Maniac, is fascinated by circles, Omkar' s most recent creation. Help him solve this circle problem! You are given n nonnegative integers a_ 1, a_ 2, . . . , a_ n arranged in a circle, where n must be odd ( ie. n- 1 is divisible by 2 ) . Formally, for all i such that 2 \u2264 i \u2264 n , the elements a_ i - 1 and a_ i are considered to be adjacent, and a_ n and a_ 1 are also considered to be adjacent. In one operation, you pick a number on the circle, replace it with the sum of the two elements adjacent to it, and then delete the two adjacent elements from the circle. This is repeated until only one number remains in the circle, which we call the circular value. Help Danny find the maximum possible circular value after some sequences of operations.",
    "input": "The first line contains one odd integer n ( 1 \u2264 n < 2 \u00b7 10^ 5 , n is odd) \u2014 the initial size of the circle. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i\u2264 10^ 9 ) \u2014 the initial numbers in the circle.",
    "output": "Output the maximum possible circular value after applying some sequence of operations to the given circle.",
    "note": "For the first test case, here' s how a circular value of 17 is obtained: Pick the number at index 3 . The sum of adjacent elements equals 17 . Delete 7 and 10 from the circle and replace 2 with 17 . Note that the answer may not fit in a 32 - bit integer.",
    "topics": [
      "brute force",
      "dp",
      "games",
      "greedy"
    ],
    "id": "1372D"
  },
  {
    "title": "Omkar and Last Class of Math",
    "url": "https://codeforces.com/problemset/problem/1372/B",
    "history": "In Omkar' s last class of math, he learned about the least common multiple, or LCM . LCM( a, b) is the smallest positive integer x which is divisible by both a and b . Omkar, having a laudably curious mind, immediately thought of a problem involving the LCM operation: given an integer n , find positive integers a and b such that a + b = n and LCM( a, b) is the minimum value possible. Can you help Omkar solve his ludicrously challenging math problem?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10 ) . Description of the test cases follows. Each test case consists of a single integer n ( 2 \u2264 n \u2264 10^ 9 ) .",
    "output": "For each test case, output two positive integers a and b , such that a + b = n and LCM( a, b) is the minimum possible.",
    "note": "For the first test case, the numbers we can choose are 1, 3 or 2, 2 . LCM( 1, 3) = 3 and LCM( 2, 2) = 2 , so we output 2 2 . For the second test case, the numbers we can choose are 1, 5 , 2, 4 , or 3, 3 . LCM( 1, 5) = 5 , LCM( 2, 4) = 4 , and LCM( 3, 3) = 3 , so we output 3 3 . For the third test case, LCM( 3, 6) = 6 . It can be shown that there are no other pairs of numbers which sum to 9 that have a lower LCM .",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1372B"
  },
  {
    "title": "Grid-00100",
    "url": "https://codeforces.com/problemset/problem/1371/D",
    "history": "A mad scientist Dr. Jubal has made a competitive programming task. Try to solve it! You are given integers n, k . Construct a grid A with size n \u00d7 n consisting of integers 0 and 1 . The very important condition should be satisfied: the sum of all elements in the grid is exactly k . In other words, the number of 1 in the grid is equal to k . Let' s define: A_ i, j as the integer in the i - th row and the j - th column. R_ i = A_ i, 1+ A_ i, 2+ . . . + A_ i, n ( for all 1 \u2264 i \u2264 n ) . C_ j = A_ 1, j+ A_ 2, j+ . . . + A_ n, j ( for all 1 \u2264 j \u2264 n ) . In other words, R_ i are row sums and C_ j are column sums of the grid A . For the grid A let' s define the value f( A) = ( max( R) - min( R) ) ^ 2 + ( max( C) - min( C) ) ^ 2 ( here for an integer sequence X we define max( X) as the maximum value in X and min( X) as the minimum value in X ) . Find any grid A , which satisfies the following condition. Among such grids find any, for which the value f( A) is the minimum possible. Among such tables, you can find any.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Next t lines contain descriptions of test cases. For each test case the only line contains two integers n , k ( 1 \u2264 n \u2264 300, 0 \u2264 k \u2264 n^ 2) . It is guaranteed that the sum of n^ 2 for all test cases does not exceed 10^ 5 .",
    "output": "For each test case, firstly print the minimum possible value of f( A) among all tables, for which the condition is satisfied. After that, print n lines contain n characters each. The j - th character in the i - th line should be equal to A_ i, j . If there are multiple answers you can print any.",
    "note": "In the first test case, the sum of all elements in the grid is equal to 2 , so the condition is satisfied. R_ 1 = 1, R_ 2 = 1 and C_ 1 = 1, C_ 2 = 1 . Then, f( A) = ( 1- 1) ^ 2 + ( 1- 1) ^ 2 = 0 , which is the minimum possible value of f( A) . In the second test case, the sum of all elements in the grid is equal to 8 , so the condition is satisfied. R_ 1 = 3, R_ 2 = 3, R_ 3 = 2 and C_ 1 = 3, C_ 2 = 2, C_ 3 = 3 . Then, f( A) = ( 3- 2) ^ 2 + ( 3- 2) ^ 2 = 2 . It can be proven, that it is the minimum possible value of f( A) .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1371D"
  },
  {
    "title": "A Cookie for You",
    "url": "https://codeforces.com/problemset/problem/1371/C",
    "history": "Anna is a girl so brave that she is loved by everyone in the city and citizens love her cookies. She is planning to hold a party with cookies. Now she has a vanilla cookies and b chocolate cookies for the party. She invited n guests of the first type and m guests of the second type to the party. They will come to the party in some order. After coming to the party, each guest will choose the type of cookie ( vanilla or chocolate) to eat. There is a difference in the way how they choose that type: If there are v vanilla cookies and c chocolate cookies at the moment, when the guest comes, then if the guest of the first type: if v> c the guest selects a vanilla cookie. Otherwise, the guest selects a chocolate cookie. if the guest of the second type: if v> c the guest selects a chocolate cookie. Otherwise, the guest selects a vanilla cookie. After that: If there is at least one cookie of the selected type, the guest eats one. Otherwise ( there are no cookies of the selected type) , the guest gets angry and returns to home. Anna wants to know if there exists some order of guests, such that no one guest gets angry. Your task is to answer her question.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Next t lines contain descriptions of test cases. For each test case, the only line contains four integers a , b , n , m ( 0 \u2264 a, b, n, m \u2264 10^ 18, n+ m = \u0338 0 ) .",
    "output": "For each test case, print the answer in one line. If there exists at least one valid order, print \" Yes\" . Otherwise, print \" No\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, let' s consider the order { 1, 2, 2} of types of guests. Then: The first guest eats a chocolate cookie. After that, there are 2 vanilla cookies and 1 chocolate cookie. The second guest eats a chocolate cookie. After that, there are 2 vanilla cookies and 0 chocolate cookies. The last guest selects a chocolate cookie, but there are no chocolate cookies. So, the guest gets angry. So, this order can' t be chosen by Anna. Let' s consider the order { 2, 2, 1} of types of guests. Then: The first guest eats a vanilla cookie. After that, there is 1 vanilla cookie and 2 chocolate cookies. The second guest eats a vanilla cookie. After that, there are 0 vanilla cookies and 2 chocolate cookies. The last guest eats a chocolate cookie. After that, there are 0 vanilla cookies and 1 chocolate cookie. So, the answer to this test case is \" Yes\" . In the fifth test case, it is illustrated, that the number of cookies ( a + b ) can be equal to zero, but the number of guests ( n + m ) can' t be equal to zero. In the sixth test case, be careful about the overflow of 32 - bit integer type.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1371C"
  },
  {
    "title": "Binary Subsequence Rotation",
    "url": "https://codeforces.com/problemset/problem/1370/E",
    "history": "Naman has two binary strings s and t of length n ( a binary string is a string which only consists of the characters \" 0\" and \" 1\" ) . He wants to convert s into t using the following operation as few times as possible. In one operation, he can choose any subsequence of s and rotate it clockwise once. For example, if s = 1110100 , he can choose a subsequence corresponding to indices ( 1 - based) { 2, 6, 7 } and rotate them clockwise. The resulting string would then be s = 1010110 . A string a is said to be a subsequence of string b if a can be obtained from b by deleting some characters without changing the ordering of the remaining characters. To perform a clockwise rotation on a sequence c of size k is to perform an operation which sets c_ 1: = c_ k, c_ 2: = c_ 1, c_ 3: = c_ 2, . . . , c_ k: = c_ k- 1 simultaneously. Determine the minimum number of operations Naman has to perform to convert s into t or say that it is impossible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6) \u2014 the length of the strings. The second line contains the binary string s of length n . The third line contains the binary string t of length n .",
    "output": "If it is impossible to convert s to t after any number of operations, print - 1 . Otherwise, print the minimum number of operations required.",
    "note": "In the first test, Naman can choose the subsequence corresponding to indices { 2, 6} and rotate it once to convert s into t . In the second test, he can rotate the subsequence corresponding to all indices 5 times. It can be proved, that it is the minimum required number of operations. In the last test, it is impossible to convert s into t .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy"
    ],
    "id": "1370E"
  },
  {
    "title": "Odd-Even Subsequence",
    "url": "https://codeforces.com/problemset/problem/1370/D",
    "history": "Ashish has an array a of size n . A subsequence of a is defined as a sequence that can be obtained from a by deleting some elements ( possibly none) , without changing the order of the remaining elements. Consider a subsequence s of a . He defines the cost of s as the minimum between: The maximum among all elements at odd indices of s . The maximum among all elements at even indices of s . Note that the index of an element is its index in s , rather than its index in a . The positions are numbered from 1 . So, the cost of s is equal to min( max( s_ 1, s_ 3, s_ 5, . . . ) , max( s_ 2, s_ 4, s_ 6, . . . ) ) . For example, the cost of { 7, 5, 6} is min( max( 7, 6) , max( 5) ) = min( 7, 5) = 5 . Help him find the minimum cost of a subsequence of size k .",
    "input": "The first line contains two integers n and k ( 2 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array a and the size of the subsequence. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a .",
    "output": "Output a single integer \u2014 the minimum cost of a subsequence of size k .",
    "note": "In the first test, consider the subsequence s = { 1, 3} . Here the cost is equal to min( max( 1) , max( 3) ) = 1 . In the second test, consider the subsequence s = { 1, 2, 4} . Here the cost is equal to min( max( 1, 4) , max( 2) ) = 2 . In the fourth test, consider the subsequence s = { 3, 50, 2, 4} . Here the cost is equal to min( max( 3, 2) , max( 50, 4) ) = 3 .",
    "topics": [
      "binary search",
      "dp",
      "dsu",
      "greedy",
      "implementation"
    ],
    "id": "1370D"
  },
  {
    "title": "Maximum GCD",
    "url": "https://codeforces.com/problemset/problem/1370/A",
    "history": "Let' s consider all integers in the range from 1 to n ( inclusive) . Among all pairs of distinct integers in this range, find the maximum possible greatest common divisor of integers in pair. Formally, find the maximum value of gcd( a, b) , where 1 \u2264 a < b \u2264 n . The greatest common divisor, gcd( a, b) , of two positive integers a and b is the biggest integer that is a divisor of both a and b .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The only line of each test case contains a single integer n ( 2 \u2264 n \u2264 10^ 6 ) .",
    "output": "For each test case, output the maximum value of gcd( a, b) among all 1 \u2264 a < b \u2264 n .",
    "note": "In the first test case, gcd( 1, 2) = gcd( 2, 3) = gcd( 1, 3) = 1 . In the second test case, 2 is the maximum possible value, corresponding to gcd( 2, 4) .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "number theory"
    ],
    "id": "1370A"
  },
  {
    "title": "DeadLee",
    "url": "https://codeforces.com/problemset/problem/1369/E",
    "history": "Lee bought some food for dinner time, but Lee' s friends eat dinner in a deadly way. Lee is so scared, he doesn' t want to die, at least not before seeing Online IOI 2020. . . There are n different types of food and m Lee' s best friends. Lee has w_ i plates of the i - th type of food and each friend has two different favorite types of food: the i - th friend' s favorite types of food are x_ i and y_ i ( x_ i y_ i ) . Lee will start calling his friends one by one. Whoever is called will go to the kitchen and will try to eat one plate of each of his favorite food types. Each of the friends will go to the kitchen exactly once. The only problem is the following: if a friend will eat at least one plate of food ( in total) then he will be harmless. But if there is nothing left for him to eat ( neither x_ i nor y_ i ) , he will eat Lee instead \u00d7_ \u00d7 . Lee can choose the order of friends to call, so he' d like to determine if he can survive dinner or not. Also, he' d like to know the order itself.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 10^ 5 ; 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of different food types and the number of Lee' s friends. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 6 ) \u2014 the number of plates of each food type. The i - th line of the next m lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ; x_ i y_ i ) \u2014 the favorite types of food of the i - th friend.",
    "output": "If Lee can survive the dinner then print ALIVE ( case insensitive) , otherwise print DEAD ( case insensitive) . Also, if he can survive the dinner, print the order Lee should call friends. If there are multiple valid orders, print any of them.",
    "note": "In the first example, any of the following orders of friends are correct : [ 1, 3, 2] , [ 3, 1, 2] , [ 2, 3, 1] , [ 3, 2, 1] . In the second example, Lee should call the second friend first ( the friend will eat a plate of food 1 ) and then call the first friend ( the friend will eat a plate of food 2 ) . If he calls the first friend sooner than the second one, then the first friend will eat one plate of food 1 and food 2 and there will be no food left for the second friend to eat.",
    "topics": [
      "data structures",
      "dfs and similar",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1369E"
  },
  {
    "title": "TediousLee",
    "url": "https://codeforces.com/problemset/problem/1369/D",
    "history": "Lee tried so hard to make a good div. 2 D problem to balance his recent contest, but it still doesn' t feel good at all. Lee invented it so tediously slow that he managed to develop a phobia about div. 2 D problem setting instead. And now he is hiding behind the bushes. . . Let' s define a Rooted Dead Bush ( RDB) of level n as a rooted tree constructed as described below. A rooted dead bush of level 1 is a single vertex. To construct an RDB of level i we, at first, construct an RDB of level i- 1 , then for each vertex u : if u has no children then we will add a single child to it; if u has one child then we will add two children to it; if u has more than one child, then we will skip it. Rooted Dead Bushes of level 1 , 2 and 3 . Let' s define a claw as a rooted tree with four vertices: one root vertex ( called also as center) with three children. It looks like a claw: The center of the claw is the vertex with label 1 . Lee has a Rooted Dead Bush of level n . Initially, all vertices of his RDB are green. In one move, he can choose a claw in his RDB, if all vertices in the claw are green and all vertices of the claw are children of its center, then he colors the claw' s vertices in yellow. He' d like to know the maximum number of yellow vertices he can achieve. Since the answer might be very large, print it modulo 10^ 9+ 7 .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Next t lines contain test cases \u2014 one per line. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 6 ) \u2014 the level of Lee' s RDB.",
    "output": "For each test case, print a single integer \u2014 the maximum number of yellow vertices Lee can make modulo 10^ 9 + 7 .",
    "note": "It' s easy to see that the answer for RDB of level 1 or 2 is 0 . The answer for RDB of level 3 is 4 since there is only one claw we can choose: { 1, 2, 3, 4} . The answer for RDB of level 4 is 4 since we can choose either single claw { 1, 3, 2, 4} or single claw { 2, 7, 5, 6} . There are no other claws in the RDB of level 4 ( for example, we can' t choose { 2, 1, 7, 6} , since 1 is not a child of center vertex 2 ) . Rooted Dead Bush of level 4.",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "math",
      "trees"
    ],
    "id": "1369D"
  },
  {
    "title": "RationalLee",
    "url": "https://codeforces.com/problemset/problem/1369/C",
    "history": "Lee just became Master in Codeforces, and so, he went out to buy some gifts for his friends. He bought n integers, now it' s time to distribute them between his friends rationally. . . Lee has n integers a_ 1, a_ 2, . . . , a_ n in his backpack and he has k friends. Lee would like to distribute all integers in his backpack between his friends, such that the i - th friend will get exactly w_ i integers and each integer will be handed over to exactly one friend. Let' s define the happiness of a friend as the sum of the maximum and the minimum integer he' ll get. Lee would like to make his friends as happy as possible, in other words, he' d like to maximize the sum of friends' happiness. Now he asks you to calculate the maximum sum of friends' happiness.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Next 3t lines contain test cases \u2014 one per three lines. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ; 1 \u2264 k \u2264 n ) \u2014 the number of integers Lee has and the number of Lee' s friends. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the integers Lee has. The third line contains k integers w_ 1, w_ 2, . . . , w_ k ( 1 \u2264 w_ i \u2264 n ; w_ 1 + w_ 2 + . . . + w_ k = n ) \u2014 the number of integers Lee wants to give to each friend. It' s guaranteed that the sum of n over test cases is less than or equal to 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the maximum sum of happiness Lee can achieve.",
    "note": "In the first test case, Lee should give the greatest integer to the first friend ( his happiness will be 17 + 17 ) and remaining integers to the second friend ( his happiness will be 13 + 1 ) . In the second test case, Lee should give { 10, 10, 11} to the first friend and to the second friend, so the total happiness will be equal to ( 11 + 10) + ( 11 + 10) In the third test case, Lee has four friends and four integers, it doesn' t matter how he distributes the integers between his friends.",
    "topics": [
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "1369C"
  },
  {
    "title": "AccurateLee",
    "url": "https://codeforces.com/problemset/problem/1369/B",
    "history": "Lee was cleaning his house for the party when he found a messy string under the carpets. Now he' d like to make it clean accurately and in a stylish way. . . The string s he found is a binary string of length n ( i. e. string consists only of 0- s and 1- s) . In one move he can choose two consecutive characters s_ i and s_ i+ 1 , and if s_ i is 1 and s_ i + 1 is 0, he can erase exactly one of them ( he can choose which one to erase but he can' t erase both characters simultaneously) . The string shrinks after erasing. Lee can make an arbitrary number of moves ( possibly zero) and he' d like to make the string s as clean as possible. He thinks for two different strings x and y , the shorter string is cleaner, and if they are the same length, then the lexicographically smaller string is cleaner. Now you should answer t test cases: for the i - th test case, print the cleanest possible string that Lee can get by doing some number of moves. Small reminder: if we have two strings x and y of the same length then x is lexicographically smaller than y if there is a position i such that x_ 1 = y_ 1 , x_ 2 = y_ 2 , . . . , x_ i - 1 = y_ i - 1 and x_ i < y_ i .",
    "input": "The first line contains the integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Next 2t lines contain test cases \u2014 one per two lines. The first line of each test case contains the integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the string s . The second line contains the binary string s . The string s is a string of length n which consists only of zeroes and ones. It' s guaranteed that sum of n over test cases doesn' t exceed 10^ 5 .",
    "output": "Print t answers \u2014 one per test case. The answer to the i - th test case is the cleanest string Lee can get after doing some number of moves ( possibly zero) .",
    "note": "In the first test case, Lee can' t perform any moves. In the second test case, Lee should erase s_ 2 . In the third test case, Lee can make moves, for example, in the following order: 11001101 \u2192 1100101 \u2192 110101 \u2192 10101 \u2192 1101 \u2192 101 \u2192 01.",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1369B"
  },
  {
    "title": "Breadboard Capacity (easy version)",
    "url": "https://codeforces.com/problemset/problem/1368/H1",
    "history": "This is an easier version of the problem H without modification queries. Lester and Delbert work at an electronics company. They are currently working on a microchip component serving to connect two independent parts of a large supercomputer. The component is built on top of a breadboard \u2014 a grid- like base for a microchip. The breadboard has n rows and m columns, and each row- column intersection contains a node. Also, on each side of the breadboard there are ports that can be attached to adjacent nodes. Left and right side have n ports each, and top and bottom side have m ports each. Each of the ports is connected on the outside to one of the parts bridged by the breadboard, and is colored red or blue respectively. Ports can be connected by wires going inside the breadboard. However, there are a few rules to follow: Each wire should connect a red port with a blue port, and each port should be connected to at most one wire. Each part of the wire should be horizontal or vertical, and turns are only possible at one of the nodes. To avoid interference, wires can not have common parts of non- zero length ( but may have common nodes) . Also, a wire can not cover the same segment of non- zero length twice. The capacity of the breadboard is the largest number of red- blue wire connections that can be made subject to the rules above. For example, the breadboard above has capacity 7 , and one way to make seven connections is pictured below. Up to this point statements of both versions are identical. Differences follow below. Given the current breadboard configuration, help Lester and Delbert find its capacity efficiently.",
    "input": "The first line contains three integers n, m, q ( 1 \u2264 n, m \u2264 10^ 5 , q = 0 ) . n and m are the number of rows and columns of the breadboard respectively. In this version q is always zero, and is only present for consistency with the harder version. The next four lines describe initial coloring of the ports. Each character in these lines is either R or B, depending on the coloring of the respective port. The first two of these lines contain n characters each, and describe ports on the left and right sides respectively from top to bottom. The last two lines contain m characters each, and describe ports on the top and bottom sides respectively from left to right.",
    "output": "Print a single integer \u2014 the given breadboard capacity.",
    "note": "",
    "topics": [
      "dp",
      "flows",
      "greedy"
    ],
    "id": "1368H1"
  },
  {
    "title": "Ski Accidents",
    "url": "https://codeforces.com/problemset/problem/1368/E",
    "history": "Arthur owns a ski resort on a mountain. There are n landing spots on the mountain numbered from 1 to n from the top to the foot of the mountain. The spots are connected with one- directional ski tracks. All tracks go towards the foot of the mountain, so there are no directed cycles formed by the tracks. There are at most two tracks leaving each spot, but many tracks may enter the same spot. A skier can start skiing from one spot and stop in another spot if there is a sequence of tracks that lead from the starting spot and end in the ending spot. Unfortunately, recently there were many accidents, because the structure of the resort allows a skier to go through dangerous paths, by reaching high speed and endangering himself and the other customers. Here, a path is called dangerous, if it consists of at least two tracks. Arthur wants to secure his customers by closing some of the spots in a way that there are no dangerous paths in the resort. When a spot is closed, all tracks entering and leaving that spot become unusable. Formally, after closing some of the spots, there should not be a path that consists of two or more tracks. Arthur doesn' t want to close too many spots. He will be happy to find any way to close at most 4/ 7n spots so that the remaining part is safe. Help him find any suitable way to do so.",
    "input": "The first line contains a single positive integer T \u2014 the number of test cases. T test case description follows. The first line of each description contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of landing spots and tracks respectively. The following m lines describe the tracks. Each of these lines contains two integers x and y ( 1 \u2264 x < y \u2264 n ) \u2014 indices of the starting and finishing spots for the respective track. It is guaranteed that at most two tracks start at each spot. There may be tracks in which starting and finishing spots both coincide. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print a single integer k ( 0 \u2264 k \u22644/ 7n ) \u2014 the number of spots to be closed. In the next line, print k distinct integers \u2014 indices of all spots to be closed, in any order. If there are several answers, you may output any of them. Note that you don' t have to minimize k . It can be shown that a suitable answer always exists.",
    "note": "In the first sample case, closing any two spots is suitable. In the second sample case, closing only the spot 1 is also suitable.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy"
    ],
    "id": "1368E"
  },
  {
    "title": "AND, OR and square sum",
    "url": "https://codeforces.com/problemset/problem/1368/D",
    "history": "Gottfried learned about binary number representation. He then came up with this task and presented it to you. You are given a collection of n non- negative integers a_ 1, . . . , a_ n . You are allowed to perform the following operation: choose two distinct indices 1 \u2264 i, j \u2264 n . If before the operation a_ i = x , a_ j = y , then after the operation a_ i = x AND y , a_ j = x OR y , where AND and OR are bitwise AND and OR respectively ( refer to the Notes section for formal description) . The operation may be performed any number of times ( possibly zero) . After all operations are done, compute \u2211_ i= 1^ n a_ i^ 2 \u2014 the sum of squares of all a_ i . What is the largest sum of squares you can achieve?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, . . . , a_ n ( 0 \u2264 a_ i < 2^ 20 ) .",
    "output": "Print a single integer \u2014 the largest possible sum of squares that can be achieved after several ( possibly zero) operations.",
    "note": "In the first sample no operation can be made, thus the answer is 123^ 2 . In the second sample we can obtain the collection 1, 1, 7 , and 1^ 2 + 1^ 2 + 7^ 2 = 51 . If x and y are represented in binary with equal number of bits ( possibly with leading zeros) , then each bit of x AND y is set to 1 if and only if both corresponding bits of x and y are set to 1 . Similarly, each bit of x OR y is set to 1 if and only if at least one of the corresponding bits of x and y are set to 1 . For example, x = 3 and y = 5 are represented as 011_ 2 and 101_ 2 ( highest bit first) . Then, x AND y = 001_ 2 = 1 , and x OR y = 111_ 2 = 7 .",
    "topics": [
      "bitmasks",
      "greedy",
      "math"
    ],
    "id": "1368D"
  },
  {
    "title": "Codeforces Subsequences",
    "url": "https://codeforces.com/problemset/problem/1368/B",
    "history": "Karl likes Codeforces and subsequences. He wants to find a string of lowercase English letters that contains at least k subsequences codeforces. Out of all possible strings, Karl wants to find a shortest one. Formally, a codeforces subsequence of a string s is a subset of ten characters of s that read codeforces from left to right. For example, codeforces contains codeforces a single time, while codeforcesisawesome contains codeforces four times: codeforcesisawesome, codeforcesisawesome, codeforcesisawesome, codeforcesisawesome. Help Karl find any shortest string that contains at least k codeforces subsequences.",
    "input": "The only line contains a single integer k ( 1 \u2264 k \u2264 10^ 16) .",
    "output": "Print a shortest string of lowercase English letters that contains at least k codeforces subsequences. If there are several such strings, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "strings"
    ],
    "id": "1368B"
  },
  {
    "title": "C+=",
    "url": "https://codeforces.com/problemset/problem/1368/A",
    "history": "Leo has developed a new programming language C+ = . In C+ = , integer variables can only be changed with a \" + = \" operation that adds the right- hand side value to the left- hand side variable. For example, performing \" a + = b\" when a = 2 , b = 3 changes the value of a to 5 ( the value of b does not change) . In a prototype program Leo has two integer variables a and b, initialized with some positive values. He can perform any number of operations \" a + = b\" or \" b + = a\" . Leo wants to test handling large integers, so he wants to make the value of either a or b strictly greater than a given value n . What is the smallest number of operations he has to perform?",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of test cases. Each of the following T lines describes a single test case, and contains three integers a, b, n ( 1 \u2264 a, b \u2264 n \u2264 10^ 9 ) \u2014 initial values of a and b, and the value one of the variables has to exceed, respectively.",
    "output": "For each test case print a single integer \u2014 the smallest number of operations needed. Separate answers with line breaks.",
    "note": "In the first case we cannot make a variable exceed 3 in one operation. One way of achieving this in two operations is to perform \" b + = a\" twice.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1368A"
  },
  {
    "title": "Flying Sort (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1367/F2",
    "history": "This is a hard version of the problem. In this version, the given array can contain equal elements and the constraints on n are greater than in the easy version of the problem. You are given an array a of n integers ( the given array can contain equal elements) . You can perform the following operations on array elements: choose any index i ( 1 \u2264 i \u2264 n ) and move the element a[ i] to the begin of the array; choose any index i ( 1 \u2264 i \u2264 n ) and move the element a[ i] to the end of the array. For example, if n = 5 , a = [ 4, 7, 2, 2, 9] , then the following sequence of operations can be performed: after performing the operation of the first type to the second element, the array a will become [ 7, 4, 2, 2, 9] ; after performing the operation of the second type to the second element, the array a will become [ 7, 2, 2, 9, 4] . You can perform operations of any type any number of times in any order. Find the minimum total number of operations of the first and second type that will make the a array sorted in non- decreasing order. In other words, what is the minimum number of operations must be performed so the array satisfies the inequalities a[ 1] \u2264 a[ 2] \u2264. . . \u2264 a[ n] .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then t test cases follow. Each test case starts with a line containing an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the array a . Then follow n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 an array that needs to be sorted by the given operations. The given array can contain equal elements. The sum of n for all test cases in one test does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case output one integer \u2014 the minimum total number of operations of the first and second type, which will make the array sorted in non- decreasing order.",
    "note": "In the first test case, you first need to move two 2, to the beginning of the array. Therefore, the desired sequence of operations: [ 4, 7, 2, 2, 9] \u2192 [ 2, 4, 7, 2, 9] \u2192 [ 2, 2, 4, 7, 9] . In the second test case, you need to move the 1 to the beginning of the array, and the 8 \u2014 to the end. Therefore, the desired sequence of operations: [ 3, 5, 8, 1, 7] \u2192 [ 1, 3, 5, 8, 7] \u2192 [ 1, 3, 5, 7, 8] . In the third test case, the array is already sorted.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1367F2"
  },
  {
    "title": "Flying Sort (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1367/F1",
    "history": "This is an easy version of the problem. In this version, all numbers in the given array are distinct and the constraints on n are less than in the hard version of the problem. You are given an array a of n integers ( there are no equals elements in the array) . You can perform the following operations on array elements: choose any index i ( 1 \u2264 i \u2264 n ) and move the element a[ i] to the begin of the array; choose any index i ( 1 \u2264 i \u2264 n ) and move the element a[ i] to the end of the array. For example, if n = 5 , a = [ 4, 7, 2, 3, 9] , then the following sequence of operations can be performed: after performing the operation of the first type to the second element, the array a will become [ 7, 4, 2, 3, 9] ; after performing the operation of the second type to the second element, the array a will become [ 7, 2, 3, 9, 4] . You can perform operations of any type any number of times in any order. Find the minimum total number of operations of the first and second type that will make the a array sorted in non- decreasing order. In other words, what is the minimum number of operations that must be performed so the array satisfies the inequalities a[ 1] \u2264 a[ 2] \u2264. . . \u2264 a[ n] .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases in the test. Then t test cases follow. Each test case starts with a line containing an integer n ( 1 \u2264 n \u2264 3000 ) \u2014 length of the array a . Then follow n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 an array that needs to be sorted by the given operations. All numbers in the given array are distinct. The sum of n for all test cases in one test does not exceed 3000 .",
    "output": "For each test case output one integer \u2014 the minimum total number of operations of the first and second type, which will make the array sorted in non- decreasing order.",
    "note": "In the first test case, you first need to move 3, and then 2 to the beginning of the array. Therefore, the desired sequence of operations: [ 4, 7, 2, 3, 9] \u2192 [ 3, 4, 7, 2, 9] \u2192 [ 2, 3, 4, 7, 9] . In the second test case, you need to move the 1 to the beginning of the array, and the 8 \u2014 to the end. Therefore, the desired sequence of operations: [ 3, 5, 8, 1, 7] \u2192 [ 1, 3, 5, 8, 7] \u2192 [ 1, 3, 5, 7, 8] . In the third test case, the array is already sorted.",
    "topics": [
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1367F1"
  },
  {
    "title": "Necklace Assembly",
    "url": "https://codeforces.com/problemset/problem/1367/E",
    "history": "The store sells n beads. The color of each bead is described by a lowercase letter of the English alphabet ( \" a\" \u2013\" z\" ) . You want to buy some beads to assemble a necklace from them. A necklace is a set of beads connected in a circle. For example, if the store sells beads \" a\" , \" b\" , \" c\" , \" a\" , \" c\" , \" c\" , then you can assemble the following necklaces ( these are not all possible options) : And the following necklaces cannot be assembled from beads sold in the store: The first necklace cannot be assembled because it has three beads \" a\" ( of the two available) . The second necklace cannot be assembled because it contains a bead \" d\" , which is not sold in the store. We call a necklace k - beautiful if, when it is turned clockwise by k beads, the necklace remains unchanged. For example, here is a sequence of three turns of a necklace. As you can see, this necklace is, for example, 3 - beautiful, 6 - beautiful, 9 - beautiful, and so on, but it is not 1 - beautiful or 2 - beautiful. In particular, a necklace of length 1 is k - beautiful for any integer k . A necklace that consists of beads of the same color is also beautiful for any k . You are given the integers n and k , and also the string s containing n lowercase letters of the English alphabet \u2014 each letter defines a bead in the store. You can buy any subset of beads and connect them in any order. Find the maximum length of a k - beautiful necklace you can assemble.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases in the test. Then t test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 n, k \u2264 2000 ) . The second line of each test case contains the string s containing n lowercase English letters \u2014 the beads in the store. It is guaranteed that the sum of n for all test cases does not exceed 2000 .",
    "output": "Output t answers to the test cases. Each answer is a positive integer \u2014 the maximum length of the k - beautiful necklace you can assemble.",
    "note": "The first test case is explained in the statement. In the second test case, a 6 - beautiful necklace can be assembled from all the letters. In the third test case, a 1000 - beautiful necklace can be assembled, for example, from beads \" abzyo\" .",
    "topics": [
      "brute force",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "number theory"
    ],
    "id": "1367E"
  },
  {
    "title": "Task On The Board",
    "url": "https://codeforces.com/problemset/problem/1367/D",
    "history": "Polycarp wrote on the board a string s containing only lowercase Latin letters ( ' a' - ' z' ) . This string is known for you and given in the input. After that, he erased some letters from the string s , and he rewrote the remaining letters in any order. As a result, he got some new string t . You have to find it with some additional information. Suppose that the string t has length m and the characters are numbered from left to right from 1 to m . You are given a sequence of m integers: b_ 1, b_ 2, . . . , b_ m , where b_ i is the sum of the distances | i- j| from the index i to all such indices j that t_ j > t_ i ( consider that ' a' < ' b' < . . . < ' z' ) . In other words, to calculate b_ i , Polycarp finds all such indices j that the index j contains a letter that is later in the alphabet than t_ i and sums all the values | i- j| . For example, if t = \" abzb\" , then: since t_ 1 = ' a' , all other indices contain letters which are later in the alphabet, that is: b_ 1= | 1- 2| + | 1- 3| + | 1- 4| = 1+ 2+ 3= 6 ; since t_ 2 = ' b' , only the index j= 3 contains the letter, which is later in the alphabet, that is: b_ 2= | 2- 3| = 1 ; since t_ 3 = ' z' , then there are no indexes j such that t_ j> t_ i , thus b_ 3= 0 ; since t_ 4 = ' b' , only the index j= 3 contains the letter, which is later in the alphabet, that is: b_ 4= | 4- 3| = 1 . Thus, if t = \" abzb\" , then b= [ 6, 1, 0, 1] . Given the string s and the array b , find any possible string t for which the following two requirements are fulfilled simultaneously: t is obtained from s by erasing some letters ( possibly zero) and then writing the rest in any order; the array, constructed from the string t according to the rules above, equals to the array b specified in the input data.",
    "input": "The first line contains an integer q ( 1 \u2264 q \u2264 100 ) \u2014 the number of test cases in the test. Then q test cases follow. Each test case consists of three lines: the first line contains string s , which has a length from 1 to 50 and consists of lowercase English letters; the second line contains positive integer m ( 1 \u2264 m \u2264 | s| ) , where | s| is the length of the string s , and m is the length of the array b ; the third line contains the integers b_ 1, b_ 2, . . . , b_ m ( 0 \u2264 b_ i \u2264 1225 ) . It is guaranteed that in each test case an answer exists.",
    "output": "Output q lines: the k - th of them should contain the answer ( string t ) to the k - th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.",
    "note": "In the first test case, such strings t are suitable: \" aac' , \" aab\" . In the second test case, such trings t are suitable: \" a\" , \" b\" , \" c\" . In the third test case, only the string t equals to \" aba\" is suitable, but the character ' b' can be from the second or third position.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1367D"
  },
  {
    "title": "Social Distance",
    "url": "https://codeforces.com/problemset/problem/1367/C",
    "history": "Polycarp and his friends want to visit a new restaurant. The restaurant has n tables arranged along a straight line. People are already sitting at some tables. The tables are numbered from 1 to n in the order from left to right. The state of the restaurant is described by a string of length n which contains characters \" 1\" ( the table is occupied) and \" 0\" ( the table is empty) . Restaurant rules prohibit people to sit at a distance of k or less from each other. That is, if a person sits at the table number i , then all tables with numbers from i- k to i+ k ( except for the i - th) should be free. In other words, the absolute difference of the numbers of any two occupied tables must be strictly greater than k . For example, if n= 8 and k= 2 , then: strings \" 10010001\" , \" 10000010\" , \" 00000000\" , \" 00100000\" satisfy the rules of the restaurant; strings \" 10100100\" , \" 10011001\" , \" 11111111\" do not satisfy to the rules of the restaurant, since each of them has a pair of \" 1\" with a distance less than or equal to k= 2 . In particular, if the state of the restaurant is described by a string without \" 1\" or a string with one \" 1\" , then the requirement of the restaurant is satisfied. You are given a binary string s that describes the current state of the restaurant. It is guaranteed that the rules of the restaurant are satisfied for the string s . Find the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant. Formally, what is the maximum number of \" 0\" that can be replaced by \" 1\" such that the requirement will still be satisfied? For example, if n= 6 , k= 1 , s= \" 100010\" , then the answer to the problem will be 1 , since only the table at position 3 can be occupied such that the rules are still satisfied.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then t test cases follow. Each test case starts with a line containing two integers n and k ( 1 \u2264 k \u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the number of tables in the restaurant and the minimum allowed distance between two people. The second line of each test case contains a binary string s of length n consisting of \" 0\" and \" 1\" \u2014 a description of the free and occupied tables in the restaurant. The given string satisfy to the rules of the restaurant \u2014 the difference between indices of any two \" 1\" is more than k . The sum of n for all test cases in one test does not exceed 2\u00b7 10^ 5 .",
    "output": "For each test case output one integer \u2014 the number of tables that you can occupy so as not to violate the rules of the restaurant. If additional tables cannot be taken, then, obviously, you need to output 0 .",
    "note": "The first test case is explained in the statement. In the second test case, the answer is 2 , since you can choose the first and the sixth table. In the third test case, you cannot take any free table without violating the rules of the restaurant.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1367C"
  },
  {
    "title": "Even Array",
    "url": "https://codeforces.com/problemset/problem/1367/B",
    "history": "You are given an array a[ 0 . . . n- 1] of length n which consists of non- negative integers. Note that array indices start from zero. An array is called good if the parity of each index matches the parity of the element at that index. More formally, an array is good if for all i ( 0 \u2264 i \u2264 n - 1 ) the equality i 2 = a[ i] 2 holds, where x 2 is the remainder of dividing x by 2. For example, the arrays [ 0, 5, 2, 1 ] and [ 0, 17, 0, 3 ] are good, and the array [ 2, 4, 6, 7 ] is bad, because for i= 1 , the parities of i and a[ i] are different: i 2 = 1 2 = 1 , but a[ i] 2 = 4 2 = 0 . In one move, you can take any two elements of the array and swap them ( these elements are not necessarily adjacent) . Find the minimum number of moves in which you can make the array a good, or say that this is not possible.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases in the test. Then t test cases follow. Each test case starts with a line containing an integer n ( 1 \u2264 n \u2264 40 ) \u2014 the length of the array a . The next line contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( 0 \u2264 a_ i \u2264 1000 ) \u2014 the initial array.",
    "output": "For each test case, output a single integer \u2014 the minimum number of moves to make the given array a good, or - 1 if this is not possible.",
    "note": "In the first test case, in the first move, you can swap the elements with indices 0 and 1 , and in the second move, you can swap the elements with indices 2 and 3 . In the second test case, in the first move, you need to swap the elements with indices 0 and 1 . In the third test case, you cannot make the array good.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1367B"
  },
  {
    "title": "Palindromic Paths",
    "url": "https://codeforces.com/problemset/problem/1366/C",
    "history": "You are given a matrix with n rows ( numbered from 1 to n ) and m columns ( numbered from 1 to m ) . A number a_ i, j is written in the cell belonging to the i - th row and the j - th column, each number is either 0 or 1 . A chip is initially in the cell ( 1, 1) , and it will be moved to the cell ( n, m) . During each move, it either moves to the next cell in the current row, or in the current column ( if the current cell is ( x, y) , then after the move it can be either ( x + 1, y) or ( x, y + 1) ) . The chip cannot leave the matrix. Consider each path of the chip from ( 1, 1) to ( n, m) . A path is called palindromic if the number in the first cell is equal to the number in the last cell, the number in the second cell is equal to the number in the second- to- last cell, and so on. Your goal is to change the values in the minimum number of cells so that every path is palindromic.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 2 \u2264 n, m \u2264 30 ) \u2014 the dimensions of the matrix. Then n lines follow, the i - th line contains m integers a_ i, 1 , a_ i, 2 , . . . , a_ i, m ( 0 \u2264 a_ i, j\u2264 1 ) .",
    "output": "For each test case, print one integer \u2014 the minimum number of cells you have to change so that every path in the matrix is palindromic.",
    "note": "The resulting matrices in the first three test cases: [ 1 1; 0 1 ] [ 0 0 0; 0 0 0 ] [ 1 0 1 1 1 1 1; 0 1 1 0 1 1 0; 1 1 1 1 1 0 1 ]",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1366C"
  },
  {
    "title": "Shovels and Swords",
    "url": "https://codeforces.com/problemset/problem/1366/A",
    "history": "Polycarp plays a well- known computer game ( we won' t mention its name) . In this game, he can craft tools of two types \u2014 shovels and swords. To craft a shovel, Polycarp spends two sticks and one diamond; to craft a sword, Polycarp spends two diamonds and one stick. Each tool can be sold for exactly one emerald. How many emeralds can Polycarp earn, if he has a sticks and b diamonds?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The only line of each test case contains two integers a and b ( 0 \u2264 a, b \u2264 10^ 9 ) \u2014 the number of sticks and the number of diamonds, respectively.",
    "output": "For each test case print one integer \u2014 the maximum number of emeralds Polycarp can earn.",
    "note": "In the first test case Polycarp can earn two emeralds as follows: craft one sword and one shovel. In the second test case Polycarp does not have any diamonds, so he cannot craft anything.",
    "topics": [
      "binary search",
      "greedy",
      "math"
    ],
    "id": "1366A"
  },
  {
    "title": "Solve The Maze",
    "url": "https://codeforces.com/problemset/problem/1365/D",
    "history": "Vivek has encountered a problem. He has a maze that can be represented as an n \u00d7 m grid. Each of the grid cells may represent the following: Empty \u2014 ' . ' Wall \u2014 ' # ' Good person \u2014 ' G' Bad person \u2014 ' B' The only escape from the maze is at cell ( n, m) . A person can move to a cell only if it shares a side with their current cell and does not contain a wall. Vivek wants to block some of the empty cells by replacing them with walls in such a way, that all the good people are able to escape, while none of the bad people are able to. A cell that initially contains ' G' or ' B' cannot be blocked and can be travelled through. Help him determine if there exists a way to replace some ( zero or more) empty cells with walls to satisfy the above conditions. It is guaranteed that the cell ( n, m) is empty. Vivek can also block this cell.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n , m ( 1 \u2264 n, m \u2264 50) \u2014 the number of rows and columns in the maze. Each of the next n lines contain m characters. They describe the layout of the maze. If a character on a line equals ' . ' , the corresponding cell is empty. If it equals ' # ' , the cell has a wall. ' G' corresponds to a good person and ' B' corresponds to a bad person.",
    "output": "For each test case, print \" Yes\" if there exists a way to replace some empty cells with walls to satisfy the given conditions. Otherwise print \" No\" You may print every letter in any case ( upper or lower) .",
    "note": "For the first and second test cases, all conditions are already satisfied. For the third test case, there is only one empty cell ( 2, 2) , and if it is replaced with a wall then the good person at ( 1, 2) will not be able to escape. For the fourth test case, the good person at ( 1, 1) cannot escape. For the fifth test case, Vivek can block the cells ( 2, 3) and ( 2, 2) . For the last test case, Vivek can block the destination cell ( 2, 2) .",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "shortest paths"
    ],
    "id": "1365D"
  },
  {
    "title": "Rotation Matching",
    "url": "https://codeforces.com/problemset/problem/1365/C",
    "history": "After the mysterious disappearance of Ashish, his two favourite disciples Ishika and Hriday, were each left with one half of a secret message. These messages can each be represented by a permutation of size n . Let' s call them a and b . Note that a permutation of n elements is a sequence of numbers a_ 1, a_ 2, . . . , a_ n , in which every number from 1 to n appears exactly once. The message can be decoded by an arrangement of sequence a and b , such that the number of matching pairs of elements between them is maximum. A pair of elements a_ i and b_ j is said to match if: i = j , that is, they are at the same index. a_ i = b_ j His two disciples are allowed to perform the following operation any number of times: choose a number k and cyclically shift one of the permutations to the left or right k times. A single cyclic shift to the left on any permutation c is an operation that sets c_ 1: = c_ 2, c_ 2: = c_ 3, . . . , c_ n: = c_ 1 simultaneously. Likewise, a single cyclic shift to the right on any permutation c is an operation that sets c_ 1: = c_ n, c_ 2: = c_ 1, . . . , c_ n: = c_ n- 1 simultaneously. Help Ishika and Hriday find the maximum number of pairs of elements that match after performing the operation any ( possibly zero) number of times.",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the size of the arrays. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 n) \u2014 the elements of the first permutation. The third line contains n integers b_ 1 , b_ 2 , . . . , b_ n ( 1 \u2264 b_ i \u2264 n) \u2014 the elements of the second permutation.",
    "output": "Print the maximum number of matching pairs of elements after performing the above operations some ( possibly zero) times.",
    "note": "For the first case: b can be shifted to the right by k = 1 . The resulting permutations will be { 1, 2, 3, 4, 5} and { 1, 2, 3, 4, 5} . For the second case: The operation is not required. For all possible rotations of a and b , the number of matching pairs won' t exceed 1 . For the third case: b can be shifted to the left by k = 1 . The resulting permutations will be { 1, 3, 2, 4} and { 2, 3, 1, 4} . Positions 2 and 4 have matching pairs of elements. For all possible rotations of a and b , the number of matching pairs won' t exceed 2 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1365C"
  },
  {
    "title": "Matrix Game",
    "url": "https://codeforces.com/problemset/problem/1365/A",
    "history": "Ashish and Vivek play a game on a matrix consisting of n rows and m columns, where they take turns claiming cells. Unclaimed cells are represented by 0 , while claimed cells are represented by 1 . The initial state of the matrix is given. There can be some claimed cells in the initial state. In each turn, a player must claim a cell. A cell may be claimed if it is unclaimed and does not share a row or column with any other already claimed cells. When a player is unable to make a move, he loses and the game ends. If Ashish and Vivek take turns to move and Ashish goes first, determine the winner of the game if both of them are playing optimally. Optimal play between two players means that both players choose the best possible strategy to achieve the best possible outcome for themselves.",
    "input": "The first line consists of a single integer t ( 1 \u2264 t \u2264 50) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case consists of two space- separated integers n , m ( 1 \u2264 n, m \u2264 50) \u2014 the number of rows and columns in the matrix. The following n lines consist of m integers each, the j - th integer on the i - th line denoting a_ i, j ( a_ i, j\u2208{ 0, 1} ) .",
    "output": "For each test case if Ashish wins the game print \" Ashish\" otherwise print \" Vivek\" ( without quotes) .",
    "note": "For the first case: One possible scenario could be: Ashish claims cell ( 1, 1) , Vivek then claims cell ( 2, 2) . Ashish can neither claim cell ( 1, 2) , nor cell ( 2, 1) as cells ( 1, 1) and ( 2, 2) are already claimed. Thus Ashish loses. It can be shown that no matter what Ashish plays in this case, Vivek will win. For the second case: Ashish claims cell ( 1, 1) , the only cell that can be claimed in the first move. After that Vivek has no moves left. For the third case: Ashish cannot make a move, so Vivek wins. For the fourth case: If Ashish claims cell ( 2, 3) , Vivek will have no moves left.",
    "topics": [
      "games",
      "greedy",
      "implementation"
    ],
    "id": "1365A"
  },
  {
    "title": "Ehab's Last Corollary",
    "url": "https://codeforces.com/problemset/problem/1364/D",
    "history": "Given a connected undirected graph with n vertices and an integer k , you have to either: either find an independent set that has exactly \u2308k/ 2\u2309 vertices. or find a simple cycle of length at most k . An independent set is a set of vertices such that no two of them are connected by an edge. A simple cycle is a cycle that doesn' t contain any vertex twice. I have a proof that for any input you can always solve at least one of these problems, but it' s left as an exercise for the reader.",
    "input": "The first line contains three integers n , m , and k ( 3 \u2264 k \u2264 n \u2264 10^ 5 , n- 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and edges in the graph, and the parameter k from the statement. Each of the next m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) that mean there' s an edge between vertices u and v . It' s guaranteed that the graph is connected and doesn' t contain any self- loops or multiple edges.",
    "output": "If you choose to solve the first problem, then on the first line print 1 , followed by a line containing \u2308k/ 2\u2309 distinct integers not exceeding n , the vertices in the desired independent set. If you, however, choose to solve the second problem, then on the first line print 2 , followed by a line containing one integer, c , representing the length of the found cycle, followed by a line containing c distinct integers not exceeding n , the vertices in the desired cycle, in the order they appear in the cycle.",
    "note": "In the first sample: Notice that printing the independent set { 2, 4} is also OK, but printing the cycle 1- 2- 3- 4 isn' t, because its length must be at most 3 . In the second sample: Notice that printing the independent set { 1, 3} or printing the cycle 2- 1- 4 is also OK. In the third sample: In the fourth sample:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1364D"
  },
  {
    "title": "Ehab and Prefix MEXs",
    "url": "https://codeforces.com/problemset/problem/1364/C",
    "history": "Given an array a of length n , find another array, b , of length n such that: for each i ( 1 \u2264 i \u2264 n) MEX( { b_ 1 , b_ 2 , . . . , b_ i} ) = a_ i . The MEX of a set of integers is the smallest non- negative integer that doesn' t belong to this set. If such array doesn' t exist, determine this.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the array a . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 i ) \u2014 the elements of the array a . It' s guaranteed that a_ i \u2264 a_ i+ 1 for 1\u2264 i < n .",
    "output": "If there' s no such array, print a single line containing - 1 . Otherwise, print a single line containing n integers b_ 1 , b_ 2 , . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 6 ) If there are multiple answers, print any.",
    "note": "In the second test case, other answers like [ 1, 1, 1, 0] , for example, are valid.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1364C"
  },
  {
    "title": "Most socially-distanced subsequence",
    "url": "https://codeforces.com/problemset/problem/1364/B",
    "history": "Given a permutation p of length n , find its subsequence s_ 1 , s_ 2 , . . . , s_ k of length at least 2 such that: | s_ 1- s_ 2| + | s_ 2- s_ 3| + . . . + | s_ k- 1- s_ k| is as big as possible over all subsequences of p with length at least 2 . Among all such subsequences, choose the one whose length, k , is as small as possible. If multiple subsequences satisfy these conditions, you are allowed to find any of them. A sequence a is a subsequence of an array b if a can be obtained from b by deleting some ( possibly, zero or all) elements. A permutation of length n is an array of length n in which every element from 1 to n occurs exactly once.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the length of the permutation p . The second line of each test case contains n integers p_ 1 , p_ 2 , . . . , p_ n ( 1 \u2264 p_ i \u2264 n , p_ i are distinct) \u2014 the elements of the permutation p . The sum of n across the test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, the first line should contain the length of the found subsequence, k . The second line should contain s_ 1 , s_ 2 , . . . , s_ k \u2014 its elements. If multiple subsequences satisfy these conditions, you are allowed to find any of them.",
    "note": "In the first test case, there are 4 subsequences of length at least 2 : [ 3, 2] which gives us | 3- 2| = 1 . [ 3, 1] which gives us | 3- 1| = 2 . [ 2, 1] which gives us | 2- 1| = 1 . [ 3, 2, 1] which gives us | 3- 2| + | 2- 1| = 2 . So the answer is either [ 3, 1] or [ 3, 2, 1] . Since we want the subsequence to be as short as possible, the answer is [ 3, 1] .",
    "topics": [
      "greedy",
      "two pointers"
    ],
    "id": "1364B"
  },
  {
    "title": "Tree Shuffling",
    "url": "https://codeforces.com/problemset/problem/1363/E",
    "history": "Ashish has a tree consisting of n nodes numbered 1 to n rooted at node 1 . The i - th node in the tree has a cost a_ i , and binary digit b_ i is written in it. He wants to have binary digit c_ i written in the i - th node in the end. To achieve this, he can perform the following operation any number of times: Select any k nodes from the subtree of any node u , and shuffle the digits in these nodes as he wishes, incurring a cost of k \u00b7 a_ u . Here, he can choose k ranging from 1 to the size of the subtree of u . He wants to perform the operations in such a way that every node finally has the digit corresponding to its target. Help him find the minimum total cost he needs to spend so that after all the operations, every node u has digit c_ u written in it, or determine that it is impossible.",
    "input": "First line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) denoting the number of nodes in the tree. i - th line of the next n lines contains 3 space- separated integers a_ i , b_ i , c_ i ( 1 \u2264 a_ i \u2264 10^ 9, 0 \u2264 b_ i, c_ i \u2264 1) \u2014 the cost of the i - th node, its initial digit and its goal digit. Each of the next n - 1 lines contain two integers u , v ( 1 \u2264 u, v \u2264 n, u v) , meaning that there is an edge between nodes u and v in the tree.",
    "output": "Print the minimum total cost to make every node reach its target digit, and - 1 if it is impossible.",
    "note": "The tree corresponding to samples 1 and 2 are: In sample 1 , we can choose node 1 and k = 4 for a cost of 4 \u00b7 1 = 4 and select nodes 1, 2, 3, 5 , shuffle their digits and get the desired digits in every node. In sample 2 , we can choose node 1 and k = 2 for a cost of 10000 \u00b7 2 , select nodes 1, 5 and exchange their digits, and similarly, choose node 2 and k = 2 for a cost of 2000 \u00b7 2 , select nodes 2, 3 and exchange their digits to get the desired digits in every node. In sample 3 , it is impossible to get the desired digits, because there is no node with digit 1 initially.",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1363E"
  },
  {
    "title": "Johnny and Another Rating Drop",
    "url": "https://codeforces.com/problemset/problem/1362/C",
    "history": "The last contest held on Johnny' s favorite competitive programming platform has been received rather positively. However, Johnny' s rating has dropped again! He thinks that the presented tasks are lovely, but don' t show the truth about competitors' skills. The boy is now looking at the ratings of consecutive participants written in a binary system. He thinks that the more such ratings differ, the more unfair is that such people are next to each other. He defines the difference between two numbers as the number of bit positions, where one number has zero, and another has one ( we suppose that numbers are padded with leading zeros to the same length) . For example, the difference of 5 = 101_ 2 and 14 = 1110_ 2 equals to 3 , since 0101 and 1110 differ in 3 positions. Johnny defines the unfairness of the contest as the sum of such differences counted for neighboring participants. Johnny has just sent you the rating sequence and wants you to find the unfairness of the competition. You have noticed that you' ve got a sequence of consecutive integers from 0 to n . That' s strange, but the boy stubbornly says that everything is right. So help him and find the desired unfairness for received numbers.",
    "input": "The input consists of multiple test cases. The first line contains one integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases. The following t lines contain a description of test cases. The first and only line in each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 18) .",
    "output": "Output t lines. For each test case, you should output a single line with one integer \u2014 the unfairness of the contest if the rating sequence equals to 0 , 1 , . . . , n - 1 , n .",
    "note": "For n = 5 we calculate unfairness of the following sequence ( numbers from 0 to 5 written in binary with extra leading zeroes, so they all have the same length) : 000 001 010 011 100 101 The differences are equal to 1 , 2 , 1 , 3 , 1 respectively, so unfairness is equal to 1 + 2 + 1 + 3 + 1 = 8 .",
    "topics": [
      "bitmasks",
      "greedy",
      "math"
    ],
    "id": "1362C"
  },
  {
    "title": "Johnny and Grandmaster",
    "url": "https://codeforces.com/problemset/problem/1361/B",
    "history": "Johnny has just found the new, great tutorial: \" How to become a grandmaster? \" . The tutorial tells many strange and unexpected for Johnny things, such as you have to be patient or that very important is solving many harder and harder problems. The boy has found an online judge with tasks divided by topics they cover. He has picked p^ k_ i problems from i - th category ( p is his favorite number) . He wants to solve them in two weeks ( the patience condition is too hard for Johnny, so for simplicity, he looks only at easy tasks, which can be solved in such a period) . Now our future grandmaster has to decide which topics to cover first and which the second week. Help him assign topics in such a way, that workload is balanced. Formally, given n numbers p^ k_ i , the boy wants to divide them into two disjoint sets, minimizing the absolute difference between sums of numbers in each set. Find the minimal absolute difference. Output the result modulo 10^ 9+ 7 .",
    "input": "Input consists of multiple test cases. The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. Each test case is described as follows: The first line contains two integers n and p ( 1 \u2264 n, p \u2264 10^ 6) . The second line contains n integers k_ i ( 0 \u2264 k_ i \u2264 10^ 6) . The sum of n over all test cases doesn' t exceed 10^ 6 .",
    "output": "Output one integer \u2014 the reminder of division the answer by 1 000 000 007 .",
    "note": "You have to minimize the difference, not it' s remainder. For example, if the minimum difference is equal to 2 , but there is also a distribution where the difference is 10^ 9 + 8 , then the answer is 2 , not 1 . In the first test case of the example, there' re the following numbers: 4 , 8 , 16 , 16 , and 8 . We can divide them into such two sets: 4, 8, 16 and 8, 16 . Then the difference between the sums of numbers in sets would be 4 .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1361B"
  },
  {
    "title": "Johnny and Contribution",
    "url": "https://codeforces.com/problemset/problem/1361/A",
    "history": "Today Johnny wants to increase his contribution. His plan assumes writing n blogs. One blog covers one topic, but one topic can be covered by many blogs. Moreover, some blogs have references to each other. Each pair of blogs that are connected by a reference has to cover different topics because otherwise, the readers can notice that they are split just for more contribution. Set of blogs and bidirectional references between some pairs of them is called blogs network. There are n different topics, numbered from 1 to n sorted by Johnny' s knowledge. The structure of the blogs network is already prepared. Now Johnny has to write the blogs in some order. He is lazy, so each time before writing a blog, he looks at it' s already written neighbors ( the blogs referenced to current one) and chooses the topic with the smallest number which is not covered by neighbors. It' s easy to see that this strategy will always allow him to choose a topic because there are at most n - 1 neighbors. For example, if already written neighbors of the current blog have topics number 1 , 3 , 1 , 5 , and 2 , Johnny will choose the topic number 4 for the current blog, because topics number 1 , 2 and 3 are already covered by neighbors and topic number 4 isn' t covered. As a good friend, you have done some research and predicted the best topic for each blog. Can you tell Johnny, in which order he has to write the blogs, so that his strategy produces the topic assignment chosen by you?",
    "input": "The first line contains two integers n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5) and m ( 0 \u2264 m \u2264 5 \u00b7 10^ 5) \u2014 the number of blogs and references, respectively. Each of the following m lines contains two integers a and b ( a = \u0338 b ; 1 \u2264 a, b \u2264 n ) , which mean that there is a reference between blogs a and b . It' s guaranteed that the graph doesn' t contain multiple edges. The last line contains n integers t_ 1, t_ 2, . . . , t_ n , i - th of them denotes desired topic number of the i - th blog ( 1 \u2264 t_ i \u2264 n ) .",
    "output": "If the solution does not exist, then write - 1 . Otherwise, output n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n) , which describe the numbers of blogs in order which Johnny should write them. If there are multiple answers, print any.",
    "note": "In the first example, Johnny starts with writing blog number 2 , there are no already written neighbors yet, so it receives the first topic. Later he writes blog number 1 , it has reference to the already written second blog, so it receives the second topic. In the end, he writes blog number 3 , it has references to blogs number 1 and 2 so it receives the third topic. Second example: There does not exist any permutation fulfilling given conditions. Third example: First Johnny writes blog 2 , it receives the topic 1 . Then he writes blog 5 , it receives the topic 1 too because it doesn' t have reference to single already written blog 2 . Then he writes blog number 1 , it has reference to blog number 2 with topic 1 , so it receives the topic 2 . Then he writes blog number 3 which has reference to blog 2 , so it receives the topic 2 . Then he ends with writing blog number 4 which has reference to blog 5 and receives the topic 2 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1361A"
  },
  {
    "title": "A/B Matrix",
    "url": "https://codeforces.com/problemset/problem/1360/G",
    "history": "You are given four positive integers n , m , a , b ( 1 \u2264 b \u2264 n \u2264 50 ; 1 \u2264 a \u2264 m \u2264 50 ) . Find any such rectangular matrix of size n \u00d7 m that satisfies all of the following conditions: each row of the matrix contains exactly a ones; each column of the matrix contains exactly b ones; all other elements are zeros. If the desired matrix does not exist, indicate this. For example, for n= 3 , m= 6 , a= 2 , b= 1 , there exists a matrix satisfying the conditions above: 0 1 0 0 0 1 1 0 0 1 0 0 0 0 1 0 1 0",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. Each test case is described by four positive integers n , m , a , b ( 1 \u2264 b \u2264 n \u2264 50 ; 1 \u2264 a \u2264 m \u2264 50 ) , where n and m are the sizes of the matrix, and a and b are the number of ones for rows and columns, respectively.",
    "output": "For each test case print: \" YES\" ( without quotes) and the required matrix ( if there are several answers, print any) if it exists, or \" NO\" ( without quotes) if it does not exist. To print the matrix n \u00d7 m , print n rows, each of which consists of m numbers 0 or 1 describing a row of the matrix. Numbers must be printed without spaces.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1360G"
  },
  {
    "title": "Similar Pairs",
    "url": "https://codeforces.com/problemset/problem/1360/C",
    "history": "We call two numbers x and y similar if they have the same parity ( the same remainder when divided by 2 ) , or if | x- y| = 1 . For example, in each of the pairs ( 2, 6) , ( 4, 3) , ( 11, 7) , the numbers are similar to each other, and in the pairs ( 1, 4) , ( 3, 12) , they are not. You are given an array a of n ( n is even) positive integers. Check if there is such a partition of the array into pairs that each element of the array belongs to exactly one pair and the numbers in each pair are similar to each other. For example, for the array a = [ 11, 14, 16, 12] , there is a partition into pairs ( 11, 12) and ( 14, 16) . The numbers in the first pair are similar because they differ by one, and in the second pair because they are both even.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then t test cases follow. Each test case consists of two lines. The first line contains an even positive integer n ( 2 \u2264 n \u2264 50 ) \u2014 length of array a . The second line contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) .",
    "output": "For each test case print: YES if the such a partition exists, NO otherwise. The letters in the words YES and NO can be displayed in any case.",
    "note": "The first test case was explained in the statement. In the second test case, the two given numbers are not similar. In the third test case, any partition is suitable.",
    "topics": [
      "constructive algorithms",
      "graph matchings",
      "greedy",
      "sortings"
    ],
    "id": "1360C"
  },
  {
    "title": "Honest Coach",
    "url": "https://codeforces.com/problemset/problem/1360/B",
    "history": "There are n athletes in front of you. Athletes are numbered from 1 to n from left to right. You know the strength of each athlete \u2014 the athlete number i has the strength s_ i . You want to split all athletes into two teams. Each team must have at least one athlete, and each athlete must be exactly in one team. You want the strongest athlete from the first team to differ as little as possible from the weakest athlete from the second team. Formally, you want to split the athletes into two teams A and B so that the value | max( A) - min( B) | is as small as possible, where max( A) is the maximum strength of an athlete from team A , and min( B) is the minimum strength of an athlete from team B . For example, if n= 5 and the strength of the athletes is s= [ 3, 1, 2, 6, 4] , then one of the possible split into teams is: first team: A = [ 1, 2, 4] , second team: B = [ 3, 6] . In this case, the value | max( A) - min( B) | will be equal to | 4- 3| = 1 . This example illustrates one of the ways of optimal split into two teams. Print the minimum value | max( A) - min( B) | .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases in the input. Then t test cases follow. Each test case consists of two lines. The first line contains positive integer n ( 2 \u2264 n \u2264 50 ) \u2014 number of athletes. The second line contains n positive integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 1000 ) , where s_ i \u2014 is the strength of the i - th athlete. Please note that s values may not be distinct.",
    "output": "For each test case print one integer \u2014 the minimum value of | max( A) - min( B) | with the optimal split of all athletes into two teams. Each of the athletes must be a member of exactly one of the two teams.",
    "note": "The first test case was explained in the statement. In the second test case, one of the optimal splits is A= [ 2, 1] , B= [ 3, 2, 4, 3] , so the answer is | 2- 2| = 0 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1360B"
  },
  {
    "title": "Minimal Square",
    "url": "https://codeforces.com/problemset/problem/1360/A",
    "history": "Find the minimum area of a square land on which you can place two identical rectangular a \u00d7 b houses. The sides of the houses should be parallel to the sides of the desired square land. Formally, You are given two identical rectangles with side lengths a and b ( 1 \u2264 a, b \u2264 100 ) \u2014 positive integers ( you are given just the sizes, but not their positions) . Find the square of the minimum area that contains both given rectangles. Rectangles can be rotated ( both or just one) , moved, but the sides of the rectangles should be parallel to the sides of the desired square. Two rectangles can touch each other ( side or corner) , but cannot intersect. Rectangles can also touch the sides of the square but must be completely inside it. You can rotate the rectangles. Take a look at the examples for a better understanding. The picture shows a square that contains red and green rectangles.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10 000 ) \u2014the number of test cases in the input. Then t test cases follow. Each test case is a line containing two integers a , b ( 1 \u2264 a, b \u2264 100 ) \u2014 side lengths of the rectangles.",
    "output": "Print t answers to the test cases. Each answer must be a single integer \u2014 minimal area of square land, that contains two rectangles with dimensions a \u00d7 b .",
    "note": "Below are the answers for the first two test cases:",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1360A"
  },
  {
    "title": "New Theatre Square",
    "url": "https://codeforces.com/problemset/problem/1359/B",
    "history": "You might have remembered Theatre square from the problem 1A. Now it' s finally getting repaved. The square still has a rectangular shape of n \u00d7 m meters. However, the picture is about to get more complicated now. Let a_ i, j be the j - th square in the i - th row of the pavement. You are given the picture of the squares: if a_ i, j = \" * \" , then the j - th square in the i - th row should be black; if a_ i, j = \" . \" , then the j - th square in the i - th row should be white. The black squares are paved already. You have to pave the white squares. There are two options for pavement tiles: 1 \u00d7 1 tiles \u2014 each tile costs x burles and covers exactly 1 square; 1 \u00d7 2 tiles \u2014 each tile costs y burles and covers exactly 2 adjacent squares of the same row. Note that you are not allowed to rotate these tiles or cut them into 1 \u00d7 1 tiles. You should cover all the white squares, no two tiles should overlap and no black squares should be covered by tiles. What is the smallest total price of the tiles needed to cover all the white squares?",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of testcases. Then the description of t testcases follow. The first line of each testcase contains four integers n , m , x and y ( 1 \u2264 n \u2264 100 ; 1 \u2264 m \u2264 1000 ; 1 \u2264 x, y \u2264 1000 ) \u2014 the size of the Theatre square, the price of the 1 \u00d7 1 tile and the price of the 1 \u00d7 2 tile. Each of the next n lines contains m characters. The j - th character in the i - th line is a_ i, j . If a_ i, j = \" * \" , then the j - th square in the i - th row should be black, and if a_ i, j = \" . \" , then the j - th square in the i - th row should be white. It' s guaranteed that the sum of n \u00d7 m over all testcases doesn' t exceed 10^ 5 .",
    "output": "For each testcase print a single integer \u2014 the smallest total price of the tiles needed to cover all the white squares in burles.",
    "note": "In the first testcase you are required to use a single 1 \u00d7 1 tile, even though 1 \u00d7 2 tile is cheaper. So the total price is 10 burles. In the second testcase you can either use two 1 \u00d7 1 tiles and spend 20 burles or use a single 1 \u00d7 2 tile and spend 1 burle. The second option is cheaper, thus the answer is 1 . The third testcase shows that you can' t rotate 1 \u00d7 2 tiles. You still have to use two 1 \u00d7 1 tiles for the total price of 20 . In the fourth testcase the cheapest way is to use 1 \u00d7 1 tiles everywhere. The total cost is 6 \u00b7 3 = 18 .",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1359B"
  },
  {
    "title": "Berland Poker",
    "url": "https://codeforces.com/problemset/problem/1359/A",
    "history": "The game of Berland poker is played with a deck of n cards, m of which are jokers. k players play this game ( n is divisible by k ) . At the beginning of the game, each player takes n/ k cards from the deck ( so each card is taken by exactly one player) . The player who has the maximum number of jokers is the winner, and he gets the number of points equal to x - y , where x is the number of jokers in the winner' s hand, and y is the maximum number of jokers among all other players. If there are two or more players with maximum number of jokers, all of them are winners and they get 0 points. Here are some examples: n = 8 , m = 3 , k = 2 . If one player gets 3 jokers and 1 plain card, and another player gets 0 jokers and 4 plain cards, then the first player is the winner and gets 3 - 0 = 3 points; n = 4 , m = 2 , k = 4 . Two players get plain cards, and the other two players get jokers, so both of them are winners and get 0 points; n = 9 , m = 6 , k = 3 . If the first player gets 3 jokers, the second player gets 1 joker and 2 plain cards, and the third player gets 2 jokers and 1 plain card, then the first player is the winner, and he gets 3 - 2 = 1 point; n = 42 , m = 0 , k = 7 . Since there are no jokers, everyone gets 0 jokers, everyone is a winner, and everyone gets 0 points. Given n , m and k , calculate the maximum number of points a player can get for winning the game.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases. Then the test cases follow. Each test case contains three integers n , m and k ( 2 \u2264 n \u2264 50 , 0 \u2264 m \u2264 n , 2 \u2264 k \u2264 n , k is a divisors of n ) .",
    "output": "For each test case, print one integer \u2014 the maximum number of points a player can get for winning the game.",
    "note": "Test cases of the example are described in the statement.",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1359A"
  },
  {
    "title": "Tasty Cookie",
    "url": "https://codeforces.com/problemset/problem/1358/F",
    "history": "Oh, no! The coronavirus has caught you, and now you' re sitting in a dark cellar, with tied legs ( but not hands) . You have a delicious cookie, a laptop in front of you, and your ideal development environment is open. The coronavirus convinces you to solve the following problem. You are given two arrays A and B of size n . You can do operations of two types with array A : Reverse array A . That is the array [ A_ 1, A_ 2, . . . , A_ n] transformes into [ A_ n, A_ n- 1, . . . , A_ 1] . Replace A with an array of its prefix sums. That is, the array [ A_ 1, A_ 2, . . . , A_ n] goes to [ A_ 1, ( A_ 1+ A_ 2) , . . . , ( A_ 1+ A_ 2+ . . . + A_ n) ] . You need to understand if you can get an array B from the array A . If it is possible, you will have to restore the order of these operations by minimizing the number of operations of the second type. Fortunately, the coronavirus is good today, so he has allowed you not to restore actions if the minimum number of second type operations is more than 2\u00b7 10^ 5 . But coronavirus resents you, so if you restore the answer, the total number of operations should not exceed 5\u00b7 10^ 5 . Solve this problem and get the cookie, or the coronavirus will extend the quarantine for five years and make the whole economy collapse!",
    "input": "The first line contains a single integer n ( 1\u2264 n \u2264 2\u00b7 10^ 5 ) . The second line contains n integers A_ 1, A_ 2, . . . , A_ n ( 1 \u2264 A_ i \u2264 10 ^ 12 ) . The third line contains n integers B_ 1, B_ 2, . . . , B_ n ( 1 \u2264 B_ i \u2264 10 ^ 12 ) .",
    "output": "If you cannot get B from the A array, print \" IMPOSSIBLE\" ( without quotes) on a single line. If the minimum number of operations of the second type exceeds 2\u00b7 10^ 5 , print \" BIG\" ( without quotes) . In the second line print the number of operations of the second type, that needs to be applied to get array B from A . Otherwise, in the first line print \" SMALL\" ( without quotes) . In the second line print the total number of operations of the first and second types m \u2264 5\u00b7 10^ 5 ( it is guaranteed that in this case there is such a sequence of actions) . In the third line print a line of length m , consisting of characters ' R\" and ' P' ( without quotes) . The i - th character should be ' R' , if the i - th action is of the first type, and should be ' P' , otherwise. If there are several such sequences, you can print any of them. You can print each character in the uppercase or in the lowercase.",
    "note": "In the first example, the arrays A and B already equal, so the number of required operations = 0 . In the second example, we need to replace A with the prefix sums 299999 times and then reverse the array. Since 299999> 2\u00b7 10^ 5 , there is no need to restore the answer. In the fourth example, you cannot get B from the A .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1358F"
  },
  {
    "title": "Are You Fired?",
    "url": "https://codeforces.com/problemset/problem/1358/E",
    "history": "Levian works as an accountant in a large company. Levian knows how much the company has earned in each of the n consecutive months \u2014 in the i - th month the company had income equal to a_ i ( positive income means profit, negative income means loss, zero income means no change) . Because of the general self- isolation, the first \u2308n2\u2309 months income might have been completely unstable, but then everything stabilized and for the last \u230an2\u230b months the income was the same. Levian decided to tell the directors n- k+ 1 numbers \u2014 the total income of the company for each k consecutive months. In other words, for each i between 1 and n- k+ 1 he will say the value a_ i + a_ i+ 1 + . . . + a_ i + k - 1 . For example, if a= [ - 1, 0, 1, 2, 2] and k= 3 he will say the numbers 0, 3, 5 . Unfortunately, if at least one total income reported by Levian is not a profit ( income \u2264 0 ) , the directors will get angry and fire the failed accountant. Save Levian' s career: find any such k , that for each k months in a row the company had made a profit, or report that it is impossible.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5\u00b7 10^ 5 ) \u2014 the number of months for which Levian must account. The second line contains \u2308n/ 2\u2309 integers a_ 1, a_ 2, . . . , a_ \u2308n/ 2\u2309 , where a_ i ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the income of the company in the i - th month. Third line contains a single integer x ( - 10^ 9 \u2264 x \u2264 10^ 9 ) \u2014 income in every month from \u2308n/ 2\u2309 + 1 to n .",
    "output": "In a single line, print the appropriate integer k or - 1 , if it does not exist. If there are multiple possible answers, you can print any.",
    "note": "In the first example, k= 2 and k= 3 satisfy: in the first case, Levian will report the numbers 1, 1 , and in the second case \u2014 one number 3 . In the second example, there is no such k . In the third example, the only answer is k= 4 : he will report the numbers 1, 2, 3 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1358E"
  },
  {
    "title": "The Best Vacation",
    "url": "https://codeforces.com/problemset/problem/1358/D",
    "history": "You' ve been in love with Coronavirus- chan for a long time, but you didn' t know where she lived until now. And just now you found out that she lives in a faraway place called Naha. You immediately decided to take a vacation and visit Coronavirus- chan. Your vacation lasts exactly x days and that' s the exact number of days you will spend visiting your friend. You will spend exactly x consecutive ( successive) days visiting Coronavirus- chan. They use a very unusual calendar in Naha: there are n months in a year, i - th month lasts exactly d_ i days. Days in the i - th month are numbered from 1 to d_ i . There are no leap years in Naha. The mood of Coronavirus- chan ( and, accordingly, her desire to hug you) depends on the number of the day in a month. In particular, you get j hugs if you visit Coronavirus- chan on the j - th day of the month. You know about this feature of your friend and want to plan your trip to get as many hugs as possible ( and then maybe you can win the heart of Coronavirus- chan) . Please note that your trip should not necessarily begin and end in the same year.",
    "input": "The first line of input contains two integers n and x ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of months in the year and the number of days you can spend with your friend. The second line contains n integers d_ 1, d_ 2, . . . , d_ n , d_ i is the number of days in the i - th month ( 1 \u2264 d_ i \u2264 10^ 6 ) . It is guaranteed that 1 \u2264 x \u2264 d_ 1 + d_ 2 + . . . + d_ n .",
    "output": "Print one integer \u2014 the maximum number of hugs that you can get from Coronavirus- chan during the best vacation in your life.",
    "note": "In the first test case, the numbers of the days in a year are ( indices of days in a corresponding month) { 1, 1, 2, 3, 1} . Coronavirus- chan will hug you the most if you come on the third day of the year: 2+ 3= 5 hugs. In the second test case, the numbers of the days are { 1, 2, 3, 1, 2, 3, 1, 2, 3} . You will get the most hugs if you arrive on the third day of the year: 3+ 1+ 2+ 3+ 1+ 2= 12 hugs. In the third test case, the numbers of the days are { 1, 2, 3, 4, 1, 2, 1, 2, 3, 1, 1, 2, 3} . You will get the most hugs if you come on the twelfth day of the year: your friend will hug you 2+ 3+ 1+ 2+ 3+ 4= 15 times.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1358D"
  },
  {
    "title": "Maria Breaks the Self-isolation",
    "url": "https://codeforces.com/problemset/problem/1358/B",
    "history": "Maria is the most active old lady in her house. She was tired of sitting at home. She decided to organize a ceremony against the coronavirus. She has n friends who are also grannies ( Maria is not included in this number) . The i - th granny is ready to attend the ceremony, provided that at the time of her appearance in the courtyard there will be at least a_ i other grannies there. Note that grannies can come into the courtyard at the same time. Formally, the granny i agrees to come if the number of other grannies who came earlier or at the same time with her is greater than or equal to a_ i . Grannies gather in the courtyard like that. Initially, only Maria is in the courtyard ( that is, the initial number of grannies in the courtyard is 1 ) . All the remaining n grannies are still sitting at home. On each step Maria selects a subset of grannies, none of whom have yet to enter the courtyard. She promises each of them that at the time of her appearance there will be at least a_ i other grannies ( including Maria) in the courtyard. Maria can call several grannies at once. In this case, the selected grannies will go out into the courtyard at the same moment of time. She cannot deceive grannies, that is, the situation when the i - th granny in the moment of appearing in the courtyard, finds that now there are strictly less than a_ i other grannies ( except herself, but including Maria) , is prohibited. Please note that if several grannies appeared in the yard at the same time, then each of them sees others at the time of appearance. Your task is to find what maximum number of grannies ( including herself) Maria can collect in the courtyard for the ceremony. After all, the more people in one place during quarantine, the more effective the ceremony! Consider an example: if n= 6 and a= [ 1, 5, 4, 5, 1, 9] , then: at the first step Maria can call grannies with numbers 1 and 5 , each of them will see two grannies at the moment of going out into the yard ( note that a_ 1= 1 \u2264 2 and a_ 5= 1 \u2264 2 ) ; at the second step, Maria can call grannies with numbers 2 , 3 and 4 , each of them will see five grannies at the moment of going out into the yard ( note that a_ 2= 5 \u2264 5 , a_ 3= 4 \u2264 5 and a_ 4= 5 \u2264 5 ) ; the 6 - th granny cannot be called into the yard \u2014 therefore, the answer is 6 ( Maria herself and another 5 grannies) .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then test cases follow. The first line of a test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of grannies ( Maria is not included in this number) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2\u00b710^ 5 ) . It is guaranteed that the sum of the values n over all test cases of the input does not exceed 10^ 5 .",
    "output": "For each test case, print a single integer k ( 1 \u2264 k \u2264 n + 1 ) \u2014 the maximum possible number of grannies in the courtyard.",
    "note": "In the first test case in the example, on the first step Maria can call all the grannies. Then each of them will see five grannies when they come out. Therefore, Maria and five other grannies will be in the yard. In the second test case in the example, no one can be in the yard, so Maria will remain there alone. The third test case in the example is described in the details above. In the fourth test case in the example, on the first step Maria can call grannies with numbers 1 , 2 and 3 . If on the second step Maria calls 4 or 5 ( one of them) , then when a granny appears in the yard, she will see only four grannies ( but it is forbidden) . It means that Maria can' t call the 4 - th granny or the 5 - th granny separately ( one of them) . If she calls both: 4 and 5 , then when they appear, they will see 4+ 1= 5 grannies. Despite the fact that it is enough for the 4 - th granny, the 5 - th granny is not satisfied. So, Maria cannot call both the 4 - th granny and the 5 - th granny at the same time. That is, Maria and three grannies from the first step will be in the yard in total.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1358B"
  },
  {
    "title": "Park Lighting",
    "url": "https://codeforces.com/problemset/problem/1358/A",
    "history": "Due to the coronavirus pandemic, city authorities obligated citizens to keep a social distance. The mayor of the city Semyon wants to light up Gluharniki park so that people could see each other even at night to keep the social distance. The park is a rectangular table with n rows and m columns, where the cells of the table are squares, and the boundaries between the cells are streets. External borders are also streets. Every street has length 1 . For example, park with n= m= 2 has 12 streets. You were assigned to develop a plan for lighting the park. You can put lanterns in the middle of the streets. The lamp lights two squares near it ( or only one square if it stands on the border of the park) . The park sizes are: n= 4 , m= 5 . The lighted squares are marked yellow. Please note that all streets have length 1 . Lanterns are placed in the middle of the streets. In the picture not all the squares are lit. Semyon wants to spend the least possible amount of money on lighting but also wants people throughout the park to keep a social distance. So he asks you to find the minimum number of lanterns that are required to light all the squares.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then t test cases follow. Each test case is a line containing two integers n , m ( 1 \u2264 n, m \u2264 10^ 4 ) \u2014 park sizes.",
    "output": "Print t answers to the test cases. Each answer must be a single integer \u2014 the minimum number of lanterns that are required to light all the squares.",
    "note": "Possible optimal arrangement of the lanterns for the 2 - nd test case of input data example: Possible optimal arrangement of the lanterns for the 3 - rd test case of input data example:",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1358A"
  },
  {
    "title": "Restorer Distance",
    "url": "https://codeforces.com/problemset/problem/1355/E",
    "history": "You have to restore the wall. The wall consists of N pillars of bricks, the height of the i - th pillar is initially equal to h_ i , the height is measured in number of bricks. After the restoration all the N pillars should have equal heights. You are allowed the following operations: put a brick on top of one pillar, the cost of this operation is A ; remove a brick from the top of one non- empty pillar, the cost of this operation is R ; move a brick from the top of one non- empty pillar to the top of another pillar, the cost of this operation is M . You cannot create additional pillars or ignore some of pre- existing pillars even if their height becomes 0 . What is the minimal total cost of restoration, in other words, what is the minimal total cost to make all the pillars of equal height?",
    "input": "The first line of input contains four integers N , A , R , M ( 1 \u2264 N \u2264 10^ 5 , 0 \u2264 A, R, M \u2264 10^ 4 ) \u2014 the number of pillars and the costs of operations. The second line contains N integers h_ i ( 0 \u2264 h_ i\u2264 10^ 9 ) \u2014 initial heights of pillars.",
    "output": "Print one integer \u2014 the minimal cost of restoration.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings",
      "ternary search"
    ],
    "id": "1355E"
  },
  {
    "title": "Young Explorers",
    "url": "https://codeforces.com/problemset/problem/1355/B",
    "history": "Young wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties. . . Most of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter e_ i \u2014 his inexperience. Russell decided that an explorer with inexperience e can only join the group of e or more people. Now Russell needs to figure out how many groups he can organize. It' s not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him.",
    "input": "The first line contains the number of independent test cases T ( 1 \u2264 T \u2264 2 \u00b7 10^ 5 ) . Next 2T lines contain description of test cases. The first line of description of each test case contains the number of young explorers N ( 1 \u2264 N \u2264 2 \u00b7 10^ 5 ) . The second line contains N integers e_ 1, e_ 2, . . . , e_ N ( 1 \u2264 e_ i \u2264 N ) , where e_ i is the inexperience of the i - th explorer. It' s guaranteed that sum of all N doesn' t exceed 3 \u00b7 10^ 5 .",
    "output": "Print T numbers, each number on a separate line. In i - th line print the maximum number of groups Russell can form in i - th test case.",
    "note": "In the first example we can organize three groups. There will be only one explorer in each group. It' s correct because inexperience of each explorer equals to 1 , so it' s not less than the size of his group. In the second example we can organize two groups. Explorers with inexperience 1 , 2 and 3 will form the first group, and the other two explorers with inexperience equal to 2 will form the second group. This solution is not unique. For example, we can form the first group using the three explorers with inexperience equal to 2 , and the second group using only one explorer with inexperience equal to 1 . In this case the young explorer with inexperience equal to 3 will not be included in any group.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1355B"
  },
  {
    "title": "Summoning Minions",
    "url": "https://codeforces.com/problemset/problem/1354/F",
    "history": "Polycarp plays a computer game. In this game, the players summon armies of magical minions, which then fight each other. Polycarp can summon n different minions. The initial power level of the i - th minion is a_ i , and when it is summoned, all previously summoned minions' power levels are increased by b_ i . The minions can be summoned in any order. Unfortunately, Polycarp cannot have more than k minions under his control. To get rid of unwanted minions after summoning them, he may destroy them. Each minion can be summoned ( and destroyed) only once. Polycarp' s goal is to summon the strongest possible army. Formally, he wants to maximize the sum of power levels of all minions under his control ( those which are summoned and not destroyed) . Help Polycarp to make up a plan of actions to summon the strongest possible army!",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 75 ) \u2014 the number of test cases. Each test case begins with a line containing two integers n and k ( 1 \u2264 k \u2264 n \u2264 75 ) \u2014 the number of minions availible for summoning, and the maximum number of minions that can be controlled by Polycarp, respectively. Then n lines follow, the i - th line contains 2 integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 10^ 5 , 0 \u2264 b_ i \u2264 10^ 5 ) \u2014 the parameters of the i - th minion.",
    "output": "For each test case print the optimal sequence of actions as follows: Firstly, print m \u2014 the number of actions which Polycarp has to perform ( 0 \u2264 m \u2264 2n ) . Then print m integers o_ 1 , o_ 2 , . . . , o_ m , where o_ i denotes the i - th action as follows: if the i - th action is to summon the minion x , then o_ i = x , and if the i - th action is to destroy the minion x , then o_ i = - x . Each minion can be summoned at most once and cannot be destroyed before being summoned ( and, obviously, cannot be destroyed more than once) . The number of minions in Polycarp' s army should be not greater than k after every action. If there are multiple optimal sequences, print any of them.",
    "note": "Consider the example test. In the first test case, Polycarp can summon the minion 2 with power level 7 , then summon the minion 1 , which will increase the power level of the previous minion by 3 , then destroy the minion 1 , and finally, summon the minion 5 . After this, Polycarp will have two minions with power levels of 10 . In the second test case, Polycarp can control only one minion, so he should choose the strongest of them and summon it. In the third test case, Polycarp is able to summon and control all five minions.",
    "topics": [
      "constructive algorithms",
      "dp",
      "flows",
      "graph matchings",
      "greedy",
      "sortings"
    ],
    "id": "1354F"
  },
  {
    "title": "K-periodic Garland",
    "url": "https://codeforces.com/problemset/problem/1353/E",
    "history": "You are given a garland consisting of n lamps. States of the lamps are represented by the string s of length n . The i - th character of the string s_ i equals ' 0' if the i - th lamp is turned off or ' 1' if the i - th lamp is turned on. You are also given a positive integer k . In one move, you can choose one lamp and change its state ( i. e. turn it on if it is turned off and vice versa) . The garland is called k - periodic if the distance between each pair of adjacent turned on lamps is exactly k . Consider the case k= 3 . Then garlands \" 00010010\" , \" 1001001\" , \" 00010\" and \" 0\" are good but garlands \" 00101001\" , \" 1000001\" and \" 01001100\" are not. Note that the garland is not cyclic, i. e. the first turned on lamp is not going after the last turned on lamp and vice versa. Your task is to find the minimum number of moves you need to make to obtain k - periodic garland from the given one. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 25 000 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 6; 1 \u2264 k \u2264 n ) \u2014 the length of s and the required period. The second line of the test case contains the string s consisting of n characters ' 0' and ' 1' . It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 ( \u2211 n \u2264 10^ 6 ) .",
    "output": "For each test case, print the answer \u2014 the minimum number of moves you need to make to obtain k - periodic garland from the given one.",
    "note": "",
    "topics": [
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1353E"
  },
  {
    "title": "Two Arrays And Swaps",
    "url": "https://codeforces.com/problemset/problem/1353/B",
    "history": "You are given two arrays a and b both consisting of n positive ( greater than zero) integers. You are also given an integer k . In one move, you can choose two indices i and j ( 1 \u2264 i, j \u2264 n ) and swap a_ i and b_ j ( i. e. a_ i becomes b_ j and vice versa) . Note that i and j can be equal or different ( in particular, swap a_ 2 with b_ 2 or swap a_ 3 and b_ 9 both are acceptable moves) . Your task is to find the maximum possible sum you can obtain in the array a if you can do no more than ( i. e. at most) k such moves ( swaps) . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 200 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 1 \u2264 n \u2264 30; 0 \u2264 k \u2264 n ) \u2014 the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 30 ) , where a_ i is the i - th element of a . The third line of the test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 30 ) , where b_ i is the i - th element of b .",
    "output": "For each test case, print the answer \u2014 the maximum possible sum you can obtain in the array a if you can do no more than ( i. e. at most) k swaps.",
    "note": "In the first test case of the example, you can swap a_ 1 = 1 and b_ 2 = 4 , so a= [ 4, 2] and b= [ 3, 1] . In the second test case of the example, you don' t need to swap anything. In the third test case of the example, you can swap a_ 1 = 1 and b_ 1 = 10 , a_ 3 = 3 and b_ 3 = 10 and a_ 2 = 2 and b_ 4 = 10 , so a= [ 10, 10, 10, 4, 5] and b= [ 1, 9, 3, 2, 9] . In the fourth test case of the example, you cannot swap anything. In the fifth test case of the example, you can swap arrays a and b , so a= [ 4, 4, 5, 4] and b= [ 1, 2, 2, 1] .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1353B"
  },
  {
    "title": "Most Unstable Array",
    "url": "https://codeforces.com/problemset/problem/1353/A",
    "history": "You are given two integers n and m . You have to construct the array a of length n consisting of non- negative integers ( i. e. integers greater than or equal to zero) such that the sum of elements of this array is exactly m and the value \u2211_ i= 1^ n- 1 | a_ i - a_ i+ 1| is the maximum possible. Recall that | x| is the absolute value of x . In other words, you have to maximize the sum of absolute differences between adjacent ( consecutive) elements. For example, if the array a= [ 1, 3, 2, 5, 5, 0] then the value above for this array is | 1- 3| + | 3- 2| + | 2- 5| + | 5- 5| + | 5- 0| = 2 + 1 + 3 + 0 + 5 = 11 . Note that this example doesn' t show the optimal answer but it shows how the required value for some array is calculated. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The only line of the test case contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 9 ) \u2014 the length of the array and its sum correspondingly.",
    "output": "For each test case, print the answer \u2014 the maximum possible value of \u2211_ i= 1^ n- 1 | a_ i - a_ i+ 1| for the array a consisting of n non- negative integers with the sum m .",
    "note": "In the first test case of the example, the only possible array is [ 100] and the answer is obviously 0 . In the second test case of the example, one of the possible arrays is [ 2, 0] and the answer is | 2- 0| = 2 . In the third test case of the example, one of the possible arrays is [ 0, 2, 0, 3, 0] and the answer is | 0- 2| + | 2- 0| + | 0- 3| + | 3- 0| = 10 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1353A"
  },
  {
    "title": "Slime and Hats",
    "url": "https://codeforces.com/problemset/problem/1349/E",
    "history": "Slime and Orac are holding a turn- based game. In a big room, there are n players sitting on the chairs, looking forward to a column and each of them is given a number: player 1 sits in the front of the column, player 2 sits directly behind him; player 3 sits directly behind player 2 , and so on; player n sits directly behind player n- 1 . Each player wears a hat that is either black or white. As each player faces forward, player i knows the color of player j ' s hat if and only if i is larger than j . At the start of each turn, Orac will tell whether there exists a player wearing a black hat in the room. After Orac speaks, if the player can uniquely identify the color of his hat, he will put his hat on the chair, stand up and leave the room. All players are smart, so if it is possible to understand the color of their hat using the obtained information during this and previous rounds, they will understand it. In each turn, all players who know the color of their hats will leave at the same time in this turn, which means a player can only leave in the next turn if he gets to know the color of his hat only after someone left the room at this turn. Note that when the player needs to leave, he will put the hat on the chair before leaving, so the players ahead of him still cannot see his hat. The i - th player will know who exactly left the room among players 1, 2, . . . , i- 1 , and how many players among i+ 1, i+ 2, . . . , n have left the room. Slime stands outdoor. He watches the players walking out and records the numbers of the players and the time they get out. Unfortunately, Slime is so careless that he has only recorded some of the data, and this given data is in the format \" player x leaves in the y - th round\" . Slime asked you to tell him the color of each player' s hat. If there are multiple solutions, you can find any of them.",
    "input": "The first line contains a integer n ( 1\u2264 n\u2264 200 000) . The second line contains n integers t_ 1, t_ 2, . . . , t_ n ( 0\u2264 t_ i\u2264 10^ 15) . If t_ i= 0 , then there are no data about player i ; otherwise it means player i leaves in the t_ i - th round. At least one solution exists for the given input.",
    "output": "Print one binary string of n characters. The i - th character of the string should be ' 1' if player i wears a black hat and should be ' 0' , otherwise. If there are multiple solutions, you can print any of them.",
    "note": "In the first example, for the given solution, all the players wear white hats. In the first turn, Orac tells all the players that there are no players wearing a black hat, so each player knows that he is wearing a white hat, and he will leave in the first turn. In the second example, for the given solution, the player 5 wears a black hat, other players wear white hats. Orac tells all the players that there exists a player wearing a black hat, and player 5 know that the other players are all wearing white hats, so he can infer that he is wearing a black hat; therefore he leaves in the first turn, other players leave in the second turn. Note that other players can infer that they are wearing white hats immediately after player 5 leaves, but they have to wait for the next turn to leave according to the rule. In the third example, there is no information about the game, so any output is correct.",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1349E"
  },
  {
    "title": "Orac and Medians",
    "url": "https://codeforces.com/problemset/problem/1349/B",
    "history": "Slime has a sequence of positive integers a_ 1, a_ 2, . . . , a_ n . In one operation Orac can choose an arbitrary subsegment [ l . . . r] of this sequence and replace all values a_ l, a_ l + 1, . . . , a_ r to the value of median of { a_ l, a_ l + 1, . . . , a_ r} . In this problem, for the integer multiset s , the median of s is equal to the \u230a| s| + 1/ 2\u230b - th smallest number in it. For example, the median of { 1, 4, 4, 6, 5} is 4 , and the median of { 1, 7, 5, 8} is 5 . Slime wants Orac to make a_ 1 = a_ 2 = . . . = a_ n = k using these operations. Orac thinks that it is impossible, and he does not want to waste his time, so he decided to ask you if it is possible to satisfy the Slime' s requirement, he may ask you these questions several times.",
    "input": "The first line of the input is a single integer t : the number of queries. The first line of each query contains two integers n ( 1\u2264 n\u2264 100 000) and k ( 1\u2264 k\u2264 10^ 9) , the second line contains n positive integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i\u2264 10^ 9) The total sum of n is at most 100 000 .",
    "output": "The output should contain t lines. The i - th line should be equal to ' yes' if it is possible to make all integers k in some number of operations or ' no' , otherwise. You can print each letter in lowercase or uppercase.",
    "note": "In the first query, Orac can' t turn all elements into 3 . In the second query, a_ 1= 6 is already satisfied. In the third query, Orac can select the complete array and turn all elements into 2 . In the fourth query, Orac can' t turn all elements into 3 . In the fifth query, Orac can select [ 1, 6] at first and then select [ 2, 10] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1349B"
  },
  {
    "title": "Phoenix and Memory",
    "url": "https://codeforces.com/problemset/problem/1348/F",
    "history": "Phoenix is trying to take a photo of his n friends with labels 1, 2, . . . , n who are lined up in a row in a special order. But before he can take the photo, his friends get distracted by a duck and mess up their order. Now, Phoenix must restore the order but he doesn' t remember completely! He only remembers that the i - th friend from the left had a label between a_ i and b_ i inclusive. Does there exist a unique way to order his friends based of his memory?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of friends. The i - th of the next n lines contain two integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 b_ i \u2264 n ) \u2014 Phoenix' s memory of the i - th position from the left. It is guaranteed that Phoenix' s memory is valid so there is at least one valid ordering.",
    "output": "If Phoenix can reorder his friends in a unique order, print YES followed by n integers \u2014 the i - th integer should be the label of the i - th friend from the left. Otherwise, print NO. Then, print any two distinct valid orderings on the following two lines. If are multiple solutions, print any.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1348F"
  },
  {
    "title": "Phoenix and Berries",
    "url": "https://codeforces.com/problemset/problem/1348/E",
    "history": "Phoenix is picking berries in his backyard. There are n shrubs, and each shrub has a_ i red berries and b_ i blue berries. Each basket can contain k berries. But, Phoenix has decided that each basket may only contain berries from the same shrub or berries of the same color ( red or blue) . In other words, all berries in a basket must be from the same shrub or/ and have the same color. For example, if there are two shrubs with 5 red and 2 blue berries in the first shrub and 2 red and 1 blue berries in the second shrub then Phoenix can fill 2 baskets of capacity 4 completely: the first basket will contain 3 red and 1 blue berries from the first shrub; the second basket will contain the 2 remaining red berries from the first shrub and 2 red berries from the second shrub. Help Phoenix determine the maximum number of baskets he can fill completely!",
    "input": "The first line contains two integers n and k ( 1\u2264 n, k \u2264 500 ) \u2014 the number of shrubs and the basket capacity, respectively. The i - th of the next n lines contain two integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 9 ) \u2014 the number of red and blue berries in the i - th shrub, respectively.",
    "output": "Output one integer \u2014 the maximum number of baskets that Phoenix can fill completely.",
    "note": "The first example is described above. In the second example, Phoenix can fill one basket fully using all the berries from the first ( and only) shrub. In the third example, Phoenix cannot fill any basket completely because there are less than 5 berries in each shrub, less than 5 total red berries, and less than 5 total blue berries. In the fourth example, Phoenix can put all the red berries into baskets, leaving an extra blue berry behind.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "math"
    ],
    "id": "1348E"
  },
  {
    "title": "Phoenix and Science",
    "url": "https://codeforces.com/problemset/problem/1348/D",
    "history": "Phoenix has decided to become a scientist! He is currently investigating the growth of bacteria. Initially, on day 1 , there is one bacterium with mass 1 . Every day, some number of bacteria will split ( possibly zero or all) . When a bacterium of mass m splits, it becomes two bacteria of mass m/ 2 each. For example, a bacterium of mass 3 can split into two bacteria of mass 1. 5 . Also, every night, the mass of every bacteria will increase by one. Phoenix is wondering if it is possible for the total mass of all the bacteria to be exactly n . If it is possible, he is interested in the way to obtain that mass using the minimum possible number of nights. Help him become the best scientist!",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 10^ 9 ) \u2014 the sum of bacteria masses that Phoenix is interested in.",
    "output": "For each test case, if there is no way for the bacteria to exactly achieve total mass n , print - 1. Otherwise, print two lines. The first line should contain an integer d \u2014 the minimum number of nights needed. The next line should contain d integers, with the i - th integer representing the number of bacteria that should split on the i - th day. If there are multiple solutions, print any.",
    "note": "In the first test case, the following process results in bacteria with total mass 9 : Day 1 : The bacterium with mass 1 splits. There are now two bacteria with mass 0. 5 each. Night 1 : All bacteria' s mass increases by one. There are now two bacteria with mass 1. 5 . Day 2 : None split. Night 2 : There are now two bacteria with mass 2. 5 . Day 3 : Both bacteria split. There are now four bacteria with mass 1. 25 . Night 3 : There are now four bacteria with mass 2. 25 . The total mass is 2. 25+ 2. 25+ 2. 25+ 2. 25= 9 . It can be proved that 3 is the minimum number of nights needed. There are also other ways to obtain total mass 9 in 3 nights. In the second test case, the following process results in bacteria with total mass 11 : Day 1 : The bacterium with mass 1 splits. There are now two bacteria with mass 0. 5 . Night 1 : There are now two bacteria with mass 1. 5 . Day 2 : One bacterium splits. There are now three bacteria with masses 0. 75 , 0. 75 , and 1. 5 . Night 2 : There are now three bacteria with masses 1. 75 , 1. 75 , and 2. 5 . Day 3 : The bacteria with mass 1. 75 and the bacteria with mass 2. 5 split. There are now five bacteria with masses 0. 875 , 0. 875 , 1. 25 , 1. 25 , and 1. 75 . Night 3 : There are now five bacteria with masses 1. 875 , 1. 875 , 2. 25 , 2. 25 , and 2. 75 . The total mass is 1. 875+ 1. 875+ 2. 25+ 2. 25+ 2. 75= 11 . It can be proved that 3 is the minimum number of nights needed. There are also other ways to obtain total mass 11 in 3 nights. In the third test case, the bacterium does not split on day 1 , and then grows to mass 2 during night 1 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1348D"
  },
  {
    "title": "Phoenix and Distribution",
    "url": "https://codeforces.com/problemset/problem/1348/C",
    "history": "Phoenix has a string s consisting of lowercase Latin letters. He wants to distribute all the letters of his string into k non- empty strings a_ 1, a_ 2, . . . , a_ k such that every letter of s goes to exactly one of the strings a_ i . The strings a_ i do not need to be substrings of s . Phoenix can distribute letters of s and rearrange the letters within each string a_ i however he wants. For example, if s = baba and k= 2 , Phoenix may distribute the letters of his string in many ways, such as: ba and ba a and abb ab and ab aa and bb But these ways are invalid: baa and ba b and ba baba and empty string ( a_ i should be non- empty) Phoenix wants to distribute the letters of his string s into k strings a_ 1, a_ 2, . . . , a_ k to minimize the lexicographically maximum string among them, i. e. minimize max( a_ 1, a_ 2, . . . , a_ k) . Help him find the optimal distribution and print the minimal possible value of max( a_ 1, a_ 2, . . . , a_ k) . String x is lexicographically less than string y if either x is a prefix of y and x y , or there exists an index i ( 1 \u2264 i \u2264 min( | x| , | y| ) ) such that x_ i < y_ i and for every j ( 1 \u2264 j < i) x_ j = y_ j . Here | x| denotes the length of the string x .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line of each test case consists of two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 5 ) \u2014 the length of string s and the number of non- empty strings, into which Phoenix wants to distribute letters of s , respectively. The second line of each test case contains a string s of length n consisting only of lowercase Latin letters. It is guaranteed that the sum of n over all test cases is \u2264 10^ 5 .",
    "output": "Print t answers \u2014 one per test case. The i - th answer should be the minimal possible value of max( a_ 1, a_ 2, . . . , a_ k) in the i - th test case.",
    "note": "In the first test case, one optimal solution is to distribute baba into ab and ab. In the second test case, one optimal solution is to distribute baacb into abbc and a. In the third test case, one optimal solution is to distribute baacb into ac, ab, and b. In the fourth test case, one optimal solution is to distribute aaaaa into aa, aa, and a. In the fifth test case, one optimal solution is to distribute aaxxzz into az, az, x, and x. In the sixth test case, one optimal solution is to distribute phoenix into ehinopx.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings",
      "strings"
    ],
    "id": "1348C"
  },
  {
    "title": "Phoenix and Beauty",
    "url": "https://codeforces.com/problemset/problem/1348/B",
    "history": "Phoenix loves beautiful arrays. An array is beautiful if all its subarrays of length k have the same sum. A subarray of an array is any sequence of consecutive elements. Phoenix currently has an array a of length n . He wants to insert some number of integers, possibly zero, into his array such that it becomes beautiful. The inserted integers must be between 1 and n inclusive. Integers may be inserted anywhere ( even before the first or after the last element) , and he is not trying to minimize the number of inserted integers.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 100 ) . The second line of each test case contains n space- separated integers ( 1 \u2264 a_ i \u2264 n ) \u2014 the array that Phoenix currently has. This array may or may not be already beautiful.",
    "output": "For each test case, if it is impossible to create a beautiful array, print - 1. Otherwise, print two lines. The first line should contain the length of the beautiful array m ( n \u2264 m \u2264 10^ 4 ) . You don' t need to minimize m . The second line should contain m space- separated integers ( 1 \u2264 b_ i \u2264 n ) \u2014 a beautiful array that Phoenix can obtain after inserting some, possibly zero, integers into his array a . You may print integers that weren' t originally in array a . If there are multiple solutions, print any. It' s guaranteed that if we can make array a beautiful, we can always make it with resulting length no more than 10^ 4 .",
    "note": "In the first test case, we can make array a beautiful by inserting the integer 1 at index 3 ( in between the two existing 2 s) . Now, all subarrays of length k= 2 have the same sum 3 . There exists many other possible solutions, for example: 2, 1, 2, 1, 2, 1 1, 2, 1, 2, 1, 2 In the second test case, the array is already beautiful: all subarrays of length k= 3 have the same sum 5 . In the third test case, it can be shown that we cannot insert numbers to make array a beautiful. In the fourth test case, the array b shown is beautiful and all subarrays of length k= 4 have the same sum 10 . There exist other solutions also.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1348B"
  },
  {
    "title": "Phoenix and Balance",
    "url": "https://codeforces.com/problemset/problem/1348/A",
    "history": "Phoenix has n coins with weights 2^ 1, 2^ 2, . . . , 2^ n . He knows that n is even. He wants to split the coins into two piles such that each pile has exactly n/ 2 coins and the difference of weights between the two piles is minimized. Formally, let a denote the sum of weights in the first pile, and b denote the sum of weights in the second pile. Help Phoenix minimize | a- b| , the absolute value of a- b .",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains an integer n ( 2 \u2264 n \u2264 30 ; n is even) \u2014 the number of coins that Phoenix has.",
    "output": "For each test case, output one integer \u2014 the minimum possible difference of weights between the two piles.",
    "note": "In the first test case, Phoenix has two coins with weights 2 and 4 . No matter how he divides the coins, the difference will be 4- 2= 2 . In the second test case, Phoenix has four coins of weight 2 , 4 , 8 , and 16 . It is optimal for Phoenix to place coins with weights 2 and 16 in one pile, and coins with weights 4 and 8 in another pile. The difference is ( 2+ 16) - ( 4+ 8) = 6 .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1348A"
  },
  {
    "title": "Save the Nature",
    "url": "https://codeforces.com/problemset/problem/1223/C",
    "history": "You are an environmental activist at heart but the reality is harsh and you are just a cashier in a cinema. But you can still do something! You have n tickets to sell. The price of the i - th ticket is p_ i . As a teller, you have a possibility to select the order in which the tickets will be sold ( i. e. a permutation of the tickets) . You know that the cinema participates in two ecological restoration programs applying them to the order you chose: The x% of the price of each the a - th sold ticket ( a - th, 2a - th, 3a - th and so on) in the order you chose is aimed for research and spreading of renewable energy sources. The y% of the price of each the b - th sold ticket ( b - th, 2b - th, 3b - th and so on) in the order you chose is aimed for pollution abatement. If the ticket is in both programs then the ( x + y) % are used for environmental activities. Also, it' s known that all prices are multiples of 100 , so there is no need in any rounding. For example, if you' d like to sell tickets with prices [ 400, 100, 300, 200] and the cinema pays 10% of each 2 - nd sold ticket and 20% of each 3 - rd sold ticket, then arranging them in order [ 100, 200, 300, 400] will lead to contribution equal to 100 \u00b7 0 + 200 \u00b7 0. 1 + 300 \u00b7 0. 2 + 400 \u00b7 0. 1 = 120 . But arranging them in order [ 100, 300, 400, 200] will lead to 100 \u00b7 0 + 300 \u00b7 0. 1 + 400 \u00b7 0. 2 + 200 \u00b7 0. 1 = 130 . Nature can' t wait, so you decided to change the order of tickets in such a way, so that the total contribution to programs will reach at least k in minimum number of sold tickets. Or say that it' s impossible to do so. In other words, find the minimum number of tickets which are needed to be sold in order to earn at least k .",
    "input": "The first line contains a single integer q ( 1 \u2264 q \u2264 100 ) \u2014 the number of independent queries. Each query consists of 5 lines. The first line of each query contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of tickets. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 100 \u2264 p_ i \u2264 10^ 9 , p_ i 100 = 0 ) \u2014 the corresponding prices of tickets. The third line contains two integers x and a ( 1 \u2264 x \u2264 100 , x + y \u2264 100 , 1 \u2264 a \u2264 n ) \u2014 the parameters of the first program. The fourth line contains two integers y and b ( 1 \u2264 y \u2264 100 , x + y \u2264 100 , 1 \u2264 b \u2264 n ) \u2014 the parameters of the second program. The fifth line contains single integer k ( 1 \u2264 k \u2264 10^ 14 ) \u2014 the required total contribution. It' s guaranteed that the total number of tickets per test doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print q integers \u2014 one per query. For each query, print the minimum number of tickets you need to sell to make the total ecological contribution of at least k if you can sell tickets in any order. If the total contribution can not be achieved selling all the tickets, print - 1 .",
    "note": "In the first query the total contribution is equal to 50 + 49 = 99 < 100 , so it' s impossible to gather enough money. In the second query you can rearrange tickets in a following way: [ 100, 100, 200, 200, 100, 200, 100, 100] and the total contribution from the first 6 tickets is equal to 100 \u00b7 0 + 100 \u00b7 0. 1 + 200 \u00b7 0. 15 + 200 \u00b7 0. 1 + 100 \u00b7 0 + 200 \u00b7 0. 25 = 10 + 30 + 20 + 50 = 110 . In the third query the full price of each ticket goes to the environmental activities. In the fourth query you can rearrange tickets as [ 100, 200, 100, 100, 100] and the total contribution from the first 4 tickets is 100 \u00b7 0 + 200 \u00b7 0. 31 + 100 \u00b7 0 + 100 \u00b7 0. 31 = 62 + 31 = 93 .",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1223C"
  },
  {
    "title": "Knights",
    "url": "https://codeforces.com/problemset/problem/1221/B",
    "history": "You are given a chess board with n rows and n columns. Initially all cells of the board are empty, and you have to put a white or a black knight into each cell of the board. A knight is a chess piece that can attack a piece in cell ( x_ 2 , y_ 2 ) from the cell ( x_ 1 , y_ 1 ) if one of the following conditions is met: | x_ 1 - x_ 2| = 2 and | y_ 1 - y_ 2| = 1 , or | x_ 1 - x_ 2| = 1 and | y_ 1 - y_ 2| = 2 . Here are some examples of which cells knight can attack. In each of the following pictures, if the knight is currently in the blue cell, it can attack all red cells ( and only them) . A duel of knights is a pair of knights of different colors such that these knights attack each other. You have to put a knight ( a white one or a black one) into each cell in such a way that the number of duels is maximum possible.",
    "input": "The first line contains one integer n ( 3 \u2264 n \u2264 100 ) \u2014 the number of rows ( and columns) in the board.",
    "output": "Print n lines with n characters in each line. The j - th character in the i - th line should be W, if the cell ( i , j ) contains a white knight, or B, if it contains a black knight. The number of duels should be maximum possible. If there are multiple optimal answers, print any of them.",
    "note": "In the first example, there are 8 duels: the white knight in ( 1 , 1 ) attacks the black knight in ( 3 , 2 ) ; the white knight in ( 1 , 1 ) attacks the black knight in ( 2 , 3 ) ; the white knight in ( 1 , 3 ) attacks the black knight in ( 3 , 2 ) ; the white knight in ( 1 , 3 ) attacks the black knight in ( 2 , 1 ) ; the white knight in ( 3 , 1 ) attacks the black knight in ( 1 , 2 ) ; the white knight in ( 3 , 1 ) attacks the black knight in ( 2 , 3 ) ; the white knight in ( 3 , 3 ) attacks the black knight in ( 1 , 2 ) ; the white knight in ( 3 , 3 ) attacks the black knight in ( 2 , 1 ) .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1221B"
  },
  {
    "title": "2048 Game",
    "url": "https://codeforces.com/problemset/problem/1221/A",
    "history": "You are playing a variation of game 2048. Initially you have a multiset s of n integers. Every integer in this multiset is a power of two. You may perform any number ( possibly, zero) operations with this multiset. During each operation you choose two equal integers from s , remove them from s and insert the number equal to their sum into s . For example, if s = { 1, 2, 1, 1, 4, 2, 2} and you choose integers 2 and 2 , then the multiset becomes { 1, 1, 1, 4, 4, 2} . You win if the number 2048 belongs to your multiset. For example, if s = { 1024, 512, 512, 4} you can win as follows: choose 512 and 512 , your multiset turns into { 1024, 1024, 4} . Then choose 1024 and 1024 , your multiset turns into { 2048, 4} and you win. You have to determine if you can win this game. You have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 100 ) \u2013 the number of queries. The first line of each query contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of elements in multiset. The second line of each query contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 2^ 29 ) \u2014 the description of the multiset. It is guaranteed that all elements of the multiset are powers of two.",
    "output": "For each query print YES if it is possible to obtain the number 2048 in your multiset, and NO otherwise. You may print every letter in any case you want ( so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer) .",
    "note": "In the first query you can win as follows: choose 512 and 512 , and s turns into { 1024, 64, 1024} . Then choose 1024 and 1024 , and s turns into { 2048, 64} and you win. In the second query s contains 2048 initially.",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1221A"
  },
  {
    "title": "Tourism",
    "url": "https://codeforces.com/problemset/problem/1220/E",
    "history": "Alex decided to go on a touristic trip over the country. For simplicity let' s assume that the country has n cities and m bidirectional roads connecting them. Alex lives in city s and initially located in it. To compare different cities Alex assigned each city a score w_ i which is as high as interesting city seems to Alex. Alex believes that his trip will be interesting only if he will not use any road twice in a row. That is if Alex came to city v from city u , he may choose as the next city in the trip any city connected with v by the road, except for the city u . Your task is to help Alex plan his city in a way that maximizes total score over all cities he visited. Note that for each city its score is counted at most once, even if Alex been there several times during his trip.",
    "input": "First line of input contains two integers n and m , ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) which are numbers of cities and roads in the country. Second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 9 ) which are scores of all cities. The following m lines contain description of the roads. Each of these m lines contains two integers u and v ( 1 \u2264 u, v \u2264 n ) which are cities connected by this road. It is guaranteed that there is at most one direct road between any two cities, no city is connected to itself by the road and, finally, it is possible to go from any city to any other one using only roads. The last line contains single integer s ( 1 \u2264 s \u2264 n ) , which is the number of the initial city.",
    "output": "Output single integer which is the maximum possible sum of scores of visited cities.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1220E"
  },
  {
    "title": "Substring Game in the Lesson",
    "url": "https://codeforces.com/problemset/problem/1220/C",
    "history": "Mike and Ann are sitting in the classroom. The lesson is boring, so they decided to play an interesting game. Fortunately, all they need to play this game is a string s and a number k ( 0 \u2264 k < | s| ) . At the beginning of the game, players are given a substring of s with left border l and right border r , both equal to k ( i. e. initially l= r= k ) . Then players start to make moves one by one, according to the following rules: A player chooses l^ ' and r^ ' so that l^ ' \u2264 l , r^ ' \u2265 r and s[ l^ ' , r^ ' ] is lexicographically less than s[ l, r] . Then the player changes l and r in this way: l : = l^ ' , r : = r^ ' . Ann moves first. The player, that can' t make a move loses. Recall that a substring s[ l, r] ( l \u2264 r ) of a string s is a continuous segment of letters from s that starts at position l and ends at position r . For example, \" ehn\" is a substring ( s[ 3, 5] ) of \" aaaehnsvz\" and \" ahz\" is not. Mike and Ann were playing so enthusiastically that they did not notice the teacher approached them. Surprisingly, the teacher didn' t scold them, instead of that he said, that he can figure out the winner of the game before it starts, even if he knows only s and k . Unfortunately, Mike and Ann are not so keen in the game theory, so they ask you to write a program, that takes s and determines the winner for all possible k .",
    "input": "The first line of the input contains a single string s ( 1 \u2264 | s| \u2264 5 \u00b7 10^ 5 ) consisting of lowercase English letters.",
    "output": "Print | s| lines. In the line i write the name of the winner ( print Mike or Ann) in the game with string s and k = i , if both play optimally",
    "note": "",
    "topics": [
      "games",
      "greedy",
      "strings"
    ],
    "id": "1220C"
  },
  {
    "title": "The Light Square",
    "url": "https://codeforces.com/problemset/problem/1218/I",
    "history": "For her birthday Alice received an interesting gift from her friends \u2013 The Light Square. The Light Square game is played on an N \u00d7 N lightbulbs square board with a magical lightbulb bar of size N \u00d7 1 that has magical properties. At the start of the game some lights on the square board and magical bar are turned on. The goal of the game is to transform the starting light square board pattern into some other pattern using the magical bar without rotating the square board. The magical bar works as follows: It can be placed on any row or column The orientation of the magical lightbulb must be left to right or top to bottom for it to keep its magical properties The entire bar needs to be fully placed on a board The lights of the magical bar never change If the light on the magical bar is the same as the light of the square it is placed on it will switch the light on the square board off, otherwise it will switch the light on The magical bar can be used an infinite number of times Alice has a hard time transforming her square board into the pattern Bob gave her. Can you help her transform the board or let her know it is impossible? If there are multiple solutions print any.",
    "input": "The first line contains one positive integer number N ( 1 \u2264 N \u2264 2000) representing the size of the square board. The next N lines are strings of length N consisting of 1' s and 0' s representing the initial state of the square board starting from the top row. If the character in a string is 1 it means the light is turned on, otherwise it is off. The next N lines are strings of length N consisting of 1' s and 0' s representing the desired state of the square board starting from the top row that was given to Alice by Bob. The last line is one string of length N consisting of 1' s and 0' s representing the pattern of the magical bar in a left to right order.",
    "output": "Transform the instructions for Alice in order to transform the square board into the pattern Bob gave her. The first line of the output contains an integer number M ( 0 \u2264 M \u2264 10^ 5 ) representing the number of times Alice will need to apply the magical bar. The next M lines are of the form \" col X \" or \" row X \" , where X is 0 - based index of the matrix, meaning the magical bar should be applied to either row X or column X . If there is no solution, print only - 1. In case of multiple solutions print any correct one.",
    "note": "Example 1: It is impossible to transform square board from one format to anotherExample 2: Magic bar can be applied on first row or column.",
    "topics": [
      "2-sat",
      "dfs and similar",
      "greedy"
    ],
    "id": "1218I"
  },
  {
    "title": "Workout plan",
    "url": "https://codeforces.com/problemset/problem/1218/F",
    "history": "Alan decided to get in shape for the summer, so he created a precise workout plan to follow. His plan is to go to a different gym every day during the next N days and lift X[ i] grams on day i . In order to improve his workout performance at the gym, he can buy exactly one pre- workout drink at the gym he is currently in and it will improve his performance by A grams permanently and immediately. In different gyms these pre- workout drinks can cost different amounts C[ i] because of the taste and the gym' s location but its permanent workout gains are the same. Before the first day of starting his workout plan, Alan knows he can lift a maximum of K grams. Help Alan spend a minimum total amount of money in order to reach his workout plan. If there is no way for him to complete his workout plan successfully output - 1 .",
    "input": "The first one contains two integer numbers, integers N ( 1 \u2264 N \u2264 10^ 5) and K ( 1 \u2264 K \u2264 10^ 5) \u2013 representing number of days in the workout plan and how many grams he can lift before starting his workout plan respectively. The second line contains N integer numbers X[ i] ( 1 \u2264 X[ i] \u2264 10^ 9) separated by a single space representing how many grams Alan wants to lift on day i . The third line contains one integer number A ( 1 \u2264 A \u2264 10^ 9) representing permanent performance gains from a single drink. The last line contains N integer numbers C[ i] ( 1 \u2264 C[ i] \u2264 10^ 9) , representing cost of performance booster drink in the gym he visits on day i .",
    "output": "One integer number representing minimal money spent to finish his workout plan. If he cannot finish his workout plan, output - 1.",
    "note": "First example: After buying drinks on days 2 and 4 Alan can finish his workout plan. Second example: Alan cannot lift 40000 grams on day 2.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1218F"
  },
  {
    "title": "Sum Queries?",
    "url": "https://codeforces.com/problemset/problem/1217/E",
    "history": "Let' s define a balanced multiset the following way. Write down the sum of all elements of the multiset in its decimal representation. For each position of that number check if the multiset includes at least one element such that the digit of the element and the digit of the sum at that position are the same. If that holds for every position, then the multiset is balanced. Otherwise it' s unbalanced. For example, multiset { 20, 300, 10001} is balanced and multiset { 20, 310, 10001} is unbalanced: The red digits mark the elements and the positions for which these elements have the same digit as the sum. The sum of the first multiset is 10321 , every position has the digit required. The sum of the second multiset is 10331 and the second- to- last digit doesn' t appear in any number, thus making the multiset unbalanced. You are given an array a_ 1, a_ 2, . . . , a_ n , consisting of n integers. You are asked to perform some queries on it. The queries can be of two types: 1 i x \u2014 replace a_ i with the value x ; 2 l r \u2014 find the unbalanced subset of the multiset of the numbers a_ l, a_ l + 1, . . . , a_ r with the minimum sum, or report that no unbalanced subset exists. Note that the empty multiset is balanced. For each query of the second type print the lowest sum of the unbalanced subset. Print - 1 if no unbalanced subset exists.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array and the number of queries, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i < 10^ 9 ) . Each of the following m lines contains a query of one of two types: 1 i x ( 1 \u2264 i \u2264 n , 1 \u2264 x < 10^ 9 ) \u2014 replace a_ i with the value x ; 2 l r ( 1 \u2264 l \u2264 r \u2264 n ) \u2014 find the unbalanced subset of the multiset of the numbers a_ l, a_ l + 1, . . . , a_ r with the lowest sum, or report that no unbalanced subset exists. It is guaranteed that there is at least one query of the second type.",
    "output": "For each query of the second type print the lowest sum of the unbalanced subset. Print - 1 if no unbalanced subset exists.",
    "note": "All the subsets of multiset { 20, 300, 10001} are balanced, thus the answer is - 1. The possible unbalanced subsets in the third query are { 20, 310} and { 20, 310, 10001} . The lowest sum one is { 20, 310} . Note that you are asked to choose a subset, not a subsegment, thus the chosen elements might not be adjancent in the array. The fourth query includes only the empty subset and subset { 20} . Both of them are balanced. The last query includes the empty subset and the subsets { 20} , { 20} and { 20, 20} . Only { 20, 20} is unbalanced, its sum is 40 . Note that you are asked to choose a multiset, thus it might include equal elements.",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1217E"
  },
  {
    "title": "Zmei Gorynich",
    "url": "https://codeforces.com/problemset/problem/1217/B",
    "history": "You are fighting with Zmei Gorynich \u2014 a ferocious monster from Slavic myths, a huge dragon- like reptile with multiple heads! Initially Zmei Gorynich has x heads. You can deal n types of blows. If you deal a blow of the i - th type, you decrease the number of Gorynich' s heads by min( d_ i, curX) , there curX is the current number of heads. But if after this blow Zmei Gorynich has at least one head, he grows h_ i new heads. If curX = 0 then Gorynich is defeated. You can deal each blow any number of times, in any order. For example, if curX = 10 , d = 7 , h = 10 then the number of heads changes to 13 ( you cut 7 heads off, but then Zmei grows 10 new ones) , but if curX = 10 , d = 11 , h = 100 then number of heads changes to 0 and Zmei Gorynich is considered defeated. Calculate the minimum number of blows to defeat Zmei Gorynich! You have to answer t independent queries.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2013 the number of queries. The first line of each query contains two integers n and x ( 1 \u2264 n \u2264 100 , 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of possible types of blows and the number of heads Zmei initially has, respectively. The following n lines of each query contain the descriptions of types of blows you can deal. The i - th line contains two integers d_ i and h_ i ( 1 \u2264 d_ i, h_ i \u2264 10^ 9 ) \u2014 the description of the i - th blow.",
    "output": "For each query print the minimum number of blows you have to deal to defeat Zmei Gorynich. If Zmei Gorynuch cannot be defeated print - 1 .",
    "note": "In the first query you can deal the first blow ( after that the number of heads changes to 10 - 6 + 3 = 7 ) , and then deal the second blow. In the second query you just deal the first blow three times, and Zmei is defeated. In third query you can not defeat Zmei Gorynich. Maybe it' s better to convince it to stop fighting?",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1217B"
  },
  {
    "title": "Wi-Fi",
    "url": "https://codeforces.com/problemset/problem/1216/F",
    "history": "You work as a system administrator in a dormitory, which has n rooms one after another along a straight hallway. Rooms are numbered from 1 to n . You have to connect all n rooms to the Internet. You can connect each room to the Internet directly, the cost of such connection for the i - th room is i coins. Some rooms also have a spot for a router. The cost of placing a router in the i - th room is also i coins. You cannot place a router in a room which does not have a spot for it. When you place a router in the room i , you connect all rooms with the numbers from max( 1, i - k) to min( n, i + k) inclusive to the Internet, where k is the range of router. The value of k is the same for all routers. Calculate the minimum total cost of connecting all n rooms to the Internet. You can assume that the number of rooms which have a spot for a router is not greater than the number of routers you have.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n, k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of rooms and the range of each router. The second line of the input contains one string s of length n , consisting only of zeros and ones. If the i - th character of the string equals to ' 1' then there is a spot for a router in the i - th room. If the i - th character of the string equals to ' 0' then you cannot place a router in the i - th room.",
    "output": "Print one integer \u2014 the minimum total cost of connecting all n rooms to the Internet.",
    "note": "In the first example it is enough to place the router in the room 3 , then all rooms will be connected to the Internet. The total cost of connection is 3 . In the second example you can place routers nowhere, so you need to connect all rooms directly. Thus, the total cost of connection of all rooms is 1 + 2 + 3 + 4 + 5 + 6 = 21 . In the third example you need to connect the room 1 directly and place the router in the room 3 . Thus, the total cost of connection of all rooms is 1 + 3 = 4 . In the fourth example you need to place routers in rooms 5 and 10 . Then all rooms will be connected to the Internet. The total cost of connection is 5 + 10 = 15 .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1216F"
  },
  {
    "title": "Shooting",
    "url": "https://codeforces.com/problemset/problem/1216/B",
    "history": "Recently Vasya decided to improve his pistol shooting skills. Today his coach offered him the following exercise. He placed n cans in a row on a table. Cans are numbered from left to right from 1 to n . Vasya has to knock down each can exactly once to finish the exercise. He is allowed to choose the order in which he will knock the cans down. Vasya knows that the durability of the i - th can is a_ i . It means that if Vasya has already knocked x cans down and is now about to start shooting the i - th one, he will need ( a_ i \u00b7 x + 1) shots to knock it down. You can assume that if Vasya starts shooting the i - th can, he will be shooting it until he knocks it down. Your task is to choose such an order of shooting so that the number of shots required to knock each of the n given cans down exactly once is minimum possible.",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 1 000) \u2014 the number of cans. The second line of the input contains the sequence a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 1 000) , where a_ i is the durability of the i - th can.",
    "output": "In the first line print the minimum number of shots required to knock each of the n given cans down exactly once. In the second line print the sequence consisting of n distinct integers from 1 to n \u2014 the order of indices of cans that minimizes the number of shots required. If there are several answers, you can print any of them.",
    "note": "In the first example Vasya can start shooting from the first can. He knocks it down with the first shot because he haven' t knocked any other cans down before. After that he has to shoot the third can. To knock it down he shoots 20 \u00b7 1 + 1 = 21 times. After that only second can remains. To knock it down Vasya shoots 10 \u00b7 2 + 1 = 21 times. So the total number of shots is 1 + 21 + 21 = 43 . In the second example the order of shooting does not matter because all cans have the same durability.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1216B"
  },
  {
    "title": "Ticket Game",
    "url": "https://codeforces.com/problemset/problem/1215/D",
    "history": "Monocarp and Bicarp live in Berland, where every bus ticket consists of n digits ( n is an even number) . During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even. Monocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first n/ 2 digits of this ticket is equal to the sum of the last n/ 2 digits. Monocarp and Bicarp take turns ( and Monocarp performs the first of them) . During each turn, the current player must replace any erased digit with any digit from 0 to 9 . The game ends when there are no erased digits in the ticket. If the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.",
    "input": "The first line contains one even integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the number of digits in the ticket. The second line contains a string of n digits and \" ? \" characters \u2014 the ticket which Monocarp and Bicarp have found. If the i - th character is \" ? \" , then the i - th digit is erased. Note that there may be leading zeroes. The number of \" ? \" characters is even.",
    "output": "If Monocarp wins, print \" Monocarp\" ( without quotes) . Otherwise print \" Bicarp\" ( without quotes) .",
    "note": "Since there is no question mark in the ticket in the first example, the winner is determined before the game even starts, and it is Bicarp. In the second example, Bicarp also wins. After Monocarp chooses an erased digit and replaces it with a new one, Bicap can choose another position with an erased digit and replace it with the same digit, so the ticket is happy.",
    "topics": [
      "games",
      "greedy",
      "math"
    ],
    "id": "1215D"
  },
  {
    "title": "Swap Letters",
    "url": "https://codeforces.com/problemset/problem/1215/C",
    "history": "Monocarp has got two strings s and t having equal length. Both strings consist of lowercase Latin letters \" a\" and \" b\" . Monocarp wants to make these two strings s and t equal to each other. He can do the following operation any number of times: choose an index pos_ 1 in the string s , choose an index pos_ 2 in the string t , and swap s_ pos_ 1 with t_ pos_ 2 . You have to determine the minimum number of operations Monocarp has to perform to make s and t equal, and print any optimal sequence of operations \u2014 or say that it is impossible to make these strings equal.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5) \u2014 the length of s and t . The second line contains one string s consisting of n characters \" a\" and \" b\" . The third line contains one string t consisting of n characters \" a\" and \" b\" .",
    "output": "If it is impossible to make these strings equal, print - 1 . Otherwise, in the first line print k \u2014 the minimum number of operations required to make the strings equal. In each of the next k lines print two integers \u2014 the index in the string s and the index in the string t that should be used in the corresponding swap operation.",
    "note": "In the first example two operations are enough. For example, you can swap the third letter in s with the third letter in t . Then s = \" abbb\" , t = \" aaab\" . Then swap the third letter in s and the second letter in t . Then both s and t are equal to \" abab\" . In the second example it' s impossible to make two strings equal.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1215C"
  },
  {
    "title": "Yellow Cards",
    "url": "https://codeforces.com/problemset/problem/1215/A",
    "history": "The final match of the Berland Football Cup has been held recently. The referee has shown n yellow cards throughout the match. At the beginning of the match there were a_ 1 players in the first team and a_ 2 players in the second team. The rules of sending players off the game are a bit different in Berland football. If a player from the first team receives k_ 1 yellow cards throughout the match, he can no longer participate in the match \u2014 he' s sent off. And if a player from the second team receives k_ 2 yellow cards, he' s sent off. After a player leaves the match, he can no longer receive any yellow cards. Each of n yellow cards was shown to exactly one player. Even if all players from one team ( or even from both teams) leave the match, the game still continues. The referee has lost his records on who has received each yellow card. Help him to determine the minimum and the maximum number of players that could have been thrown out of the game.",
    "input": "The first line contains one integer a_ 1 ( 1 \u2264 a_ 1 \u2264 1 000) \u2014 the number of players in the first team. The second line contains one integer a_ 2 ( 1 \u2264 a_ 2 \u2264 1 000) \u2014 the number of players in the second team. The third line contains one integer k_ 1 ( 1 \u2264 k_ 1 \u2264 1 000) \u2014 the maximum number of yellow cards a player from the first team can receive ( after receiving that many yellow cards, he leaves the game) . The fourth line contains one integer k_ 2 ( 1 \u2264 k_ 2 \u2264 1 000) \u2014 the maximum number of yellow cards a player from the second team can receive ( after receiving that many yellow cards, he leaves the game) . The fifth line contains one integer n ( 1 \u2264 n \u2264 a_ 1 \u00b7 k_ 1 + a_ 2 \u00b7 k_ 2) \u2014 the number of yellow cards that have been shown during the match.",
    "output": "Print two integers \u2014 the minimum and the maximum number of players that could have been thrown out of the game.",
    "note": "In the first example it could be possible that no player left the game, so the first number in the output is 0 . The maximum possible number of players that could have been forced to leave the game is 4 \u2014 one player from the first team, and three players from the second. In the second example the maximum possible number of yellow cards has been shown ( 3 \u00b7 6 + 1 \u00b7 7 = 25) , so in any case all players were sent off.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1215A"
  },
  {
    "title": "Employment",
    "url": "https://codeforces.com/problemset/problem/1214/F",
    "history": "Two large companies \" Cecsi\" and \" Poca Pola\" are fighting against each other for a long time. In order to overcome their competitor, \" Poca Pola\" started a super secret project, for which it has total n vacancies in all of their offices. After many tests and interviews n candidates were selected and the only thing left was their employment. Because all candidates have the same skills, it doesn' t matter where each of them will work. That is why the company decided to distribute candidates between workplaces so that the total distance between home and workplace over all candidates is minimal. It is well known that Earth is round, so it can be described as a circle, and all m cities on Earth can be described as points on this circle. All cities are enumerated from 1 to m so that for each i ( 1 \u2264 i \u2264 m - 1 ) cities with indexes i and i + 1 are neighbors and cities with indexes 1 and m are neighbors as well. People can move only along the circle. The distance between any two cities equals to minimal number of transitions between neighboring cities you have to perform to get from one city to another. In particular, the distance between the city and itself equals 0 . The \" Poca Pola\" vacancies are located at offices in cities a_ 1, a_ 2, . . . , a_ n . The candidates live in cities b_ 1, b_ 2, . . . , b_ n . It is possible that some vacancies are located in the same cities and some candidates live in the same cities. The \" Poca Pola\" managers are too busy with super secret project, so you were asked to help \" Poca Pola\" to distribute candidates between workplaces, so that the sum of the distance between home and workplace over all candidates is minimum possible.",
    "input": "The first line contains two integers m and n ( 1 \u2264 m \u2264 10^ 9 , 1 \u2264 n \u2264 200 000 ) \u2014 the number of cities on Earth and the number of vacancies. The second line contains n integers a_ 1, a_ 2, a_ 3, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) \u2014 the cities where vacancies are located. The third line contains n integers b_ 1, b_ 2, b_ 3, . . . , b_ n ( 1 \u2264 b_ i \u2264 m ) \u2014 the cities where the candidates live.",
    "output": "The first line should contain the minimum total distance between home and workplace over all candidates. The second line should contain n different integers from 1 to n . The i - th of them should be the index of candidate that should work at i - th workplace.",
    "note": "In the first example, the distance between each candidate and his workplace equals to 1 ( from 1 to 10 , from 4 to 5 and from 6 to 5 ) . In the second example: The second candidate works at first workplace, the distance between cities 3 and 1 equals to 2 . The third candidate works at second workplace, the distance between cities 6 and 4 equals to 2 . The first candidate works at third workplace, the distance between cities 8 and 8 equals to 0 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1214F"
  },
  {
    "title": "Bad Sequence",
    "url": "https://codeforces.com/problemset/problem/1214/C",
    "history": "Petya' s friends made him a birthday present \u2014 a bracket sequence. Petya was quite disappointed with his gift, because he dreamed of correct bracket sequence, yet he told his friends nothing about his dreams and decided to fix present himself. To make everything right, Petya is going to move at most one bracket from its original place in the sequence to any other position. Reversing the bracket ( e. g. turning \" ( \" into \" ) \" or vice versa) isn' t allowed. We remind that bracket sequence s is called correct if: s is empty; s is equal to \" ( t ) \" , where t is correct bracket sequence; s is equal to t_ 1 t_ 2 , i. e. concatenation of t_ 1 and t_ 2 , where t_ 1 and t_ 2 are correct bracket sequences. For example, \" ( ( ) ( ) ) \" , \" ( ) \" are correct, while \" ) ( \" and \" ( ) ) \" are not. Help Petya to fix his birthday present and understand whether he can move one bracket so that the sequence becomes correct.",
    "input": "First of line of input contains a single number n ( 1 \u2264 n \u2264 200 000 ) \u2014 length of the sequence which Petya received for his birthday. Second line of the input contains bracket sequence of length n , containing symbols \" ( \" and \" ) \" .",
    "output": "Print \" Yes\" if Petya can make his sequence correct moving at most one bracket. Otherwise print \" No\" .",
    "note": "In the first example, Petya can move first bracket to the end, thus turning the sequence into \" ( ) \" , which is correct bracket sequence. In the second example, there is no way to move at most one bracket so that the sequence becomes correct. In the third example, the sequence is already correct and there' s no need to move brackets.",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1214C"
  },
  {
    "title": "Unstable String Sort",
    "url": "https://codeforces.com/problemset/problem/1213/F",
    "history": "Authors have come up with the string s consisting of n lowercase Latin letters. You are given two permutations of its indices ( not necessary equal) p and q ( both of length n ) . Recall that the permutation is the array of length n which contains each integer from 1 to n exactly once. For all i from 1 to n- 1 the following properties hold: s[ p_ i] \u2264 s[ p_ i + 1] and s[ q_ i] \u2264 s[ q_ i + 1] . It means that if you will write down all characters of s in order of permutation indices, the resulting string will be sorted in the non- decreasing order. Your task is to restore any such string s of length n consisting of at least k distinct lowercase Latin letters which suits the given permutations. If there are multiple answers, you can print any of them.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 26 ) \u2014 the length of the string and the number of distinct characters required. The second line of the input contains n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i are distinct integers from 1 to n ) \u2014 the permutation p . The third line of the input contains n integers q_ 1, q_ 2, . . . , q_ n ( 1 \u2264 q_ i \u2264 n , all q_ i are distinct integers from 1 to n ) \u2014 the permutation q .",
    "output": "If it is impossible to find the suitable string, print \" NO\" on the first line. Otherwise print \" YES\" on the first line and string s on the second line. It should consist of n lowercase Latin letters, contain at least k distinct characters and suit the given permutations. If there are multiple answers, you can print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1213F"
  },
  {
    "title": "Double Permutation Inc.",
    "url": "https://codeforces.com/problemset/problem/1211/E",
    "history": "Polycarp recently became an employee of the company \" Double Permutation Inc. \" Now he is a fan of permutations and is looking for them everywhere! A permutation in this problem is a sequence of integers p_ 1, p_ 2, . . . , p_ k such that every integer from 1 to k occurs exactly once in it. For example, the following sequences are permutations of [ 3, 1, 4, 2] , [ 1] and [ 6, 1, 2, 3, 5, 4] . The following sequences are not permutations: [ 0, 1] , [ 1, 2, 2] , [ 1, 2, 4] and [ 2, 3] . In the lobby of the company' s headquarter statistics on visits to the company' s website for the last n days are published \u2014 the sequence a_ 1, a_ 2, . . . , a_ n . Polycarp wants to color all the elements of this sequence in one of three colors ( red, green or blue) so that: all red numbers, being written out of a_ 1, a_ 2, . . . , a_ n from left to right ( that is, without changing their relative order) , must form some permutation ( let' s call it P ) ; all green numbers, being written out of a_ 1, a_ 2, . . . , a_ n from left to right ( that is, without changing their relative order) , must form the same permutation P ; among blue numbers there should not be elements that are equal to some element of the permutation P . Help Polycarp to color all n numbers so that the total number of red and green elements is maximum.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the sequence a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2\u00b710^ 5 ) .",
    "output": "Print a string s of length n such that: s_ i = ' R' , if the element a_ i must be colored in red; s_ i = ' G' , if the element a_ i must be colored in green; s_ i = ' B' , if the element a_ i must be colored in blue. The string s should maximize the total number of red and green elements when fulfilling the requirements from the main part of the problem statement. If there are several optimal answers, print any of them.",
    "note": "",
    "topics": [
      "*special",
      "binary search",
      "greedy"
    ],
    "id": "1211E"
  },
  {
    "title": "Teams",
    "url": "https://codeforces.com/problemset/problem/1211/D",
    "history": "There are n table bowling players, the rating of the i - th player equals r_ i . Compose a maximum number of teams in a such way that: each player belongs to at most one team; each team contains exactly a+ b players; each team contains a group of a players with the same rating and a group of b players with another same rating, which must be k times larger than the rating of the players in the first group. For example, if n= 12 , r= [ 1, 1, 2, 2, 2, 2, 2, 3, 3, 4, 6, 6] , a= 1 , b= 2 , k= 2 , you can compose two teams with ratings [ 1, 2, 2] and one team with ratings [ 3, 6, 6] . So, the maximum number of teams is 3 . Find the maximum number of teams by given n, r_ 1 . . . r_ n, a, b and k to compose in respect to the given requirements.",
    "input": "The first line of the input contains four integers n , a , b and k ( 1 \u2264 n, a, b \u2264 3\u00b710^ 5 , 2 \u2264 k \u2264 1000 ) . The second line contains the sequence of player' s ratings \u2014 integers r_ 1, r_ 2, . . . , r_ n ( 1 \u2264 r_ i \u2264 10^ 6 ) .",
    "output": "Print only one integer \u2014 the maximum number of teams that can be composed from n given players.",
    "note": "",
    "topics": [
      "*special",
      "binary search",
      "greedy",
      "math"
    ],
    "id": "1211D"
  },
  {
    "title": "Ice Cream",
    "url": "https://codeforces.com/problemset/problem/1211/C",
    "history": "Summer in Berland lasts n days, the price of one portion of ice cream on the i - th day is c_ i . Over the summer, Tanya wants to eat exactly k portions of ice cream. At the same time, on the i - th day, she decided that she would eat at least a_ i portions, but not more than b_ i ( a_ i \u2264 b_ i ) portions. In other words, let d_ i be equal to the number of portions that she eats on the i - th day. Then d_ 1+ d_ 2+ . . . + d_ n= k and a_ i \u2264 d_ i \u2264 b_ i for each i . Given that portions of ice cream can only be eaten on the day of purchase, find the minimum amount of money that Tanya can spend on ice cream in the summer.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2\u00b710^ 5 , 0 \u2264 k \u2264 10^ 9 ) \u2014 the number of days and the total number of servings of ice cream that Tanya will eat in the summer. The following n lines contain descriptions of the days, one description per line. Each description consists of three integers a_ i, b_ i, c_ i ( 0 \u2264 a_ i \u2264 b_ i \u2264 10^ 9 , 1 \u2264 c_ i \u2264 10^ 6 ) .",
    "output": "Print the minimum amount of money that Tanya can spend on ice cream in the summer. If there is no way for Tanya to buy and satisfy all the requirements, then print - 1.",
    "note": "In the first example, Tanya needs to eat 3 portions of ice cream on the first day, 1 portions of ice cream on the second day and 3 portions of ice cream on the third day. In this case, the amount of money spent is 3\u00b76+ 1\u00b74+ 3\u00b73= 31 . It can be shown that any other valid way to eat exactly 7 portions of ice cream costs more.",
    "topics": [
      "*special",
      "greedy",
      "sortings"
    ],
    "id": "1211C"
  },
  {
    "title": "Marcin and Training Camp",
    "url": "https://codeforces.com/problemset/problem/1210/B",
    "history": "Marcin is a coach in his university. There are n students who want to attend a training camp. Marcin is a smart coach, so he wants to send only the students that can work calmly with each other. Let' s focus on the students. They are indexed with integers from 1 to n . Each of them can be described with two integers a_ i and b_ i ; b_ i is equal to the skill level of the i - th student ( the higher, the better) . Also, there are 60 known algorithms, which are numbered with integers from 0 to 59 . If the i - th student knows the j - th algorithm, then the j - th bit ( 2^ j ) is set in the binary representation of a_ i . Otherwise, this bit is not set. Student x thinks that he is better than student y if and only if x knows some algorithm which y doesn' t know. Note that two students can think that they are better than each other. A group of students can work together calmly if no student in this group thinks that he is better than everyone else in this group. Marcin wants to send a group of at least two students which will work together calmly and will have the maximum possible sum of the skill levels. What is this sum?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 7000 ) \u2014 the number of students interested in the camp. The second line contains n integers. The i - th of them is a_ i ( 0 \u2264 a_ i < 2^ 60 ) . The third line contains n integers. The i - th of them is b_ i ( 1 \u2264 b_ i \u2264 10^ 9 ) .",
    "output": "Output one integer which denotes the maximum sum of b_ i over the students in a group of students which can work together calmly. If no group of at least two students can work together calmly, print 0.",
    "note": "In the first sample test, it' s optimal to send the first, the second and the third student to the camp. It' s also possible to send only the first and the third student, but they' d have a lower sum of b_ i . In the second test, in each group of at least two students someone will always think that he is better than everyone else in the subset.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1210B"
  },
  {
    "title": "Moving Walkways",
    "url": "https://codeforces.com/problemset/problem/1209/H",
    "history": "Airports often use moving walkways to help you walking big distances faster. Each such walkway has some speed that effectively increases your speed. You can stand on such a walkway and let it move you, or you could also walk and then your effective speed is your walking speed plus walkway' s speed. Limak wants to get from point 0 to point L on a straight line. There are n disjoint walkways in between. The i - th walkway is described by two integers x_ i and y_ i and a real value s_ i . The i - th walkway starts at x_ i , ends at y_ i and has speed s_ i . Every walkway is located inside the segment [ 0, L] and no two walkways have positive intersection. However, they can touch by endpoints. Limak needs to decide how to distribute his energy. For example, it might make more sense to stand somewhere ( or to walk slowly) to then have a lot of energy to walk faster. Limak' s initial energy is 0 and it must never drop below that value. At any moment, he can walk with any speed v in the interval [ 0, 2] and it will cost him v energy per second, but he continuously recovers energy with speed of 1 energy per second. So, when he walks with speed v , his energy increases by ( 1- v) . Note that negative value would mean losing energy. In particular, he can walk with speed 1 and this won' t change his energy at all, while walking with speed 0. 77 effectively gives him 0. 23 energy per second. Limak can choose his speed arbitrarily ( any real value in interval [ 0, 2] ) at every moment of time ( including the moments when he is located on non- integer positions) . Everything is continuous ( non- discrete) . What is the fastest time Limak can get from 0 to L ?",
    "input": "The first line contains integers n and L ( 1 \u2264 n \u2264 200 000 , 1 \u2264 L \u2264 10^ 9 ) , the number of walkways and the distance to walk. Each of the next n lines contains integers x_ i , y_ i and real value s_ i ( 0 \u2264 x_ i < y_ i \u2264 L , 0. 1 \u2264 s_ i \u2264 10. 0 ) . The value s_ i is given with at most 9 digits after decimal point. It' s guaranteed, that no two walkways have a positive intersection. The walkways are listed from left to right. That is, y_ i \u2264 x_ i + 1 for 1 \u2264 i \u2264 n - 1 .",
    "output": "Print one real value, the fastest possible time to reach L . Your answer will be considered correct if its absolute or relative error won' t exceed 10^ - 9 .",
    "note": "The drawings show the first two examples. In the first one, there is a walkway from 0 to 2 with speed 2. 0 and Limak wants to get to point 5 . The second example has a walkway from 2 to 4 with speed 0. 91 . In the first example, one of optimal strategies is as follows. Get from 0 to 2 by standing still on the walkway. It moves you with speed 2 so it takes 1 second and you save up 1 energy. Get from 2 to 4 by walking with max speed 2 for next 1 second. It takes 1 second again and the energy drops to 0 . Get from 4 to 5 by walking with speed 1 . It takes 1 second and the energy stays constant at the value 0 . The total time is 1 + 1 + 1 = 3 .",
    "topics": [
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1209H"
  },
  {
    "title": "Into Blocks (easy version)",
    "url": "https://codeforces.com/problemset/problem/1209/G1",
    "history": "This is an easier version of the next problem. In this version, q = 0 . A sequence of integers is called nice if its elements are arranged in blocks like in [ 3, 3, 3, 4, 1, 1] . Formally, if two elements are equal, everything in between must also be equal. Let' s define difficulty of a sequence as a minimum possible number of elements to change to get a nice sequence. However, if you change at least one element of value x to value y , you must also change all other elements of value x into y as well. For example, for [ 3, 3, 1, 3, 2, 1, 2] it isn' t allowed to change first 1 to 3 and second 1 to 2 . You need to leave 1 ' s untouched or change them to the same value. You are given a sequence of integers a_ 1, a_ 2, . . . , a_ n and q updates. Each update is of form \" i x \" \u2014 change a_ i to x . Updates are not independent ( the change stays for the future) . Print the difficulty of the initial sequence and of the sequence after every update.",
    "input": "The first line contains integers n and q ( 1 \u2264 n \u2264 200 000 , q = 0 ) , the length of the sequence and the number of the updates. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 200 000 ) , the initial sequence. Each of the following q lines contains integers i_ t and x_ t ( 1 \u2264 i_ t \u2264 n , 1 \u2264 x_ t \u2264 200 000 ) , the position and the new value for this position.",
    "output": "Print q+ 1 integers, the answer for the initial sequence and the answer after every update.",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1209G1"
  },
  {
    "title": "Rotate Columns (hard version)",
    "url": "https://codeforces.com/problemset/problem/1209/E2",
    "history": "This is a harder version of the problem. The difference is only in constraints. You are given a rectangular n \u00d7 m matrix a . In one move you can choose any column and cyclically shift elements in this column. You can perform this operation as many times as you want ( possibly zero) . You can perform this operation to a column multiple times. After you are done with cyclical shifts, you compute for every row the maximal value in it. Suppose that for i - th row it is equal r_ i . What is the maximal possible value of r_ 1+ r_ 2+ . . . + r_ n ?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 40 ) , the number of test cases in the input. The first line of each test case contains integers n and m ( 1 \u2264 n \u2264 12 , 1 \u2264 m \u2264 2000 ) \u2014 the number of rows and the number of columns in the given matrix a . Each of the following n lines contains m integers, the elements of a ( 1 \u2264 a_ i, j\u2264 10^ 5 ) .",
    "output": "Print t integers: answers for all test cases in the order they are given in the input.",
    "note": "In the first test case you can shift the third column down by one, this way there will be r_ 1 = 5 and r_ 2 = 7 . In the second case you can don' t rotate anything at all, this way there will be r_ 1 = r_ 2 = 10 and r_ 3 = 9 .",
    "topics": [
      "bitmasks",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1209E2"
  },
  {
    "title": "Rotate Columns (easy version)",
    "url": "https://codeforces.com/problemset/problem/1209/E1",
    "history": "This is an easier version of the next problem. The difference is only in constraints. You are given a rectangular n \u00d7 m matrix a . In one move you can choose any column and cyclically shift elements in this column. You can perform this operation as many times as you want ( possibly zero) . You can perform this operation to a column multiple times. After you are done with cyclical shifts, you compute for every row the maximal value in it. Suppose that for i - th row it is equal r_ i . What is the maximal possible value of r_ 1+ r_ 2+ . . . + r_ n ?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 40 ) , the number of test cases in the input. The first line of each test case contains integers n and m ( 1 \u2264 n \u2264 4 , 1 \u2264 m \u2264 100 ) \u2014 the number of rows and the number of columns in the given matrix a . Each of the following n lines contains m integers, the elements of a ( 1 \u2264 a_ i, j\u2264 10^ 5 ) .",
    "output": "Print t integers: answers for all test cases in the order they are given in the input.",
    "note": "In the first test case, you can shift the third column down by one, this way there will be r_ 1 = 5 and r_ 2 = 7 . In the second case you can don' t rotate anything at all, this way there will be r_ 1 = r_ 2 = 10 and r_ 3 = 9 .",
    "topics": [
      "bitmasks",
      "brute force",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1209E1"
  },
  {
    "title": "Paint the Digits",
    "url": "https://codeforces.com/problemset/problem/1209/C",
    "history": "You are given a sequence of n digits d_ 1d_ 2 . . . d_ n . You need to paint all the digits in two colors so that: each digit is painted either in the color 1 or in the color 2 ; if you write in a row from left to right all the digits painted in the color 1 , and then after them all the digits painted in the color 2 , then the resulting sequence of n digits will be non- decreasing ( that is, each next digit will be greater than or equal to the previous digit) . For example, for the sequence d= 914 the only valid coloring is 211 ( paint in the color 1 two last digits, paint in the color 2 the first digit) . But 122 is not a valid coloring ( 9 concatenated with 14 is not a non- decreasing sequence) . It is allowed that either of the two colors is not used at all. Digits painted in the same color are not required to have consecutive positions. Find any of the valid ways to paint the given sequence of digits or determine that it is impossible to do.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases in the input. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of a given sequence of digits. The next line contains a sequence of n digits d_ 1d_ 2 . . . d_ n ( 0 \u2264 d_ i \u2264 9 ) . The digits are written in a row without spaces or any other separators. The sequence can start with 0. It is guaranteed that the sum of the values \u200b\u200bof n for all test cases in the input does not exceed 2\u00b710^ 5 .",
    "output": "Print t lines \u2014 the answers to each of the test cases in the input. If there is a solution for a test case, the corresponding output line should contain any of the valid colorings written as a string of n digits t_ 1t_ 2 . . . t_ n ( 1 \u2264 t_ i \u2264 2 ) , where t_ i is the color the i - th digit is painted in. If there are several feasible solutions, print any of them. If there is no solution, then the corresponding output line should contain a single character ' - ' ( the minus sign) .",
    "note": "In the first test case, d= 040425524644 . The output t= 121212211211 is correct because 0022444 ( painted in 1 ) concatenated with 44556 ( painted in 2 ) is 002244444556 which is a sorted sequence of n given digits.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1209C"
  },
  {
    "title": "Paint the Numbers",
    "url": "https://codeforces.com/problemset/problem/1209/A",
    "history": "You are given a sequence of integers a_ 1, a_ 2, . . . , a_ n . You need to paint elements in colors, so that: If we consider any color, all elements of this color must be divisible by the minimal element of this color. The number of used colors must be minimized. For example, it' s fine to paint elements [ 40, 10, 60] in a single color, because they are all divisible by 10 . You can use any color an arbitrary amount of times ( in particular, it is allowed to use a color only once) . The elements painted in one color do not need to be consecutive. For example, if a= [ 6, 2, 3, 4, 12] then two colors are required: let' s paint 6 , 3 and 12 in the first color ( 6 , 3 and 12 are divisible by 3 ) and paint 2 and 4 in the second color ( 2 and 4 are divisible by 2 ) . For example, if a= [ 10, 7, 15] then 3 colors are required ( we can simply paint each element in an unique color) .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 ) , where n is the length of the given sequence. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) . These numbers can contain duplicates.",
    "output": "Print the minimal number of colors to paint all the given numbers in a valid way.",
    "note": "In the first example, one possible way to paint the elements in 3 colors is: paint in the first color the elements: a_ 1= 10 and a_ 4= 5 , paint in the second color the element a_ 3= 3 , paint in the third color the elements: a_ 2= 2 , a_ 5= 4 and a_ 6= 2 . In the second example, you can use one color to paint all the elements. In the third example, one possible way to paint the elements in 4 colors is: paint in the first color the elements: a_ 4= 4 , a_ 6= 2 and a_ 7= 2 , paint in the second color the elements: a_ 2= 6 , a_ 5= 3 and a_ 8= 3 , paint in the third color the element a_ 3= 5 , paint in the fourth color the element a_ 1= 7 .",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1209A"
  },
  {
    "title": "Polygons",
    "url": "https://codeforces.com/problemset/problem/1208/G",
    "history": "You are given two integers n and k . You need to construct k regular polygons having same circumcircle, with distinct number of sides l between 3 and n . Illustration for the first example. You can rotate them to minimize the total number of distinct points on the circle. Find the minimum number of such points.",
    "input": "The only line of input contains two integers n and k ( 3 \u2264 n \u2264 10^ 6 , 1 \u2264 k \u2264 n- 2 ) , the maximum number of sides of a polygon and the number of polygons to construct, respectively.",
    "output": "Print a single integer \u2014 the minimum number of points required for k polygons.",
    "note": "In the first example, we have n = 6 and k = 2 . So, we have 4 polygons with number of sides 3 , 4 , 5 and 6 to choose from and if we choose the triangle and the hexagon, then we can arrange them as shown in the picture in the statement. Hence, the minimum number of points required on the circle is 6 , which is also the minimum overall possible sets.",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1208G"
  },
  {
    "title": "Bits And Pieces",
    "url": "https://codeforces.com/problemset/problem/1208/F",
    "history": "You are given an array a of n integers. You need to find the maximum value of a_ i | ( a_ j& a_ k ) over all triplets ( i, j, k) such that i < j < k . Here & denotes the bitwise AND operation, and | denotes the bitwise OR operation.",
    "input": "The first line of input contains the integer n ( 3 \u2264 n \u2264 10^ 6 ) , the size of the array a . Next line contains n space separated integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i\u2264 2 \u00b7 10^ 6 ) , representing the elements of the array a .",
    "output": "Output a single integer, the maximum value of the expression given in the statement.",
    "note": "In the first example, the only possible triplet is ( 1, 2, 3) . Hence, the answer is 2 | ( 4 & 6) = 6 . In the second example, there are 4 possible triplets: ( 1, 2, 3) , value of which is 2| ( 8& 4) = 2 . ( 1, 2, 4) , value of which is 2| ( 8& 7) = 2 . ( 1, 3, 4) , value of which is 2| ( 4& 7) = 6 . ( 2, 3, 4) , value of which is 8| ( 4& 7) = 12 . The maximum value hence is 12 .",
    "topics": [
      "bitmasks",
      "dfs and similar",
      "dp",
      "greedy"
    ],
    "id": "1208F"
  },
  {
    "title": "Restore Permutation",
    "url": "https://codeforces.com/problemset/problem/1208/D",
    "history": "An array of integers p_ 1, p_ 2, . . . , p_ n is called a permutation if it contains each number from 1 to n exactly once. For example, the following arrays are permutations: [ 3, 1, 2] , [ 1] , [ 1, 2, 3, 4, 5] and [ 4, 3, 1, 2] . The following arrays are not permutations: [ 2] , [ 1, 1] , [ 2, 3, 4] . There is a hidden permutation of length n . For each index i , you are given s_ i , which equals to the sum of all p_ j such that j < i and p_ j < p_ i . In other words, s_ i is the sum of elements before the i - th element that are smaller than the i - th element. Your task is to restore the permutation.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the permutation. The second line contains n integers s_ 1, s_ 2, . . . , s_ n ( 0 \u2264 s_ i\u2264n( n- 1) / 2 ) . It is guaranteed that the array s corresponds to a valid permutation of length n .",
    "output": "Print n integers p_ 1, p_ 2, . . . , p_ n \u2014 the elements of the restored permutation. We can show that the answer is always unique.",
    "note": "In the first example for each i there is no index j satisfying both conditions, hence s_ i are always 0 . In the second example for i = 2 it happens that j = 1 satisfies the conditions, so s_ 2 = p_ 1 . In the third example for i = 2, 3, 4 only j = 1 satisfies the conditions, so s_ 2 = s_ 3 = s_ 4 = 1 . For i = 5 all j = 1, 2, 3, 4 are possible, so s_ 5 = p_ 1 + p_ 2 + p_ 3 + p_ 4 = 10 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1208D"
  },
  {
    "title": "Gas Pipeline",
    "url": "https://codeforces.com/problemset/problem/1207/C",
    "history": "You are responsible for installing a gas pipeline along a road. Let' s consider the road ( for simplicity) as a segment [ 0, n] on OX axis. The road can have several crossroads, but for simplicity, we' ll denote each crossroad as an interval ( x, x + 1) with integer x . So we can represent the road as a binary string consisting of n characters, where character 0 means that current interval doesn' t contain a crossroad, and 1 means that there is a crossroad. Usually, we can install the pipeline along the road on height of 1 unit with supporting pillars in each integer point ( so, if we are responsible for [ 0, n] road, we must install n + 1 pillars) . But on crossroads we should lift the pipeline up to the height 2 , so the pipeline won' t obstruct the way for cars. We can do so inserting several zig- zag- like lines. Each zig- zag can be represented as a segment [ x, x + 1] with integer x consisting of three parts: 0. 5 units of horizontal pipe + 1 unit of vertical pipe + 0. 5 of horizontal. Note that if pipeline is currently on height 2 , the pillars that support it should also have length equal to 2 units. Each unit of gas pipeline costs us a bourles, and each unit of pillar \u2014 b bourles. So, it' s not always optimal to make the whole pipeline on the height 2 . Find the shape of the pipeline with minimum possible cost and calculate that cost. Note that you must start and finish the pipeline on height 1 and, also, it' s guaranteed that the first and last characters of the input string are equal to 0.",
    "input": "The fist line contains one integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of queries. Next 2 \u00b7 T lines contain independent queries \u2014 one query per two lines. The first line contains three integers n , a , b ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 a \u2264 10^ 8 , 1 \u2264 b \u2264 10^ 8 ) \u2014 the length of the road, the cost of one unit of the pipeline and the cost of one unit of the pillar, respectively. The second line contains binary string s ( | s| = n , s_ i \u2208{ 0, 1} , s_ 1 = s_ n = 0 ) \u2014 the description of the road. It' s guaranteed that the total length of all strings s doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print T integers \u2014 one per query. For each query print the minimum possible cost of the constructed pipeline.",
    "note": "The optimal pipeline for the first query is shown at the picture above. The optimal pipeline for the second query is pictured below: The optimal ( and the only possible) pipeline for the third query is shown below: The optimal pipeline for the fourth query is shown below:",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1207C"
  },
  {
    "title": "Square Filling",
    "url": "https://codeforces.com/problemset/problem/1207/B",
    "history": "You are given two matrices A and B . Each matrix contains exactly n rows and m columns. Each element of A is either 0 or 1 ; each element of B is initially 0 . You may perform some operations with matrix B . During each operation, you choose any submatrix of B having size 2 \u00d7 2 , and replace every element in the chosen submatrix with 1 . In other words, you choose two integers x and y such that 1 \u2264 x < n and 1 \u2264 y < m , and then set B_ x, y , B_ x, y + 1 , B_ x + 1, y and B_ x + 1, y + 1 to 1 . Your goal is to make matrix B equal to matrix A . Two matrices A and B are equal if and only if every element of matrix A is equal to the corresponding element of matrix B . Is it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes B equal to A . Note that you don' t have to minimize the number of operations.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n, m \u2264 50 ) . Then n lines follow, each containing m integers. The j - th integer in the i - th line is A_ i, j . Each integer is either 0 or 1 .",
    "output": "If it is impossible to make B equal to A , print one integer - 1 . Otherwise, print any sequence of operations that transforms B into A in the following format: the first line should contain one integer k \u2014 the number of operations, and then k lines should follow, each line containing two integers x and y for the corresponding operation ( set B_ x, y , B_ x, y + 1 , B_ x + 1, y and B_ x + 1, y + 1 to 1 ) . The condition 0 \u2264 k \u2264 2500 should hold.",
    "note": "The sequence of operations in the first example: 0 0 0 1 1 0 1 1 1 1 1 1 0 0 0 \u2192 1 1 0 \u2192 1 1 1 \u2192 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1207B"
  },
  {
    "title": "There Are Two Types Of Burgers",
    "url": "https://codeforces.com/problemset/problem/1207/A",
    "history": "There are two types of burgers in your restaurant \u2014 hamburgers and chicken burgers! To assemble a hamburger you need two buns and a beef patty. To assemble a chicken burger you need two buns and a chicken cutlet. You have b buns, p beef patties and f chicken cutlets in your restaurant. You can sell one hamburger for h dollars and one chicken burger for c dollars. Calculate the maximum profit you can achieve. You have to answer t independent queries.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2013 the number of queries. The first line of each query contains three integers b , p and f ( 1 \u2264 b, p, f \u2264 100 ) \u2014 the number of buns, beef patties and chicken cutlets in your restaurant. The second line of each query contains two integers h and c ( 1 \u2264 h, c \u2264 100 ) \u2014 the hamburger and chicken burger prices in your restaurant.",
    "output": "For each query print one integer \u2014 the maximum profit you can achieve.",
    "note": "In first query you have to sell two hamburgers and three chicken burgers. Your income is 2 \u00b7 5 + 3 \u00b7 10 = 40 . In second query you have to ell one hamburgers and two chicken burgers. Your income is 1 \u00b7 10 + 2 \u00b7 12 = 34 . In third query you can not create any type of burgers because because you have only one bun. So your income is zero.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1207A"
  },
  {
    "title": "Almost Equal",
    "url": "https://codeforces.com/problemset/problem/1205/A",
    "history": "You are given integer n . You have to arrange numbers from 1 to 2n , using each of them exactly once, on the circle, so that the following condition would be satisfied: For every n consecutive numbers on the circle write their sum on the blackboard. Then any two of written on the blackboard 2n numbers differ not more than by 1 . For example, choose n = 3 . On the left you can see an example of a valid arrangement: 1 + 4 + 5 = 10 , 4 + 5 + 2 = 11 , 5 + 2 + 3 = 10 , 2 + 3 + 6 = 11 , 3 + 6 + 1 = 10 , 6 + 1 + 4 = 11 , any two numbers differ by at most 1 . On the right you can see an invalid arrangement: for example, 5 + 1 + 6 = 12 , and 3 + 2 + 4 = 9 , 9 and 12 differ more than by 1 .",
    "input": "The first and the only line contain one integer n ( 1 \u2264 n \u2264 10^ 5 ) .",
    "output": "If there is no solution, output \" NO\" in the first line. If there is a solution, output \" YES\" in the first line. In the second line output 2n numbers \u2014 numbers from 1 to 2n in the order they will stay in the circle. Each number should appear only once. If there are several solutions, you can output any of them.",
    "note": "Example from the statement is shown for the first example. It can be proved that there is no solution in the second example.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1205A"
  },
  {
    "title": "Kirk and a Binary String (hard version)",
    "url": "https://codeforces.com/problemset/problem/1204/D2",
    "history": "The only difference between easy and hard versions is the length of the string. You can hack this problem if you solve it. But you can hack the previous problem only if you solve both problems. Kirk has a binary string s ( a string which consists of zeroes and ones) of length n and he is asking you to find a binary string t of the same length which satisfies the following conditions: For any l and r ( 1 \u2264 l \u2264 r \u2264 n ) the length of the longest non- decreasing subsequence of the substring s_ ls_ l+ 1. . . s_ r is equal to the length of the longest non- decreasing subsequence of the substring t_ lt_ l+ 1. . . t_ r ; The number of zeroes in t is the maximum possible. A non- decreasing subsequence of a string p is a sequence of indices i_ 1, i_ 2, . . . , i_ k such that i_ 1 < i_ 2 < . . . < i_ k and p_ i_ 1\u2264 p_ i_ 2\u2264. . . \u2264 p_ i_ k . The length of the subsequence is k . If there are multiple substrings which satisfy the conditions, output any.",
    "input": "The first line contains a binary string of length not more than 10^ 5 .",
    "output": "Output a binary string which satisfied the above conditions. If there are many such strings, output any of them.",
    "note": "In the first example: For the substrings of the length 1 the length of the longest non- decreasing subsequnce is 1 ; For l = 1, r = 2 the longest non- decreasing subsequnce of the substring s_ 1s_ 2 is 11 and the longest non- decreasing subsequnce of the substring t_ 1t_ 2 is 01 ; For l = 1, r = 3 the longest non- decreasing subsequnce of the substring s_ 1s_ 3 is 11 and the longest non- decreasing subsequnce of the substring t_ 1t_ 3 is 00 ; For l = 2, r = 3 the longest non- decreasing subsequnce of the substring s_ 2s_ 3 is 1 and the longest non- decreasing subsequnce of the substring t_ 2t_ 3 is 1 ; The second example is similar to the first one.",
    "topics": [
      "data structures",
      "greedy",
      "math",
      "strings"
    ],
    "id": "1204D2"
  },
  {
    "title": "Kirk and a Binary String (easy version)",
    "url": "https://codeforces.com/problemset/problem/1204/D1",
    "history": "The only difference between easy and hard versions is the length of the string. You can hack this problem only if you solve both problems. Kirk has a binary string s ( a string which consists of zeroes and ones) of length n and he is asking you to find a binary string t of the same length which satisfies the following conditions: For any l and r ( 1 \u2264 l \u2264 r \u2264 n ) the length of the longest non- decreasing subsequence of the substring s_ ls_ l+ 1. . . s_ r is equal to the length of the longest non- decreasing subsequence of the substring t_ lt_ l+ 1. . . t_ r ; The number of zeroes in t is the maximum possible. A non- decreasing subsequence of a string p is a sequence of indices i_ 1, i_ 2, . . . , i_ k such that i_ 1 < i_ 2 < . . . < i_ k and p_ i_ 1\u2264 p_ i_ 2\u2264. . . \u2264 p_ i_ k . The length of the subsequence is k . If there are multiple substrings which satisfy the conditions, output any.",
    "input": "The first line contains a binary string of length not more than 2 000 .",
    "output": "Output a binary string which satisfied the above conditions. If there are many such strings, output any of them.",
    "note": "In the first example: For the substrings of the length 1 the length of the longest non- decreasing subsequnce is 1 ; For l = 1, r = 2 the longest non- decreasing subsequnce of the substring s_ 1s_ 2 is 11 and the longest non- decreasing subsequnce of the substring t_ 1t_ 2 is 01 ; For l = 1, r = 3 the longest non- decreasing subsequnce of the substring s_ 1s_ 3 is 11 and the longest non- decreasing subsequnce of the substring t_ 1t_ 3 is 00 ; For l = 2, r = 3 the longest non- decreasing subsequnce of the substring s_ 2s_ 3 is 1 and the longest non- decreasing subsequnce of the substring t_ 2t_ 3 is 1 ; The second example is similar to the first one.",
    "topics": [
      "brute force",
      "greedy",
      "strings"
    ],
    "id": "1204D1"
  },
  {
    "title": "Anna, Svyatoslav and Maps",
    "url": "https://codeforces.com/problemset/problem/1204/C",
    "history": "The main characters have been omitted to be short. You are given a directed unweighted graph without loops with n vertexes and a path in it ( that path is not necessary simple) given by a sequence p_ 1, p_ 2, . . . , p_ m of m vertexes; for each 1 \u2264 i < m there is an arc from p_ i to p_ i+ 1 . Define the sequence v_ 1, v_ 2, . . . , v_ k of k vertexes as good, if v is a subsequence of p , v_ 1 = p_ 1 , v_ k = p_ m , and p is one of the shortest paths passing through the vertexes v_ 1 , . . . , v_ k in that order. A sequence a is a subsequence of a sequence b if a can be obtained from b by deletion of several ( possibly, zero or all) elements. It is obvious that the sequence p is good but your task is to find the shortest good subsequence. If there are multiple shortest good subsequences, output any of them.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of vertexes in a graph. The next n lines define the graph by an adjacency matrix: the j - th character in the i - st line is equal to 1 if there is an arc from vertex i to the vertex j else it is equal to 0 . It is guaranteed that the graph doesn' t contain loops. The next line contains a single integer m ( 2 \u2264 m \u2264 10^ 6 ) \u2014 the number of vertexes in the path. The next line contains m integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 n ) \u2014 the sequence of vertexes in the path. It is guaranteed that for any 1 \u2264 i < m there is an arc from p_ i to p_ i+ 1 .",
    "output": "In the first line output a single integer k ( 2 \u2264 k \u2264 m ) \u2014 the length of the shortest good subsequence. In the second line output k integers v_ 1 , . . . , v_ k ( 1 \u2264 v_ i \u2264 n ) \u2014 the vertexes in the subsequence. If there are multiple shortest subsequences, print any. Any two consecutive numbers should be distinct.",
    "note": "Below you can see the graph from the first example: The given path is passing through vertexes 1 , 2 , 3 , 4 . The sequence 1- 2- 4 is good because it is the subsequence of the given path, its first and the last elements are equal to the first and the last elements of the given path respectively, and the shortest path passing through vertexes 1 , 2 and 4 in that order is 1- 2- 3- 4 . Note that subsequences 1- 4 and 1- 3- 4 aren' t good because in both cases the shortest path passing through the vertexes of these sequences is 1- 3- 4 . In the third example, the graph is full so any sequence of vertexes in which any two consecutive elements are distinct defines a path consisting of the same number of vertexes. In the fourth example, the paths 1- 2- 4 and 1- 3- 4 are the shortest paths passing through the vertexes 1 and 4 .",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1204C"
  },
  {
    "title": "Mislove Has Lost an Array",
    "url": "https://codeforces.com/problemset/problem/1204/B",
    "history": "Mislove had an array a_ 1 , a_ 2 , \u22ef , a_ n of n positive integers, but he has lost it. He only remembers the following facts about it: The number of different numbers in the array is not less than l and is not greater than r ; For each array' s element a_ i either a_ i = 1 or a_ i is even and there is a number a_ i2 in the array. For example, if n= 5 , l= 2 , r= 3 then an array could be [ 1, 2, 2, 4, 4] or [ 1, 1, 1, 1, 2] ; but it couldn' t be [ 1, 2, 2, 4, 8] because this array contains 4 different numbers; it couldn' t be [ 1, 2, 2, 3, 3] because 3 is odd and isn' t equal to 1 ; and it couldn' t be [ 1, 1, 2, 2, 16] because there is a number 16 in the array but there isn' t a number 16/ 2 = 8 . According to these facts, he is asking you to count the minimal and the maximal possible sums of all elements in an array.",
    "input": "The only input line contains three integers n , l and r ( 1 \u2264 n \u2264 1 000 , 1 \u2264 l \u2264 r \u2264min( n, 20) ) \u2014 an array' s size, the minimal number and the maximal number of distinct elements in an array.",
    "output": "Output two numbers \u2014 the minimal and the maximal possible sums of all elements in an array.",
    "note": "In the first example, an array could be the one of the following: [ 1, 1, 1, 2] , [ 1, 1, 2, 2] or [ 1, 2, 2, 2] . In the first case the minimal sum is reached and in the last case the maximal sum is reached. In the second example, the minimal sum is reached at the array [ 1, 1, 1, 1, 1] , and the maximal one is reached at the array [ 1, 2, 4, 8, 16] .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1204B"
  },
  {
    "title": "Complete the Projects (hard version)",
    "url": "https://codeforces.com/problemset/problem/1203/F2",
    "history": "The only difference between easy and hard versions is that you should complete all the projects in easy version but this is not necessary in hard version. Polycarp is a very famous freelancer. His current rating is r units. Some very rich customers asked him to complete some projects for their companies. To complete the i - th project, Polycarp needs to have at least a_ i units of rating; after he completes this project, his rating will change by b_ i ( his rating will increase or decrease by b_ i ) ( b_ i can be positive or negative) . Polycarp' s rating should not fall below zero because then people won' t trust such a low rated freelancer. Polycarp can choose the order in which he completes projects. Furthermore, he can even skip some projects altogether. To gain more experience ( and money, of course) Polycarp wants to choose the subset of projects having maximum possible size and the order in which he will complete them, so he has enough rating before starting each project, and has non- negative rating after completing each project. Your task is to calculate the maximum possible size of such subset of projects.",
    "input": "The first line of the input contains two integers n and r ( 1 \u2264 n \u2264 100, 1 \u2264 r \u2264 30000 ) \u2014 the number of projects and the initial rating of Polycarp, respectively. The next n lines contain projects, one per line. The i - th project is represented as a pair of integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 30000 , - 300 \u2264 b_ i \u2264 300 ) \u2014 the rating required to complete the i - th project and the rating change after the project completion.",
    "output": "Print one integer \u2014 the size of the maximum possible subset ( possibly, empty) of projects Polycarp can choose.",
    "note": "",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1203F2"
  },
  {
    "title": "Complete the Projects (easy version)",
    "url": "https://codeforces.com/problemset/problem/1203/F1",
    "history": "The only difference between easy and hard versions is that you should complete all the projects in easy version but this is not necessary in hard version. Polycarp is a very famous freelancer. His current rating is r units. Some very rich customers asked him to complete some projects for their companies. To complete the i - th project, Polycarp needs to have at least a_ i units of rating; after he completes this project, his rating will change by b_ i ( his rating will increase or decrease by b_ i ) ( b_ i can be positive or negative) . Polycarp' s rating should not fall below zero because then people won' t trust such a low rated freelancer. Is it possible to complete all the projects? Formally, write a program to check if such an order of the projects exists, that Polycarp has enough rating before starting each project, and he has non- negative rating after completing each project. In other words, you have to check that there exists such an order of projects in which Polycarp will complete them, so he has enough rating before starting each project, and has non- negative rating after completing each project.",
    "input": "The first line of the input contains two integers n and r ( 1 \u2264 n \u2264 100, 1 \u2264 r \u2264 30000 ) \u2014 the number of projects and the initial rating of Polycarp, respectively. The next n lines contain projects, one per line. The i - th project is represented as a pair of integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 30000 , - 300 \u2264 b_ i \u2264 300 ) \u2014 the rating required to complete the i - th project and the rating change after the project completion.",
    "output": "Print \" YES\" or \" NO\" .",
    "note": "In the first example, the possible order is: 1, 2, 3 . In the second example, the possible order is: 2, 3, 1 . In the third example, the possible order is: 3, 1, 4, 2 .",
    "topics": [
      "greedy"
    ],
    "id": "1203F1"
  },
  {
    "title": "Boxers",
    "url": "https://codeforces.com/problemset/problem/1203/E",
    "history": "There are n boxers, the weight of the i - th boxer is a_ i . Each of them can change the weight by no more than 1 before the competition ( the weight cannot become equal to zero, that is, it must remain positive) . Weight is always an integer number. It is necessary to choose the largest boxing team in terms of the number of people, that all the boxers' weights in the team are different ( i. e. unique) . Write a program that for given current values \u200b a_ i will find the maximum possible number of boxers in a team. It is possible that after some change the weight of some boxer is 150001 ( but no more) .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 150000 ) \u2014 the number of boxers. The next line contains n integers a_ 1, a_ 2, . . . , a_ n , where a_ i ( 1 \u2264 a_ i \u2264 150000 ) is the weight of the i - th boxer.",
    "output": "Print a single integer \u2014 the maximum possible number of people in a team.",
    "note": "In the first example, boxers should not change their weights \u2014 you can just make a team out of all of them. In the second example, one boxer with a weight of 1 can be increased by one ( get the weight of 2 ) , one boxer with a weight of 4 can be reduced by one, and the other can be increased by one ( resulting the boxers with a weight of 3 and 5 , respectively) . Thus, you can get a team consisting of boxers with weights of 5, 4, 3, 2, 1 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1203E"
  },
  {
    "title": "Remove the Substring (hard version)",
    "url": "https://codeforces.com/problemset/problem/1203/D2",
    "history": "The only difference between easy and hard versions is the length of the string. You are given a string s and a string t , both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some ( possibly, zero) number of characters ( not necessary contiguous) from s without changing order of remaining characters ( in other words, it is guaranteed that t is a subsequence of s ) . For example, the strings \" test\" , \" tst\" , \" tt\" , \" et\" and \" \" are subsequences of the string \" test\" . But the strings \" tset\" , \" se\" , \" contest\" are not subsequences of the string \" test\" . You want to remove some substring ( contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s . If you want to remove the substring s[ l; r] then the string s will be transformed to s_ 1 s_ 2 . . . s_ l- 1 s_ r+ 1 s_ r+ 2. . . s_ | s| - 1 s_ | s| ( where | s| is the length of s ) . Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s .",
    "input": "The first line of the input contains one string s consisting of at least 1 and at most 2 \u00b7 10^ 5 lowercase Latin letters. The second line of the input contains one string t consisting of at least 1 and at most 2 \u00b7 10^ 5 lowercase Latin letters. It is guaranteed that t is a subsequence of s .",
    "output": "Print one integer \u2014 the maximum possible length of the substring you can remove so that t is still a subsequence of s .",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1203D2"
  },
  {
    "title": "Remove the Substring (easy version)",
    "url": "https://codeforces.com/problemset/problem/1203/D1",
    "history": "The only difference between easy and hard versions is the length of the string. You are given a string s and a string t , both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some ( possibly, zero) number of characters ( not necessary contiguous) from s without changing order of remaining characters ( in other words, it is guaranteed that t is a subsequence of s ) . For example, the strings \" test\" , \" tst\" , \" tt\" , \" et\" and \" \" are subsequences of the string \" test\" . But the strings \" tset\" , \" se\" , \" contest\" are not subsequences of the string \" test\" . You want to remove some substring ( contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s . If you want to remove the substring s[ l; r] then the string s will be transformed to s_ 1 s_ 2 . . . s_ l- 1 s_ r+ 1 s_ r+ 2. . . s_ | s| - 1 s_ | s| ( where | s| is the length of s ) . Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s .",
    "input": "The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters. The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters. It is guaranteed that t is a subsequence of s .",
    "output": "Print one integer \u2014 the maximum possible length of the substring you can remove so that t is still a subsequence of s .",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1203D1"
  },
  {
    "title": "Equal Rectangles",
    "url": "https://codeforces.com/problemset/problem/1203/B",
    "history": "You are given 4n sticks, the length of the i - th stick is a_ i . You have to create n rectangles, each rectangle will consist of exactly 4 sticks from the given set. The rectangle consists of four sides, opposite sides should have equal length and all angles in it should be right. Note that each stick can be used in only one rectangle. Each stick should be used as a side, you cannot break the stick or use it not to the full length. You want to all rectangles to have equal area. The area of the rectangle with sides a and b is a \u00b7 b . Your task is to say if it is possible to create exactly n rectangles of equal area or not. You have to answer q independent queries.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 500 ) \u2014 the number of queries. Then q queries follow. The first line of the query contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of rectangles. The second line of the query contains 4n integers a_ 1, a_ 2, . . . , a_ 4n ( 1 \u2264 a_ i \u2264 10^ 4 ) , where a_ i is the length of the i - th stick.",
    "output": "For each query print the answer to it. If it is impossible to create exactly n rectangles of equal area using given sticks, print \" NO\" . Otherwise print \" YES\" .",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1203B"
  },
  {
    "title": "You Are Given a WASD-string...",
    "url": "https://codeforces.com/problemset/problem/1202/C",
    "history": "You have a string s \u2014 a sequence of commands for your toy robot. The robot is placed in some cell of a rectangular grid. He can perform four commands: ' W' \u2014 move one cell up; ' S' \u2014 move one cell down; ' A' \u2014 move one cell left; ' D' \u2014 move one cell right. Let Grid( s) be the grid of minimum possible area such that there is a position in the grid where you can place the robot in such a way that it will not fall from the grid while running the sequence of commands s . For example, if s = DSAWWAW then Grid( s) is the 4 \u00d7 3 grid: you can place the robot in the cell ( 3, 2) ; the robot performs the command ' D' and moves to ( 3, 3) ; the robot performs the command ' S' and moves to ( 4, 3) ; the robot performs the command ' A' and moves to ( 4, 2) ; the robot performs the command ' W' and moves to ( 3, 2) ; the robot performs the command ' W' and moves to ( 2, 2) ; the robot performs the command ' A' and moves to ( 2, 1) ; the robot performs the command ' W' and moves to ( 1, 1) . You have 4 extra letters: one ' W' , one ' A' , one ' S' , one ' D' . You' d like to insert at most one of these letters in any position of sequence s to minimize the area of Grid( s) . What is the minimum area of Grid( s) you can achieve?",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of queries. Next T lines contain queries: one per line. This line contains single string s ( 1 \u2264 | s| \u2264 2 \u00b7 10^ 5 , s_ i \u2208{ W, A, S, D} ) \u2014 the sequence of commands. It' s guaranteed that the total length of s over all queries doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print T integers: one per query. For each query print the minimum area of Grid( s) you can achieve.",
    "note": "In the first query you have to get string DSAWWDAW . In second and third queries you can not decrease the area of Grid( s) .",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "math",
      "strings"
    ],
    "id": "1202C"
  },
  {
    "title": "You Are Given Two Binary Strings...",
    "url": "https://codeforces.com/problemset/problem/1202/A",
    "history": "You are given two binary strings x and y , which are binary representations of some two integers ( let' s denote these integers as f( x) and f( y) ) . You can choose any integer k \u2265 0 , calculate the expression s_ k = f( x) + f( y) \u00b7 2^ k and write the binary representation of s_ k in reverse order ( let' s denote it as rev_ k ) . For example, let x = 1010 and y = 11 ; you' ve chosen k = 1 and, since 2^ 1 = 10_ 2 , so s_ k = 1010_ 2 + 11_ 2 \u00b7 10_ 2 = 10000_ 2 and rev_ k = 00001 . For given x and y , you need to choose such k that rev_ k is lexicographically minimal ( read notes if you don' t know what does \" lexicographically\" means) . It' s guaranteed that, with given constraints, k exists and is finite.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of queries. Next 2T lines contain a description of queries: two lines per query. The first line contains one binary string x , consisting of no more than 10^ 5 characters. Each character is either 0 or 1. The second line contains one binary string y , consisting of no more than 10^ 5 characters. Each character is either 0 or 1. It' s guaranteed, that 1 \u2264 f( y) \u2264 f( x) ( where f( x) is the integer represented by x , and f( y) is the integer represented by y ) , both representations don' t have any leading zeroes, the total length of x over all queries doesn' t exceed 10^ 5 , and the total length of y over all queries doesn' t exceed 10^ 5 .",
    "output": "Print T integers ( one per query) . For each query print such k that rev_ k is lexicographically minimal.",
    "note": "The first query was described in the legend. In the second query, it' s optimal to choose k = 3 . The 2^ 3 = 1000_ 2 so s_ 3 = 10001_ 2 + 110_ 2 \u00b7 1000_ 2 = 10001 + 110000 = 1000001 and rev_ 3 = 1000001 . For example, if k = 0 , then s_ 0 = 10111 and rev_ 0 = 11101 , but rev_ 3 = 1000001 is lexicographically smaller than rev_ 0 = 11101 . In the third query s_ 0 = 10 and rev_ 0 = 01 . For example, s_ 2 = 101 and rev_ 2 = 101 . And 01 is lexicographically smaller than 101 . The quote from Wikipedia: \" To determine which of two strings of characters comes when arranging in lexicographical order, their first letters are compared. If they differ, then the string whose first letter comes earlier in the alphabet comes before the other string. If the first letters are the same, then the second letters are compared, and so on. If a position is reached where one string has no more letters to compare while the other does, then the first ( shorter) string is deemed to come first in alphabetical order. \"",
    "topics": [
      "bitmasks",
      "greedy"
    ],
    "id": "1202A"
  },
  {
    "title": "Treasure Hunting",
    "url": "https://codeforces.com/problemset/problem/1201/D",
    "history": "You are on the island which can be represented as a n \u00d7 m table. The rows are numbered from 1 to n and the columns are numbered from 1 to m . There are k treasures on the island, the i - th of them is located at the position ( r_ i, c_ i) . Initially you stand at the lower left corner of the island, at the position ( 1, 1) . If at any moment you are at the cell with a treasure, you can pick it up without any extra time. In one move you can move up ( from ( r, c) to ( r+ 1, c) ) , left ( from ( r, c) to ( r, c- 1) ) , or right ( from position ( r, c) to ( r, c+ 1) ) . Because of the traps, you can' t move down. However, moving up is also risky. You can move up only if you are in a safe column. There are q safe columns: b_ 1, b_ 2, . . . , b_ q . You want to collect all the treasures as fast as possible. Count the minimum number of moves required to collect all the treasures.",
    "input": "The first line contains integers n , m , k and q ( 2 \u2264 n, m, k, q \u2264 2 \u00b7 10^ 5 , q \u2264 m ) \u2014 the number of rows, the number of columns, the number of treasures in the island and the number of safe columns. Each of the next k lines contains two integers r_ i, c_ i , ( 1 \u2264 r_ i \u2264 n , 1 \u2264 c_ i \u2264 m ) \u2014 the coordinates of the cell with a treasure. All treasures are located in distinct cells. The last line contains q distinct integers b_ 1, b_ 2, . . . , b_ q ( 1 \u2264 b_ i \u2264 m ) \u2014 the indices of safe columns.",
    "output": "Print the minimum number of moves required to collect all the treasures.",
    "note": "In the first example you should use the second column to go up, collecting in each row treasures from the first column. In the second example, it is optimal to use the first column to go up. In the third example, it is optimal to collect the treasure at cell ( 1; 6) , go up to row 2 at column 6 , then collect the treasure at cell ( 2; 2) , go up to the top row at column 1 and collect the last treasure at cell ( 3; 4) . That' s a total of 15 moves.",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1201D"
  },
  {
    "title": "Maximum Median",
    "url": "https://codeforces.com/problemset/problem/1201/C",
    "history": "You are given an array a of n integers, where n is odd. You can make the following operation with it: Choose one of the elements of the array ( for example a_ i ) and increase it by 1 ( that is, replace it with a_ i + 1 ) . You want to make the median of the array the largest possible using at most k operations. The median of the odd- sized array is the middle element after the array is sorted in non- decreasing order. For example, the median of the array [ 1, 5, 2, 3, 5] is 3 .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , n is odd, 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of elements in the array and the largest number of operations you can make. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print a single integer \u2014 the maximum possible median after the operations.",
    "note": "In the first example, you can increase the second element twice. Than array will be [ 1, 5, 5] and it' s median is 5 . In the second example, it is optimal to increase the second number and than increase third and fifth. This way the answer is 3 . In the third example, you can make four operations: increase first, fourth, sixth, seventh element. This way the array will be [ 5, 1, 2, 5, 3, 5, 5] and the median will be 5 .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1201C"
  },
  {
    "title": "Zero Array",
    "url": "https://codeforces.com/problemset/problem/1201/B",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n . In one operation you can choose two elements a_ i and a_ j ( i j ) and decrease each of them by one. You need to check whether it is possible to make all the elements equal to zero or not.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the size of the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array.",
    "output": "Print \" YES\" if it is possible to make all elements zero, otherwise print \" NO\" .",
    "note": "In the first example, you can make all elements equal to zero in 3 operations: Decrease a_ 1 and a_ 2 , Decrease a_ 3 and a_ 4 , Decrease a_ 3 and a_ 4 In the second example, one can show that it is impossible to make all elements equal to zero.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1201B"
  },
  {
    "title": "Block Adventure",
    "url": "https://codeforces.com/problemset/problem/1200/B",
    "history": "Gildong is playing a video game called Block Adventure. In Block Adventure, there are n columns of blocks in a row, and the columns are numbered from 1 to n . All blocks have equal heights. The height of the i - th column is represented as h_ i , which is the number of blocks stacked in the i - th column. Gildong plays the game as a character that can stand only on the top of the columns. At the beginning, the character is standing on the top of the 1 - st column. The goal of the game is to move the character to the top of the n - th column. The character also has a bag that can hold infinitely many blocks. When the character is on the top of the i - th column, Gildong can take one of the following three actions as many times as he wants: if there is at least one block on the column, remove one block from the top of the i - th column and put it in the bag; if there is at least one block in the bag, take one block out of the bag and place it on the top of the i - th column; if i < n and | h_ i - h_ i+ 1| \u2264 k , move the character to the top of the i+ 1 - st column. k is a non- negative integer given at the beginning of the game. Note that it is only possible to move to the next column. In actions of the first two types the character remains in the i - th column, and the value h_ i changes. The character initially has m blocks in the bag. Gildong wants to know if it is possible to win the game. Help Gildong find the answer to his question.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 1000 ) . Description of the test cases follows. The first line of each test case contains three integers n , m , and k ( 1 \u2264 n \u2264 100 , 0 \u2264 m \u2264 10^ 6 , 0 \u2264 k \u2264 10^ 6 ) \u2014 the number of columns in the game, the number of blocks in the character' s bag at the beginning, and the non- negative integer k described in the statement. The second line of each test case contains n integers. The i - th integer is h_ i ( 0 \u2264 h_ i \u2264 10^ 6 ) , the initial height of the i - th column.",
    "output": "For each test case, print \" YES\" if it is possible to win the game. Otherwise, print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first case, Gildong can take one block from the 1 - st column, move to the 2 - nd column, put the block on the 2 - nd column, then move to the 3 - rd column. In the second case, Gildong has to put the block in his bag on the 1 - st column to get to the 2 - nd column. But it is impossible to get to the 3 - rd column because | h_ 2 - h_ 3| = 3 > k and there is no way to decrease the gap. In the fifth case, the character is already on the n - th column from the start so the game is won instantly.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1200B"
  },
  {
    "title": "GCD Groups 2",
    "url": "https://codeforces.com/problemset/problem/1198/F",
    "history": "You are given an array of n integers. You need to split all integers into two groups so that the GCD of all integers in the first group is equal to one and the GCD of all integers in the second group is equal to one. The GCD of a group of integers is the largest non- negative integer that divides all the integers in the group. Both groups have to be non- empty.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array.",
    "output": "In the first line print \" YES\" ( without quotes) , if it is possible to split the integers into two groups as required, and \" NO\" ( without quotes) otherwise. If it is possible to split the integers, in the second line print n integers, where the i - th integer is equal to 1 if the integer a_ i should be in the first group, and 2 otherwise. If there are multiple solutions, print any.",
    "note": "",
    "topics": [
      "greedy",
      "number theory",
      "probabilities"
    ],
    "id": "1198F"
  },
  {
    "title": "Matching vs  Independent Set",
    "url": "https://codeforces.com/problemset/problem/1198/C",
    "history": "You are given a graph with 3 \u00b7 n vertices and m edges. You are to find a matching of n edges, or an independent set of n vertices. A set of edges is called a matching if no two edges share an endpoint. A set of vertices is called an independent set if no two vertices are connected with an edge.",
    "input": "The first line contains a single integer T \u2265 1 \u2014 the number of graphs you need to process. The description of T graphs follows. The first line of description of a single graph contains two integers n and m , where 3 \u00b7 n is the number of vertices, and m is the number of edges in the graph ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264 5 \u00b7 10^ 5 ) . Each of the next m lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 3 \u00b7 n ) , meaning that there is an edge between vertices v_ i and u_ i . It is guaranteed that there are no self- loops and no multiple edges in the graph. It is guaranteed that the sum of all n over all graphs in a single test does not exceed 10^ 5 , and the sum of all m over all graphs in a single test does not exceed 5 \u00b7 10^ 5 .",
    "output": "Print your answer for each of the T graphs. Output your answer for a single graph in the following format. If you found a matching of size n , on the first line print \" Matching\" ( without quotes) , and on the second line print n integers \u2014 the indices of the edges in the matching. The edges are numbered from 1 to m in the input order. If you found an independent set of size n , on the first line print \" IndSet\" ( without quotes) , and on the second line print n integers \u2014 the indices of the vertices in the independent set. If there is no matching and no independent set of the specified size, print \" Impossible\" ( without quotes) . You can print edges and vertices in any order. If there are several solutions, print any. In particular, if there are both a matching of size n , and an independent set of size n , then you should print exactly one of such matchings or exactly one of such independent sets.",
    "note": "The first two graphs are same, and there are both a matching of size 1 and an independent set of size 1. Any of these matchings and independent sets is a correct answer. The third graph does not have a matching of size 2, however, there is an independent set of size 2. Moreover, there is an independent set of size 5: 2 3 4 5 6. However such answer is not correct, because you are asked to find an independent set ( or matching) of size exactly n . The fourth graph does not have an independent set of size 2, but there is a matching of size 2.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1198C"
  },
  {
    "title": "Yet Another Subarray Problem",
    "url": "https://codeforces.com/problemset/problem/1197/D",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n and two integers m and k . You can choose some subarray a_ l, a_ l+ 1, . . . , a_ r- 1, a_ r . The cost of subarray a_ l, a_ l+ 1, . . . , a_ r- 1, a_ r is equal to \u2211_ i= l^ r a_ i - k \u2308r - l + 1/ m\u2309 , where \u2308 x \u2309 is the least integer greater than or equal to x . The cost of empty subarray is equal to zero. For example, if m = 3 , k = 10 and a = [ 2, - 4, 15, - 3, 4, 8, 3] , then the cost of some subarrays are: a_ 3 . . . a_ 3: 15 - k \u23081/ 3\u2309 = 15 - 10 = 5 ; a_ 3 . . . a_ 4: ( 15 - 3) - k \u23082/ 3\u2309 = 12 - 10 = 2 ; a_ 3 . . . a_ 5: ( 15 - 3 + 4) - k \u23083/ 3\u2309 = 16 - 10 = 6 ; a_ 3 . . . a_ 6: ( 15 - 3 + 4 + 8) - k \u23084/ 3\u2309 = 24 - 20 = 4 ; a_ 3 . . . a_ 7: ( 15 - 3 + 4 + 8 + 3) - k \u23085/ 3\u2309 = 27 - 20 = 7 . Your task is to find the maximum cost of some subarray ( possibly empty) of array a .",
    "input": "The first line contains three integers n , m , and k ( 1 \u2264 n \u2264 3 \u00b7 10^ 5, 1 \u2264 m \u2264 10, 1 \u2264 k \u2264 10^ 9 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print the maximum cost of some subarray of array a .",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1197D"
  },
  {
    "title": "Array Splitting",
    "url": "https://codeforces.com/problemset/problem/1197/C",
    "history": "You are given a sorted array a_ 1, a_ 2, . . . , a_ n ( for each index i > 1 condition a_ i \u2265 a_ i- 1 holds) and an integer k . You are asked to divide this array into k non- empty consecutive subarrays. Every element in the array should be included in exactly one subarray. Let max( i) be equal to the maximum in the i - th subarray, and min( i) be equal to the minimum in the i - th subarray. The cost of division is equal to \u2211_ i= 1^ k ( max( i) - min( i) ) . For example, if a = [ 2, 4, 5, 5, 8, 11, 19] and we divide it into 3 subarrays in the following way: [ 2, 4] , [ 5, 5] , [ 8, 11, 19] , then the cost of division is equal to ( 4 - 2) + ( 5 - 5) + ( 19 - 8) = 13 . Calculate the minimum cost you can obtain by dividing the array a into k non- empty consecutive subarrays.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 , a_ i \u2265 a_ i- 1 ) .",
    "output": "Print the minimum cost you can obtain by dividing the array a into k nonempty consecutive subarrays.",
    "note": "In the first test we can divide array a in the following way: [ 4, 8, 15, 16] , [ 23] , [ 42] .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1197C"
  },
  {
    "title": "Pillars",
    "url": "https://codeforces.com/problemset/problem/1197/B",
    "history": "There are n pillars aligned in a row and numbered from 1 to n . Initially each pillar contains exactly one disk. The i - th pillar contains a disk having radius a_ i . You can move these disks from one pillar to another. You can take a disk from pillar i and place it on top of pillar j if all these conditions are met: there is no other pillar between pillars i and j . Formally, it means that | i - j| = 1 ; pillar i contains exactly one disk; either pillar j contains no disks, or the topmost disk on pillar j has radius strictly greater than the radius of the disk you move. When you place a disk on a pillar that already has some disks on it, you put the new disk on top of previously placed disks, so the new disk will be used to check the third condition if you try to place another disk on the same pillar. You may take any disk and place it on other pillar any number of times, provided that every time you do it, all three aforementioned conditions are met. Now you wonder, is it possible to place all n disks on the same pillar simultaneously?",
    "input": "The first line contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of pillars. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ i ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the radius of the disk initially placed on the i - th pillar. All numbers a_ i are distinct.",
    "output": "Print YES if it is possible to place all the disks on the same pillar simultaneously, and NO otherwise. You may print each letter in any case ( YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer) .",
    "note": "In the first case it is possible to place all disks on pillar 3 using the following sequence of actions: take the disk with radius 3 from pillar 2 and place it on top of pillar 3 ; take the disk with radius 1 from pillar 1 and place it on top of pillar 2 ; take the disk with radius 2 from pillar 4 and place it on top of pillar 3 ; take the disk with radius 1 from pillar 2 and place it on top of pillar 3 .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1197B"
  },
  {
    "title": "DIY Wooden Ladder",
    "url": "https://codeforces.com/problemset/problem/1197/A",
    "history": "Let' s denote a k - step ladder as the following structure: exactly k + 2 wooden planks, of which two planks of length at least k+ 1 \u2014 the base of the ladder; k planks of length at least 1 \u2014 the steps of the ladder; Note that neither the base planks, nor the steps planks are required to be equal. For example, ladders 1 and 3 are correct 2 - step ladders and ladder 2 is a correct 1 - step ladder. On the first picture the lengths of planks are [ 3, 3] for the base and [ 1] for the step. On the second picture lengths are [ 3, 3] for the base and [ 2] for the step. On the third picture lengths are [ 3, 4] for the base and [ 2, 3] for the steps. You have n planks. The length of the i - th planks is a_ i . You don' t have a saw, so you can' t cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \" ladder\" from the planks. The question is: what is the maximum number k such that you can choose some subset of the given planks and assemble a k - step ladder using them?",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of queries. The queries are independent. Each query consists of two lines. The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of planks you have. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 5 ) \u2014 the lengths of the corresponding planks. It' s guaranteed that the total number of planks from all queries doesn' t exceed 10^ 5 .",
    "output": "Print T integers \u2014 one per query. The i - th integer is the maximum number k , such that you can choose some subset of the planks given in the i - th query and assemble a k - step ladder using them. Print 0 if you can' t make even 1 - step ladder from the given set of planks.",
    "note": "Examples for the queries 1- 3 are shown at the image in the legend section. The Russian meme to express the quality of the ladders:",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1197A"
  },
  {
    "title": "Drinks Choosing",
    "url": "https://codeforces.com/problemset/problem/1195/A",
    "history": "Old timers of Summer Informatics School can remember previous camps in which each student was given a drink of his choice on the vechorka ( late- evening meal) . Or may be the story was more complicated? There are n students living in a building, and for each of them the favorite drink a_ i is known. So you know n integers a_ 1, a_ 2, . . . , a_ n , where a_ i ( 1 \u2264 a_ i \u2264 k ) is the type of the favorite drink of the i - th student. The drink types are numbered from 1 to k . There are infinite number of drink sets. Each set consists of exactly two portions of the same drink. In other words, there are k types of drink sets, the j - th type contains two portions of the drink j . The available number of sets of each of the k types is infinite. You know that students will receive the minimum possible number of sets to give all students exactly one drink. Obviously, the number of sets will be exactly \u2308n/ 2\u2309 , where \u2308 x \u2309 is x rounded up. After students receive the sets, they will distribute their portions by their choice: each student will get exactly one portion. Note, that if n is odd then one portion will remain unused and the students' teacher will drink it. What is the maximum number of students that can get their favorite drink if \u2308n/ 2\u2309 sets will be chosen optimally and students will distribute portions between themselves optimally?",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n, k \u2264 1 000 ) \u2014 the number of students in the building and the number of different drinks. The next n lines contain student' s favorite drinks. The i - th line contains a single integer from 1 to k \u2014 the type of the favorite drink of the i - th student.",
    "output": "Print exactly one integer \u2014 the maximum number of students that can get a favorite drink.",
    "note": "In the first example, students could choose three sets with drinks 1 , 1 and 2 ( so they will have two sets with two drinks of the type 1 each and one set with two drinks of the type 2 , so portions will be 1, 1, 1, 1, 2, 2 ) . This way all students except the second one will get their favorite drinks. Another possible answer is sets with drinks 1 , 2 and 3 . In this case the portions will be 1, 1, 2, 2, 3, 3 . Then all the students except one will gain their favorite drinks. The only student that will not gain the favorite drink will be a student with a_ i = 1 ( i. e. the first, the third or the fourth) .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1195A"
  },
  {
    "title": "Tokitsukaze and Explosion",
    "url": "https://codeforces.com/problemset/problem/1190/E",
    "history": "Tokitsukaze and her friends are trying to infiltrate a secret base built by Claris. However, Claris has been aware of that and set a bomb which is going to explode in a minute. Although they try to escape, they have no place to go after they find that the door has been locked. At this very moment, CJB, Father of Tokitsukaze comes. With his magical power given by Ereshkigal, the goddess of the underworld, CJB is able to set m barriers to protect them from the explosion. Formally, let' s build a Cartesian coordinate system on the plane and assume the bomb is at O( 0, 0) . There are n persons in Tokitsukaze' s crew, the i - th one of whom is at P_ i( X_ i, Y_ i) . Every barrier can be considered as a line with infinity length and they can intersect each other. For every person from Tokitsukaze' s crew, there must be at least one barrier separating the bomb and him, which means the line between the bomb and him intersects with at least one barrier. In this definition, if there exists a person standing at the position of the bomb, any line through O( 0, 0) will satisfy the requirement. Although CJB is very powerful, he still wants his barriers to be as far from the bomb as possible, in order to conserve his energy. Please help him calculate the maximum distance between the bomb and the closest barrier while all of Tokitsukaze' s crew are safe.",
    "input": "The first line contains two integers n , m ( 1 \u2264 n, m \u2264 10^ 5 ) , indicating the number of people and the number of barriers respectively. The i - th line of the next n lines contains two integers X_ i , Y_ i ( - 10^ 5 \u2264 X_ i, Y_ i \u2264 10^ 5 ) , indicating the i - th person' s location P_ i( X_ i, Y_ i) . Note that P_ i may have the same coordinates as P_ j ( j = \u0338 i ) or even O .",
    "output": "Print a single real number \u2014 the maximum distance meeting the requirement. Your answer is considered correct if its absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . Your answer is accepted if and only if | a - b| / max( 1, | b| ) \u2264 10^ - 6 .",
    "note": "In the first two examples, CJB must set the barrier crossing O( 0, 0) . In the last two examples, CJB can set each barrier crossing some P_ i such that the barrier is perpendicular to the line between P_ i and O .",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1190E"
  },
  {
    "title": "Tokitsukaze and Duel",
    "url": "https://codeforces.com/problemset/problem/1190/C",
    "history": "\" Duel! \" Betting on the lovely princess Claris, the duel between Tokitsukaze and Quailty has started. There are n cards in a row. Each card has two sides, one of which has color. At first, some of these cards are with color sides facing up and others are with color sides facing down. Then they take turns flipping cards, in which Tokitsukaze moves first. In each move, one should choose exactly k consecutive cards and flip them to the same side, which means to make their color sides all face up or all face down. If all the color sides of these n cards face the same direction after one' s move, the one who takes this move will win. Princess Claris wants to know who will win the game if Tokitsukaze and Quailty are so clever that they won' t make mistakes.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 10^ 5 ) . The second line contains a single string of length n that only consists of 0 and 1 , representing the situation of these n cards, where the color side of the i - th card faces up if the i - th character is 1 , or otherwise, it faces down and the i - th character is 0 .",
    "output": "Print \" once again\" ( without quotes) if the total number of their moves can exceed 10^ 9 , which is considered a draw. In other cases, print \" tokitsukaze\" ( without quotes) if Tokitsukaze will win, or \" quailty\" ( without quotes) if Quailty will win. Note that the output characters are case- sensitive, and any wrong spelling would be rejected.",
    "note": "In the first example, no matter how Tokitsukaze moves, there would be three cards with color sides facing the same direction after her move, and Quailty can flip the last card to this direction and win. In the second example, no matter how Tokitsukaze moves, Quailty can choose the same card and flip back to the initial situation, which can allow the game to end in a draw. In the third example, Tokitsukaze can win by flipping the leftmost five cards up or flipping the rightmost five cards down. The fourth example can be explained in the same way as the second example does.",
    "topics": [
      "brute force",
      "games",
      "greedy"
    ],
    "id": "1190C"
  },
  {
    "title": "Number Circle",
    "url": "https://codeforces.com/problemset/problem/1189/B",
    "history": "You are given n numbers a_ 1, a_ 2, . . . , a_ n . Is it possible to arrange them in a circle in such a way that every number is strictly less than the sum of its neighbors? For example, for the array [ 1, 4, 5, 6, 7, 8] , the arrangement on the left is valid, while arrangement on the right is not, as 5\u2265 4 + 1 and 8> 1 + 6 .",
    "input": "The first line contains a single integer n ( 3\u2264 n \u2264 10^ 5 ) \u2014 the number of numbers. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the numbers. The given numbers are not necessarily distinct ( i. e. duplicates are allowed) .",
    "output": "If there is no solution, output \" NO\" in the first line. If there is a solution, output \" YES\" in the first line. In the second line output n numbers \u2014 elements of the array in the order they will stay in the circle. The first and the last element you output are considered neighbors in the circle. If there are multiple solutions, output any of them. You can print the circle starting with any element.",
    "note": "One of the possible arrangements is shown in the first example: 4< 2 + 3 ; 2 < 4 + 3 ; 3< 4 + 2 . One of the possible arrangements is shown in the second example. No matter how we arrange 13, 8, 5 in a circle in the third example, 13 will have 8 and 5 as neighbors, but 13\u2265 8 + 5 . There is no solution in the fourth example.",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1189B"
  },
  {
    "title": "Vasya And Array",
    "url": "https://codeforces.com/problemset/problem/1187/C",
    "history": "Vasya has an array a_ 1, a_ 2, . . . , a_ n . You don' t know this array, but he told you m facts about this array. The i - th fact is a triple of numbers t_ i , l_ i and r_ i ( 0 \u2264 t_ i \u2264 1, 1 \u2264 l_ i < r_ i \u2264 n ) and it means: if t_ i= 1 then subbarray a_ l_ i, a_ l_ i + 1, . . . , a_ r_ i is sorted in non- decreasing order; if t_ i= 0 then subbarray a_ l_ i, a_ l_ i + 1, . . . , a_ r_ i is not sorted in non- decreasing order. A subarray is not sorted if there is at least one pair of consecutive elements in this subarray such that the former is greater than the latter. For example if a = [ 2, 1, 1, 3, 2] then he could give you three facts: t_ 1= 1, l_ 1= 2, r_ 1= 4 ( the subarray [ a_ 2, a_ 3, a_ 4] = [ 1, 1, 3] is sorted) , t_ 2= 0, l_ 2= 4, r_ 2= 5 ( the subarray [ a_ 4, a_ 5] = [ 3, 2] is not sorted) , and t_ 3= 0, l_ 3= 3, r_ 3= 5 ( the subarray [ a_ 3, a_ 5] = [ 1, 3, 2] is not sorted) . You don' t know the array a . Find any array which satisfies all the given facts.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 1000, 1 \u2264 m \u2264 1000 ) . Each of the next m lines contains three integers t_ i , l_ i and r_ i ( 0 \u2264 t_ i \u2264 1, 1 \u2264 l_ i < r_ i \u2264 n ) . If t_ i = 1 then subbarray a_ l_ i, a_ l_ i + 1, . . . , a_ r_ i is sorted. Otherwise ( if t_ i = 0 ) subbarray a_ l_ i, a_ l_ i + 1, . . . , a_ r_ i is not sorted.",
    "output": "If there is no array that satisfies these facts in only line print NO ( in any letter case) . If there is a solution, print YES ( in any letter case) . In second line print n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array a , satisfying all the given facts. If there are multiple satisfying arrays you can print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1187C"
  },
  {
    "title": "Vus the Cossack and a Graph",
    "url": "https://codeforces.com/problemset/problem/1186/F",
    "history": "Vus the Cossack has a simple graph with n vertices and m edges. Let d_ i be a degree of the i - th vertex. Recall that a degree of the i - th vertex is the number of conected edges to the i - th vertex. He needs to remain not more than \u2308n+ m/ 2\u2309 edges. Let f_ i be the degree of the i - th vertex after removing. He needs to delete them in such way so that \u2308d_ i/ 2\u2309\u2264 f_ i for each i . In other words, the degree of each vertex should not be reduced more than twice. Help Vus to remain the needed edges!",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 6 , 0 \u2264 m \u2264 10^ 6 ) \u2014 the number of vertices and edges respectively. Each of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) \u2014 vertices between which there is an edge. It is guaranteed that the graph does not have loops and multiple edges. It is possible to show that the answer always exists.",
    "output": "In the first line, print one integer k ( 0 \u2264 k \u2264\u2308n+ m/ 2\u2309 ) \u2014 the number of edges which you need to remain. In each of the next k lines, print two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) \u2014 the vertices, the edge between which, you need to remain. You can not print the same edge more than once.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1186F"
  },
  {
    "title": "Vus the Cossack and Numbers",
    "url": "https://codeforces.com/problemset/problem/1186/D",
    "history": "Vus the Cossack has n real numbers a_ i . It is known that the sum of all numbers is equal to 0 . He wants to choose a sequence b the size of which is n such that the sum of all numbers is 0 and each b_ i is either \u230a a_ i \u230b or \u2308 a_ i \u2309 . In other words, b_ i equals a_ i rounded up or down. It is not necessary to round to the nearest integer. For example, if a = [ 4. 58413, 1. 22491, - 2. 10517, - 3. 70387] , then b can be equal, for example, to [ 4, 2, - 2, - 4] . Note that if a_ i is an integer, then there is no difference between \u230a a_ i \u230b and \u2308 a_ i \u2309 , b_ i will always be equal to a_ i . Help Vus the Cossack find such sequence!",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of numbers. Each of the next n lines contains one real number a_ i ( | a_ i| < 10^ 5 ) . It is guaranteed that each a_ i has exactly 5 digits after the decimal point. It is guaranteed that the sum of all the numbers is equal to 0 .",
    "output": "In each of the next n lines, print one integer b_ i . For each i , | a_ i- b_ i| < 1 must be met. If there are multiple answers, print any.",
    "note": "The first example is explained in the legend. In the second example, we can round the first and fifth numbers up, and the second and third numbers down. We can round the fourth number neither up, nor down.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1186D"
  },
  {
    "title": "Exam in BerSU (hard version)",
    "url": "https://codeforces.com/problemset/problem/1185/C2",
    "history": "The only difference between easy and hard versions is constraints. If you write a solution in Python, then prefer to send it in PyPy to speed up execution time. A session has begun at Beland State University. Many students are taking exams. Polygraph Poligrafovich is going to examine a group of n students. Students will take the exam one- by- one in order from 1 - th to n - th. Rules of the exam are following: The i - th student randomly chooses a ticket. if this ticket is too hard to the student, he doesn' t answer and goes home immediately ( this process is so fast that it' s considered no time elapses) . This student fails the exam. if the student finds the ticket easy, he spends exactly t_ i minutes to pass the exam. After it, he immediately gets a mark and goes home. Students take the exam in the fixed order, one- by- one, without any interruption. At any moment of time, Polygraph Poligrafovich takes the answer from one student. The duration of the whole exam for all students is M minutes ( max t_ i \u2264 M ) , so students at the end of the list have a greater possibility to run out of time to pass the exam. For each student i , you should count the minimum possible number of students who need to fail the exam so the i - th student has enough time to pass the exam. For each student i , find the answer independently. That is, if when finding the answer for the student i_ 1 some student j should leave, then while finding the answer for i_ 2 ( i_ 2> i_ 1 ) the student j student does not have to go home.",
    "input": "The first line of the input contains two integers n and M ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 M \u2264 2 \u00b7 10^ 7 ) \u2014 the number of students and the total duration of the exam in minutes, respectively. The second line of the input contains n integers t_ i ( 1 \u2264 t_ i \u2264 100 ) \u2014 time in minutes that i - th student spends to answer to a ticket. It' s guaranteed that all values of t_ i are not greater than M .",
    "output": "Print n numbers: the i - th number must be equal to the minimum number of students who have to leave the exam in order to i - th student has enough time to pass the exam.",
    "note": "The explanation for the example 1. Please note that the sum of the first five exam times does not exceed M= 15 ( the sum is 1+ 2+ 3+ 4+ 5= 15 ) . Thus, the first five students can pass the exam even if all the students before them also pass the exam. In other words, the first five numbers in the answer are 0 . In order for the 6 - th student to pass the exam, it is necessary that at least 2 students must fail it before ( for example, the 3 - rd and 4 - th, then the 6 - th will finish its exam in 1+ 2+ 5+ 6= 14 minutes, which does not exceed M ) . In order for the 7 - th student to pass the exam, it is necessary that at least 3 students must fail it before ( for example, the 2 - nd, 5 - th and 6 - th, then the 7 - th will finish its exam in 1+ 3+ 4+ 7= 15 minutes, which does not exceed M ) .",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1185C2"
  },
  {
    "title": "Exam in BerSU (easy version)",
    "url": "https://codeforces.com/problemset/problem/1185/C1",
    "history": "The only difference between easy and hard versions is constraints. A session has begun at Beland State University. Many students are taking exams. Polygraph Poligrafovich is going to examine a group of n students. Students will take the exam one- by- one in order from 1 - th to n - th. Rules of the exam are following: The i - th student randomly chooses a ticket. if this ticket is too hard to the student, he doesn' t answer and goes home immediately ( this process is so fast that it' s considered no time elapses) . This student fails the exam. if the student finds the ticket easy, he spends exactly t_ i minutes to pass the exam. After it, he immediately gets a mark and goes home. Students take the exam in the fixed order, one- by- one, without any interruption. At any moment of time, Polygraph Poligrafovich takes the answer from one student. The duration of the whole exam for all students is M minutes ( max t_ i \u2264 M ) , so students at the end of the list have a greater possibility to run out of time to pass the exam. For each student i , you should count the minimum possible number of students who need to fail the exam so the i - th student has enough time to pass the exam. For each student i , find the answer independently. That is, if when finding the answer for the student i_ 1 some student j should leave, then while finding the answer for i_ 2 ( i_ 2> i_ 1 ) the student j student does not have to go home.",
    "input": "The first line of the input contains two integers n and M ( 1 \u2264 n \u2264 100 , 1 \u2264 M \u2264 100 ) \u2014 the number of students and the total duration of the exam in minutes, respectively. The second line of the input contains n integers t_ i ( 1 \u2264 t_ i \u2264 100 ) \u2014 time in minutes that i - th student spends to answer to a ticket. It' s guaranteed that all values of t_ i are not greater than M .",
    "output": "Print n numbers: the i - th number must be equal to the minimum number of students who have to leave the exam in order to i - th student has enough time to pass the exam.",
    "note": "The explanation for the example 1. Please note that the sum of the first five exam times does not exceed M= 15 ( the sum is 1+ 2+ 3+ 4+ 5= 15 ) . Thus, the first five students can pass the exam even if all the students before them also pass the exam. In other words, the first five numbers in the answer are 0 . In order for the 6 - th student to pass the exam, it is necessary that at least 2 students must fail it before ( for example, the 3 - rd and 4 - th, then the 6 - th will finish its exam in 1+ 2+ 5+ 6= 14 minutes, which does not exceed M ) . In order for the 7 - th student to pass the exam, it is necessary that at least 3 students must fail it before ( for example, the 2 - nd, 5 - th and 6 - th, then the 7 - th will finish its exam in 1+ 3+ 4+ 7= 15 minutes, which does not exceed M ) .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1185C1"
  },
  {
    "title": "Candy Box (hard version)",
    "url": "https://codeforces.com/problemset/problem/1183/G",
    "history": "This problem is a version of problem D from the same contest with some additional constraints and tasks. There are n candies in a candy box. The type of the i - th candy is a_ i ( 1 \u2264 a_ i \u2264 n ) . You have to prepare a gift using some of these candies with the following restriction: the numbers of candies of each type presented in a gift should be all distinct ( i. e. for example, a gift having two candies of type 1 and two candies of type 2 is bad) . It is possible that multiple types of candies are completely absent from the gift. It is also possible that not all candies of some types will be taken to a gift. You really like some of the candies and don' t want to include them into the gift, but you want to eat them yourself instead. For each candy, a number f_ i is given, which is equal to 0 if you really want to keep i - th candy for yourself, or 1 if you don' t mind including it into your gift. It is possible that two candies of the same type have different values of f_ i . You want your gift to be as large as possible, but you don' t want to include too many of the candies you want to eat into the gift. So, you want to calculate the maximum possible number of candies that can be included into a gift, and among all ways to choose maximum number of candies, you want to maximize the number of candies having f_ i = 1 in your gift. You have to answer q independent queries. If you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. The first line of each query contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of candies. Then n lines follow, each containing two integers a_ i and f_ i ( 1 \u2264 a_ i \u2264 n , 0 \u2264 f_ i \u2264 1 ) , where a_ i is the type of the i - th candy, and f_ i denotes whether you want to keep the i - th candy for yourself ( 0 if you want to keep it, 1 if you don' t mind giving it away) . It is guaranteed that the sum of n over all queries does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each query print two integers: the maximum number of candies in a gift you can compose, according to the constraints in the statement; the maximum number of candies having f_ i = 1 in a gift you can compose that contains the maximum possible number of candies.",
    "note": "In the first query, you can include two candies of type 4 and one candy of type 5 . All of them have f_ i = 1 and you don' t mind giving them away as part of the gift.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1183G"
  },
  {
    "title": "Candy Box (easy version)",
    "url": "https://codeforces.com/problemset/problem/1183/D",
    "history": "This problem is actually a subproblem of problem G from the same contest. There are n candies in a candy box. The type of the i - th candy is a_ i ( 1 \u2264 a_ i \u2264 n ) . You have to prepare a gift using some of these candies with the following restriction: the numbers of candies of each type presented in a gift should be all distinct ( i. e. for example, a gift having two candies of type 1 and two candies of type 2 is bad) . It is possible that multiple types of candies are completely absent from the gift. It is also possible that not all candies of some types will be taken to a gift. Your task is to find out the maximum possible size of the single gift you can prepare using the candies you have. You have to answer q independent queries. If you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of queries. Each query is represented by two lines. The first line of each query contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of candies. The second line of each query contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the type of the i - th candy in the box. It is guaranteed that the sum of n over all queries does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the maximum possible size of the single gift you can compose using candies you got in this query with the restriction described in the problem statement.",
    "note": "In the first query, you can prepare a gift with two candies of type 8 and one candy of type 5 , totalling to 3 candies. Note that this is not the only possible solution \u2014 taking two candies of type 4 and one candy of type 6 is also valid.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1183D"
  },
  {
    "title": "Beautiful Lyrics",
    "url": "https://codeforces.com/problemset/problem/1182/C",
    "history": "You are given n words, each of which consists of lowercase alphabet letters. Each word contains at least one vowel. You are going to choose some of the given words and make as many beautiful lyrics as possible. Each lyric consists of two lines. Each line consists of two words separated by whitespace. A lyric is beautiful if and only if it satisfies all conditions below. The number of vowels in the first word of the first line is the same as the number of vowels in the first word of the second line. The number of vowels in the second word of the first line is the same as the number of vowels in the second word of the second line. The last vowel of the first line is the same as the last vowel of the second line. Note that there may be consonants after the vowel. Also, letters \" a\" , \" e\" , \" o\" , \" i\" , and \" u\" are vowels. Note that \" y\" is never vowel. For example of a beautiful lyric, \" hello hellooowww\" \" whatsup yowowowow\" is a beautiful lyric because there are two vowels each in \" hello\" and \" whatsup\" , four vowels each in \" hellooowww\" and \" yowowowow\" ( keep in mind that \" y\" is not a vowel) , and the last vowel of each line is \" o\" . For example of a not beautiful lyric, \" hey man\" \" iam mcdic\" is not a beautiful lyric because \" hey\" and \" iam\" don' t have same number of vowels and the last vowels of two lines are different ( \" a\" in the first and \" i\" in the second) . How many beautiful lyrics can you write from given words? Note that you cannot use a word more times than it is given to you. For example, if a word is given three times, you can use it at most three times.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of words. The i - th of the next n lines contains string s_ i consisting lowercase alphabet letters \u2014 the i - th word. It is guaranteed that the sum of the total word length is equal or less than 10^ 6 . Each word contains at least one vowel.",
    "output": "In the first line, print m \u2014 the number of maximum possible beautiful lyrics. In next 2m lines, print m beautiful lyrics ( two lines per lyric) . If there are multiple answers, print any.",
    "note": "In the first example, those beautiful lyrics are one of the possible answers. Let' s look at the first lyric on the sample output of the first example. \" about proud hooray round\" forms a beautiful lyric because \" about\" and \" hooray\" have same number of vowels, \" proud\" and \" round\" have same number of vowels, and both lines have same last vowel. On the other hand, you cannot form any beautiful lyric with the word \" codeforces\" . In the second example, you cannot form any beautiful lyric from given words. In the third example, you can use the word \" same\" up to three times.",
    "topics": [
      "data structures",
      "greedy",
      "strings"
    ],
    "id": "1182C"
  },
  {
    "title": "A Story of One Country (Hard)",
    "url": "https://codeforces.com/problemset/problem/1181/E2",
    "history": "This problem differs from the previous problem only in constraints. Petya decided to visit Byteland during the summer holidays. It turned out that the history of this country is quite unusual. Initially, there were n different countries on the land that is now Berland. Each country had its own territory that was represented as a rectangle on the map. The sides of the rectangle were parallel to the axes, and the corners were located at points with integer coordinates. Territories of no two countries intersected, but it was possible that some territories touched each other. As time passed, sometimes two countries merged into one. It only happened if the union of their territories was also a rectangle. In the end only one country remained \u2014 Byteland. Initially, each country had a rectangular castle inside its territory. Its sides were parallel to the axes and its corners had integer coordinates. Some castles might touch the border of the corresponding country and sides or other castles. Miraculously, after all the unions the castles are still intact. Unfortunately, their locations are the only information we have to restore the initial territories of the countries. The possible formation of Byteland. The castles are shown in blue. Petya wonders why no information about the initial countries remained. He suspected that the whole story is a fake. You were recommended to him as a smart person. Please check whether or not there exists a possible set of initial territories that could make the story true.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the number of countries and castles. Each of the next n lines contains four integers a_ i, b_ i, c_ i, d_ i ( 0 \u2264 a_ i < c_ i \u2264 10^ 9 , 0 \u2264 b_ i < d_ i \u2264 10^ 9 ) \u2014 the coordinates of the i - th castle, where ( a_ i, b_ i) are the coordinates of the lower left corner and ( c_ i, d_ i) are the coordinates of the upper right corner. It is guaranteed that no two castles intersect, however, they may touch.",
    "output": "If there exists a possible set of territories that satisfies the story, print \" YES\" , otherwise print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "The castles in the first and second examples are shown on the pictures below.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "1181E2"
  },
  {
    "title": "Split a Number",
    "url": "https://codeforces.com/problemset/problem/1181/B",
    "history": "Dima worked all day and wrote down on a long paper strip his favorite number n consisting of l digits. Unfortunately, the strip turned out to be so long that it didn' t fit in the Dima' s bookshelf. To solve the issue, Dima decided to split the strip into two non- empty parts so that each of them contains a positive integer without leading zeros. After that he will compute the sum of the two integers and write it down on a new strip. Dima wants the resulting integer to be as small as possible, because it increases the chances that the sum will fit it in the bookshelf. Help Dima decide what is the minimum sum he can obtain.",
    "input": "The first line contains a single integer l ( 2 \u2264 l \u2264 100 000 ) \u2014 the length of the Dima' s favorite number. The second line contains the positive integer n initially written on the strip: the Dima' s favorite number. The integer n consists of exactly l digits and it does not contain leading zeros. Dima guarantees, that there is at least one valid way to split the strip.",
    "output": "Print a single integer \u2014 the smallest number Dima can obtain.",
    "note": "In the first example Dima can split the number 1234567 into integers 1234 and 567 . Their sum is 1801 . In the second example Dima can split the number 101 into integers 10 and 1 . Their sum is 11 . Note that it is impossible to split the strip into \" 1\" and \" 01\" since the numbers can' t start with zeros.",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1181B"
  },
  {
    "title": "Chunga-Changa",
    "url": "https://codeforces.com/problemset/problem/1181/A",
    "history": "Soon after the Chunga- Changa island was discovered, it started to acquire some forms of civilization and even market economy. A new currency arose, colloquially called \" chizhik\" . One has to pay in chizhiks to buy a coconut now. Sasha and Masha are about to buy some coconuts which are sold at price z chizhiks per coconut. Sasha has x chizhiks, Masha has y chizhiks. Each girl will buy as many coconuts as she can using only her money. This way each girl will buy an integer non- negative number of coconuts. The girls discussed their plans and found that the total number of coconuts they buy can increase ( or decrease) if one of them gives several chizhiks to the other girl. The chizhiks can' t be split in parts, so the girls can only exchange with integer number of chizhiks. Consider the following example. Suppose Sasha has 5 chizhiks, Masha has 4 chizhiks, and the price for one coconut be 3 chizhiks. If the girls don' t exchange with chizhiks, they will buy 1 + 1 = 2 coconuts. However, if, for example, Masha gives Sasha one chizhik, then Sasha will have 6 chizhiks, Masha will have 3 chizhiks, and the girls will buy 2 + 1 = 3 coconuts. It is not that easy to live on the island now, so Sasha and Mash want to exchange with chizhiks in such a way that they will buy the maximum possible number of coconuts. Nobody wants to have a debt, so among all possible ways to buy the maximum possible number of coconuts find such a way that minimizes the number of chizhiks one girl gives to the other ( it is not important who will be the person giving the chizhiks) .",
    "input": "The first line contains three integers x , y and z ( 0 \u2264 x, y \u2264 10^ 18 , 1 \u2264 z \u2264 10^ 18 ) \u2014 the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut.",
    "output": "Print two integers: the maximum possible number of coconuts the girls can buy and the minimum number of chizhiks one girl has to give to the other.",
    "note": "The first example is described in the statement. In the second example the optimal solution is to dot exchange any chizhiks. The girls will buy 3 + 4 = 7 coconuts.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1181A"
  },
  {
    "title": "Nick and Array",
    "url": "https://codeforces.com/problemset/problem/1180/B",
    "history": "Nick had received an awesome array of integers a= [ a_ 1, a_ 2, . . . , a_ n] as a gift for his 5 birthday from his mother. He was already going to explore its various properties but after unpacking he was disappointed a lot because the product a_ 1 \u00b7 a_ 2 \u00b7. . . a_ n of its elements seemed to him not large enough. He was ready to throw out the array, but his mother reassured him. She told him, that array would not be spoiled after the following operation: choose any index i ( 1 \u2264 i \u2264 n ) and do a_ i : = - a_ i - 1 . For example, he can change array [ 3, - 1, - 4, 1] to an array [ - 4, - 1, 3, 1] after applying this operation to elements with indices i= 1 and i= 3 . Kolya had immediately understood that sometimes it' s possible to increase the product of integers of the array a lot. Now he has decided that he wants to get an array with the maximal possible product of integers using only this operation with its elements ( possibly zero, one or more times, as many as he wants) , it is not forbidden to do this operation several times for the same index. Help Kolya and print the array with the maximal possible product of elements a_ 1 \u00b7 a_ 2 \u00b7. . . a_ n which can be received using only this operation in some order. If there are multiple answers, print any of them.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 number of integers in the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 6\u2264 a_ i \u2264 10^ 6 ) \u2014 elements of the array",
    "output": "Print n numbers \u2014 elements of the array with the maximal possible product of elements which can be received using only this operation in some order from the given array. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1180B"
  },
  {
    "title": "Serge and Dining Room",
    "url": "https://codeforces.com/problemset/problem/1179/C",
    "history": "Serge came to the school dining room and discovered that there is a big queue here. There are m pupils in the queue. He' s not sure now if he wants to wait until the queue will clear, so he wants to know which dish he will receive if he does. As Serge is very tired, he asks you to compute it instead of him. Initially there are n dishes with costs a_ 1, a_ 2, . . . , a_ n . As you already know, there are the queue of m pupils who have b_ 1, . . . , b_ m togrogs respectively ( pupils are enumerated by queue order, i. e the first pupil in the queue has b_ 1 togrogs and the last one has b_ m togrogs) Pupils think that the most expensive dish is the most delicious one, so every pupil just buys the most expensive dish for which he has money ( every dish has a single copy, so when a pupil has bought it nobody can buy it later) , and if a pupil doesn' t have money for any dish, he just leaves the queue ( so brutal capitalism. . . ) But money isn' t a problem at all for Serge, so Serge is buying the most expensive dish if there is at least one remaining. Moreover, Serge' s school has a very unstable economic situation and the costs of some dishes or number of togrogs of some pupils can change. More formally, you must process q queries: change a_ i to x . It means that the price of the i - th dish becomes x togrogs. change b_ i to x . It means that the i - th pupil in the queue has x togrogs now. Nobody leaves the queue during those queries because a saleswoman is late. After every query, you must tell Serge price of the dish which he will buy if he has waited until the queue is clear, or - 1 if there are no dishes at this point, according to rules described above.",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 300 000 ) \u2014 number of dishes and pupils respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 elements of array a . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 6 ) \u2014 elements of array b . The fourth line conatins integer q ( 1 \u2264 q \u2264 300 000 ) \u2014 number of queries. Each of the following q lines contains as follows: if a query changes price of some dish, it contains 1 , and two integers i and x ( 1 \u2264 i \u2264 n , 1 \u2264 x \u2264 10^ 6 ) , what means a_ i becomes x . if a query changes number of togrogs of some pupil, it contains 2 , and two integers i and x ( 1 \u2264 i \u2264 m , 1 \u2264 x \u2264 10^ 6 ) , what means b_ i becomes x .",
    "output": "For each of q queries prints the answer as the statement describes, the answer of the i - th query in the i - th line ( the price of the dish which Serge will buy or - 1 if nothing remains)",
    "note": "In the first sample after the first query, there is one dish with price 100 togrogs and one pupil with one togrog, so Serge will buy the dish with price 100 togrogs. In the second sample after the first query, there is one dish with price one togrog and one pupil with 100 togrogs, so Serge will get nothing. In the third sample after the first query, nobody can buy the dish with price 8 , so Serge will take it. After the second query, all dishes will be bought, after the third one the third and fifth pupils will by the first and the second dishes respectively and nobody will by the fourth one.",
    "topics": [
      "binary search",
      "data structures",
      "graph matchings",
      "greedy",
      "implementation",
      "math",
      "trees"
    ],
    "id": "1179C"
  },
  {
    "title": "Archaeology",
    "url": "https://codeforces.com/problemset/problem/1178/E",
    "history": "Alice bought a Congo Prime Video subscription and was watching a documentary on the archaeological findings from Factor' s Island on Loch Katrine in Scotland. The archaeologists found a book whose age and origin are unknown. Perhaps Alice can make some sense of it? The book contains a single string of characters \" a\" , \" b\" and \" c\" . It has been pointed out that no two consecutive characters are the same. It has also been conjectured that the string contains an unusually long subsequence that reads the same from both sides. Help Alice verify this by finding such subsequence that contains at least half of the characters of the original string, rounded down. Note that you don' t have to maximise the length of it. A string a is a subsequence of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters.",
    "input": "The input consists of a single string s ( 2 \u2264 | s| \u2264 10^ 6 ) . The string s consists only of characters \" a\" , \" b\" , \" c\" . It is guaranteed that no two consecutive characters are equal.",
    "output": "Output a palindrome t that is a subsequence of s and | t| \u2265\u230a| s| / 2\u230b . If there are multiple solutions, you may print any of them. You don' t have to maximise the length of t . If there are no solutions, output a string \" IMPOSSIBLE\" ( quotes for clarity) .",
    "note": "In the first example, other valid answers include \" cacac\" , \" caac\" , \" aca\" and \" ccc\" .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1178E"
  },
  {
    "title": "Prime Graph",
    "url": "https://codeforces.com/problemset/problem/1178/D",
    "history": "Every person likes prime numbers. Alice is a person, thus she also shares the love for them. Bob wanted to give her an affectionate gift but couldn' t think of anything inventive. Hence, he will be giving her a graph. How original, Bob! Alice will surely be thrilled! When building the graph, he needs four conditions to be satisfied: It must be a simple undirected graph, i. e. without multiple ( parallel) edges and self- loops. The number of vertices must be exactly n \u2014 a number he selected. This number is not necessarily prime. The total number of edges must be prime. The degree ( i. e. the number of edges connected to the vertex) of each vertex must be prime. Below is an example for n = 4 . The first graph ( left one) is invalid as the degree of vertex 2 ( and 4 ) equals to 1 , which is not prime. The second graph ( middle one) is invalid as the total number of edges is 4 , which is not a prime number. The third graph ( right one) is a valid answer for n = 4 . Note that the graph can be disconnected. Please help Bob to find any such graph!",
    "input": "The input consists of a single integer n ( 3 \u2264 n \u2264 1 000 ) \u2014 the number of vertices.",
    "output": "If there is no graph satisfying the conditions, print a single line containing the integer - 1 . Otherwise, first print a line containing a prime number m ( 2 \u2264 m \u2264n( n- 1) / 2 ) \u2014 the number of edges in the graph. Then, print m lines, the i - th of which containing two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) \u2014 meaning that there is an edge between vertices u_ i and v_ i . The degree of each vertex must be prime. There must be no multiple ( parallel) edges or self- loops. If there are multiple solutions, you may print any of them. Note that the graph can be disconnected.",
    "note": "The first example was described in the statement. In the second example, the degrees of vertices are [ 7, 5, 2, 2, 3, 2, 2, 3] . Each of these numbers is prime. Additionally, the number of edges, 13 , is also a prime number, hence both conditions are satisfied.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1178D"
  },
  {
    "title": "Tiles",
    "url": "https://codeforces.com/problemset/problem/1178/C",
    "history": "Bob is decorating his kitchen, more precisely, the floor. He has found a prime candidate for the tiles he will use. They come in a simple form factor \u2014 a square tile that is diagonally split into white and black part as depicted in the figure below. The dimension of this tile is perfect for this kitchen, as he will need exactly w \u00d7 h tiles without any scraps. That is, the width of the kitchen is w tiles, and the height is h tiles. As each tile can be rotated in one of four ways, he still needs to decide on how exactly he will tile the floor. There is a single aesthetic criterion that he wants to fulfil: two adjacent tiles must not share a colour on the edge \u2014 i. e. one of the tiles must have a white colour on the shared border, and the second one must be black. The picture on the left shows one valid tiling of a 3 \u00d7 2 kitchen. The picture on the right shows an invalid arrangement, as the bottom two tiles touch with their white parts. Find the number of possible tilings. As this number may be large, output its remainder when divided by 998244353 ( a prime number) .",
    "input": "The only line contains two space separated integers w , h ( 1 \u2264 w, h \u2264 1 000 ) \u2014 the width and height of the kitchen, measured in tiles.",
    "output": "Output a single integer n \u2014 the remainder of the number of tilings when divided by 998244353 .",
    "note": "",
    "topics": [
      "combinatorics",
      "greedy",
      "math"
    ],
    "id": "1178C"
  },
  {
    "title": "Prime Minister",
    "url": "https://codeforces.com/problemset/problem/1178/A",
    "history": "Alice is the leader of the State Refactoring Party, and she is about to become the prime minister. The elections have just taken place. There are n parties, numbered from 1 to n . The i - th party has received a_ i seats in the parliament. Alice' s party has number 1 . In order to become the prime minister, she needs to build a coalition, consisting of her party and possibly some other parties. There are two conditions she needs to fulfil: The total number of seats of all parties in the coalition must be a strict majority of all the seats, i. e. it must have strictly more than half of the seats. For example, if the parliament has 200 ( or 201 ) seats, then the majority is 101 or more seats. Alice' s party must have at least 2 times more seats than any other party in the coalition. For example, to invite a party with 50 seats, Alice' s party must have at least 100 seats. For example, if n= 4 and a= [ 51, 25, 99, 25] ( note that Alice' a party has 51 seats) , then the following set [ a_ 1= 51, a_ 2= 25, a_ 4= 25] can create a coalition since both conditions will be satisfied. However, the following sets will not create a coalition: [ a_ 2= 25, a_ 3= 99, a_ 4= 25] since Alice' s party is not there; [ a_ 1= 51, a_ 2= 25] since coalition should have a strict majority; [ a_ 1= 51, a_ 2= 25, a_ 3= 99] since Alice' s party should have at least 2 times more seats than any other party in the coalition. Alice does not have to minimise the number of parties in a coalition. If she wants, she can invite as many parties as she wants ( as long as the conditions are satisfied) . If Alice' s party has enough people to create a coalition on her own, she can invite no parties. Note that Alice can either invite a party as a whole or not at all. It is not possible to invite only some of the deputies ( seats) from another party. In other words, if Alice invites a party, she invites all its deputies. Find and print any suitable coalition.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of parties. The second line contains n space separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) \u2014 the number of seats the i - th party has.",
    "output": "If no coalition satisfying both conditions is possible, output a single line with an integer 0 . Otherwise, suppose there are k ( 1 \u2264 k \u2264 n ) parties in the coalition ( Alice does not have to minimise the number of parties in a coalition) , and their indices are c_ 1, c_ 2, . . . , c_ k ( 1 \u2264 c_ i \u2264 n ) . Output two lines, first containing the integer k , and the second the space- separated indices c_ 1, c_ 2, . . . , c_ k . You may print the parties in any order. Alice' s party ( number 1 ) must be on that list. If there are multiple solutions, you may print any of them.",
    "note": "In the first example, Alice picks the second party. Note that she can also pick the third party or both of them. However, she cannot become prime minister without any of them, because 100 is not a strict majority out of 200 . In the second example, there is no way of building a majority, as both other parties are too large to become a coalition partner. In the third example, Alice already has the majority. The fourth example is described in the problem statement.",
    "topics": [
      "greedy"
    ],
    "id": "1178A"
  },
  {
    "title": "Recover it!",
    "url": "https://codeforces.com/problemset/problem/1176/D",
    "history": "Authors guessed an array a consisting of n integers; each integer is not less than 2 and not greater than 2 \u00b7 10^ 5 . You don' t know the array a , but you know the array b which is formed from it with the following sequence of operations: Firstly, let the array b be equal to the array a ; Secondly, for each i from 1 to n : if a_ i is a prime number, then one integer p_ a_ i is appended to array b , where p is an infinite sequence of prime numbers ( 2, 3, 5, . . . ) ; otherwise ( if a_ i is not a prime number) , the greatest divisor of a_ i which is not equal to a_ i is appended to b ; Then the obtained array of length 2n is shuffled and given to you in the input. Here p_ a_ i means the a_ i - th prime number. The first prime p_ 1 = 2 , the second one is p_ 2 = 3 , and so on. Your task is to recover any suitable array a that forms the given array b . It is guaranteed that the answer exists ( so the array b is obtained from some suitable array a ) . If there are multiple answers, you can print any.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains 2n integers b_ 1, b_ 2, . . . , b_ 2n ( 2 \u2264 b_ i \u2264 2750131 ) , where b_ i is the i - th element of b . 2750131 is the 199999 - th prime number.",
    "output": "In the only line of the output print n integers a_ 1, a_ 2, . . . , a_ n ( 2 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) in any order \u2014 the array a from which the array b can be obtained using the sequence of moves given in the problem statement. If there are multiple answers, you can print any.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "number theory",
      "sortings"
    ],
    "id": "1176D"
  },
  {
    "title": "Lose it!",
    "url": "https://codeforces.com/problemset/problem/1176/C",
    "history": "You are given an array a consisting of n integers. Each a_ i is one of the six following numbers: 4, 8, 15, 16, 23, 42 . Your task is to remove the minimum number of elements to make this array good. An array of length k is called good if k is divisible by 6 and it is possible to split it into k/ 6 subsequences 4, 8, 15, 16, 23, 42 . Examples of good arrays: [ 4, 8, 15, 16, 23, 42] ( the whole array is a required sequence) ; [ 4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23, 42] ( the first sequence is formed from first, second, fourth, fifth, seventh and tenth elements and the second one is formed from remaining elements) ; [ ] ( the empty array is good) . Examples of bad arrays: [ 4, 8, 15, 16, 42, 23] ( the order of elements should be exactly 4, 8, 15, 16, 23, 42 ) ; [ 4, 8, 15, 16, 23, 42, 4] ( the length of the array is not divisible by 6 ) ; [ 4, 8, 15, 16, 23, 42, 4, 8, 15, 16, 23, 23] ( the first sequence can be formed from first six elements but the remaining array cannot form the required sequence) .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( each a_ i is one of the following numbers: 4, 8, 15, 16, 23, 42 ) , where a_ i is the i - th element of a .",
    "output": "Print one integer \u2014 the minimum number of elements you have to remove to obtain a good array.",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1176C"
  },
  {
    "title": "Divide it!",
    "url": "https://codeforces.com/problemset/problem/1176/A",
    "history": "You are given an integer n . You can perform any of the following operations with this number an arbitrary ( possibly, zero) number of times: Replace n with n/ 2 if n is divisible by 2 ; Replace n with 2n/ 3 if n is divisible by 3 ; Replace n with 4n/ 5 if n is divisible by 5 . For example, you can replace 30 with 15 using the first operation, with 20 using the second operation or with 24 using the third operation. Your task is to find the minimum number of moves required to obtain 1 from n or say that it is impossible to do it. You have to answer q independent queries.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 1000 ) \u2014 the number of queries. The next q lines contain the queries. For each query you are given the integer number n ( 1 \u2264 n \u2264 10^ 18 ) .",
    "output": "Print the answer for each query on a new line. If it is impossible to obtain 1 from n , print - 1. Otherwise, print the minimum number of moves required to do it.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1176A"
  },
  {
    "title": "Minimal Segment Cover",
    "url": "https://codeforces.com/problemset/problem/1175/E",
    "history": "You are given n intervals in form [ l; r] on a number line. You are also given m queries in form [ x; y] . What is the minimal number of intervals you have to take so that every point ( not necessarily integer) from x to y is covered by at least one of them? If you can' t choose intervals so that every point from x to y is covered, then print - 1 for that query.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of intervals and the number of queries, respectively. Each of the next n lines contains two integer numbers l_ i and r_ i ( 0 \u2264 l_ i < r_ i \u2264 5 \u00b7 10^ 5 ) \u2014 the given intervals. Each of the next m lines contains two integer numbers x_ i and y_ i ( 0 \u2264 x_ i < y_ i \u2264 5 \u00b7 10^ 5 ) \u2014 the queries.",
    "output": "Print m integer numbers. The i - th number should be the answer to the i - th query: either the minimal number of intervals you have to take so that every point ( not necessarily integer) from x_ i to y_ i is covered by at least one of them or - 1 if you can' t choose intervals so that every point from x_ i to y_ i is covered.",
    "note": "In the first example there are three queries: query [ 1; 3] can be covered by interval [ 1; 3] ; query [ 1; 4] can be covered by intervals [ 1; 3] and [ 2; 4] . There is no way to cover [ 1; 4] by a single interval; query [ 3; 4] can be covered by interval [ 2; 4] . It doesn' t matter that the other points are covered besides the given query. In the second example there are four queries: query [ 1; 2] can be covered by interval [ 1; 3] . Note that you can choose any of the two given intervals [ 1; 3] ; query [ 1; 3] can be covered by interval [ 1; 3] ; query [ 1; 4] can' t be covered by any set of intervals; query [ 1; 5] can' t be covered by any set of intervals. Note that intervals [ 1; 3] and [ 4; 5] together don' t cover [ 1; 5] because even non- integer points should be covered. Here 3. 5 , for example, isn' t covered.",
    "topics": [
      "data structures",
      "dfs and similar",
      "divide and conquer",
      "dp",
      "greedy",
      "implementation",
      "trees"
    ],
    "id": "1175E"
  },
  {
    "title": "Array Splitting",
    "url": "https://codeforces.com/problemset/problem/1175/D",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n and an integer k . You are asked to divide this array into k non- empty consecutive subarrays. Every element in the array should be included in exactly one subarray. Let f( i) be the index of subarray the i - th element belongs to. Subarrays are numbered from left to right and from 1 to k . Let the cost of division be equal to \u2211_ i= 1^ n ( a_ i \u00b7 f( i) ) . For example, if a = [ 1, - 2, - 3, 4, - 5, 6, - 7] and we divide it into 3 subbarays in the following way: [ 1, - 2, - 3] , [ 4, - 5] , [ 6, - 7] , then the cost of division is equal to 1 \u00b7 1 - 2 \u00b7 1 - 3 \u00b7 1 + 4 \u00b7 2 - 5 \u00b7 2 + 6 \u00b7 3 - 7 \u00b7 3 = - 9 . Calculate the maximum cost you can obtain by dividing the array a into k non- empty consecutive subarrays.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( | a_ i| \u2264 10^ 6 ) .",
    "output": "Print the maximum cost you can obtain by dividing the array a into k nonempty consecutive subarrays.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1175D"
  },
  {
    "title": "Electrification",
    "url": "https://codeforces.com/problemset/problem/1175/C",
    "history": "At first, there was a legend related to the name of the problem, but now it' s just a formal statement. You are given n points a_ 1, a_ 2, . . . , a_ n on the OX axis. Now you are asked to find such an integer point x on OX axis that f_ k( x) is minimal possible. The function f_ k( x) can be described in the following way: form a list of distances d_ 1, d_ 2, . . . , d_ n where d_ i = | a_ i - x| ( distance between a_ i and x ) ; sort list d in non- descending order; take d_ k + 1 as a result. If there are multiple optimal answers you can print any of them.",
    "input": "The first line contains single integer T ( 1 \u2264 T \u2264 2 \u00b7 10^ 5 ) \u2014 number of queries. Next 2 \u00b7 T lines contain descriptions of queries. All queries are independent. The first line of each query contains two integers n , k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 k < n ) \u2014 the number of points and constant k . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 < a_ 2 < . . . < a_ n \u2264 10^ 9 ) \u2014 points in ascending order. It' s guaranteed that \u2211n doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print T integers \u2014 corresponding points x which have minimal possible value of f_ k( x) . If there are multiple answers you can print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "greedy"
    ],
    "id": "1175C"
  },
  {
    "title": "Ehab Fails to Be Thanos",
    "url": "https://codeforces.com/problemset/problem/1174/A",
    "history": "You' re given an array a of length 2n . Is it possible to reorder it in such way so that the sum of the first n elements isn' t equal to the sum of the last n elements?",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 1000 ) , where 2n is the number of elements in the array a . The second line contains 2n space- separated integers a_ 1 , a_ 2 , . . . , a_ 2n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the elements of the array a .",
    "output": "If there' s no solution, print \" - 1\" ( without quotes) . Otherwise, print a single line containing 2n space- separated integers. They must form a reordering of a . You are allowed to not change the order.",
    "note": "In the first example, the first n elements have sum 2+ 1+ 3= 6 while the last n elements have sum 1+ 1+ 2= 4 . The sums aren' t equal. In the second example, there' s no solution.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1174A"
  },
  {
    "title": "Nauuo and Chess",
    "url": "https://codeforces.com/problemset/problem/1173/B",
    "history": "Nauuo is a girl who loves playing chess. One day she invented a game by herself which needs n chess pieces to play on a m\u00d7 m chessboard. The rows and columns are numbered from 1 to m . We denote a cell on the intersection of the r - th row and c - th column as ( r, c) . The game' s goal is to place n chess pieces numbered from 1 to n on the chessboard, the i - th piece lies on ( r_ i, c_ i) , while the following rule is satisfied: for all pairs of pieces i and j , | r_ i- r_ j| + | c_ i- c_ j| \u2265| i- j| . Here | x| means the absolute value of x . However, Nauuo discovered that sometimes she couldn' t find a solution because the chessboard was too small. She wants to find the smallest chessboard on which she can put n pieces according to the rules. She also wonders how to place the pieces on such a chessboard. Can you help her?",
    "input": "The only line contains a single integer n ( 1\u2264 n\u2264 1000 ) \u2014 the number of chess pieces for the game.",
    "output": "The first line contains a single integer \u2014 the minimum value of m , where m is the length of sides of the suitable chessboard. The i - th of the next n lines contains two integers r_ i and c_ i ( 1\u2264 r_ i, c_ i\u2264 m ) \u2014 the coordinates of the i - th chess piece. If there are multiple answers, print any.",
    "note": "In the first example, you can' t place the two pieces on a 1\u00d71 chessboard without breaking the rule. But you can place two pieces on a 2\u00d72 chessboard like this: In the second example, you can' t place four pieces on a 2\u00d72 chessboard without breaking the rule. For example, if you place the pieces like this: then | r_ 1- r_ 3| + | c_ 1- c_ 3| = | 1- 2| + | 1- 1| = 1 , | 1- 3| = 2 , 1< 2 ; and | r_ 1- r_ 4| + | c_ 1- c_ 4| = | 1- 2| + | 1- 2| = 2 , | 1- 4| = 3 , 2< 3 . It doesn' t satisfy the rule. However, on a 3\u00d73 chessboard, you can place four pieces like this:",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1173B"
  },
  {
    "title": "Nauuo and Votes",
    "url": "https://codeforces.com/problemset/problem/1173/A",
    "history": "Nauuo is a girl who loves writing comments. One day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes. It' s known that there were x persons who would upvote, y persons who would downvote, and there were also another z persons who would vote, but you don' t know whether they would upvote or downvote. Note that each of the x+ y+ z people would vote exactly one time. There are three different results: if there are more people upvote than downvote, the result will be \" + \" ; if there are more people downvote than upvote, the result will be \" - \" ; otherwise the result will be \" 0\" . Because of the z unknown persons, the result may be uncertain ( i. e. there are more than one possible results) . More formally, the result is uncertain if and only if there exist two different situations of how the z persons vote, that the results are different in the two situations. Tell Nauuo the result or report that the result is uncertain.",
    "input": "The only line contains three integers x , y , z ( 0\u2264 x, y, z\u2264100 ) , corresponding to the number of persons who would upvote, downvote or unknown.",
    "output": "If there is only one possible result, print the result : \" + \" , \" - \" or \" 0\" . Otherwise, print \" ? \" to report that the result is uncertain.",
    "note": "In the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is \" - \" . In the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is \" + \" . In the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is \" 0\" . In the fourth example, if the only one person upvoted, the result would be \" + \" , otherwise, the result would be \" - \" . There are two possible results, so the result is uncertain.",
    "topics": [
      "greedy"
    ],
    "id": "1173A"
  },
  {
    "title": "Nauuo and Cards",
    "url": "https://codeforces.com/problemset/problem/1172/A",
    "history": "Nauuo is a girl who loves playing cards. One day she was playing cards but found that the cards were mixed with some empty ones. There are n cards numbered from 1 to n , and they were mixed with another n empty cards. She piled up the 2n cards and drew n of them. The n cards in Nauuo' s hands are given. The remaining n cards in the pile are also given in the order from top to bottom. In one operation she can choose a card in her hands and play it \u2014 put it at the bottom of the pile, then draw the top card from the pile. Nauuo wants to make the n numbered cards piled up in increasing order ( the i - th card in the pile from top to bottom is the card i ) as quickly as possible. Can you tell her the minimum number of operations?",
    "input": "The first line contains a single integer n ( 1\u2264 n\u2264 2\u00b7 10^ 5 ) \u2014 the number of numbered cards. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i\u2264 n ) \u2014 the initial cards in Nauuo' s hands. 0 represents an empty card. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0\u2264 b_ i\u2264 n ) \u2014 the initial cards in the pile, given in order from top to bottom. 0 represents an empty card. It is guaranteed that each number from 1 to n appears exactly once, either in a_ 1. . n or b_ 1. . n .",
    "output": "The output contains a single integer \u2014 the minimum number of operations to make the n numbered cards piled up in increasing order.",
    "note": "Example 1We can play the card 2 and draw the card 3 in the first operation. After that, we have [ 0, 3, 0] in hands and the cards in the pile are [ 0, 1, 2] from top to bottom. Then, we play the card 3 in the second operation. The cards in the pile are [ 1, 2, 3] , in which the cards are piled up in increasing order. Example 2Play an empty card and draw the card 1 , then play 1 , 2 , 3 in order.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1172A"
  },
  {
    "title": "Wheels",
    "url": "https://codeforces.com/problemset/problem/1170/F",
    "history": "Polycarp has n wheels and a car with m slots for wheels. The initial pressure in the i - th wheel is a_ i . Polycarp' s goal is to take exactly m wheels among the given n wheels and equalize the pressure in them ( then he can put these wheels in a car and use it for driving) . In one minute he can decrease or increase the pressure in any ( single) wheel by 1 . He can increase the pressure no more than k times in total because it is hard to pump up wheels. Help Polycarp and say what is the minimum number of minutes he needs to spend to equalize the pressure of at least m wheels among the given n wheels.",
    "input": "The first line of the input contains three integers n, m and k ( 1 \u2264 m \u2264 n \u2264 2 \u00b7 10^ 5, 0 \u2264 k \u2264 10^ 9 ) \u2014 the number of wheels, the number of slots for wheels in a car and the number of times Polycarp can increase by 1 the pressure in a wheel. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the pressure in the i - th wheel.",
    "output": "Print one integer \u2014 the minimum number of minutes Polycarp needs to spend to equalize the pressure in at least m wheels among the given n wheels.",
    "note": "",
    "topics": [
      "*special",
      "binary search",
      "greedy"
    ],
    "id": "1170F"
  },
  {
    "title": "Increasing by Modulo",
    "url": "https://codeforces.com/problemset/problem/1168/A",
    "history": "Toad Zitz has an array of integers, each integer is between 0 and m- 1 inclusive. The integers are a_ 1, a_ 2, . . . , a_ n . In one operation Zitz can choose an integer k and k indices i_ 1, i_ 2, . . . , i_ k such that 1 \u2264 i_ 1 < i_ 2 < . . . < i_ k \u2264 n . He should then change a_ i_ j to ( ( a_ i_ j+ 1) m) for each chosen integer i_ j . The integer m is fixed for all operations and indices. Here x y denotes the remainder of the division of x by y . Zitz wants to make his array non- decreasing with the minimum number of such operations. Find this minimum number of operations.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 300 000 ) \u2014 the number of integers in the array and the parameter m . The next line contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < m ) \u2014 the given array.",
    "output": "Output one integer: the minimum number of described operations Zitz needs to make his array non- decreasing. If no operations required, print 0 . It is easy to see that with enough operations Zitz can always make his array non- decreasing.",
    "note": "In the first example, the array is already non- decreasing, so the answer is 0 . In the second example, you can choose k= 2 , i_ 1 = 2 , i_ 2 = 5 , the array becomes [ 0, 0, 1, 3, 3] . It is non- decreasing, so the answer is 1 .",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1168A"
  },
  {
    "title": "Bicolored RBS",
    "url": "https://codeforces.com/problemset/problem/1167/D",
    "history": "A string is called bracket sequence if it does not contain any characters other than \" ( \" and \" ) \" . A bracket sequence is called regular ( shortly, RBS) if it is possible to obtain correct arithmetic expression by inserting characters \" + \" and \" 1\" into this sequence. For example, \" \" , \" ( ( ) ) \" and \" ( ) ( ) \" are RBS and \" ) ( \" and \" ( ( ) \" are not. We can see that each opening bracket in RBS is paired with some closing bracket, and, using this fact, we can define nesting depth of the RBS as maximum number of bracket pairs, such that the 2 - nd pair lies inside the 1 - st one, the 3 - rd one \u2014 inside the 2 - nd one and so on. For example, nesting depth of \" \" is 0 , \" ( ) ( ) ( ) \" is 1 and \" ( ) ( ( ( ) ) ( ) ) \" is 3 . Now, you are given RBS s of even length n . You should color each bracket of s into one of two colors: red or blue. Bracket sequence r , consisting only of red brackets, should be RBS, and bracket sequence, consisting only of blue brackets b , should be RBS. Any of them can be empty. You are not allowed to reorder characters in s , r or b . No brackets can be left uncolored. Among all possible variants you should choose one that minimizes maximum of r ' s and b ' s nesting depth. If there are multiple solutions you can print any of them.",
    "input": "The first line contains an even integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of RBS s . The second line contains regular bracket sequence s ( | s| = n , s_ i \u2208{ \" ( \" , \" ) \" } ) .",
    "output": "Print single string t of length n consisting of \" 0\" - s and \" 1\" - s. If t_ i is equal to 0 then character s_ i belongs to RBS r , otherwise s_ i belongs to b .",
    "note": "In the first example one of optimal solutions is s = \" ( ) \" . r is empty and b = \" ( ) \" . The answer is max( 0, 1) = 1 . In the second example it' s optimal to make s = \" ( ( ) ) \" . r = b = \" ( ) \" and the answer is 1 . In the third example we can make s = \" ( ( ( ) ( ) ) ( ) ) \" . r = \" ( ) ( ) \" and b = \" ( ( ) ( ) ) \" and the answer is 2 .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1167D"
  },
  {
    "title": "Telephone Number",
    "url": "https://codeforces.com/problemset/problem/1167/A",
    "history": "A telephone number is a sequence of exactly 11 digits, where the first digit is 8. For example, the sequence 80011223388 is a telephone number, but the sequences 70011223388 and 80000011223388 are not. You are given a string s of length n , consisting of digits. In one operation you can delete any character from string s . For example, it is possible to obtain strings 112, 111 or 121 from string 1121. You need to determine whether there is such a sequence of operations ( possibly empty) , after which the string s becomes a telephone number.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of string s . The second line of each test case contains the string s ( | s| = n ) consisting of digits.",
    "output": "For each test print one line. If there is a sequence of operations, after which s becomes a telephone number, print YES. Otherwise, print NO.",
    "note": "In the first test case you need to delete the first and the third digits. Then the string 7818005553535 becomes 88005553535.",
    "topics": [
      "brute force",
      "greedy",
      "strings"
    ],
    "id": "1167A"
  },
  {
    "title": "Cute Sequences",
    "url": "https://codeforces.com/problemset/problem/1166/D",
    "history": "Given a positive integer m , we say that a sequence x_ 1, x_ 2, . . . , x_ n of positive integers is m - cute if for every index i such that 2 \u2264 i \u2264 n it holds that x_ i = x_ i - 1 + x_ i - 2 + . . . + x_ 1 + r_ i for some positive integer r_ i satisfying 1 \u2264 r_ i \u2264 m . You will be given q queries consisting of three positive integers a , b and m . For each query you must determine whether or not there exists an m - cute sequence whose first term is a and whose last term is b . If such a sequence exists, you must additionally find an example of it.",
    "input": "The first line contains an integer number q ( 1 \u2264 q \u2264 10^ 3 ) \u2014 the number of queries. Each of the following q lines contains three integers a , b , and m ( 1 \u2264 a, b, m \u2264 10^ 14 , a \u2264 b ) , describing a single query.",
    "output": "For each query, if no m - cute sequence whose first term is a and whose last term is b exists, print - 1 . Otherwise print an integer k ( 1 \u2264 k \u2264 50 ) , followed by k integers x_ 1, x_ 2, . . . , x_ k ( 1 \u2264 x_ i \u2264 10^ 14 ) . These integers must satisfy x_ 1 = a , x_ k = b , and that the sequence x_ 1, x_ 2, . . . , x_ k is m - cute. It can be shown that under the problem constraints, for each query either no m - cute sequence exists, or there exists one with at most 50 terms. If there are multiple possible sequences, you may print any of them.",
    "note": "Consider the sample. In the first query, the sequence 5, 6, 13, 26 is valid since 6 = 5 + 1 , 13 = 6 + 5 + 2 and 26 = 13 + 6 + 5 + 2 have the bold values all between 1 and 2 , so the sequence is 2 - cute. Other valid sequences, such as 5, 7, 13, 26 are also accepted. In the second query, the only possible 1 - cute sequence starting at 3 is 3, 4, 8, 16, . . . , which does not contain 9 .",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1166D"
  },
  {
    "title": "Silent Classroom",
    "url": "https://codeforces.com/problemset/problem/1166/A",
    "history": "There are n students in the first grade of Nlogonia high school. The principal wishes to split the students into two classrooms ( each student must be in exactly one of the classrooms) . Two distinct students whose name starts with the same letter will be chatty if they are put in the same classroom ( because they must have a lot in common) . Let x be the number of such pairs of students in a split. Pairs ( a, b) and ( b, a) are the same and counted only once. For example, if there are 6 students: \" olivia\" , \" jacob\" , \" tanya\" , \" jack\" , \" oliver\" and \" jessica\" , then: splitting into two classrooms ( \" jack\" , \" jacob\" , \" jessica\" , \" tanya\" ) and ( \" olivia\" , \" oliver\" ) will give x= 4 ( 3 chatting pairs in the first classroom, 1 chatting pair in the second classroom) , splitting into two classrooms ( \" jack\" , \" tanya\" , \" olivia\" ) and ( \" jessica\" , \" oliver\" , \" jacob\" ) will give x= 1 ( 0 chatting pairs in the first classroom, 1 chatting pair in the second classroom) . You are given the list of the n names. What is the minimum x we can obtain by splitting the students into classrooms? Note that it is valid to place all of the students in one of the classrooms, leaving the other one empty.",
    "input": "The first line contains a single integer n ( 1\u2264 n \u2264 100 ) \u2014 the number of students. After this n lines follow. The i - th line contains the name of the i - th student. It is guaranteed each name is a string of lowercase English letters of length at most 20 . Note that multiple students may share the same name.",
    "output": "The output must consist of a single integer x \u2014 the minimum possible number of chatty pairs.",
    "note": "In the first sample the minimum number of pairs is 1 . This can be achieved, for example, by putting everyone except jose in one classroom, and jose in the other, so jorge and jerry form the only chatty pair. In the second sample the minimum number of pairs is 2 . This can be achieved, for example, by putting kambei, gorobei, shichiroji and kyuzo in one room and putting heihachi, katsushiro and kikuchiyo in the other room. In this case the two pairs are kambei and kyuzo, and katsushiro and kikuchiyo. In the third sample the minimum number of pairs is 4 . This can be achieved by placing three of the students named mike in one classroom and the other two students in another classroom. Thus there will be three chatty pairs in one classroom and one chatty pair in the other classroom.",
    "topics": [
      "combinatorics",
      "greedy"
    ],
    "id": "1166A"
  },
  {
    "title": "Microtransactions (hard version)",
    "url": "https://codeforces.com/problemset/problem/1165/F2",
    "history": "The only difference between easy and hard versions is constraints. Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions \u2014 and he won' t start playing until he gets all of them. Each day ( during the morning) Ivan earns exactly one burle. There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_ i microtransactions of the i - th type ( he orders microtransactions during the evening) . Ivan can order any ( possibly zero) number of microtransactions of any types during any day ( of course, if he has enough money to do it) . If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles. There are also m special offers in the game shop. The j - th offer ( d_ j, t_ j) means that microtransactions of the t_ j - th type are on sale during the d_ j - th day. Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of types of microtransactions and the number of special offers in the game shop. The second line of the input contains n integers k_ 1, k_ 2, . . . , k_ n ( 0 \u2264 k_ i \u2264 2 \u00b7 10^ 5 ) , where k_ i is the number of copies of microtransaction of the i - th type Ivan has to order. It is guaranteed that sum of all k_ i is not less than 1 and not greater than 2 \u00b7 10^ 5 . The next m lines contain special offers. The j - th of these lines contains the j - th special offer. It is given as a pair of integers ( d_ j, t_ j) ( 1 \u2264 d_ j \u2264 2 \u00b7 10^ 5, 1 \u2264 t_ j \u2264 n ) and means that microtransactions of the t_ j - th type are on sale during the d_ j - th day.",
    "output": "Print one integer \u2014 the minimum day when Ivan can order all microtransactions he wants and actually start playing.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "implementation"
    ],
    "id": "1165F2"
  },
  {
    "title": "Microtransactions (easy version)",
    "url": "https://codeforces.com/problemset/problem/1165/F1",
    "history": "The only difference between easy and hard versions is constraints. Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions \u2014 and he won' t start playing until he gets all of them. Each day ( during the morning) Ivan earns exactly one burle. There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_ i microtransactions of the i - th type ( he orders microtransactions during the evening) . Ivan can order any ( possibly zero) number of microtransactions of any types during any day ( of course, if he has enough money to do it) . If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles. There are also m special offers in the game shop. The j - th offer ( d_ j, t_ j) means that microtransactions of the t_ j - th type are on sale during the d_ j - th day. Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the number of types of microtransactions and the number of special offers in the game shop. The second line of the input contains n integers k_ 1, k_ 2, . . . , k_ n ( 0 \u2264 k_ i \u2264 1000 ) , where k_ i is the number of copies of microtransaction of the i - th type Ivan has to order. It is guaranteed that sum of all k_ i is not less than 1 and not greater than 1000 . The next m lines contain special offers. The j - th of these lines contains the j - th special offer. It is given as a pair of integers ( d_ j, t_ j) ( 1 \u2264 d_ j \u2264 1000, 1 \u2264 t_ j \u2264 n ) and means that microtransactions of the t_ j - th type are on sale during the d_ j - th day.",
    "output": "Print one integer \u2014 the minimum day when Ivan can order all microtransactions he wants and actually start playing.",
    "note": "",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1165F1"
  },
  {
    "title": "Two Arrays and Sum of Functions",
    "url": "https://codeforces.com/problemset/problem/1165/E",
    "history": "You are given two arrays a and b , both of length n . Let' s define a function f( l, r) = \u2211_ l \u2264 i \u2264 r a_ i \u00b7 b_ i . Your task is to reorder the elements ( choose an arbitrary order of elements) of the array b to minimize the value of \u2211_ 1 \u2264 l \u2264 r \u2264 n f( l, r) . Since the answer can be very large, you have to print it modulo 998244353 . Note that you should minimize the answer but not its remainder.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a and b . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the i - th element of a . The third line of the input contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ j \u2264 10^ 6 ) , where b_ j is the j - th element of b .",
    "output": "Print one integer \u2014 the minimum possible value of \u2211_ 1 \u2264 l \u2264 r \u2264 n f( l, r) after rearranging elements of b , taken modulo 998244353 . Note that you should minimize the answer but not its remainder.",
    "note": "",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1165E"
  },
  {
    "title": "Good String",
    "url": "https://codeforces.com/problemset/problem/1165/C",
    "history": "Let' s call ( yet again) a string good if its length is even, and every character in odd position of this string is different from the next character ( the first character is different from the second, the third is different from the fourth, and so on) . For example, the strings good, string and xyyx are good strings, and the strings bad, aa and aabc are not good. Note that the empty string is considered good. You are given a string s , you have to delete minimum number of characters from this string so that it becomes good.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of characters in s . The second line contains the string s , consisting of exactly n lowercase Latin letters.",
    "output": "In the first line, print one integer k ( 0 \u2264 k \u2264 n ) \u2014 the minimum number of characters you have to delete from s to make it good. In the second line, print the resulting string s . If it is empty, you may leave the second line blank, or not print it at all.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1165C"
  },
  {
    "title": "Polycarp Training",
    "url": "https://codeforces.com/problemset/problem/1165/B",
    "history": "Polycarp wants to train before another programming competition. During the first day of his training he should solve exactly 1 problem, during the second day \u2014 exactly 2 problems, during the third day \u2014 exactly 3 problems, and so on. During the k - th day he should solve k problems. Polycarp has a list of n contests, the i - th contest consists of a_ i problems. During each day Polycarp has to choose exactly one of the contests he didn' t solve yet and solve it. He solves exactly k problems from this contest. Other problems are discarded from it. If there are no contests consisting of at least k problems that Polycarp didn' t solve yet during the k - th day, then Polycarp stops his training. How many days Polycarp can train if he chooses the contests optimally?",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of contests. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems in the i - th contest.",
    "output": "Print one integer \u2014 the maximum number of days Polycarp can train if he chooses the contests optimally.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1165B"
  },
  {
    "title": "Eating Soup",
    "url": "https://codeforces.com/problemset/problem/1163/A",
    "history": "The three friends, Kuro, Shiro, and Katie, met up again! It' s time for a party. . . What the cats do when they unite? Right, they have a party. Since they wanted to have as much fun as possible, they invited all their friends. Now n cats are at the party, sitting in a circle and eating soup. The rules are simple: anyone having finished their soup leaves the circle. Katie suddenly notices that whenever a cat leaves, the place where she was sitting becomes an empty space, which means the circle is divided into smaller continuous groups of cats sitting next to each other. At the moment Katie observes, there are m cats who left the circle. This raises a question for Katie: what is the maximum possible number of groups the circle is divided into at the moment? Could you help her with this curiosity? You can see the examples and their descriptions with pictures in the \" Note\" section.",
    "input": "The only line contains two integers n and m ( 2 \u2264 n \u2264 1000 , 0 \u2264 m \u2264 n ) \u2014 the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.",
    "output": "Print a single integer \u2014 the maximum number of groups of cats at the moment Katie observes.",
    "note": "In the first example, originally there are 7 cats sitting as shown below, creating a single group: At the observed moment, 4 cats have left the table. Suppose the cats 2 , 3 , 5 and 7 have left, then there are 3 groups remaining. It is possible to show that it is the maximum possible number of groups remaining. In the second example, there are 6 cats sitting as shown below: At the observed moment, 2 cats have left the table. Suppose the cats numbered 3 and 6 left, then there will be 2 groups remaining ( { 1, 2} and { 4, 5} ) . It is impossible to have more than 2 groups of cats remaining. In the third example, no cats have left, so there is 1 group consisting of all cats. In the fourth example, all cats have left the circle, so there are 0 groups.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1163A"
  },
  {
    "title": "Double Matrix",
    "url": "https://codeforces.com/problemset/problem/1162/B",
    "history": "You are given two n \u00d7 m matrices containing integers. A sequence of integers is strictly increasing if each next number is greater than the previous one. A row is strictly increasing if all numbers from left to right are strictly increasing. A column is strictly increasing if all numbers from top to bottom are strictly increasing. A matrix is increasing if all rows are strictly increasing and all columns are strictly increasing. For example, the matrix [ 9 10 11; 11 12 14; ] is increasing because each individual row and column is strictly increasing. On the other hand, the matrix [ 1 1; 2 3; ] is not increasing because the first row is not strictly increasing. Let a position in the i - th row ( from top) and j - th column ( from left) in a matrix be denoted as ( i, j) . In one operation, you can choose any two numbers i and j and swap the number located in ( i, j) in the first matrix with the number in ( i, j) in the second matrix. In other words, you can swap two numbers in different matrices if they are located in the corresponding positions. You would like to make both matrices increasing by performing some number of operations ( possibly none) . Determine if it is possible to do this. If it is, print \" Possible\" , otherwise, print \" Impossible\" .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 50 ) \u2014 the dimensions of each matrix. Each of the next n lines contains m integers a_ i1, a_ i2, . . . , a_ im ( 1 \u2264 a_ ij\u2264 10^ 9 ) \u2014 the number located in position ( i, j) in the first matrix. Each of the next n lines contains m integers b_ i1, b_ i2, . . . , b_ im ( 1 \u2264 b_ ij\u2264 10^ 9 ) \u2014 the number located in position ( i, j) in the second matrix.",
    "output": "Print a string \" Impossible\" or \" Possible\" .",
    "note": "The first example, we can do an operation on the top left and bottom right cells of the matrices. The resulting matrices will be [ 9 10; 11 12; ] and [ 2 4; 3 5; ] . In the second example, we don' t need to do any operations. In the third example, no matter what we swap, we can' t fix the first row to be strictly increasing in both matrices.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1162B"
  },
  {
    "title": "Winding polygonal line",
    "url": "https://codeforces.com/problemset/problem/1158/D",
    "history": "Vasya has n different points A_ 1, A_ 2, . . . A_ n on the plane. No three of them lie on the same line He wants to place them in some order A_ p_ 1, A_ p_ 2, . . . , A_ p_ n , where p_ 1, p_ 2, . . . , p_ n \u2014 some permutation of integers from 1 to n . After doing so, he will draw oriented polygonal line on these points, drawing oriented segments from each point to the next in the chosen order. So, for all 1 \u2264 i \u2264 n- 1 he will draw oriented segment from point A_ p_ i to point A_ p_ i+ 1 . He wants to make this polygonal line satisfying 2 conditions: it will be non- self- intersecting, so any 2 segments which are not neighbors don' t have common points. it will be winding. Vasya has a string s , consisting of ( n- 2) symbols \" L\" or \" R\" . Let' s call an oriented polygonal line winding, if its i - th turn left, if s_ i = \" L\" and right, if s_ i = \" R\" . More formally: i - th turn will be in point A_ p_ i+ 1 , where oriented segment from point A_ p_ i to point A_ p_ i+ 1 changes to oriented segment from point A_ p_ i+ 1 to point A_ p_ i+ 2 . Let' s define vectors v_ 1 = A_ p_ i A_ p_ i+ 1 and v_ 2 = A_ p_ i+ 1 A_ p_ i+ 2 . Then if in order to rotate the vector v_ 1 by the smallest possible angle, so that its direction coincides with the direction of the vector v_ 2 we need to make a turn counterclockwise, then we say that i - th turn is to the left, and otherwise to the right. For better understanding look at this pictures with some examples of turns: There are left turns on this picture There are right turns on this picture You are given coordinates of the points A_ 1, A_ 2, . . . A_ n on the plane and string s . Find a permutation p_ 1, p_ 2, . . . , p_ n of the integers from 1 to n , such that the polygonal line, drawn by Vasya satisfy two necessary conditions.",
    "input": "The first line contains one integer n \u2014 the number of points ( 3 \u2264 n \u2264 2000 ) . Next n lines contains two integers x_ i and y_ i , divided by space \u2014 coordinates of the point A_ i on the plane ( - 10^ 9 \u2264 x_ i, y_ i \u2264 10^ 9 ) . The last line contains a string s consisting of symbols \" L\" and \" R\" with length ( n- 2) . It is guaranteed that all points are different and no three points lie at the same line.",
    "output": "If the satisfying permutation doesn' t exists, print - 1 . In the other case, print n numbers p_ 1, p_ 2, . . . , p_ n \u2014 the permutation which was found ( 1 \u2264 p_ i \u2264 n and all p_ 1, p_ 2, . . . , p_ n are different) . If there exists more than one solution, you can find any.",
    "note": "This is the picture with the polygonal line from the 1 test: As we see, this polygonal line is non- self- intersecting and winding, because the turn in point 2 is left. This is the picture with the polygonal line from the 2 test:",
    "topics": [
      "constructive algorithms",
      "geometry",
      "greedy",
      "math"
    ],
    "id": "1158D"
  },
  {
    "title": "Permutation recovery",
    "url": "https://codeforces.com/problemset/problem/1158/C",
    "history": "Vasya has written some permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , so for all 1 \u2264 i \u2264 n it is true that 1 \u2264 p_ i \u2264 n and all p_ 1, p_ 2, . . . , p_ n are different. After that he wrote n numbers next_ 1, next_ 2, . . . , next_ n . The number next_ i is equal to the minimal index i < j \u2264 n , such that p_ j > p_ i . If there is no such j let' s let' s define as next_ i = n + 1 . In the evening Vasya went home from school and due to rain, his notebook got wet. Now it is impossible to read some written numbers. Permutation and some values next_ i are completely lost! If for some i the value next_ i is lost, let' s say that next_ i = - 1 . You are given numbers next_ 1, next_ 2, . . . , next_ n ( maybe some of them are equal to - 1 ) . Help Vasya to find such permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , that he can write it to the notebook and all numbers next_ i , which are not equal to - 1 , will be correct.",
    "input": "The first line contains one integer t \u2014 the number of test cases ( 1 \u2264 t \u2264 100 000 ) . Next 2 \u00b7 t lines contains the description of test cases, two lines for each. The first line contains one integer n \u2014 the length of the permutation, written by Vasya ( 1 \u2264 n \u2264 500 000 ) . The second line contains n integers next_ 1, next_ 2, . . . , next_ n , separated by spaces ( next_ i = - 1 or i < next_ i \u2264 n + 1 ) . It is guaranteed, that the sum of n in all test cases doesn' t exceed 500 000 . In hacks you can only use one test case, so T = 1 .",
    "output": "Print T lines, in i - th of them answer to the i - th test case. If there is no such permutations p_ 1, p_ 2, . . . , p_ n of integers from 1 to n , that Vasya could write, print the only number - 1 . In the other case print n different integers p_ 1, p_ 2, . . . , p_ n , separated by spaces ( 1 \u2264 p_ i \u2264 n ) . All defined values of next_ i which are not equal to - 1 should be computed correctly p_ 1, p_ 2, . . . , p_ n using defenition given in the statement of the problem. If there exists more than one solution you can find any of them.",
    "note": "In the first test case for permutation p = [ 1, 2, 3] Vasya should write next = [ 2, 3, 4] , because each number in permutation is less than next. It' s easy to see, that it is the only satisfying permutation. In the third test case, any permutation can be the answer because all numbers next_ i are lost. In the fourth test case, there is no satisfying permutation, so the answer is - 1 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1158C"
  },
  {
    "title": "The Party and Sweets",
    "url": "https://codeforces.com/problemset/problem/1158/A",
    "history": "n boys and m girls came to the party. Each boy presented each girl some integer number of sweets ( possibly zero) . All boys are numbered with integers from 1 to n and all girls are numbered with integers from 1 to m . For all 1 \u2264 i \u2264 n the minimal number of sweets, which i - th boy presented to some girl is equal to b_ i and for all 1 \u2264 j \u2264 m the maximal number of sweets, which j - th girl received from some boy is equal to g_ j . More formally, let a_ i, j be the number of sweets which the i - th boy give to the j - th girl. Then b_ i is equal exactly to the minimum among values a_ i, 1, a_ i, 2, . . . , a_ i, m and g_ j is equal exactly to the maximum among values b_ 1, j, b_ 2, j, . . . , b_ n, j . You are interested in the minimum total number of sweets that boys could present, so you need to minimize the sum of a_ i, j for all ( i, j) such that 1 \u2264 i \u2264 n and 1 \u2264 j \u2264 m . You are given the numbers b_ 1, . . . , b_ n and g_ 1, . . . , g_ m , determine this number.",
    "input": "The first line contains two integers n and m , separated with space \u2014 the number of boys and girls, respectively ( 2 \u2264 n, m \u2264 100 000 ) . The second line contains n integers b_ 1, . . . , b_ n , separated by spaces \u2014 b_ i is equal to the minimal number of sweets, which i - th boy presented to some girl ( 0 \u2264 b_ i \u2264 10^ 8 ) . The third line contains m integers g_ 1, . . . , g_ m , separated by spaces \u2014 g_ j is equal to the maximal number of sweets, which j - th girl received from some boy ( 0 \u2264 g_ j \u2264 10^ 8 ) .",
    "output": "If the described situation is impossible, print - 1 . In another case, print the minimal total number of sweets, which boys could have presented and all conditions could have satisfied.",
    "note": "In the first test, the minimal total number of sweets, which boys could have presented is equal to 12 . This can be possible, for example, if the first boy presented 1 and 4 sweets, the second boy presented 3 and 2 sweets and the third boy presented 1 and 1 sweets for the first and the second girl, respectively. It' s easy to see, that all conditions are satisfied and the total number of sweets is equal to 12 . In the second test, the boys couldn' t have presented sweets in such way, that all statements satisfied. In the third test, the minimal total number of sweets, which boys could have presented is equal to 4 . This can be possible, for example, if the first boy presented 1 , 1 , 2 sweets for the first, second, third girl, respectively and the second boy didn' t present sweets for each girl. It' s easy to see, that all conditions are satisfied and the total number of sweets is equal to 4 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "implementation",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "1158A"
  },
  {
    "title": "Maximum Balanced Circle",
    "url": "https://codeforces.com/problemset/problem/1157/F",
    "history": "There are n people in a row. The height of the i - th person is a_ i . You can choose any subset of these people and try to arrange them into a balanced circle. A balanced circle is such an order of people that the difference between heights of any adjacent people is no more than 1 . For example, let heights of chosen people be [ a_ i_ 1, a_ i_ 2, . . . , a_ i_ k] , where k is the number of people you choose. Then the condition | a_ i_ j - a_ i_ j + 1| \u2264 1 should be satisfied for all j from 1 to k- 1 and the condition | a_ i_ 1 - a_ i_ k| \u2264 1 should be also satisfied. | x| means the absolute value of x . It is obvious that the circle consisting of one person is balanced. Your task is to choose the maximum number of people and construct a balanced circle consisting of all chosen people. It is obvious that the circle consisting of one person is balanced so the answer always exists.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of people. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the height of the i - th person.",
    "output": "In the first line of the output print k \u2014 the number of people in the maximum balanced circle. In the second line print k integers res_ 1, res_ 2, . . . , res_ k , where res_ j is the height of the j - th person in the maximum balanced circle. The condition | res_ j - res_ j + 1| \u2264 1 should be satisfied for all j from 1 to k- 1 and the condition | res_ 1 - res_ k| \u2264 1 should be also satisfied.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1157F"
  },
  {
    "title": "Minimum Array",
    "url": "https://codeforces.com/problemset/problem/1157/E",
    "history": "You are given two arrays a and b , both of length n . All elements of both arrays are from 0 to n- 1 . You can reorder elements of the array b ( if you want, you may leave the order of elements as it is) . After that, let array c be the array of length n , the i - th element of this array is c_ i = ( a_ i + b_ i) % n , where x % y is x modulo y . Your task is to reorder elements of the array b to obtain the lexicographically minimum possible array c . Array x of length n is lexicographically less than array y of length n , if there exists such i ( 1 \u2264 i \u2264 n ) , that x_ i < y_ i , and for any j ( 1 \u2264 j < i ) x_ j = y_ j .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a , b and c . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < n ) , where a_ i is the i - th element of a . The third line of the input contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i < n ) , where b_ i is the i - th element of b .",
    "output": "Print the lexicographically minimum possible array c . Recall that your task is to reorder elements of the array b and obtain the lexicographically minimum possible array c , where the i - th element of c is c_ i = ( a_ i + b_ i) % n .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1157E"
  },
  {
    "title": "N Problems During K Days",
    "url": "https://codeforces.com/problemset/problem/1157/D",
    "history": "Polycarp has to solve exactly n problems to improve his programming skill before an important programming competition. But this competition will be held very soon, most precisely, it will start in k days. It means that Polycarp has exactly k days for training! Polycarp doesn' t want to procrastinate, so he wants to solve at least one problem during each of k days. He also doesn' t want to overwork, so if he solves x problems during some day, he should solve no more than 2x problems during the next day. And, at last, he wants to improve his skill, so if he solves x problems during some day, he should solve at least x+ 1 problem during the next day. More formally: let [ a_ 1, a_ 2, . . . , a_ k] be the array of numbers of problems solved by Polycarp. The i - th element of this array is the number of problems Polycarp solves during the i - th day of his training. Then the following conditions must be satisfied: sum of all a_ i for i from 1 to k should be n ; a_ i should be greater than zero for each i from 1 to k ; the condition a_ i < a_ i + 1\u2264 2 a_ i should be satisfied for each i from 1 to k- 1 . Your problem is to find any array a of length k satisfying the conditions above or say that it is impossible to do it.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 10^ 9, 1 \u2264 k \u2264 10^ 5 ) \u2014 the number of problems Polycarp wants to solve and the number of days Polycarp wants to train.",
    "output": "If it is impossible to find any array a of length k satisfying Polycarp' s rules of training, print \" NO\" in the first line. Otherwise print \" YES\" in the first line, then print k integers a_ 1, a_ 2, . . . , a_ k in the second line, where a_ i should be the number of problems Polycarp should solve during the i - th day. If there are multiple answers, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1157D"
  },
  {
    "title": "Increasing Subsequence (hard version)",
    "url": "https://codeforces.com/problemset/problem/1157/C2",
    "history": "The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct ( this condition may be false for problem C2) . You are given a sequence a consisting of n integers. You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest ( the length of the sequence is the number of elements in it) . For example, for the sequence [ 1, 2, 4, 3, 2] the answer is 4 ( you take 1 and the sequence becomes [ 2, 4, 3, 2] , then you take the rightmost element 2 and the sequence becomes [ 2, 4, 3] , then you take 3 and the sequence becomes [ 2, 4] and then you take 4 and the sequence becomes [ 2] , the obtained increasing sequence is [ 1, 2, 3, 4] ) .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the i - th element of a .",
    "output": "In the first line of the output print k \u2014 the maximum number of elements in a strictly increasing sequence you can obtain. In the second line print a string s of length k , where the j - th character of this string s_ j should be ' L' if you take the leftmost element during the j - th move and ' R' otherwise. If there are multiple answers, you can print any.",
    "note": "The first example is described in the problem statement.",
    "topics": [
      "greedy"
    ],
    "id": "1157C2"
  },
  {
    "title": "Increasing Subsequence (easy version)",
    "url": "https://codeforces.com/problemset/problem/1157/C1",
    "history": "The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct ( this condition may be false for problem C2) . You are given a sequence a consisting of n integers. All these integers are distinct, each value from 1 to n appears in the sequence exactly once. You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest ( the length of the sequence is the number of elements in it) . For example, for the sequence [ 2, 1, 5, 4, 3] the answer is 4 ( you take 2 and the sequence becomes [ 1, 5, 4, 3] , then you take the rightmost element 3 and the sequence becomes [ 1, 5, 4] , then you take 4 and the sequence becomes [ 1, 5] and then you take 5 and the sequence becomes [ 1] , the obtained increasing sequence is [ 2, 3, 4, 5] ) .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the i - th element of a . All these integers are pairwise distinct.",
    "output": "In the first line of the output print k \u2014 the maximum number of elements in a strictly increasing sequence you can obtain. In the second line print a string s of length k , where the j - th character of this string s_ j should be ' L' if you take the leftmost element during the j - th move and ' R' otherwise. If there are multiple answers, you can print any.",
    "note": "The first example is described in the problem statement.",
    "topics": [
      "greedy"
    ],
    "id": "1157C1"
  },
  {
    "title": "Long Number",
    "url": "https://codeforces.com/problemset/problem/1157/B",
    "history": "You are given a long decimal number a consisting of n digits from 1 to 9 . You also have a function f that maps every digit from 1 to 9 to some ( possibly the same) digit from 1 to 9 . You can perform the following operation no more than once: choose a non- empty contiguous subsegment of digits in a , and replace each digit x from this segment with f( x) . For example, if a = 1337 , f( 1) = 1 , f( 3) = 5 , f( 7) = 3 , and you choose the segment consisting of three rightmost digits, you get 1553 as the result. What is the maximum possible number you can obtain applying this operation no more than once?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of digits in a . The second line contains a string of n characters, denoting the number a . Each character is a decimal digit from 1 to 9 . The third line contains exactly 9 integers f( 1) , f( 2) , . . . , f( 9) ( 1 \u2264 f( i) \u2264 9 ) .",
    "output": "Print the maximum number you can get after applying the operation described in the statement no more than once.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1157B"
  },
  {
    "title": "Optimizer",
    "url": "https://codeforces.com/problemset/problem/1156/G",
    "history": "Let' s analyze a program written on some strange programming language. The variables in this language have names consisting of 1 to 4 characters, and each character is a lowercase or an uppercase Latin letter, or a digit. There is an extra constraint that the first character should not be a digit. There are four types of operations in the program, each denoted by one of the characters: , ^ , # or . Each line of the program has one of the following formats: < lvalue> = < rvalue> , where < lvalue> and < rvalue> are valid variable names; < lvalue> = < arg1> < op> < arg2> , where < lvalue> , < arg1> and < arg2> are valid variable names, and < op> is an operation character. The program is executed line- by- line, and the result of execution is stored in a variable having the name res. If res is never assigned in the program, then the result will be equal to the value of res before running the program. Two programs are called equivalent if no matter which operations do characters, ^ , # and denote ( but, obviously, performing the same operation on the same arguments gives the same result) and which values do variables have before execution of program, the value of res after running the first program is equal to the value of res after running the second program ( the programs are executed independently) . You are given a program consisting of n lines. Your task is to write a program consisting of minimum possible number of lines that is equivalent to the program you are given.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of lines in the program. Then n lines follow \u2014 the program itself. Each line corresponds to the format described in the statement and has no extra whitespaces.",
    "output": "In the first line print k \u2014 the minimum number of lines in the equivalent program. Then print k lines without any whitespaces \u2014 an equivalent program having exactly k lines, in the same format it is described in the statement.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "hashing",
      "implementation"
    ],
    "id": "1156G"
  },
  {
    "title": "Match Points",
    "url": "https://codeforces.com/problemset/problem/1156/C",
    "history": "You are given a set of points x_ 1 , x_ 2 , . . . , x_ n on the number line. Two points i and j can be matched with each other if the following conditions hold: neither i nor j is matched with any other point; | x_ i - x_ j| \u2265 z . What is the maximum number of pairs of points you can match with each other?",
    "input": "The first line contains two integers n and z ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 z \u2264 10^ 9 ) \u2014 the number of points and the constraint on the distance between matched points, respectively. The second line contains n integers x_ 1 , x_ 2 , . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 9 ) .",
    "output": "Print one integer \u2014 the maximum number of pairs of points you can match with each other.",
    "note": "In the first example, you may match point 1 with point 2 ( | 3 - 1| \u2265 2 ) , and point 3 with point 4 ( | 7 - 3| \u2265 2 ) . In the second example, you may match point 1 with point 3 ( | 5 - 10| \u2265 5 ) .",
    "topics": [
      "binary search",
      "greedy",
      "sortings",
      "ternary search",
      "two pointers"
    ],
    "id": "1156C"
  },
  {
    "title": "Ugly Pairs",
    "url": "https://codeforces.com/problemset/problem/1156/B",
    "history": "You are given a string, consisting of lowercase Latin letters. A pair of neighbouring letters in a string is considered ugly if these letters are also neighbouring in a alphabet. For example, string \" abaca\" contains ugly pairs at positions ( 1, 2) \u2014 \" ab\" and ( 2, 3) \u2014 \" ba\" . Letters ' a' and ' z' aren' t considered neighbouring in a alphabet. Can you rearrange the letters of a given string so that there are no ugly pairs? You can choose any order of the letters of the given string but you can' t add any new letters or remove the existing ones. You can also leave the order the same. If there are multiple answers, print any of them. You also have to answer T separate queries.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of queries. Each of the next T lines contains string s ( 1 \u2264 | s| \u2264 100) \u2014 the string for the next query. It is guaranteed that it contains only lowercase Latin letters. Note that in hacks you have to set T = 1 .",
    "output": "Print T lines. The i - th line should contain the answer to the i - th query. If the answer for the i - th query exists, then print such a rearrangment of letters of the given string that it contains no ugly pairs. You can choose any order of the letters of the given string but you can' t add any new letters or remove the existing ones. You can also leave the order the same. If there are multiple answers, print any of them. Otherwise print \" No answer\" for that query.",
    "note": "In the first example answer \" bdac\" is also correct. The second example showcases the fact that only neighbouring in alphabet letters are not allowed. The same letter is ok. There are lots of valid answers for the third example.",
    "topics": [
      "dfs and similar",
      "greedy",
      "implementation",
      "sortings",
      "strings"
    ],
    "id": "1156B"
  },
  {
    "title": "Beautiful Array",
    "url": "https://codeforces.com/problemset/problem/1155/D",
    "history": "You are given an array a consisting of n integers. Beauty of array is the maximum sum of some consecutive subarray of this array ( this subarray may be empty) . For example, the beauty of the array [ 10, - 5, 10, - 4, 1] is 15, and the beauty of the array [ - 3, - 5, - 1] is 0. You may choose at most one consecutive subarray of a and multiply all values contained in this subarray by x . You want to maximize the beauty of array after applying at most one such operation.",
    "input": "The first line contains two integers n and x ( 1 \u2264 n \u2264 3 \u00b7 10^ 5, - 100 \u2264 x \u2264 100 ) \u2014 the length of array a and the integer x respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the array a .",
    "output": "Print one integer \u2014 the maximum possible beauty of array a after multiplying all values belonging to some consecutive subarray x .",
    "note": "In the first test case we need to multiply the subarray [ - 2, 1, - 6] , and the array becomes [ - 3, 8, 4, - 2, 12] with beauty 22 ( [ - 3, 8, 4, - 2, 12] ) . In the second test case we don' t need to multiply any subarray at all. In the third test case no matter which subarray we multiply, the beauty of array will be equal to 0.",
    "topics": [
      "brute force",
      "data structures",
      "divide and conquer",
      "dp",
      "greedy"
    ],
    "id": "1155D"
  },
  {
    "title": "Game with Telephone Numbers",
    "url": "https://codeforces.com/problemset/problem/1155/B",
    "history": "A telephone number is a sequence of exactly 11 digits such that its first digit is 8. Vasya and Petya are playing a game. Initially they have a string s of length n ( n is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player' s move it may be 112, 111 or 121. The game ends when the length of string s becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins. You have to determine if Vasya has a winning strategy ( that is, if Vasya can win the game no matter which characters Petya chooses during his moves) .",
    "input": "The first line contains one integer n ( 13 \u2264 n < 10^ 5 , n is odd) \u2014 the length of string s . The second line contains the string s ( | s| = n ) consisting only of decimal digits.",
    "output": "If Vasya has a strategy that guarantees him victory, print YES. Otherwise print NO.",
    "note": "In the first example Vasya needs to erase the second character. Then Petya cannot erase a character from the remaining string 880011223344 so that it does not become a telephone number. In the second example after Vasya' s turn Petya can erase one character character 8. The resulting string can' t be a telephone number, because there is no digit 8 at all.",
    "topics": [
      "games",
      "greedy",
      "implementation"
    ],
    "id": "1155B"
  },
  {
    "title": "Minimum Possible LCM",
    "url": "https://codeforces.com/problemset/problem/1154/G",
    "history": "You are given an array a consisting of n integers a_ 1, a_ 2, . . . , a_ n . Your problem is to find such pair of indices i, j ( 1 \u2264 i < j \u2264 n ) that lcm( a_ i, a_ j) is minimum possible. lcm( x, y) is the least common multiple of x and y ( minimum positive number such that both x and y are divisors of this number) .",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 10^ 6 ) \u2014 the number of elements in a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 7 ) , where a_ i is the i - th element of a .",
    "output": "Print two integers i and j ( 1 \u2264 i < j \u2264 n ) such that the value of lcm( a_ i, a_ j) is minimum among all valid pairs i, j . If there are multiple answers, you can print any.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1154G"
  },
  {
    "title": "Shovels Shop",
    "url": "https://codeforces.com/problemset/problem/1154/F",
    "history": "There are n shovels in the nearby shop. The i - th shovel costs a_ i bourles. Misha has to buy exactly k shovels. Each shovel can be bought no more than once. Misha can buy shovels by several purchases. During one purchase he can choose any subset of remaining ( non- bought) shovels and buy this subset. There are also m special offers in the shop. The j - th of them is given as a pair ( x_ j, y_ j) , and it means that if Misha buys exactly x_ j shovels during one purchase then y_ j most cheapest of them are for free ( i. e. he will not pay for y_ j most cheapest shovels during the current purchase) . Misha can use any offer any ( possibly, zero) number of times, but he cannot use more than one offer during one purchase ( but he can buy shovels without using any offers) . Your task is to calculate the minimum cost of buying k shovels, if Misha buys them optimally.",
    "input": "The first line of the input contains three integers n, m and k ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 min( n, 2000) ) \u2014 the number of shovels in the shop, the number of special offers and the number of shovels Misha has to buy, correspondingly. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the cost of the i - th shovel. The next m lines contain special offers. The j - th of them is given as a pair of integers ( x_ i, y_ i) ( 1 \u2264 y_ i \u2264 x_ i \u2264 n ) and means that if Misha buys exactly x_ i shovels during some purchase, then he can take y_ i most cheapest of them for free.",
    "output": "Print one integer \u2014 the minimum cost of buying k shovels if Misha buys them optimally.",
    "note": "In the first example Misha can buy shovels on positions 1 and 4 ( both with costs 2 ) during the first purchase and get one of them for free using the first or the third special offer. And then he can buy shovels on positions 3 and 6 ( with costs 4 and 3 ) during the second purchase and get the second one for free using the first or the third special offer. Then he can buy the shovel on a position 7 with cost 1 . So the total cost is 4 + 2 + 1 = 7 . In the second example Misha can buy shovels on positions 1 , 2 , 3 , 4 and 8 ( costs are 6 , 8 , 5 , 1 and 2 ) and get three cheapest ( with costs 5 , 1 and 2 ) for free. And then he can buy shovels on positions 6 , 7 and 9 ( all with costs 1 ) without using any special offers. So the total cost is 6 + 8 + 1 + 1 + 1 = 17 . In the third example Misha can buy four cheapest shovels without using any special offers and get the total cost 17 .",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1154F"
  },
  {
    "title": "Walking Robot",
    "url": "https://codeforces.com/problemset/problem/1154/D",
    "history": "There is a robot staying at X= 0 on the Ox axis. He has to walk to X= n . You are controlling this robot and controlling how he goes. The robot has a battery and an accumulator with a solar panel. The i - th segment of the path ( from X= i- 1 to X= i ) can be exposed to sunlight or not. The array s denotes which segments are exposed to sunlight: if segment i is exposed, then s_ i = 1 , otherwise s_ i = 0 . The robot has one battery of capacity b and one accumulator of capacity a . For each segment, you should choose which type of energy storage robot will use to go to the next point ( it can be either battery or accumulator) . If the robot goes using the battery, the current charge of the battery is decreased by one ( the robot can' t use the battery if its charge is zero) . And if the robot goes using the accumulator, the current charge of the accumulator is decreased by one ( and the robot also can' t use the accumulator if its charge is zero) . If the current segment is exposed to sunlight and the robot goes through it using the battery, the charge of the accumulator increases by one ( of course, its charge can' t become higher than it' s maximum capacity) . If accumulator is used to pass some segment, its charge decreases by 1 no matter if the segment is exposed or not. You understand that it is not always possible to walk to X= n . You want your robot to go as far as possible. Find the maximum number of segments of distance the robot can pass if you control him optimally.",
    "input": "The first line of the input contains three integers n, b, a ( 1 \u2264 n, b, a \u2264 2 \u00b7 10^ 5 ) \u2014 the robot' s destination point, the battery capacity and the accumulator capacity, respectively. The second line of the input contains n integers s_ 1, s_ 2, . . . , s_ n ( 0 \u2264 s_ i \u2264 1 ) , where s_ i is 1 if the i - th segment of distance is exposed to sunlight, and 0 otherwise.",
    "output": "Print one integer \u2014 the maximum number of segments the robot can pass if you control him optimally.",
    "note": "In the first example the robot can go through the first segment using the accumulator, and charge levels become b= 2 and a= 0 . The second segment can be passed using the battery, and charge levels become b= 1 and a= 1 . The third segment can be passed using the accumulator, and charge levels become b= 1 and a= 0 . The fourth segment can be passed using the battery, and charge levels become b= 0 and a= 1 . And the fifth segment can be passed using the accumulator. In the second example the robot can go through the maximum number of segments using battery two times and accumulator one time in any order.",
    "topics": [
      "greedy"
    ],
    "id": "1154D"
  },
  {
    "title": "Serval and Rooted Tree",
    "url": "https://codeforces.com/problemset/problem/1153/D",
    "history": "Now Serval is a junior high school student in Japari Middle School, and he is still thrilled on math as before. As a talented boy in mathematics, he likes to play with numbers. This time, he wants to play with numbers on a rooted tree. A tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a node v is the last different from v vertex on the path from the root to the vertex v . Children of vertex v are all nodes for which v is the parent. A vertex is a leaf if it has no children. The rooted tree Serval owns has n nodes, node 1 is the root. Serval will write some numbers into all nodes of the tree. However, there are some restrictions. Each of the nodes except leaves has an operation max or min written in it, indicating that the number in this node should be equal to the maximum or minimum of all the numbers in its sons, respectively. Assume that there are k leaves in the tree. Serval wants to put integers 1, 2, . . . , k to the k leaves ( each number should be used exactly once) . He loves large numbers, so he wants to maximize the number in the root. As his best friend, can you help him?",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 3\u00b7 10^ 5 ) , the size of the tree. The second line contains n integers, the i - th of them represents the operation in the node i . 0 represents min and 1 represents max . If the node is a leaf, there is still a number of 0 or 1 , but you can ignore it. The third line contains n- 1 integers f_ 2, f_ 3, . . . , f_ n ( 1 \u2264 f_ i \u2264 i- 1 ) , where f_ i represents the parent of the node i .",
    "output": "Output one integer \u2014 the maximum possible number in the root of the tree.",
    "note": "Pictures below explain the examples. The numbers written in the middle of the nodes are their indices, and the numbers written on the top are the numbers written in the nodes. In the first example, no matter how you arrange the numbers, the answer is 1 . In the second example, no matter how you arrange the numbers, the answer is 4 . In the third example, one of the best solution to achieve 4 is to arrange 4 and 5 to nodes 4 and 5 . In the fourth example, the best solution is to arrange 5 to node 5 .",
    "topics": [
      "binary search",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1153D"
  },
  {
    "title": "Serval and Parenthesis Sequence",
    "url": "https://codeforces.com/problemset/problem/1153/C",
    "history": "Serval soon said goodbye to Japari kindergarten, and began his life in Japari Primary School. In his favorite math class, the teacher taught him the following interesting definitions. A parenthesis sequence is a string, containing only characters \" ( \" and \" ) \" . A correct parenthesis sequence is a parenthesis sequence that can be transformed into a correct arithmetic expression by inserting characters \" 1\" and \" + \" between the original characters of the sequence. For example, parenthesis sequences \" ( ) ( ) \" , \" ( ( ) ) \" are correct ( the resulting expressions are: \" ( 1+ 1) + ( 1+ 1) \" , \" ( ( 1+ 1) + 1) \" ) , while \" ) ( \" and \" ) \" are not. Note that the empty string is a correct parenthesis sequence by definition. We define that | s| as the length of string s . A strict prefix s[ 1. . . l] ( 1\u2264 l< | s| ) of a string s = s_ 1s_ 2. . . s_ | s| is string s_ 1s_ 2. . . s_ l . Note that the empty string and the whole string are not strict prefixes of any string by the definition. Having learned these definitions, he comes up with a new problem. He writes down a string s containing only characters \" ( \" , \" ) \" and \" ? \" . And what he is going to do, is to replace each of the \" ? \" in s independently by one of \" ( \" and \" ) \" to make all strict prefixes of the new sequence not a correct parenthesis sequence, while the new sequence should be a correct parenthesis sequence. After all, he is just a primary school student so this problem is too hard for him to solve. As his best friend, can you help him to replace the question marks? If there are many solutions, any of them is acceptable.",
    "input": "The first line contains a single integer | s| ( 1\u2264 | s| \u2264 3 \u00b7 10^ 5 ) , the length of the string. The second line contains a string s , containing only \" ( \" , \" ) \" and \" ? \" .",
    "output": "A single line contains a string representing the answer. If there are many solutions, any of them is acceptable. If there is no answer, print a single line containing \" : ( \" ( without the quotes) .",
    "note": "It can be proved that there is no solution for the second sample, so print \" : ( \" .",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1153C"
  },
  {
    "title": "Serval and Toy Bricks",
    "url": "https://codeforces.com/problemset/problem/1153/B",
    "history": "Luckily, Serval got onto the right bus, and he came to the kindergarten on time. After coming to kindergarten, he found the toy bricks very funny. He has a special interest to create difficult problems for others to solve. This time, with many 1 \u00d7 1 \u00d7 1 toy bricks, he builds up a 3- dimensional object. We can describe this object with a n \u00d7 m matrix, such that in each cell ( i, j) , there are h_ i, j bricks standing on the top of each other. However, Serval doesn' t give you any h_ i, j , and just give you the front view, left view, and the top view of this object, and he is now asking you to restore the object. Note that in the front view, there are m columns, and in the i - th of them, the height is the maximum of h_ 1, i, h_ 2, i, . . . , h_ n, i . It is similar for the left view, where there are n columns. And in the top view, there is an n \u00d7 m matrix t_ i, j , where t_ i, j is 0 or 1 . If t_ i, j equals 1 , that means h_ i, j> 0 , otherwise, h_ i, j= 0 . However, Serval is very lonely because others are bored about his unsolvable problems before, and refused to solve this one, although this time he promises there will be at least one object satisfying all the views. As his best friend, can you have a try?",
    "input": "The first line contains three positive space- separated integers n, m, h ( 1\u2264 n, m, h \u2264 100 ) \u2014 the length, width and height. The second line contains m non- negative space- separated integers a_ 1, a_ 2, . . . , a_ m , where a_ i is the height in the i - th column from left to right of the front view ( 0\u2264 a_ i \u2264 h ) . The third line contains n non- negative space- separated integers b_ 1, b_ 2, . . . , b_ n ( 0\u2264 b_ j \u2264 h ) , where b_ j is the height in the j - th column from left to right of the left view. Each of the following n lines contains m numbers, each is 0 or 1 , representing the top view, where j - th number of i - th row is 1 if h_ i, j> 0 , and 0 otherwise. It is guaranteed that there is at least one structure satisfying the input.",
    "output": "Output n lines, each of them contains m integers, the j - th number in the i - th line should be equal to the height in the corresponding position of the top view. If there are several objects satisfying the views, output any one of them.",
    "note": "The graph above illustrates the object in the first example. The first graph illustrates the object in the example output for the second example, and the second graph shows the three- view drawing of it.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1153B"
  },
  {
    "title": "Neko and Aki's Prank",
    "url": "https://codeforces.com/problemset/problem/1152/D",
    "history": "Neko is playing with his toys on the backyard of Aki' s house. Aki decided to play a prank on him, by secretly putting catnip into Neko' s toys. Unfortunately, he went overboard and put an entire bag of catnip into the toys. . . It took Neko an entire day to turn back to normal. Neko reported to Aki that he saw a lot of weird things, including a trie of all correct bracket sequences of length 2n . The definition of correct bracket sequence is as follows: The empty sequence is a correct bracket sequence, If s is a correct bracket sequence, then ( s ) is a correct bracket sequence, If s and t are a correct bracket sequence, then st is also a correct bracket sequence. For example, the strings \" ( ( ) ) \" , \" ( ) ( ) \" form a correct bracket sequence, while \" ) ( \" and \" ( ( \" not. Aki then came up with an interesting problem: What is the size of the maximum matching ( the largest set of edges such that there are no two edges with a common vertex) in this trie? Since the answer can be quite large, print it modulo 10^ 9 + 7 .",
    "input": "The only line contains a single integer n ( 1 \u2264 n \u2264 1000 ) .",
    "output": "Print exactly one integer \u2014 the size of the maximum matching in the trie. Since the answer can be quite large, print it modulo 10^ 9 + 7 .",
    "note": "The pictures below illustrate tries in the first two examples ( for clarity, the round brackets are replaced with angle brackets) . The maximum matching is highlighted with blue.",
    "topics": [
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1152D"
  },
  {
    "title": "Neko Finds Grapes",
    "url": "https://codeforces.com/problemset/problem/1152/A",
    "history": "On a random day, Neko found n treasure chests and m keys. The i - th chest has an integer a_ i written on it and the j - th key has an integer b_ j on it. Neko knows those chests contain the powerful mysterious green Grapes, thus Neko wants to open as many treasure chests as possible. The j - th key can be used to unlock the i - th chest if and only if the sum of the key number and the chest number is an odd number. Formally, a_ i + b_ j \u2261 1 2 . One key can be used to open at most one chest, and one chest can be opened at most once. Find the maximum number of chests Neko can open.",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of chests and the number of keys. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the numbers written on the treasure chests. The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the numbers written on the keys.",
    "output": "Print the maximum number of chests you can open.",
    "note": "In the first example, one possible way to unlock 3 chests is as follows: Use first key to unlock the fifth chest, Use third key to unlock the second chest, Use fourth key to unlock the first chest. In the second example, you can use the only key to unlock any single chest ( note that one key can' t be used twice) . In the third example, no key can unlock the given chest.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1152A"
  },
  {
    "title": "Stas and the Queue at the Buffet",
    "url": "https://codeforces.com/problemset/problem/1151/D",
    "history": "During a break in the buffet of the scientific lyceum of the Kingdom of Kremland, there was formed a queue of n high school students numbered from 1 to n . Initially, each student i is on position i . Each student i is characterized by two numbers \u2014 a_ i and b_ i . Dissatisfaction of the person i equals the product of a_ i by the number of people standing to the left of his position, add the product b_ i by the number of people standing to the right of his position. Formally, the dissatisfaction of the student i , which is on the position j , equals a_ i \u00b7 ( j- 1) + b_ i \u00b7 ( n- j) . The director entrusted Stas with the task: rearrange the people in the queue so that minimize the total dissatisfaction. Although Stas is able to solve such problems, this was not given to him. He turned for help to you.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of people in the queue. Each of the following n lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 8 ) \u2014 the characteristic of the student i , initially on the position i .",
    "output": "Output one integer \u2014 minimum total dissatisfaction which can be achieved by rearranging people in the queue.",
    "note": "In the first example it is optimal to put people in this order: ( 3, 1, 2 ) . The first person is in the position of 2 , then his dissatisfaction will be equal to 4 \u00b7 1+ 2 \u00b7 1= 6 . The second person is in the position of 3 , his dissatisfaction will be equal to 2 \u00b7 2+ 3 \u00b7 0= 4 . The third person is in the position of 1 , his dissatisfaction will be equal to 6 \u00b7 0+ 1 \u00b7 2= 2 . The total dissatisfaction will be 12 . In the second example, you need to put people in this order: ( 3, 2, 4, 1 ) . The total dissatisfaction will be 25 .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1151D"
  },
  {
    "title": "Tiling Challenge",
    "url": "https://codeforces.com/problemset/problem/1150/B",
    "history": "One day Alice was cleaning up her basement when she noticed something very curious: an infinite set of wooden pieces! Each piece was made of five square tiles, with four tiles adjacent to the fifth center tile: By the pieces lay a large square wooden board. The board is divided into n^ 2 cells arranged into n rows and n columns. Some of the cells are already occupied by single tiles stuck to it. The remaining cells are free. Alice started wondering whether she could fill the board completely using the pieces she had found. Of course, each piece has to cover exactly five distinct cells of the board, no two pieces can overlap and every piece should fit in the board entirely, without some parts laying outside the board borders. The board however was too large for Alice to do the tiling by hand. Can you help determine if it' s possible to fully tile the board?",
    "input": "The first line of the input contains a single integer n ( 3 \u2264 n \u2264 50 ) \u2014 the size of the board. The following n lines describe the board. The i - th line ( 1 \u2264 i \u2264 n ) contains a single string of length n . Its j - th character ( 1 \u2264 j \u2264 n ) is equal to \" . \" if the cell in the i - th row and the j - th column is free; it is equal to \" # \" if it' s occupied. You can assume that the board contains at least one free cell.",
    "output": "Output YES if the board can be tiled by Alice' s pieces, or NO otherwise. You can print each letter in any case ( upper or lower) .",
    "note": "The following sketches show the example boards and their tilings if such tilings exist:",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1150B"
  },
  {
    "title": "Stock Arbitraging",
    "url": "https://codeforces.com/problemset/problem/1150/A",
    "history": "Welcome to Codeforces Stock Exchange! We' re pretty limited now as we currently allow trading on one stock, Codeforces Ltd. We hope you' ll still be able to make profit from the market! In the morning, there are n opportunities to buy shares. The i - th of them allows to buy as many shares as you want, each at the price of s_ i bourles. In the evening, there are m opportunities to sell shares. The i - th of them allows to sell as many shares as you want, each at the price of b_ i bourles. You can' t sell more shares than you have. It' s morning now and you possess r bourles and no shares. What is the maximum number of bourles you can hold after the evening?",
    "input": "The first line of the input contains three integers n, m, r ( 1 \u2264 n \u2264 30 , 1 \u2264 m \u2264 30 , 1 \u2264 r \u2264 1000 ) \u2014 the number of ways to buy the shares on the market, the number of ways to sell the shares on the market, and the number of bourles you hold now. The next line contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 1000 ) ; s_ i indicates the opportunity to buy shares at the price of s_ i bourles. The following line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 1000 ) ; b_ i indicates the opportunity to sell shares at the price of b_ i bourles.",
    "output": "Output a single integer \u2014 the maximum number of bourles you can hold after the evening.",
    "note": "In the first example test, you have 11 bourles in the morning. It' s optimal to buy 5 shares of a stock at the price of 2 bourles in the morning, and then to sell all of them at the price of 5 bourles in the evening. It' s easy to verify that you' ll have 26 bourles after the evening. In the second example test, it' s optimal not to take any action.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1150A"
  },
  {
    "title": "Abandoning Roads",
    "url": "https://codeforces.com/problemset/problem/1149/D",
    "history": "Codefortia is a small island country located somewhere in the West Pacific. It consists of n settlements connected by m bidirectional gravel roads. Curiously enough, the beliefs of the inhabitants require the time needed to pass each road to be equal either to a or b seconds. It' s guaranteed that one can go between any pair of settlements by following a sequence of roads. Codefortia was recently struck by the financial crisis. Therefore, the king decided to abandon some of the roads so that: it will be possible to travel between each pair of cities using the remaining roads only, the sum of times required to pass each remaining road will be minimum possible ( in other words, remaining roads must form minimum spanning tree, using the time to pass the road as its weight) , among all the plans minimizing the sum of times above, the time required to travel between the king' s residence ( in settlement 1 ) and the parliament house ( in settlement p ) using the remaining roads only will be minimum possible. The king, however, forgot where the parliament house was. For each settlement p = 1, 2, . . . , n , can you tell what is the minimum time required to travel between the king' s residence and the parliament house ( located in settlement p ) after some roads are abandoned?",
    "input": "The first line of the input contains four integers n , m , a and b ( 2 \u2264 n \u2264 70 , n - 1 \u2264 m \u2264 200 , 1 \u2264 a < b \u2264 10^ 7 ) \u2014 the number of settlements and gravel roads in Codefortia, and two possible travel times. Each of the following lines contains three integers u, v, c ( 1 \u2264 u, v \u2264 n , u = \u0338 v , c \u2208{ a, b} ) denoting a single gravel road between the settlements u and v , which requires c minutes to travel. You can assume that the road network is connected and has no loops or multiedges.",
    "output": "Output a single line containing n integers. The p - th of them should denote the minimum possible time required to travel from 1 to p after the selected roads are abandoned. Note that for each p you can abandon a different set of roads.",
    "note": "The minimum possible sum of times required to pass each road in the first example is 85 \u2014 exactly one of the roads with passing time 25 must be abandoned. Note that after one of these roads is abandoned, it' s now impossible to travel between settlements 1 and 3 in time 50 .",
    "topics": [
      "brute force",
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1149D"
  },
  {
    "title": "Prefix Sum Primes",
    "url": "https://codeforces.com/problemset/problem/1149/A",
    "history": "We' re giving away nice huge bags containing number tiles! A bag we want to present to you contains n tiles. Each of them has a single number written on it \u2014 either 1 or 2 . However, there is one condition you must fulfill in order to receive the prize. You will need to put all the tiles from the bag in a sequence, in any order you wish. We will then compute the sums of all prefixes in the sequence, and then count how many of these sums are prime numbers. If you want to keep the prize, you will need to maximize the number of primes you get. Can you win the prize? Hurry up, the bags are waiting!",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the number of number tiles in the bag. The following line contains n space- separated integers a_ 1, a_ 2, . . . , a_ n ( a_ i \u2208{ 1, 2} ) \u2014 the values written on the tiles.",
    "output": "Output a permutation b_ 1, b_ 2, . . . , b_ n of the input sequence ( a_ 1, a_ 2, . . . , a_ n) maximizing the number of the prefix sums being prime numbers. If there are multiple optimal permutations, output any.",
    "note": "The first solution produces the prefix sums 1, 2, 3, 5, 7 ( four primes constructed) , while the prefix sums in the second solution are 1, 2, 3, 5, 6, 7, 8, 10, 11 ( five primes) . Primes are marked bold and blue. In each of these cases, the number of produced primes is maximum possible.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1149A"
  },
  {
    "title": "Earth Wind and Fire",
    "url": "https://codeforces.com/problemset/problem/1148/E",
    "history": "There are n stones arranged on an axis. Initially the i - th stone is located at the coordinate s_ i . There may be more than one stone in a single place. You can perform zero or more operations of the following type: take two stones with indices i and j so that s_ i \u2264 s_ j , choose an integer d ( 0 \u2264 2 \u00b7 d \u2264 s_ j - s_ i ) , and replace the coordinate s_ i with ( s_ i + d) and replace coordinate s_ j with ( s_ j - d) . In other words, draw stones closer to each other. You want to move the stones so that they are located at positions t_ 1, t_ 2, . . . , t_ n . The order of the stones is not important \u2014 you just want for the multiset of the stones resulting positions to be the same as the multiset of t_ 1, t_ 2, . . . , t_ n . Detect whether it is possible to move the stones this way, and if yes, construct a way to do so. You don' t need to minimize the number of moves.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2013 the number of stones. The second line contains integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 10^ 9 ) \u2014 the initial positions of the stones. The second line contains integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 10^ 9 ) \u2014 the target positions of the stones.",
    "output": "If it is impossible to move the stones this way, print \" NO\" . Otherwise, on the first line print \" YES\" , on the second line print the number of operations m ( 0 \u2264 m \u2264 5 \u00b7 n ) required. You don' t have to minimize the number of operations. Then print m lines, each containing integers i, j, d ( 1 \u2264 i, j \u2264 n , s_ i \u2264 s_ j , 0 \u2264 2 \u00b7 d \u2264 s_ j - s_ i ) , defining the operations. One can show that if an answer exists, there is an answer requiring no more than 5 \u00b7 n operations.",
    "note": "Consider the first example. After the first move the locations of stones is [ 2, 2, 6, 5, 9] . After the second move the locations of stones is [ 2, 3, 5, 5, 9] . After the third move the locations of stones is [ 2, 5, 5, 5, 7] . After the last move the locations of stones is [ 4, 5, 5, 5, 5] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "1148E"
  },
  {
    "title": "Dirty Deeds Done Dirt Cheap",
    "url": "https://codeforces.com/problemset/problem/1148/D",
    "history": "You are given n pairs of integers ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ n, b_ n) . All of the integers in the pairs are distinct and are in the range from 1 to 2 \u00b7 n inclusive. Let' s call a sequence of integers x_ 1, x_ 2, . . . , x_ 2k good if either x_ 1 < x_ 2 > x_ 3 < . . . < x_ 2k- 2 > x_ 2k- 1 < x_ 2k , or x_ 1 > x_ 2 < x_ 3 > . . . > x_ 2k- 2 < x_ 2k- 1 > x_ 2k . You need to choose a subset of distinct indices i_ 1, i_ 2, . . . , i_ t and their order in a way that if you write down all numbers from the pairs in a single sequence ( the sequence would be a_ i_ 1, b_ i_ 1, a_ i_ 2, b_ i_ 2, . . . , a_ i_ t, b_ i_ t ) , this sequence is good. What is the largest subset of indices you can choose? You also need to construct the corresponding index sequence i_ 1, i_ 2, . . . , i_ t .",
    "input": "The first line contains single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of pairs. Each of the next n lines contain two numbers \u2014 a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 2 \u00b7 n ) \u2014 the elements of the pairs. It is guaranteed that all integers in the pairs are distinct, that is, every integer from 1 to 2 \u00b7 n is mentioned exactly once.",
    "output": "In the first line print a single integer t \u2014 the number of pairs in the answer. Then print t distinct integers i_ 1, i_ 2, . . . , i_ t \u2014 the indexes of pairs in the corresponding order.",
    "note": "The final sequence in the first example is 1 < 7 > 3 < 5 > 2 < 10 . The final sequence in the second example is 6 > 1 < 3 > 2 < 5 > 4 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1148D"
  },
  {
    "title": "Another One Bites The Dust",
    "url": "https://codeforces.com/problemset/problem/1148/A",
    "history": "Let' s call a string good if and only if it consists of only two types of letters \u2014 ' a' and ' b' and every two consecutive letters are distinct. For example \" baba\" and \" aba\" are good strings and \" abb\" is a bad string. You have a strings \" a\" , b strings \" b\" and c strings \" ab\" . You want to choose some subset of these strings and concatenate them in any arbitrarily order. What is the length of the longest good string you can obtain this way?",
    "input": "The first line contains three positive integers a , b , c ( 1 \u2264 a, b, c \u2264 10^ 9 ) \u2014 the number of strings \" a\" , \" b\" and \" ab\" respectively.",
    "output": "Print a single number \u2014 the maximum possible length of the good string you can obtain.",
    "note": "In the first example the optimal string is \" baba\" . In the second example the optimal string is \" abababa\" . In the third example the optimal string is \" bababababab\" . In the fourth example the optimal string is \" ababab\" .",
    "topics": [
      "greedy"
    ],
    "id": "1148A"
  },
  {
    "title": "Two Merged Sequences",
    "url": "https://codeforces.com/problemset/problem/1144/G",
    "history": "Two integer sequences existed initially, one of them was strictly increasing, and another one \u2014 strictly decreasing. Strictly increasing sequence is a sequence of integers [ x_ 1 < x_ 2 < . . . < x_ k] . And strictly decreasing sequence is a sequence of integers [ y_ 1 > y_ 2 > . . . > y_ l] . Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing. Elements of increasing sequence were inserted between elements of the decreasing one ( and, possibly, before its first element and after its last element) without changing the order. For example, sequences [ 1, 3, 4] and [ 10, 4, 2] can produce the following resulting sequences: [ 10, 1, 3, 4, 2, 4] , [ 1, 3, 4, 10, 4, 2] . The following sequence cannot be the result of these insertions: [ 1, 10, 4, 4, 3, 2] because the order of elements in the increasing sequence was changed. Let the obtained sequence be a . This sequence a is given in the input. Your task is to find any two suitable initial sequences. One of them should be strictly increasing, and another one \u2014 strictly decreasing. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing. If there is a contradiction in the input and it is impossible to split the given sequence a into one increasing sequence and one decreasing sequence, print \" NO\" .",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the i - th element of a .",
    "output": "If there is a contradiction in the input and it is impossible to split the given sequence a into one increasing sequence and one decreasing sequence, print \" NO\" in the first line. Otherwise print \" YES\" in the first line. In the second line, print a sequence of n integers res_ 1, res_ 2, . . . , res_ n , where res_ i should be either 0 or 1 for each i from 1 to n . The i - th element of this sequence should be 0 if the i - th element of a belongs to the increasing sequence, and 1 otherwise. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.",
    "note": "",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1144G"
  },
  {
    "title": "Equalize Them All",
    "url": "https://codeforces.com/problemset/problem/1144/D",
    "history": "You are given an array a consisting of n integers. You can perform the following operations arbitrary number of times ( possibly, zero) : Choose a pair of indices ( i, j) such that | i- j| = 1 ( indices i and j are adjacent) and set a_ i : = a_ i + | a_ i - a_ j| ; Choose a pair of indices ( i, j) such that | i- j| = 1 ( indices i and j are adjacent) and set a_ i : = a_ i - | a_ i - a_ j| . The value | x| means the absolute value of x . For example, | 4| = 4 , | - 3| = 3 . Your task is to find the minimum number of operations required to obtain the array of equal elements and print the order of operations to do it. It is guaranteed that you always can obtain the array of equal elements using such operations. Note that after each operation each element of the current array should not exceed 10^ 18 by absolute value.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the i - th element of a .",
    "output": "In the first line print one integer k \u2014 the minimum number of operations required to obtain the array of equal elements. In the next k lines print operations itself. The p - th operation should be printed as a triple of integers ( t_ p, i_ p, j_ p) , where t_ p is either 1 or 2 ( 1 means that you perform the operation of the first type, and 2 means that you perform the operation of the second type) , and i_ p and j_ p are indices of adjacent elements of the array such that 1 \u2264 i_ p, j_ p \u2264 n , | i_ p - j_ p| = 1 . See the examples for better understanding. Note that after each operation each element of the current array should not exceed 10^ 18 by absolute value. If there are many possible answers, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1144D"
  },
  {
    "title": "Parity Alternated Deletions",
    "url": "https://codeforces.com/problemset/problem/1144/B",
    "history": "Polycarp has an array a consisting of n integers. He wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it ( after the first move the array contains n- 1 elements) . For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities ( even- odd- even- odd- . . . or odd- even- odd- even- . . . ) of the removed elements. Polycarp stops if he can' t make a move. Formally: If it is the first move, he chooses any element and deletes it; If it is the second or any next move: if the last deleted element was odd, Polycarp chooses any even element and deletes it; if the last deleted element was even, Polycarp chooses any odd element and deletes it. If after some move Polycarp cannot make a move, the game ends. Polycarp' s goal is to minimize the sum of non- deleted elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of non- deleted elements is zero. Help Polycarp find this value.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of elements of a . The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the i - th element of a .",
    "output": "Print one integer \u2014 the minimum possible sum of non- deleted elements of the array after end of the game.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1144B"
  },
  {
    "title": "Privatization of Roads in Treeland",
    "url": "https://codeforces.com/problemset/problem/1141/G",
    "history": "Treeland consists of n cities and n- 1 roads. Each road is bidirectional and connects two distinct cities. From any city you can get to any other city by roads. Yes, you are right \u2014 the country' s topology is an undirected tree. There are some private road companies in Treeland. The government decided to sell roads to the companies. Each road will belong to one company and a company can own multiple roads. The government is afraid to look unfair. They think that people in a city can consider them unfair if there is one company which owns two or more roads entering the city. The government wants to make such privatization that the number of such cities doesn' t exceed k and the number of companies taking part in the privatization is minimal. Choose the number of companies r such that it is possible to assign each road to one company in such a way that the number of cities that have two or more roads of one company is at most k . In other words, if for a city all the roads belong to the different companies then the city is good. Your task is to find the minimal r that there is such assignment to companies from 1 to r that the number of cities which are not good doesn' t exceed k . The picture illustrates the first example ( n= 6, k= 2 ) . The answer contains r= 2 companies. Numbers on the edges denote edge indices. Edge colors mean companies: red corresponds to the first company, blue corresponds to the second company. The gray vertex ( number 3 ) is not good. The number of such vertices ( just one) doesn' t exceed k= 2 . It is impossible to have at most k= 2 not good cities in case of one company.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 200000, 0 \u2264 k \u2264 n - 1 ) \u2014 the number of cities and the maximal number of cities which can have two or more roads belonging to one company. The following n- 1 lines contain roads, one road per line. Each line contains a pair of integers x_ i , y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) , where x_ i , y_ i are cities connected with the i - th road.",
    "output": "In the first line print the required r ( 1 \u2264 r \u2264 n - 1 ) . In the second line print n- 1 numbers c_ 1, c_ 2, . . . , c_ n- 1 ( 1 \u2264 c_ i \u2264 r ) , where c_ i is the company to own the i - th road. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1141G"
  },
  {
    "title": "Same Sum Blocks (Hard)",
    "url": "https://codeforces.com/problemset/problem/1141/F2",
    "history": "This problem is given in two editions, which differ exclusively in the constraints on the number n . You are given an array of integers a[ 1] , a[ 2] , . . . , a[ n] . A block is a sequence of contiguous ( consecutive) elements a[ l] , a[ l+ 1] , . . . , a[ r] ( 1 \u2264 l \u2264 r \u2264 n ) . Thus, a block is defined by a pair of indices ( l, r) . Find a set of blocks ( l_ 1, r_ 1) , ( l_ 2, r_ 2) , . . . , ( l_ k, r_ k) such that: They do not intersect ( i. e. they are disjoint) . Formally, for each pair of blocks ( l_ i, r_ i) and ( l_ j, r_ j ) where i = \u0338 j either r_ i < l_ j or r_ j < l_ i . For each block the sum of its elements is the same. Formally, a[ l_ 1] + a[ l_ 1+ 1] + . . . + a[ r_ 1] = a[ l_ 2] + a[ l_ 2+ 1] + . . . + a[ r_ 2] = . . . = a[ l_ k] + a[ l_ k+ 1] + . . . + a[ r_ k] . The number of the blocks in the set is maximum. Formally, there does not exist a set of blocks ( l_ 1' , r_ 1' ) , ( l_ 2' , r_ 2' ) , . . . , ( l_ k' ' , r_ k' ' ) satisfying the above two requirements with k' > k . The picture corresponds to the first example. Blue boxes illustrate blocks. Write a program to find such a set of blocks.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 1500 ) \u2014 the length of the given array. The second line contains the sequence of elements a[ 1] , a[ 2] , . . . , a[ n] ( - 10^ 5 \u2264 a_ i \u2264 10^ 5 ) .",
    "output": "In the first line print the integer k ( 1 \u2264 k \u2264 n ) . The following k lines should contain blocks, one per line. In each line print a pair of indices l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the bounds of the i - th block. You can print blocks in any order. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1141F2"
  },
  {
    "title": "Same Sum Blocks (Easy)",
    "url": "https://codeforces.com/problemset/problem/1141/F1",
    "history": "This problem is given in two editions, which differ exclusively in the constraints on the number n . You are given an array of integers a[ 1] , a[ 2] , . . . , a[ n] . A block is a sequence of contiguous ( consecutive) elements a[ l] , a[ l+ 1] , . . . , a[ r] ( 1 \u2264 l \u2264 r \u2264 n ) . Thus, a block is defined by a pair of indices ( l, r) . Find a set of blocks ( l_ 1, r_ 1) , ( l_ 2, r_ 2) , . . . , ( l_ k, r_ k) such that: They do not intersect ( i. e. they are disjoint) . Formally, for each pair of blocks ( l_ i, r_ i) and ( l_ j, r_ j ) where i = \u0338 j either r_ i < l_ j or r_ j < l_ i . For each block the sum of its elements is the same. Formally, a[ l_ 1] + a[ l_ 1+ 1] + . . . + a[ r_ 1] = a[ l_ 2] + a[ l_ 2+ 1] + . . . + a[ r_ 2] = . . . = a[ l_ k] + a[ l_ k+ 1] + . . . + a[ r_ k] . The number of the blocks in the set is maximum. Formally, there does not exist a set of blocks ( l_ 1' , r_ 1' ) , ( l_ 2' , r_ 2' ) , . . . , ( l_ k' ' , r_ k' ' ) satisfying the above two requirements with k' > k . The picture corresponds to the first example. Blue boxes illustrate blocks. Write a program to find such a set of blocks.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 50 ) \u2014 the length of the given array. The second line contains the sequence of elements a[ 1] , a[ 2] , . . . , a[ n] ( - 10^ 5 \u2264 a_ i \u2264 10^ 5 ) .",
    "output": "In the first line print the integer k ( 1 \u2264 k \u2264 n ) . The following k lines should contain blocks, one per line. In each line print a pair of indices l_ i, r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the bounds of the i - th block. You can print blocks in any order. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1141F1"
  },
  {
    "title": "Colored Boots",
    "url": "https://codeforces.com/problemset/problem/1141/D",
    "history": "There are n left boots and n right boots. Each boot has a color which is denoted as a lowercase Latin letter or a question mark ( ' ? ' ) . Thus, you are given two strings l and r , both of length n . The character l_ i stands for the color of the i - th left boot and the character r_ i stands for the color of the i - th right boot. A lowercase Latin letter denotes a specific color, but the question mark ( ' ? ' ) denotes an indefinite color. Two specific colors are compatible if they are exactly the same. An indefinite color is compatible with any ( specific or indefinite) color. For example, the following pairs of colors are compatible: ( ' f' , ' f' ) , ( ' ? ' , ' z' ) , ( ' a' , ' ? ' ) and ( ' ? ' , ' ? ' ) . The following pairs of colors are not compatible: ( ' f' , ' g' ) and ( ' a' , ' z' ) . Compute the maximum number of pairs of boots such that there is one left and one right boot in a pair and their colors are compatible. Print the maximum number of such pairs and the pairs themselves. A boot can be part of at most one pair.",
    "input": "The first line contains n ( 1 \u2264 n \u2264 150000 ) , denoting the number of boots for each leg ( i. e. the number of left boots and the number of right boots) . The second line contains the string l of length n . It contains only lowercase Latin letters or question marks. The i - th character stands for the color of the i - th left boot. The third line contains the string r of length n . It contains only lowercase Latin letters or question marks. The i - th character stands for the color of the i - th right boot.",
    "output": "Print k \u2014 the maximum number of compatible left- right pairs of boots, i. e. pairs consisting of one left and one right boot which have compatible colors. The following k lines should contain pairs a_ j, b_ j ( 1 \u2264 a_ j, b_ j \u2264 n ) . The j - th of these lines should contain the index a_ j of the left boot in the j - th pair and index b_ j of the right boot in the j - th pair. All the numbers a_ j should be distinct ( unique) , all the numbers b_ j should be distinct ( unique) . If there are many optimal answers, print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1141D"
  },
  {
    "title": "Minimum Triangulation",
    "url": "https://codeforces.com/problemset/problem/1140/D",
    "history": "You are given a regular polygon with n vertices labeled from 1 to n in counter- clockwise order. The triangulation of a given polygon is a set of triangles such that each vertex of each triangle is a vertex of the initial polygon, there is no pair of triangles such that their intersection has non- zero area, and the total area of all triangles is equal to the area of the given polygon. The weight of a triangulation is the sum of weigths of triangles it consists of, where the weight of a triagle is denoted as the product of labels of its vertices. Calculate the minimum weight among all triangulations of the polygon.",
    "input": "The first line contains single integer n ( 3 \u2264 n \u2264 500 ) \u2014 the number of vertices in the regular polygon.",
    "output": "Print one integer \u2014 the minimum weight among all triangulations of the given polygon.",
    "note": "According to Wiki: polygon triangulation is the decomposition of a polygonal area ( simple polygon) P into a set of triangles, i. e. , finding a set of triangles with pairwise non- intersecting interiors whose union is P . In the first example the polygon is a triangle, so we don' t need to cut it further, so the answer is 1 \u00b7 2 \u00b7 3 = 6 . In the second example the polygon is a rectangle, so it should be divided into two triangles. It' s optimal to cut it using diagonal 1- 3 so answer is 1 \u00b7 2 \u00b7 3 + 1 \u00b7 3 \u00b7 4 = 6 + 12 = 18 .",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1140D"
  },
  {
    "title": "Chocolates",
    "url": "https://codeforces.com/problemset/problem/1139/B",
    "history": "You went to the store, selling n types of chocolates. There are a_ i chocolates of type i in stock. You have unlimited amount of cash ( so you are not restricted by any prices) and want to buy as many chocolates as possible. However if you buy x_ i chocolates of type i ( clearly, 0 \u2264 x_ i \u2264 a_ i ) , then for all 1 \u2264 j < i at least one of the following must hold: x_ j = 0 ( you bought zero chocolates of type j ) x_ j < x_ i ( you bought less chocolates of type j than of type i ) For example, the array x = [ 0, 0, 1, 2, 10] satisfies the requirement above ( assuming that all a_ i \u2265 x_ i ) , while arrays x = [ 0, 1, 0] , x = [ 5, 5] and x = [ 3, 2] don' t. Calculate the maximum number of chocolates you can buy.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) , denoting the number of types of chocolate. The next line contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 9 ) , denoting the number of chocolates of each type.",
    "output": "Print the maximum number of chocolates you can buy.",
    "note": "In the first example, it is optimal to buy: 0 + 0 + 1 + 3 + 6 chocolates. In the second example, it is optimal to buy: 1 + 2 + 3 + 4 + 10 chocolates. In the third example, it is optimal to buy: 0 + 0 + 0 + 1 chocolates.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1139B"
  },
  {
    "title": "Circus",
    "url": "https://codeforces.com/problemset/problem/1138/B",
    "history": "Polycarp is a head of a circus troupe. There are n \u2014 an even number \u2014 artists in the troupe. It is known whether the i - th artist can perform as a clown ( if yes, then c_ i = 1 , otherwise c_ i = 0 ) , and whether they can perform as an acrobat ( if yes, then a_ i = 1 , otherwise a_ i = 0 ) . Split the artists into two performances in such a way that: each artist plays in exactly one performance, the number of artists in the two performances is equal ( i. e. equal to n/ 2 ) , the number of artists that can perform as clowns in the first performance is the same as the number of artists that can perform as acrobats in the second performance.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5 000 , n is even) \u2014 the number of artists in the troupe. The second line contains n digits c_ 1 c_ 2 . . . c_ n , the i - th of which is equal to 1 if the i - th artist can perform as a clown, and 0 otherwise. The third line contains n digits a_ 1 a_ 2 . . . a_ n , the i - th of which is equal to 1 , if the i - th artist can perform as an acrobat, and 0 otherwise.",
    "output": "Print n/ 2 distinct integers \u2014 the indices of the artists that should play in the first performance. If there are multiple answers, print any. If there is no solution, print a single integer - 1 .",
    "note": "In the first example, one of the possible divisions into two performances is as follows: in the first performance artists 1 and 4 should take part. Then the number of artists in the first performance who can perform as clowns is equal to 1 . And the number of artists in the second performance who can perform as acrobats is 1 as well. In the second example, the division is not possible. In the third example, one of the possible divisions is as follows: in the first performance artists 3 and 4 should take part. Then in the first performance there are 2 artists who can perform as clowns. And the number of artists in the second performance who can perform as acrobats is 2 as well.",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "strings"
    ],
    "id": "1138B"
  },
  {
    "title": "Sushi for Two",
    "url": "https://codeforces.com/problemset/problem/1138/A",
    "history": "Arkady invited Anna for a dinner to a sushi restaurant. The restaurant is a bit unusual: it offers n pieces of sushi aligned in a row, and a customer has to choose a continuous subsegment of these sushi to buy. The pieces of sushi are of two types: either with tuna or with eel. Let' s denote the type of the i - th from the left sushi as t_ i , where t_ i = 1 means it is with tuna, and t_ i = 2 means it is with eel. Arkady does not like tuna, Anna does not like eel. Arkady wants to choose such a continuous subsegment of sushi that it has equal number of sushi of each type and each half of the subsegment has only sushi of one type. For example, subsegment [ 2, 2, 2, 1, 1, 1] is valid, but subsegment [ 1, 2, 1, 2, 1, 2] is not, because both halves contain both types of sushi. Find the length of the longest continuous subsegment of sushi Arkady can buy.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100 000 ) \u2014 the number of pieces of sushi. The second line contains n integers t_ 1 , t_ 2 , . . . , t_ n ( t_ i = 1 , denoting a sushi with tuna or t_ i = 2 , denoting a sushi with eel) , representing the types of sushi from left to right. It is guaranteed that there is at least one piece of sushi of each type. Note that it means that there is at least one valid continuous segment.",
    "output": "Print a single integer \u2014 the maximum length of a valid continuous segment.",
    "note": "In the first example Arkady can choose the subsegment [ 2, 2, 1, 1] or the subsegment [ 1, 1, 2, 2] with length 4 . In the second example there is no way but to choose one of the subsegments [ 2, 1] or [ 1, 2] with length 2 . In the third example Arkady' s best choice is the subsegment [ 1, 1, 1, 2, 2, 2] .",
    "topics": [
      "binary search",
      "greedy",
      "implementation"
    ],
    "id": "1138A"
  },
  {
    "title": "Train Car Selection",
    "url": "https://codeforces.com/problemset/problem/1137/E",
    "history": "Vasya likes to travel by train, but doesn' t like when the car he travels in is located in the tail of the train. Vasya gets on the train at the station. The train consists of n cars indexed from 1 to n counting from the locomotive ( head of the train) . Three types of events occur while the train is moving: Some number of cars are added to the head of the train; Some number of cars are added to the tail of the train; Vasya recalculates the values of the convenience of the cars ( read more about it below) . At each moment of time we will index the cars from the head of the train, starting from 1 . Note that when adding new cars to the head of the train, the indexing of the old ones may shift. To choose which car to go in, Vasya will use the value A_ i for each car ( where i is a car index) , which is calculated as follows: At the beginning of the trip A_ i= 0 , as well as for the new cars at the time of their addition. During the next recalculation Vasya chooses some positive integers b and s and adds to all A_ i value b + ( i - 1) \u00b7 s . Vasya hasn' t decided yet where he will get on the train and where will get off the train, so after each event of one of the three types he wants to know the least index of the car, such that its value A_ i is minimal. Since there is a lot of cars, Vasya asked you to write a program that answers his question.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 m \u2264 300 000 ) , the number of cars in the train at the time of departure from the station and the number of stations, respectively. Next m lines contain the descriptions of events. Each event is one of the following three types: \" 1 k \" ( 1 \u2264 k \u2264 10^ 9 ) , add k cars to the head of the train \" 2 k \" ( 1 \u2264 k \u2264 10^ 9 ) , add k cars to the tail of the train \" 3 b s \" ( 1 \u2264 b, s \u2264 10^ 9 ) , recalculate the convenience of all train cars. It is guaranteed that at any time the train length does not exceed 10^ 9 . Also it' s guaranteed that the integers A_ i will not grow too high. Formally, it' s guaranteed that if we sum the largest addition over all events of the 3 - rd type ( that is, b + ( n - 1) \u00b7 s , where n is the number of cars at that moment) then the acquired sum would be at most 10^ 18 .",
    "output": "After each of the m queries print two integers: j and A_ j \u2014 the number of the car closest to the head of the train, such that its value A_ j is minimal, and the value A_ j itself.",
    "note": "Initially the train consists of one car with A_ 1 = 0 , let' s denote train as [ 0] for simplicity. After adding one car to the head, train is [ 0, 0] . After recalculation of values with parameters b= 1, s= 1 , train is [ 1, 2] . After another recalculation of values with the parameters b= 1, s= 1 , train is [ 2, 4] . After adding one car to the end, train is [ 2, 4, 0] . After another adding one car to the end, train is [ 2, 4, 0, 0] . After recalculation of values with parameters b= 1 , s= 1 , train is [ 3, 6, 3, 4] . After adding one car to the end, train is [ 3, 6, 3, 4, 0] . After recalculation of values with parameters b= 1 , s= 5 , train is [ 4, 12, 14, 20, 21] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1137E"
  },
  {
    "title": "Camp Schedule",
    "url": "https://codeforces.com/problemset/problem/1137/B",
    "history": "The new camp by widely- known over the country Spring Programming Camp is going to start soon. Hence, all the team of friendly curators and teachers started composing the camp' s schedule. After some continuous discussion, they came up with a schedule s , which can be represented as a binary string, in which the i - th symbol is ' 1' if students will write the contest in the i - th day and ' 0' if they will have a day off. At the last moment Gleb said that the camp will be the most productive if it runs with the schedule t ( which can be described in the same format as schedule s ) . Since the number of days in the current may be different from number of days in schedule t , Gleb required that the camp' s schedule must be altered so that the number of occurrences of t in it as a substring is maximum possible. At the same time, the number of contest days and days off shouldn' t change, only their order may change. Could you rearrange the schedule in the best possible way?",
    "input": "The first line contains string s ( 1 \u2a7d | s| \u2a7d 500 000 ) , denoting the current project of the camp' s schedule. The second line contains string t ( 1 \u2a7d | t| \u2a7d 500 000 ) , denoting the optimal schedule according to Gleb. Strings s and t contain characters ' 0' and ' 1' only.",
    "output": "In the only line print the schedule having the largest number of substrings equal to t . Printed schedule should consist of characters ' 0' and ' 1' only and the number of zeros should be equal to the number of zeros in s and the number of ones should be equal to the number of ones in s . In case there multiple optimal schedules, print any of them.",
    "note": "In the first example there are two occurrences, one starting from first position and one starting from fourth position. In the second example there is only one occurrence, which starts from third position. Note, that the answer is not unique. For example, if we move the first day ( which is a day off) to the last position, the number of occurrences of t wouldn' t change. In the third example it' s impossible to make even a single occurrence.",
    "topics": [
      "greedy",
      "hashing",
      "strings"
    ],
    "id": "1137B"
  },
  {
    "title": "Nastya Is Buying Lunch",
    "url": "https://codeforces.com/problemset/problem/1136/D",
    "history": "At the big break Nastya came to the school dining room. There are n pupils in the school, numbered from 1 to n . Unfortunately, Nastya came pretty late, so that all pupils had already stood in the queue, i. e. Nastya took the last place in the queue. Of course, it' s a little bit sad for Nastya, but she is not going to despond because some pupils in the queue can agree to change places with some other pupils. Formally, there are some pairs u , v such that if the pupil with number u stands directly in front of the pupil with number v , Nastya can ask them and they will change places. Nastya asks you to find the maximal number of places in queue she can move forward.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 , 0 \u2264 m \u2264 5 \u00b7 10^ 5 ) \u2014 the number of pupils in the queue and number of pairs of pupils such that the first one agrees to change places with the second one if the first is directly in front of the second. The second line contains n integers p_ 1 , p_ 2 , . . . , p_ n \u2014 the initial arrangement of pupils in the queue, from the queue start to its end ( 1 \u2264 p_ i \u2264 n , p is a permutation of integers from 1 to n ) . In other words, p_ i is the number of the pupil who stands on the i - th position in the queue. The i - th of the following m lines contains two integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i = \u0338 v_ i ) , denoting that the pupil with number u_ i agrees to change places with the pupil with number v_ i if u_ i is directly in front of v_ i . It is guaranteed that if i = \u0338 j , than v_ i = \u0338 v_ j or u_ i = \u0338 u_ j . Note that it is possible that in some pairs both pupils agree to change places with each other. Nastya is the last person in the queue, i. e. the pupil with number p_ n .",
    "output": "Print a single integer \u2014 the number of places in queue she can move forward.",
    "note": "In the first example Nastya can just change places with the first pupil in the queue. Optimal sequence of changes in the second example is change places for pupils with numbers 1 and 3 . change places for pupils with numbers 3 and 2 . change places for pupils with numbers 1 and 2 . The queue looks like [ 3, 1, 2] , then [ 1, 3, 2] , then [ 1, 2, 3] , and finally [ 2, 1, 3] after these operations.",
    "topics": [
      "greedy"
    ],
    "id": "1136D"
  },
  {
    "title": "Spanning Tree with One Fixed Degree",
    "url": "https://codeforces.com/problemset/problem/1133/F2",
    "history": "You are given an undirected unweighted connected graph consisting of n vertices and m edges. It is guaranteed that there are no self- loops or multiple edges in the given graph. Your task is to find any spanning tree of this graph such that the degree of the first vertex ( vertex with label 1 on it) is equal to D ( or say that there are no such spanning trees) . Recall that the degree of a vertex is the number of edges incident to it.",
    "input": "The first line contains three integers n , m and D ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n - 1 \u2264 m \u2264 min( 2 \u00b7 10^ 5, n( n- 1) / 2) , 1 \u2264 D < n ) \u2014 the number of vertices, the number of edges and required degree of the first vertex, respectively. The following m lines denote edges: edge i is represented by a pair of integers v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , u_ i v_ i ) , which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ( v_ i, u_ i ) there are no other pairs ( v_ i, u_ i ) or ( u_ i, v_ i ) in the list of edges, and for each pair ( v_ i, u_ i) the condition v_ i u_ i is satisfied.",
    "output": "If there is no spanning tree satisfying the condition from the problem statement, print \" NO\" in the first line. Otherwise print \" YES\" in the first line and then print n- 1 lines describing the edges of a spanning tree such that the degree of the first vertex ( vertex with label 1 on it) is equal to D . Make sure that the edges of the printed spanning tree form some subset of the input edges ( order doesn' t matter and edge ( v, u) is considered the same as the edge ( u, v) ) . If there are multiple possible answers, print any of them.",
    "note": "The picture corresponding to the first and second examples: The picture corresponding to the third example:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1133F2"
  },
  {
    "title": "Knapsack",
    "url": "https://codeforces.com/problemset/problem/1132/E",
    "history": "You have a set of items, each having some integer weight not greater than 8 . You denote that a subset of items is good if total weight of items in the subset does not exceed W . You want to calculate the maximum possible weight of a good subset of items. Note that you have to consider the empty set and the original set when calculating the answer.",
    "input": "The first line contains one integer W ( 0 \u2264 W \u2264 10^ 18 ) \u2014 the maximum total weight of a good subset. The second line denotes the set of items you have. It contains 8 integers cnt_ 1 , cnt_ 2 , . . . , cnt_ 8 ( 0 \u2264 cnt_ i \u2264 10^ 16 ) , where cnt_ i is the number of items having weight i in the set.",
    "output": "Print one integer \u2014 the maximum possible weight of a good subset of items.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy"
    ],
    "id": "1132E"
  },
  {
    "title": "Stressful Training",
    "url": "https://codeforces.com/problemset/problem/1132/D",
    "history": "Berland SU holds yet another training contest for its students today. n students came, each of them brought his laptop. However, it turned out that everyone has forgot their chargers! Let students be numbered from 1 to n . Laptop of the i - th student has charge a_ i at the beginning of the contest and it uses b_ i of charge per minute ( i. e. if the laptop has c charge at the beginning of some minute, it becomes c - b_ i charge at the beginning of the next minute) . The whole contest lasts for k minutes. Polycarp ( the coach of Berland SU) decided to buy a single charger so that all the students would be able to successfully finish the contest. He buys the charger at the same moment the contest starts. Polycarp can choose to buy the charger with any non- negative ( zero or positive) integer power output. The power output is chosen before the purchase, it can' t be changed afterwards. Let the chosen power output be x . At the beginning of each minute ( from the minute contest starts to the last minute of the contest) he can plug the charger into any of the student' s laptops and use it for some integer number of minutes. If the laptop is using b_ i charge per minute then it will become b_ i - x per minute while the charger is plugged in. Negative power usage rate means that the laptop' s charge is increasing. The charge of any laptop isn' t limited, it can become infinitely large. The charger can be plugged in no more than one laptop at the same time. The student successfully finishes the contest if the charge of his laptop never is below zero at the beginning of some minute ( from the minute contest starts to the last minute of the contest, zero charge is allowed) . The charge of the laptop of the minute the contest ends doesn' t matter. Help Polycarp to determine the minimal possible power output the charger should have so that all the students are able to successfully finish the contest. Also report if no such charger exists.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students ( and laptops, correspondigly) and the duration of the contest in minutes. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) \u2014 the initial charge of each student' s laptop. The third line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 10^ 7 ) \u2014 the power usage of each student' s laptop.",
    "output": "Print a single non- negative integer \u2014 the minimal possible power output the charger should have so that all the students are able to successfully finish the contest. If no such charger exists, print - 1.",
    "note": "Let' s take a look at the state of laptops in the beginning of each minute on the first example with the charger of power 5 : charge: [ 3, 2] , plug the charger into laptop 1; charge: [ 3 - 4 + 5, 2 - 2] = [ 4, 0] , plug the charger into laptop 2; charge: [ 4 - 4, 0 - 2 + 5] = [ 0, 3] , plug the charger into laptop 1; charge: [ 0 - 4 + 5, 3 - 2] = [ 1, 1] . The contest ends after the fourth minute. However, let' s consider the charger of power 4 : charge: [ 3, 2] , plug the charger into laptop 1; charge: [ 3 - 4 + 4, 2 - 2] = [ 3, 0] , plug the charger into laptop 2; charge: [ 3 - 4, 0 - 2 + 4] = [ - 1, 2] , the first laptop has negative charge, thus, the first student doesn' t finish the contest. In the fourth example no matter how powerful the charger is, one of the students won' t finish the contest.",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1132D"
  },
  {
    "title": "Discounts",
    "url": "https://codeforces.com/problemset/problem/1132/B",
    "history": "You came to a local shop and want to buy some chocolate bars. There are n bars in the shop, i - th of them costs a_ i coins ( and you want to buy all of them) . You have m different coupons that allow you to buy chocolate bars. i - th coupon allows you to buy q_ i chocolate bars while you have to pay only for the q_ i - 1 most expensive ones ( so, the cheapest bar of those q_ i bars is for free) . You can use only one coupon; if you use coupon i , you have to choose q_ i bars and buy them using the coupon, and buy all the remaining n - q_ i bars without any discounts. To decide which coupon to choose, you want to know what will be the minimum total amount of money you have to pay if you use one of the coupons optimally.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of chocolate bars in the shop. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the cost of i - th chocolate bar. The third line contains one integer m ( 1 \u2264 m \u2264 n - 1 ) \u2014 the number of coupons you have. The fourth line contains m integers q_ 1 , q_ 2 , . . . , q_ m ( 2 \u2264 q_ i \u2264 n ) , where q_ i is the number of chocolate bars you have to buy using i - th coupon so that the least expensive of them will be for free. All values of q_ i are pairwise distinct.",
    "output": "Print m integers, i - th of them should be the minimum amount of money you have to pay if you buy q_ i bars with i - th coupon, and all the remaining bars one by one for their full price.",
    "note": "Consider the first example. If we use the first coupon, we may choose chocolate bars having indices 1 , 6 and 7 , and we pay 18 coins for them and 9 coins for all other bars. If we use the second coupon, we may choose chocolate bars having indices 1 , 5 , 6 and 7 , and we pay 25 coins for them and 5 coins for all other bars.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1132B"
  },
  {
    "title": "Regular Bracket Sequence",
    "url": "https://codeforces.com/problemset/problem/1132/A",
    "history": "A string is called bracket sequence if it does not contain any characters other than \" ( \" and \" ) \" . A bracket sequence is called regular if it it is possible to obtain correct arithmetic expression by inserting characters \" + \" and \" 1\" into this sequence. For example, \" \" , \" ( ( ) ) \" and \" ( ) ( ) \" are regular bracket sequences; \" ) ) \" and \" ) ( ( \" are bracket sequences ( but not regular ones) , and \" ( a) \" and \" ( 1) + ( 1) \" are not bracket sequences at all. You have a number of strings; each string is a bracket sequence of length 2 . So, overall you have cnt_ 1 strings \" ( ( \" , cnt_ 2 strings \" ( ) \" , cnt_ 3 strings \" ) ( \" and cnt_ 4 strings \" ) ) \" . You want to write all these strings in some order, one after another; after that, you will get a long bracket sequence of length 2( cnt_ 1 + cnt_ 2 + cnt_ 3 + cnt_ 4) . You wonder: is it possible to choose some order of the strings you have such that you will get a regular bracket sequence? Note that you may not remove any characters or strings, and you may not add anything either.",
    "input": "The input consists of four lines, i - th of them contains one integer cnt_ i ( 0 \u2264 cnt_ i \u2264 10^ 9 ) .",
    "output": "Print one integer: 1 if it is possible to form a regular bracket sequence by choosing the correct order of the given strings, 0 otherwise.",
    "note": "In the first example it is possible to construct a string \" ( ( ) ) ( ) ( ( ) ( ( ( ) ( ) ( ) ( ) ) ) ) \" , which is a regular bracket sequence. In the second example it is possible to construct a string \" \" , which is a regular bracket sequence.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1132A"
  },
  {
    "title": "String Multiplication",
    "url": "https://codeforces.com/problemset/problem/1131/E",
    "history": "Roman and Denis are on the trip to the programming competition. Since the trip was long, they soon got bored, and hence decided to came up with something. Roman invented a pizza' s recipe, while Denis invented a string multiplication. According to Denis, the result of multiplication ( product) of strings s of length m and t is a string t + s_ 1 + t + s_ 2 + . . . + t + s_ m + t , where s_ i denotes the i - th symbol of the string s , and \" + \" denotes string concatenation. For example, the product of strings \" abc\" and \" de\" is a string \" deadebdecde\" , while the product of the strings \" ab\" and \" z\" is a string \" zazbz\" . Note, that unlike the numbers multiplication, the product of strings s and t is not necessarily equal to product of t and s . Roman was jealous of Denis, since he invented such a cool operation, and hence decided to invent something string- related too. Since Roman is beauty- lover, he decided to define the beauty of the string as the length of the longest substring, consisting of only one letter. For example, the beauty of the string \" xayyaaabca\" is equal to 3 , since there is a substring \" aaa\" , while the beauty of the string \" qwerqwer\" is equal to 1 , since all neighboring symbols in it are different. In order to entertain Roman, Denis wrote down n strings p_ 1, p_ 2, p_ 3, . . . , p_ n on the paper and asked him to calculate the beauty of the string ( . . . ( ( ( p_ 1 \u00b7 p_ 2) \u00b7 p_ 3) \u00b7. . . ) \u00b7 p_ n , where s \u00b7 t denotes a multiplication of strings s and t . Roman hasn' t fully realized how Denis' s multiplication works, so he asked you for a help. Denis knows, that Roman is very impressionable, he guarantees, that the beauty of the resulting string is at most 10^ 9 .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100 000 ) \u2014 the number of strings, wroted by Denis. Next n lines contain non- empty strings p_ 1, p_ 2, . . . , p_ n , consisting of lowercase english letters. It' s guaranteed, that the total length of the strings p_ i is at most 100 000 , and that' s the beauty of the resulting product is at most 10^ 9 .",
    "output": "Print exactly one integer \u2014 the beauty of the product of the strings.",
    "note": "In the first example, the product of strings is equal to \" abaaaba\" . In the second example, the product of strings is equal to \" abanana\" .",
    "topics": [
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1131E"
  },
  {
    "title": "Gourmet choice",
    "url": "https://codeforces.com/problemset/problem/1131/D",
    "history": "Mr. Apple, a gourmet, works as editor- in- chief of a gastronomic periodical. He travels around the world, tasting new delights of famous chefs from the most fashionable restaurants. Mr. Apple has his own signature method of review \u2014 in each restaurant Mr. Apple orders two sets of dishes on two different days. All the dishes are different, because Mr. Apple doesn' t like to eat the same food. For each pair of dishes from different days he remembers exactly which was better, or that they were of the same quality. After this the gourmet evaluates each dish with a positive integer. Once, during a revision of a restaurant of Celtic medieval cuisine named \u00abPoisson\u00bb, that serves chestnut soup with fir, warm soda bread, spicy lemon pie and other folk food, Mr. Apple was very pleasantly surprised the gourmet with its variety of menu, and hence ordered too much. Now he' s confused about evaluating dishes. The gourmet tasted a set of n dishes on the first day and a set of m dishes on the second day. He made a table a of size n \u00d7 m , in which he described his impressions. If, according to the expert, dish i from the first set was better than dish j from the second set, then a_ ij is equal to \" > \" , in the opposite case a_ ij is equal to \" < \" . Dishes also may be equally good, in this case a_ ij is \" = \" . Now Mr. Apple wants you to help him to evaluate every dish. Since Mr. Apple is very strict, he will evaluate the dishes so that the maximal number used is as small as possible. But Mr. Apple also is very fair, so he never evaluates the dishes so that it goes against his feelings. In other words, if a_ ij is \" < \" , then the number assigned to dish i from the first set should be less than the number of dish j from the second set, if a_ ij is \" > \" , then it should be greater, and finally if a_ ij is \" = \" , then the numbers should be the same. Help Mr. Apple to evaluate each dish from both sets so that it is consistent with his feelings, or determine that this is impossible.",
    "input": "The first line contains integers n and m ( 1 \u2264 n, m \u2264 1000 ) \u2014 the number of dishes in both days. Each of the next n lines contains a string of m symbols. The j - th symbol on i - th line is a_ ij . All strings consist only of \" < \" , \" > \" and \" = \" .",
    "output": "The first line of output should contain \" Yes\" , if it' s possible to do a correct evaluation for all the dishes, or \" No\" otherwise. If case an answer exist, on the second line print n integers \u2014 evaluations of dishes from the first set, and on the third line print m integers \u2014 evaluations of dishes from the second set.",
    "note": "In the first sample, all dishes of the first day are better than dishes of the second day. So, the highest score will be 2 , for all dishes of the first day. In the third sample, the table is contradictory \u2014 there is no possible evaluation of the dishes that satisfies it.",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1131D"
  },
  {
    "title": "Birthday",
    "url": "https://codeforces.com/problemset/problem/1131/C",
    "history": "Cowboy Vlad has a birthday today! There are n children who came to the celebration. In order to greet Vlad, the children decided to form a circle around him. Among the children who came, there are both tall and low, so if they stand in a circle arbitrarily, it may turn out, that there is a tall and low child standing next to each other, and it will be difficult for them to hold hands. Therefore, children want to stand in a circle so that the maximum difference between the growth of two neighboring children would be minimal possible. Formally, let' s number children from 1 to n in a circle order, that is, for every i child with number i will stand next to the child with number i+ 1 , also the child with number 1 stands next to the child with number n . Then we will call the discomfort of the circle the maximum absolute difference of heights of the children, who stand next to each other. Please help children to find out how they should reorder themselves, so that the resulting discomfort is smallest possible.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100 ) \u2014 the number of the children who came to the cowboy Vlad' s birthday. The second line contains integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) denoting heights of every child.",
    "output": "Print exactly n integers \u2014 heights of the children in the order in which they should stand in a circle. You can start printing a circle with any child. If there are multiple possible answers, print any of them.",
    "note": "In the first example, the discomfort of the circle is equal to 1 , since the corresponding absolute differences are 1 , 1 , 1 and 0 . Note, that sequences [ 2, 3, 2, 1, 1] and [ 3, 2, 1, 1, 2] form the same circles and differ only by the selection of the starting point. In the second example, the discomfort of the circle is equal to 20 , since the absolute difference of 10 and 30 is equal to 20 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1131C"
  },
  {
    "title": "Draw!",
    "url": "https://codeforces.com/problemset/problem/1131/B",
    "history": "You still have partial information about the score during the historic football match. You are given a set of pairs ( a_ i, b_ i) , indicating that at some point during the match the score was \" a_ i : b_ i \" . It is known that if the current score is \u00ab x : y \u00bb, then after the goal it will change to \" x+ 1 : y \" or \" x : y+ 1 \" . What is the largest number of times a draw could appear on the scoreboard? The pairs \" a_ i : b_ i \" are given in chronological order ( time increases) , but you are given score only for some moments of time. The last pair corresponds to the end of the match.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10000 ) \u2014 the number of known moments in the match. Each of the next n lines contains integers a_ i and b_ i ( 0 \u2264 a_ i, b_ i \u2264 10^ 9 ) , denoting the score of the match at that moment ( that is, the number of goals by the first team and the number of goals by the second team) . All moments are given in chronological order, that is, sequences x_ i and y_ j are non- decreasing. The last score denotes the final result of the match.",
    "output": "Print the maximum number of moments of time, during which the score was a draw. The starting moment of the match ( with a score 0: 0) is also counted.",
    "note": "In the example one of the possible score sequences leading to the maximum number of draws is as follows: 0: 0, 1: 0, 2: 0, 2: 1, 3: 1, 3: 2, 3: 3, 3: 4.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1131B"
  },
  {
    "title": "Two Cakes",
    "url": "https://codeforces.com/problemset/problem/1130/B",
    "history": "Sasha and Dima want to buy two n - tier cakes. Each cake should consist of n different tiers: from the size of 1 to the size of n . Tiers should go in order from the smallest to the biggest ( from top to bottom) . They live on the same street, there are 2 \u00b7 n houses in a row from left to right. Each house has a pastry shop where you can buy a cake tier. Unfortunately, in each pastry shop you can buy only one tier of only one specific size: in the i - th house you can buy a tier of the size a_ i ( 1 \u2264 a_ i \u2264 n ) . Since the guys carry already purchased tiers, and it is impossible to insert a new tier in the middle of the cake, they agreed to buy tiers from the smallest to the biggest. That is, each of them buys tiers in order: 1 , then 2 , then 3 and so on up to n . Initially, Sasha and Dima are located near the first ( leftmost) house. Output the minimum distance that they will have to walk in total to buy both cakes. The distance between any two neighboring houses is exactly 1 .",
    "input": "The first line of the input contains an integer number n \u2014 the number of tiers in each cake ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains 2 \u00b7 n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is equal to the size of the tier, which can be bought in the i - th house. Remember that in each house you can buy only one tier. It is guaranteed that every number from 1 to n occurs in a exactly two times.",
    "output": "Print one number \u2014 the minimum distance that the guys have to walk in total to buy both cakes. Guys can be near same house at the same time. They begin near the first ( leftmost) house. Each of the guys should buy n tiers in ascending order of their sizes.",
    "note": "In the first example, the possible optimal sequence of actions is: Sasha buys a tier of size 1 near the 1 - st house ( a_ 1= 1 ) ; Dima goes to the house 2 ; Dima buys a tier of size 1 near the 2 - nd house ( a_ 2= 1 ) ; Sasha goes to the house 4 ; Sasha buys a tier of size 2 near the 4 - th house ( a_ 4= 2 ) ; Sasha goes to the house 5 ; Sasha buys a tier of size 3 near the 5 - th house ( a_ 5= 3 ) ; Dima goes to the house 3 ; Dima buys a tier of size 2 near the 3 - rd house ( a_ 3= 2 ) ; Dima goes to the house 6 ; Dima buys a tier of size 3 near the 6 - th house ( a_ 6= 3 ) . So, Sasha goes the distance 3+ 1= 4 , and Dima goes the distance 1+ 1+ 3= 5 . In total, they cover a distance of 4+ 5= 9 . You can make sure that with any other sequence of actions they will walk no less distance.",
    "topics": [
      "greedy"
    ],
    "id": "1130B"
  },
  {
    "title": "Toy Train",
    "url": "https://codeforces.com/problemset/problem/1129/A2",
    "history": "Alice received a set of Toy TrainTM from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n . The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+ 1 if 1 \u2264 i < n or station 1 if i = n . It takes the train 1 second to travel to its next station as described. Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m . Candy i ( 1 \u2264 i \u2264 m ) , now at station a_ i , should be delivered to station b_ i ( a_ i = \u0338 b_ i ) . The blue numbers on the candies correspond to b_ i values. The image corresponds to the 1 - st example. The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible. Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.",
    "input": "The first line contains two space- separated integers n and m ( 2 \u2264 n \u2264 5 000 ; 1 \u2264 m \u2264 20 000 ) \u2014 the number of stations and the number of candies, respectively. The i - th of the following m lines contains two space- separated integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ; a_ i = \u0338 b_ i ) \u2014 the station that initially contains candy i and the destination station of the candy, respectively.",
    "output": "In the first and only line, print n space- separated integers, the i - th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i .",
    "note": "Consider the second sample. If the train started at station 1 , the optimal strategy is as follows. Load the first candy onto the train. Proceed to station 2 . This step takes 1 second. Deliver the first candy. Proceed to station 1 . This step takes 1 second. Load the second candy onto the train. Proceed to station 2 . This step takes 1 second. Deliver the second candy. Proceed to station 1 . This step takes 1 second. Load the third candy onto the train. Proceed to station 2 . This step takes 1 second. Deliver the third candy. Hence, the train needs 5 seconds to complete the tasks. If the train were to start at station 2 , however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+ 1 = 6 seconds.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1129A2"
  },
  {
    "title": "Toy Train (Simplified)",
    "url": "https://codeforces.com/problemset/problem/1129/A1",
    "history": "This is a simplified version of the task Toy Train. These two versions differ only in the constraints. Hacks for this version are disabled. Alice received a set of Toy TrainTM from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n . The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+ 1 if 1 \u2264 i < n or station 1 if i = n . It takes the train 1 second to travel to its next station as described. Bob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m . Candy i ( 1 \u2264 i \u2264 m ) , now at station a_ i , should be delivered to station b_ i ( a_ i = \u0338 b_ i ) . The blue numbers on the candies correspond to b_ i values. The image corresponds to the 1 - st example. The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible. Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.",
    "input": "The first line contains two space- separated integers n and m ( 2 \u2264 n \u2264 100 ; 1 \u2264 m \u2264 200 ) \u2014 the number of stations and the number of candies, respectively. The i - th of the following m lines contains two space- separated integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ; a_ i = \u0338 b_ i ) \u2014 the station that initially contains candy i and the destination station of the candy, respectively.",
    "output": "In the first and only line, print n space- separated integers, the i - th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i .",
    "note": "Consider the second sample. If the train started at station 1 , the optimal strategy is as follows. Load the first candy onto the train. Proceed to station 2 . This step takes 1 second. Deliver the first candy. Proceed to station 1 . This step takes 1 second. Load the second candy onto the train. Proceed to station 2 . This step takes 1 second. Deliver the second candy. Proceed to station 1 . This step takes 1 second. Load the third candy onto the train. Proceed to station 2 . This step takes 1 second. Deliver the third candy. Hence, the train needs 5 seconds to complete the tasks. If the train were to start at station 2 , however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+ 1 = 6 seconds.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1129A1"
  },
  {
    "title": "Secret Letters",
    "url": "https://codeforces.com/problemset/problem/1120/F",
    "history": "Little W and Little P decided to send letters to each other regarding the most important events during a day. There are n events during a day: at time moment t_ i something happens to the person p_ i ( p_ i is either W or P, denoting Little W and Little P, respectively) , so he needs to immediately send a letter to the other person. They can send a letter using one of the two ways: Ask Friendly O to deliver the letter directly. Friendly O takes d acorns for each letter. Leave the letter at Wise R' s den. Wise R values free space, so he takes c \u00b7 T acorns for storing a letter for a time segment of length T . The recipient can take a letter from Wise R either when he leaves his own letter at Wise R' s den, or at time moment t_ n + 1 , when everybody comes to Wise R for a tea. It is not possible to take a letter from Wise R' s den at other time moments. The friends can store as many letters at Wise R' s den as they want, paying for each one separately. Help the friends determine the minimum possible total cost of sending all letters.",
    "input": "The first line contains three integers n, c, d ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 c \u2264 10^ 2 , 1 \u2264 d \u2264 10^ 8 ) \u2014 the number of letters, the cost of storing a letter for one time unit at Wise R' s den and the cost of delivering a letter via Friendly O. The next n describe the events. The i - th of them contains an integer t_ i and a character p_ i ( 0 \u2264 t_ i \u2264 10^ 6 , p_ i is either W or P) \u2014 the time the i - th event happens and the person the event happens to. The last line contains a single integer t_ n + 1 ( 0 \u2264 t_ n+ 1\u2264 10^ 6 ) \u2014 the time when everybody comes to Wise R for a tea and takes all remaining letters. It is guaranteed that t_ i < t_ i + 1 for all i from 1 to n .",
    "output": "Print a single integer \u2014 the minimum possible cost of delivery of all letters.",
    "note": "One of optimal solutions in the first example: At time moment 0 Little P leaves the letter at Wise R' s den. At time moment 1 Little W leaves his letter at Wise R' s den and takes Little P' s letter. This letter is at the den from time moment 0 to time moment 1, it costs 1 acorn. At time moment 3 Little P sends his letter via Friendly O, it costs 4 acorns. At time moment 5 Little P leaves his letter at the den, receiving Little W' s letter which storage costs 4 acorns. At time moment 8 Little P leaves one more letter at the den. At time moment 10 Little W comes to the den for a tea and receives the two letters, paying 5 and 2 acorns. The total cost of delivery is thus 1 + 4 + 4 + 5 + 2 = 16 acorns.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1120F"
  },
  {
    "title": "Power Tree",
    "url": "https://codeforces.com/problemset/problem/1120/D",
    "history": "You are given a rooted tree with n vertices, the root of the tree is the vertex 1 . Each vertex has some non- negative price. A leaf of the tree is a non- root vertex that has degree 1 . Arkady and Vasily play a strange game on the tree. The game consists of three stages. On the first stage Arkady buys some non- empty set of vertices of the tree. On the second stage Vasily puts some integers into all leaves of the tree. On the third stage Arkady can perform several ( possibly none) operations of the following kind: choose some vertex v he bought on the first stage and some integer x , and then add x to all integers in the leaves in the subtree of v . The integer x can be positive, negative of zero. A leaf a is in the subtree of a vertex b if and only if the simple path between a and the root goes through b . Arkady' s task is to make all integers in the leaves equal to zero. What is the minimum total cost s he has to pay on the first stage to guarantee his own win independently of the integers Vasily puts on the second stage? Also, we ask you to find all such vertices that there is an optimal ( i. e. with cost s ) set of vertices containing this one such that Arkady can guarantee his own win buying this set on the first stage.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 200 000 ) \u2014 the number of vertices in the tree. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 10^ 9 ) , where c_ i is the price of the i - th vertex. Each of the next n - 1 lines contains two integers a and b ( 1 \u2264 a, b \u2264 n ) , denoting an edge of the tree.",
    "output": "In the first line print two integers: the minimum possible cost s Arkady has to pay to guarantee his own win, and the number of vertices k that belong to at least one optimal set. In the second line print k distinct integers in increasing order the indices of the vertices that belong to at least one optimal set.",
    "note": "In the second example all sets of two vertices are optimal. So, each vertex is in at least one optimal set.",
    "topics": [
      "dfs and similar",
      "dp",
      "dsu",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1120D"
  },
  {
    "title": "Once in a casino",
    "url": "https://codeforces.com/problemset/problem/1120/B",
    "history": "One player came to a casino and found a slot machine where everything depends only on how he plays. The rules follow. A positive integer a is initially on the screen. The player can put a coin into the machine and then add 1 to or subtract 1 from any two adjacent digits. All digits must remain from 0 to 9 after this operation, and the leading digit must not equal zero. In other words, it is forbidden to add 1 to 9 , to subtract 1 from 0 and to subtract 1 from the leading 1 . Once the number on the screen becomes equal to b , the player wins the jackpot. a and b have the same number of digits. Help the player to determine the minimal number of coins he needs to spend in order to win the jackpot and tell how to play.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 10^ 5 ) standing for the length of numbers a and b . The next two lines contain numbers a and b , each one on a separate line ( 10^ n- 1\u2264 a, b < 10^ n ) .",
    "output": "If it is impossible to win the jackpot, print a single integer - 1 . Otherwise, the first line must contain the minimal possible number c of coins the player has to spend. min( c, 10^ 5) lines should follow, i - th of them containing two integers d_ i and s_ i ( 1\u2264 d_ i\u2264 n - 1 , s_ i = \u00b1 1 ) denoting that on the i - th step the player should add s_ i to the d_ i - th and ( d_ i + 1) - st digits from the left ( e. g. d_ i = 1 means that two leading digits change while d_ i = n - 1 means that there are two trailing digits which change) . Please notice that the answer may be very big and in case c > 10^ 5 you should print only the first 10^ 5 moves. Your answer is considered correct if it is possible to finish your printed moves to win the jackpot in the minimal possible number of coins. In particular, if there are multiple ways to do this, you can output any of them.",
    "note": "In the first example, we can make a + 1 operation on the two first digits, transforming number 223 into 333 , and then make a - 1 operation on the last two digits, transforming 333 into 322 . It' s also possible to do these operations in reverse order, which makes another correct answer. In the last example, one can show that it' s impossible to transform 35 into 44 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1120B"
  },
  {
    "title": "Diana and Liana",
    "url": "https://codeforces.com/problemset/problem/1120/A",
    "history": "At the first holiday in spring, the town Shortriver traditionally conducts a flower festival. Townsfolk wear traditional wreaths during these festivals. Each wreath contains exactly k flowers. The work material for the wreaths for all n citizens of Shortriver is cut from the longest flowered liana that grew in the town that year. Liana is a sequence a_ 1 , a_ 2 , . . . , a_ m , where a_ i is an integer that denotes the type of flower at the position i . This year the liana is very long ( m \u2265 n \u00b7 k ) , and that means every citizen will get a wreath. Very soon the liana will be inserted into a special cutting machine in order to make work material for wreaths. The machine works in a simple manner: it cuts k flowers from the beginning of the liana, then another k flowers and so on. Each such piece of k flowers is called a workpiece. The machine works until there are less than k flowers on the liana. Diana has found a weaving schematic for the most beautiful wreath imaginable. In order to weave it, k flowers must contain flowers of types b_ 1 , b_ 2 , . . . , b_ s , while other can be of any type. If a type appears in this sequence several times, there should be at least that many flowers of that type as the number of occurrences of this flower in the sequence. The order of the flowers in a workpiece does not matter. Diana has a chance to remove some flowers from the liana before it is inserted into the cutting machine. She can remove flowers from any part of the liana without breaking liana into pieces. If Diana removes too many flowers, it may happen so that some of the citizens do not get a wreath. Could some flowers be removed from the liana so that at least one workpiece would conform to the schematic and machine would still be able to create at least n workpieces?",
    "input": "The first line contains four integers m , k , n and s ( 1 \u2264 n, k, m \u2264 5 \u00b7 10^ 5 , k \u00b7 n \u2264 m , 1 \u2264 s \u2264 k ) : the number of flowers on the liana, the number of flowers in one wreath, the amount of citizens and the length of Diana' s flower sequence respectively. The second line contains m integers a_ 1 , a_ 2 , . . . , a_ m ( 1 \u2264 a_ i \u2264 5 \u00b7 10^ 5 ) \u2014 types of flowers on the liana. The third line contains s integers b_ 1 , b_ 2 , . . . , b_ s ( 1 \u2264 b_ i \u2264 5 \u00b7 10^ 5 ) \u2014 the sequence in Diana' s schematic.",
    "output": "If it' s impossible to remove some of the flowers so that there would be at least n workpieces and at least one of them fullfills Diana' s schematic requirements, output - 1 . Otherwise in the first line output one integer d \u2014 the number of flowers to be removed by Diana. In the next line output d different integers \u2014 the positions of the flowers to be removed. If there are multiple answers, print any.",
    "note": "In the first example, if you don' t remove any flowers, the machine would put out two workpieces with flower types [ 1, 2, 3] and [ 3, 2, 1] . Those workpieces don' t fit Diana' s schematic. But if you remove flower on 4 - th place, the machine would output workpieces [ 1, 2, 3] and [ 2, 1, 2] . The second workpiece fits Diana' s schematic. In the second example there is no way to remove flowers so that every citizen gets a wreath and Diana gets a workpiece that fits here schematic. In the third example Diana is the only citizen of the town and that means she can, for example, just remove all flowers except the ones she needs.",
    "topics": [
      "greedy",
      "implementation",
      "two pointers"
    ],
    "id": "1120A"
  },
  {
    "title": "Pavel and Triangles",
    "url": "https://codeforces.com/problemset/problem/1119/E",
    "history": "Pavel has several sticks with lengths equal to powers of two. He has a_ 0 sticks of length 2^ 0 = 1 , a_ 1 sticks of length 2^ 1 = 2 , . . . , a_ n- 1 sticks of length 2^ n- 1 . Pavel wants to make the maximum possible number of triangles using these sticks. The triangles should have strictly positive area, each stick can be used in at most one triangle. It is forbidden to break sticks, and each triangle should consist of exactly three sticks. Find the maximum possible number of triangles.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 300 000 ) \u2014 the number of different lengths of sticks. The second line contains n integers a_ 0 , a_ 1 , . . . , a_ n- 1 ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the number of sticks with the length equal to 2^ i .",
    "output": "Print a single integer \u2014 the maximum possible number of non- degenerate triangles that Pavel can make.",
    "note": "In the first example, Pavel can, for example, make this set of triangles ( the lengths of the sides of the triangles are listed) : ( 2^ 0, 2^ 4, 2^ 4) , ( 2^ 1, 2^ 3, 2^ 3) , ( 2^ 1, 2^ 2, 2^ 2) . In the second example, Pavel cannot make a single triangle. In the third example, Pavel can, for example, create this set of triangles ( the lengths of the sides of the triangles are listed) : ( 2^ 0, 2^ 0, 2^ 0) , ( 2^ 1, 2^ 1, 2^ 1) , ( 2^ 2, 2^ 2, 2^ 2) .",
    "topics": [
      "brute force",
      "dp",
      "fft",
      "greedy",
      "ternary search"
    ],
    "id": "1119E"
  },
  {
    "title": "Ramesses and Corner Inversion",
    "url": "https://codeforces.com/problemset/problem/1119/C",
    "history": "Ramesses came to university to algorithms practice, and his professor, who is a fairly known programmer, gave him the following task. You are given two matrices A and B of size n \u00d7 m , each of which consists of 0 and 1 only. You can apply the following operation to the matrix A arbitrary number of times: take any submatrix of the matrix A that has at least two rows and two columns, and invert the values in its corners ( i. e. all corners of the submatrix that contain 0 , will be replaced by 1 , and all corners of the submatrix that contain 1 , will be replaced by 0 ) . You have to answer whether you can obtain the matrix B from the matrix A . An example of the operation. The chosen submatrix is shown in blue and yellow, its corners are shown in yellow. Ramesses don' t want to perform these operations by himself, so he asks you to answer this question. A submatrix of matrix M is a matrix which consist of all elements which come from one of the rows with indices x_ 1, x_ 1+ 1, . . . , x_ 2 of matrix M and one of the columns with indices y_ 1, y_ 1+ 1, . . . , y_ 2 of matrix M , where x_ 1, x_ 2, y_ 1, y_ 2 are the edge rows and columns of the submatrix. In other words, a submatrix is a set of elements of source matrix which form a solid rectangle ( i. e. without holes) with sides parallel to the sides of the original matrix. The corners of the submatrix are cells ( x_ 1, y_ 1) , ( x_ 1, y_ 2) , ( x_ 2, y_ 1) , ( x_ 2, y_ 2) , where the cell ( i, j) denotes the cell on the intersection of the i - th row and the j - th column.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 500 ) \u2014 the number of rows and the number of columns in matrices A and B . Each of the next n lines contain m integers: the j - th integer in the i - th line is the j - th element of the i - th row of the matrix A ( 0 \u2264 A_ ij\u2264 1 ) . Each of the next n lines contain m integers: the j - th integer in the i - th line is the j - th element of the i - th row of the matrix B ( 0 \u2264 B_ ij\u2264 1 ) .",
    "output": "Print \" Yes\" ( without quotes) if it is possible to transform the matrix A to the matrix B using the operations described above, and \" No\" ( without quotes) , if it is not possible. You can print each letter in any case ( upper or lower) .",
    "note": "The examples are explained below. Example 1. Example 2. Example 3.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1119C"
  },
  {
    "title": "Alyona and a Narrow Fridge",
    "url": "https://codeforces.com/problemset/problem/1119/B",
    "history": "Alyona has recently bought a miniature fridge that can be represented as a matrix with h rows and 2 columns. Initially there is only one shelf at the bottom of the fridge, but Alyona can install arbitrary number of shelves inside the fridge between any two rows. A shelf is two cells wide, does not occupy any space but separates the inside of the fridge to the lower and upper part. An example of a fridge with h = 7 and two shelves. The shelves are shown in black. The picture corresponds to the first example. Alyona has n bottles of milk that she wants to put in the fridge. The i - th bottle is a_ i cells tall and 1 cell wide. She can put a bottle on some shelf if the corresponding space above the shelf is at least as tall as the bottle. She can not put a bottle on top of another bottle ( if there is no shelf between them) . Two bottles can not share a cell. Alyona is interested in the largest integer k such that she can put bottles 1 , 2 , . . . , k in the fridge at the same time. Find this largest k .",
    "input": "The first line contains two integers n and h ( 1 \u2264 n \u2264 10^ 3 , 1 \u2264 h \u2264 10^ 9 ) \u2014 the number of bottles and the height of the fridge. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 h ) \u2014 the heights of the bottles.",
    "output": "Print the single integer k \u2014 the maximum integer such that Alyona can put the bottles 1 , 2 , . . . , k in the fridge at the same time. If Alyona can put all bottles in the fridge, print n . It is easy to see that Alyona can always put at least one bottle in the fridge.",
    "note": "One of optimal locations in the first example is shown on the picture in the statement. One of optimal locations in the second example is shown on the picture below. One of optimal locations in the third example is shown on the picture below.",
    "topics": [
      "binary search",
      "flows",
      "greedy",
      "sortings"
    ],
    "id": "1119B"
  },
  {
    "title": "Ilya and a Colorful Walk",
    "url": "https://codeforces.com/problemset/problem/1119/A",
    "history": "Ilya lives in a beautiful city of Chordalsk. There are n houses on the street Ilya lives, they are numerated from 1 to n from left to right; the distance between every two neighboring houses is equal to 1 unit. The neighboring houses are 1 and 2 , 2 and 3 , . . . , n- 1 and n . The houses n and 1 are not neighboring. The houses are colored in colors c_ 1, c_ 2, . . . , c_ n so that the i - th house is colored in the color c_ i . Everyone knows that Chordalsk is not boring, so there are at least two houses colored in different colors. Ilya wants to select two houses i and j so that 1 \u2264 i < j \u2264 n , and they have different colors: c_ i = \u0338 c_ j . He will then walk from the house i to the house j the distance of ( j- i) units. Ilya loves long walks, so he wants to choose the houses so that the distance between them is the maximum possible. Help Ilya, find this maximum possible distance.",
    "input": "The first line contains a single integer n ( 3 \u2264 n \u2264 300 000 ) \u2014 the number of cities on the street. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 n ) \u2014 the colors of the houses. It is guaranteed that there is at least one pair of indices i and j so that 1 \u2264 i < j \u2264 n and c_ i = \u0338 c_ j .",
    "output": "Print a single integer \u2014 the maximum possible distance Ilya can walk.",
    "note": "In the first example the optimal way is to walk from the first house to the last one, where Ilya can walk the distance of 5- 1 = 4 units. In the second example the optimal way is to either walk from the first house to the second or from the second to the third. Both these ways have the distance of 1 unit. In the third example the optimal way is to walk from the third house to the last one, where Ilya can walk the distance of 7- 3 = 4 units.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1119A"
  },
  {
    "title": "Coffee and Coursework (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1118/D2",
    "history": "The only difference between easy and hard versions is the constraints. Polycarp has to write a coursework. The coursework consists of m pages. Polycarp also has n cups of coffee. The coffee in the i - th cup Polycarp has a_ i caffeine in it. Polycarp can drink some cups of coffee ( each one no more than once) . He can drink cups in any order. Polycarp drinks each cup instantly and completely ( i. e. he cannot split any cup into several days) . Surely, courseworks are not being written in a single day ( in a perfect world of Berland, at least) . Let' s consider some day of Polycarp' s work. Consider Polycarp drinks k cups of coffee during this day and caffeine dosages of cups Polycarp drink during this day are a_ i_ 1, a_ i_ 2, . . . , a_ i_ k . Then the first cup he drinks gives him energy to write a_ i_ 1 pages of coursework, the second cup gives him energy to write max( 0, a_ i_ 2 - 1) pages, the third cup gives him energy to write max( 0, a_ i_ 3 - 2) pages, . . . , the k - th cup gives him energy to write max( 0, a_ i_ k - k + 1) pages. If Polycarp doesn' t drink coffee during some day, he cannot write coursework at all that day. Polycarp has to finish his coursework as soon as possible ( spend the minimum number of days to do it) . Your task is to find out this number of days or say that it is impossible.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of cups of coffee and the number of pages in the coursework. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the caffeine dosage of coffee in the i - th cup.",
    "output": "If it is impossible to write the coursework, print - 1. Otherwise print the minimum number of days Polycarp needs to do it.",
    "note": "In the first example Polycarp can drink fourth cup during first day ( and write 1 page) , first and second cups during second day ( and write 2 + ( 3 - 1) = 4 pages) , fifth cup during the third day ( and write 2 pages) and third cup during the fourth day ( and write 1 page) so the answer is 4 . It is obvious that there is no way to write the coursework in three or less days. In the second example Polycarp can drink third, fourth and second cups during first day ( and write 4 + ( 2 - 1) + ( 3 - 2) = 6 pages) and sixth cup during second day ( and write 4 pages) so the answer is 2 . It is obvious that Polycarp cannot write the whole coursework in one day in this test. In the third example Polycarp can drink all cups of coffee during first day and write 5 + ( 5 - 1) + ( 5 - 2) + ( 5 - 3) + ( 5 - 4) = 15 pages of coursework. In the fourth example Polycarp cannot drink all cups during first day and should drink one of them during the second day. So during first day he will write 5 + ( 5 - 1) + ( 5 - 2) + ( 5 - 3) = 14 pages of coursework and during second day he will write 5 pages of coursework. This is enough to complete it. In the fifth example Polycarp cannot write the whole coursework at all, even if he will drink one cup of coffee during each day, so the answer is - 1.",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1118D2"
  },
  {
    "title": "Coffee and Coursework (Easy version)",
    "url": "https://codeforces.com/problemset/problem/1118/D1",
    "history": "The only difference between easy and hard versions is the constraints. Polycarp has to write a coursework. The coursework consists of m pages. Polycarp also has n cups of coffee. The coffee in the i - th cup has a_ i caffeine in it. Polycarp can drink some cups of coffee ( each one no more than once) . He can drink cups in any order. Polycarp drinks each cup instantly and completely ( i. e. he cannot split any cup into several days) . Surely, courseworks are not usually being written in a single day ( in a perfect world of Berland, at least) . Some of them require multiple days of hard work. Let' s consider some day of Polycarp' s work. Consider Polycarp drinks k cups of coffee during this day and caffeine dosages of cups Polycarp drink during this day are a_ i_ 1, a_ i_ 2, . . . , a_ i_ k . Then the first cup he drinks gives him energy to write a_ i_ 1 pages of coursework, the second cup gives him energy to write max( 0, a_ i_ 2 - 1) pages, the third cup gives him energy to write max( 0, a_ i_ 3 - 2) pages, . . . , the k - th cup gives him energy to write max( 0, a_ i_ k - k + 1) pages. If Polycarp doesn' t drink coffee during some day, he cannot write coursework at all that day. Polycarp has to finish his coursework as soon as possible ( spend the minimum number of days to do it) . Your task is to find out this number of days or say that it is impossible.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 100 , 1 \u2264 m \u2264 10^ 4 ) \u2014 the number of cups of coffee and the number of pages in the coursework. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , where a_ i is the caffeine dosage of coffee in the i - th cup.",
    "output": "If it is impossible to write the coursework, print - 1. Otherwise print the minimum number of days Polycarp needs to do it.",
    "note": "In the first example Polycarp can drink fourth cup during first day ( and write 1 page) , first and second cups during second day ( and write 2 + ( 3 - 1) = 4 pages) , fifth cup during the third day ( and write 2 pages) and third cup during the fourth day ( and write 1 page) so the answer is 4 . It is obvious that there is no way to write the coursework in three or less days in this test. In the second example Polycarp can drink third, fourth and second cups during first day ( and write 4 + ( 2 - 1) + ( 3 - 2) = 6 pages) and sixth cup during second day ( and write 4 pages) so the answer is 2 . It is obvious that Polycarp cannot write the whole coursework in one day in this test. In the third example Polycarp can drink all cups of coffee during first day and write 5 + ( 5 - 1) + ( 5 - 2) + ( 5 - 3) + ( 5 - 4) = 15 pages of coursework. In the fourth example Polycarp cannot drink all cups during first day and should drink one of them during the second day. So during first day he will write 5 + ( 5 - 1) + ( 5 - 2) + ( 5 - 3) = 14 pages of coursework and during second day he will write 5 pages of coursework. This is enough to complete it. In the fifth example Polycarp cannot write the whole coursework at all, even if he will drink one cup of coffee during each day, so the answer is - 1.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1118D1"
  },
  {
    "title": "Emotes",
    "url": "https://codeforces.com/problemset/problem/1117/B",
    "history": "There are n emotes in very popular digital collectible card game ( the game is pretty famous so we won' t say its name) . The i - th emote increases the opponent' s happiness by a_ i units ( we all know that emotes in this game are used to make opponents happy) . You have time to use some emotes only m times. You are allowed to use any emotion once, more than once, or not use it at all. The only restriction is that you cannot use the same emote more than k times in a row ( otherwise the opponent will think that you' re trolling him) . Note that two emotes i and j ( i j ) such that a_ i = a_ j are considered different. You have to make your opponent as happy as possible. Find the maximum possible opponent' s happiness.",
    "input": "The first line of the input contains three integers n, m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 k \u2264 m \u2264 2 \u00b7 10^ 9 ) \u2014 the number of emotes, the number of times you can use emotes and the maximum number of times you may use the same emote in a row. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is value of the happiness of the i - th emote.",
    "output": "Print one integer \u2014 the maximum opponent' s happiness if you use emotes in a way satisfying the problem statement.",
    "note": "In the first example you may use emotes in the following sequence: 4, 4, 5, 4, 4, 5, 4, 4, 5 .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1117B"
  },
  {
    "title": "Yet Another Array Partitioning Task",
    "url": "https://codeforces.com/problemset/problem/1114/B",
    "history": "An array b is called to be a subarray of a if it forms a continuous subsequence of a , that is, if it is equal to a_ l , a_ l + 1 , . . . , a_ r for some l, r . Suppose m is some known constant. For any array, having m or more elements, let' s define it' s beauty as the sum of m largest elements of that array. For example: For array x = [ 4, 3, 1, 5, 2] and m = 3 , the 3 largest elements of x are 5 , 4 and 3 , so the beauty of x is 5 + 4 + 3 = 12 . For array x = [ 10, 10, 10] and m = 2 , the beauty of x is 10 + 10 = 20 . You are given an array a_ 1, a_ 2, . . . , a_ n , the value of the said constant m and an integer k . Your need to split the array a into exactly k subarrays such that: Each element from a belongs to exactly one subarray. Each subarray has at least m elements. The sum of all beauties of k subarrays is maximum possible.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m , 2 \u2264 k , m \u00b7 k \u2264 n ) \u2014 the number of elements in a , the constant m in the definition of beauty and the number of subarrays to split to. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "In the first line, print the maximum possible sum of the beauties of the subarrays in the optimal partition. In the second line, print k- 1 integers p_ 1, p_ 2, . . . , p_ k- 1 ( 1 \u2264 p_ 1 < p_ 2 < . . . < p_ k- 1 < n ) representing the partition of the array, in which: All elements with indices from 1 to p_ 1 belong to the first subarray. All elements with indices from p_ 1 + 1 to p_ 2 belong to the second subarray. . . . . All elements with indices from p_ k- 1 + 1 to n belong to the last, k - th subarray. If there are several optimal partitions, print any of them.",
    "note": "In the first example, one of the optimal partitions is [ 5, 2, 5] , [ 2, 4] , [ 1, 1, 3, 2] . The beauty of the subarray [ 5, 2, 5] is 5 + 5 = 10 . The beauty of the subarray [ 2, 4] is 2 + 4 = 6 . The beauty of the subarray [ 1, 1, 3, 2] is 3 + 2 = 5 . The sum of their beauties is 10 + 6 + 5 = 21 . In the second example, one optimal partition is [ 4] , [ 1, 3] , [ 2, 2] , [ 3] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1114B"
  },
  {
    "title": "Got Any Grapes?",
    "url": "https://codeforces.com/problemset/problem/1114/A",
    "history": "The Duck songFor simplicity, we' ll assume that there are only three types of grapes: green grapes, purple grapes and black grapes. Andrew, Dmitry and Michal are all grapes' lovers, however their preferences of grapes are different. To make all of them happy, the following should happen: Andrew, Dmitry and Michal should eat at least x , y and z grapes, respectively. Andrew has an extreme affinity for green grapes, thus he will eat green grapes and green grapes only. On the other hand, Dmitry is not a fan of black grapes \u2014 any types of grapes except black would do for him. In other words, Dmitry can eat green and purple grapes. Michal has a common taste \u2014 he enjoys grapes in general and will be pleased with any types of grapes, as long as the quantity is sufficient. Knowing that his friends are so fond of grapes, Aki decided to host a grape party with them. He has prepared a box with a green grapes, b purple grapes and c black grapes. However, Aki isn' t sure if the box he prepared contains enough grapes to make everyone happy. Can you please find out whether it' s possible to distribute grapes so that everyone is happy or Aki has to buy some more grapes? It is not required to distribute all the grapes, so it' s possible that some of them will remain unused.",
    "input": "The first line contains three integers x , y and z ( 1 \u2264 x, y, z \u2264 10^ 5 ) \u2014 the number of grapes Andrew, Dmitry and Michal want to eat. The second line contains three integers a , b , c ( 1 \u2264 a, b, c \u2264 10^ 5 ) \u2014 the number of green, purple and black grapes in the box.",
    "output": "If there is a grape distribution that allows everyone to be happy, print \" YES\" , otherwise print \" NO\" .",
    "note": "In the first example, there is only one possible distribution: Andrew should take 1 green grape, Dmitry should take 3 remaining green grapes and 3 purple grapes, and Michal will take 2 out of 3 available black grapes. In the second test, there is no possible distribution, since Andrew is not be able to eat enough green grapes. : (",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1114A"
  },
  {
    "title": "Sasha and Magnetic Machines",
    "url": "https://codeforces.com/problemset/problem/1113/B",
    "history": "One day Sasha visited the farmer 2D and his famous magnetic farm. On this farm, the crop grows due to the influence of a special magnetic field. Maintaining of the magnetic field is provided by n machines, and the power of the i - th machine is a_ i . This year 2D decided to cultivate a new culture, but what exactly he didn' t say. For the successful growth of the new culture, it is necessary to slightly change the powers of the machines. 2D can at most once choose an arbitrary integer x , then choose one machine and reduce the power of its machine by x times, and at the same time increase the power of one another machine by x times ( powers of all the machines must stay positive integers) . Note that he may not do that if he wants. More formally, 2D can choose two such indices i and j , and one integer x such that x is a divisor of a_ i , and change powers as following: a_ i = a_ i/ x , a_ j = a_ j \u00b7 x Sasha is very curious, that' s why he wants to calculate the minimum total power the farmer can reach. There are too many machines, and Sasha can' t cope with computations, help him!",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 5 \u00b7 10^ 4 ) \u2014 the number of machines. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) \u2014 the powers of the machines.",
    "output": "Print one integer \u2014 minimum total power.",
    "note": "In the first example, the farmer can reduce the power of the 4 - th machine by 2 times, and increase the power of the 1 - st machine by 2 times, then the powers will be: [ 2, 2, 3, 2, 5] . In the second example, the farmer can reduce the power of the 3 - rd machine by 2 times, and increase the power of the 2 - nd machine by 2 times. At the same time, the farmer can leave is be as it is and the total power won' t change. In the third example, it is optimal to leave it be as it is.",
    "topics": [
      "greedy",
      "number theory"
    ],
    "id": "1113B"
  },
  {
    "title": "Sasha and His Trip",
    "url": "https://codeforces.com/problemset/problem/1113/A",
    "history": "Sasha is a very happy guy, that' s why he is always on the move. There are n cities in the country where Sasha lives. They are all located on one straight line, and for convenience, they are numbered from 1 to n in increasing order. The distance between any two adjacent cities is equal to 1 kilometer. Since all roads in the country are directed, it' s possible to reach the city y from the city x only if x < y . Once Sasha decided to go on a trip around the country and to visit all n cities. He will move with the help of his car, Cheetah- 2677. The tank capacity of this model is v liters, and it spends exactly 1 liter of fuel for 1 kilometer of the way. At the beginning of the journey, the tank is empty. Sasha is located in the city with the number 1 and wants to get to the city with the number n . There is a gas station in each city. In the i - th city, the price of 1 liter of fuel is i dollars. It is obvious that at any moment of time, the tank can contain at most v liters of fuel. Sasha doesn' t like to waste money, that' s why he wants to know what is the minimum amount of money is needed to finish the trip if he can buy fuel in any city he wants. Help him to figure it out!",
    "input": "The first line contains two integers n and v ( 2 \u2264 n \u2264 100 , 1 \u2264 v \u2264 100 ) \u2014 the number of cities in the country and the capacity of the tank.",
    "output": "Print one integer \u2014 the minimum amount of money that is needed to finish the trip.",
    "note": "In the first example, Sasha can buy 2 liters for 2 dollars ( 1 dollar per liter) in the first city, drive to the second city, spend 1 liter of fuel on it, then buy 1 liter for 2 dollars in the second city and then drive to the 4 - th city. Therefore, the answer is 1+ 1+ 2= 4 . In the second example, the capacity of the tank allows to fill the tank completely in the first city, and drive to the last city without stops in other cities.",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1113A"
  },
  {
    "title": "Tape",
    "url": "https://codeforces.com/problemset/problem/1110/B",
    "history": "You have a long stick, consisting of m segments enumerated from 1 to m . Each segment is 1 centimeter long. Sadly, some segments are broken and need to be repaired. You have an infinitely long repair tape. You want to cut some pieces from the tape and use them to cover all of the broken segments. To be precise, a piece of tape of integer length t placed at some position s will cover segments s, s+ 1, . . . , s+ t- 1 . You are allowed to cover non- broken segments; it is also possible that some pieces of tape will overlap. Time is money, so you want to cut at most k continuous pieces of tape to cover all the broken segments. What is the minimum total length of these pieces?",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 10^ 5 , n \u2264 m \u2264 10^ 9 , 1 \u2264 k \u2264 n ) \u2014 the number of broken segments, the length of the stick and the maximum number of pieces you can use. The second line contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 m ) \u2014 the positions of the broken segments. These integers are given in increasing order, that is, b_ 1 < b_ 2 < . . . < b_ n .",
    "output": "Print the minimum total length of the pieces.",
    "note": "In the first example, you can use a piece of length 11 to cover the broken segments 20 and 30 , and another piece of length 6 to cover 75 and 80 , for a total length of 17 . In the second example, you can use a piece of length 4 to cover broken segments 1 , 2 and 4 , and two pieces of length 1 to cover broken segments 60 and 87 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1110B"
  },
  {
    "title": "MST Unification",
    "url": "https://codeforces.com/problemset/problem/1108/F",
    "history": "You are given an undirected weighted connected graph with n vertices and m edges without loops and multiple edges. The i - th edge is e_ i = ( u_ i, v_ i, w_ i) ; the distance between vertices u_ i and v_ i along the edge e_ i is w_ i ( 1 \u2264 w_ i ) . The graph is connected, i. e. for any pair of vertices, there is at least one path between them consisting only of edges of the given graph. A minimum spanning tree ( MST) in case of positive weights is a subset of the edges of a connected weighted undirected graph that connects all the vertices together and has minimum total cost among all such subsets ( total cost is the sum of costs of chosen edges) . You can modify the given graph. The only operation you can perform is the following: increase the weight of some edge by 1 . You can increase the weight of each edge multiple ( possibly, zero) times. Suppose that the initial MST cost is k . Your problem is to increase weights of some edges with minimum possible number of operations in such a way that the cost of MST in the obtained graph remains k , but MST is unique ( it means that there is only one way to choose MST in the obtained graph) . Your problem is to calculate the minimum number of operations required to do it.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, n - 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and the number of edges in the initial graph. The next m lines contain three integers each. The i - th line contains the description of the i - th edge e_ i . It is denoted by three integers u_ i, v_ i and w_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i v_ i, 1 \u2264 w \u2264 10^ 9 ) , where u_ i and v_ i are vertices connected by the i - th edge and w_ i is the weight of this edge. It is guaranteed that the given graph doesn' t contain loops and multiple edges ( i. e. for each i from 1 to m u_ i v_ i and for each unordered pair of vertices ( u, v) there is at most one edge connecting this pair of vertices) . It is also guaranteed that the given graph is connected.",
    "output": "Print one integer \u2014 the minimum number of operations to unify MST of the initial graph without changing the cost of MST.",
    "note": "The picture corresponding to the first example: You can, for example, increase weight of the edge ( 1, 6) or ( 6, 3) by 1 to unify MST. The picture corresponding to the last example: You can, for example, increase weights of edges ( 1, 5) and ( 2, 4) by 1 to unify MST.",
    "topics": [
      "binary search",
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1108F"
  },
  {
    "title": "Array and Segments (Easy version)",
    "url": "https://codeforces.com/problemset/problem/1108/E1",
    "history": "The only difference between easy and hard versions is a number of elements in the array. You are given an array a consisting of n integers. The value of the i - th element of the array is a_ i . You are also given a set of m segments. The j - th segment is [ l_ j; r_ j] , where 1 \u2264 l_ j \u2264 r_ j \u2264 n . You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one ( independently) . For example, if the initial array a = [ 0, 0, 0, 0, 0] and the given segments are [ 1; 3] and [ 2; 4] then you can choose both of them and the array will become b = [ - 1, - 2, - 2, - 1, 0] . You have to choose some subset of the given segments ( each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array a and obtain the array b then the value max_ i= 1^ nb_ i - min_ i= 1^ nb_ i will be maximum possible. Note that you can choose the empty set. If there are multiple answers, you can print any. If you are Python programmer, consider using PyPy instead of Python when you submit your code.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 300, 0 \u2264 m \u2264 300 ) \u2014 the length of the array a and the number of segments, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 6 \u2264 a_ i \u2264 10^ 6 ) , where a_ i is the value of the i - th element of the array a . The next m lines are contain two integers each. The j - th of them contains two integers l_ j and r_ j ( 1 \u2264 l_ j \u2264 r_ j \u2264 n ) , where l_ j and r_ j are the ends of the j - th segment.",
    "output": "In the first line of the output print one integer d \u2014 the maximum possible value max_ i= 1^ nb_ i - min_ i= 1^ nb_ i if b is the array obtained by applying some subset of the given segments to the array a . In the second line of the output print one integer q ( 0 \u2264 q \u2264 m ) \u2014 the number of segments you apply. In the third line print q distinct integers c_ 1, c_ 2, . . . , c_ q in any order ( 1 \u2264 c_ k \u2264 m ) \u2014 indices of segments you apply to the array a in such a way that the value max_ i= 1^ nb_ i - min_ i= 1^ nb_ i of the obtained array b is maximum possible. If there are multiple answers, you can print any.",
    "note": "In the first example the obtained array b will be [ 0, - 4, 1, 1, 2] so the answer is 6 . In the second example the obtained array b will be [ 2, - 3, 1, - 1, 4] so the answer is 7 . In the third example you cannot do anything so the answer is 0 .",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1108E1"
  },
  {
    "title": "Diverse Garland",
    "url": "https://codeforces.com/problemset/problem/1108/D",
    "history": "You have a garland consisting of n lamps. Each lamp is colored red, green or blue. The color of the i - th lamp is s_ i ( ' R' , ' G' and ' B' \u2014 colors of lamps in the garland) . You have to recolor some lamps in this garland ( recoloring a lamp means changing its initial color to another) in such a way that the obtained garland is diverse. A garland is called diverse if any two adjacent ( consecutive) lamps ( i. e. such lamps that the distance between their positions is 1 ) have distinct colors. In other words, if the obtained garland is t then for each i from 1 to n- 1 the condition t_ i t_ i + 1 should be satisfied. Among all ways to recolor the initial garland to make it diverse you have to choose one with the minimum number of recolored lamps. If there are multiple optimal solutions, print any of them.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of lamps. The second line of the input contains the string s consisting of n characters ' R' , ' G' and ' B' \u2014 colors of lamps in the garland.",
    "output": "In the first line of the output print one integer r \u2014 the minimum number of recolors needed to obtain a diverse garland from the given one. In the second line of the output print one string t of length n \u2014 a diverse garland obtained from the initial one with minimum number of recolors. If there are multiple optimal solutions, print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1108D"
  },
  {
    "title": "Nice Garland",
    "url": "https://codeforces.com/problemset/problem/1108/C",
    "history": "You have a garland consisting of n lamps. Each lamp is colored red, green or blue. The color of the i - th lamp is s_ i ( ' R' , ' G' and ' B' \u2014 colors of lamps in the garland) . You have to recolor some lamps in this garland ( recoloring a lamp means changing its initial color to another) in such a way that the obtained garland is nice. A garland is called nice if any two lamps of the same color have distance divisible by three between them. I. e. if the obtained garland is t , then for each i, j such that t_ i = t_ j should be satisfied | i- j| mod 3 = 0 . The value | x| means absolute value of x , the operation x mod y means remainder of x when divided by y . For example, the following garlands are nice: \" RGBRGBRG\" , \" GB\" , \" R\" , \" GRBGRBG\" , \" BRGBRGB\" . The following garlands are not nice: \" RR\" , \" RGBG\" . Among all ways to recolor the initial garland to make it nice you have to choose one with the minimum number of recolored lamps. If there are multiple optimal solutions, print any of them.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of lamps. The second line of the input contains the string s consisting of n characters ' R' , ' G' and ' B' \u2014 colors of lamps in the garland.",
    "output": "In the first line of the output print one integer r \u2014 the minimum number of recolors needed to obtain a nice garland from the given one. In the second line of the output print one string t of length n \u2014 a nice garland obtained from the initial one with minimum number of recolors. If there are multiple optimal solutions, print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1108C"
  },
  {
    "title": "Divisors of Two Integers",
    "url": "https://codeforces.com/problemset/problem/1108/B",
    "history": "Recently you have received two positive integer numbers x and y . You forgot them, but you remembered a shuffled list containing all divisors of x ( including 1 and x ) and all divisors of y ( including 1 and y ) . If d is a divisor of both numbers x and y at the same time, there are two occurrences of d in the list. For example, if x= 4 and y= 6 then the given list can be any permutation of the list [ 1, 2, 4, 1, 2, 3, 6] . Some of the possible lists are: [ 1, 1, 2, 4, 6, 3, 2] , [ 4, 6, 1, 1, 2, 3, 2] or [ 1, 6, 3, 2, 4, 1, 2] . Your problem is to restore suitable positive integer numbers x and y that would yield the same list of divisors ( possibly in different order) . It is guaranteed that the answer exists, i. e. the given list of divisors corresponds to some positive integers x and y .",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 128 ) \u2014 the number of divisors of x and y . The second line of the input contains n integers d_ 1, d_ 2, . . . , d_ n ( 1 \u2264 d_ i \u2264 10^ 4 ) , where d_ i is either divisor of x or divisor of y . If a number is divisor of both numbers x and y then there are two copies of this number in the list.",
    "output": "Print two positive integer numbers x and y \u2014 such numbers that merged list of their divisors is the permutation of the given list of integers. It is guaranteed that the answer exists.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1108B"
  },
  {
    "title": "Brutality",
    "url": "https://codeforces.com/problemset/problem/1107/C",
    "history": "You are playing a new famous fighting game: Kortal Mombat XII. You have to perform a brutality on your opponent' s character. You are playing the game on the new generation console so your gamepad have 26 buttons. Each button has a single lowercase Latin letter from ' a' to ' z' written on it. All the letters on buttons are pairwise distinct. You are given a sequence of hits, the i - th hit deals a_ i units of damage to the opponent' s character. To perform the i - th hit you have to press the button s_ i on your gamepad. Hits are numbered from 1 to n . You know that if you press some button more than k times in a row then it' ll break. You cherish your gamepad and don' t want to break any of its buttons. To perform a brutality you have to land some of the hits of the given sequence. You are allowed to skip any of them, however changing the initial order of the sequence is prohibited. The total damage dealt is the sum of a_ i over all i for the hits which weren' t skipped. Note that if you skip the hit then the counter of consecutive presses the button won' t reset. Your task is to skip some hits to deal the maximum possible total damage to the opponent' s character and not break your gamepad buttons.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of hits and the maximum number of times you can push the same button in a row. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the damage of the i - th hit. The third line of the input contains the string s consisting of exactly n lowercase Latin letters \u2014 the sequence of hits ( each character is the letter on the button you need to press to perform the corresponding hit) .",
    "output": "Print one integer dmg \u2014 the maximum possible damage to the opponent' s character you can deal without breaking your gamepad buttons.",
    "note": "In the first example you can choose hits with numbers [ 1, 3, 4, 5, 6, 7] with the total damage 1 + 16 + 18 + 7 + 2 + 10 = 54 . In the second example you can choose all hits so the total damage is 2 + 4 + 1 + 3 + 1000 = 1010 . In the third example you can choose all hits expect the third one so the total damage is 2 + 4 + 3 + 1000 = 1009 . In the fourth example you can choose hits with numbers [ 2, 3, 6, 8] . Only this way you can reach the maximum total damage 15 + 2 + 8 + 16 = 41 . In the fifth example you can choose only hits with numbers [ 2, 4, 6] with the total damage 18 + 19 + 15 = 52 . In the sixth example you can change either first hit or the second hit ( it does not matter) with the total damage 10 .",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1107C"
  },
  {
    "title": "Digits Sequence Dividing",
    "url": "https://codeforces.com/problemset/problem/1107/A",
    "history": "You are given a sequence s consisting of n digits from 1 to 9 . You have to divide it into at least two segments ( segment \u2014 is a consecutive sequence of elements) ( in other words, you have to place separators between some digits of the sequence) in such a way that each element belongs to exactly one segment and if the resulting division will be represented as an integer numbers sequence then each next element of this sequence will be strictly greater than the previous one. More formally: if the resulting division of the sequence is t_ 1, t_ 2, . . . , t_ k , where k is the number of element in a division, then for each i from 1 to k- 1 the condition t_ i < t_ i + 1 ( using numerical comparing, it means that the integer representations of strings are compared) should be satisfied. For example, if s= 654 then you can divide it into parts [ 6, 54] and it will be suitable division. But if you will divide it into parts [ 65, 4] then it will be bad division because 65 > 4 . If s= 123 then you can divide it into parts [ 1, 23] , [ 1, 2, 3] but not into parts [ 12, 3] . Your task is to find any suitable division for each of the q independent queries.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 300 ) \u2014 the number of queries. The first line of the i - th query contains one integer number n_ i ( 2 \u2264 n_ i \u2264 300 ) \u2014 the number of digits in the i - th query. The second line of the i - th query contains one string s_ i of length n_ i consisting only of digits from 1 to 9 .",
    "output": "If the sequence of digits in the i - th query cannot be divided into at least two parts in a way described in the problem statement, print the single line \" NO\" for this query. Otherwise in the first line of the answer to this query print \" YES\" , on the second line print k_ i \u2014 the number of parts in your division of the i - th query sequence and in the third line print k_ i strings t_ i, 1, t_ i, 2, . . . , t_ i, k_ i \u2014 your division. Parts should be printed in order of the initial string digits. It means that if you write the parts one after another without changing their order then you' ll get the string s_ i . See examples for better understanding.",
    "note": "",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1107A"
  },
  {
    "title": "Lunar New Year and a Wander",
    "url": "https://codeforces.com/problemset/problem/1106/D",
    "history": "Lunar New Year is approaching, and Bob decides to take a wander in a nearby park. The park can be represented as a connected graph with n nodes and m bidirectional edges. Initially Bob is at the node 1 and he records 1 on his notebook. He can wander from one node to another through those bidirectional edges. Whenever he visits a node not recorded on his notebook, he records it. After he visits all nodes at least once, he stops wandering, thus finally a permutation of nodes a_ 1, a_ 2, . . . , a_ n is recorded. Wandering is a boring thing, but solving problems is fascinating. Bob wants to know the lexicographically smallest sequence of nodes he can record while wandering. Bob thinks this problem is trivial, and he wants you to solve it. A sequence x is lexicographically smaller than a sequence y if and only if one of the following holds: x is a prefix of y , but x y ( this is impossible in this problem as all considered sequences have the same length) ; in the first position where x and y differ, the sequence x has a smaller element than the corresponding element in y .",
    "input": "The first line contains two positive integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) , denoting the number of nodes and edges, respectively. The following m lines describe the bidirectional edges in the graph. The i - th of these lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) , representing the nodes the i - th edge connects. Note that the graph can have multiple edges connecting the same two nodes and self- loops. It is guaranteed that the graph is connected.",
    "output": "Output a line containing the lexicographically smallest sequence a_ 1, a_ 2, . . . , a_ n Bob can record.",
    "note": "In the first sample, Bob' s optimal wandering path could be 1 \u2192 2 \u2192 1 \u2192 3 . Therefore, Bob will obtain the sequence { 1, 2, 3} , which is the lexicographically smallest one. In the second sample, Bob' s optimal wandering path could be 1 \u2192 4 \u2192 3 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 5 . Therefore, Bob will obtain the sequence { 1, 4, 3, 2, 5} , which is the lexicographically smallest one.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1106D"
  },
  {
    "title": "Lunar New Year and Number Division",
    "url": "https://codeforces.com/problemset/problem/1106/C",
    "history": "Lunar New Year is approaching, and Bob is struggling with his homework \u2013 a number division problem. There are n positive integers a_ 1, a_ 2, . . . , a_ n on Bob' s homework paper, where n is always an even number. Bob is asked to divide those numbers into groups, where each group must contain at least 2 numbers. Suppose the numbers are divided into m groups, and the sum of the numbers in the j - th group is s_ j . Bob' s aim is to minimize the sum of the square of s_ j , that is \u2211_ j = 1^ m s_ j^ 2. Bob is puzzled by this hard problem. Could you please help him solve it?",
    "input": "The first line contains an even integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) , denoting that there are n integers on Bob' s homework paper. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 4 ) , describing the numbers you need to deal with.",
    "output": "A single line containing one integer, denoting the minimum of the sum of the square of s_ j , which is \u2211_ i = j^ m s_ j^ 2, where m is the number of groups.",
    "note": "In the first sample, one of the optimal solutions is to divide those 4 numbers into 2 groups { 2, 8} , { 5, 3} . Thus the answer is ( 2 + 8) ^ 2 + ( 5 + 3) ^ 2 = 164 . In the second sample, one of the optimal solutions is to divide those 6 numbers into 3 groups { 1, 2} , { 1, 2} , { 1, 2} . Thus the answer is ( 1 + 2) ^ 2 + ( 1 + 2) ^ 2 + ( 1 + 2) ^ 2 = 27 .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1106C"
  },
  {
    "title": "Balanced Ternary String",
    "url": "https://codeforces.com/problemset/problem/1102/D",
    "history": "You are given a string s consisting of exactly n characters, and each character is either ' 0' , ' 1' or ' 2' . Such strings are called ternary strings. Your task is to replace minimum number of characters in this string with other characters to obtain a balanced ternary string ( balanced ternary string is a ternary string such that the number of characters ' 0' in this string is equal to the number of characters ' 1' , and the number of characters ' 1' ( and ' 0' obviously) is equal to the number of characters ' 2' ) . Among all possible balanced ternary strings you have to obtain the lexicographically ( alphabetically) smallest. Note that you can neither remove characters from the string nor add characters to the string. Also note that you can replace the given characters only with characters ' 0' , ' 1' and ' 2' . It is guaranteed that the answer exists.",
    "input": "The first line of the input contains one integer n ( 3 \u2264 n \u2264 3 \u00b7 10^ 5 , n is divisible by 3 ) \u2014 the number of characters in s . The second line contains the string s consisting of exactly n characters ' 0' , ' 1' and ' 2' .",
    "output": "Print one string \u2014 the lexicographically ( alphabetically) smallest balanced ternary string which can be obtained from the given one with minimum number of replacements. Because n is divisible by 3 it is obvious that the answer exists. And it is obvious that there is only one possible answer.",
    "note": "",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1102D"
  },
  {
    "title": "Array K-Coloring",
    "url": "https://codeforces.com/problemset/problem/1102/B",
    "history": "You are given an array a consisting of n integer numbers. You have to color this array in k colors in such a way that: Each element of the array should be colored in some color; For each i from 1 to k there should be at least one element colored in the i - th color in the array; For each i from 1 to k all elements colored in the i - th color should be distinct. Obviously, such coloring might be impossible. In this case, print \" NO\" . Otherwise print \" YES\" and any coloring ( i. e. numbers c_ 1, c_ 2, . . . c_ n , where 1 \u2264 c_ i \u2264 k and c_ i is the color of the i - th element of the given array) satisfying the conditions above. If there are multiple answers, you can print any.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 5000 ) \u2014 the length of the array a and the number of colors, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 5000 ) \u2014 elements of the array a .",
    "output": "If there is no answer, print \" NO\" . Otherwise print \" YES\" and any coloring ( i. e. numbers c_ 1, c_ 2, . . . c_ n , where 1 \u2264 c_ i \u2264 k and c_ i is the color of the i - th element of the given array) satisfying the conditions described in the problem statement. If there are multiple answers, you can print any.",
    "note": "In the first example the answer 2 1 2 1 is also acceptable. In the second example the answer 1 1 1 2 2 is also acceptable. There exist other acceptable answers for both examples.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1102B"
  },
  {
    "title": "Accordion",
    "url": "https://codeforces.com/problemset/problem/1101/B",
    "history": "An accordion is a string ( yes, in the real world accordions are musical instruments, but let' s forget about it for a while) which can be represented as a concatenation of: an opening bracket ( ASCII code 091 ) , a colon ( ASCII code 058 ) , some ( possibly zero) vertical line characters ( ASCII code 124 ) , another colon, and a closing bracket ( ASCII code 093 ) . The length of the accordion is the number of characters in it. For example, [ : : ] , [ : | | : ] and [ : | | | : ] are accordions having length 4 , 6 and 7 . ( : | : ) , : | | : , [ : ] , ] : | | : [ are not accordions. You are given a string s . You want to transform it into an accordion by removing some ( possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from s , and if so, what is the maximum possible length of the result?",
    "input": "The only line contains one string s ( 1 \u2264 | s| \u2264 500000 ) . It consists of lowercase Latin letters and characters [ , ] , : and | .",
    "output": "If it is not possible to obtain an accordion by removing some characters from s , print - 1 . Otherwise print maximum possible length of the resulting accordion.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1101B"
  },
  {
    "title": "Ivan and Burgers",
    "url": "https://codeforces.com/problemset/problem/1100/F",
    "history": "Ivan loves burgers and spending money. There are n burger joints on the street where Ivan lives. Ivan has q friends, and the i - th friend suggested to meet at the joint l_ i and walk to the joint r_ i ( l_ i \u2264 r_ i) . While strolling with the i - th friend Ivan can visit all joints x which satisfy l_ i \u2264 x \u2264 r_ i . For each joint Ivan knows the cost of the most expensive burger in it, it costs c_ i burles. Ivan wants to visit some subset of joints on his way, in each of them he will buy the most expensive burger and spend the most money. But there is a small issue: his card broke and instead of charging him for purchases, the amount of money on it changes as follows. If Ivan had d burles before the purchase and he spent c burles at the joint, then after the purchase he would have d \u2295 c burles, where \u2295 denotes the bitwise XOR operation. Currently Ivan has 2^ 2^ 100 - 1 burles and he wants to go out for a walk. Help him to determine the maximal amount of burles he can spend if he goes for a walk with the friend i . The amount of burles he spends is defined as the difference between the initial amount on his account and the final account.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 500 000 ) \u2014 the number of burger shops. The next line contains n integers c_ 1, c_ 2, . . . , c_ n ( 0 \u2264 c_ i \u2264 10^ 6 ) , where c_ i \u2014 the cost of the most expensive burger in the burger joint i . The third line contains one integer q ( 1 \u2264 q \u2264 500 000 ) \u2014 the number of Ivan' s friends. Each of the next q lines contain two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 pairs of numbers of burger shops between which Ivan will walk.",
    "output": "Output q lines, i - th of which containing the maximum amount of money Ivan can spend with the friend i .",
    "note": "In the first test, in order to spend the maximum amount of money with the first and third friends, Ivan just needs to go into the first burger. With a second friend, Ivan just go to the third burger. In the second test for a third friend ( who is going to walk from the first to the third burger) , there are only 8 options to spend money \u2014 0 , 12 , 14 , 23 , 12 \u2295 14 = 2 , 14 \u2295 23 = 25 , 12 \u2295 23 = 27 , 12 \u2295 14 \u2295 23 = 20 . The maximum amount of money it turns out to spend, if you go to the first and third burger \u2014 12 \u2295 23 = 27 .",
    "topics": [
      "data structures",
      "divide and conquer",
      "greedy",
      "math"
    ],
    "id": "1100F"
  },
  {
    "title": "Construct a tree",
    "url": "https://codeforces.com/problemset/problem/1098/C",
    "history": "Misha walked through the snowy forest and he was so fascinated by the trees to decide to draw his own tree! Misha would like to construct a rooted tree with n vertices, indexed from 1 to n , where the root has index 1. Every other vertex has a parent p_ i , and i is called a child of vertex p_ i . Vertex u belongs to the subtree of vertex v iff v is reachable from u while iterating over the parents ( u , p_ u , p_ p_ u , . . . ) . Clearly, v belongs to its own subtree, and the number of vertices in the subtree is called the size of the subtree. Misha is only interested in trees where every vertex belongs to the subtree of vertex 1 . Below there is a tree with 6 vertices. The subtree of vertex 2 contains vertices 2 , 3 , 4 , 5 . Hence the size of its subtree is 4 . The branching coefficient of the tree is defined as the maximum number of children in any vertex. For example, for the tree above the branching coefficient equals 2 . Your task is to construct a tree with n vertices such that the sum of the subtree sizes for all vertices equals s , and the branching coefficient is minimum possible.",
    "input": "The only input line contains two integers n and s \u2014 the number of vertices in the tree and the desired sum of the subtree sizes ( 2 \u2264 n \u2264 10^ 5 ; 1 \u2264 s \u2264 10^ 10 ) .",
    "output": "If the required tree does not exist, output \u00abNo\u00bb. Otherwise output \u00abYes\u00bb on the first line, and in the next one output integers p_ 2 , p_ 3 , . . . , p_ n , where p_ i denotes the parent of vertex i .",
    "note": "Below one can find one of the possible solutions for the first sample case. The sum of subtree sizes equals 3 + 1 + 1 = 5 , and the branching coefficient equals 2 . Below one can find one of the possible solutions for the third sample case. The sum of subtree sizes equals 6 + 3 + 2 + 1 + 2 + 1 = 15 , and the branching coefficient equals 2 .",
    "topics": [
      "binary search",
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1098C"
  },
  {
    "title": "Nice table",
    "url": "https://codeforces.com/problemset/problem/1098/B",
    "history": "You are given an n \u00d7 m table, consisting of characters \u00abA\u00bb, \u00abG\u00bb, \u00abC\u00bb, \u00abT\u00bb. Let' s call a table nice, if every 2 \u00d7 2 square contains all four distinct characters. Your task is to find a nice table ( also consisting of \u00abA\u00bb, \u00abG\u00bb, \u00abC\u00bb, \u00abT\u00bb) , that differs from the given table in the minimum number of characters.",
    "input": "First line contains two positive integers n and m \u2014 number of rows and columns in the table you are given ( 2 \u2264 n, m, n \u00d7 m \u2264 300 000 ) . Then, n lines describing the table follow. Each line contains exactly m characters \u00abA\u00bb, \u00abG\u00bb, \u00abC\u00bb, \u00abT\u00bb.",
    "output": "Output n lines, m characters each. This table must be nice and differ from the input table in the minimum number of characters.",
    "note": "In the first sample, the table is already nice. In the second sample, you can change 9 elements to make the table nice.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1098B"
  },
  {
    "title": "Sum in the tree",
    "url": "https://codeforces.com/problemset/problem/1098/A",
    "history": "Mitya has a rooted tree with n vertices indexed from 1 to n , where the root has index 1 . Each vertex v initially had an integer number a_ v \u2265 0 written on it. For every vertex v Mitya has computed s_ v : the sum of all values written on the vertices on the path from vertex v to the root, as well as h_ v \u2014 the depth of vertex v , which denotes the number of vertices on the path from vertex v to the root. Clearly, s_ 1= a_ 1 and h_ 1= 1 . Then Mitya erased all numbers a_ v , and by accident he also erased all values s_ v for vertices with even depth ( vertices with even h_ v ) . Your task is to restore the values a_ v for every vertex, or determine that Mitya made a mistake. In case there are multiple ways to restore the values, you' re required to find one which minimizes the total sum of values a_ v for all vertices in the tree.",
    "input": "The first line contains one integer n \u2014 the number of vertices in the tree ( 2 \u2264 n \u2264 10^ 5 ) . The following line contains integers p_ 2 , p_ 3 , . . . p_ n , where p_ i stands for the parent of vertex with index i in the tree ( 1 \u2264 p_ i < i ) . The last line contains integer values s_ 1 , s_ 2 , . . . , s_ n ( - 1 \u2264 s_ v \u2264 10^ 9 ) , where erased values are replaced by - 1 .",
    "output": "Output one integer \u2014 the minimum total sum of all values a_ v in the original tree, or - 1 if such tree does not exist.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1098A"
  },
  {
    "title": "Egor and an RPG game",
    "url": "https://codeforces.com/problemset/problem/1097/E",
    "history": "One Saturday afternoon Egor was playing his favorite RPG game. While discovering new lands and territories, he came across the following sign: Egor is a passionate player, but he is an algorithmician as well. That' s why he instantly spotted four common letters in two words on the sign above \u2014 if we permute the letters \" R\" , \" E\" , \" G\" , \" O\" from the first word, we can obtain the letters \" O\" , \" G\" , \" R\" , \" E\" . Egor got inspired by the sign and right away he came up with a problem about permutations. You are given a permutation of length n . You have to split it into some non- empty subsequences so that each element of the permutation belongs to exactly one subsequence. Each subsequence must be monotonic \u2014 that is, either increasing or decreasing. Sequence is called to be a subsequence if it can be derived from permutation by deleting some ( possibly none) elements without changing the order of the remaining elements. The number of subsequences should be small enough \u2014 let f( n) be the minimum integer k such that every permutation of length n can be partitioned into at most k monotonic subsequences. You need to split the permutation into at most f( n) monotonic subsequences.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. You can only use t = 1 in hacks. Next, descriptions of t test cases come, each of them in the following format. The first line of a single test case contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of the permutation. The second line contains n distinct integers a_ i ( 1 \u2264 a_ i \u2264 n ) \u2014 the permutation itself. The sum of the values of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case print the answer in the following format: In the first line print k ( 1 \u2264 k \u2264 f( n) ) \u2014 the number of the subsequences in the partition. In the next k lines, print the descriptions of found subsequences. Each description should start with a number l_ i ( 1 \u2264 l_ i \u2264 n ) \u2014 the length of the corresponding subsequence, followed by l_ i integers \u2014 the values of this subsequence in the order in which they occur in the permutation. Each subsequence you output must be either increasing or decreasing. In case there are multiple possible answers, print any of them.",
    "note": "In the example, we can split: [ 4, 3, 1, 2] into [ 4, 3, 1] , [ 2] [ 4, 5, 6, 1, 3, 2] into [ 4, 1] , [ 5, 6] and [ 3, 2] [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] into [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Surely, there are many more answers possible.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1097E"
  },
  {
    "title": "Yuhao and a Parenthesis",
    "url": "https://codeforces.com/problemset/problem/1097/C",
    "history": "One day, Yuhao came across a problem about checking if some bracket sequences are correct bracket sequences. A bracket sequence is any non- empty sequence of opening and closing parentheses. A bracket sequence is called a correct bracket sequence if it' s possible to obtain a correct arithmetic expression by inserting characters \" + \" and \" 1\" into this sequence. For example, the sequences \" ( ( ) ) ( ) \" , \" ( ) \" and \" ( ( ) ( ( ) ) ) \" are correct, while the bracket sequences \" ) ( \" , \" ( ( ) \" and \" ( ( ) ) ) ( \" are not correct. Yuhao found this problem too simple for him so he decided to make the problem harder. You are given many ( not necessarily correct) bracket sequences. The task is to connect some of them into ordered pairs so that each bracket sequence occurs in at most one pair and the concatenation of the bracket sequences in each pair is a correct bracket sequence. The goal is to create as many pairs as possible. This problem unfortunately turned out to be too difficult for Yuhao. Can you help him and solve it?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of bracket sequences. Each of the following n lines contains one bracket sequence \u2014 a non- empty string which consists only of characters \" ( \" and \" ) \" . The sum of lengths of all bracket sequences in the input is at most 5 \u00b7 10^ 5 . Note that a bracket sequence may appear in the input multiple times. In this case, you can use each copy of the sequence separately. Also note that the order in which strings appear in the input doesn' t matter.",
    "output": "Print a single integer \u2014 the maximum number of pairs which can be made, adhering to the conditions in the statement.",
    "note": "In the first example, it' s optimal to construct two pairs: \" ( ( ) ( ) ) \" and \" ( ) \" .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1097C"
  },
  {
    "title": "Find Divisible",
    "url": "https://codeforces.com/problemset/problem/1096/A",
    "history": "You are given a range of positive integers from l to r . Find such a pair of integers ( x, y) that l \u2264 x, y \u2264 r , x y and x divides y . If there are multiple answers, print any of them. You are also asked to answer T independent queries.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of queries. Each of the next T lines contains two integers l and r ( 1 \u2264 l \u2264 r \u2264 998244353 ) \u2014 inclusive borders of the range. It is guaranteed that testset only includes queries, which have at least one suitable pair.",
    "output": "Print T lines, each line should contain the answer \u2014 two integers x and y such that l \u2264 x, y \u2264 r , x y and x divides y . The answer in the i - th line should correspond to the i - th query from the input. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1096A"
  },
  {
    "title": "Make It Connected",
    "url": "https://codeforces.com/problemset/problem/1095/F",
    "history": "You are given an undirected graph consisting of n vertices. A number is written on each vertex; the number on vertex i is a_ i . Initially there are no edges in the graph. You may add some edges to this graph, but you have to pay for them. The cost of adding an edge between vertices x and y is a_ x + a_ y coins. There are also m special offers, each of them is denoted by three numbers x , y and w , and means that you can add an edge connecting vertices x and y and pay w coins for it. You don' t have to use special offers: if there is a pair of vertices x and y that has a special offer associated with it, you still may connect these two vertices paying a_ x + a_ y coins for it. What is the minimum number of coins you have to spend to make the graph connected? Recall that a graph is connected if it' s possible to get from any vertex to any other vertex using only the edges belonging to this graph.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the graph and the number of special offers, respectively. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) \u2014 the numbers written on the vertices. Then m lines follow, each containing three integers x , y and w ( 1 \u2264 x, y \u2264 n , 1 \u2264 w \u2264 10^ 12 , x y ) denoting a special offer: you may add an edge connecting vertex x and vertex y , and this edge will cost w coins.",
    "output": "Print one integer \u2014 the minimum number of coins you have to pay to make the graph connected.",
    "note": "In the first example it is possible to connect 1 to 2 using special offer 2 , and then 1 to 3 without using any offers. In next two examples the optimal answer may be achieved without using special offers.",
    "topics": [
      "dsu",
      "graphs",
      "greedy"
    ],
    "id": "1095F"
  },
  {
    "title": "Powers Of Two",
    "url": "https://codeforces.com/problemset/problem/1095/C",
    "history": "A positive integer x is called a power of two if it can be represented as x = 2^ y , where y is a non- negative integer. So, the powers of two are 1, 2, 4, 8, 16, . . . . You are given two positive integers n and k . Your task is to represent n as the sum of exactly k powers of two.",
    "input": "The only line of the input contains two integers n and k ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 k \u2264 2 \u00b7 10^ 5 ) .",
    "output": "If it is impossible to represent n as the sum of k powers of two, print NO. Otherwise, print YES, and then print k positive integers b_ 1, b_ 2, . . . , b_ k such that each of b_ i is a power of two, and \u2211_ i = 1^ k b_ i = n . If there are multiple answers, you may print any of them.",
    "note": "",
    "topics": [
      "bitmasks",
      "greedy"
    ],
    "id": "1095C"
  },
  {
    "title": "Mishka and the Last Exam",
    "url": "https://codeforces.com/problemset/problem/1093/C",
    "history": "Mishka is trying really hard to avoid being kicked out of the university. In particular, he was doing absolutely nothing for the whole semester, miraculously passed some exams so that just one is left. There were n classes of that subject during the semester and on i - th class professor mentioned some non- negative integer a_ i to the students. It turned out, the exam was to tell the whole sequence back to the professor. Sounds easy enough for those who attended every class, doesn' t it? Obviously Mishka didn' t attend any classes. However, professor left some clues on the values of a to help out students like Mishka: a was sorted in non- decreasing order ( a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n ) ; n was even; the following sequence b , consisting of n/ 2 elements, was formed and given out to students: b_ i = a_ i + a_ n - i + 1 . Professor also mentioned that any sequence a , which produces sequence b with the presented technique, will be acceptable. Help Mishka to pass that last exam. Restore any sorted sequence a of non- negative integers, which produces sequence b with the presented technique. It is guaranteed that there exists at least one correct sequence a , which produces the given sequence b .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of sequence a . n is always even. The second line contains n/ 2 integers b_ 1, b_ 2, . . . , b_ n/ 2 ( 0 \u2264 b_ i \u2264 10^ 18 ) \u2014 sequence b , where b_ i = a_ i + a_ n - i + 1 . It is guaranteed that there exists at least one correct sequence a , which produces the given sequence b .",
    "output": "Print n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 18 ) in a single line. a_ 1 \u2264 a_ 2 \u2264. . . \u2264 a_ n should be satisfied. b_ i = a_ i + a_ n - i + 1 should be satisfied for all valid i .",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1093C"
  },
  {
    "title": "Letters Rearranging",
    "url": "https://codeforces.com/problemset/problem/1093/B",
    "history": "You are given a string s consisting only of lowercase Latin letters. You can rearrange all letters of this string as you wish. Your task is to obtain a good string by rearranging the letters of the given string or report that it is impossible to do it. Let' s call a string good if it is not a palindrome. Palindrome is a string which is read from left to right the same as from right to left. For example, strings \" abacaba\" , \" aa\" and \" z\" are palindromes and strings \" bba\" , \" xd\" are not. You have to answer t independent queries.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 number of queries. Each of the next t lines contains one string. The i - th line contains a string s_ i consisting only of lowercase Latin letter. It is guaranteed that the length of s_ i is from 1 to 1000 ( inclusive) .",
    "output": "Print t lines. In the i - th line print the answer to the i - th query: - 1 if it is impossible to obtain a good string by rearranging the letters of s_ i and any good string which can be obtained from the given one ( by rearranging the letters) otherwise.",
    "note": "In the first query we cannot rearrange letters to obtain a good string. Other examples ( not all) of correct answers to the second query: \" ababaca\" , \" abcabaa\" , \" baacaba\" . In the third query we can do nothing to obtain a good string.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "sortings",
      "strings"
    ],
    "id": "1093B"
  },
  {
    "title": "Minimal Diameter Forest",
    "url": "https://codeforces.com/problemset/problem/1092/E",
    "history": "You are given a forest \u2014 an undirected graph with n vertices such that each its connected component is a tree. The diameter ( aka \" longest shortest path\" ) of a connected undirected graph is the maximum number of edges in the shortest path between any pair of its vertices. You task is to add some edges ( possibly zero) to the graph so that it becomes a tree and the diameter of the tree is minimal possible. If there are multiple correct answers, print any of them.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 1000 , 0 \u2264 m \u2264 n - 1 ) \u2014 the number of vertices of the graph and the number of edges, respectively. Each of the next m lines contains two integers v and u ( 1 \u2264 v, u \u2264 n , v u ) \u2014 the descriptions of the edges. It is guaranteed that the given graph is a forest.",
    "output": "In the first line print the diameter of the resulting tree. Each of the next ( n - 1) - m lines should contain two integers v and u ( 1 \u2264 v, u \u2264 n , v u ) \u2014 the descriptions of the added edges. The resulting graph should be a tree and its diameter should be minimal possible. For m = n - 1 no edges are added, thus the output consists of a single integer \u2014 diameter of the given tree. If there are multiple correct answers, print any of them.",
    "note": "In the first example adding edges ( 1, 4) or ( 3, 4) will lead to a total diameter of 3. Adding edge ( 2, 4) , however, will make it 2. Edge ( 1, 2) is the only option you have for the second example. The diameter is 1. You can' t add any edges in the third example. The diameter is already 2.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1092E"
  },
  {
    "title": "Great Vova Wall (Version 1)",
    "url": "https://codeforces.com/problemset/problem/1092/D1",
    "history": "Vova' s family is building the Great Vova Wall ( named by Vova himself) . Vova' s parents, grandparents, grand- grandparents contributed to it. Now it' s totally up to Vova to put the finishing touches. The current state of the wall can be respresented by a sequence a of n integers, with a_ i being the height of the i - th part of the wall. Vova can only use 2 \u00d7 1 bricks to put in the wall ( he has infinite supply of them, however) . Vova can put bricks horizontally on the neighboring parts of the wall of equal height. It means that if for some i the current height of part i is the same as for part i + 1 , then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can' t put bricks in such a way that its parts turn out to be off the borders ( to the left of part 1 of the wall or to the right of part n of it) . The next paragraph is specific to the version 1 of the problem. Vova can also put bricks vertically. That means increasing height of any part of the wall by 2. Vova is a perfectionist, so he considers the wall completed when: all parts of the wall has the same height; the wall has no empty spaces inside it. Can Vova complete the wall using any amount of bricks ( possibly zero) ?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of parts in the wall. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial heights of the parts of the wall.",
    "output": "Print \" YES\" if Vova can complete the wall using any amount of bricks ( possibly zero) . Print \" NO\" otherwise.",
    "note": "In the first example Vova can put a brick on parts 2 and 3 to make the wall [ 2, 2, 2, 2, 5] and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it [ 5, 5, 5, 5, 5] . In the second example Vova can put a brick vertically on part 3 to make the wall [ 4, 5, 5] , then horizontally on parts 2 and 3 to make it [ 4, 6, 6] and then vertically on part 1 to make it [ 6, 6, 6] . In the third example the wall is already complete.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1092D1"
  },
  {
    "title": "New Year and the Mallard Expedition",
    "url": "https://codeforces.com/problemset/problem/1091/F",
    "history": "Bob is a duck. He wants to get to Alice' s nest, so that those two can duck! Duck is the ultimate animal! ( Image courtesy of See Bang) The journey can be represented as a straight line, consisting of n segments. Bob is located to the left of the first segment, while Alice' s nest is on the right of the last segment. Each segment has a length in meters, and also terrain type: grass, water or lava. Bob has three movement types: swimming, walking and flying. He can switch between them or change his direction at any point in time ( even when he is located at a non- integer coordinate) , and doing so doesn' t require any extra time. Bob can swim only on the water, walk only on the grass and fly over any terrain. Flying one meter takes 1 second, swimming one meter takes 3 seconds, and finally walking one meter takes 5 seconds. Bob has a finite amount of energy, called stamina. Swimming and walking is relaxing for him, so he gains 1 stamina for every meter he walks or swims. On the other hand, flying is quite tiring, and he spends 1 stamina for every meter flown. Staying in place does not influence his stamina at all. Of course, his stamina can never become negative. Initially, his stamina is zero. What is the shortest possible time in which he can reach Alice' s nest?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of segments of terrain. The second line contains n integers l_ 1, l_ 2, . . . , l_ n ( 1 \u2264 l_ i \u2264 10^ 12 ) . The l_ i represents the length of the i - th terrain segment in meters. The third line contains a string s consisting of n characters \" G\" , \" W\" , \" L\" , representing Grass, Water and Lava, respectively. It is guaranteed that the first segment is not Lava.",
    "output": "Output a single integer t \u2014 the minimum time Bob needs to reach Alice.",
    "note": "In the first sample, Bob first walks 5 meters in 25 seconds. Then he flies the remaining 5 meters in 5 seconds. In the second sample, Bob first swims 10 meters in 30 seconds. Then he flies over the patch of lava for 10 seconds. In the third sample, the water pond is much smaller. Bob first swims over the water pond, taking him 3 seconds. However, he cannot fly over the lava just yet, as he only has one stamina while he needs two. So he swims back for half a meter, and then half a meter forward, taking him 3 seconds in total. Now he has 2 stamina, so he can spend 2 seconds flying over the lava. In the fourth sample, he walks for 50 seconds, flies for 10 seconds, swims for 15 seconds, and finally flies for 5 seconds.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1091F"
  },
  {
    "title": "New Year and the Acquaintance Estimation",
    "url": "https://codeforces.com/problemset/problem/1091/E",
    "history": "Bob is an active user of the social network Faithbug. On this network, people are able to engage in a mutual friendship. That is, if a is a friend of b , then b is also a friend of a . Each user thus has a non- negative amount of friends. This morning, somebody anonymously sent Bob the following link: graph realization problem and Bob wants to know who that was. In order to do that, he first needs to know how the social network looks like. He investigated the profile of every other person on the network and noted down the number of his friends. However, he neglected to note down the number of his friends. Help him find out how many friends he has. Since there may be many possible answers, print all of them.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 ) , the number of people on the network excluding Bob. The second line contains n numbers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 n ) , with a_ i being the number of people that person i is a friend of.",
    "output": "Print all possible values of a_ n+ 1 \u2014 the amount of people that Bob can be friend of, in increasing order. If no solution exists, output - 1 .",
    "note": "In the first test case, the only solution is that everyone is friends with everyone. That is why Bob should have 3 friends. In the second test case, there are three possible solutions ( apart from symmetries) : a is friend of b , c is friend of d , and Bob has no friends, or a is a friend of b and both c and d are friends with Bob, or Bob is friends of everyone. The third case is impossible to solve, as the second person needs to be a friend with everybody, but the first one is a complete stranger.",
    "topics": [
      "binary search",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "math",
      "sortings"
    ],
    "id": "1091E"
  },
  {
    "title": "New Year and the Treasure Geolocation",
    "url": "https://codeforces.com/problemset/problem/1091/B",
    "history": "Bob is a pirate looking for the greatest treasure the world has ever seen. The treasure is located at the point T , which coordinates to be found out. Bob travelled around the world and collected clues of the treasure location at n obelisks. These clues were in an ancient language, and he has only decrypted them at home. Since he does not know which clue belongs to which obelisk, finding the treasure might pose a challenge. Can you help him? As everyone knows, the world is a two- dimensional plane. The i - th obelisk is at integer coordinates ( x_ i, y_ i) . The j - th clue consists of 2 integers ( a_ j, b_ j) and belongs to the obelisk p_ j , where p is some ( unknown) permutation on n elements. It means that the treasure is located at T= ( x_ p_ j + a_ j, y_ p_ j + b_ j) . This point T is the same for all clues. In other words, each clue belongs to exactly one of the obelisks, and each obelisk has exactly one clue that belongs to it. A clue represents the vector from the obelisk to the treasure. The clues must be distributed among the obelisks in such a way that they all point to the same position of the treasure. Your task is to find the coordinates of the treasure. If there are multiple solutions, you may print any of them. Note that you don' t need to find the permutation. Permutations are used only in order to explain the problem.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of obelisks, that is also equal to the number of clues. Each of the next n lines contains two integers x_ i , y_ i ( - 10^ 6 \u2264 x_ i, y_ i \u2264 10^ 6 ) \u2014 the coordinates of the i - th obelisk. All coordinates are distinct, that is x_ i = \u0338 x_ j or y_ i = \u0338 y_ j will be satisfied for every ( i, j) such that i = \u0338 j . Each of the next n lines contains two integers a_ i , b_ i ( - 2 \u00b7 10^ 6 \u2264 a_ i, b_ i \u2264 2 \u00b7 10^ 6 ) \u2014 the direction of the i - th clue. All coordinates are distinct, that is a_ i = \u0338 a_ j or b_ i = \u0338 b_ j will be satisfied for every ( i, j) such that i = \u0338 j . It is guaranteed that there exists a permutation p , such that for all i, j it holds ( x_ p_ i + a_ i, y_ p_ i + b_ i) = ( x_ p_ j + a_ j, y_ p_ j + b_ j) .",
    "output": "Output a single line containing two integers T_ x, T_ y \u2014 the coordinates of the treasure. If there are multiple answers, you may print any of them.",
    "note": "As n = 2 , we can consider all permutations on two elements. If p = [ 1, 2] , then the obelisk ( 2, 5) holds the clue ( 7, - 2) , which means that the treasure is hidden at ( 9, 3) . The second obelisk ( - 6, 4) would give the clue ( - 1, - 3) and the treasure at ( - 7, 1) . However, both obelisks must give the same location, hence this is clearly not the correct permutation. If the hidden permutation is [ 2, 1] , then the first clue belongs to the second obelisk and the second clue belongs to the first obelisk. Hence ( - 6, 4) + ( 7, - 2) = ( 2, 5) + ( - 1, - 3) = ( 1, 2) , so T = ( 1, 2) is the location of the treasure. In the second sample, the hidden permutation is [ 2, 3, 4, 1] .",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1091B"
  },
  {
    "title": "Company Merging",
    "url": "https://codeforces.com/problemset/problem/1090/A",
    "history": "A conglomerate consists of n companies. To make managing easier, their owners have decided to merge all companies into one. By law, it is only possible to merge two companies, so the owners plan to select two companies, merge them into one, and continue doing so until there is only one company left. But anti- monopoly service forbids to merge companies if they suspect unfriendly absorption. The criterion they use is the difference in maximum salaries between two companies. Merging is allowed only if the maximum salaries are equal. To fulfill the anti- monopoly requirements, the owners can change salaries in their companies before merging. But the labor union insists on two conditions: it is only allowed to increase salaries, moreover all the employees in one company must get the same increase. Sure enough, the owners want to minimize the total increase of all salaries in all companies. Help them find the minimal possible increase that will allow them to merge companies into one.",
    "input": "The first line contains a single integer n \u2014 the number of companies in the conglomerate ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) . Each of the next n lines describes a company. A company description start with an integer m_ i \u2014 the number of its employees ( 1 \u2264 m_ i \u2264 2 \u00b7 10^ 5 ) . Then m_ i integers follow: the salaries of the employees. All salaries are positive and do not exceed 10^ 9 . The total number of employees in all companies does not exceed 2 \u00b7 10^ 5 .",
    "output": "Output a single integer \u2014 the minimal total increase of all employees that allows to merge all companies.",
    "note": "One of the optimal merging strategies is the following. First increase all salaries in the second company by 2 , and merge the first and the second companies. Now the conglomerate consists of two companies with salaries [ 4, 3, 4, 3] and [ 1, 1, 1] . To merge them, increase the salaries in the second of those by 3 . The total increase is 2 + 2 + 3 + 3 + 3 = 13 .",
    "topics": [
      "greedy"
    ],
    "id": "1090A"
  },
  {
    "title": "JS Minification",
    "url": "https://codeforces.com/problemset/problem/1089/J",
    "history": "International Coding Procedures Company ( ICPC) writes all its code in Jedi Script ( JS) programming language. JS does not get compiled, but is delivered for execution in its source form. Sources contain comments, extra whitespace ( including trailing and leading spaces) , and other non- essential features that make them quite large but do not contribute to the semantics of the code, so the process of minification is performed on source files before their delivery to execution to compress sources while preserving their semantics. You are hired by ICPC to write JS minifier for ICPC. Fortunately, ICPC adheres to very strict programming practices and their JS sources are quite restricted in grammar. They work only on integer algorithms and do not use floating point numbers and strings. Every JS source contains a sequence of lines. Each line contains zero or more tokens that can be separated by spaces. On each line, a part of the line that starts with a hash character ( ' # ' code 35) , including the hash character itself, is treated as a comment and is ignored up to the end of the line. Each line is parsed into a sequence of tokens from left to right by repeatedly skipping spaces and finding the longest possible token starting at the current parsing position, thus transforming the source code into a sequence of tokens. All the possible tokens are listed below: A reserved token is any kind of operator, separator, literal, reserved word, or a name of a library function that should be preserved during the minification process. Reserved tokens are fixed strings of non- space ASCII characters that do not contain the hash character ( ' # ' code 35) . All reserved tokens are given as an input to the minification process. A number token consists of a sequence of digits, where a digit is a character from zero ( ' 0' ) to nine ( ' 9' ) inclusive. A word token consists of a sequence of characters from the following set: lowercase letters, uppercase letters, digits, underscore ( ' _ ' code 95) , and dollar sign ( ' ' code 36) . A word does not start with a digit. Note, that during parsing the longest sequence of characters that satisfies either a number or a word definition, but that appears in the list of reserved tokens, is considered to be a reserved token instead. During the minification process words are renamed in a systematic fashion using the following algorithm: Take a list of words that consist only of lowercase letters ordered first by their length, then lexicographically: \" a\" , \" b\" , . . . , \" z\" , \" aa\" , \" ab\" , . . . , excluding reserved tokens, since they are not considered to be words. This is the target word list. Rename the first word encountered in the input token sequence to the first word in the target word list and all further occurrences of the same word in the input token sequence, too. Rename the second new word encountered in the input token sequence to the second word in the target word list, and so on. The goal of the minification process is to convert the given source to the shortest possible line ( counting spaces) that still parses to the same sequence of tokens with the correspondingly renamed words using these JS parsing rules.",
    "input": "The first line of the input contains a single integer n ( 0 \u2264 n \u2264 40 ) \u2014 the number of reserved tokens. The second line of the input contains the list of reserved tokens separated by spaces without repetitions in the list. Each reserved token is at least one and at most 20 characters long and contains only characters with ASCII codes from 33 ( exclamation mark) to 126 ( tilde) inclusive, with exception of a hash character ( ' # ' code 35) . The third line of the input contains a single integer m ( 1 \u2264 m \u2264 40 ) \u2014 the number of lines in the input source code. Next m lines contain the input source, each source line is at most 80 characters long ( counting leading and trailing spaces) . Each line contains only characters with ASCII codes from 32 ( space) to 126 ( tilde) inclusive. The source code is valid and fully parses into a sequence of tokens.",
    "output": "Write to the output a single line that is the result of the minification process on the input source code. The output source line shall parse to the same sequence of tokens as the input source with the correspondingly renamed words and shall contain the minimum possible number of spaces needed for that. If there are multiple ways to insert the minimum possible number of spaces into the output, use any way.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1089J"
  },
  {
    "title": "Ehab and a component choosing problem",
    "url": "https://codeforces.com/problemset/problem/1088/E",
    "history": "You' re given a tree consisting of n nodes. Every node u has a weight a_ u . You want to choose an integer k ( 1 \u2264 k \u2264 n) and then choose k connected components of nodes that don' t overlap ( i. e every node is in at most 1 component) . Let the set of nodes you chose be s . You want to maximize: \u2211_ u \u2208 s a_ u/ k In other words, you want to maximize the sum of weights of nodes in s divided by the number of connected components you chose. Also, if there are several solutions, you want to maximize k . Note that adjacent nodes can belong to different components. Refer to the third sample.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5) , the number of nodes in the tree. The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( | a_ i| \u2264 10^ 9) , the weights of the nodes. The next n- 1 lines, each contains 2 space- separated integers u and v ( 1 \u2264 u, v \u2264 n) which means there' s an edge between u and v .",
    "output": "Print the answer as a non- reduced fraction represented by 2 space- separated integers. The fraction itself should be maximized and if there are several possible ways, you should maximize the denominator. See the samples for a better understanding.",
    "note": "A connected component is a set of nodes such that for any node in the set, you can reach all other nodes in the set passing only nodes in the set. In the first sample, it' s optimal to choose the whole tree. In the second sample, you only have one choice ( to choose node 1) because you can' t choose 0 components. In the third sample, notice that we could' ve, for example, chosen only node 1, or node 1 and node 3, or even the whole tree, and the fraction would' ve had the same value ( - 1) , but we want to maximize k . In the fourth sample, we' ll just choose nodes 1 and 3.",
    "topics": [
      "dp",
      "greedy",
      "math",
      "trees"
    ],
    "id": "1088E"
  },
  {
    "title": "Ehab and a 2-operation task",
    "url": "https://codeforces.com/problemset/problem/1088/C",
    "history": "You' re given an array a of length n . You can perform the following operations on it: choose an index i ( 1 \u2264 i \u2264 n) , an integer x ( 0 \u2264 x \u2264 10^ 6) , and replace a_ j with a_ j+ x for all ( 1 \u2264 j \u2264 i) , which means add x to all the elements in the prefix ending at i . choose an index i ( 1 \u2264 i \u2264 n) , an integer x ( 1 \u2264 x \u2264 10^ 6) , and replace a_ j with a_ j % x for all ( 1 \u2264 j \u2264 i) , which means replace every element in the prefix ending at i with the remainder after dividing it by x . Can you make the array strictly increasing in no more than n+ 1 operations?",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2000) , the number of elements in the array a . The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 5) , the elements of the array a .",
    "output": "On the first line, print the number of operations you wish to perform. On the next lines, you should print the operations. To print an adding operation, use the format \" 1 i x \" ; to print a modding operation, use the format \" 2 i x \" . If i or x don' t satisfy the limitations above, or you use more than n+ 1 operations, you' ll get wrong answer verdict.",
    "note": "In the first sample, the array is already increasing so we don' t need any operations. In the second sample: In the first step: the array becomes [ 8, 6, 3] . In the second step: the array becomes [ 0, 2, 3] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1088C"
  },
  {
    "title": "Vasya and Templates",
    "url": "https://codeforces.com/problemset/problem/1085/E",
    "history": "Vasya owns three strings s , a and b , each of them consists only of first k Latin letters. Let a template be such a string of length k that each of the first k Latin letters appears in it exactly once ( thus there are k! distinct templates) . Application of template p to the string s is the replacement of each character in string s with p_ i , i is the index of this letter in the alphabet. For example, applying template \" bdca\" to a string \" aabccd\" yields string \" bbdcca\" . Vasya wants to know if there exists such a template which yields a string lexicographically greater than or equal to string a and lexicographically less than or equal to string b after applying it to s . If there exist multiple suitable templates, print any of them. String a is lexicographically less than string b if there is some i ( 1 \u2264 i \u2264 n ) that a_ i < b_ i and for any j ( 1 \u2264 j < i ) a_ j = b_ j . You are required to answer t testcases independently.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 6 ) \u2014 the number of testcases. In hacks you can only use t = 1 . Each of the next t lines contains the description of the testcase in the following form: The first line of the testcase contains a single integer k ( 1 \u2264 k \u2264 26 ) \u2014 the length of the template. The second line of the testcase contains the string s ( 1 \u2264 | s| \u2264 10^ 6 ) . The third line of the testcase contains the string a . The fourth line of the testcase contains the string b . Strings s , a and b have the same length ( | s| = | a| = | b| ) and consist only of the first k Latin letters, all letters are lowercase. It is guaranteed that string a is lexicographically less than or equal to string b . It is also guaranteed that the total length of strings over all testcase won' t exceed 3 \u00b7 10^ 6 .",
    "output": "Print the answers to all testcases in the following form: If there exists no suitable template then print \" NO\" in the first line. Otherwise print \" YES\" in the first line and the template itself in the second line ( k lowercase letters, each of the first k Latin letters should appear exactly once) . If there exist multiple suitable templates, print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1085E"
  },
  {
    "title": "Kvass and the Fair Nut",
    "url": "https://codeforces.com/problemset/problem/1084/B",
    "history": "The Fair Nut likes kvass very much. On his birthday parents presented him n kegs of kvass. There are v_ i liters of kvass in the i - th keg. Each keg has a lever. You can pour your glass by exactly 1 liter pulling this lever. The Fair Nut likes this drink very much, so he wants to pour his glass by s liters of kvass. But he wants to do it, so kvass level in the least keg is as much as possible. Help him find out how much kvass can be in the least keg or define it' s not possible to pour his glass by s liters of kvass.",
    "input": "The first line contains two integers n and s ( 1 \u2264 n \u2264 10^ 3 , 1 \u2264 s \u2264 10^ 12 ) \u2014 the number of kegs and glass volume. The second line contains n integers v_ 1, v_ 2, . . . , v_ n ( 1 \u2264 v_ i \u2264 10^ 9 ) \u2014 the volume of i - th keg.",
    "output": "If the Fair Nut cannot pour his glass by s liters of kvass, print - 1 . Otherwise, print a single integer \u2014 how much kvass in the least keg can be.",
    "note": "In the first example, the answer is 3 , the Fair Nut can take 1 liter from the first keg and 2 liters from the third keg. There are 3 liters of kvass in each keg. In the second example, the answer is 2 , the Fair Nut can take 3 liters from the first keg and 1 liter from the second keg. In the third example, the Fair Nut can' t pour his cup by 7 liters, so the answer is - 1 .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1084B"
  },
  {
    "title": "The Fair Nut and Strings",
    "url": "https://codeforces.com/problemset/problem/1083/B",
    "history": "Recently, the Fair Nut has written k strings of length n , consisting of letters \" a\" and \" b\" . He calculated c \u2014 the number of strings that are prefixes of at least one of the written strings. Every string was counted only one time. Then, he lost his sheet with strings. He remembers that all written strings were lexicographically not smaller than string s and not bigger than string t . He is interested: what is the maximum value of c that he could get. A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) . The second line contains a string s ( | s| = n ) \u2014 the string consisting of letters \" a\" and \" b. The third line contains a string t ( | t| = n ) \u2014 the string consisting of letters \" a\" and \" b. It is guaranteed that string s is lexicographically not bigger than t .",
    "output": "Print one number \u2014 maximal value of c .",
    "note": "In the first example, Nut could write strings \" aa\" , \" ab\" , \" ba\" , \" bb\" . These 4 strings are prefixes of at least one of the written strings, as well as \" a\" and \" b\" . Totally, 6 strings. In the second example, Nut could write strings \" aba\" , \" baa\" , \" bba\" . In the third example, there are only two different strings that Nut could write. If both of them are written, c= 8 .",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1083B"
  },
  {
    "title": "Increasing Frequency",
    "url": "https://codeforces.com/problemset/problem/1082/E",
    "history": "You are given array a of length n . You can choose one segment [ l, r] ( 1 \u2264 l \u2264 r \u2264 n ) and integer value k ( positive, negative or even zero) and change a_ l, a_ l + 1, . . . , a_ r by k each ( i. e. a_ i : = a_ i + k for each l \u2264 i \u2264 r ) . What is the maximum possible number of elements with value c that can be obtained after one such operation?",
    "input": "The first line contains two integers n and c ( 1 \u2264 n \u2264 5 \u00b7 10^ 5 , 1 \u2264 c \u2264 5 \u00b7 10^ 5 ) \u2014 the length of array and the value c to obtain. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 5 \u00b7 10^ 5 ) \u2014 array a .",
    "output": "Print one integer \u2014 the maximum possible number of elements with value c which can be obtained after performing operation described above.",
    "note": "In the first example we can choose any segment and k = 0 . The array will stay same. In the second example we can choose segment [ 1, 3] and k = - 4 . The array will become [ 2, - 2, 2] .",
    "topics": [
      "binary search",
      "dp",
      "greedy"
    ],
    "id": "1082E"
  },
  {
    "title": "Multi-Subject Competition",
    "url": "https://codeforces.com/problemset/problem/1082/C",
    "history": "A multi- subject competition is coming! The competition has m different subjects participants can choose from. That' s why Alex ( the coach) should form a competition delegation among his students. He has n candidates. For the i - th person he knows subject s_ i the candidate specializes in and r_ i \u2014 a skill level in his specialization ( this level can be negative! ) . The rules of the competition require each delegation to choose some subset of subjects they will participate in. The only restriction is that the number of students from the team participating in each of the chosen subjects should be the same. Alex decided that each candidate would participate only in the subject he specializes in. Now Alex wonders whom he has to choose to maximize the total sum of skill levels of all delegates, or just skip the competition this year if every valid non- empty delegation has negative sum. ( Of course, Alex doesn' t have any spare money so each delegate he chooses must participate in the competition) .",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 m \u2264 10^ 5 ) \u2014 the number of candidates and the number of subjects. The next n lines contains two integers per line: s_ i and r_ i ( 1 \u2264 s_ i \u2264 m , - 10^ 4 \u2264 r_ i \u2264 10^ 4 ) \u2014 the subject of specialization and the skill level of the i - th candidate.",
    "output": "Print the single integer \u2014 the maximum total sum of skills of delegates who form a valid delegation ( according to rules above) or 0 if every valid non- empty delegation has negative sum.",
    "note": "In the first example it' s optimal to choose candidates 1 , 2 , 3 , 4 , so two of them specialize in the 2 - nd subject and other two in the 3 - rd. The total sum is 6 + 6 + 5 + 5 = 22 . In the second example it' s optimal to choose candidates 1 , 2 and 5 . One person in each subject and the total sum is 6 + 6 + 11 = 23 . In the third example it' s impossible to obtain a non- negative sum.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1082C"
  },
  {
    "title": "Vova and Trophies",
    "url": "https://codeforces.com/problemset/problem/1082/B",
    "history": "Vova has won n trophies in different competitions. Each trophy is either golden or silver. The trophies are arranged in a row. The beauty of the arrangement is the length of the longest subsegment consisting of golden trophies. Vova wants to swap two trophies ( not necessarily adjacent ones) to make the arrangement as beautiful as possible \u2014 that means, to maximize the length of the longest such subsegment. Help Vova! Tell him the maximum possible beauty of the arrangement if he is allowed to do at most one swap.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of trophies. The second line contains n characters, each of them is either G or S. If the i - th character is G, then the i - th trophy is a golden one, otherwise it' s a silver trophy.",
    "output": "Print the maximum possible length of a subsegment of golden trophies, if Vova is allowed to do at most one swap.",
    "note": "In the first example Vova has to swap trophies with indices 4 and 10 . Thus he will obtain the sequence \" GGGGGGGSGS\" , the length of the longest subsegment of golden trophies is 7 . In the second example Vova can make no swaps at all. The length of the longest subsegment of golden trophies in the sequence is 4 . In the third example Vova cannot do anything to make the length of the longest subsegment of golden trophies in the sequence greater than 0 .",
    "topics": [
      "greedy"
    ],
    "id": "1082B"
  },
  {
    "title": "Missing Numbers",
    "url": "https://codeforces.com/problemset/problem/1081/E",
    "history": "Chouti is working on a strange math problem. There was a sequence of n positive integers x_ 1, x_ 2, . . . , x_ n , where n is even. The sequence was very special, namely for every integer t from 1 to n , x_ 1+ x_ 2+ . . . + x_ t is a square of some integer number ( that is, a perfect square) . Somehow, the numbers with odd indexes turned to be missing, so he is only aware of numbers on even positions, i. e. x_ 2, x_ 4, x_ 6, . . . , x_ n . The task for him is to restore the original sequence. Again, it' s your turn to help him. The problem setter might make mistakes, so there can be no possible sequence at all. If there are several possible sequences, you can output any.",
    "input": "The first line contains an even number n ( 2 \u2264 n \u2264 10^ 5 ) . The second line contains n/ 2 positive integers x_ 2, x_ 4, . . . , x_ n ( 1 \u2264 x_ i \u2264 2 \u00b7 10^ 5 ) .",
    "output": "If there are no possible sequence, print \" No\" . Otherwise, print \" Yes\" and then n positive integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 13 ) , where x_ 2, x_ 4, . . . , x_ n should be same as in input data. If there are multiple answers, print any. Note, that the limit for x_ i is larger than for input data. It can be proved that in case there is an answer, there must be a possible sequence satisfying 1 \u2264 x_ i \u2264 10^ 13 .",
    "note": "In the first example x_ 1= 4 x_ 1+ x_ 2= 9 x_ 1+ x_ 2+ x_ 3= 25 x_ 1+ x_ 2+ x_ 3+ x_ 4= 36 x_ 1+ x_ 2+ x_ 3+ x_ 4+ x_ 5= 100 x_ 1+ x_ 2+ x_ 3+ x_ 4+ x_ 5+ x_ 6= 144 All these numbers are perfect squares. In the second example, x_ 1= 100 , x_ 1+ x_ 2= 10000 . They are all perfect squares. There' re other answers possible. For example, x_ 1= 22500 is another answer. In the third example, it is possible to show, that no such sequence exists.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1081E"
  },
  {
    "title": "Thematic Contests",
    "url": "https://codeforces.com/problemset/problem/1077/E",
    "history": "Polycarp has prepared n competitive programming problems. The topic of the i - th problem is a_ i , and some problems' topics may coincide. Polycarp has to host several thematic contests. All problems in each contest should have the same topic, and all contests should have pairwise distinct topics. He may not use all the problems. It is possible that there are no contests for some topics. Polycarp wants to host competitions on consecutive days, one contest per day. Polycarp wants to host a set of contests in such a way that: number of problems in each contest is exactly twice as much as in the previous contest ( one day ago) , the first contest can contain arbitrary number of problems; the total number of problems in all the contests should be maximized. Your task is to calculate the maximum number of problems in the set of thematic contests. Note, that you should not maximize the number of contests.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems Polycarp has prepared. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) where a_ i is the topic of the i - th problem.",
    "output": "Print one integer \u2014 the maximum number of problems in the set of thematic contests.",
    "note": "In the first example the optimal sequence of contests is: 2 problems of the topic 1 , 4 problems of the topic 2 , 8 problems of the topic 10 . In the second example the optimal sequence of contests is: 3 problems of the topic 3 , 6 problems of the topic 6 . In the third example you can take all the problems with the topic 1337 ( the number of such problems is 3 so the answer is 3 ) and host a single contest.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1077E"
  },
  {
    "title": "Disturbed People",
    "url": "https://codeforces.com/problemset/problem/1077/B",
    "history": "There is a house with n flats situated on the main street of Berlatov. Vova is watching this house every night. The house can be represented as an array of n integer numbers a_ 1, a_ 2, . . . , a_ n , where a_ i = 1 if in the i - th flat the light is on and a_ i = 0 otherwise. Vova thinks that people in the i - th flats are disturbed and cannot sleep if and only if 1 < i < n and a_ i - 1 = a_ i + 1 = 1 and a_ i = 0 . Vova is concerned by the following question: what is the minimum number k such that if people from exactly k pairwise distinct flats will turn off the lights then nobody will be disturbed? Your task is to find this number k .",
    "input": "The first line of the input contains one integer n ( 3 \u2264 n \u2264 100 ) \u2014 the number of flats in the house. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( a_ i \u2208{ 0, 1} ) , where a_ i is the state of light in the i - th flat.",
    "output": "Print only one integer \u2014 the minimum number k such that if people from exactly k pairwise distinct flats will turn off the light then nobody will be disturbed.",
    "note": "In the first example people from flats 2 and 7 or 4 and 7 can turn off the light and nobody will be disturbed. It can be shown that there is no better answer in this example. There are no disturbed people in second and third examples.",
    "topics": [
      "greedy"
    ],
    "id": "1077B"
  },
  {
    "title": "Summer Practice Report",
    "url": "https://codeforces.com/problemset/problem/1076/F",
    "history": "Vova has taken his summer practice this year and now he should write a report on how it went. Vova has already drawn all the tables and wrote down all the formulas. Moreover, he has already decided that the report will consist of exactly n pages and the i - th page will include x_ i tables and y_ i formulas. The pages are numbered from 1 to n . Vova fills the pages one after another, he can' t go filling page i + 1 before finishing page i and he can' t skip pages. However, if he draws strictly more than k tables in a row or writes strictly more than k formulas in a row then he will get bored. Vova wants to rearrange tables and formulas in each page in such a way that he doesn' t get bored in the process. Vova can' t move some table or some formula to another page. Note that the count doesn' t reset on the start of the new page. For example, if the page ends with 3 tables and the next page starts with 5 tables, then it' s counted as 8 tables in a row. Help Vova to determine if he can rearrange tables and formulas on each page in such a way that there is no more than k tables in a row and no more than k formulas in a row.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 k \u2264 10^ 6 ) . The second line contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 10^ 6 ) \u2014 the number of tables on the i - th page. The third line contains n integers y_ 1, y_ 2, . . . , y_ n ( 1 \u2264 y_ i \u2264 10^ 6 ) \u2014 the number of formulas on the i - th page.",
    "output": "Print \" YES\" if Vova can rearrange tables and formulas on each page in such a way that there is no more than k tables in a row and no more than k formulas in a row. Otherwise print \" NO\" .",
    "note": "In the first example the only option to rearrange everything is the following ( let table be ' T' and formula be ' F' ) : page 1 : \" TTFTTFT\" page 2 : \" TFTTFTT\" That way all blocks of tables have length 2 . In the second example there is no way to fit everything in such a way that there are no more than 2 tables in a row and 2 formulas in a row.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1076F"
  },
  {
    "title": "Edge Deletion",
    "url": "https://codeforces.com/problemset/problem/1076/D",
    "history": "You are given an undirected connected weighted graph consisting of n vertices and m edges. Let' s denote the length of the shortest path from vertex 1 to vertex i as d_ i . You have to erase some edges of the graph so that at most k edges remain. Let' s call a vertex i good if there still exists a path from 1 to i with length d_ i after erasing the edges. Your goal is to erase the edges in such a way that the number of good vertices is maximized.",
    "input": "The first line contains three integers n , m and k ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 , 1 \u2264 m \u2264 3 \u00b7 10^ 5 , n - 1 \u2264 m , 0 \u2264 k \u2264 m ) \u2014 the number of vertices and edges in the graph, and the maximum number of edges that can be retained in the graph, respectively. Then m lines follow, each containing three integers x , y , w ( 1 \u2264 x, y \u2264 n , x y , 1 \u2264 w \u2264 10^ 9 ) , denoting an edge connecting vertices x and y and having weight w . The given graph is connected ( any vertex can be reached from any other vertex) and simple ( there are no self- loops, and for each unordered pair of vertices there exists at most one edge connecting these vertices) .",
    "output": "In the first line print e \u2014 the number of edges that should remain in the graph ( 0 \u2264 e \u2264 k ) . In the second line print e distinct integers from 1 to m \u2014 the indices of edges that should remain in the graph. Edges are numbered in the same order they are given in the input. The number of good vertices should be as large as possible.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1076D"
  },
  {
    "title": "Minimizing the String",
    "url": "https://codeforces.com/problemset/problem/1076/A",
    "history": "You are given a string s consisting of n lowercase Latin letters. You have to remove at most one ( i. e. zero or one) character of this string in such a way that the string you obtain will be lexicographically smallest among all strings that can be obtained using this operation. String s = s_ 1 s_ 2 . . . s_ n is lexicographically smaller than string t = t_ 1 t_ 2 . . . t_ m if n < m and s_ 1 = t_ 1, s_ 2 = t_ 2, . . . , s_ n = t_ n or there exists a number p such that p \u2264 min( n, m) and s_ 1 = t_ 1, s_ 2 = t_ 2, . . . , s_ p- 1 = t_ p- 1 and s_ p < t_ p . For example, \" aaa\" is smaller than \" aaaa\" , \" abb\" is smaller than \" abc\" , \" pqr\" is smaller than \" z\" .",
    "input": "The first line of the input contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of s . The second line of the input contains exactly n lowercase Latin letters \u2014 the string s .",
    "output": "Print one string \u2014 the smallest possible lexicographically string that can be obtained by removing at most one character from the string s .",
    "note": "In the first example you can remove any character of s to obtain the string \" aa\" . In the second example \" abca\" < \" abcd\" < \" abcda\" < \" abda\" < \" acda\" < \" bcda\" .",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1076A"
  },
  {
    "title": "Choosing Two Paths",
    "url": "https://codeforces.com/problemset/problem/1073/F",
    "history": "You are given an undirected unweighted tree consisting of n vertices. An undirected tree is a connected undirected graph with n - 1 edges. Your task is to choose two pairs of vertices of this tree ( all the chosen vertices should be distinct) ( x_ 1, y_ 1) and ( x_ 2, y_ 2) in such a way that neither x_ 1 nor y_ 1 belong to the simple path from x_ 2 to y_ 2 and vice versa ( neither x_ 2 nor y_ 2 should not belong to the simple path from x_ 1 to y_ 1 ) . It is guaranteed that it is possible to choose such pairs for the given tree. Among all possible ways to choose such pairs you have to choose one with the maximum number of common vertices between paths from x_ 1 to y_ 1 and from x_ 2 to y_ 2 . And among all such pairs you have to choose one with the maximum total length of these two paths. It is guaranteed that the answer with at least two common vertices exists for the given tree. The length of the path is the number of edges in it. The simple path is the path that visits each vertex at most once.",
    "input": "The first line contains an integer n \u2014 the number of vertices in the tree ( 6 \u2264 n \u2264 2 \u00b7 10^ 5 ) . Each of the next n - 1 lines describes the edges of the tree. Edge i is denoted by two integers u_ i and v_ i , the labels of vertices it connects ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) . It is guaranteed that the given edges form a tree. It is guaranteed that the answer with at least two common vertices exists for the given tree.",
    "output": "Print any two pairs of vertices satisfying the conditions described in the problem statement. It is guaranteed that it is possible to choose such pairs for the given tree.",
    "note": "The picture corresponding to the first example: The intersection of two paths is 2 ( vertices 1 and 4 ) and the total length is 4 + 3 = 7 . The picture corresponding to the second example: The intersection of two paths is 2 ( vertices 3 and 4 ) and the total length is 5 + 3 = 8 . The picture corresponding to the third example: The intersection of two paths is 3 ( vertices 2 , 7 and 8 ) and the total length is 5 + 5 = 10 . The picture corresponding to the fourth example: The intersection of two paths is 5 ( vertices 1 , 2 , 3 , 4 and 5 ) and the total length is 6 + 6 = 12 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1073F"
  },
  {
    "title": "Berland Fair",
    "url": "https://codeforces.com/problemset/problem/1073/D",
    "history": "XXI Berland Annual Fair is coming really soon! Traditionally fair consists of n booths, arranged in a circle. The booths are numbered 1 through n clockwise with n being adjacent to 1 . The i - th booths sells some candies for the price of a_ i burles per item. Each booth has an unlimited supply of candies. Polycarp has decided to spend at most T burles at the fair. However, he has some plan in mind for his path across the booths: at first, he visits booth number 1 ; if he has enough burles to buy exactly one candy from the current booth, then he buys it immediately; then he proceeds to the next booth in the clockwise order ( regardless of if he bought a candy or not) . Polycarp' s money is finite, thus the process will end once he can no longer buy candy at any booth. Calculate the number of candies Polycarp will buy.",
    "input": "The first line contains two integers n and T ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 T \u2264 10^ 18 ) \u2014 the number of booths at the fair and the initial amount of burles Polycarp has. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the price of the single candy at booth number i .",
    "output": "Print a single integer \u2014 the total number of candies Polycarp will buy.",
    "note": "Let' s consider the first example. Here are Polycarp' s moves until he runs out of money: Booth 1 , buys candy for 5 , T = 33 ; Booth 2 , buys candy for 2 , T = 31 ; Booth 3 , buys candy for 5 , T = 26 ; Booth 1 , buys candy for 5 , T = 21 ; Booth 2 , buys candy for 2 , T = 19 ; Booth 3 , buys candy for 5 , T = 14 ; Booth 1 , buys candy for 5 , T = 9 ; Booth 2 , buys candy for 2 , T = 7 ; Booth 3 , buys candy for 5 , T = 2 ; Booth 1 , buys no candy, not enough money; Booth 2 , buys candy for 2 , T = 0 . No candy can be bought later. The total number of candies bought is 10 . In the second example he has 1 burle left at the end of his path, no candy can be bought with this amount.",
    "topics": [
      "binary search",
      "brute force",
      "data structures",
      "greedy"
    ],
    "id": "1073D"
  },
  {
    "title": "Monsters and Potions",
    "url": "https://codeforces.com/problemset/problem/1070/G",
    "history": "Polycarp is an introvert person. In fact he is so much of an introvert that he plays \" Monsters and Potions\" board game alone. The board of the game is a row of n cells. The cells are numbered from 1 to n from left to right. There are three types of cells: a cell containing a single monster, a cell containing a single potion or a blank cell ( it contains neither a monster nor a potion) . Polycarp has m tokens representing heroes fighting monsters, which are initially located in the blank cells s_ 1, s_ 2, . . . , s_ m . Polycarp' s task is to choose a single cell ( rally point) and one by one move all the heroes into this cell. A rally point can be a cell of any of three types. After Policarp selects a rally point, he picks a hero and orders him to move directly to the point. Once that hero reaches the point, Polycarp picks another hero and orders him also to go to the point. And so forth, until all the heroes reach the rally point cell. While going to the point, a hero can not deviate from the direct route or take a step back. A hero just moves cell by cell in the direction of the point until he reaches it. It is possible that multiple heroes are simultaneously in the same cell. Initially the i - th hero has h_ i hit points ( HP) . Monsters also have HP, different monsters might have different HP. And potions also have HP, different potions might have different HP. If a hero steps into a cell which is blank ( i. e. doesn' t contain a monster/ potion) , hero' s HP does not change. If a hero steps into a cell containing a monster, then the hero and the monster fight. If monster' s HP is strictly higher than hero' s HP, then the monster wins and Polycarp loses the whole game. If hero' s HP is greater or equal to monster' s HP, then the hero wins and monster' s HP is subtracted from hero' s HP. I. e. the hero survives if his HP drops to zero, but dies ( and Polycarp looses) if his HP becomes negative due to a fight. If a hero wins a fight with a monster, then the monster disappears, and the cell becomes blank. If a hero steps into a cell containing a potion, then the hero drinks the potion immediately. As a result, potion' s HP is added to hero' s HP, the potion disappears, and the cell becomes blank. Obviously, Polycarp wants to win the game. It means that he must choose such rally point and the order in which heroes move, that every hero reaches the rally point and survives. I. e. Polycarp loses if a hero reaches rally point but is killed by a monster at the same time. Polycarp can use any of n cells as a rally point \u2014 initially it can contain a monster, a potion, or be a blank cell with or without a hero in it. Help Polycarp write a program to choose a rally point and the order in which heroes move.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n \u2264 100 ; 1 \u2264 m \u2264 n ) \u2014 length of the game board and the number of heroes on it. The following m lines describe heroes. Each line contains two integers s_ i and h_ i ( 1 \u2264 s_ i \u2264 n ; 1 \u2264 h_ i \u2264 10^ 6 ) , where s_ i is the initial position and h_ i is the initial HP of the i - th hero. It is guaranteed that each cell s_ i is blank. It is also guaranteed that all s_ i are different. The following line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 6 \u2264 a_ j \u2264 10^ 6 ) , where a_ j describes the i - th cell of the game board: a_ j= 0 means that the i - th cell is blank, a_ j< 0 means that the i - th cell contains monster with positive HP of - a_ j , a_ j> 0 means that the i - th cell contains potion with a_ j HP.",
    "output": "On the first line of the output print the index of the rally point cell. On the second line print m integers \u2014 the order in which heroes should move to the rally point. Heroes are numbered from 1 to m in the order they are given in the input. If there are multiple solutions, print any of them. If it is impossible to find a rally point which can be reached by all heroes, print a single integer - 1 in the output.",
    "note": "The picture illustrates the first example:",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1070G"
  },
  {
    "title": "Debate",
    "url": "https://codeforces.com/problemset/problem/1070/F",
    "history": "Elections in Berland are coming. There are only two candidates \u2014 Alice and Bob. The main Berland TV channel plans to show political debates. There are n people who want to take part in the debate as a spectator. Each person is described by their influence and political views. There are four kinds of political views: supporting none of candidates ( this kind is denoted as \" 00\" ) , supporting Alice but not Bob ( this kind is denoted as \" 10\" ) , supporting Bob but not Alice ( this kind is denoted as \" 01\" ) , supporting both candidates ( this kind is denoted as \" 11\" ) . The direction of the TV channel wants to invite some of these people to the debate. The set of invited spectators should satisfy three conditions: at least half of spectators support Alice ( i. e. 2 \u00b7 a \u2265 m , where a is number of spectators supporting Alice and m is the total number of spectators) , at least half of spectators support Bob ( i. e. 2 \u00b7 b \u2265 m , where b is number of spectators supporting Bob and m is the total number of spectators) , the total influence of spectators is maximal possible. Help the TV channel direction to select such non- empty set of spectators, or tell that this is impossible.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 4\u00b710^ 5 ) \u2014 the number of people who want to take part in the debate as a spectator. These people are described on the next n lines. Each line describes a single person and contains the string s_ i and integer a_ i separated by space ( 1 \u2264 a_ i \u2264 5000 ) , where s_ i denotes person' s political views ( possible values \u2014 \" 00\" , \" 10\" , \" 01\" , \" 11\" ) and a_ i \u2014 the influence of the i - th person.",
    "output": "Print a single integer \u2014 maximal possible total influence of a set of spectators so that at least half of them support Alice and at least half of them support Bob. If it is impossible print 0 instead.",
    "note": "In the first example 4 spectators can be invited to maximize total influence: 1 , 2 , 3 and 6 . Their political views are: \" 11\" , \" 10\" , \" 01\" and \" 00\" . So in total 2 out of 4 spectators support Alice and 2 out of 4 spectators support Bob. The total influence is 6+ 4+ 3+ 9= 22 . In the second example the direction can select all the people except the 5 - th person. In the third example the direction can select people with indices: 1 , 4 , 5 and 6 . In the fourth example it is impossible to select any non- empty set of spectators.",
    "topics": [
      "greedy"
    ],
    "id": "1070F"
  },
  {
    "title": "Garbage Disposal",
    "url": "https://codeforces.com/problemset/problem/1070/D",
    "history": "Enough is enough. Too many times it happened that Vasya forgot to dispose of garbage and his apartment stank afterwards. Now he wants to create a garbage disposal plan and stick to it. For each of next n days Vasya knows a_ i \u2014 number of units of garbage he will produce on the i - th day. Each unit of garbage must be disposed of either on the day it was produced or on the next day. Vasya disposes of garbage by putting it inside a bag and dropping the bag into a garbage container. Each bag can contain up to k units of garbage. It is allowed to compose and drop multiple bags into a garbage container in a single day. Being economical, Vasya wants to use as few bags as possible. You are to compute the minimum number of bags Vasya needs to dispose of all of his garbage for the given n days. No garbage should be left after the n - th day.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 2\u00b710^ 5, 1 \u2264 k \u2264 10^ 9 ) \u2014 number of days to consider and bag' s capacity. The second line contains n space separated integers a_ i ( 0 \u2264 a_ i \u2264 10^ 9 ) \u2014 the number of units of garbage produced on the i - th day.",
    "output": "Output a single integer \u2014 the minimum number of bags Vasya needs to dispose of all garbage. Each unit of garbage should be disposed on the day it was produced or on the next day. No garbage can be left after the n - th day. In a day it is allowed to compose and drop multiple bags.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1070D"
  },
  {
    "title": "Cloud Computing",
    "url": "https://codeforces.com/problemset/problem/1070/C",
    "history": "Buber is a Berland technology company that specializes in waste of investor' s money. Recently Buber decided to transfer its infrastructure to a cloud. The company decided to rent CPU cores in the cloud for n consecutive days, which are numbered from 1 to n . Buber requires k CPU cores each day. The cloud provider offers m tariff plans, the i - th tariff plan is characterized by the following parameters: l_ i and r_ i \u2014 the i - th tariff plan is available only on days from l_ i to r_ i , inclusive, c_ i \u2014 the number of cores per day available for rent on the i - th tariff plan, p_ i \u2014 the price of renting one core per day on the i - th tariff plan. Buber can arbitrarily share its computing core needs between the tariff plans. Every day Buber can rent an arbitrary number of cores ( from 0 to c_ i ) on each of the available plans. The number of rented cores on a tariff plan can vary arbitrarily from day to day. Find the minimum amount of money that Buber will pay for its work for n days from 1 to n . If on a day the total number of cores for all available tariff plans is strictly less than k , then this day Buber will have to work on fewer cores ( and it rents all the available cores) , otherwise Buber rents exactly k cores this day.",
    "input": "The first line of the input contains three integers n , k and m ( 1 \u2264 n, k \u2264 10^ 6, 1 \u2264 m \u2264 2\u00b710^ 5 ) \u2014 the number of days to analyze, the desired daily number of cores, the number of tariff plans. The following m lines contain descriptions of tariff plans, one description per line. Each line contains four integers l_ i , r_ i , c_ i , p_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 1 \u2264 c_ i, p_ i \u2264 10^ 6 ) , where l_ i and r_ i are starting and finishing days of the i - th tariff plan, c_ i \u2014 number of cores, p_ i \u2014 price of a single core for daily rent on the i - th tariff plan.",
    "output": "Print a single integer number \u2014 the minimal amount of money that Buber will pay.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1070C"
  },
  {
    "title": "Berkomnadzor",
    "url": "https://codeforces.com/problemset/problem/1070/B",
    "history": "Berkomnadzor \u2014 Federal Service for Supervision of Communications, Information Technology and Mass Media \u2014 is a Berland federal executive body that protects ordinary residents of Berland from the threats of modern internet. Berkomnadzor maintains a list of prohibited IPv4 subnets ( blacklist) and a list of allowed IPv4 subnets ( whitelist) . All Internet Service Providers ( ISPs) in Berland must configure the network equipment to block access to all IPv4 addresses matching the blacklist. Also ISPs must provide access ( that is, do not block) to all IPv4 addresses matching the whitelist. If an IPv4 address does not match either of those lists, it' s up to the ISP to decide whether to block it or not. An IPv4 address matches the blacklist ( whitelist) if and only if it matches some subnet from the blacklist ( whitelist) . An IPv4 address can belong to a whitelist and to a blacklist at the same time, this situation leads to a contradiction ( see no solution case in the output description) . An IPv4 address is a 32- bit unsigned integer written in the form a. b. c. d , where each of the values a, b, c, d is called an octet and is an integer from 0 to 255 written in decimal notation. For example, IPv4 address 192. 168. 0. 1 can be converted to a 32- bit number using the following expression 192 \u00b7 2^ 24 + 168 \u00b7 2^ 16 + 0 \u00b7 2^ 8 + 1 \u00b7 2^ 0 . First octet a encodes the most significant ( leftmost) 8 bits, the octets b and c \u2014 the following blocks of 8 bits ( in this order) , and the octet d encodes the least significant ( rightmost) 8 bits. The IPv4 network in Berland is slightly different from the rest of the world. There are no reserved or internal addresses in Berland and use all 2^ 32 possible values. An IPv4 subnet is represented either as a. b. c. d or as a. b. c. d/ x ( where 0 \u2264 x \u2264 32 ) . A subnet a. b. c. d contains a single address a. b. c. d . A subnet a. b. c. d/ x contains all IPv4 addresses with x leftmost ( most significant) bits equal to x leftmost bits of the address a. b. c. d . It is required that 32 - x rightmost ( least significant) bits of subnet a. b. c. d/ x are zeroes. Naturally it happens that all addresses matching subnet a. b. c. d/ x form a continuous range. The range starts with address a. b. c. d ( its rightmost 32 - x bits are zeroes) . The range ends with address which x leftmost bits equal to x leftmost bits of address a. b. c. d , and its 32 - x rightmost bits are all ones. Subnet contains exactly 2^ 32- x addresses. Subnet a. b. c. d/ 32 contains exactly one address and can also be represented by just a. b. c. d . For example subnet 192. 168. 0. 0/ 24 contains range of 256 addresses. 192. 168. 0. 0 is the first address of the range, and 192. 168. 0. 255 is the last one. Berkomnadzor' s engineers have devised a plan to improve performance of Berland' s global network. Instead of maintaining both whitelist and blacklist they want to build only a single optimised blacklist containing minimal number of subnets. The idea is to block all IPv4 addresses matching the optimised blacklist and allow all the rest addresses. Of course, IPv4 addresses from the old blacklist must remain blocked and all IPv4 addresses from the old whitelist must still be allowed. Those IPv4 addresses which matched neither the old blacklist nor the old whitelist may be either blocked or allowed regardless of their accessibility before. Please write a program which takes blacklist and whitelist as input and produces optimised blacklist. The optimised blacklist must contain the minimal possible number of subnets and satisfy all IPv4 addresses accessibility requirements mentioned above. IPv4 subnets in the source lists may intersect arbitrarily. Please output a single number - 1 if some IPv4 address matches both source whitelist and blacklist.",
    "input": "The first line of the input contains single integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 total number of IPv4 subnets in the input. The following n lines contain IPv4 subnets. Each line starts with either ' - ' or ' + ' sign, which indicates if the subnet belongs to the blacklist or to the whitelist correspondingly. It is followed, without any spaces, by the IPv4 subnet in a. b. c. d or a. b. c. d/ x format ( 0 \u2264 x \u2264 32 ) . The blacklist always contains at least one subnet. All of the IPv4 subnets given in the input are valid. Integer numbers do not start with extra leading zeroes. The provided IPv4 subnets can intersect arbitrarily.",
    "output": "Output - 1, if there is an IPv4 address that matches both the whitelist and the blacklist. Otherwise output t \u2014 the length of the optimised blacklist, followed by t subnets, with each subnet on a new line. Subnets may be printed in arbitrary order. All addresses matching the source blacklist must match the optimised blacklist. All addresses matching the source whitelist must not match the optimised blacklist. You can print a subnet a. b. c. d/ 32 in any of two ways: as a. b. c. d/ 32 or as a. b. c. d . If there is more than one solution, output any.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1070B"
  },
  {
    "title": "Computer Game",
    "url": "https://codeforces.com/problemset/problem/1067/D",
    "history": "Ivan plays some computer game. There are n quests in the game. Each quest can be upgraded once, this increases the reward for its completion. Each quest has 3 parameters a_ i , b_ i , p_ i : reward for completing quest before upgrade, reward for completing quest after upgrade ( a_ i < b_ i ) and probability of successful completing the quest. Each second Ivan can try to complete one quest and he will succeed with probability p_ i . In case of success Ivan will get the reward and opportunity to upgrade any one quest ( not necessary the one he just completed) . In case of failure he gets nothing. Quests do not vanish after completing. Ivan has t seconds. He wants to maximize expected value of his total gain after t seconds. Help him to calculate this value.",
    "input": "First line contains 2 integers n ( 1 \u2264 n \u2264 10^ 5 ) and t ( 1 \u2264 t \u2264 10^ 10 ) \u2014 number of quests and total time. Following n lines contain description of quests. Each description is 3 numbers a_ i b_ i p_ i ( 1 \u2264 a_ i < b_ i\u2264 10^ 8 , 0 < p_ i < 1 ) \u2014 reward for completing quest before upgrade, reward for completing quest after upgrade and probability of successful completing of quest. a_ i and b_ i are integers. All probabilities are given with at most 9 decimal places.",
    "output": "Print the expected value. Your answer will be accepted if absolute or relative error does not exceed 10^ - 6 . Formally, let your answer be a , and the jury' s answer be b . Your answer is considered correct if | a- b| / max\u2061( b, 1) \u2264 10^ - 6 .",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "math",
      "probabilities"
    ],
    "id": "1067D"
  },
  {
    "title": "Heaters",
    "url": "https://codeforces.com/problemset/problem/1066/B",
    "history": "Vova' s house is an array consisting of n elements ( yeah, this is the first problem, I think, where someone lives in the array) . There are heaters in some positions of the array. The i - th element of the array is 1 if there is a heater in the position i , otherwise the i - th element of the array is 0 . Each heater has a value r ( r is the same for all heaters) . This value means that the heater at the position pos can warm up all the elements in range [ pos - r + 1; pos + r - 1] . Vova likes to walk through his house while he thinks, and he hates cold positions of his house. Vova wants to switch some of his heaters on in such a way that each element of his house will be warmed up by at least one heater. Vova' s target is to warm up the whole house ( all the elements of the array) , i. e. if n = 6 , r = 2 and heaters are at positions 2 and 5 , then Vova can warm up the whole house if he switches all the heaters in the house on ( then the first 3 elements will be warmed up by the first heater and the last 3 elements will be warmed up by the second heater) . Initially, all the heaters are off. But from the other hand, Vova didn' t like to pay much for the electricity. So he wants to switch the minimum number of heaters on in such a way that each element of his house is warmed up by at least one heater. Your task is to find this number of heaters or say that it is impossible to warm up the whole house.",
    "input": "The first line of the input contains two integers n and r ( 1 \u2264 n, r \u2264 1000 ) \u2014 the number of elements in the array and the value of heaters. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) \u2014 the Vova' s house description.",
    "output": "Print one integer \u2014 the minimum number of heaters needed to warm up the whole house or - 1 if it is impossible to do it.",
    "note": "In the first example the heater at the position 2 warms up elements [ 1; 3] , the heater at the position 3 warms up elements [ 2, 4] and the heater at the position 6 warms up elements [ 5; 6] so the answer is 3 . In the second example the heater at the position 1 warms up elements [ 1; 3] and the heater at the position 5 warms up elements [ 3; 5] so the answer is 2 . In the third example there are no heaters so the answer is - 1. In the fourth example the heater at the position 3 warms up elements [ 1; 5] , the heater at the position 6 warms up elements [ 4; 8] and the heater at the position 10 warms up elements [ 8; 10] so the answer is 3 .",
    "topics": [
      "greedy",
      "two pointers"
    ],
    "id": "1066B"
  },
  {
    "title": "Make It Equal",
    "url": "https://codeforces.com/problemset/problem/1065/C",
    "history": "There is a toy building consisting of n towers. Each tower consists of several cubes standing on each other. The i - th tower consists of h_ i cubes, so it has height h_ i . Let' s define operation slice on some height H as following: for each tower i , if its height is greater than H , then remove some top cubes to make tower' s height equal to H . Cost of one \" slice\" equals to the total number of removed cubes from all towers. Let' s name slice as good one if its cost is lower or equal to k ( k \u2265 n ) . Calculate the minimum number of good slices you have to do to make all towers have the same height. Of course, it is always possible to make it so.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , n \u2264 k \u2264 10^ 9 ) \u2014 the number of towers and the restriction on slices, respectively. The second line contains n space separated integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the initial heights of towers.",
    "output": "Print one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.",
    "note": "In the first example it' s optimal to make 2 slices. The first slice is on height 2 ( its cost is 3 ) , and the second one is on height 1 ( its cost is 4 ) .",
    "topics": [
      "greedy"
    ],
    "id": "1065C"
  },
  {
    "title": "Company",
    "url": "https://codeforces.com/problemset/problem/1062/E",
    "history": "The company X has n employees numbered from 1 through n . Each employee u has a direct boss p_ u ( 1 \u2264 p_ u \u2264 n ) , except for the employee 1 who has no boss. It is guaranteed, that values p_ i form a tree. Employee u is said to be in charge of employee v if u is the direct boss of v or there is an employee w such that w is in charge of v and u is the direct boss of w . Also, any employee is considered to be in charge of himself. In addition, for each employee u we define it' s level lv( u) as follow: lv( 1) = 0 lv( u) = lv( p_ u) + 1 for u = \u0338 1 In the near future, there are q possible plans for the company to operate. The i - th plan consists of two integers l_ i and r_ i , meaning that all the employees in the range [ l_ i, r_ i] , and only they, are involved in this plan. To operate the plan smoothly, there must be a project manager who is an employee in charge of all the involved employees. To be precise, if an employee u is chosen as the project manager for the i - th plan then for every employee v \u2208 [ l_ i, r_ i] , u must be in charge of v . Note, that u is not necessary in the range [ l_ i, r_ i] . Also, u is always chosen in such a way that lv( u) is as large as possible ( the higher the level is, the lower the salary that the company has to pay the employee) . Before any plan is operated, the company has JATC take a look at their plans. After a glance, he tells the company that for every plan, it' s possible to reduce the number of the involved employees exactly by one without affecting the plan. Being greedy, the company asks JATC which employee they should kick out of the plan so that the level of the project manager required is as large as possible. JATC has already figured out the answer and challenges you to do the same.",
    "input": "The first line contains two integers n and q ( 2 \u2264 n \u2264 100 000 , 1 \u2264 q \u2264 100 000 ) \u2014 the number of employees and the number of plans, respectively. The second line contains n- 1 integers p_ 2, p_ 3, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) meaning p_ i is the direct boss of employee i . It is guaranteed, that values p_ i form a directed tree with the root of 1 . Each of the following q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i< r_ i \u2264 n ) \u2014 the range of the employees, involved in the corresponding plan.",
    "output": "Print q lines, each containing two integers \u2014 the number of the employee which should be kicked from the corresponding plan and the maximum possible level of the project manager in that case. If there are more than one way to choose that employee, print any of them.",
    "note": "In the example: In the first query, we can choose whether 4 or 5 or 6 and the project manager will be 3 . In the second query, if we choose any employee other than the employee 8 , the project manager will be 1 . If we choose 8 , the project manager will be 3 . Since lv( 3) = 1 > lv( 1) = 0 , choosing 8 is the best strategy. In the third query, no matter how we choose the employee, the project manager will always be 1 . In the fourth query, if we choose 9 or 10 then the project manager will be 3 . If we choose 11 then the project manager will be 7 . Since lv( 7) = 3> lv( 3) = 1 , we choose 11 as the answer.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1062E"
  },
  {
    "title": "Banh-mi",
    "url": "https://codeforces.com/problemset/problem/1062/C",
    "history": "JATC loves Banh- mi ( a Vietnamese food) . His affection for Banh- mi is so much that he always has it for breakfast. This morning, as usual, he buys a Banh- mi and decides to enjoy it in a special way. First, he splits the Banh- mi into n parts, places them on a row and numbers them from 1 through n . For each part i , he defines the deliciousness of the part as x_ i \u2208{ 0, 1} . JATC' s going to eat those parts one by one. At each step, he chooses arbitrary remaining part and eats it. Suppose that part is the i - th part then his enjoyment of the Banh- mi will increase by x_ i and the deliciousness of all the remaining parts will also increase by x_ i . The initial enjoyment of JATC is equal to 0 . For example, suppose the deliciousness of 3 parts are [ 0, 1, 0] . If JATC eats the second part then his enjoyment will become 1 and the deliciousness of remaining parts will become [ 1, _ , 1] . Next, if he eats the first part then his enjoyment will become 2 and the remaining parts will become [ _ , _ , 2] . After eating the last part, JATC' s enjoyment will become 4 . However, JATC doesn' t want to eat all the parts but to save some for later. He gives you q queries, each of them consisting of two integers l_ i and r_ i . For each query, you have to let him know what is the maximum enjoyment he can get if he eats all the parts with indices in the range [ l_ i, r_ i] in some order. All the queries are independent of each other. Since the answer to the query could be very large, print it modulo 10^ 9+ 7 .",
    "input": "The first line contains two integers n and q ( 1 \u2264 n, q \u2264 100 000 ) . The second line contains a string of n characters, each character is either ' 0' or ' 1' . The i - th character defines the deliciousness of the i - th part. Each of the following q lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n ) \u2014 the segment of the corresponding query.",
    "output": "Print q lines, where i - th of them contains a single integer \u2014 the answer to the i - th query modulo 10^ 9 + 7 .",
    "note": "In the first example: For query 1 : One of the best ways for JATC to eats those parts is in this order: 1 , 4 , 3 , 2 . For query 2 : Both 3 , 4 and 4 , 3 ordering give the same answer. In the second example, any order of eating parts leads to the same answer.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1062C"
  },
  {
    "title": "Math",
    "url": "https://codeforces.com/problemset/problem/1062/B",
    "history": "JATC' s math teacher always gives the class some interesting math problems so that they don' t get bored. Today the problem is as follows. Given an integer n , you can perform the following operations zero or more times: mul x : multiplies n by x ( where x is an arbitrary positive integer) . sqrt: replaces n with \u221a( n) ( to apply this operation, \u221a( n) must be an integer) . You can perform these operations as many times as you like. What is the minimum value of n , that can be achieved and what is the minimum number of operations, to achieve that minimum value? Apparently, no one in the class knows the answer to this problem, maybe you can help them?",
    "input": "The only line of the input contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the initial number.",
    "output": "Print two integers: the minimum integer n that can be achieved using the described operations and the minimum number of operations required.",
    "note": "In the first example, you can apply the operation mul 5 to get 100 and then sqrt to get 10 . In the second example, you can first apply sqrt to get 72 , then mul 18 to get 1296 and finally two more sqrt and you get 6 . Note, that even if the initial value of n is less or equal 10^ 6 , it can still become greater than 10^ 6 after applying one or more operations.",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1062B"
  },
  {
    "title": "A Prank",
    "url": "https://codeforces.com/problemset/problem/1062/A",
    "history": "JATC and his friend Giraffe are currently in their room, solving some problems. Giraffe has written on the board an array a_ 1 , a_ 2 , . . . , a_ n of integers, such that 1 \u2264 a_ 1 < a_ 2 < . . . < a_ n \u2264 10^ 3 , and then went to the bathroom. JATC decided to prank his friend by erasing some consecutive elements in the array. Since he doesn' t want for the prank to go too far, he will only erase in a way, such that Giraffe can still restore the array using the information from the remaining elements. Because Giraffe has created the array, he' s also aware that it' s an increasing array and all the elements are integers in the range [ 1, 10^ 3] . JATC wonders what is the greatest number of elements he can erase?",
    "input": "The first line of the input contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of elements in the array. The second line of the input contains n integers a_ i ( 1 \u2264 a_ 1< a_ 2< . . . < a_ n \u2264 10^ 3 ) \u2014 the array written by Giraffe.",
    "output": "Print a single integer \u2014 the maximum number of consecutive elements in the array that JATC can erase. If it is impossible to erase even a single element, print 0 .",
    "note": "In the first example, JATC can erase the third and fourth elements, leaving the array [ 1, 3, _ , _ , 6, 9] . As you can see, there is only one way to fill in the blanks. In the second example, JATC can erase the second and the third elements. The array will become [ 998, _ , _ ] . Because all the elements are less than or equal to 1000 , the array is still can be restored. Note, that he can' t erase the first 2 elements. In the third example, JATC can erase the first 4 elements. Since all the elements are greater than or equal to 1 , Giraffe can still restore the array. Note, that he can' t erase the last 4 elements.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1062A"
  },
  {
    "title": "TV Shows",
    "url": "https://codeforces.com/problemset/problem/1061/D",
    "history": "There are n TV shows you want to watch. Suppose the whole time is split into equal parts called \" minutes\" . The i - th of the shows is going from l_ i - th to r_ i - th minute, both ends inclusive. You need a TV to watch a TV show and you can' t watch two TV shows which air at the same time on the same TV, so it is possible you will need multiple TVs in some minutes. For example, if segments [ l_ i, r_ i] and [ l_ j, r_ j] intersect, then shows i and j can' t be watched simultaneously on one TV. Once you start watching a show on some TV it is not possible to \" move\" it to another TV ( since it would be too distracting) , or to watch another show on the same TV until this show ends. There is a TV Rental shop near you. It rents a TV for x rupees, and charges y ( y < x ) rupees for every extra minute you keep the TV. So in order to rent a TV for minutes [ a; b] you will need to pay x + y \u00b7 ( b - a) . You can assume, that taking and returning of the TV doesn' t take any time and doesn' t distract from watching other TV shows. Find the minimum possible cost to view all shows. Since this value could be too large, print it modulo 10^ 9 + 7 .",
    "input": "The first line contains integers n , x and y ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 y < x \u2264 10^ 9 ) \u2014 the number of TV shows, the cost to rent a TV for the first minute and the cost to rent a TV for every subsequent minute. Each of the next n lines contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) denoting the start and the end minute of the i - th TV show.",
    "output": "Print exactly one integer \u2014 the minimum cost to view all the shows taken modulo 10^ 9 + 7 .",
    "note": "In the first example, the optimal strategy would be to rent 3 TVs to watch: Show [ 1, 2] on the first TV, Show [ 4, 10] on the second TV, Shows [ 2, 4] , [ 5, 9] , [ 10, 11] on the third TV. This way the cost for the first TV is 4 + 3 \u00b7 ( 2 - 1) = 7 , for the second is 4 + 3 \u00b7 ( 10 - 4) = 22 and for the third is 4 + 3 \u00b7 ( 11 - 2) = 31 , which gives 60 int total. In the second example, it is optimal watch each show on a new TV. In third example, it is optimal to watch both shows on a new TV. Note that the answer is to be printed modulo 10^ 9 + 7 .",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1061D"
  },
  {
    "title": "Views Matter",
    "url": "https://codeforces.com/problemset/problem/1061/B",
    "history": "You came to the exhibition and one exhibit has drawn your attention. It consists of n stacks of blocks, where the i - th stack consists of a_ i blocks resting on the surface. The height of the exhibit is equal to m . Consequently, the number of blocks in each stack is less than or equal to m . There is a camera on the ceiling that sees the top view of the blocks and a camera on the right wall that sees the side view of the blocks. Find the maximum number of blocks you can remove such that the views for both the cameras would not change. Note, that while originally all blocks are stacked on the floor, it is not required for them to stay connected to the floor after some blocks are removed. There is no gravity in the whole exhibition, so no block would fall down, even if the block underneath is removed. It is not allowed to move blocks by hand either.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100 000 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of stacks and the height of the exhibit. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m ) \u2014 the number of blocks in each stack from left to right.",
    "output": "Print exactly one integer \u2014 the maximum number of blocks that can be removed.",
    "note": "The following pictures illustrate the first example and its possible solution. Blue cells indicate removed blocks. There are 10 blue cells, so the answer is 10 .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1061B"
  },
  {
    "title": "Coins",
    "url": "https://codeforces.com/problemset/problem/1061/A",
    "history": "You have unlimited number of coins with values 1, 2, . . . , n . You want to select some set of coins having the total value of S . It is allowed to have multiple coins with the same value in the set. What is the minimum number of coins required to get sum S ?",
    "input": "The only line of the input contains two integers n and S ( 1 \u2264 n \u2264 100 000 , 1 \u2264 S \u2264 10^ 9 )",
    "output": "Print exactly one integer \u2014 the minimum number of coins required to obtain sum S .",
    "note": "In the first example, some of the possible ways to get sum 11 with 3 coins are: ( 3, 4, 4) ( 2, 4, 5) ( 1, 5, 5) ( 3, 3, 5) It is impossible to get sum 11 with less than 3 coins. In the second example, some of the possible ways to get sum 16 with 3 coins are: ( 5, 5, 6) ( 4, 6, 6) It is impossible to get sum 16 with less than 3 coins.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1061A"
  },
  {
    "title": "Social Circles",
    "url": "https://codeforces.com/problemset/problem/1060/D",
    "history": "You invited n guests to dinner! You plan to arrange one or more circles of chairs. Each chair is going to be either occupied by one guest, or be empty. You can make any number of circles. Your guests happen to be a little bit shy, so the i - th guest wants to have a least l_ i free chairs to the left of his chair, and at least r_ i free chairs to the right. The \" left\" and \" right\" directions are chosen assuming all guests are going to be seated towards the center of the circle. Note that when a guest is the only one in his circle, the l_ i chairs to his left and r_ i chairs to his right may overlap. What is smallest total number of chairs you have to use?",
    "input": "First line contains one integer n \u2014 number of guests, ( 1 \u2a7d n \u2a7d 10^ 5 ) . Next n lines contain n pairs of space- separated integers l_ i and r_ i ( 0 \u2a7d l_ i, r_ i \u2a7d 10^ 9 ) .",
    "output": "Output a single integer \u2014 the smallest number of chairs you have to use.",
    "note": "In the second sample the only optimal answer is to use two circles: a circle with 5 chairs accomodating guests 1 and 2 , and another one with 10 chairs accomodationg guests 3 and 4 . In the third sample, you have only one circle with one person. The guest should have at least five free chairs to his left, and at least six free chairs to his right to the next person, which is in this case the guest herself. So, overall number of chairs should be at least 6+ 1= 7.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1060D"
  },
  {
    "title": "Maximum Sum of Digits",
    "url": "https://codeforces.com/problemset/problem/1060/B",
    "history": "You are given a positive integer n . Let S( x) be sum of digits in base 10 representation of x , for example, S( 123) = 1 + 2 + 3 = 6 , S( 0) = 0 . Your task is to find two integers a, b , such that 0 \u2264 a, b \u2264 n , a + b = n and S( a) + S( b) is the largest possible among all such pairs.",
    "input": "The only line of input contains an integer n ( 1 \u2264 n \u2264 10^ 12) .",
    "output": "Print largest S( a) + S( b) among all pairs of integers a, b , such that 0 \u2264 a, b \u2264 n and a + b = n .",
    "note": "In the first example, you can choose, for example, a = 17 and b = 18 , so that S( 17) + S( 18) = 1 + 7 + 1 + 8 = 17 . It can be shown that it is impossible to get a larger answer. In the second test example, you can choose, for example, a = 5000000001 and b = 4999999999 , with S( 5000000001) + S( 4999999999) = 91 . It can be shown that it is impossible to get a larger answer.",
    "topics": [
      "greedy"
    ],
    "id": "1060B"
  },
  {
    "title": "Split the Tree",
    "url": "https://codeforces.com/problemset/problem/1059/E",
    "history": "You are given a rooted tree on n vertices, its root is the vertex number 1 . The i - th vertex contains a number w_ i . Split it into the minimum possible number of vertical paths in such a way that each path contains no more than L vertices and the sum of integers w_ i on each path does not exceed S . Each vertex should belong to exactly one path. A vertical path is a sequence of vertices v_ 1, v_ 2, . . . , v_ k where v_ i ( i \u2265 2 ) is the parent of v_ i - 1 .",
    "input": "The first line contains three integers n , L , S ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 L \u2264 10^ 5 , 1 \u2264 S \u2264 10^ 18 ) \u2014 the number of vertices, the maximum number of vertices in one path and the maximum sum in one path. The second line contains n integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) \u2014 the numbers in the vertices of the tree. The third line contains n - 1 integers p_ 2, . . . , p_ n ( 1 \u2264 p_ i < i ) , where p_ i is the parent of the i - th vertex in the tree.",
    "output": "Output one number \u2014 the minimum number of vertical paths. If it is impossible to split the tree, output - 1 .",
    "note": "In the first sample the tree is split into { 1} , { 2} , { 3} . In the second sample the tree is split into { 1, 2} , { 3} or { 1, 3} , { 2} . In the third sample it is impossible to split the tree.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1059E"
  },
  {
    "title": "Decorate Apple Tree",
    "url": "https://codeforces.com/problemset/problem/1056/D",
    "history": "There is one apple tree in Arkady' s garden. It can be represented as a set of junctions connected with branches so that there is only one way to reach any junctions from any other one using branches. The junctions are enumerated from 1 to n , the junction 1 is called the root. A subtree of a junction v is a set of junctions u such that the path from u to the root must pass through v . Note that v itself is included in a subtree of v . A leaf is such a junction that its subtree contains exactly one junction. The New Year is coming, so Arkady wants to decorate the tree. He will put a light bulb of some color on each leaf junction and then count the number happy junctions. A happy junction is such a junction t that all light bulbs in the subtree of t have different colors. Arkady is interested in the following question: for each k from 1 to n , what is the minimum number of different colors needed to make the number of happy junctions be greater than or equal to k ?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of junctions in the tree. The second line contains n - 1 integers p_ 2 , p_ 3 , . . . , p_ n ( 1 \u2264 p_ i < i ) , where p_ i means there is a branch between junctions i and p_ i . It is guaranteed that this set of branches forms a tree.",
    "output": "Output n integers. The i - th of them should be the minimum number of colors needed to make the number of happy junctions be at least i .",
    "note": "In the first example for k = 1 and k = 2 we can use only one color: the junctions 2 and 3 will be happy. For k = 3 you have to put the bulbs of different colors to make all the junctions happy. In the second example for k = 4 you can, for example, put the bulbs of color 1 in junctions 2 and 4 , and a bulb of color 2 into junction 5 . The happy junctions are the ones with indices 2 , 3 , 4 and 5 then.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1056D"
  },
  {
    "title": "Pick Heroes",
    "url": "https://codeforces.com/problemset/problem/1056/C",
    "history": "Don' t you tell me what you think that I can beIf you say that Arkady is a bit old- fashioned playing checkers, you won' t be right. There is also a modern computer game Arkady and his friends are keen on. We won' t discuss its rules, the only feature important to this problem is that each player has to pick a distinct hero in the beginning of the game. There are 2 teams each having n players and 2n heroes to distribute between the teams. The teams take turns picking heroes: at first, the first team chooses a hero in its team, after that the second team chooses a hero and so on. Note that after a hero is chosen it becomes unavailable to both teams. The friends estimate the power of the i - th of the heroes as p_ i . Each team wants to maximize the total power of its heroes. However, there is one exception: there are m pairs of heroes that are especially strong against each other, so when any team chooses a hero from such a pair, the other team must choose the other one on its turn. Each hero is in at most one such pair. This is an interactive problem. You are to write a program that will optimally choose the heroes for one team, while the jury' s program will play for the other team. Note that the jury' s program may behave inefficiently, in this case you have to take the opportunity and still maximize the total power of your team. Formally, if you ever have chance to reach the total power of q or greater regardless of jury' s program choices, you must get q or greater to pass a test. InteractionWhen it is your turn, print a single integer x ( 1 \u2264 x \u2264 2n ) \u2014 the index of the hero chosen by you. Note that you can' t choose a hero previously chosen by either you of the other player, and you must follow the rules about special pairs of heroes. When it is the other team' s turn, read a line containing a single integer x ( 1 \u2264 x \u2264 2n ) \u2014 the index of the hero chosen by the other team. It is guaranteed that this index is not chosen before and that the other team also follows the rules about special pairs of heroes. After the last turn you should terminate without printing anything. After printing your choice do not forget to output end of line and flush the output. Otherwise you will get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see documentation for other languages. Jury' s answer - 1 instead of a valid choice means that you made an invalid turn. Exit immediately after receiving - 1 and you will see Wrong answer verdict. Otherwise you can get an arbitrary verdict because your solution will continue to read from a closed stream.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 10^ 3 , 0 \u2264 m \u2264 n ) \u2014 the number of players in one team and the number of special pairs of heroes. The second line contains 2n integers p_ 1, p_ 2, . . . , p_ 2n ( 1 \u2264 p_ i \u2264 10^ 3 ) \u2014 the powers of the heroes. Each of the next m lines contains two integer a and b ( 1 \u2264 a, b \u2264 2n , a b ) \u2014 a pair of heroes that are especially strong against each other. It is guaranteed that each hero appears at most once in this list. The next line contains a single integer t ( 1 \u2264 t \u2264 2 ) \u2014 the team you are to play for. If t = 1 , the first turn is yours, otherwise you have the second turn. HacksIn order to hack, use the format described above with one additional line. In this line output 2n distinct integers from 1 to 2n \u2014 the priority order for the jury' s team. The jury' s team will on each turn select the first possible hero from this list. Here possible means that it is not yet taken and does not contradict the rules about special pair of heroes.",
    "output": "",
    "note": "In the first example the first turn is yours. In example, you choose 6 , the other team is forced to reply with 2 . You choose 5 , the other team chooses 4 . Finally, you choose 3 and the other team choose 1 . In the second example you have the second turn. The other team chooses 6 , you choose 5 , forcing the other team to choose 1 . Now you choose 4 , the other team chooses 3 and you choose 2 .",
    "topics": [
      "greedy",
      "implementation",
      "interactive",
      "sortings"
    ],
    "id": "1056C"
  },
  {
    "title": "Refactoring",
    "url": "https://codeforces.com/problemset/problem/1055/D",
    "history": "Alice has written a program and now tries to improve its readability. One of the ways to improve readability is to give sensible names to the variables, so now Alice wants to rename some variables in her program. In her IDE there is a command called \" massive refactoring\" , which can replace names of many variable in just one run. To use it, Alice needs to select two strings s and t and after that for each variable the following algorithm is performed: if the variable' s name contains s as a substring, then the first ( and only first) occurrence of s is replaced with t . If the name doesn' t contain s , then this variable' s name stays the same. The list of variables is known and for each variable both the initial name and the name Alice wants this variable change to are known. Moreover, for each variable the lengths of the initial name and the target name are equal ( otherwise the alignment of the code could become broken) . You need to perform renaming of all variables in exactly one run of the massive refactoring command or determine that it is impossible.",
    "input": "The first line contains the only integer n ( 1 \u2264 n \u2264 3000 ) \u2014 the number of variables in Alice' s program. The following n lines contain the initial names of variables w_ 1, w_ 2, . . . , w_ n , one per line. After that, n more lines go, the i - th of them contains the target name w' _ i for the i - th variable. It is guaranteed that 1 \u2264 | w_ i| = | w' _ i| \u2264 3000 . It is guaranteed that there is at least one variable having its target name different from the initial name. Both initial and target names consist of lowercase English letters only. For each variable the length of its initial name is equal to the length of its target name.",
    "output": "If it is impossible to rename all variables with one call of \" massive refactoring\" , print \" NO\" ( quotes for clarity) . Otherwise, on the first line print \" YES\" ( quotes for clarity) and on the following lines print s and t ( 1 \u2264 | s| , | t| \u2264 5000 ) , which should be used for replacement. Strings s and t should consist only of lowercase letters of English alphabet. If there are multiple ways to perform a \" massive refactoring\" , you can use any of them.",
    "note": "",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1055D"
  },
  {
    "title": "New Road Network",
    "url": "https://codeforces.com/problemset/problem/1054/G",
    "history": "The king of some country N decided to completely rebuild the road network. There are n people living in the country, they are enumerated from 1 to n . It is possible to construct a road between the house of any citizen a to the house of any other citizen b . There should not be more than one road between any pair of citizens. The road network must be connected, i. e. it should be possible to reach every citizen starting from anyone using roads. To save funds, it was decided to build exactly n- 1 road, so the road network should be a tree. However, it is not that easy as it sounds, that' s why the king addressed you for help. There are m secret communities in the country, each of them unites a non- empty subset of citizens. The king does not want to conflict with any of the communities, so he wants to build the network such that the houses of members of each society form a connected subtree in network. A set of vertices forms a connected subtree if and only if the graph remains connected when we delete all the other vertices and all edges but ones that connect the vertices from the set. Help the king to determine if it is possible to build the desired road network, and if it is, build it.",
    "input": "Each test consists of one or more test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 2000 ) \u2014 the number of test cases. The following lines describe the test cases, each in the following format. The first line contains two integers n and m ( 1 \u2264 n, m \u2264 2000 ) \u2014 the number of citizens and the number of secret communities. The next m lines contain the description of the communities. The i - th of these lines contains a string s_ i of length n , consisting of characters ' 0' and ' 1' . The citizen with number j is a member of the i - th community if and only if s_ ij= 1 . It is guaranteed that the string s_ i contains at least one character ' 1' for each 1 \u2264 i \u2264 m . It is guaranteed that the sum of n for all test cases does not exceed 2000 and the sum of m for all test cases does not exceed 2000 .",
    "output": "Print the answer for all test cases in the order they are given in the input, each in the following format. If there is no way to build the desired road network, print \" NO\" ( without quotes) . Otherwise in the first line print \" YES\" ( without quotes) . In the next n- 1 lines print the description of the road network: each line should contain two integers a and b ( 1 \u2264 a, b \u2264 n , a = \u0338 b ) that denote you build a road between houses of citizens a and b . The roads should form a connected tree, and each community should form a connected subtree.",
    "note": "In the first example you can build the following network: It is easy to see that for each community all the houses of its members form a connected subtree. For example, the 2 - nd community unites the citizens 1 , 2 , 3 . They form a connected subtree, because if we delete everything except the houses 1 , 2 , 3 and the roads between them, two roads will remain: between 1 and 3 and between 2 and 3 , forming a connected graph. There is no network in the second example suitable for the king.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1054G"
  },
  {
    "title": "Changing Array",
    "url": "https://codeforces.com/problemset/problem/1054/D",
    "history": "At a break Vanya came to the class and saw an array of n k - bit integers a_ 1, a_ 2, . . . , a_ n on the board. An integer x is called a k - bit integer if 0 \u2264 x \u2264 2^ k - 1 . Of course, Vanya was not able to resist and started changing the numbers written on the board. To ensure that no one will note anything, Vanya allowed himself to make only one type of changes: choose an index of the array i ( 1 \u2264 i \u2264 n ) and replace the number a_ i with the number a_ i . We define x for a k - bit integer x as the k - bit integer such that all its k bits differ from the corresponding bits of x . Vanya does not like the number 0 . Therefore, he likes such segments [ l, r] ( 1 \u2264 l \u2264 r \u2264 n ) such that a_ l \u2295 a_ l+ 1\u2295. . . \u2295 a_ r = \u0338 0 , where \u2295 denotes the bitwise XOR operation. Determine the maximum number of segments he likes Vanya can get applying zero or more operations described above.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 n \u2264 200 000 , 1 \u2264 k \u2264 30 ) . The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2^ k - 1 ) , separated by spaces \u2014 the array of k - bit integers.",
    "output": "Print one integer \u2014 the maximum possible number of segments with XOR not equal to 0 that can be obtained by making several ( possibly 0 ) operations described in the statement.",
    "note": "In the first example if Vasya does not perform any operations, he gets an array that has 5 segments that Vanya likes. If he performs the operation with i = 2 , he gets an array [ 1, 0, 0] , because 3 = 0 when k = 2 . This array has 3 segments that Vanya likes. Also, to get an array with 5 segments that Vanya likes, he can perform two operations with i = 3 and with i = 2 . He then gets an array [ 1, 0, 3] . It can be proven that he can' t obtain 6 or more segments that he likes. In the second example, to get 19 segments that Vanya likes, he can perform 4 operations with i = 3 , i = 4 , i = 5 , i = 6 and get an array [ 1, 4, 3, 0, 4, 3] .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1054D"
  },
  {
    "title": "Distinctification",
    "url": "https://codeforces.com/problemset/problem/1051/G",
    "history": "Suppose you are given a sequence S of k pairs of integers ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ k, b_ k) . You can perform the following operations on it: Choose some position i and increase a_ i by 1 . That can be performed only if there exists at least one such position j that i j and a_ i = a_ j . The cost of this operation is b_ i ; Choose some position i and decrease a_ i by 1 . That can be performed only if there exists at least one such position j that a_ i = a_ j + 1 . The cost of this operation is - b_ i . Each operation can be performed arbitrary number of times ( possibly zero) . Let f( S) be minimum possible x such that there exists a sequence of operations with total cost x , after which all a_ i from S are pairwise distinct. Now for the task itself . . . You are given a sequence P consisting of n pairs of integers ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ n, b_ n) . All b_ i are pairwise distinct. Let P_ i be the sequence consisting of the first i pairs of P . Your task is to calculate the values of f( P_ 1) , f( P_ 2) , . . . , f( P_ n) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of pairs in sequence P . Next n lines contain the elements of P : i - th of the next n lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 , 1 \u2264 b_ i \u2264 n ) . It is guaranteed that all values of b_ i are pairwise distinct.",
    "output": "Print n integers \u2014 the i - th number should be equal to f( P_ i) .",
    "note": "",
    "topics": [
      "data structures",
      "dsu",
      "greedy"
    ],
    "id": "1051G"
  },
  {
    "title": "Vasya and Multisets",
    "url": "https://codeforces.com/problemset/problem/1051/C",
    "history": "Vasya has a multiset s consisting of n integer numbers. Vasya calls some number x nice if it appears in the multiset exactly once. For example, multiset { 1, 1, 2, 3, 3, 3, 4} contains nice numbers 2 and 4 . Vasya wants to split multiset s into two multisets a and b ( one of which may be empty) in such a way that the quantity of nice numbers in multiset a would be the same as the quantity of nice numbers in multiset b ( the quantity of numbers to appear exactly once in multiset a and the quantity of numbers to appear exactly once in multiset b ) .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 100) . The second line contains n integers s_ 1, s_ 2, . . . s_ n ( 1 \u2264 s_ i \u2264 100) \u2014 the multiset s .",
    "output": "If there exists no split of s to satisfy the given requirements, then print \" NO\" in the first line. Otherwise print \" YES\" in the first line. The second line should contain a string, consisting of n characters. i - th character should be equal to ' A' if the i - th element of multiset s goes to multiset a and ' B' if if the i - th element of multiset s goes to multiset b . Elements are numbered from 1 to n in the order they are given in the input. If there exist multiple solutions, then print any of them.",
    "note": "",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1051C"
  },
  {
    "title": "Relatively Prime Pairs",
    "url": "https://codeforces.com/problemset/problem/1051/B",
    "history": "You are given a set of all integers from l to r inclusive, l < r , ( r - l + 1) \u2264 3 \u00b7 10^ 5 and ( r - l) is always odd. You want to split these numbers into exactly r - l + 1/ 2 pairs in such a way that for each pair ( i, j) the greatest common divisor of i and j is equal to 1 . Each number should appear in exactly one of the pairs. Print the resulting pairs or output that no solution exists. If there are multiple solutions, print any of them.",
    "input": "The only line contains two integers l and r ( 1 \u2264 l < r \u2264 10^ 18 , r - l + 1 \u2264 3 \u00b7 10^ 5 , ( r - l) is odd) .",
    "output": "If any solution exists, print \" YES\" in the first line. Each of the next r - l + 1/ 2 lines should contain some pair of integers. GCD of numbers in each pair should be equal to 1 . All ( r - l + 1) numbers should be pairwise distinct and should have values from l to r inclusive. If there are multiple solutions, print any of them. If there exists no solution, print \" NO\" .",
    "note": "",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1051B"
  },
  {
    "title": "Vasya And Password",
    "url": "https://codeforces.com/problemset/problem/1051/A",
    "history": "Vasya came up with a password to register for EatForces \u2014 a string s . The password in EatForces should be a string, consisting of lowercase and uppercase Latin letters and digits. But since EatForces takes care of the security of its users, user passwords must contain at least one digit, at least one uppercase Latin letter and at least one lowercase Latin letter. For example, the passwords \" abaCABA12\" , \" Z7q\" and \" 3R24m\" are valid, and the passwords \" qwerty\" , \" qwerty12345\" and \" Password\" are not. A substring of string s is a string x = s_ l s_ l + 1. . . s_ l + len - 1 ( 1 \u2264 l \u2264 | s| , 0 \u2264 len \u2264 | s| - l + 1) . len is the length of the substring. Note that the empty string is also considered a substring of s , it has the length 0 . Vasya' s password, however, may come too weak for the security settings of EatForces. He likes his password, so he wants to replace some its substring with another string of the same length in order to satisfy the above conditions. This operation should be performed exactly once, and the chosen string should have the minimal possible length. Note that the length of s should not change after the replacement of the substring, and the string itself should contain only lowercase and uppercase Latin letters and digits.",
    "input": "The first line contains a single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of testcases. Each of the next T lines contains the initial password s ( 3 \u2264 | s| \u2264 100) , consisting of lowercase and uppercase Latin letters and digits. Only T = 1 is allowed for hacks.",
    "output": "For each testcase print a renewed password, which corresponds to given conditions. The length of the replaced substring is calculated as following: write down all the changed positions. If there are none, then the length is 0 . Otherwise the length is the difference between the first and the last changed position plus one. For example, the length of the changed substring between the passwords \" abcdef\" \u2192 \" a7cdEf\" is 4 , because the changed positions are 2 and 5 , thus ( 5 - 2) + 1 = 4 . It is guaranteed that such a password always exists. If there are several suitable passwords \u2014 output any of them.",
    "note": "In the first example Vasya' s password lacks a digit, he replaces substring \" C\" with \" 4\" and gets password \" abcD4E\" . That means, he changed the substring of length 1. In the second example Vasya' s password is ok from the beginning, and nothing has to be changed. That is the same as replacing the empty substring with another empty substring ( length 0) .",
    "topics": [
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1051A"
  },
  {
    "title": "Space Formula",
    "url": "https://codeforces.com/problemset/problem/1046/C",
    "history": "Formula 1 officials decided to introduce new competition. Cars are replaced by space ships and number of points awarded can differ per race. Given the current ranking in the competition and points distribution for the next race, your task is to calculate the best possible ranking for a given astronaut after the next race. It' s guaranteed that given astronaut will have unique number of points before the race.",
    "input": "The first line contains two integer numbers N ( 1 \u2264 N \u2264 200000 ) representing number of F1 astronauts, and current position of astronaut D ( 1 \u2264 D \u2264 N ) you want to calculate best ranking for ( no other competitor will have the same number of points before the race) . The second line contains N integer numbers S_ k ( 0 \u2264 S_ k \u2264 10^ 8 , k= 1. . . N ) , separated by a single space, representing current ranking of astronauts. Points are sorted in non- increasing order. The third line contains N integer numbers P_ k ( 0 \u2264 P_ k \u2264 10^ 8 , k= 1. . . N ) , separated by a single space, representing point awards for the next race. Points are sorted in non- increasing order, so winner of the race gets the maximum number of points.",
    "output": "Output contains one integer number \u2014 the best possible ranking for astronaut after the race. If multiple astronauts have the same score after the race, they all share the best ranking.",
    "note": "If the third ranked astronaut wins the race, he will have 35 points. He cannot take the leading position, but he can overtake the second position if the second ranked astronaut finishes the race at the last position.",
    "topics": [
      "greedy"
    ],
    "id": "1046C"
  },
  {
    "title": "Train Hard, Win Easy",
    "url": "https://codeforces.com/problemset/problem/1043/E",
    "history": "Zibi is a competitive programming coach. There are n competitors who want to be prepared well. The training contests are quite unusual \u2013 there are two people in a team, two problems, and each competitor will code exactly one of them. Of course, people in one team will code different problems. Rules of scoring also aren' t typical. The first problem is always an implementation problem: you have to implement some well- known algorithm very fast and the time of your typing is rated. The second one is an awful geometry task and you just have to get it accepted in reasonable time. Here the length and difficulty of your code are important. After that, Zibi will give some penalty points ( possibly negative) for each solution and the final score of the team is the sum of them ( the less the score is, the better) . We know that the i - th competitor will always have score x_ i when he codes the first task and y_ i when he codes the second task. We can assume, that all competitors know each other' s skills and during the contest distribute the problems in the way that minimizes their final score. Remember that each person codes exactly one problem in a contest. Zibi wants all competitors to write a contest with each other. However, there are m pairs of people who really don' t like to cooperate and they definitely won' t write a contest together. Still, the coach is going to conduct trainings for all possible pairs of people, such that the people in pair don' t hate each other. The coach is interested for each participant, what will be his or her sum of scores of all teams he trained in?",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 300 000 , 0 \u2264 m \u2264 300 000 ) \u2014 the number of participants and the number of pairs of people who will not write a contest together. Each of the next n lines contains two integers x_ i and y_ i ( - 10^ 9 \u2264 x_ i, y_ i \u2264 10^ 9 ) \u2014 the scores which will the i - th competitor get on the first problem and on the second problem. It is guaranteed that there are no two people having both x_ i and y_ i same. Each of the next m lines contain two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) \u2014 indices of people who don' t want to write a contest in one team. Each unordered pair of indices will appear at most once.",
    "output": "Output n integers \u2014 the sum of scores for all participants in the same order as they appear in the input.",
    "note": "In the first example, there will be only one team consisting of persons 1 and 3 . The optimal strategy for them is to assign the first task to the 3 - rd person and the second task to the 1 - st person, this will lead to score equal to 1 + 2 = 3 . In the second example, nobody likes anyone, so there won' t be any trainings. It seems that Zibi won' t be titled coach in that case. . .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1043E"
  },
  {
    "title": "Smallest Word",
    "url": "https://codeforces.com/problemset/problem/1043/C",
    "history": "IA has so many colorful magnets on her fridge! Exactly one letter is written on each magnet, ' a' or ' b' . She loves to play with them, placing all magnets in a row. However, the girl is quickly bored and usually thinks how to make her entertainment more interesting. Today, when IA looked at the fridge, she noticed that the word formed by magnets is really messy. \" It would look much better when I' ll swap some of them! \" \u2014 thought the girl \u2014 \" but how to do it? \" . After a while, she got an idea. IA will look at all prefixes with lengths from 1 to the length of the word and for each prefix she will either reverse this prefix or leave it as it is. She will consider the prefixes in the fixed order: from the shortest to the largest. She wants to get the lexicographically smallest possible word after she considers all prefixes. Can you help her, telling which prefixes should be chosen for reversing? A string a is lexicographically smaller than a string b if and only if one of the following holds: a is a prefix of b , but a b ; in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .",
    "input": "The first and the only line contains a string s ( 1 \u2264 | s| \u2264 1000 ) , describing the initial string formed by magnets. The string s consists only of characters ' a' and ' b' .",
    "output": "Output exactly | s| integers. If IA should reverse the i - th prefix ( that is, the substring from 1 to i ) , the i - th integer should be equal to 1 , and it should be equal to 0 otherwise. If there are multiple possible sequences leading to the optimal answer, print any of them.",
    "note": "In the first example, IA can reverse the second and the third prefix and get a string \" abbb\" . She cannot get better result, since it is also lexicographically smallest string obtainable by permuting characters of the initial string. In the second example, she can reverse any subset of prefixes \u2014 all letters are ' a' .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1043C"
  },
  {
    "title": "Leaf Sets",
    "url": "https://codeforces.com/problemset/problem/1042/F",
    "history": "You are given an undirected tree, consisting of n vertices. The vertex is called a leaf if it has exactly one vertex adjacent to it. The distance between some pair of vertices is the number of edges in the shortest path between them. Let' s call some set of leaves beautiful if the maximum distance between any pair of leaves in it is less or equal to k . You want to split all leaves into non- intersecting beautiful sets. What is the minimal number of sets in such a split?",
    "input": "The first line contains two integers n and k ( 3 \u2264 n \u2264 10^ 6 , 1 \u2264 k \u2264 10^ 6 ) \u2014 the number of vertices in the tree and the maximum distance between any pair of leaves in each beautiful set. Each of the next n - 1 lines contains two integers v_ i and u_ i ( 1 \u2264 v_ i, u_ i \u2264 n ) \u2014 the description of the i - th edge. It is guaranteed that the given edges form a tree.",
    "output": "Print a single integer \u2014 the minimal number of beautiful sets the split can have.",
    "note": "Here is the graph for the first example:",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1042F"
  },
  {
    "title": "Array Product",
    "url": "https://codeforces.com/problemset/problem/1042/C",
    "history": "You are given an array a consisting of n integers. You can perform the following operations with it: Choose some positions i and j ( 1 \u2264 i, j \u2264 n, i j ) , write the value of a_ i \u00b7 a_ j into the j - th cell and remove the number from the i - th cell; Choose some position i and remove the number from the i - th cell ( this operation can be performed no more than once and at any point of time, not necessarily in the beginning) . The number of elements decreases by one after each operation. However, the indexing of positions stays the same. Deleted numbers can' t be used in the later operations. Your task is to perform exactly n - 1 operations with the array in such a way that the only number that remains in the array is maximum possible. This number can be rather large, so instead of printing it you need to print any sequence of operations which leads to this maximum number. Read the output format to understand what exactly you need to print.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in the array. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array.",
    "output": "Print n - 1 lines. The k - th line should contain one of the two possible operations. The operation of the first type should look like this: 1 i_ k j_ k , where 1 is the type of operation, i_ k and j_ k are the positions of the chosen elements. The operation of the second type should look like this: 2 i_ k , where 2 is the type of operation, i_ k is the position of the chosen element. Note that there should be no more than one such operation. If there are multiple possible sequences of operations leading to the maximum number \u2014 print any of them.",
    "note": "Let X be the removed number in the array. Let' s take a look at all the examples: The first example has, for example, the following sequence of transformations of the array: [ 5, - 2, 0, 1, - 3] \u2192 [ 5, - 2, X, 1, - 3] \u2192 [ X, - 10, X, 1, - 3] \u2192 [ X, X, X, - 10, - 3] \u2192 [ X, X, X, X, 30] . Thus, the maximum answer is 30 . Note, that other sequences that lead to the answer 30 are also correct. The second example has, for example, the following sequence of transformations of the array: [ 5, 2, 0, 4, 0] \u2192 [ 5, 2, X, 4, 0] \u2192 [ 5, 2, X, 4, X] \u2192 [ X, 10, X, 4, X] \u2192 [ X, X, X, 40, X] . The following answer is also allowed: 1 5 31 4 21 2 12 3Then the sequence of transformations of the array will look like this: [ 5, 2, 0, 4, 0] \u2192 [ 5, 2, 0, 4, X] \u2192 [ 5, 8, 0, X, X] \u2192 [ 40, X, 0, X, X] \u2192 [ 40, X, X, X, X] . The third example can have the following sequence of transformations of the array: [ 2, - 1] \u2192 [ 2, X] . The fourth example can have the following sequence of transformations of the array: [ 0, - 10, 0, 0] \u2192 [ X, 0, 0, 0] \u2192 [ X, X, 0, 0] \u2192 [ X, X, X, 0] . The fifth example can have the following sequence of transformations of the array: [ 0, 0, 0, 0] \u2192 [ X, 0, 0, 0] \u2192 [ X, X, 0, 0] \u2192 [ X, X, X, 0] .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1042C"
  },
  {
    "title": "Tree Reconstruction",
    "url": "https://codeforces.com/problemset/problem/1041/E",
    "history": "Monocarp has drawn a tree ( an undirected connected acyclic graph) and then has given each vertex an index. All indices are distinct numbers from 1 to n . For every edge e of this tree, Monocarp has written two numbers: the maximum indices of the vertices of the two components formed if the edge e ( and only this edge) is erased from the tree. Monocarp has given you a list of n - 1 pairs of numbers. He wants you to provide an example of a tree that will produce the said list if this tree exists. If such tree does not exist, say so.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 1 000 ) \u2014 the number of vertices in the tree. Each of the next n- 1 lines contains two integers a_ i and b_ i each ( 1 \u2264 a_ i < b_ i \u2264 n ) \u2014 the maximal indices of vertices in the components formed if the i - th edge is removed.",
    "output": "If there is no such tree that can produce the given list of pairs, print \" NO\" ( without quotes) . Otherwise print \" YES\" ( without quotes) in the first line and the edges of the tree in the next n - 1 lines. Each of the last n - 1 lines should contain two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n ) \u2014 vertices connected by an edge. Note: The numeration of edges doesn' t matter for this task. Your solution will be considered correct if your tree produces the same pairs as given in the input file ( possibly reordered) . That means that you can print the edges of the tree you reconstructed in any order.",
    "note": "Possible tree from the first example. Dotted lines show edges you need to remove to get appropriate pairs.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy"
    ],
    "id": "1041E"
  },
  {
    "title": "Coffee Break",
    "url": "https://codeforces.com/problemset/problem/1041/C",
    "history": "Recently Monocarp got a job. His working day lasts exactly m minutes. During work, Monocarp wants to drink coffee at certain moments: there are n minutes a_ 1, a_ 2, . . . , a_ n , when he is able and willing to take a coffee break ( for the sake of simplicity let' s consider that each coffee break lasts exactly one minute) . However, Monocarp' s boss doesn' t like when Monocarp takes his coffee breaks too often. So for the given coffee break that is going to be on minute a_ i , Monocarp must choose the day in which he will drink coffee during the said minute, so that every day at least d minutes pass between any two coffee breaks. Monocarp also wants to take these n coffee breaks in a minimum possible number of working days ( he doesn' t count days when he is not at work, and he doesn' t take coffee breaks on such days) . Take into account that more than d minutes pass between the end of any working day and the start of the following working day. For each of the n given minutes determine the day, during which Monocarp should take a coffee break in this minute. You have to minimize the number of days spent.",
    "input": "The first line contains three integers n , m , d ( 1 \u2264 n \u2264 2\u00b710^ 5, n \u2264 m \u2264 10^ 9, 1 \u2264 d \u2264 m) \u2014 the number of coffee breaks Monocarp wants to have, the length of each working day, and the minimum number of minutes between any two consecutive coffee breaks. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 m) , where a_ i is some minute when Monocarp wants to have a coffee break.",
    "output": "In the first line, write the minimum number of days required to make a coffee break in each of the n given minutes. In the second line, print n space separated integers. The i - th of integers should be the index of the day during which Monocarp should have a coffee break at minute a_ i . Days are numbered from 1 . If there are multiple optimal solutions, you may print any of them.",
    "note": "In the first example, Monocarp can take two coffee breaks during the first day ( during minutes 1 and 5 , 3 minutes will pass between these breaks) . One break during the second day ( at minute 2 ) , and one break during the third day ( at minute 3 ) . In the second example, Monocarp can determine the day of the break as follows: if the minute when he wants to take a break is odd, then this break is on the first day, if it is even, then this break is on the second day.",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1041C"
  },
  {
    "title": "Heist",
    "url": "https://codeforces.com/problemset/problem/1041/A",
    "history": "There was an electronic store heist last night. All keyboards which were in the store yesterday were numbered in ascending order from some integer number x . For example, if x = 4 and there were 3 keyboards in the store, then the devices had indices 4 , 5 and 6 , and if x = 10 and there were 7 of them then the keyboards had indices 10 , 11 , 12 , 13 , 14 , 15 and 16 . After the heist, only n keyboards remain, and they have indices a_ 1, a_ 2, . . . , a_ n . Calculate the minimum possible number of keyboards that have been stolen. The staff remember neither x nor the number of keyboards in the store before the heist.",
    "input": "The first line contains single integer n ( 1 \u2264 n \u2264 1 000) \u2014 the number of keyboards in the store that remained after the heist. The second line contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 the indices of the remaining keyboards. The integers a_ i are given in arbitrary order and are pairwise distinct.",
    "output": "Print the minimum possible number of keyboards that have been stolen if the staff remember neither x nor the number of keyboards in the store before the heist.",
    "note": "In the first example, if x= 8 then minimum number of stolen keyboards is equal to 2 . The keyboards with indices 9 and 11 were stolen during the heist. In the second example, if x= 4 then nothing was stolen during the heist.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1041A"
  },
  {
    "title": "Shashlik Cooking",
    "url": "https://codeforces.com/problemset/problem/1040/B",
    "history": "Long story short, shashlik is Miroslav' s favorite food. Shashlik is prepared on several skewers simultaneously. There are two states for each skewer: initial and turned over. This time Miroslav laid out n skewers parallel to each other, and enumerated them with consecutive integers from 1 to n in order from left to right. For better cooking, he puts them quite close to each other, so when he turns skewer number i , it leads to turning k closest skewers from each side of the skewer i , that is, skewers number i - k , i - k + 1 , . . . , i - 1 , i + 1 , . . . , i + k - 1 , i + k ( if they exist) . For example, let n = 6 and k = 1 . When Miroslav turns skewer number 3 , then skewers with numbers 2 , 3 , and 4 will come up turned over. If after that he turns skewer number 1 , then skewers number 1 , 3 , and 4 will be turned over, while skewer number 2 will be in the initial position ( because it is turned again) . As we said before, the art of cooking requires perfect timing, so Miroslav wants to turn over all n skewers with the minimal possible number of actions. For example, for the above example n = 6 and k = 1 , two turnings are sufficient: he can turn over skewers number 2 and 5 . Help Miroslav turn over all n skewers.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 1000 , 0 \u2264 k \u2264 1000 ) \u2014 the number of skewers and the number of skewers from each side that are turned in one step.",
    "output": "The first line should contain integer l \u2014 the minimum number of actions needed by Miroslav to turn over all n skewers. After than print l integers from 1 to n denoting the number of the skewer that is to be turned over at the corresponding step.",
    "note": "In the first example the first operation turns over skewers 1 , 2 and 3 , the second operation turns over skewers 4 , 5 , 6 and 7 . In the second example it is also correct to turn over skewers 2 and 5 , but turning skewers 2 and 4 , or 1 and 5 are incorrect solutions because the skewer 3 is in the initial state after these operations.",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1040B"
  },
  {
    "title": "Palindrome Dance",
    "url": "https://codeforces.com/problemset/problem/1040/A",
    "history": "A group of n dancers rehearses a performance for the closing ceremony. The dancers are arranged in a row, they' ve studied their dancing moves and can' t change positions. For some of them, a white dancing suit is already bought, for some of them \u2014 a black one, and for the rest the suit will be bought in the future. On the day when the suits were to be bought, the director was told that the participants of the olympiad will be happy if the colors of the suits on the scene will form a palindrome. A palindrome is a sequence that is the same when read from left to right and when read from right to left. The director liked the idea, and she wants to buy suits so that the color of the leftmost dancer' s suit is the same as the color of the rightmost dancer' s suit, the 2nd left is the same as 2nd right, and so on. The director knows how many burls it costs to buy a white suit, and how many burls to buy a black suit. You need to find out whether it is possible to buy suits to form a palindrome, and if it' s possible, what' s the minimal cost of doing so. Remember that dancers can not change positions, and due to bureaucratic reasons it is not allowed to buy new suits for the dancers who already have suits, even if it reduces the overall spending.",
    "input": "The first line contains three integers n , a , and b ( 1 \u2264 n \u2264 20 , 1 \u2264 a, b \u2264 100 ) \u2014 the number of dancers, the cost of a white suit, and the cost of a black suit. The next line contains n numbers c_ i , i - th of which denotes the color of the suit of the i - th dancer. Number 0 denotes the white color, 1 \u2014 the black color, and 2 denotes that a suit for this dancer is still to be bought.",
    "output": "If it is not possible to form a palindrome without swapping dancers and buying new suits for those who have one, then output - 1. Otherwise, output the minimal price to get the desired visual effect.",
    "note": "In the first sample, the cheapest way to obtain palindromic colors is to buy a black suit for the third from left dancer and a white suit for the rightmost dancer. In the second sample, the leftmost dancer' s suit already differs from the rightmost dancer' s suit so there is no way to obtain the desired coloring. In the third sample, all suits are already bought and their colors form a palindrome.",
    "topics": [
      "greedy"
    ],
    "id": "1040A"
  },
  {
    "title": "Timetable",
    "url": "https://codeforces.com/problemset/problem/1039/A",
    "history": "There are two bus stops denoted A and B, and there n buses that go from A to B every day. The shortest path from A to B takes t units of time but some buses might take longer paths. Moreover, buses are allowed to overtake each other during the route. At each station one can find a sorted list of moments of time when a bus is at this station. We denote this list as a_ 1 < a_ 2 < . . . < a_ n for stop A and as b_ 1 < b_ 2 < . . . < b_ n for stop B. The buses always depart from A and arrive to B according to the timetable, but the order in which the buses arrive may differ. Let' s call an order of arrivals valid if each bus arrives at least t units of time later than departs. It is known that for an order to be valid the latest possible arrival for the bus that departs at a_ i is b_ x_ i , i. e. x_ i - th in the timetable. In other words, for each i there exists such a valid order of arrivals that the bus departed i - th arrives x_ i - th ( and all other buses can arrive arbitrary) , but there is no valid order of arrivals in which the i - th departed bus arrives ( x_ i + 1) - th. Formally, let' s call a permutation p_ 1, p_ 2, . . . , p_ n valid, if b_ p_ i\u2265 a_ i + t for all i . Then x_ i is the maximum value of p_ i among all valid permutations. You are given the sequences a_ 1, a_ 2, . . . , a_ n and x_ 1, x_ 2, . . . , x_ n , but not the arrival timetable. Find out any suitable timetable for stop B b_ 1, b_ 2, . . . , b_ n or determine that there is no such timetable.",
    "input": "The first line of the input contains two integers n and t ( 1 \u2264 n \u2264 200 000 , 1 \u2264 t \u2264 10^ 18 ) \u2014 the number of buses in timetable for and the minimum possible travel time from stop A to stop B. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ 1 < a_ 2 < . . . < a_ n \u2264 10^ 18 ) , defining the moments of time when the buses leave stop A. The third line contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 n ) , the i - th of them stands for the maximum possible timetable position, at which the i - th bus leaving stop A can arrive at stop B.",
    "output": "If a solution exists, print \" Yes\" ( without quotes) in the first line of the output. In the second line print n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ 1 < b_ 2 < . . . < b_ n \u2264 3 \u00b7 10^ 18 ) . We can show that if there exists any solution, there exists a solution that satisfies such constraints on b_ i . If there are multiple valid answers you can print any of them. If there is no valid timetable, print \" No\" ( without quotes) in the only line of the output.",
    "note": "Consider the first example and the timetable b_ 1, b_ 2, . . . , b_ n from the output. To get x_ 1 = 2 the buses can arrive in the order ( 2, 1, 3) . To get x_ 2 = 2 and x_ 3 = 3 the buses can arrive in the order ( 1, 2, 3) . x_ 1 is not 3 , because the permutations ( 3, 1, 2) and ( 3, 2, 1) ( all in which the 1 - st bus arrives 3 - rd) are not valid ( sube buses arrive too early) , x_ 2 is not 3 because of similar reasons.",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1039A"
  },
  {
    "title": "Slime",
    "url": "https://codeforces.com/problemset/problem/1038/D",
    "history": "There are n slimes in a row. Each slime has an integer value ( possibly negative or zero) associated with it. Any slime can eat its adjacent slime ( the closest slime to its left or to its right, assuming that this slime exists) . When a slime with a value x eats a slime with a value y , the eaten slime disappears, and the value of the remaining slime changes to x - y . The slimes will eat each other until there is only one slime left. Find the maximum possible value of the last slime.",
    "input": "The first line of the input contains an integer n ( 1 \u2264 n \u2264 500 000 ) denoting the number of slimes. The next line contains n integers a_ i ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the value of i - th slime.",
    "output": "Print an only integer \u2014 the maximum possible value of the last slime.",
    "note": "In the first example, a possible way of getting the last slime with value 4 is: Second slime eats the third slime, the row now contains slimes 2, - 1, 1 Second slime eats the third slime, the row now contains slimes 2, - 2 First slime eats the second slime, the row now contains 4 In the second example, the first slime can keep eating slimes to its right to end up with a value of 4 .",
    "topics": [
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1038D"
  },
  {
    "title": "Gambling",
    "url": "https://codeforces.com/problemset/problem/1038/C",
    "history": "Two players A and B have a list of n integers each. They both want to maximize the subtraction between their score and their opponent' s score. In one turn, a player can either add to his score any element from his list ( assuming his list is not empty) , the element is removed from the list afterward. Or remove an element from his opponent' s list ( assuming his opponent' s list is not empty) . Note, that in case there are equal elements in the list only one of them will be affected in the operations above. For example, if there are elements { 1, 2, 2, 3} in a list and you decided to choose 2 for the next turn, only a single instance of 2 will be deleted ( and added to the score, if necessary) . The player A starts the game and the game stops when both lists are empty. Find the difference between A' s score and B' s score at the end of the game, if both of the players are playing optimally. Optimal play between two players means that both players choose the best possible strategy to achieve the best possible outcome for themselves. In this problem, it means that each player, each time makes a move, which maximizes the final difference between his score and his opponent' s score, knowing that the opponent is doing the same.",
    "input": "The first line of input contains an integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the sizes of the list. The second line contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 6 ) , describing the list of the player A, who starts the game. The third line contains n integers b_ i ( 1 \u2264 b_ i \u2264 10^ 6 ) , describing the list of the player B.",
    "output": "Output the difference between A' s score and B' s score ( A- B ) if both of them are playing optimally.",
    "note": "In the first example, the game could have gone as follows: A removes 5 from B' s list. B removes 4 from A' s list. A takes his 1 . B takes his 1 . Hence, A' s score is 1 , B' s score is 1 and difference is 0 . There is also another optimal way of playing: A removes 5 from B' s list. B removes 4 from A' s list. A removes 1 from B' s list. B removes 1 from A' s list. The difference in the scores is still 0 . In the second example, irrespective of the moves the players make, they will end up with the same number of numbers added to their score, so the difference will be 0 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1038C"
  },
  {
    "title": "Equalize",
    "url": "https://codeforces.com/problemset/problem/1037/C",
    "history": "You are given two binary strings a and b of the same length. You can perform the following two operations on the string a : Swap any two bits at indices i and j respectively ( 1 \u2264 i, j \u2264 n ) , the cost of this operation is | i - j| , that is, the absolute difference between i and j . Select any arbitrary index i ( 1 \u2264 i \u2264 n ) and flip ( change 0 to 1 or 1 to 0 ) the bit at this index. The cost of this operation is 1 . Find the minimum cost to make the string a equal to b . It is not allowed to modify string b .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the length of the strings a and b . The second and third lines contain strings a and b respectively. Both strings a and b have length n and contain only ' 0' and ' 1' .",
    "output": "Output the minimum cost to make the string a equal to b .",
    "note": "In the first example, one of the optimal solutions is to flip index 1 and index 3 , the string a changes in the following way: \" 100\" \u2192 \" 000\" \u2192 \" 001\" . The cost is 1 + 1 = 2 . The other optimal solution is to swap bits and indices 1 and 3 , the string a changes then \" 100\" \u2192 \" 001\" , the cost is also | 1 - 3| = 2 . In the second example, the optimal solution is to swap bits at indices 2 and 3 , the string a changes as \" 0101\" \u2192 \" 0011\" . The cost is | 2 - 3| = 1 .",
    "topics": [
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1037C"
  },
  {
    "title": "Reach Median",
    "url": "https://codeforces.com/problemset/problem/1037/B",
    "history": "You are given an array a of n integers and an integer s . It is guaranteed that n is odd. In one operation you can either increase or decrease any single element by one. Calculate the minimum number of operations required to make the median of the array being equal to s . The median of the array with odd length is the value of the element which is located on the middle position after the array is sorted. For example, the median of the array 6, 5, 8 is equal to 6 , since if we sort this array we will get 5, 6, 8 , and 6 is located on the middle position.",
    "input": "The first line contains two integers n and s ( 1\u2264 n\u2264 2\u00b7 10^ 5- 1 , 1\u2264 s\u2264 10^ 9 ) \u2014 the length of the array and the required value of median. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1\u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . It is guaranteed that n is odd.",
    "output": "In a single line output the minimum number of operations to make the median being equal to s .",
    "note": "In the first sample, 6 can be increased twice. The array will transform to 8, 5, 8 , which becomes 5, 8, 8 after sorting, hence the median is equal to 8 . In the second sample, 19 can be increased once and 15 can be increased five times. The array will become equal to 21, 20, 12, 11, 20, 20, 12 . If we sort this array we get 11, 12, 12, 20, 20, 20, 21 , this way the median is 20 .",
    "topics": [
      "greedy"
    ],
    "id": "1037B"
  },
  {
    "title": "Packets",
    "url": "https://codeforces.com/problemset/problem/1037/A",
    "history": "You have n coins, each of the same value of 1 . Distribute them into packets such that any amount x ( 1 \u2264 x \u2264 n ) can be formed using some ( possibly one or all) number of these packets. Each packet may only be used entirely or not used at all. No packet may be used more than once in the formation of the single x , however it may be reused for the formation of other x ' s. Find the minimum number of packets in such a distribution.",
    "input": "The only line contains a single integer n ( 1 \u2264 n \u2264 10^ 9 ) \u2014 the number of coins you have.",
    "output": "Output a single integer \u2014 the minimum possible number of packets, satisfying the condition above.",
    "note": "In the first example, three packets with 1 , 2 and 3 coins can be made to get any amount x ( 1\u2264 x\u2264 6 ) . To get 1 use the packet with 1 coin. To get 2 use the packet with 2 coins. To get 3 use the packet with 3 coins. To get 4 use packets with 1 and 3 coins. To get 5 use packets with 2 and 3 coins To get 6 use all packets. In the second example, two packets with 1 and 1 coins can be made to get any amount x ( 1\u2264 x\u2264 2 ) .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1037A"
  },
  {
    "title": "Vasya and Arrays",
    "url": "https://codeforces.com/problemset/problem/1036/D",
    "history": "Vasya has two arrays A and B of lengths n and m , respectively. He can perform the following operation arbitrary number of times ( possibly zero) : he takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment. For example, from the array [ 1, 10, 100, 1000, 10000] Vasya can obtain array [ 1, 1110, 10000] , and from array [ 1, 2, 3] Vasya can obtain array [ 6] . Two arrays A and B are considered equal if and only if they have the same length and for each valid i A_ i = B_ i . Vasya wants to perform some of these operations on array A , some on array B , in such a way that arrays A and B become equal. Moreover, the lengths of the resulting arrays should be maximal possible. Help Vasya to determine the maximum length of the arrays that he can achieve or output that it is impossible to make arrays A and B equal.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5) \u2014 the length of the first array. The second line contains n integers a_ 1, a_ 2, \u22ef, a_ n ( 1 \u2264 a_ i \u2264 10^ 9) \u2014 elements of the array A . The third line contains a single integer m ( 1 \u2264 m \u2264 3 \u00b7 10^ 5) \u2014 the length of the second array. The fourth line contains m integers b_ 1, b_ 2, \u22ef, b_ m ( 1 \u2264 b_ i \u2264 10^ 9) - elements of the array B .",
    "output": "Print a single integer \u2014 the maximum length of the resulting arrays after some operations were performed on arrays A and B in such a way that they became equal. If there is no way to make array equal, print \" - 1\" .",
    "note": "",
    "topics": [
      "greedy",
      "two pointers"
    ],
    "id": "1036D"
  },
  {
    "title": "Minimum path",
    "url": "https://codeforces.com/problemset/problem/1031/D",
    "history": "You are given a matrix of size n \u00d7 n filled with lowercase English letters. You can change no more than k letters in this matrix. Consider all paths from the upper left corner to the lower right corner that move from a cell to its neighboring cell to the right or down. Each path is associated with the string that is formed by all the letters in the cells the path visits. Thus, the length of each string is 2n - 1 . Find the lexicographically smallest string that can be associated with a path after changing letters in at most k cells of the matrix. A string a is lexicographically smaller than a string b , if the first different letter in a and b is smaller in a .",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 2000 , 0 \u2264 k \u2264 n^ 2 ) \u2014 the size of the matrix and the number of letters you can change. Each of the next n lines contains a string of n lowercase English letters denoting one row of the matrix.",
    "output": "Output the lexicographically smallest string that can be associated with some valid path after changing no more than k letters in the matrix.",
    "note": "In the first sample test case it is possible to change letters ' b' in cells ( 2, 1) and ( 3, 1) to ' a' , then the minimum path contains cells ( 1, 1) , ( 2, 1) , ( 3, 1) , ( 4, 1) , ( 4, 2) , ( 4, 3) , ( 4, 4) . The first coordinate corresponds to the row and the second coordinate corresponds to the column.",
    "topics": [
      "greedy"
    ],
    "id": "1031D"
  },
  {
    "title": "Cram Time",
    "url": "https://codeforces.com/problemset/problem/1031/C",
    "history": "In a galaxy far, far away Lesha the student has just got to know that he has an exam in two days. As always, he hasn' t attended any single class during the previous year, so he decided to spend the remaining time wisely. Lesha knows that today he can study for at most a hours, and he will have b hours to study tomorrow. Note that it is possible that on his planet there are more hours in a day than on Earth. Lesha knows that the quality of his knowledge will only depend on the number of lecture notes he will read. He has access to an infinite number of notes that are enumerated with positive integers, but he knows that he can read the first note in one hour, the second note in two hours and so on. In other words, Lesha can read the note with number k in k hours. Lesha can read the notes in arbitrary order, however, he can' t start reading a note in the first day and finish its reading in the second day. Thus, the student has to fully read several lecture notes today, spending at most a hours in total, and fully read several lecture notes tomorrow, spending at most b hours in total. What is the maximum number of notes Lesha can read in the remaining time? Which notes should he read in the first day, and which \u2014 in the second?",
    "input": "The only line of input contains two integers a and b ( 0 \u2264 a, b \u2264 10^ 9 ) \u2014 the number of hours Lesha has today and the number of hours Lesha has tomorrow.",
    "output": "In the first line print a single integer n ( 0 \u2264 n \u2264 a ) \u2014 the number of lecture notes Lesha has to read in the first day. In the second line print n distinct integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 a ) , the sum of all p_ i should not exceed a . In the third line print a single integer m ( 0 \u2264 m \u2264 b ) \u2014 the number of lecture notes Lesha has to read in the second day. In the fourth line print m distinct integers q_ 1, q_ 2, . . . , q_ m ( 1 \u2264 q_ i \u2264 b ) , the sum of all q_ i should not exceed b . All integers p_ i and q_ i should be distinct. The sum n + m should be largest possible.",
    "note": "In the first example Lesha can read the third note in 3 hours in the first day, and the first and the second notes in one and two hours correspondingly in the second day, spending 3 hours as well. Note that Lesha can make it the other way round, reading the first and the second notes in the first day and the third note in the second day. In the second example Lesha should read the third and the sixth notes in the first day, spending 9 hours in total. In the second day Lesha should read the first, second fourth and fifth notes, spending 12 hours in total.",
    "topics": [
      "greedy"
    ],
    "id": "1031C"
  },
  {
    "title": "Tree with Small Distances",
    "url": "https://codeforces.com/problemset/problem/1029/E",
    "history": "You are given an undirected tree consisting of n vertices. An undirected tree is a connected undirected graph with n - 1 edges. Your task is to add the minimum number of edges in such a way that the length of the shortest path from the vertex 1 to any other vertex is at most 2 . Note that you are not allowed to add loops and multiple edges.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. The following n - 1 lines contain edges: edge i is given as a pair of vertices u_ i, v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ) . It is guaranteed that the given edges form a tree. It is guaranteed that there are no loops and multiple edges in the given edges.",
    "output": "Print a single integer \u2014 the minimum number of edges you have to add in order to make the shortest distance from the vertex 1 to any other vertex at most 2 . Note that you are not allowed to add loops and multiple edges.",
    "note": "The tree corresponding to the first example: The answer is 2 , some of the possible answers are the following: [ ( 1, 5) , ( 1, 6) ] , [ ( 1, 4) , ( 1, 7) ] , [ ( 1, 6) , ( 1, 7) ] . The tree corresponding to the second example: The answer is 0 . The tree corresponding to the third example: The answer is 1 , only one possible way to reach it is to add the edge ( 1, 3) .",
    "topics": [
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1029E"
  },
  {
    "title": "Maximal Intersection",
    "url": "https://codeforces.com/problemset/problem/1029/C",
    "history": "You are given n segments on a number line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide. The intersection of a sequence of segments is such a maximal set of points ( not necesserily having integer coordinates) that each point lies within every segment from the sequence. If the resulting set isn' t empty, then it always forms some continuous segment. The length of the intersection is the length of the resulting segment or 0 in case the intersection is an empty set. For example, the intersection of segments [ 1; 5] and [ 3; 10] is [ 3; 5] ( length 2 ) , the intersection of segments [ 1; 5] and [ 5; 7] is [ 5; 5] ( length 0 ) and the intersection of segments [ 1; 5] and [ 6; 6] is an empty set ( length 0 ) . Your task is to remove exactly one segment from the given sequence in such a way that the intersection of the remaining ( n - 1) segments has the maximal possible length.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 3 \u00b7 10^ 5 ) \u2014 the number of segments in the sequence. Each of the next n lines contains two integers l_ i and r_ i ( 0 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) \u2014 the description of the i - th segment.",
    "output": "Print a single integer \u2014 the maximal possible length of the intersection of ( n - 1) remaining segments after you remove exactly one segment from the sequence.",
    "note": "In the first example you should remove the segment [ 3; 3] , the intersection will become [ 2; 3] ( length 1 ) . Removing any other segment will result in the intersection [ 3; 3] ( length 0 ) . In the second example you should remove the segment [ 1; 3] or segment [ 2; 6] , the intersection will become [ 2; 4] ( length 2 ) or [ 1; 3] ( length 2 ) , respectively. Removing any other segment will result in the intersection [ 2; 3] ( length 1 ) . In the third example the intersection will become an empty set no matter the segment you remove. In the fourth example you will get the intersection [ 3; 10] ( length 7 ) if you remove the segment [ 1; 5] or the intersection [ 1; 5] ( length 4 ) if you remove the segment [ 3; 10] .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1029C"
  },
  {
    "title": "Creating the Contest",
    "url": "https://codeforces.com/problemset/problem/1029/B",
    "history": "You are given a problemset consisting of n problems. The difficulty of the i - th problem is a_ i . It is guaranteed that all difficulties are distinct and are given in the increasing order. You have to assemble the contest which consists of some problems of the given problemset. In other words, the contest you have to assemble should be a subset of problems ( not necessary consecutive) of the given problemset. There is only one condition that should be satisfied: for each problem but the hardest one ( the problem with the maximum difficulty) there should be a problem with the difficulty greater than the difficulty of this problem but not greater than twice the difficulty of this problem. In other words, let a_ i_ 1, a_ i_ 2, . . . , a_ i_ p be the difficulties of the selected problems in increasing order. Then for each j from 1 to p- 1 a_ i_ j + 1\u2264 a_ i_ j\u00b7 2 should hold. It means that the contest consisting of only one problem is always valid. Among all contests satisfying the condition above you have to assemble one with the maximum number of problems. Your task is to find this number of problems.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems in the problemset. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 difficulties of the problems. It is guaranteed that difficulties of the problems are distinct and are given in the increasing order.",
    "output": "Print a single integer \u2014 maximum number of problems in the contest satisfying the condition in the problem statement.",
    "note": "Description of the first example: there are 10 valid contests consisting of 1 problem, 10 valid contests consisting of 2 problems ( [ 1, 2] , [ 5, 6] , [ 5, 7] , [ 5, 10] , [ 6, 7] , [ 6, 10] , [ 7, 10] , [ 21, 23] , [ 21, 24] , [ 23, 24] ) , 5 valid contests consisting of 3 problems ( [ 5, 6, 7] , [ 5, 6, 10] , [ 5, 7, 10] , [ 6, 7, 10] , [ 21, 23, 24] ) and a single valid contest consisting of 4 problems ( [ 5, 6, 7, 10] ) . In the second example all the valid contests consist of 1 problem. In the third example are two contests consisting of 3 problems: [ 4, 7, 12] and [ 100, 150, 199] .",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1029B"
  },
  {
    "title": "Order book",
    "url": "https://codeforces.com/problemset/problem/1028/D",
    "history": "Let' s consider a simplified version of order book of some stock. The order book is a list of orders ( offers) from people that want to buy or sell one unit of the stock, each order is described by direction ( BUY or SELL) and price. At every moment of time, every SELL offer has higher price than every BUY offer. In this problem no two ever existed orders will have the same price. The lowest- price SELL order and the highest- price BUY order are called the best offers, marked with black frames on the picture below. The presented order book says that someone wants to sell the product at price 12 and it' s the best SELL offer because the other two have higher prices. The best BUY offer has price 10 . There are two possible actions in this orderbook: Somebody adds a new order of some direction with some price. Somebody accepts the best possible SELL or BUY offer ( makes a deal) . It' s impossible to accept not the best SELL or BUY offer ( to make a deal at worse price) . After someone accepts the offer, it is removed from the orderbook forever. It is allowed to add new BUY order only with prices less than the best SELL offer ( if you want to buy stock for higher price, then instead of adding an order you should accept the best SELL offer) . Similarly, one couldn' t add a new SELL order with price less or equal to the best BUY offer. For example, you can' t add a new offer \" SELL 20 \" if there is already an offer \" BUY 20 \" or \" BUY 25 \" \u2014 in this case you just accept the best BUY offer. You have a damaged order book log ( in the beginning the are no orders in book) . Every action has one of the two types: \" ADD p \" denotes adding a new order with price p and unknown direction. The order must not contradict with orders still not removed from the order book. \" ACCEPT p \" denotes accepting an existing best offer with price p and unknown direction. The directions of all actions are lost. Information from the log isn' t always enough to determine these directions. Count the number of ways to correctly restore all ADD action directions so that all the described conditions are satisfied at any moment. Since the answer could be large, output it modulo 10^ 9 + 7 . If it is impossible to correctly restore directions, then output 0 .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 363 304 ) \u2014 the number of actions in the log. Each of the next n lines contains a string \" ACCEPT\" or \" ADD\" and an integer p ( 1 \u2264 p \u2264 308 983 066 ) , describing an action type and price. All ADD actions have different prices. For ACCEPT action it is guaranteed that the order with the same price has already been added but has not been accepted yet.",
    "output": "Output the number of ways to restore directions of ADD actions modulo 10^ 9 + 7 .",
    "note": "In the first example each of orders may be BUY or SELL. In the second example the order with price 1 has to be BUY order, the order with the price 3 has to be SELL order.",
    "topics": [
      "combinatorics",
      "data structures",
      "greedy"
    ],
    "id": "1028D"
  },
  {
    "title": "Minimum Value Rectangle",
    "url": "https://codeforces.com/problemset/problem/1027/C",
    "history": "You have n sticks of the given lengths. Your task is to choose exactly four of them in such a way that they can form a rectangle. No sticks can be cut to pieces, each side of the rectangle must be formed by a single stick. No stick can be chosen multiple times. It is guaranteed that it is always possible to choose such sticks. Let S be the area of the rectangle and P be the perimeter of the rectangle. The chosen rectangle should have the value P^ 2/ S minimal possible. The value is taken without any rounding. If there are multiple answers, print any of them. Each testcase contains several lists of sticks, for each of them you are required to solve the problem separately.",
    "input": "The first line contains a single integer T ( T \u2265 1 ) \u2014 the number of lists of sticks in the testcase. Then 2T lines follow \u2014 lines ( 2i - 1) and 2i of them describe the i - th list. The first line of the pair contains a single integer n ( 4 \u2264 n \u2264 10^ 6 ) \u2014 the number of sticks in the i - th list. The second line of the pair contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ j \u2264 10^ 4 ) \u2014 lengths of the sticks in the i - th list. It is guaranteed that for each list there exists a way to choose four sticks so that they form a rectangle. The total number of sticks in all T lists doesn' t exceed 10^ 6 in each testcase.",
    "output": "Print T lines. The i - th line should contain the answer to the i - th list of the input. That is the lengths of the four sticks you choose from the i - th list, so that they form a rectangle and the value P^ 2/ S of this rectangle is minimal possible. You can print these four lengths in arbitrary order. If there are multiple answers, print any of them.",
    "note": "There is only one way to choose four sticks in the first list, they form a rectangle with sides 2 and 7 , its area is 2 \u00b7 7 = 14 , perimeter is 2( 2 + 7) = 18 . 18^ 2/ 14\u2248 23. 143 . The second list contains subsets of four sticks that can form rectangles with sides ( 1, 2) , ( 2, 8) and ( 1, 8) . Their values are 6^ 2/ 2 = 18 , 20^ 2/ 16 = 25 and 18^ 2/ 8 = 40. 5 , respectively. The minimal one of them is the rectangle ( 1, 2) . You can choose any four of the 5 given sticks from the third list, they will form a square with side 5 , which is still a rectangle with sides ( 5, 5) .",
    "topics": [
      "greedy"
    ],
    "id": "1027C"
  },
  {
    "title": "Weakened Common Divisor",
    "url": "https://codeforces.com/problemset/problem/1025/B",
    "history": "During the research on properties of the greatest common divisor ( GCD) of a set of numbers, Ildar, a famous mathematician, introduced a brand new concept of the weakened common divisor ( WCD) of a list of pairs of integers. For a given list of pairs of integers ( a_ 1, b_ 1) , ( a_ 2, b_ 2) , . . . , ( a_ n, b_ n) their WCD is arbitrary integer greater than 1 , such that it divides at least one element in each pair. WCD may not exist for some lists. For example, if the list looks like [ ( 12, 15) , ( 25, 18) , ( 10, 24) ] , then their WCD can be equal to 2 , 3 , 5 or 6 ( each of these numbers is strictly greater than 1 and divides at least one number in each pair) . You' re currently pursuing your PhD degree under Ildar' s mentorship, and that' s why this problem was delegated to you. Your task is to calculate WCD efficiently.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 150 000 ) \u2014 the number of pairs. Each of the next n lines contains two integer values a_ i , b_ i ( 2 \u2264 a_ i, b_ i \u2264 2 \u00b7 10^ 9 ) .",
    "output": "Print a single integer \u2014 the WCD of the set of pairs. If there are multiple possible answers, output any; if there is no answer, print - 1 .",
    "note": "In the first example the answer is 6 since it divides 18 from the first pair, 24 from the second and 12 from the third ones. Note that other valid answers will also be accepted. In the second example there are no integers greater than 1 satisfying the conditions. In the third example one of the possible answers is 5 . Note that, for example, 15 is also allowed, but it' s not necessary to maximize the output.",
    "topics": [
      "brute force",
      "greedy",
      "number theory"
    ],
    "id": "1025B"
  },
  {
    "title": "Bracket Subsequence",
    "url": "https://codeforces.com/problemset/problem/1023/C",
    "history": "A bracket sequence is a string containing only characters \" ( \" and \" ) \" . A regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters \" 1\" and \" + \" between the original characters of the sequence. For example, bracket sequences \" ( ) ( ) \" and \" ( ( ) ) \" are regular ( the resulting expressions are: \" ( 1) + ( 1) \" and \" ( ( 1+ 1) + 1) \" ) , and \" ) ( \" , \" ( \" and \" ) \" are not. Subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. You are given a regular bracket sequence s and an integer number k . Your task is to find a regular bracket sequence of length exactly k such that it is also a subsequence of s . It is guaranteed that such sequence always exists.",
    "input": "The first line contains two integers n and k ( 2 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 , both n and k are even) \u2014 the length of s and the length of the sequence you are asked to find. The second line is a string s \u2014 regular bracket sequence of length n .",
    "output": "Print a single string \u2014 a regular bracket sequence of length exactly k such that it is also a subsequence of s . It is guaranteed that such sequence always exists.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1023C"
  },
  {
    "title": "Elections",
    "url": "https://codeforces.com/problemset/problem/1019/A",
    "history": "As you know, majority of students and teachers of Summer Informatics School live in Berland for the most part of the year. Since corruption there is quite widespread, the following story is not uncommon. Elections are coming. You know the number of voters and the number of parties \u2014 n and m respectively. For each voter you know the party he is going to vote for. However, he can easily change his vote given a certain amount of money. In particular, if you give i - th voter c_ i bytecoins you can ask him to vote for any other party you choose. The United Party of Berland has decided to perform a statistical study \u2014 you need to calculate the minimum number of bytecoins the Party needs to spend to ensure its victory. In order for a party to win the elections, it needs to receive strictly more votes than any other party.",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n, m \u2264 3000 ) \u2014 the number of voters and the number of parties respectively. Each of the following n lines contains two integers p_ i and c_ i ( 1 \u2264 p_ i \u2264 m , 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the index of this voter' s preferred party and the number of bytecoins needed for him to reconsider his decision. The United Party of Berland has the index 1 .",
    "output": "Print a single number \u2014 the minimum number of bytecoins needed for The United Party of Berland to win the elections.",
    "note": "In the first sample, The United Party wins the elections even without buying extra votes. In the second sample, The United Party can buy the votes of the first and the fourth voter. This way The Party gets two votes, while parties 3 , 4 and 5 get one vote and party number 2 gets no votes. In the third sample, The United Party can buy the votes of the first three voters and win, getting three votes against two votes of the fifth party.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "1019A"
  },
  {
    "title": "The Phone Number",
    "url": "https://codeforces.com/problemset/problem/1017/C",
    "history": "Mrs. Smith is trying to contact her husband, John Smith, but she forgot the secret phone number! The only thing Mrs. Smith remembered was that any permutation of n can be a secret phone number. Only those permutations that minimize secret value might be the phone of her husband. The sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once. The secret value of a phone number is defined as the sum of the length of the longest increasing subsequence ( LIS) and length of the longest decreasing subsequence ( LDS) . A subsequence a_ i_ 1, a_ i_ 2, . . . , a_ i_ k where 1\u2264 i_ 1 < i_ 2 < . . . < i_ k\u2264 n is called increasing if a_ i_ 1 < a_ i_ 2 < a_ i_ 3 < . . . < a_ i_ k . If a_ i_ 1 > a_ i_ 2 > a_ i_ 3 > . . . > a_ i_ k , a subsequence is called decreasing. An increasing/ decreasing subsequence is called longest if it has maximum length among all increasing/ decreasing subsequences. For example, if there is a permutation [ 6, 4, 1, 7, 2, 3, 5] , LIS of this permutation will be [ 1, 2, 3, 5] , so the length of LIS is equal to 4 . LDS can be [ 6, 4, 1] , [ 6, 4, 2] , or [ 6, 4, 3] , so the length of LDS is 3 . Note, the lengths of LIS and LDS can be different. So please help Mrs. Smith to find a permutation that gives a minimum sum of lengths of LIS and LDS.",
    "input": "The only line contains one integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of permutation that you need to build.",
    "output": "Print a permutation that gives a minimum sum of lengths of LIS and LDS. If there are multiple answers, print any.",
    "note": "In the first sample, you can build a permutation [ 3, 4, 1, 2] . LIS is [ 3, 4] ( or [ 1, 2] ) , so the length of LIS is equal to 2 . LDS can be ony of [ 3, 1] , [ 4, 2] , [ 3, 2] , or [ 4, 1] . The length of LDS is also equal to 2 . The sum is equal to 4 . Note that [ 3, 4, 1, 2] is not the only permutation that is valid. In the second sample, you can build a permutation [ 2, 1] . LIS is [ 1] ( or [ 2] ) , so the length of LIS is equal to 1 . LDS is [ 2, 1] , so the length of LDS is equal to 2 . The sum is equal to 3 . Note that permutation [ 1, 2] is also valid.",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1017C"
  },
  {
    "title": "Death Note",
    "url": "https://codeforces.com/problemset/problem/1016/A",
    "history": "You received a notebook which is called Death Note. This notebook has infinite number of pages. A rule is written on the last page ( huh) of this notebook. It says: \" You have to write names in this notebook during n consecutive days. During the i - th day you have to write exactly a_ i names. \" . You got scared ( of course you got scared, who wouldn' t get scared if he just receive a notebook which is named Death Note with a some strange rule written in it? ) . Of course, you decided to follow this rule. When you calmed down, you came up with a strategy how you will write names in the notebook. You have calculated that each page of the notebook can contain exactly m names. You will start writing names from the first page. You will write names on the current page as long as the limit on the number of names on this page is not exceeded. When the current page is over, you turn the page. Note that you always turn the page when it ends, it doesn' t matter if it is the last day or not. If after some day the current page still can hold at least one name, during the next day you will continue writing the names from the current page. Now you are interested in the following question: how many times will you turn the page during each day? You are interested in the number of pages you will turn each day from 1 to n .",
    "input": "The first line of the input contains two integers n , m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i means the number of names you will write in the notebook during the i - th day.",
    "output": "Print exactly n integers t_ 1, t_ 2, . . . , t_ n , where t_ i is the number of times you will turn the page during the i - th day.",
    "note": "In the first example pages of the Death Note will look like this [ 1, 1, 1, 2, 2] , [ 2, 2, 2, 2, 2] , [ 3, 3, 3, 3, 3] , [ 3, 3, 3, 3] . Each number of the array describes during which day name on the corresponding position will be written. It is easy to see that you should turn the first and the second page during the second day and the third page during the third day.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1016A"
  },
  {
    "title": "Stars Drawing (Hard Edition)",
    "url": "https://codeforces.com/problemset/problem/1015/E2",
    "history": "A star is a figure of the following type: an asterisk character ' * ' in the center of the figure and four rays ( to the left, right, top, bottom) of the same positive length. The size of a star is the length of its rays. The size of a star must be a positive number ( i. e. rays of length 0 are not allowed) . Let' s consider empty cells are denoted by ' . ' , then the following figures are stars: The leftmost figure is a star of size 1 , the middle figure is a star of size 2 and the rightmost figure is a star of size 3 . You are given a rectangular grid of size n \u00d7 m consisting only of asterisks ' * ' and periods ( dots) ' . ' . Rows are numbered from 1 to n , columns are numbered from 1 to m . Your task is to draw this grid using any number of stars or find out that it is impossible. Stars can intersect, overlap or even coincide with each other. The number of stars in the output can' t exceed n \u00b7 m . Each star should be completely inside the grid. You can use stars of same and arbitrary sizes. In this problem, you do not need to minimize the number of stars. Just find any way to draw the given grid with at most n \u00b7 m stars.",
    "input": "The first line of the input contains two integers n and m ( 3 \u2264 n, m \u2264 1000 ) \u2014 the sizes of the given grid. The next n lines contains m characters each, the i - th line describes the i - th row of the grid. It is guaranteed that grid consists of characters ' * ' and ' . ' only.",
    "output": "If it is impossible to draw the given grid using stars only, print \" - 1\" . Otherwise in the first line print one integer k ( 0 \u2264 k \u2264 n \u00b7 m ) \u2014 the number of stars needed to draw the given grid. The next k lines should contain three integers each \u2014 x_ j , y_ j and s_ j , where x_ j is the row index of the central star character, y_ j is the column index of the central star character and s_ j is the size of the star. Each star should be completely inside the grid.",
    "note": "In the first example the output 23 4 13 5 2is also correct.",
    "topics": [
      "binary search",
      "dp",
      "greedy"
    ],
    "id": "1015E2"
  },
  {
    "title": "Stars Drawing (Easy Edition)",
    "url": "https://codeforces.com/problemset/problem/1015/E1",
    "history": "A star is a figure of the following type: an asterisk character ' * ' in the center of the figure and four rays ( to the left, right, top, bottom) of the same positive length. The size of a star is the length of its rays. The size of a star must be a positive number ( i. e. rays of length 0 are not allowed) . Let' s consider empty cells are denoted by ' . ' , then the following figures are stars: The leftmost figure is a star of size 1 , the middle figure is a star of size 2 and the rightmost figure is a star of size 3 . You are given a rectangular grid of size n \u00d7 m consisting only of asterisks ' * ' and periods ( dots) ' . ' . Rows are numbered from 1 to n , columns are numbered from 1 to m . Your task is to draw this grid using any number of stars or find out that it is impossible. Stars can intersect, overlap or even coincide with each other. The number of stars in the output can' t exceed n \u00b7 m . Each star should be completely inside the grid. You can use stars of same and arbitrary sizes. In this problem, you do not need to minimize the number of stars. Just find any way to draw the given grid with at most n \u00b7 m stars.",
    "input": "The first line of the input contains two integers n and m ( 3 \u2264 n, m \u2264 100 ) \u2014 the sizes of the given grid. The next n lines contains m characters each, the i - th line describes the i - th row of the grid. It is guaranteed that grid consists of characters ' * ' and ' . ' only.",
    "output": "If it is impossible to draw the given grid using stars only, print \" - 1\" . Otherwise in the first line print one integer k ( 0 \u2264 k \u2264 n \u00b7 m ) \u2014 the number of stars needed to draw the given grid. The next k lines should contain three integers each \u2014 x_ j , y_ j and s_ j , where x_ j is the row index of the central star character, y_ j is the column index of the central star character and s_ j is the size of the star. Each star should be completely inside the grid.",
    "note": "In the first example the output 23 4 13 5 2is also correct.",
    "topics": [
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1015E1"
  },
  {
    "title": "Walking Between Houses",
    "url": "https://codeforces.com/problemset/problem/1015/D",
    "history": "There are n houses in a row. They are numbered from 1 to n in order from left to right. Initially you are in the house 1 . You have to perform k moves to other house. In one move you go from your current house to some other house. You can' t stay where you are ( i. e. , in each move the new house differs from the current house) . If you go from the house x to the house y , the total distance you walked increases by | x- y| units of distance, where | a| is the absolute value of a . It is possible to visit the same house multiple times ( but you can' t visit the same house in sequence) . Your goal is to walk exactly s units of distance in total. If it is impossible, print \" NO\" . Otherwise print \" YES\" and any of the ways to do that. Remember that you should do exactly k moves.",
    "input": "The first line of the input contains three integers n , k , s ( 2 \u2264 n \u2264 10^ 9 , 1 \u2264 k \u2264 2 \u00b7 10^ 5 , 1 \u2264 s \u2264 10^ 18 ) \u2014 the number of houses, the number of moves and the total distance you want to walk.",
    "output": "If you cannot perform k moves with total walking distance equal to s , print \" NO\" . Otherwise print \" YES\" on the first line and then print exactly k integers h_ i ( 1 \u2264 h_ i \u2264 n ) on the second line, where h_ i is the house you visit on the i - th move. For each j from 1 to k- 1 the following condition should be satisfied: h_ j h_ j + 1 . Also h_ 1 1 should be satisfied.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1015D"
  },
  {
    "title": "And",
    "url": "https://codeforces.com/problemset/problem/1013/B",
    "history": "There is an array with n elements a1, a2, . . . , an and the number x. In one operation you can select some i ( 1 \u2264 i \u2264 n) and replace element ai with ai x, where denotes the bitwise and operation. You want the array to have at least two equal elements after applying some operations ( possibly, none) . In other words, there should be at least two distinct indices i = \u0338 j such that ai = aj. Determine whether it is possible to achieve and, if possible, the minimal number of operations to apply.",
    "input": "The first line contains integers n and x ( 2 \u2264 n \u2264 100 000, 1 \u2264 x \u2264 100 000) , number of elements in the array and the number to and with. The second line contains n integers ai ( 1 \u2264 ai \u2264 100 000) , the elements of the array.",
    "output": "Print a single integer denoting the minimal number of operations to do, or - 1, if it is impossible.",
    "note": "In the first example one can apply the operation to the last element of the array. That replaces 7 with 3, so we achieve the goal in one move. In the second example the array already has two equal elements. In the third example applying the operation won' t change the array at all, so it is impossible to make some pair of elements equal.",
    "topics": [
      "greedy"
    ],
    "id": "1013B"
  },
  {
    "title": "Stages",
    "url": "https://codeforces.com/problemset/problem/1011/A",
    "history": "Natasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string \u2014 concatenation of letters, which correspond to the stages. There are n stages available. The rocket must contain exactly k of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet ( skipping one letter in between, or even more) . For example, after letter ' c' can' t go letters ' a' , ' b' , ' c' and ' d' , but can go letters ' e' , ' f' , . . . , ' z' . For the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage ' a ' weighs one ton, ' b ' weighs two tons, and' z' \u2014 26 tons. Build the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.",
    "input": "The first line of input contains two integers \u2014 n and k ( 1 \u2264 k \u2264 n \u2264 50 ) \u2013 the number of available stages and the number of stages to use in the rocket. The second line contains string s , which consists of exactly n lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.",
    "output": "Print a single integer \u2014 the minimal total weight of the rocket or - 1, if it is impossible to build the rocket at all.",
    "note": "In the first example, the following rockets satisfy the condition: \" adx\" ( weight is 1+ 4+ 24= 29 ) ; \" ady\" ( weight is 1+ 4+ 25= 30 ) ; \" bdx\" ( weight is 2+ 4+ 24= 30 ) ; \" bdy\" ( weight is 2+ 4+ 25= 31 ) . Rocket \" adx\" has the minimal weight, so the answer is 29 . In the second example, target rocket is \" belo\" . Its weight is 2+ 5+ 12+ 15= 34 . In the third example, n= k= 2 , so the rocket must have both stages: ' a' and ' b' . This rocket doesn' t satisfy the condition, because these letters are adjacent in the alphabet. Answer is - 1.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1011A"
  },
  {
    "title": "Allowed Letters",
    "url": "https://codeforces.com/problemset/problem/1009/G",
    "history": "Polycarp has just launched his new startup idea. The niche is pretty free and the key vector of development sounds really promising, so he easily found himself some investors ready to sponsor the company. However, he is yet to name the startup! Actually, Polycarp has already came up with the name but some improvement to it will never hurt. So now he wants to swap letters at some positions in it to obtain the better name. It isn' t necessary for letters to be adjacent. In addition, each of the investors has chosen some index in the name and selected a set of letters that can go there. Indices chosen by different investors are pairwise distinct. If some indices aren' t chosen by any investor then any letter can go there. Finally, Polycarp is sure that the smallest lexicographically name is the best. ( Like why do you think Google decided to become Alphabet? ) More formally, you are given a string consisting of lowercase Latin letters from \" a\" to \" f\" . You can swap letters at any positions arbitrary number of times ( zero swaps is also possible) . What is the smallest lexicographically name you can obtain such that the letter at every position is among the allowed letters? If Polycarp can' t produce any valid name then print \" Impossible\" .",
    "input": "The first line is the string s ( 1 \u2264 | s| \u2264 10^ 5 ) \u2014 the name Polycarp has came up with. The string consists only of lowercase Latin letters from \" a\" to \" f\" . The second line contains a single integer m ( 0 \u2264 m \u2264 | s| ) \u2014 the number of investors. The i - th of the next m lines contain an integer number pos_ i and a non- empty string of allowed characters for pos_ i ( 1 \u2264 pos_ i \u2264 | s| ) . Each string contains pairwise distinct letters from \" a\" to \" f\" . pos_ 1, pos_ 2, . . . , pos_ m are pairwise distinct. If any position of the string doesn' t appear in the investors demands then any letter can go in this position.",
    "output": "If Polycarp can' t produce any valid name then print \" Impossible\" . Otherwise print the smallest lexicographically name Polycarp can obtain by swapping letters in string s such that the letter at every position is among the allowed ones.",
    "note": "",
    "topics": [
      "bitmasks",
      "flows",
      "graph matchings",
      "graphs",
      "greedy"
    ],
    "id": "1009G"
  },
  {
    "title": "Relatively Prime Graph",
    "url": "https://codeforces.com/problemset/problem/1009/D",
    "history": "Let' s call an undirected graph G = ( V, E) relatively prime if and only if for each edge ( v, u) \u2208 E GCD( v, u) = 1 ( the greatest common divisor of v and u is 1 ) . If there is no edge between some pair of vertices v and u then the value of GCD( v, u) doesn' t matter. The vertices are numbered from 1 to | V| . Construct a relatively prime graph with n vertices and m edges such that it is connected and it contains neither self- loops nor multiple edges. If there exists no valid graph with the given number of vertices and edges then output \" Impossible\" . If there are multiple answers then print any of them.",
    "input": "The only line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of vertices and the number of edges.",
    "output": "If there exists no valid graph with the given number of vertices and edges then output \" Impossible\" . Otherwise print the answer in the following format: The first line should contain the word \" Possible\" . The i - th of the next m lines should contain the i - th edge ( v_ i, u_ i) of the resulting graph ( 1 \u2264 v_ i, u_ i \u2264 n, v_ i = \u0338 u_ i ) . For each pair ( v, u) there can be no more pairs ( v, u) or ( u, v) . The vertices are numbered from 1 to n . If there are multiple answers then print any of them.",
    "note": "Here is the representation of the graph from the first example:",
    "topics": [
      "brute force",
      "constructive algorithms",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1009D"
  },
  {
    "title": "Annoying Present",
    "url": "https://codeforces.com/problemset/problem/1009/C",
    "history": "Alice got an array of length n as a birthday present once again! This is the third year in a row! And what is more disappointing, it is overwhelmengly boring, filled entirely with zeros. Bob decided to apply some changes to the array to cheer up Alice. Bob has chosen m changes of the following form. For some integer numbers x and d , he chooses an arbitrary position i ( 1 \u2264 i \u2264 n ) and for every j \u2208 [ 1, n] adds x + d \u00b7 dist( i, j) to the value of the j - th cell. dist( i, j) is the distance between positions i and j ( i. e. dist( i, j) = | i - j| , where | x| is an absolute value of x ) . For example, if Alice currently has an array [ 2, 1, 2, 2] and Bob chooses position 3 for x = - 1 and d = 2 then the array will become [ 2 - 1 + 2 \u00b7 2, 1 - 1 + 2 \u00b7 1, 2 - 1 + 2 \u00b7 0, 2 - 1 + 2 \u00b7 1] = [ 5, 2, 1, 3] . Note that Bob can' t choose position i outside of the array ( that is, smaller than 1 or greater than n ) . Alice will be the happiest when the elements of the array are as big as possible. Bob claimed that the arithmetic mean value of the elements will work fine as a metric. What is the maximum arithmetic mean value Bob can achieve?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n, m \u2264 10^ 5 ) \u2014 the number of elements of the array and the number of changes. Each of the next m lines contains two integers x_ i and d_ i ( - 10^ 3 \u2264 x_ i, d_ i \u2264 10^ 3 ) \u2014 the parameters for the i - th change.",
    "output": "Print the maximal average arithmetic mean of the elements Bob can achieve. Your answer is considered correct if its absolute or relative error doesn' t exceed 10^ - 6 .",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1009C"
  },
  {
    "title": "Minimum Ternary String",
    "url": "https://codeforces.com/problemset/problem/1009/B",
    "history": "You are given a ternary string ( it is a string which consists only of characters ' 0' , ' 1' and ' 2' ) . You can swap any two adjacent ( consecutive) characters ' 0' and ' 1' ( i. e. replace \" 01\" with \" 10\" or vice versa) or any two adjacent ( consecutive) characters ' 1' and ' 2' ( i. e. replace \" 12\" with \" 21\" or vice versa) . For example, for string \" 010210\" we can perform the following moves: \" 010210\" \u2192 \" 100210\" ; \" 010210\" \u2192 \" 001210\" ; \" 010210\" \u2192 \" 010120\" ; \" 010210\" \u2192 \" 010201\" . Note than you cannot swap \" 02\" \u2192 \" 20\" and vice versa. You cannot perform any other operations with the given string excluding described above. You task is to obtain the minimum possible ( lexicographically) string by using these swaps arbitrary number of times ( possibly, zero) . String a is lexicographically less than string b ( if strings a and b have the same length) if there exists some position i ( 1 \u2264 i \u2264 | a| , where | s| is the length of the string s ) such that for every j < i holds a_ j = b_ j , and a_ i < b_ i .",
    "input": "The first line of the input contains the string s consisting only of characters ' 0' , ' 1' and ' 2' , its length is between 1 and 10^ 5 ( inclusive) .",
    "output": "Print a single string \u2014 the minimum possible ( lexicographically) string you can obtain by using the swaps described above arbitrary number of times ( possibly, zero) .",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1009B"
  },
  {
    "title": "Turn the Rectangles",
    "url": "https://codeforces.com/problemset/problem/1008/B",
    "history": "There are n rectangles in a row. You can either turn each rectangle by 90 degrees or leave it as it is. If you turn a rectangle, its width will be height, and its height will be width. Notice that you can turn any number of rectangles, you also can turn all or none of them. You can not change the order of the rectangles. Find out if there is a way to make the rectangles go in order of non- ascending height. In other words, after all the turns, a height of every rectangle has to be not greater than the height of the previous rectangle ( if it is such) .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of rectangles. Each of the next n lines contains two integers w_ i and h_ i ( 1 \u2264 w_ i, h_ i \u2264 10^ 9 ) \u2014 the width and the height of the i - th rectangle.",
    "output": "Print \" YES\" ( without quotes) if there is a way to make the rectangles go in order of non- ascending height, otherwise print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first test, you can rotate the second and the third rectangles so that the heights will be [ 4, 4, 3] . In the second test, there is no way the second rectangle will be not higher than the first one.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1008B"
  },
  {
    "title": "Polycarp's Practice",
    "url": "https://codeforces.com/problemset/problem/1006/B",
    "history": "Polycarp is practicing his problem solving skill. He has a list of n problems with difficulties a_ 1, a_ 2, . . . , a_ n , respectively. His plan is to practice for exactly k days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all n problems in exactly k days. Thus, each day Polycarp solves a contiguous sequence of ( consecutive) problems from the start of the list. He can' t skip problems or solve them multiple times. As a result, in k days he will solve all the n problems. The profit of the j - th day of Polycarp' s practice is the maximum among all the difficulties of problems Polycarp solves during the j - th day ( i. e. if he solves problems with indices from l to r during a day, then the profit of the day is max_ l \u2264 i \u2264 ra_ i ) . The total profit of his practice is the sum of the profits over all k days of his practice. You want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all n problems between k days satisfying the conditions above in such a way, that the total profit is maximum. For example, if n = 8, k = 3 and a = [ 5, 4, 2, 6, 5, 1, 9, 2] , one of the possible distributions with maximum total profit is: [ 5, 4, 2] , [ 6, 5] , [ 1, 9, 2] . Here the total profit equals 5 + 6 + 9 = 20 .",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2000 ) \u2014 the number of problems and the number of days, respectively. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 2000 ) \u2014 difficulties of problems in Polycarp' s list, in the order they are placed in the list ( i. e. in the order Polycarp will solve them) .",
    "output": "In the first line of the output print the maximum possible total profit. In the second line print exactly k positive integers t_ 1, t_ 2, . . . , t_ k ( t_ 1 + t_ 2 + . . . + t_ k must equal n ) , where t_ j means the number of problems Polycarp will solve during the j - th day in order to achieve the maximum possible total profit of his practice. If there are many possible answers, you may print any of them.",
    "note": "The first example is described in the problem statement. In the second example there is only one possible distribution. In the third example the best answer is to distribute problems in the following way: [ 1, 2000] , [ 2000, 2] . The total profit of this distribution is 2000 + 2000 = 4000 .",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1006B"
  },
  {
    "title": "Polycarp and Div 3",
    "url": "https://codeforces.com/problemset/problem/1005/D",
    "history": "Polycarp likes numbers that are divisible by 3. He has a huge number s . Polycarp wants to cut from it the maximum number of numbers that are divisible by 3 . To do this, he makes an arbitrary number of vertical cuts between pairs of adjacent digits. As a result, after m such cuts, there will be m+ 1 parts in total. Polycarp analyzes each of the obtained numbers and finds the number of those that are divisible by 3 . For example, if the original number is s= 3121 , then Polycarp can cut it into three parts with two cuts: 3| 1| 21 . As a result, he will get two numbers that are divisible by 3 . Polycarp can make an arbitrary number of vertical cuts, where each cut is made between a pair of adjacent digits. The resulting numbers cannot contain extra leading zeroes ( that is, the number can begin with 0 if and only if this number is exactly one character ' 0' ) . For example, 007, 01 and 00099 are not valid numbers, but 90, 0 and 10001 are valid. What is the maximum number of numbers divisible by 3 that Polycarp can obtain?",
    "input": "The first line of the input contains a positive integer s . The number of digits of the number s is between 1 and 2\u00b710^ 5 , inclusive. The first ( leftmost) digit is not equal to 0.",
    "output": "Print the maximum number of numbers divisible by 3 that Polycarp can get by making vertical cuts in the given number s .",
    "note": "In the first example, an example set of optimal cuts on the number is 3| 1| 21. In the second example, you do not need to make any cuts. The specified number 6 forms one number that is divisible by 3 . In the third example, cuts must be made between each pair of digits. As a result, Polycarp gets one digit 1 and 33 digits 0. Each of the 33 digits 0 forms a number that is divisible by 3 . In the fourth example, an example set of optimal cuts is 2| 0| 1| 9| 201| 81. The numbers 0 , 9 , 201 and 81 are divisible by 3 .",
    "topics": [
      "dp",
      "greedy",
      "number theory"
    ],
    "id": "1005D"
  },
  {
    "title": "Summarize to the Power of Two",
    "url": "https://codeforces.com/problemset/problem/1005/C",
    "history": "A sequence a_ 1, a_ 2, . . . , a_ n is called good if, for each element a_ i , there exists an element a_ j ( i j ) such that a_ i+ a_ j is a power of two ( that is, 2^ d for some non- negative integer d ) . For example, the following sequences are good: [ 5, 3, 11] ( for example, for a_ 1= 5 we can choose a_ 2= 3 . Note that their sum is a power of two. Similarly, such an element can be found for a_ 2 and a_ 3 ) , [ 1, 1, 1, 1023] , [ 7, 39, 89, 25, 89] , [ ] . Note that, by definition, an empty sequence ( with a length of 0 ) is good. For example, the following sequences are not good: [ 16] ( for a_ 1= 16 , it is impossible to find another element a_ j such that their sum is a power of two) , [ 4, 16] ( for a_ 1= 4 , it is impossible to find another element a_ j such that their sum is a power of two) , [ 1, 3, 2, 8, 8, 8] ( for a_ 3= 2 , it is impossible to find another element a_ j such that their sum is a power of two) . You are given a sequence a_ 1, a_ 2, . . . , a_ n . What is the minimum number of elements you need to remove to make it good? You can delete an arbitrary set of elements.",
    "input": "The first line contains the integer n ( 1 \u2264 n \u2264 120000 ) \u2014 the length of the given sequence. The second line contains the sequence of integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "Print the minimum number of elements needed to be removed from the given sequence in order to make it good. It is possible that you need to delete all n elements, make it empty, and thus get a good sequence.",
    "note": "In the first example, it is enough to delete one element a_ 4= 5 . The remaining elements form the sequence [ 4, 7, 1, 4, 9] , which is good.",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1005C"
  },
  {
    "title": "Sonya and Ice Cream",
    "url": "https://codeforces.com/problemset/problem/1004/E",
    "history": "Sonya likes ice cream very much. She eats it even during programming competitions. That is why the girl decided that she wants to open her own ice cream shops. Sonya lives in a city with n junctions and n- 1 streets between them. All streets are two- way and connect two junctions. It is possible to travel from any junction to any other using one or more streets. City Hall allows opening shops only on junctions. The girl cannot open shops in the middle of streets. Sonya has exactly k friends whom she can trust. If she opens a shop, one of her friends has to work there and not to allow anybody to eat an ice cream not paying for it. Since Sonya does not want to skip an important competition, she will not work in shops personally. Sonya wants all her ice cream shops to form a simple path of the length r ( 1 \u2264 r \u2264 k ) , i. e. to be located in different junctions f_ 1, f_ 2, . . . , f_ r and there is street between f_ i and f_ i+ 1 for each i from 1 to r- 1 . The girl takes care of potential buyers, so she also wants to minimize the maximum distance between the junctions to the nearest ice cream shop. The distance between two junctions a and b is equal to the sum of all the street lengths that you need to pass to get from the junction a to the junction b . So Sonya wants to minimize max_ amin_ 1 \u2264 i \u2264 r d_ a, f_ i where a takes a value of all possible n junctions, f_ i \u2014 the junction where the i - th Sonya' s shop is located, and d_ x, y \u2014 the distance between the junctions x and y . Sonya is not sure that she can find the optimal shops locations, that is why she is asking you to help her to open not more than k shops that will form a simple path and the maximum distance between any junction and the nearest shop would be minimal.",
    "input": "The first line contains two integers n and k ( 1\u2264 k\u2264 n\u2264 10^ 5 ) \u2014 the number of junctions and friends respectively. Each of the next n- 1 lines contains three integers u_ i , v_ i , and d_ i ( 1\u2264 u_ i, v_ i\u2264 n , v_ i= \u0338 u_ i , 1\u2264 d\u2264 10^ 4 ) \u2014 junctions that are connected by a street and the length of this street. It is guaranteed that each pair of junctions is connected by at most one street. It is guaranteed that you can get from any junctions to any other.",
    "output": "Print one number \u2014 the minimal possible maximum distance that you need to pass to get from any junction to the nearest ice cream shop. Sonya' s shops must form a simple path and the number of shops must be at most k .",
    "note": "In the first example, you can choose the path 2- 4, so the answer will be 4. The first example. In the second example, you can choose the path 4- 1- 2, so the answer will be 7. The second example.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1004E"
  },
  {
    "title": "Sonya and Exhibition",
    "url": "https://codeforces.com/problemset/problem/1004/B",
    "history": "Sonya decided to organize an exhibition of flowers. Since the girl likes only roses and lilies, she decided that only these two kinds of flowers should be in this exhibition. There are n flowers in a row in the exhibition. Sonya can put either a rose or a lily in the i - th position. Thus each of n positions should contain exactly one flower: a rose or a lily. She knows that exactly m people will visit this exhibition. The i - th visitor will visit all flowers from l_ i to r_ i inclusive. The girl knows that each segment has its own beauty that is equal to the product of the number of roses and the number of lilies. Sonya wants her exhibition to be liked by a lot of people. That is why she wants to put the flowers in such way that the sum of beauties of all segments would be maximum possible.",
    "input": "The first line contains two integers n and m ( 1\u2264 n, m\u2264 10^ 3 ) \u2014 the number of flowers and visitors respectively. Each of the next m lines contains two integers l_ i and r_ i ( 1\u2264 l_ i\u2264 r_ i\u2264 n ) , meaning that i - th visitor will visit all flowers from l_ i to r_ i inclusive.",
    "output": "Print the string of n characters. The i - th symbol should be \u00ab0\u00bb if you want to put a rose in the i - th position, otherwise \u00ab1\u00bb if you want to put a lily. If there are multiple answers, print any.",
    "note": "In the first example, Sonya can put roses in the first, fourth, and fifth positions, and lilies in the second and third positions; in the segment [ 1. . . 3] , there are one rose and two lilies, so the beauty is equal to 1\u00b7 2= 2 ; in the segment [ 2. . . 4] , there are one rose and two lilies, so the beauty is equal to 1\u00b7 2= 2 ; in the segment [ 2. . . 5] , there are two roses and two lilies, so the beauty is equal to 2\u00b7 2= 4 . The total beauty is equal to 2+ 2+ 4= 8 . In the second example, Sonya can put roses in the third, fourth, and sixth positions, and lilies in the first, second, and fifth positions; in the segment [ 5. . . 6] , there are one rose and one lily, so the beauty is equal to 1\u00b7 1= 1 ; in the segment [ 1. . . 4] , there are two roses and two lilies, so the beauty is equal to 2\u00b7 2= 4 ; in the segment [ 4. . . 6] , there are two roses and one lily, so the beauty is equal to 2\u00b7 1= 2 . The total beauty is equal to 1+ 4+ 2= 7 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1004B"
  },
  {
    "title": "Coins and Queries",
    "url": "https://codeforces.com/problemset/problem/1003/D",
    "history": "Polycarp has n coins, the value of the i - th coin is a_ i . It is guaranteed that all the values are integer powers of 2 ( i. e. a_ i = 2^ d for some non- negative integer number d ) . Polycarp wants to know answers on q queries. The j - th query is described as integer number b_ j . The answer to the query is the minimum number of coins that is necessary to obtain the value b_ j using some subset of coins ( Polycarp can use only coins he has) . If Polycarp can' t obtain the value b_ j , the answer to the j - th query is - 1. The queries are independent ( the answer on the query doesn' t affect Polycarp' s coins) .",
    "input": "The first line of the input contains two integers n and q ( 1 \u2264 n, q \u2264 2 \u00b7 10^ 5 ) \u2014 the number of coins and the number of queries. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n \u2014 values of coins ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 9 ) . It is guaranteed that all a_ i are integer powers of 2 ( i. e. a_ i = 2^ d for some non- negative integer number d ) . The next q lines contain one integer each. The j - th line contains one integer b_ j \u2014 the value of the j - th query ( 1 \u2264 b_ j \u2264 10^ 9 ) .",
    "output": "Print q integers ans_ j . The j - th integer must be equal to the answer on the j - th query. If Polycarp can' t obtain the value b_ j the answer to the j - th query is - 1.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1003D"
  },
  {
    "title": "Light It Up",
    "url": "https://codeforces.com/problemset/problem/1000/B",
    "history": "Recently, you bought a brand new smart lamp with programming features. At first, you set up a schedule to the lamp. Every day it will turn power on at moment 0 and turn power off at moment M . Moreover, the lamp allows you to set a program of switching its state ( states are \" lights on\" and \" lights off\" ) . Unfortunately, some program is already installed into the lamp. The lamp allows only good programs. Good program can be represented as a non- empty array a , where 0 < a_ 1 < a_ 2 < . . . < a_ | a| < M . All a_ i must be integers. Of course, preinstalled program is a good program. The lamp follows program a in next manner: at moment 0 turns power and light on. Then at moment a_ i the lamp flips its state to opposite ( if it was lit, it turns off, and vice versa) . The state of the lamp flips instantly: for example, if you turn the light off at moment 1 and then do nothing, the total time when the lamp is lit will be 1 . Finally, at moment M the lamp is turning its power off regardless of its state. Since you are not among those people who read instructions, and you don' t understand the language it' s written in, you realize ( after some testing) the only possible way to alter the preinstalled program. You can insert at most one element into the program a , so it still should be a good program after alteration. Insertion can be done between any pair of consecutive elements of a , or even at the begining or at the end of a . Find such a way to alter the program that the total time when the lamp is lit is maximum possible. Maybe you should leave program untouched. If the lamp is lit from x till moment y , then its lit for y - x units of time. Segments of time when the lamp is lit are summed up.",
    "input": "First line contains two space separated integers n and M ( 1 \u2264 n \u2264 10^ 5 , 2 \u2264 M \u2264 10^ 9 ) \u2014 the length of program a and the moment when power turns off. Second line contains n space separated integers a_ 1, a_ 2, . . . , a_ n ( 0 < a_ 1 < a_ 2 < . . . < a_ n < M ) \u2014 initially installed program a .",
    "output": "Print the only integer \u2014 maximum possible total time when the lamp is lit.",
    "note": "In the first example, one of possible optimal solutions is to insert value x = 3 before a_ 1 , so program will be [ 3, 4, 6, 7] and time of lamp being lit equals ( 3 - 0) + ( 6 - 4) + ( 10 - 7) = 8 . Other possible solution is to insert x = 5 in appropriate place. In the second example, there is only one optimal solution: to insert x = 2 between a_ 1 and a_ 2 . Program will become [ 1, 2, 10] , and answer will be ( 1 - 0) + ( 10 - 2) = 9 . In the third example, optimal answer is to leave program untouched, so answer will be ( 3 - 0) + ( 7 - 4) = 6 .",
    "topics": [
      "greedy"
    ],
    "id": "1000B"
  },
  {
    "title": "Codehorses T-shirts",
    "url": "https://codeforces.com/problemset/problem/1000/A",
    "history": "Codehorses has just hosted the second Codehorses Cup. This year, the same as the previous one, organizers are giving T- shirts for the winners. The valid sizes of T- shirts are either \" M\" or from 0 to 3 \" X\" followed by \" S\" or \" L\" . For example, sizes \" M\" , \" XXS\" , \" L\" , \" XXXL\" are valid and \" XM\" , \" Z\" , \" XXXXL\" are not. There are n winners to the cup for both the previous year and the current year. Ksenia has a list with the T- shirt sizes printed for the last year cup and is yet to send the new list to the printing office. Organizers want to distribute the prizes as soon as possible, so now Ksenia is required not to write the whole list from the scratch but just make some changes to the list of the previous year. In one second she can choose arbitrary position in any word and replace its character with some uppercase Latin letter. Ksenia can' t remove or add letters in any of the words. What is the minimal number of seconds Ksenia is required to spend to change the last year list to the current one? The lists are unordered. That means, two lists are considered equal if and only if the number of occurrences of any string is the same in both lists.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of T- shirts. The i - th of the next n lines contains a_ i \u2014 the size of the i - th T- shirt of the list for the previous year. The i - th of the next n lines contains b_ i \u2014 the size of the i - th T- shirt of the list for the current year. It is guaranteed that all the sizes in the input are valid. It is also guaranteed that Ksenia can produce list b from the list a .",
    "output": "Print the minimal number of seconds Ksenia is required to spend to change the last year list to the current one. If the lists are already equal, print 0.",
    "note": "In the first example Ksenia can replace \" M\" with \" S\" and \" S\" in one of the occurrences of \" XS\" with \" L\" . In the second example Ksenia should replace \" L\" in \" XXXL\" with \" S\" . In the third example lists are equal.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1000A"
  },
  {
    "title": "Reachability from the Capital",
    "url": "https://codeforces.com/problemset/problem/999/E",
    "history": "There are n cities and m roads in Berland. Each road connects a pair of cities. The roads in Berland are one- way. What is the minimum number of new roads that need to be built to make all the cities reachable from the capital? New roads will also be one- way.",
    "input": "The first line of input consists of three integers n , m and s ( 1 \u2264 n \u2264 5000, 0 \u2264 m \u2264 5000, 1 \u2264 s \u2264 n ) \u2014 the number of cities, the number of roads and the index of the capital. Cities are indexed from 1 to n . The following m lines contain roads: road i is given as a pair of cities u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i v_ i ) . For each pair of cities ( u, v) , there can be at most one road from u to v . Roads in opposite directions between a pair of cities are allowed ( i. e. from u to v and from v to u ) .",
    "output": "Print one integer \u2014 the minimum number of extra roads needed to make all the cities reachable from city s . If all the cities are already reachable from s , print 0.",
    "note": "The first example is illustrated by the following: For example, you can add roads ( 6, 4 ) , ( 7, 9 ) , ( 1, 7 ) to make all the cities reachable from s = 1 . The second example is illustrated by the following: In this example, you can add any one of the roads ( 5, 1 ) , ( 5, 2 ) , ( 5, 3 ) , ( 5, 4 ) to make all the cities reachable from s = 5 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "999E"
  },
  {
    "title": "Equalize the Remainders",
    "url": "https://codeforces.com/problemset/problem/999/D",
    "history": "You are given an array consisting of n integers a_ 1, a_ 2, . . . , a_ n , and a positive integer m . It is guaranteed that m is a divisor of n . In a single move, you can choose any position i between 1 and n and increase a_ i by 1 . Let' s calculate c_ r ( 0 \u2264 r \u2264 m- 1) \u2014 the number of elements having remainder r when divided by m . In other words, for each remainder, let' s find the number of corresponding elements in a with that remainder. Your task is to change the array in such a way that c_ 0 = c_ 1 = . . . = c_ m- 1 = n/ m . Find the minimum number of moves to satisfy the above requirement.",
    "input": "The first line of input contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 m \u2264 n ) . It is guaranteed that m is a divisor of n . The second line of input contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) , the elements of the array.",
    "output": "In the first line, print a single integer \u2014 the minimum number of moves required to satisfy the following condition: for each remainder from 0 to m - 1 , the number of elements of the array having this remainder equals n/ m . In the second line, print any array satisfying the condition and can be obtained from the given array with the minimum number of moves. The values of the elements of the resulting array must not exceed 10^ 18 .",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "999D"
  },
  {
    "title": "Cutting",
    "url": "https://codeforces.com/problemset/problem/998/B",
    "history": "There are a lot of things which could be cut \u2014 trees, paper, \" the rope\" . In this problem you are going to cut a sequence of integers. There is a sequence of integers, which contains the equal number of even and odd numbers. Given a limited budget, you need to make maximum possible number of cuts such that each resulting segment will have the same number of odd and even integers. Cuts separate a sequence to continuous ( contiguous) segments. You may think about each cut as a break between two adjacent elements in a sequence. So after cutting each element belongs to exactly one segment. Say, [ 4, 1, 2, 3, 4, 5, 4, 4, 5, 5] \u2192 two cuts \u2192 [ 4, 1 | 2, 3, 4, 5 | 4, 4, 5, 5] . On each segment the number of even elements should be equal to the number of odd elements. The cost of the cut between x and y numbers is | x - y| bitcoins. Find the maximum possible number of cuts that can be made while spending no more than B bitcoins.",
    "input": "First line of the input contains an integer n ( 2 \u2264 n \u2264 100 ) and an integer B ( 1 \u2264 B \u2264 100 ) \u2014 the number of elements in the sequence and the number of bitcoins you have. Second line contains n integers: a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) \u2014 elements of the sequence, which contains the equal number of even and odd numbers",
    "output": "Print the maximum possible number of cuts which can be made while spending no more than B bitcoins.",
    "note": "In the first sample the optimal answer is to split sequence between 2 and 5 . Price of this cut is equal to 3 bitcoins. In the second sample it is not possible to make even one cut even with unlimited number of bitcoins. In the third sample the sequence should be cut between 2 and 3 , and between 4 and 5 . The total price of the cuts is 1 + 1 = 2 bitcoins.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "998B"
  },
  {
    "title": "Roman Digits",
    "url": "https://codeforces.com/problemset/problem/997/B",
    "history": "Let' s introduce a number system which is based on a roman digits. There are digits I, V, X, L which correspond to the numbers 1 , 5 , 10 and 50 respectively. The use of other roman digits is not allowed. Numbers in this system are written as a sequence of one or more digits. We define the value of the sequence simply as the sum of digits in it. For example, the number XXXV evaluates to 35 and the number IXI \u2014 to 12 . Pay attention to the difference to the traditional roman system \u2014 in our system any sequence of digits is valid, moreover the order of digits doesn' t matter, for example IX means 11 , not 9 . One can notice that this system is ambiguous, and some numbers can be written in many different ways. Your goal is to determine how many distinct integers can be represented by exactly n roman digits I, V, X, L.",
    "input": "The only line of the input file contains a single integer n ( 1 \u2264 n \u2264 10^ 9 ) \u2014 the number of roman digits to use.",
    "output": "Output a single integer \u2014 the number of distinct integers which can be represented using n roman digits exactly.",
    "note": "In the first sample there are exactly 4 integers which can be represented \u2014 I, V, X and L. In the second sample it is possible to represent integers 2 ( II) , 6 ( VI) , 10 ( VV) , 11 ( XI) , 15 ( XV) , 20 ( XX) , 51 ( IL) , 55 ( VL) , 60 ( XL) and 100 ( LL) .",
    "topics": [
      "brute force",
      "combinatorics",
      "dp",
      "greedy",
      "math"
    ],
    "id": "997B"
  },
  {
    "title": "Convert to Ones",
    "url": "https://codeforces.com/problemset/problem/997/A",
    "history": "You' ve got a string a_ 1, a_ 2, . . . , a_ n , consisting of zeros and ones. Let' s call a sequence of consecutive elements a_ i, a_ i + 1, . . . , a_ j ( 1\u2264 i\u2264 j\u2264 n ) a substring of string a . You can apply the following operations any number of times: Choose some substring of string a ( for example, you can choose entire string) and reverse it, paying x coins for it ( for example, \u00ab0101101\u00bb \u2192 \u00ab0111001\u00bb) ; Choose some substring of string a ( for example, you can choose entire string or just one symbol) and replace each symbol to the opposite one ( zeros are replaced by ones, and ones \u2014 by zeros) , paying y coins for it ( for example, \u00ab0101101\u00bb \u2192 \u00ab0110001\u00bb) . You can apply these operations in any order. It is allowed to apply the operations multiple times to the same substring. What is the minimum number of coins you need to spend to get a string consisting only of ones?",
    "input": "The first line of input contains integers n , x and y ( 1 \u2264 n \u2264 300 000, 0 \u2264 x, y \u2264 10^ 9 ) \u2014 length of the string, cost of the first operation ( substring reverse) and cost of the second operation ( inverting all elements of substring) . The second line contains the string a of length n , consisting of zeros and ones.",
    "output": "Print a single integer \u2014 the minimum total cost of operations you need to spend to get a string consisting only of ones. Print 0 , if you do not need to perform any operations.",
    "note": "In the first sample, at first you need to reverse substring [ 1 . . . 2] , and then you need to invert substring [ 2 . . . 5] . Then the string was changed as follows: \u00ab01000\u00bb \u2192 \u00ab10000\u00bb \u2192 \u00ab11111\u00bb. The total cost of operations is 1 + 10 = 11 . In the second sample, at first you need to invert substring [ 1 . . . 1] , and then you need to invert substring [ 3 . . . 5] . Then the string was changed as follows: \u00ab01000\u00bb \u2192 \u00ab11000\u00bb \u2192 \u00ab11111\u00bb. The overall cost is 1 + 1 = 2 . In the third example, string already consists only of ones, so the answer is 0 .",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "997A"
  },
  {
    "title": "Hit the Lottery",
    "url": "https://codeforces.com/problemset/problem/996/A",
    "history": "Allen has a LOT of money. He has n dollars in the bank. For security reasons, he wants to withdraw it in cash ( we will not disclose the reasons here) . The denominations for dollar bills are 1 , 5 , 10 , 20 , 100 . What is the minimum number of bills Allen could receive after withdrawing his entire balance?",
    "input": "The first and only line of input contains a single integer n ( 1 \u2264 n \u2264 10^ 9 ) .",
    "output": "Output the minimum number of bills that Allen could receive.",
    "note": "In the first sample case, Allen can withdraw this with a 100 dollar bill, a 20 dollar bill, and a 5 dollar bill. There is no way for Allen to receive 125 dollars in one or two bills. In the second sample case, Allen can withdraw two 20 dollar bills and three 1 dollar bills. In the third sample case, Allen can withdraw 100000000 ( ten million! ) 100 dollar bills.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "996A"
  },
  {
    "title": "Leaving the Bar",
    "url": "https://codeforces.com/problemset/problem/995/C",
    "history": "For a vector v\u20d7 = ( x, y) , define | v| = \u221a( x^ 2 + y^ 2) . Allen had a bit too much to drink at the bar, which is at the origin. There are n vectors v\u20d7_ \u20d71\u20d7, v\u20d7_ \u20d72\u20d7, \u22ef, v\u20d7_ \u20d7n\u20d7 . Allen will make n moves. As Allen' s sense of direction is impaired, during the i - th move he will either move in the direction v\u20d7_ \u20d7i\u20d7 or - v\u20d7_ \u20d7i\u20d7 . In other words, if his position is currently p = ( x, y) , he will either move to p + v\u20d7_ \u20d7i\u20d7 or p - v\u20d7_ \u20d7i\u20d7 . Allen doesn' t want to wander too far from home ( which happens to also be the bar) . You need to help him figure out a sequence of moves ( a sequence of signs for the vectors) such that his final position p satisfies | p| \u2264 1. 5 \u00b7 10^ 6 so that he can stay safe.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of moves. Each of the following lines contains two space- separated integers x_ i and y_ i , meaning that v\u20d7_ \u20d7i\u20d7 = ( x_ i, y_ i) . We have that | v_ i| \u2264 10^ 6 for all i .",
    "output": "Output a single line containing n integers c_ 1, c_ 2, \u22ef, c_ n , each of which is either 1 or - 1 . Your solution is correct if the value of p = \u2211_ i = 1^ n c_ i v\u20d7_ \u20d7i\u20d7 , satisfies | p| \u2264 1. 5 \u00b7 10^ 6 . It can be shown that a solution always exists under the given constraints.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "geometry",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "995C"
  },
  {
    "title": "Suit and Tie",
    "url": "https://codeforces.com/problemset/problem/995/B",
    "history": "Allen is hosting a formal dinner party. 2n people come to the event in n pairs ( couples) . After a night of fun, Allen wants to line everyone up for a final picture. The 2n people line up, but Allen doesn' t like the ordering. Allen prefers if each pair occupies adjacent positions in the line, as this makes the picture more aesthetic. Help Allen find the minimum number of swaps of adjacent positions he must perform to make it so that each couple occupies adjacent positions in the line.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 ) , the number of pairs of people. The second line contains 2n integers a_ 1, a_ 2, . . . , a_ 2n . For each i with 1 \u2264 i \u2264 n , i appears exactly twice. If a_ j = a_ k = i , that means that the j - th and k - th people in the line form a couple.",
    "output": "Output a single integer, representing the minimum number of adjacent swaps needed to line the people up so that each pair occupies adjacent positions.",
    "note": "In the first sample case, we can transform 1 1 2 3 3 2 4 4 \u2192 1 1 2 3 2 3 4 4 \u2192 1 1 2 2 3 3 4 4 in two steps. Note that the sequence 1 1 2 3 3 2 4 4 \u2192 1 1 3 2 3 2 4 4 \u2192 1 1 3 3 2 2 4 4 also works in the same number of steps. The second sample case already satisfies the constraints; therefore we need 0 swaps.",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "995B"
  },
  {
    "title": "Knights of a Polygonal Table",
    "url": "https://codeforces.com/problemset/problem/994/B",
    "history": "Unlike Knights of a Round Table, Knights of a Polygonal Table deprived of nobility and happy to kill each other. But each knight has some power and a knight can kill another knight if and only if his power is greater than the power of victim. However, even such a knight will torment his conscience, so he can kill no more than k other knights. Also, each knight has some number of coins. After a kill, a knight can pick up all victim' s coins. Now each knight ponders: how many coins he can have if only he kills other knights? You should answer this question for each knight.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 10^ 5, 0 \u2264 k \u2264min( n- 1, 10) ) \u2014 the number of knights and the number k from the statement. The second line contains n integers p_ 1, p_ 2 , . . . , p_ n ( 1 \u2264 p_ i \u2264 10^ 9) \u2014 powers of the knights. All p_ i are distinct. The third line contains n integers c_ 1, c_ 2 , . . . , c_ n ( 0 \u2264 c_ i \u2264 10^ 9) \u2014 the number of coins each knight has.",
    "output": "Print n integers \u2014 the maximum number of coins each knight can have it only he kills other knights.",
    "note": "Consider the first example. The first knight is the weakest, so he can' t kill anyone. That leaves him with the only coin he initially has. The second knight can kill the first knight and add his coin to his own two. The third knight is the strongest, but he can' t kill more than k = 2 other knights. It is optimal to kill the second and the fourth knights: 2+ 11+ 33 = 46 . The fourth knight should kill the first and the second knights: 33+ 1+ 2 = 36 . In the second example the first knight can' t kill anyone, while all the others should kill the one with the index less by one than their own. In the third example there is only one knight, so he can' t kill anyone.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "994B"
  },
  {
    "title": "Compute Power",
    "url": "https://codeforces.com/problemset/problem/993/D",
    "history": "You need to execute several tasks, each associated with number of processors it needs, and the compute power it will consume. You have sufficient number of analog computers, each with enough processors for any task. Each computer can execute up to one task at a time, and no more than two tasks total. The first task can be any, the second task on each computer must use strictly less power than the first. You will assign between 1 and 2 tasks to each computer. You will then first execute the first task on each computer, wait for all of them to complete, and then execute the second task on each computer that has two tasks assigned. If the average compute power per utilized processor ( the sum of all consumed powers for all tasks presently running divided by the number of utilized processors) across all computers exceeds some unknown threshold during the execution of the first tasks, the entire system will blow up. There is no restriction on the second tasks execution. Find the lowest threshold for which it is possible. Due to the specifics of the task, you need to print the answer multiplied by 1000 and rounded up.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 50) \u2014 the number of tasks. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 108) , where ai represents the amount of power required for the i- th task. The third line contains n integers b1, b2, . . . , bn ( 1 \u2264 bi \u2264 100) , where bi is the number of processors that i- th task will utilize.",
    "output": "Print a single integer value \u2014 the lowest threshold for which it is possible to assign all tasks in such a way that the system will not blow up after the first round of computation, multiplied by 1000 and rounded up.",
    "note": "In the first example the best strategy is to run each task on a separate computer, getting average compute per processor during the first round equal to 9. In the second task it is best to run tasks with compute 10 and 9 on one computer, tasks with compute 10 and 8 on another, and tasks with compute 9 and 8 on the last, averaging ( 10 + 10 + 9) / ( 10 + 10 + 5) = 1. 16 compute power per processor during the first round.",
    "topics": [
      "binary search",
      "dp",
      "greedy"
    ],
    "id": "993D"
  },
  {
    "title": "Concise and clear",
    "url": "https://codeforces.com/problemset/problem/991/F",
    "history": "Vasya is a regular participant at programming contests and is already experienced in finding important sentences in long statements. Of course, numbers constraints are important \u2014 factorization of a number less than 1000000 is easier than of a number less than 1000000000. However, sometimes it' s hard to understand the number at the first glance. Could it be shortened? For example, instead of 1000000 you could write 10^ 6 , instead of 1000000000 \u2014 10^ 9 , instead of 1000000007 \u2014 10^ 9+ 7 . Vasya decided that, to be concise, the notation should follow several rules: the notation should only consist of numbers, operations of addition ( \" + \" ) , multiplication ( \" * \" ) and exponentiation ( \" ^ \" ) , in particular, the use of braces is forbidden; the use of several exponentiation operations in a row is forbidden, for example, writing \" 2^ 3^ 4\" is unacceptable; the value of the resulting expression equals to the initial number; the notation should consist of the minimal amount of symbols. Given n , find the equivalent concise notation for it.",
    "input": "The only line contains a single integer n ( 1 \u2264 n \u2264 10 000 000 000 ) .",
    "output": "Output a concise notation of the number n . If there are several concise notations, output any of them.",
    "note": "The third sample allows the answer 10^ 10 also of the length 5 .",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "991F"
  },
  {
    "title": "Bishwock",
    "url": "https://codeforces.com/problemset/problem/991/D",
    "history": "Bishwock is a chess figure that consists of three squares resembling an \" L- bar\" . This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states: XX XX . X X. X. . X XX XX Bishwocks don' t attack any squares and can even occupy on the adjacent squares as long as they don' t occupy the same square. Vasya has a board with 2\u00d7 n squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can' t put bishwocks there. However, pawns also don' t attack bishwocks and they can occupy adjacent squares peacefully. Knowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn' t occupy the same squares and wouldn' t occupy squares with pawns.",
    "input": "The input contains two nonempty strings that describe Vasya' s board. Those strings contain only symbols \" 0\" ( zero) that denote the empty squares and symbols \" X\" ( uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed 100 .",
    "output": "Output a single integer \u2014 the maximum amount of bishwocks that can be placed onto the given board.",
    "note": "",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "991D"
  },
  {
    "title": "Getting an A",
    "url": "https://codeforces.com/problemset/problem/991/B",
    "history": "Translator' s note: in Russia' s most widespread grading system, there are four grades: 5, 4, 3, 2, the higher the better, roughly corresponding to A, B, C and F respectively in American grading system. The term is coming to an end and students start thinking about their grades. Today, a professor told his students that the grades for his course would be given out automatically \u2014 he would calculate the simple average ( arithmetic mean) of all grades given out for lab works this term and round to the nearest integer. The rounding would be done in favour of the student \u2014 4. 5 would be rounded up to 5 ( as in example 3) , but 4. 4 would be rounded down to 4 . This does not bode well for Vasya who didn' t think those lab works would influence anything, so he may receive a grade worse than 5 ( maybe even the dreaded 2 ) . However, the professor allowed him to redo some of his works of Vasya' s choosing to increase his average grade. Vasya wants to redo as as few lab works as possible in order to get 5 for the course. Of course, Vasya will get 5 for the lab works he chooses to redo. Help Vasya \u2014 calculate the minimum amount of lab works Vasya has to redo.",
    "input": "The first line contains a single integer n \u2014 the number of Vasya' s grades ( 1 \u2264 n \u2264 100 ) . The second line contains n integers from 2 to 5 \u2014 Vasya' s grades for his lab works.",
    "output": "Output a single integer \u2014 the minimum amount of lab works that Vasya has to redo. It can be shown that Vasya can always redo enough lab works to get a 5 .",
    "note": "In the first sample, it is enough to redo two lab works to make two 4 s into 5 s. In the second sample, Vasya' s average is already 4. 75 so he doesn' t have to redo anything to get a 5 . In the second sample Vasya has to redo one lab work to get rid of one of the 3 s, that will make the average exactly 4. 5 so the final grade would be 5 .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "991B"
  },
  {
    "title": "Flow Control",
    "url": "https://codeforces.com/problemset/problem/990/F",
    "history": "You have to handle a very complex water distribution system. The system consists of n junctions and m pipes, i - th pipe connects junctions x_ i and y_ i . The only thing you can do is adjusting the pipes. You have to choose m integer numbers f_ 1 , f_ 2 , . . . , f_ m and use them as pipe settings. i - th pipe will distribute f_ i units of water per second from junction x_ i to junction y_ i ( if f_ i is negative, then the pipe will distribute | f_ i| units of water per second from junction y_ i to junction x_ i ) . It is allowed to set f_ i to any integer from - 2 \u00b7 10^ 9 to 2 \u00b7 10^ 9 . In order for the system to work properly, there are some constraints: for every i \u2208 [ 1, n] , i - th junction has a number s_ i associated with it meaning that the difference between incoming and outcoming flow for i - th junction must be exactly s_ i ( if s_ i is not negative, then i - th junction must receive s_ i units of water per second; if it is negative, then i - th junction must transfer | s_ i| units of water per second to other junctions) . Can you choose the integers f_ 1 , f_ 2 , . . . , f_ m in such a way that all requirements on incoming and outcoming flows are satisfied?",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of junctions. The second line contains n integers s_ 1, s_ 2, . . . , s_ n ( - 10^ 4 \u2264 s_ i \u2264 10^ 4 ) \u2014 constraints for the junctions. The third line contains an integer m ( 0 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of pipes. i - th of the next m lines contains two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) \u2014 the description of i - th pipe. It is guaranteed that each unordered pair ( x, y) will appear no more than once in the input ( it means that there won' t be any pairs ( x, y) or ( y, x) after the first occurrence of ( x, y) ) . It is guaranteed that for each pair of junctions there exists a path along the pipes connecting them.",
    "output": "If you can choose such integer numbers f_ 1, f_ 2, . . . , f_ m in such a way that all requirements on incoming and outcoming flows are satisfied, then output \" Possible\" in the first line. Then output m lines, i - th line should contain f_ i \u2014 the chosen setting numbers for the pipes. Pipes are numbered in order they appear in the input. Otherwise output \" Impossible\" in the only line.",
    "note": "",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "990F"
  },
  {
    "title": "Post Lamps",
    "url": "https://codeforces.com/problemset/problem/990/E",
    "history": "Adilbek' s house is located on a street which can be represented as the OX axis. This street is really dark, so Adilbek wants to install some post lamps to illuminate it. Street has n positions to install lamps, they correspond to the integer numbers from 0 to n - 1 on the OX axis. However, some positions are blocked and no post lamp can be placed there. There are post lamps of different types which differ only by their power. When placed in position x , post lamp of power l illuminates the segment [ x; x + l] . The power of each post lamp is always a positive integer number. The post lamp shop provides an infinite amount of lamps of each type from power 1 to power k . Though each customer is only allowed to order post lamps of exactly one type. Post lamps of power l cost a_ l each. What is the minimal total cost of the post lamps of exactly one type Adilbek can buy to illuminate the entire segment [ 0; n] of the street? If some lamps illuminate any other segment of the street, Adilbek does not care, so, for example, he may place a lamp of power 3 in position n - 1 ( even though its illumination zone doesn' t completely belong to segment [ 0; n] ) .",
    "input": "The first line contains three integer numbers n , m and k ( 1 \u2264 k \u2264 n \u2264 10^ 6 , 0 \u2264 m \u2264 n ) \u2014 the length of the segment of the street Adilbek wants to illuminate, the number of the blocked positions and the maximum power of the post lamp available. The second line contains m integer numbers s_ 1, s_ 2, . . . , s_ m ( 0 \u2264 s_ 1 < s_ 2 < . . . s_ m < n ) \u2014 the blocked positions. The third line contains k integer numbers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 the costs of the post lamps.",
    "output": "Print the minimal total cost of the post lamps of exactly one type Adilbek can buy to illuminate the entire segment [ 0; n] of the street. If illumintaing the entire segment [ 0; n] is impossible, print - 1.",
    "note": "",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "990E"
  },
  {
    "title": "Micro-World",
    "url": "https://codeforces.com/problemset/problem/990/B",
    "history": "You have a Petri dish with bacteria and you are preparing to dive into the harsh micro- world. But, unfortunately, you don' t have any microscope nearby, so you can' t watch them. You know that you have n bacteria in the Petri dish and size of the i - th bacteria is a_ i . Also you know intergalactic positive integer constant K . The i - th bacteria can swallow the j - th bacteria if and only if a_ i > a_ j and a_ i \u2264 a_ j + K . The j - th bacteria disappear, but the i - th bacteria doesn' t change its size. The bacteria can perform multiple swallows. On each swallow operation any bacteria i can swallow any bacteria j if a_ i > a_ j and a_ i \u2264 a_ j + K . The swallow operations go one after another. For example, the sequence of bacteria sizes a= [ 101, 53, 42, 102, 101, 55, 54] and K= 1 . The one of possible sequences of swallows is: [ 101, 53, 42, 102, 101, 55, 54] \u2192 [ 101, 53, 42, 102, 55, 54] \u2192 [ 101, 42, 102, 55, 54] \u2192 [ 42, 102, 55, 54] \u2192 [ 42, 102, 55] . In total there are 3 bacteria remained in the Petri dish. Since you don' t have a microscope, you can only guess, what the minimal possible number of bacteria can remain in your Petri dish when you finally will find any microscope.",
    "input": "The first line contains two space separated positive integers n and K ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 K \u2264 10^ 6 ) \u2014 number of bacteria and intergalactic constant K . The second line contains n space separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 sizes of bacteria you have.",
    "output": "Print the only integer \u2014 minimal possible number of bacteria can remain.",
    "note": "The first example is clarified in the problem statement. In the second example an optimal possible sequence of swallows is: [ 20, 15, 10, 15, 20, 25] \u2192 [ 20, 15, 10, 15, 25] \u2192 [ 20, 15, 10, 25] \u2192 [ 20, 15, 25] \u2192 [ 20, 25] \u2192 [ 25] . In the third example no bacteria can swallow any other bacteria.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "990B"
  },
  {
    "title": "Divisibility by 25",
    "url": "https://codeforces.com/problemset/problem/988/E",
    "history": "You are given an integer n from 1 to 10^ 18 without leading zeroes. In one move you can swap any two adjacent digits in the given number in such a way that the resulting number will not contain leading zeroes. In other words, after each move the number you have cannot contain any leading zeroes. What is the minimum number of moves you have to make to obtain a number that is divisible by 25 ? Print - 1 if it is impossible to obtain a number that is divisible by 25 .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 18 ) . It is guaranteed that the first ( left) digit of the number n is not a zero.",
    "output": "If it is impossible to obtain a number that is divisible by 25 , print - 1. Otherwise print the minimum number of moves required to obtain such number. Note that you can swap only adjacent digits in the given number.",
    "note": "In the first example one of the possible sequences of moves is 5071 \u2192 5701 \u2192 7501 \u2192 7510 \u2192 7150.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "988E"
  },
  {
    "title": "Fair",
    "url": "https://codeforces.com/problemset/problem/986/A",
    "history": "Some company is going to hold a fair in Byteland. There are n towns in Byteland and m two- way roads between towns. Of course, you can reach any town from any other town using roads. There are k types of goods produced in Byteland and every town produces only one type. To hold a fair you have to bring at least s different types of goods. It costs d( u, v) coins to bring goods from town u to town v where d( u, v) is the length of the shortest path from u to v . Length of a path is the number of roads in this path. The organizers will cover all travel expenses but they can choose the towns to bring goods from. Now they want to calculate minimum expenses to hold a fair in each of n towns.",
    "input": "There are 4 integers n , m , k , s in the first line of input ( 1 \u2264 n \u2264 10^ 5 , 0 \u2264 m \u2264 10^ 5 , 1 \u2264 s \u2264 k \u2264 min( n, 100) ) \u2014 the number of towns, the number of roads, the number of different types of goods, the number of different types of goods necessary to hold a fair. In the next line there are n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i\u2264 k ) , where a_ i is the type of goods produced in the i - th town. It is guaranteed that all integers between 1 and k occur at least once among integers a_ i . In the next m lines roads are described. Each road is described by two integers u v ( 1 \u2264 u, v \u2264 n , u v ) \u2014 the towns connected by this road. It is guaranteed that there is no more than one road between every two towns. It is guaranteed that you can go from any town to any other town via roads.",
    "output": "Print n numbers, the i - th of them is the minimum number of coins you need to spend on travel expenses to hold a fair in town i . Separate numbers with spaces.",
    "note": "Let' s look at the first sample. To hold a fair in town 1 you can bring goods from towns 1 ( 0 coins) , 2 ( 1 coin) and 4 ( 1 coin) . Total numbers of coins is 2 . Town 2 : Goods from towns 2 ( 0 ) , 1 ( 1 ) , 3 ( 1 ) . Sum equals 2 . Town 3 : Goods from towns 3 ( 0 ) , 2 ( 1 ) , 4 ( 1 ) . Sum equals 2 . Town 4 : Goods from towns 4 ( 0 ) , 1 ( 1 ) , 5 ( 1 ) . Sum equals 2 . Town 5 : Goods from towns 5 ( 0 ) , 4 ( 1 ) , 3 ( 2 ) . Sum equals 3 .",
    "topics": [
      "graphs",
      "greedy",
      "number theory",
      "shortest paths"
    ],
    "id": "986A"
  },
  {
    "title": "Pencils and Boxes",
    "url": "https://codeforces.com/problemset/problem/985/E",
    "history": "Mishka received a gift of multicolored pencils for his birthday! Unfortunately he lives in a monochrome world, where everything is of the same color and only saturation differs. This pack can be represented as a sequence a1, a2, . . . , an of n integer numbers \u2014 saturation of the color of each pencil. Now Mishka wants to put all the mess in the pack in order. He has an infinite number of empty boxes to do this. He would like to fill some boxes in such a way that: Each pencil belongs to exactly one box; Each non- empty box has at least k pencils in it; If pencils i and j belong to the same box, then | ai - aj| \u2264 d, where | x| means absolute value of x. Note that the opposite is optional, there can be pencils i and j such that | ai - aj| \u2264 d and they belong to different boxes. Help Mishka to determine if it' s possible to distribute all the pencils into boxes. Print \" YES\" if there exists such a distribution. Otherwise print \" NO\" .",
    "input": "The first line contains three integer numbers n, k and d ( 1 \u2264 k \u2264 n \u2264 5\u00b7105, 0 \u2264 d \u2264 109) \u2014 the number of pencils, minimal size of any non- empty box and maximal difference in saturation between any pair of pencils in the same box, respectively. The second line contains n integer numbers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) \u2014 saturation of color of each pencil.",
    "output": "Print \" YES\" if it' s possible to distribute all the pencils into boxes and satisfy all the conditions. Otherwise print \" NO\" .",
    "note": "In the first example it is possible to distribute pencils into 2 boxes with 3 pencils in each with any distribution. And you also can put all the pencils into the same box, difference of any pair in it won' t exceed 10. In the second example you can split pencils of saturations [ 4, 5, 3, 4] into 2 boxes of size 2 and put the remaining ones into another box.",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "985E"
  },
  {
    "title": "Liebig's Barrels",
    "url": "https://codeforces.com/problemset/problem/985/C",
    "history": "You have m = n\u00b7k wooden staves. The i- th stave has length ai. You have to assemble n barrels consisting of k staves each, you can use any k staves to construct a barrel. Each stave must belong to exactly one barrel. Let volume vj of barrel j be equal to the length of the minimal stave in it. You want to assemble exactly n barrels with the maximal total sum of volumes. But you have to make them equal enough, so a difference between volumes of any pair of the resulting barrels must not exceed l, i. e. | vx - vy| \u2264 l for any 1 \u2264 x \u2264 n and 1 \u2264 y \u2264 n. Print maximal total sum of volumes of equal enough barrels or 0 if it' s impossible to satisfy the condition above.",
    "input": "The first line contains three space- separated integers n, k and l ( 1 \u2264 n, k \u2264 105, 1 \u2264 n\u00b7k \u2264 105, 0 \u2264 l \u2264 109) . The second line contains m = n\u00b7k space- separated integers a1, a2, . . . , am ( 1 \u2264 ai \u2264 109) \u2014 lengths of staves.",
    "output": "Print single integer \u2014 maximal total sum of the volumes of barrels or 0 if it' s impossible to construct exactly n barrels satisfying the condition | vx - vy| \u2264 l for any 1 \u2264 x \u2264 n and 1 \u2264 y \u2264 n.",
    "note": "In the first example you can form the following barrels: [ 1, 2] , [ 2, 2] , [ 2, 3] , [ 2, 3] . In the second example you can form the following barrels: [ 10] , [ 10] . In the third example you can form the following barrels: [ 2, 5] . In the fourth example difference between volumes of barrels in any partition is at least 2 so it is impossible to make barrels equal enough.",
    "topics": [
      "greedy"
    ],
    "id": "985C"
  },
  {
    "title": "Cut 'em all!",
    "url": "https://codeforces.com/problemset/problem/982/C",
    "history": "You' re given a tree with n vertices. Your task is to determine the maximum possible number of edges that can be removed in such a way that all the remaining connected components will have even size.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) denoting the size of the tree. The next n - 1 lines contain two integers u , v ( 1 \u2264 u, v \u2264 n ) each, describing the vertices connected by the i - th edge. It' s guaranteed that the given edges form a tree.",
    "output": "Output a single integer k \u2014 the maximum number of edges that can be removed to leave all connected components with even size, or - 1 if it is impossible to remove edges in order to satisfy this property.",
    "note": "In the first example you can remove the edge between vertices 1 and 4 . The graph after that will have two connected components with two vertices in each. In the second example you can' t remove edges in such a way that all components have even number of vertices, so the answer is - 1 .",
    "topics": [
      "dfs and similar",
      "dp",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "982C"
  },
  {
    "title": "Bus of Characters",
    "url": "https://codeforces.com/problemset/problem/982/B",
    "history": "In the Bus of Characters there are n rows of seat, each having 2 seats. The width of both seats in the i - th row is w_ i centimeters. All integers w_ i are distinct. Initially the bus is empty. On each of 2n stops one passenger enters the bus. There are two types of passengers: an introvert always chooses a row where both seats are empty. Among these rows he chooses the one with the smallest seats width and takes one of the seats in it; an extrovert always chooses a row where exactly one seat is occupied ( by an introvert) . Among these rows he chooses the one with the largest seats width and takes the vacant place in it. You are given the seats width in each row and the order the passengers enter the bus. Determine which row each passenger will take.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 200 000 ) \u2014 the number of rows in the bus. The second line contains the sequence of integers w_ 1, w_ 2, . . . , w_ n ( 1 \u2264 w_ i \u2264 10^ 9 ) , where w_ i is the width of each of the seats in the i - th row. It is guaranteed that all w_ i are distinct. The third line contains a string of length 2n , consisting of digits ' 0' and ' 1' \u2014 the description of the order the passengers enter the bus. If the j - th character is ' 0' , then the passenger that enters the bus on the j - th stop is an introvert. If the j - th character is ' 1' , the the passenger that enters the bus on the j - th stop is an extrovert. It is guaranteed that the number of extroverts equals the number of introverts ( i. e. both numbers equal n ) , and for each extrovert there always is a suitable row.",
    "output": "Print 2n integers \u2014 the rows the passengers will take. The order of passengers should be the same as in input.",
    "note": "In the first example the first passenger ( introvert) chooses the row 2 , because it has the seats with smallest width. The second passenger ( introvert) chooses the row 1 , because it is the only empty row now. The third passenger ( extrovert) chooses the row 1 , because it has exactly one occupied seat and the seat width is the largest among such rows. The fourth passenger ( extrovert) chooses the row 2 , because it is the only row with an empty place.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "982B"
  },
  {
    "title": "Round Marriage",
    "url": "https://codeforces.com/problemset/problem/981/F",
    "history": "It' s marriage season in Ringland! Ringland has a form of a circle' s boundary of length L . There are n bridegrooms and n brides, and bridegrooms decided to marry brides. Of course, each bridegroom should choose exactly one bride, and each bride should be chosen by exactly one bridegroom. All objects in Ringland are located on the boundary of the circle, including the capital, bridegrooms' castles and brides' palaces. The castle of the i - th bridegroom is located at the distance a_ i from the capital in clockwise direction, and the palace of the i - th bride is located at the distance b_ i from the capital in clockwise direction. Let' s define the inconvenience of a marriage the maximum distance that some bride should walk along the circle from her palace to her bridegroom' s castle in the shortest direction ( in clockwise or counter- clockwise direction) . Help the bridegrooms of Ringland to choose brides in such a way that the inconvenience of the marriage is the smallest possible.",
    "input": "The first line contains two integers n and L ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 L \u2264 10^ 9 ) \u2014 the number of bridegrooms and brides and the length of Ringland. The next line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i < L ) \u2014 the distances from the capital to the castles of bridegrooms in clockwise direction. The next line contains n integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i < L ) \u2014 the distances from the capital to the palaces of brides in clockwise direction.",
    "output": "In the only line print the smallest possible inconvenience of the wedding, where the inconvenience is the largest distance traveled by a bride.",
    "note": "In the first example the first bridegroom should marry the second bride, the second bridegroom should marry the first bride. This way, the second bride should walk the distance of 1 , and the first bride should also walk the same distance. Thus, the inconvenience is equal to 1 . In the second example let p_ i be the bride the i - th bridegroom will marry. One of optimal p is the following: ( 6, 8, 1, 4, 5, 10, 3, 2, 7, 9) .",
    "topics": [
      "binary search",
      "graph matchings",
      "greedy"
    ],
    "id": "981F"
  },
  {
    "title": "Bookshelves",
    "url": "https://codeforces.com/problemset/problem/981/D",
    "history": "Mr Keks is a typical white- collar in Byteland. He has a bookshelf in his office with some books on it, each book has an integer positive price. Mr Keks defines the value of a shelf as the sum of books prices on it. Miraculously, Mr Keks was promoted and now he is moving into a new office. He learned that in the new office he will have not a single bookshelf, but exactly k bookshelves. He decided that the beauty of the k shelves is the bitwise AND of the values of all the shelves. He also decided that he won' t spend time on reordering the books, so he will place several first books on the first shelf, several next books on the next shelf and so on. Of course, he will place at least one book on each shelf. This way he will put all his books on k shelves in such a way that the beauty of the shelves is as large as possible. Compute this maximum possible beauty.",
    "input": "The first line contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 50 ) \u2014 the number of books and the number of shelves in the new office. The second line contains n integers a_ 1, a_ 2, . . . a_ n , ( 0 < a_ i < 2^ 50 ) \u2014 the prices of the books in the order they stand on the old shelf.",
    "output": "Print the maximum possible beauty of k shelves in the new office.",
    "note": "In the first example you can split the books as follows: ( 9 + 14 + 28 + 1 + 7) & ( 13 + 15) & ( 29 + 2) & ( 31) = 24. In the second example you can split the books as follows: ( 3 + 14 + 15 + 92) & ( 65) & ( 35 + 89) = 64.",
    "topics": [
      "bitmasks",
      "dp",
      "greedy"
    ],
    "id": "981D"
  },
  {
    "title": "The Number Games",
    "url": "https://codeforces.com/problemset/problem/980/E",
    "history": "The nation of Panel holds an annual show called The Number Games, where each district in the nation will be represented by one contestant. The nation has n districts numbered from 1 to n , each district has exactly one path connecting it to every other district. The number of fans of a contestant from district i is equal to 2^ i . This year, the president decided to reduce the costs. He wants to remove k contestants from the games. However, the districts of the removed contestants will be furious and will not allow anyone to cross through their districts. The president wants to ensure that all remaining contestants are from districts that can be reached from one another. He also wishes to maximize the total number of fans of the participating contestants. Which contestants should the president remove?",
    "input": "The first line of input contains two integers n and k ( 1 \u2264 k < n \u2264 10^ 6 ) \u2014 the number of districts in Panel, and the number of contestants the president wishes to remove, respectively. The next n- 1 lines each contains two integers a and b ( 1 \u2264 a, b \u2264 n , a b ) , that describe a road that connects two different districts a and b in the nation. It is guaranteed that there is exactly one path between every two districts.",
    "output": "Print k space- separated integers: the numbers of the districts of which the contestants should be removed, in increasing order of district number.",
    "note": "In the first sample, the maximum possible total number of fans is 2^ 2 + 2^ 5 + 2^ 6 = 100 . We can achieve it by removing the contestants of the districts 1, 3, and 4.",
    "topics": [
      "data structures",
      "greedy",
      "trees"
    ],
    "id": "980E"
  },
  {
    "title": "Posterized",
    "url": "https://codeforces.com/problemset/problem/980/C",
    "history": "Professor Ibrahim has prepared the final homework for his algorithm\u2019s class. He asked his students to implement the Posterization Image Filter. Their algorithm will be tested on an array of integers, where the i - th integer represents the color of the i - th pixel in the image. The image is in black and white, therefore the color of each pixel will be an integer between 0 and 255 ( inclusive) . To implement the filter, students are required to divide the black and white color range [ 0, 255] into groups of consecutive colors, and select one color in each group to be the group\u2019s key. In order to preserve image details, the size of a group must not be greater than k , and each color should belong to exactly one group. Finally, the students will replace the color of each pixel in the array with that color\u2019s assigned group key. To better understand the effect, here is an image of a basking turtle where the Posterization Filter was applied with increasing k to the right. To make the process of checking the final answer easier, Professor Ibrahim wants students to divide the groups and assign the keys in a way that produces the lexicographically smallest possible array.",
    "input": "The first line of input contains two integers n and k ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 256 ) , the number of pixels in the image, and the maximum size of a group, respectively. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i \u2264 255 ) , where p_ i is the color of the i - th pixel.",
    "output": "Print n space- separated integers; the lexicographically smallest possible array that represents the image after applying the Posterization filter.",
    "note": "One possible way to group colors and assign keys for the first sample: Color 2 belongs to the group [ 0, 2] , with group key 0 . Color 14 belongs to the group [ 12, 14] , with group key 12 . Colors 3 and 4 belong to group [ 3, 5] , with group key 3 . Other groups won' t affect the result so they are not listed here.",
    "topics": [
      "games",
      "greedy"
    ],
    "id": "980C"
  },
  {
    "title": "Kuro and GCD and XOR and SUM",
    "url": "https://codeforces.com/problemset/problem/979/D",
    "history": "Kuro is currently playing an educational game about numbers. The game focuses on the greatest common divisor ( GCD) , the XOR value, and the sum of two numbers. Kuro loves the game so much that he solves levels by levels day by day. Sadly, he' s going on a vacation for a day, and he isn' t able to continue his solving streak on his own. As Katie is a reliable person, Kuro kindly asked her to come to his house on this day to play the game for him. Initally, there is an empty array a . The game consists of q tasks of two types. The first type asks Katie to add a number u_ i to a . The second type asks Katie to find a number v existing in a such that k_ i | GCD( x_ i, v) , x_ i + v \u2264 s_ i , and x_ i \u2295 v is maximized, where \u2295 denotes the bitwise XOR operation, GCD( c, d) denotes the greatest common divisor of integers c and d , and y | x means x is divisible by y , or report - 1 if no such numbers are found. Since you are a programmer, Katie needs you to automatically and accurately perform the tasks in the game to satisfy her dear friend Kuro. Let' s help her!",
    "input": "The first line contains one integer q ( 2 \u2264 q \u2264 10^ 5 ) \u2014 the number of tasks the game wants you to perform. q lines follow, each line begins with an integer t_ i \u2014 the type of the task: If t_ i = 1 , an integer u_ i follow ( 1 \u2264 u_ i \u2264 10^ 5 ) \u2014 you have to add u_ i to the array a . If t_ i = 2 , three integers x_ i , k_ i , and s_ i follow ( 1 \u2264 x_ i, k_ i, s_ i \u2264 10^ 5 ) \u2014 you must find a number v existing in the array a such that k_ i | GCD( x_ i, v) , x_ i + v \u2264 s_ i , and x_ i \u2295 v is maximized, where \u2295 denotes the XOR operation, or report - 1 if no such numbers are found. It is guaranteed that the type of the first task is type 1 , and there exists at least one task of type 2 .",
    "output": "For each task of type 2 , output on one line the desired number v , or - 1 if no such numbers are found.",
    "note": "In the first example, there are 5 tasks: The first task requires you to add 1 into a . a is now { 1} . The second task requires you to add 2 into a . a is now { 1, 2} . The third task asks you a question with x = 1 , k = 1 and s = 3 . Taking both 1 and 2 as v satisfies 1 | GCD( 1, v) and 1 + v \u2264 3 . Because 2 \u2295 1 = 3 > 1 \u2295 1 = 0 , 2 is the answer to this task. The fourth task asks you a question with x = 1 , k = 1 and s = 2 . Only v = 1 satisfies 1 | GCD( 1, v) and 1 + v \u2264 2 , so 1 is the answer to this task. The fifth task asks you a question with x = 1 , k = 1 and s = 1 . There are no elements in a that satisfy the conditions, so we report - 1 as the answer to this task.",
    "topics": [
      "binary search",
      "bitmasks",
      "brute force",
      "data structures",
      "dp",
      "dsu",
      "greedy",
      "math",
      "number theory",
      "strings",
      "trees"
    ],
    "id": "979D"
  },
  {
    "title": "Treasure Hunt",
    "url": "https://codeforces.com/problemset/problem/979/B",
    "history": "After the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her. The three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons. A random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let' s call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of 7 because its subribbon a appears 7 times, and the ribbon abcdabc has the beauty of 2 because its subribbon abc appears twice. The rules are simple. The game will have n turns. Every turn, each of the cats must change strictly one color ( at one position) in his/ her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after n turns wins the treasure. Could you find out who is going to be the winner if they all play optimally?",
    "input": "The first line contains an integer n ( 0 \u2264 n \u2264 10^ 9 ) \u2014 the number of turns. Next 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than 10^ 5 uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.",
    "output": "Print the name of the winner ( \" Kuro\" , \" Shiro\" or \" Katie\" ) . If there are at least two cats that share the maximum beauty, print \" Draw\" .",
    "note": "In the first example, after 3 turns, Kuro can change his ribbon into ooooo, which has the beauty of 5 , while reaching such beauty for Shiro and Katie is impossible ( both Shiro and Katie can reach the beauty of at most 4 , for example by changing Shiro' s ribbon into SSiSS and changing Katie' s ribbon into Kaaaa) . Therefore, the winner is Kuro. In the fourth example, since the length of each of the string is 9 and the number of turn is 15 , everyone can change their ribbons in some way to reach the maximal beauty of 9 by changing their strings into zzzzzzzzz after 9 turns, and repeatedly change their strings into azzzzzzzz and then into zzzzzzzzz thrice. Therefore, the game ends in a draw.",
    "topics": [
      "greedy"
    ],
    "id": "979B"
  },
  {
    "title": "Petya's Exams",
    "url": "https://codeforces.com/problemset/problem/978/G",
    "history": "Petya studies at university. The current academic year finishes with n special days. Petya needs to pass m exams in those special days. The special days in this problem are numbered from 1 to n . There are three values about each exam: s_ i \u2014 the day, when questions for the i - th exam will be published, d_ i \u2014 the day of the i - th exam ( s_ i < d_ i ) , c_ i \u2014 number of days Petya needs to prepare for the i - th exam. For the i - th exam Petya should prepare in days between s_ i and d_ i- 1 , inclusive. There are three types of activities for Petya in each day: to spend a day doing nothing ( taking a rest) , to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can' t pass/ prepare for multiple exams in a day. He can' t mix his activities in a day. If he is preparing for the i - th exam in day j , then s_ i \u2264 j < d_ i . It is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days. Find the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.",
    "input": "The first line contains two integers n and m ( 2 \u2264 n \u2264 100, 1 \u2264 m \u2264 n) \u2014 the number of days and the number of exams. Each of the following m lines contains three integers s_ i , d_ i , c_ i ( 1 \u2264 s_ i < d_ i \u2264 n, 1 \u2264 c_ i \u2264 n) \u2014 the day, when questions for the i - th exam will be given, the day of the i - th exam, number of days Petya needs to prepare for the i - th exam. Guaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.",
    "output": "If Petya can not prepare and pass all the exams, print - 1. In case of positive answer, print n integers, where the j - th number is: ( m + 1) , if the j - th day is a day of some exam ( recall that in each day no more than one exam is conducted) , zero, if in the j - th day Petya will have a rest, i ( 1 \u2264 i \u2264 m ) , if Petya will prepare for the i - th exam in the day j ( the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it) . Assume that the exams are numbered in order of appearing in the input, starting from 1 . If there are multiple schedules, print any of them.",
    "note": "In the first example Petya can, for example, prepare for exam 1 in the first day, prepare for exam 2 in the second day, pass exam 1 in the third day, relax in the fourth day, and pass exam 2 in the fifth day. So, he can prepare and pass all exams. In the second example, there are three days and two exams. So, Petya can prepare in only one day ( because in two other days he should pass exams) . Then Petya can not prepare and pass all exams.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "978G"
  },
  {
    "title": "File Name",
    "url": "https://codeforces.com/problemset/problem/978/B",
    "history": "You can not just take the file and send it. When Polycarp trying to send a file in the social network \" Codehorses\" , he encountered an unexpected problem. If the name of the file contains three or more \" x\" ( lowercase Latin letters \" x\" ) in a row, the system considers that the file content does not correspond to the social network topic. In this case, the file is not sent and an error message is displayed. Determine the minimum number of characters to remove from the file name so after that the name does not contain \" xxx\" as a substring. Print 0 if the file name does not initially contain a forbidden substring \" xxx\" . You can delete characters in arbitrary positions ( not necessarily consecutive) . If you delete a character, then the length of a string is reduced by 1 . For example, if you delete the character in the position 2 from the string \" exxxii\" , then the resulting string is \" exxii\" .",
    "input": "The first line contains integer n ( 3 \u2264 n \u2264 100) \u2014 the length of the file name. The second line contains a string of length n consisting of lowercase Latin letters only \u2014 the file name.",
    "output": "Print the minimum number of characters to remove from the file name so after that the name does not contain \" xxx\" as a substring. If initially the file name dost not contain a forbidden substring \" xxx\" , print 0.",
    "note": "In the first example Polycarp tried to send a file with name contains number 33 , written in Roman numerals. But he can not just send the file, because it name contains three letters \" x\" in a row. To send the file he needs to remove any one of this letters.",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "978B"
  },
  {
    "title": "Well played!",
    "url": "https://codeforces.com/problemset/problem/976/E",
    "history": "Recently Max has got himself into popular CCG \" BrainStone\" . As \" BrainStone\" is a pretty intellectual game, Max has to solve numerous hard problems during the gameplay. Here is one of them: Max owns n creatures, i- th of them can be described with two numbers \u2014 its health hpi and its damage dmgi. Max also has two types of spells in stock: Doubles health of the creature ( hpi : = hpi\u00b72) ; Assigns value of health of the creature to its damage ( dmgi : = hpi) . Spell of first type can be used no more than a times in total, of the second type \u2014 no more than b times in total. Spell can be used on a certain creature multiple times. Spells can be used in arbitrary order. It isn' t necessary to use all the spells. Max is really busy preparing for his final exams, so he asks you to determine what is the maximal total damage of all creatures he can achieve if he uses spells in most optimal way.",
    "input": "The first line contains three integers n, a, b ( 1 \u2264 n \u2264 2\u00b7105, 0 \u2264 a \u2264 20, 0 \u2264 b \u2264 2\u00b7105) \u2014 the number of creatures, spells of the first type and spells of the second type, respectively. The i- th of the next n lines contain two number hpi and dmgi ( 1 \u2264 hpi, dmgi \u2264 109) \u2014 description of the i- th creature.",
    "output": "Print single integer \u2014 maximum total damage creatures can deal.",
    "note": "In the first example Max should use the spell of the first type on the second creature, then the spell of the second type on the same creature. Then total damage will be equal to 15 + 6\u00b72 = 27. In the second example Max should use the spell of the second type on the first creature, then the spell of the second type on the third creature. Total damage will be equal to 10 + 11 + 5 = 26.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "976E"
  },
  {
    "title": "Nested Segments",
    "url": "https://codeforces.com/problemset/problem/976/C",
    "history": "You are given a sequence a1, a2, . . . , an of one- dimensional segments numbered 1 through n. Your task is to find two distinct indices i and j such that segment ai lies within segment aj. Segment [ l1, r1] lies within segment [ l2, r2] iff l1 \u2265 l2 and r1 \u2264 r2. Print indices i and j. If there are multiple answers, print any of them. If no answer exists, print - 1 - 1.",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 3\u00b7105) \u2014 the number of segments. Each of the next n lines contains two integers li and ri ( 1 \u2264 li \u2264 ri \u2264 109) \u2014 the i- th segment.",
    "output": "Print two distinct indices i and j such that segment ai lies within segment aj. If there are multiple answers, print any of them. If no answer exists, print - 1 - 1.",
    "note": "In the first example the following pairs are considered correct: ( 2, 1) , ( 3, 1) , ( 4, 1) , ( 5, 1) \u2014 not even touching borders; ( 3, 2) , ( 4, 2) , ( 3, 5) , ( 4, 5) \u2014 touch one border; ( 5, 2) , ( 2, 5) \u2014 match exactly.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "976C"
  },
  {
    "title": "Short Code",
    "url": "https://codeforces.com/problemset/problem/965/E",
    "history": "Arkady' s code contains n variables. Each variable has a unique name consisting of lowercase English letters only. One day Arkady decided to shorten his code. He wants to replace each variable name with its non- empty prefix so that these new names are still unique ( however, a new name of some variable can coincide with some old name of another or same variable) . Among such possibilities he wants to find the way with the smallest possible total length of the new names. A string a is a prefix of a string b if you can delete some ( possibly none) characters from the end of b and obtain a . Please find this minimum possible total length of new names.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of variables. The next n lines contain variable names, one per line. Each name is non- empty and contains only lowercase English letters. The total length of these strings is not greater than 10^ 5 . The variable names are distinct.",
    "output": "Print a single integer \u2014 the minimum possible total length of new variable names.",
    "note": "In the first example one of the best options is to shorten the names in the given order as \" cod\" , \" co\" , \" c\" . In the second example we can shorten the last name to \" aac\" and the first name to \" a\" without changing the other names.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "strings",
      "trees"
    ],
    "id": "965E"
  },
  {
    "title": "Single-use Stones",
    "url": "https://codeforces.com/problemset/problem/965/D",
    "history": "A lot of frogs want to cross a river. A river is w units width, but frogs can only jump l units long, where l < w . Frogs can also jump on lengths shorter than l . but can' t jump longer. Hopefully, there are some stones in the river to help them. The stones are located at integer distances from the banks. There are a_ i stones at the distance of i units from the bank the frogs are currently at. Each stone can only be used once by one frog, after that it drowns in the water. What is the maximum number of frogs that can cross the river, given that then can only jump on the stones?",
    "input": "The first line contains two integers w and l ( 1 \u2264 l < w \u2264 10^ 5 ) \u2014 the width of the river and the maximum length of a frog' s jump. The second line contains w - 1 integers a_ 1, a_ 2, . . . , a_ w- 1 ( 0 \u2264 a_ i \u2264 10^ 4 ) , where a_ i is the number of stones at the distance i from the bank the frogs are currently at.",
    "output": "Print a single integer \u2014 the maximum number of frogs that can cross the river.",
    "note": "In the first sample two frogs can use the different stones at the distance 5 , and one frog can use the stones at the distances 3 and then 8 . In the second sample although there are two stones at the distance 5 , that does not help. The three paths are: 0 \u2192 3 \u2192 6 \u2192 9 \u2192 10 , 0 \u2192 2 \u2192 5 \u2192 8 \u2192 10 , 0 \u2192 1 \u2192 4 \u2192 7 \u2192 10 .",
    "topics": [
      "binary search",
      "flows",
      "greedy",
      "two pointers"
    ],
    "id": "965D"
  },
  {
    "title": "Destruction of a Tree",
    "url": "https://codeforces.com/problemset/problem/963/B",
    "history": "You are given a tree ( a graph with n vertices and n - 1 edges in which it' s possible to reach any vertex from any other vertex using only its edges) . A vertex can be destroyed if this vertex has even degree. If you destroy a vertex, all edges connected to it are also deleted. Destroy all vertices in the given tree or determine that it is impossible.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2\u00b7105) \u2014 number of vertices in a tree. The second line contains n integers p1, p2, . . . , pn ( 0 \u2264 pi \u2264 n) . If pi = \u0338 0 there is an edge between vertices i and pi. It is guaranteed that the given graph is a tree.",
    "output": "If it' s possible to destroy all vertices, print \" YES\" ( without quotes) , otherwise print \" NO\" ( without quotes) . If it' s possible to destroy all vertices, in the next n lines print the indices of the vertices in order you destroy them. If there are multiple correct answers, print any.",
    "note": "In the first example at first you have to remove the vertex with index 1 ( after that, the edges ( 1, 2) and ( 1, 4) are removed) , then the vertex with index 2 ( and edges ( 2, 3) and ( 2, 5) are removed) . After that there are no edges in the tree, so you can remove remaining vertices in any order.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "963B"
  },
  {
    "title": "Byteland, Berland and Disputed Cities",
    "url": "https://codeforces.com/problemset/problem/962/E",
    "history": "The cities of Byteland and Berland are located on the axis Ox . In addition, on this axis there are also disputed cities, which belong to each of the countries in their opinion. Thus, on the line Ox there are three types of cities: the cities of Byteland, the cities of Berland, disputed cities. Recently, the project BNET has been launched \u2014 a computer network of a new generation. Now the task of the both countries is to connect the cities so that the network of this country is connected. The countries agreed to connect the pairs of cities with BNET cables in such a way that: If you look at the only cities of Byteland and the disputed cities, then in the resulting set of cities, any city should be reachable from any other one by one or more cables, If you look at the only cities of Berland and the disputed cities, then in the resulting set of cities, any city should be reachable from any other one by one or more cables. Thus, it is necessary to choose a set of pairs of cities to connect by cables in such a way that both conditions are satisfied simultaneously. Cables allow bi- directional data transfer. Each cable connects exactly two distinct cities. The cost of laying a cable from one city to another is equal to the distance between them. Find the minimum total cost of laying a set of cables so that two subsets of cities ( Byteland and disputed cities, Berland and disputed cities) are connected. Each city is a point on the line Ox . It is technically possible to connect the cities a and b with a cable so that the city c ( a < c < b ) is not connected to this cable, where a , b and c are simultaneously coordinates of the cities a , b and c .",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cities. The following n lines contains an integer x_ i and the letter c_ i ( - 10^ 9\u2264 x_ i \u2264 10^ 9 ) \u2014 the coordinate of the city and its type. If the city belongs to Byteland, c_ i equals to ' B' . If the city belongs to Berland, c_ i equals to \u00abR\u00bb. If the city is disputed, c_ i equals to ' P' . All cities have distinct coordinates. Guaranteed, that the cities are given in the increasing order of their coordinates.",
    "output": "Print the minimal total length of such set of cables, that if we delete all Berland cities ( c_ i = ' R' ) , it will be possible to find a way from any remaining city to any other remaining city, moving only by cables. Similarly, if we delete all Byteland cities ( c_ i = ' B' ) , it will be possible to find a way from any remaining city to any other remaining city, moving only by cables.",
    "note": "In the first example, you should connect the first city with the second, the second with the third, and the third with the fourth. The total length of the cables will be 5 + 3 + 4 = 12 . In the second example there are no disputed cities, so you need to connect all the neighboring cities of Byteland and all the neighboring cities of Berland. The cities of Berland have coordinates 10, 21, 32 , so to connect them you need two cables of length 11 and 11 . The cities of Byteland have coordinates 14 and 16 , so to connect them you need one cable of length 2 . Thus, the total length of all cables is 11 + 11 + 2 = 24 .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "962E"
  },
  {
    "title": "Students in Railway Carriage",
    "url": "https://codeforces.com/problemset/problem/962/B",
    "history": "There are n consecutive seat places in a railway carriage. Each place is either empty or occupied by a passenger. The university team for the Olympiad consists of a student- programmers and b student- athletes. Determine the largest number of students from all a+ b students, which you can put in the railway carriage so that: no student- programmer is sitting next to the student- programmer; and no student- athlete is sitting next to the student- athlete. In the other words, there should not be two consecutive ( adjacent) places where two student- athletes or two student- programmers are sitting. Consider that initially occupied seat places are occupied by jury members ( who obviously are not students at all) .",
    "input": "The first line contain three integers n , a and b ( 1 \u2264 n \u2264 2\u00b710^ 5 , 0 \u2264 a, b \u2264 2\u00b710^ 5 , a + b > 0 ) \u2014 total number of seat places in the railway carriage, the number of student- programmers and the number of student- athletes. The second line contains a string with length n , consisting of characters \" . \" and \" * \" . The dot means that the corresponding place is empty. The asterisk means that the corresponding place is occupied by the jury member.",
    "output": "Print the largest number of students, which you can put in the railway carriage so that no student- programmer is sitting next to a student- programmer and no student- athlete is sitting next to a student- athlete.",
    "note": "In the first example you can put all student, for example, in the following way: * . AB* In the second example you can put four students, for example, in the following way: * BAB* BIn the third example you can put seven students, for example, in the following way: B* ABAB* * A* BThe letter A means a student- programmer, and the letter B \u2014 student- athlete.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "962B"
  },
  {
    "title": "Subsequence Counting",
    "url": "https://codeforces.com/problemset/problem/960/C",
    "history": "Pikachu had an array with him. He wrote down all the non- empty subsequences of the array on paper. Note that an array of size n has 2n - 1 non- empty subsequences in it. Pikachu being mischievous as he always is, removed all the subsequences in which Maximum_ element_ of_ the_ subsequence - Minimum_ element_ of_ subsequence \u2265 dPikachu was finally left with X subsequences. However, he lost the initial array he had, and now is in serious trouble. He still remembers the numbers X and d. He now wants you to construct any such array which will satisfy the above conditions. All the numbers in the final array should be positive integers less than 1018. Note the number of elements in the output array should not be more than 104. If no answer is possible, print - 1.",
    "input": "The only line of input consists of two space separated integers X and d ( 1 \u2264 X, d \u2264 109) .",
    "output": "Output should consist of two lines. First line should contain a single integer n ( 1 \u2264 n \u2264 10 000) \u2014 the number of integers in the final array. Second line should consist of n space separated integers \u2014 a1, a2, . . . , an ( 1 \u2264 ai < 1018) . If there is no answer, print a single integer - 1. If there are multiple answers, print any of them.",
    "note": "In the output of the first example case, the remaining subsequences after removing those with Maximum_ element_ of_ the_ subsequence - Minimum_ element_ of_ subsequence \u2265 5 are [ 5] , [ 5, 7] , [ 5, 6] , [ 5, 7, 6] , [ 50] , [ 7] , [ 7, 6] , [ 15] , [ 6] , [ 100] . There are 10 of them. Hence, the array [ 5, 50, 7, 15, 6, 100] is valid. Similarly, in the output of the second example case, the remaining sub- sequences after removing those with Maximum_ element_ of_ the_ subsequence - Minimum_ element_ of_ subsequence \u2265 2 are [ 10] , [ 100] , [ 1000] , [ 10000] . There are 4 of them. Hence, the array [ 10, 100, 1000, 10000] is valid.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "960C"
  },
  {
    "title": "Minimize the error",
    "url": "https://codeforces.com/problemset/problem/960/B",
    "history": "You are given two arrays A and B, each of size n. The error, E, between these two arrays is defined . You have to perform exactly k1 operations on array A and exactly k2 operations on array B. In one operation, you have to choose one element of the array and increase or decrease it by 1. Output the minimum possible value of error after k1 operations on array A and k2 operations on array B have been performed.",
    "input": "The first line contains three space- separated integers n ( 1 \u2264 n \u2264 103) , k1 and k2 ( 0 \u2264 k1 + k2 \u2264 103, k1 and k2 are non- negative) \u2014 size of arrays and number of operations to perform on A and B respectively. Second line contains n space separated integers a1, a2, . . . , an ( - 106 \u2264 ai \u2264 106) \u2014 array A. Third line contains n space separated integers b1, b2, . . . , bn ( - 106 \u2264 bi \u2264 106) \u2014 array B.",
    "output": "Output a single integer \u2014 the minimum possible value of after doing exactly k1 operations on array A and exactly k2 operations on array B.",
    "note": "In the first sample case, we cannot perform any operations on A or B. Therefore the minimum possible error E = ( 1 - 2) 2 + ( 2 - 3) 2 = 2. In the second sample case, we are required to perform exactly one operation on A. In order to minimize error, we increment the first element of A by 1. Now, A = [ 2, 2] . The error is now E = ( 2 - 2) 2 + ( 2 - 2) 2 = 0. This is the minimum possible error obtainable. In the third sample case, we can increase the first element of A to 8, using the all of the 5 moves available to us. Also, the first element of B can be reduced to 8 using the 6 of the 7 available moves. Now A = [ 8, 4] and B = [ 8, 4] . The error is now E = ( 8 - 8) 2 + ( 4 - 4) 2 = 0, but we are still left with 1 move for array B. Increasing the second element of B to 5 using the left move, we get B = [ 8, 5] and E = ( 8 - 8) 2 + ( 4 - 5) 2 = 1.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "960B"
  },
  {
    "title": "Mahmoud and Ehab and another array construction task",
    "url": "https://codeforces.com/problemset/problem/959/D",
    "history": "Mahmoud has an array a consisting of n integers. He asked Ehab to find another array b of the same length such that: b is lexicographically greater than or equal to a. bi \u2265 2. b is pairwise coprime: for every 1 \u2264 i < j \u2264 n, bi and bj are coprime, i. e. GCD( bi, bj) = 1, where GCD( w, z) is the greatest common divisor of w and z. Ehab wants to choose a special array so he wants the lexicographically minimal array between all the variants. Can you find it? An array x is lexicographically greater than an array y if there exists an index i such than xi > yi and xj = yj for all 1 \u2264 j < i. An array x is equal to an array y if xi = yi for all 1 \u2264 i \u2264 n.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) , the number of elements in a and b. The second line contains n integers a1, a2, . . . , an ( 2 \u2264 ai \u2264 105) , the elements of a.",
    "output": "Output n space- separated integers, the i- th of them representing bi.",
    "note": "Note that in the second sample, the array is already pairwise coprime so we printed it.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "959D"
  },
  {
    "title": "Mahmoud and Ehab and the message",
    "url": "https://codeforces.com/problemset/problem/959/B",
    "history": "Mahmoud wants to send a message to his friend Ehab. Their language consists of n words numbered from 1 to n. Some words have the same meaning so there are k groups of words such that all the words in some group have the same meaning. Mahmoud knows that the i- th word can be sent with cost ai. For each word in his message, Mahmoud can either replace it with another word of the same meaning or leave it as it is. Can you help Mahmoud determine the minimum cost of sending the message? The cost of sending the message is the sum of the costs of sending every word in it.",
    "input": "The first line of input contains integers n, k and m ( 1 \u2264 k \u2264 n \u2264 105, 1 \u2264 m \u2264 105) \u2014 the number of words in their language, the number of groups of words, and the number of words in Mahmoud' s message respectively. The second line contains n strings consisting of lowercase English letters of length not exceeding 20 which represent the words. It' s guaranteed that the words are distinct. The third line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 109) where ai is the cost of sending the i- th word. The next k lines describe the groups of words of same meaning. The next k lines each start with an integer x ( 1 \u2264 x \u2264 n) which means that there are x words in this group, followed by x integers which represent the indices of words in this group. It' s guaranteed that each word appears in exactly one group. The next line contains m space- separated words which represent Mahmoud' s message. Each of these words appears in the list of language' s words.",
    "output": "The only line should contain the minimum cost to send the message after replacing some words ( maybe none) with some words of the same meaning.",
    "note": "In the first sample, Mahmoud should replace the word \" second\" with the word \" loser\" because it has less cost so the cost will be 100+ 1+ 5+ 1= 107. In the second sample, Mahmoud shouldn' t do any replacement so the cost will be 100+ 1+ 5+ 10= 116.",
    "topics": [
      "dsu",
      "greedy",
      "implementation"
    ],
    "id": "959B"
  },
  {
    "title": "Guard Duty (medium)",
    "url": "https://codeforces.com/problemset/problem/958/E2",
    "history": "Princess Heidi decided to give orders to all her K Rebel ship commanders in person. Unfortunately, she is currently travelling through hyperspace, and will leave it only at N specific moments t1, t2, . . . , tN. The meetings with commanders must therefore start and stop at those times. Namely, each commander will board her ship at some time ti and disembark at some later time tj. Of course, Heidi needs to meet with all commanders, and no two meetings can be held during the same time. Two commanders cannot even meet at the beginnings/ endings of the hyperspace jumps, because too many ships in one position could give out their coordinates to the enemy. Your task is to find minimum time that Princess Heidi has to spend on meetings, with her schedule satisfying the conditions above.",
    "input": "The first line contains two integers K, N ( 2 \u2264 2K \u2264 N \u2264 500000, K \u2264 5000) . The second line contains N distinct integers t1, t2, . . . , tN ( 1 \u2264 ti \u2264 109) representing the times when Heidi leaves hyperspace.",
    "output": "Output only one integer: the minimum time spent on meetings.",
    "note": "In the first example, there are five valid schedules: [ 1, 4] , [ 6, 7] with total time 4, [ 1, 4] , [ 6, 12] with total time 9, [ 1, 4] , [ 7, 12] with total time 8, [ 1, 6] , [ 7, 12] with total time 10, and [ 4, 6] , [ 7, 12] with total time 7. So the answer is 4. In the second example, there is only 1 valid schedule: [ 1, 2] , [ 3, 4] , [ 5, 6] . For the third example, one possible schedule with total time 6 is: [ 1, 3] , [ 4, 5] , [ 14, 15] , [ 23, 25] .",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "958E2"
  },
  {
    "title": "Guard Duty (easy)",
    "url": "https://codeforces.com/problemset/problem/958/E1",
    "history": "The Rebel fleet is afraid that the Empire might want to strike back again. Princess Heidi needs to know if it is possible to assign R Rebel spaceships to guard B bases so that every base has exactly one guardian and each spaceship has exactly one assigned base ( in other words, the assignment is a perfect matching) . Since she knows how reckless her pilots are, she wants to be sure that any two ( straight) paths \u2013 from a base to its assigned spaceship \u2013 do not intersect in the galaxy plane ( that is, in 2D) , and so there is no risk of collision.",
    "input": "The first line contains two space- separated integers R, B( 1 \u2264 R, B \u2264 10) . For 1 \u2264 i \u2264 R, the i + 1- th line contains two space- separated integers xi and yi ( | xi| , | yi| \u2264 10000) denoting the coordinates of the i- th Rebel spaceship. The following B lines have the same format, denoting the position of bases. It is guaranteed that no two points coincide and that no three points are on the same line.",
    "output": "If it is possible to connect Rebel spaceships and bases so as satisfy the constraint, output Yes, otherwise output No ( without quote) .",
    "note": "For the first example, one possible way is to connect the Rebels and bases in order. For the second example, there is no perfect matching between Rebels and bases.",
    "topics": [
      "brute force",
      "geometry",
      "greedy",
      "math"
    ],
    "id": "958E1"
  },
  {
    "title": "Maximum Control (medium)",
    "url": "https://codeforces.com/problemset/problem/958/B2",
    "history": "The Resistance is trying to take control over as many planets of a particular solar system as possible. Princess Heidi is in charge of the fleet, and she must send ships to some planets in order to maximize the number of controlled planets. The Galaxy contains N planets, connected by bidirectional hyperspace tunnels in such a way that there is a unique path between every pair of the planets. A planet is controlled by the Resistance if there is a Resistance ship in its orbit, or if the planet lies on the shortest path between some two planets that have Resistance ships in their orbits. Heidi has not yet made up her mind as to how many ships to use. Therefore, she is asking you to compute, for every K = 1, 2, 3, . . . , N, the maximum number of planets that can be controlled with a fleet consisting of K ships.",
    "input": "The first line of the input contains an integer N ( 1 \u2264 N \u2264 105) \u2013 the number of planets in the galaxy. The next N - 1 lines describe the hyperspace tunnels between the planets. Each of the N - 1 lines contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 N) indicating that there is a bidirectional hyperspace tunnel between the planets u and v. It is guaranteed that every two planets are connected by a path of tunnels, and that each tunnel connects a different pair of planets.",
    "output": "On a single line, print N space- separated integers. The K- th number should correspond to the maximum number of planets that can be controlled by the Resistance using a fleet of K ships.",
    "note": "Consider the first example. If K = 1, then Heidi can only send one ship to some planet and control it. However, for K \u2265 2, sending ships to planets 1 and 3 will allow the Resistance to control all planets.",
    "topics": [
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "958B2"
  },
  {
    "title": "Feed the cat",
    "url": "https://codeforces.com/problemset/problem/955/A",
    "history": "After waking up at hh: mm, Andrew realised that he had forgotten to feed his only cat for yet another time ( guess why there' s only one cat) . The cat' s current hunger level is H points, moreover each minute without food increases his hunger by D points. At any time Andrew can visit the store where tasty buns are sold ( you can assume that is doesn' t take time to get to the store and back) . One such bun costs C roubles and decreases hunger by N points. Since the demand for bakery drops heavily in the evening, there is a special 20",
    "input": "The first line contains two integers hh and mm ( 00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59) \u2014 the time of Andrew' s awakening. The second line contains four integers H, D, C and N ( 1 \u2264 H \u2264 105, 1 \u2264 D, C, N \u2264 102) .",
    "output": "Output the minimum amount of money to within three decimal digits. You answer is considered correct, if its absolute or relative error does not exceed 10 - 4. Formally, let your answer be a, and the jury' s answer be b. Your answer is considered correct if .",
    "note": "In the first sample Andrew can visit the store at exactly 20: 00. The cat' s hunger will be equal to 315, hence it will be necessary to purchase 315 buns. The discount makes the final answer 25200 roubles. In the second sample it' s optimal to visit the store right after he wakes up. Then he' ll have to buy 91 bins per 15 roubles each and spend a total of 1365 roubles.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "955A"
  },
  {
    "title": "Castle Defense",
    "url": "https://codeforces.com/problemset/problem/954/G",
    "history": "Today you are going to lead a group of elven archers to defend the castle that is attacked by an army of angry orcs. Three sides of the castle are protected by impassable mountains and the remaining side is occupied by a long wall that is split into n sections. At this moment there are exactly ai archers located at the i- th section of this wall. You know that archer who stands at section i can shoot orcs that attack section located at distance not exceeding r, that is all such sections j that | i - j| \u2264 r. In particular, r = 0 means that archers are only capable of shooting at orcs who attack section i. Denote as defense level of section i the total number of archers who can shoot at the orcs attacking this section. Reliability of the defense plan is the minimum value of defense level of individual wall section. There is a little time left till the attack so you can' t redistribute archers that are already located at the wall. However, there is a reserve of k archers that you can distribute among wall sections in arbitrary way. You would like to achieve maximum possible reliability of the defence plan.",
    "input": "The first line of the input contains three integers n, r and k ( 1 \u2264 n \u2264 500 000, 0 \u2264 r \u2264 n, 0 \u2264 k \u2264 1018) \u2014 the number of sections of the wall, the maximum distance to other section archers can still shoot and the number of archers yet to be distributed along the wall. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) \u2014 the current number of archers at each section.",
    "output": "Print one integer \u2014 the maximum possible value of defense plan reliability, i. e. the maximum possible value of minimum defense level if we distribute k additional archers optimally.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "954G"
  },
  {
    "title": "Water Taps",
    "url": "https://codeforces.com/problemset/problem/954/E",
    "history": "Consider a system of n water taps all pouring water into the same container. The i- th water tap can be set to deliver any amount of water from 0 to ai ml per second ( this amount may be a real number) . The water delivered by i- th tap has temperature ti. If for every you set i- th tap to deliver exactly xi ml of water per second, then the resulting temperature of water will be ( if , then to avoid division by zero we state that the resulting water temperature is 0) . You have to set all the water taps in such a way that the resulting temperature is exactly T. What is the maximum amount of water you may get per second if its temperature has to be T?",
    "input": "The first line contains two integers n and T ( 1 \u2264 n \u2264 200000, 1 \u2264 T \u2264 106) \u2014 the number of water taps and the desired temperature of water, respectively. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 106) where ai is the maximum amount of water i- th tap can deliver per second. The third line contains n integers t1, t2, . . . , tn ( 1 \u2264 ti \u2264 106) \u2014 the temperature of water each tap delivers.",
    "output": "Print the maximum possible amount of water with temperature exactly T you can get per second ( if it is impossible to obtain water with such temperature, then the answer is considered to be 0) . Your answer is considered correct if its absolute or relative error doesn' t exceed 10 - 6.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "954E"
  },
  {
    "title": "Intercepted Message",
    "url": "https://codeforces.com/problemset/problem/950/B",
    "history": "Hacker Zhorik wants to decipher two secret messages he intercepted yesterday. Yeah message is a sequence of encrypted blocks, each of them consists of several bytes of information. Zhorik knows that each of the messages is an archive containing one or more files. Zhorik knows how each of these archives was transferred through the network: if an archive consists of k files of sizes l1, l2, . . . , lk bytes, then the i- th file is split to one or more blocks bi, 1, bi, 2, . . . , bi, mi ( here the total length of the blocks bi, 1 + bi, 2 + . . . + bi, mi is equal to the length of the file li) , and after that all blocks are transferred through the network, maintaining the order of files in the archive. Zhorik thinks that the two messages contain the same archive, because their total lengths are equal. However, each file can be split in blocks in different ways in the two messages. You are given the lengths of blocks in each of the two messages. Help Zhorik to determine what is the maximum number of files could be in the archive, if the Zhorik' s assumption is correct.",
    "input": "The first line contains two integers n, m ( 1 \u2264 n, m \u2264 105) \u2014 the number of blocks in the first and in the second messages. The second line contains n integers x1, x2, . . . , xn ( 1 \u2264 xi \u2264 106) \u2014 the length of the blocks that form the first message. The third line contains m integers y1, y2, . . . , ym ( 1 \u2264 yi \u2264 106) \u2014 the length of the blocks that form the second message. It is guaranteed that x1 + . . . + xn = y1 + . . . + ym. Also, it is guaranteed that x1 + . . . + xn \u2264 106.",
    "output": "Print the maximum number of files the intercepted array could consist of.",
    "note": "In the first example the maximum number of files in the archive is 3. For example, it is possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1 + 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8. In the second example it is possible that the archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note that the order of files is kept while transferring archives through the network, so we can' t say that there are three files of sizes 1, 10 and 100. In the third example the only possibility is that the archive contains a single file of size 4.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "950B"
  },
  {
    "title": "Curfew",
    "url": "https://codeforces.com/problemset/problem/949/D",
    "history": "Instructors of Some Informatics School make students go to bed. The house contains n rooms, in each room exactly b students were supposed to sleep. However, at the time of curfew it happened that many students are not located in their assigned rooms. The rooms are arranged in a row and numbered from 1 to n. Initially, in i- th room there are ai students. All students are currently somewhere in the house, therefore a1 + a2 + . . . + an = nb. Also 2 instructors live in this house. The process of curfew enforcement is the following. One instructor starts near room 1 and moves toward room n, while the second instructor starts near room n and moves toward room 1. After processing current room, each instructor moves on to the next one. Both instructors enter rooms and move simultaneously, if n is odd, then only the first instructor processes the middle room. When all rooms are processed, the process ends. When an instructor processes a room, she counts the number of students in the room, then turns off the light, and locks the room. Also, if the number of students inside the processed room is not equal to b, the instructor writes down the number of this room into her notebook ( and turns off the light, and locks the room) . Instructors are in a hurry ( to prepare the study plan for the next day) , so they don' t care about who is in the room, but only about the number of students. While instructors are inside the rooms, students can run between rooms that are not locked and not being processed. A student can run by at most d rooms, that is she can move to a room with number that differs my at most d. Also, after ( or instead of) running each student can hide under a bed in a room she is in. In this case the instructor will not count her during the processing. In each room any number of students can hide simultaneously. Formally, here is what' s happening: A curfew is announced, at this point in room i there are ai students. Each student can run to another room but not further than d rooms away from her initial room, or stay in place. After that each student can optionally hide under a bed. Instructors enter room 1 and room n, they count students there and lock the room ( after it no one can enter or leave this room) . Each student from rooms with numbers from 2 to n - 1 can run to another room but not further than d rooms away from her current room, or stay in place. Each student can optionally hide under a bed. Instructors move from room 1 to room 2 and from room n to room n - 1. This process continues until all rooms are processed. Let x1 denote the number of rooms in which the first instructor counted the number of non- hidden students different from b, and x2 be the same number for the second instructor. Students know that the principal will only listen to one complaint, therefore they want to minimize the maximum of numbers xi. Help them find this value if they use the optimal strategy.",
    "input": "The first line contains three integers n, d and b ( 2 \u2264 n \u2264 100 000, 1 \u2264 d \u2264 n - 1, 1 \u2264 b \u2264 10 000) , number of rooms in the house, running distance of a student, official number of students in a room. The second line contains n integers a1, a2, . . . , an ( 0 \u2264 ai \u2264 109) , i- th of which stands for the number of students in the i- th room before curfew announcement. It is guaranteed that a1 + a2 + . . . + an = nb.",
    "output": "Output one integer, the minimal possible value of the maximum of xi.",
    "note": "In the first sample the first three rooms are processed by the first instructor, and the last two are processed by the second instructor. One of the optimal strategies is the following: firstly three students run from room 5 to room 4, on the next stage two of them run to room 3, and one of those two hides under a bed. This way, the first instructor writes down room 2, and the second writes down nothing. In the second sample one of the optimal strategies is the following: firstly all students in room 1 hide, all students from room 2 run to room 3. On the next stage one student runs from room 3 to room 4, and 5 students hide. This way, the first instructor writes down rooms 1 and 2, the second instructor writes down rooms 5 and 6.",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "949D"
  },
  {
    "title": "Zebras",
    "url": "https://codeforces.com/problemset/problem/949/A",
    "history": "Oleg writes down the history of the days he lived. For each day he decides if it was good or bad. Oleg calls a non- empty sequence of days a zebra, if it starts with a bad day, ends with a bad day, and good and bad days are alternating in it. Let us denote bad days as 0 and good days as 1. Then, for example, sequences of days 0, 010, 01010 are zebras, while sequences 1, 0110, 0101 are not. Oleg tells you the story of days he lived in chronological order in form of string consisting of 0 and 1. Now you are interested if it is possible to divide Oleg' s life history into several subsequences, each of which is a zebra, and the way it can be done. Each day must belong to exactly one of the subsequences. For each of the subsequences, days forming it must be ordered chronologically. Note that subsequence does not have to be a group of consecutive days.",
    "input": "In the only line of input data there is a non- empty string s consisting of characters 0 and 1, which describes the history of Oleg' s life. Its length ( denoted as | s| ) does not exceed 200 000 characters.",
    "output": "If there is a way to divide history into zebra subsequences, in the first line of output you should print an integer k ( 1 \u2264 k \u2264 | s| ) , the resulting number of subsequences. In the i- th of following k lines first print the integer li ( 1 \u2264 li \u2264 | s| ) , which is the length of the i- th subsequence, and then li indices of days forming the subsequence. Indices must follow in ascending order. Days are numbered starting from 1. Each index from 1 to n must belong to exactly one subsequence. If there is no way to divide day history into zebra subsequences, print - 1. Subsequences may be printed in any order. If there are several solutions, you may print any of them. You do not have to minimize nor maximize the value of k.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "949A"
  },
  {
    "title": "Largest Beautiful Number",
    "url": "https://codeforces.com/problemset/problem/946/E",
    "history": "Yes, that' s another problem with definition of \" beautiful\" numbers. Let' s call a positive integer x beautiful if its decimal representation without leading zeroes contains even number of digits, and there exists a permutation of this representation which is palindromic. For example, 4242 is a beautiful number, since it contains 4 digits, and there exists a palindromic permutation 2442. Given a positive integer s, find the largest beautiful number which is less than s.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 105) \u2014 the number of testcases you have to solve. Then t lines follow, each representing one testcase and containing one string which is the decimal representation of number s. It is guaranteed that this string has even length, contains no leading zeroes, and there exists at least one beautiful number less than s. The sum of lengths of s over all testcases doesn' t exceed 2\u00b7105.",
    "output": "For each testcase print one line containing the largest beautiful number which is less than s ( it is guaranteed that the answer exists) .",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "946E"
  },
  {
    "title": "String Transformation",
    "url": "https://codeforces.com/problemset/problem/946/C",
    "history": "You are given a string s consisting of | s| small english letters. In one move you can replace any character of this string to the next character in alphabetical order ( a will be replaced with b, s will be replaced with t, etc. ) . You cannot replace letter z with any other letter. Your target is to make some number of moves ( not necessary minimal) to get string abcdefghijklmnopqrstuvwxyz ( english alphabet) as a subsequence. Subsequence of the string is the string that is obtained by deleting characters at some positions. You need to print the string that will be obtained from the given string and will be contain english alphabet as a subsequence or say that it is impossible.",
    "input": "The only one line of the input consisting of the string s consisting of | s| ( 1 \u2264 | s| \u2264 105) small english letters.",
    "output": "If you can get a string that can be obtained from the given string and will contain english alphabet as a subsequence, print it. Otherwise print \u00ab- 1\u00bb ( without quotes) .",
    "note": "",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "946C"
  },
  {
    "title": "Partition",
    "url": "https://codeforces.com/problemset/problem/946/A",
    "history": "You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. Let B be the sum of elements belonging to b, and C be the sum of elements belonging to c ( if some of these sequences is empty, then its sum is 0) . What is the maximum possible value of B - C?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 100) \u2014 the number of elements in a. The second line contains n integers a1, a2, . . . , an ( - 100 \u2264 ai \u2264 100) \u2014 the elements of sequence a.",
    "output": "Print the maximum possible value of B - C, where B is the sum of elements of sequence b, and C is the sum of elements of sequence c.",
    "note": "In the first example we may choose b = 1, 0, c = - 2. Then B = 1, C = - 2, B - C = 3. In the second example we choose b = 16, 23, 16, 15, 42, 8, c = ( an empty sequence) . Then B = 120, C = 0, B - C = 120.",
    "topics": [
      "greedy"
    ],
    "id": "946A"
  },
  {
    "title": "Cashback",
    "url": "https://codeforces.com/problemset/problem/940/E",
    "history": "Since you are the best Wraith King, Nizhniy Magazin \u00abMir\u00bb at the centre of Vinnytsia is offering you a discount. You are given an array a of length n and an integer c. The value of some array b of length k is the sum of its elements except for the smallest. For example, the value of the array [ 3, 1, 6, 5, 2] with c = 2 is 3 + 6 + 5 = 14. Among all possible partitions of a into contiguous subarrays output the smallest possible sum of the values of these subarrays.",
    "input": "The first line contains integers n and c ( 1 \u2264 n, c \u2264 100 000) . The second line contains n integers ai ( 1 \u2264 ai \u2264 109) \u2014 elements of a.",
    "output": "Output a single integer \u2014 the smallest possible sum of values of these subarrays of some partition of a.",
    "note": "In the first example any partition yields 6 as the sum. In the second example one of the optimal partitions is [ 1, 1] , [ 10, 10, 10, 10, 10, 10, 9, 10, 10, 10] with the values 2 and 90 respectively. In the third example one of the optimal partitions is [ 2, 3] , [ 6, 4, 5, 7] , [ 1] with the values 3, 13 and 1 respectively. In the fourth example one of the optimal partitions is [ 1] , [ 3, 4, 5, 5, 3, 4] , [ 1] with the values 1, 21 and 1 respectively.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math"
    ],
    "id": "940E"
  },
  {
    "title": "Our Tanya is Crying Out Loud",
    "url": "https://codeforces.com/problemset/problem/940/B",
    "history": "Right now she actually isn' t. But she will be, if you don' t solve this problem. You are given integers n, k, A and B. There is a number x, which is initially equal to n. You are allowed to perform two types of operations: Subtract 1 from x. This operation costs you A coins. Divide x by k. Can be performed only if x is divisible by k. This operation costs you B coins. What is the minimum amount of coins you have to pay to make x equal to 1?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2\u00b7109) . The second line contains a single integer k ( 1 \u2264 k \u2264 2\u00b7109) . The third line contains a single integer A ( 1 \u2264 A \u2264 2\u00b7109) . The fourth line contains a single integer B ( 1 \u2264 B \u2264 2\u00b7109) .",
    "output": "Output a single integer \u2014 the minimum amount of coins you have to pay to make x equal to 1.",
    "note": "In the first testcase, the optimal strategy is as follows: Subtract 1 from x ( 9 \u2192 8) paying 3 coins. Divide x by 2 ( 8 \u2192 4) paying 1 coin. Divide x by 2 ( 4 \u2192 2) paying 1 coin. Divide x by 2 ( 2 \u2192 1) paying 1 coin. The total cost is 6 coins. In the second test case the optimal strategy is to subtract 1 from x 4 times paying 8 coins in total.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "940B"
  },
  {
    "title": "Points on the line",
    "url": "https://codeforces.com/problemset/problem/940/A",
    "history": "We' ve got no test cases. A big olympiad is coming up. But the problemsetters' number one priority should be adding another problem to the round. The diameter of a multiset of points on the line is the largest distance between two points from this set. For example, the diameter of the multiset 1, 3, 2, 1 is 2. Diameter of multiset consisting of one point is 0. You are given n points on the line. What is the minimum number of points you have to remove, so that the diameter of the multiset of the remaining points will not exceed d?",
    "input": "The first line contains two integers n and d ( 1 \u2264 n \u2264 100, 0 \u2264 d \u2264 100) \u2014 the amount of points and the maximum allowed diameter respectively. The second line contains n space separated integers ( 1 \u2264 xi \u2264 100) \u2014 the coordinates of the points.",
    "output": "Output a single integer \u2014 the minimum number of points you have to remove.",
    "note": "In the first test case the optimal strategy is to remove the point with coordinate 4. The remaining points will have coordinates 1 and 2, so the diameter will be equal to 2 - 1 = 1. In the second test case the diameter is equal to 0, so its is unnecessary to remove any points. In the third test case the optimal strategy is to remove points with coordinates 1, 9 and 10. The remaining points will have coordinates 3, 4 and 6, so the diameter will be equal to 6 - 3 = 3.",
    "topics": [
      "brute force",
      "greedy",
      "sortings"
    ],
    "id": "940A"
  },
  {
    "title": "Maximize!",
    "url": "https://codeforces.com/problemset/problem/939/E",
    "history": "You are given a multiset S consisting of positive integers ( initially empty) . There are two kind of queries: Add a positive integer to S, the newly added integer is not less than any number in it. Find a subset s of the set S such that the value is maximum possible. Here max( s) means maximum value of elements in s, \u2014 the average value of numbers in s. Output this maximum possible value of .",
    "input": "The first line contains a single integer Q ( 1 \u2264 Q \u2264 5\u00b7105) \u2014 the number of queries. Each of the next Q lines contains a description of query. For queries of type 1 two integers 1 and x are given, where x ( 1 \u2264 x \u2264 109) is a number that you should add to S. It' s guaranteed that x is not less than any number in S. For queries of type 2, a single integer 2 is given. It' s guaranteed that the first query has type 1, i. e. S is not empty when a query of type 2 comes.",
    "output": "Output the answer for each query of the second type in the order these queries are given in input. Each number should be printed in separate line. Your answer is considered correct, if each of your answers has absolute or relative error not greater than 10 - 6. Formally, let your answer be a, and the jury' s answer be b. Your answer is considered correct if .",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "ternary search",
      "two pointers"
    ],
    "id": "939E"
  },
  {
    "title": "Love Rescue",
    "url": "https://codeforces.com/problemset/problem/939/D",
    "history": "Valya and Tolya are an ideal pair, but they quarrel sometimes. Recently, Valya took offense at her boyfriend because he came to her in t- shirt with lettering that differs from lettering on her pullover. Now she doesn' t want to see him and Tolya is seating at his room and crying at her photos all day long. This story could be very sad but fairy godmother ( Tolya' s grandmother) decided to help them and restore their relationship. She secretly took Tolya' s t- shirt and Valya' s pullover and wants to make the letterings on them same. In order to do this, for one unit of mana she can buy a spell that can change some letters on the clothes. Your task is calculate the minimum amount of mana that Tolya' s grandmother should spend to rescue love of Tolya and Valya. More formally, letterings on Tolya' s t- shirt and Valya' s pullover are two strings with same length n consisting only of lowercase English letters. Using one unit of mana, grandmother can buy a spell of form ( c1, c2) ( where c1 and c2 are some lowercase English letters) , which can arbitrary number of times transform a single letter c1 to c2 and vise- versa on both Tolya' s t- shirt and Valya' s pullover. You should find the minimum amount of mana that grandmother should spend to buy a set of spells that can make the letterings equal. In addition you should output the required set of spells.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the length of the letterings. The second line contains a string with length n, consisting of lowercase English letters \u2014 the lettering on Valya' s pullover. The third line contains the lettering on Tolya' s t- shirt in the same format.",
    "output": "In the first line output a single integer \u2014 the minimum amount of mana t required for rescuing love of Valya and Tolya. In the next t lines output pairs of space- separated lowercase English letters \u2014 spells that Tolya' s grandmother should buy. Spells and letters in spells can be printed in any order. If there are many optimal answers, output any.",
    "note": "In first example it' s enough to buy two spells: ( ' a' , ' d' ) and ( ' b' , ' a' ) . Then first letters will coincide when we will replace letter ' a' with ' d' . Second letters will coincide when we will replace ' b' with ' a' . Third letters will coincide when we will at first replace ' b' with ' a' and then ' a' with ' d' .",
    "topics": [
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "strings"
    ],
    "id": "939D"
  },
  {
    "title": "Erasing Substrings",
    "url": "https://codeforces.com/problemset/problem/938/F",
    "history": "You are given a string s, initially consisting of n lowercase Latin letters. After that, you perform k operations with it, where . During i- th operation you must erase some substring of length exactly 2i - 1 from s. Print the lexicographically minimal string you may obtain after performing k such operations.",
    "input": "The only line contains one string s consisting of n lowercase Latin letters ( 1 \u2264 n \u2264 5000) .",
    "output": "Print the lexicographically minimal string you may obtain after performing k operations.",
    "note": "Possible operations in examples: adcbca adcba aba; abacabadabacaba abcabadabacaba aabadabacaba aabacaba.",
    "topics": [
      "bitmasks",
      "dp",
      "greedy"
    ],
    "id": "938F"
  },
  {
    "title": "Run For Your Prize",
    "url": "https://codeforces.com/problemset/problem/938/B",
    "history": "You and your friend are participating in a TV show \" Run For Your Prize\" . At the start of the show n prizes are located on a straight line. i- th prize is located at position ai. Positions of all prizes are distinct. You start at position 1, your friend \u2014 at position 106 ( and there is no prize in any of these two positions) . You have to work as a team and collect all prizes in minimum possible time, in any order. You know that it takes exactly 1 second to move from position x to position x + 1 or x - 1, both for you and your friend. You also have trained enough to instantly pick up any prize, if its position is equal to your current position ( and the same is true for your friend) . Carrying prizes does not affect your speed ( or your friend' s speed) at all. Now you may discuss your strategy with your friend and decide who will pick up each prize. Remember that every prize must be picked up, either by you or by your friend. What is the minimum number of seconds it will take to pick up all the prizes?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 105) \u2014 the number of prizes. The second line contains n integers a1, a2, . . . , an ( 2 \u2264 ai \u2264 106 - 1) \u2014 the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.",
    "output": "Print one integer \u2014 the minimum number of seconds it will take to collect all prizes.",
    "note": "In the first example you take all the prizes: take the first at 1, the second at 2 and the third at 8. In the second example you take the first prize in 1 second and your friend takes the other in 5 seconds, you do this simultaneously, so the total time is 5.",
    "topics": [
      "brute force",
      "greedy"
    ],
    "id": "938B"
  },
  {
    "title": "World of Tank",
    "url": "https://codeforces.com/problemset/problem/936/D",
    "history": "Vitya loves programming and problem solving, but sometimes, to distract himself a little, he plays computer games. Once he found a new interesting game about tanks, and he liked it so much that he went through almost all levels in one day. Remained only the last level, which was too tricky. Then Vitya remembered that he is a programmer, and wrote a program that helped him to pass this difficult level. Try do the same. The game is organized as follows. There is a long road, two cells wide and n cells long. Some cells have obstacles. You control a tank that occupies one cell. Initially, the tank is located before the start of the road, in a cell with coordinates ( 0, 1) . Your task is to move the tank to the end of the road, to the cell ( n + 1, 1) or ( n + 1, 2) . Every second the tank moves one cell to the right: the coordinate x is increased by one. When you press the up or down arrow keys, the tank instantly changes the lane, that is, the y coordinate. When you press the spacebar, the tank shoots, and the nearest obstacle along the lane in which the tank rides is instantly destroyed. In order to load a gun, the tank needs t seconds. Initially, the gun is not loaded, that means, the first shot can be made only after t seconds after the tank starts to move. If at some point the tank is in the same cell with an obstacle not yet destroyed, it burns out. If you press the arrow exactly at the moment when the tank moves forward, the tank will first move forward, and then change the lane, so it will not be possible to move diagonally. Your task is to find out whether it is possible to pass the level, and if possible, to find the order of actions the player need to make.",
    "input": "The first line contains four integers n, m1, m2 and t, the length of the field, the number of obstacles in the first lane, the number of obstacles in the second lane and the number of tank steps before reloading, respectively ( 1 \u2264 n \u2264 109; 0 \u2264 m1, m2 \u2264 n; 0 \u2264 m1 + m2 \u2264 106; 1 \u2264 t \u2264 n) . The next two lines contain a description of the obstacles. The first of these lines contains m1 numbers xi \u2014 the obstacle coordinates in the first lane ( 1 \u2264 xi \u2264 n; xi < xi + 1) . The y coordinate for all these obstacles will be 1. The second line contains m2 numbers describing the obstacles of the second lane in the same format. The y coordinate of all these obstacles will be 2.",
    "output": "In the first line print \u00abYes\u00bb, if it is possible to pass the level, or \u00abNo\u00bb, otherwise. If it is possible, then in the second line print the number of times the tank moves from one lane to another, and in the next line print the coordinates of the transitions, one number per transition: the coordinate x ( 0 \u2264 x \u2264 n + 1) . All transition coordinates coordinates must be distinct and should be output in strictly increasing order. The number of transitions should not exceed 2\u00b7106. If the tank can pass the level, then it can do it using no more than 2\u00b7106 transitions. In the fourth line print the number of shots that the tank makes during the movement, in the following lines print two numbers, x and y coordinates of the point ( 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 2) , from which the tank fired a shot, the number of shots must not exceed m1 + m2. Shots must be output in the order in which they are fired. If there are several solutions, output any one.",
    "note": "Picture for the first sample test.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "936D"
  },
  {
    "title": "Fafa and Array",
    "url": "https://codeforces.com/problemset/problem/935/F",
    "history": "Fafa has an array A of n positive integers, the function f( A) is defined as . He wants to do q queries of two types: 1 l r x \u2014 find the maximum possible value of f( A) , if x is to be added to one element in the range [ l, r] . You can choose to which element to add x. 2 l r x \u2014 increase all the elements in the range [ l, r] by value x. Note that queries of type 1 don' t affect the array elements.",
    "input": "The first line contains one integer n ( 3 \u2264 n \u2264 105) \u2014 the length of the array. The second line contains n positive integers a1, a2, . . . , an ( 0 < ai \u2264 109) \u2014 the array elements. The third line contains an integer q ( 1 \u2264 q \u2264 105) \u2014 the number of queries. Then q lines follow, line i describes the i- th query and contains four integers ti li ri xi . It is guaranteed that at least one of the queries is of type 1.",
    "output": "For each query of type 1, print the answer to the query.",
    "note": "",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "935F"
  },
  {
    "title": "Friends Meeting",
    "url": "https://codeforces.com/problemset/problem/931/A",
    "history": "Two friends are on the coordinate axis Ox in points with integer coordinates. One of them is in the point x1 = a, another one is in the point x2 = b. Each of the friends can move by one along the line in any direction unlimited number of times. When a friend moves, the tiredness of a friend changes according to the following rules: the first move increases the tiredness by 1, the second move increases the tiredness by 2, the third \u2014 by 3 and so on. For example, if a friend moves first to the left, then to the right ( returning to the same point) , and then again to the left his tiredness becomes equal to 1 + 2 + 3 = 6. The friends want to meet in a integer point. Determine the minimum total tiredness they should gain, if they meet in the same point.",
    "input": "The first line contains a single integer a ( 1 \u2264 a \u2264 1000) \u2014 the initial position of the first friend. The second line contains a single integer b ( 1 \u2264 b \u2264 1000) \u2014 the initial position of the second friend. It is guaranteed that a = \u0338 b.",
    "output": "Print the minimum possible total tiredness if the friends meet in the same point.",
    "note": "In the first example the first friend should move by one to the right ( then the meeting happens at point 4) , or the second friend should move by one to the left ( then the meeting happens at point 3) . In both cases, the total tiredness becomes 1. In the second example the first friend should move by one to the left, and the second friend should move by one to the right. Then they meet in the point 100, and the total tiredness becomes 1 + 1 = 2. In the third example one of the optimal ways is the following. The first friend should move three times to the right, and the second friend \u2014 two times to the left. Thus the friends meet in the point 8, and the total tiredness becomes 1 + 2 + 3 + 1 + 2 = 9.",
    "topics": [
      "brute force",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "931A"
  },
  {
    "title": "\u041f\u0440\u043e\u043a\u0430\u0442 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u043e\u0432",
    "url": "https://codeforces.com/problemset/problem/929/A",
    "history": "\u041a\u0430\u043a \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0432 \u0442\u0435\u043f\u043b\u0443\u044e \u043f\u043e\u0433\u043e\u0434\u0443 \u043c\u043d\u043e\u0433\u0438\u0435 \u0436\u0438\u0442\u0435\u043b\u0438 \u043a\u0440\u0443\u043f\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430\u043c\u0438 \u0433\u043e\u0440\u043e\u0434\u0441\u043a\u043e\u0433\u043e \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u0430. \u0412\u043e\u0442 \u0438 \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0438\u0440\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0448\u043a\u043e\u043b\u044b \u0434\u043e \u0434\u043e\u043c\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0438\u0435 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u044b. \u0428\u043a\u043e\u043b\u0430 \u0438 \u0434\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0430 \u043e\u0434\u043d\u043e\u0438\u0306 \u043f\u0440\u044f\u043c\u043e\u0438\u0306 \u0443\u043b\u0438\u0446\u0435, \u043a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043d\u0430 \u0442\u043e\u0438\u0306 \u0436\u0435 \u0443\u043b\u0438\u0446\u0435 \u0435\u0441\u0442\u044c n \u0442\u043e\u0447\u0435\u043a, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434 \u0432 \u043f\u0440\u043e\u043a\u0430\u0442 \u0438\u043b\u0438 \u0441\u0434\u0430\u0442\u044c \u0435\u0433\u043e. \u041f\u0435\u0440\u0432\u044b\u0438\u0306 \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0442\u043e\u0447\u043a\u0435 x1 \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432 \u0432\u0434\u043e\u043b\u044c \u0443\u043b\u0438\u0446\u044b, \u0432\u0442\u043e\u0440\u043e\u0438\u0306 \u2014 \u0432 \u0442\u043e\u0447\u043a\u0435 x2 \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435, n- \u0438\u0306 \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0442\u043e\u0447\u043a\u0435 xn. \u0428\u043a\u043e\u043b\u0430 \u0410\u0440\u043a\u0430\u0434\u0438\u044f \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0442\u043e\u0447\u043a\u0435 x1 ( \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0430\u043c \u0436\u0435, \u0433\u0434\u0435 \u0438 \u043f\u0435\u0440\u0432\u044b\u0438\u0306 \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442) , \u0430 \u0434\u043e\u043c \u2014 \u0432 \u0442\u043e\u0447\u043a\u0435 xn ( \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0430\u043c \u0436\u0435, \u0433\u0434\u0435 \u0438 n- \u0438\u0306 \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442) . \u0418\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0447\u0442\u043e xi < xi + 1 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 1 \u2264 i < n. \u0421\u043e\u0433\u043b\u0430\u0441\u043d\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u0430, \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u043c\u043e\u0436\u0435\u0442 \u0431\u0440\u0430\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434 \u0432 \u043f\u0440\u043e\u043a\u0430\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0435\u0433\u043e \u0432 \u043e\u0434\u043d\u043e\u0438\u0306 \u0438\u0437 \u0442\u043e\u0447\u0435\u043a \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u0430, \u043e\u0434\u043d\u0430\u043a\u043e, \u043e\u043d \u0442\u0443\u0442 \u0436\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0438\u0306 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434, \u0438 \u043e\u0442\u0441\u0447\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e\u0438\u0306\u0434\u0435\u0442 \u0437\u0430\u043d\u043e\u0432\u043e. \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u043c\u043e\u0436\u0435\u0442 \u0431\u0440\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0430 \u0432 \u043f\u0440\u043e\u043a\u0430\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e. \u0415\u0441\u043b\u0438 \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u0440\u0435\u0448\u0430\u0435\u0442 \u0432\u0437\u044f\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434 \u0432 \u043a\u0430\u043a\u043e\u0438\u0306- \u0442\u043e \u0442\u043e\u0447\u043a\u0435 \u043f\u0440\u043e\u043a\u0430\u0442\u0430, \u0442\u043e \u043e\u043d \u0441\u0434\u0430\u0435\u0308\u0442 \u0442\u043e\u0442 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0434\u043e \u043d\u0435\u0433\u043e \u0434\u043e\u0435\u0445\u0430\u043b, \u0431\u0435\u0440\u0435\u0308\u0442 \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u0438\u043d \u043d\u043e\u0432\u044b\u0438\u0306 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u043d\u0430 \u043d\u0435\u0308\u043c \u0441\u0432\u043e\u0435\u0308 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435. \u0417\u0430 \u043e\u0442\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e \u043e\u0442 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0430, \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u0443\u0441\u043f\u0435\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0435\u0445\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 k \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432 \u0432\u0434\u043e\u043b\u044c \u0443\u043b\u0438\u0446\u044b. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0441\u043c\u043e\u0436\u0435\u0442 \u043b\u0438 \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u0434\u043e\u0435\u0445\u0430\u0442\u044c \u043d\u0430 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0430\u0445 \u043e\u0442 \u0448\u043a\u043e\u043b\u044b \u0434\u043e \u0434\u043e\u043c\u0430, \u0438 \u0435\u0441\u043b\u0438 \u0434\u0430, \u0442\u043e \u043a\u0430\u043a\u043e\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437 \u0435\u043c\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u0437\u044f\u0442\u044c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434 \u0432 \u043f\u0440\u043e\u043a\u0430\u0442, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0435\u0440\u0432\u044b\u0438\u0306 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434? \u0423\u0447\u0442\u0438\u0442\u0435, \u0447\u0442\u043e \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u043d\u0435 \u043d\u0430\u043c\u0435\u0440\u0435\u043d \u0441\u0435\u0433\u043e\u0434\u043d\u044f \u0445\u043e\u0434\u0438\u0442\u044c \u043f\u0435\u0448\u043a\u043e\u043c.",
    "input": "\u0412 \u043f\u0435\u0440\u0432\u043e\u0438\u0306 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u0434\u0432\u0430 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 k ( 2 \u2264 n \u2264 1 000, 1 \u2264 k \u2264 100 000) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u043e\u0432 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0435\u0445\u0430\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0435. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0438\u0306 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b x1, x2, . . . , xn ( 0 \u2264 x1 < x2 < . . . < xn \u2264 100 000) \u2014 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0442\u043e\u0447\u0435\u043a, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u044b. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.",
    "output": "\u0415\u0441\u043b\u0438 \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0448\u043a\u043e\u043b\u044b \u0434\u043e \u0434\u043e\u043c\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0430\u0445, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 - 1. \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0410\u0440\u043a\u0430\u0434\u0438\u044e \u043d\u0443\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u0432 \u0442\u043e\u0447\u043a\u0430\u0445 \u043f\u0440\u043e\u043a\u0430\u0442\u0430.",
    "note": "\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0437\u044f\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0438\u0306 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u0435 \u0438 \u0434\u043e\u0435\u0445\u0430\u0442\u044c \u043d\u0430 \u043d\u0435\u0308\u043c \u0434\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u0430. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u0435 \u043e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0437\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0438\u0306 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043d \u0441\u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0433\u043e \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u0430, \u0440\u044f\u0434\u043e\u043c \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0435\u0433\u043e \u0434\u043e\u043c. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0410\u0440\u043a\u0430\u0434\u0438\u044e \u043d\u0443\u0436\u043d\u043e \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0430 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0430, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0448\u043a\u043e\u043b\u044b \u0434\u043e \u0434\u043e\u043c\u0430. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u0441\u0435\u0433\u043e \u0434\u0432\u0430 \u0432\u0435\u043b\u043e\u043f\u0440\u043e\u043a\u0430\u0442\u0430, \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 10. \u041d\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0435\u0445\u0430\u0442\u044c \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0435, \u0440\u0430\u0432\u043d\u043e 9. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0410\u0440\u043a\u0430\u0434\u0438\u0438\u0306 \u043d\u0435 \u0441\u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0448\u043a\u043e\u043b\u044b \u0434\u043e \u0434\u043e\u043c\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0430\u0445.",
    "topics": [
      "*special",
      "greedy",
      "implementation"
    ],
    "id": "929A"
  },
  {
    "title": "Riverside Curio",
    "url": "https://codeforces.com/problemset/problem/924/C",
    "history": "Arkady decides to observe a river for n consecutive days. The river' s water level on each day is equal to some real value. Arkady goes to the riverside each day and makes a mark on the side of the channel at the height of the water level, but if it coincides with a mark made before, no new mark is created. The water does not wash the marks away. Arkady writes down the number of marks strictly above the water level each day, on the i- th day this value is equal to mi. Define di as the number of marks strictly under the water level on the i- th day. You are to find out the minimum possible sum of di over all days. There are no marks on the channel before the first day.",
    "input": "The first line contains a single positive integer n ( 1 \u2264 n \u2264 105) \u2014 the number of days. The second line contains n space- separated integers m1, m2, . . . , mn ( 0 \u2264 mi < i) \u2014 the number of marks strictly above the water on each day.",
    "output": "Output one single integer \u2014 the minimum possible sum of the number of marks strictly below the water level among all days.",
    "note": "In the first example, the following figure shows an optimal case. Note that on day 3, a new mark should be created because if not, there cannot be 3 marks above water on day 4. The total number of marks underwater is 0 + 0 + 2 + 0 + 3 + 1 = 6. In the second example, the following figure shows an optimal case.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "924C"
  },
  {
    "title": "Three-level Laser",
    "url": "https://codeforces.com/problemset/problem/924/B",
    "history": "An atom of element X can exist in n distinct states with energies E1 < E2 < . . . < En. Arkady wants to build a laser on this element, using a three- level scheme. Here is a simplified description of the scheme. Three distinct states i, j and k are selected, where i < j < k. After that the following process happens: initially the atom is in the state i, we spend Ek - Ei energy to put the atom in the state k, the atom emits a photon with useful energy Ek - Ej and changes its state to the state j, the atom spontaneously changes its state to the state i, losing energy Ej - Ei, the process repeats from step 1. Let' s define the energy conversion efficiency as , i. e. the ration between the useful energy of the photon and spent energy. Due to some limitations, Arkady can only choose such three states that Ek - Ei \u2264 U. Help Arkady to find such the maximum possible energy conversion efficiency within the above constraints.",
    "input": "The first line contains two integers n and U ( 3 \u2264 n \u2264 105, 1 \u2264 U \u2264 109) \u2014 the number of states and the maximum possible difference between Ek and Ei. The second line contains a sequence of integers E1, E2, . . . , En ( 1 \u2264 E1 < E2. . . < En \u2264 109) . It is guaranteed that all Ei are given in increasing order.",
    "output": "If it is not possible to choose three states that satisfy all constraints, print - 1. Otherwise, print one real number \u03b7 \u2014 the maximum possible energy conversion efficiency. Your answer is considered correct its absolute or relative error does not exceed 10 - 9. Formally, let your answer be a, and the jury' s answer be b. Your answer is considered correct if .",
    "note": "In the first example choose states 1, 2 and 3, so that the energy conversion efficiency becomes equal to . In the second example choose states 4, 5 and 9, so that the energy conversion efficiency becomes equal to .",
    "topics": [
      "binary search",
      "greedy",
      "two pointers"
    ],
    "id": "924B"
  },
  {
    "title": "Mystical Mosaic",
    "url": "https://codeforces.com/problemset/problem/924/A",
    "history": "There is a rectangular grid of n rows of m initially- white cells each. Arkady performed a certain number ( possibly zero) of operations on it. In the i- th operation, a non- empty subset of rows Ri and a non- empty subset of columns Ci are chosen. For each row r in Ri and each column c in Ci, the intersection of row r and column c is coloured black. There' s another constraint: a row or a column can only be chosen at most once among all operations. In other words, it means that no pair of ( i, j) ( i < j) exists such that or , where denotes intersection of sets, and denotes the empty set. You are to determine whether a valid sequence of operations exists that produces a given final grid.",
    "input": "The first line contains two space- separated integers n and m ( 1 \u2264 n, m \u2264 50) \u2014 the number of rows and columns of the grid, respectively. Each of the following n lines contains a string of m characters, each being either ' . ' ( denoting a white cell) or ' # ' ( denoting a black cell) , representing the desired setup.",
    "output": "If the given grid can be achieved by any valid sequence of operations, output \" Yes\" ; otherwise output \" No\" ( both without quotes) . You can print each character in any case ( upper or lower) .",
    "note": "For the first example, the desired setup can be produced by 3 operations, as is shown below. For the second example, the desired setup cannot be produced, since in order to colour the center row, the third row and all columns must be selected in one operation, but after that no column can be selected again, hence it won' t be possible to colour the other cells in the center column.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "924A"
  },
  {
    "title": "Perfect Security",
    "url": "https://codeforces.com/problemset/problem/923/C",
    "history": "Alice has a very important message M consisting of some non- negative integers that she wants to keep secret from Eve. Alice knows that the only theoretically secure cipher is one- time pad. Alice generates a random key K of the length equal to the message' s length. Alice computes the bitwise xor of each element of the message and the key ( , where denotes the bitwise XOR operation) and stores this encrypted message A. Alice is smart. Be like Alice. For example, Alice may have wanted to store a message M = ( 0, 15, 9, 18) . She generated a key K = ( 16, 7, 6, 3) . The encrypted message is thus A = ( 16, 8, 15, 17) . Alice realised that she cannot store the key with the encrypted message. Alice sent her key K to Bob and deleted her own copy. Alice is smart. Really, be like Alice. Bob realised that the encrypted message is only secure as long as the key is secret. Bob thus randomly permuted the key before storing it. Bob thinks that this way, even if Eve gets both the encrypted message and the key, she will not be able to read the message. Bob is not smart. Don' t be like Bob. In the above example, Bob may have, for instance, selected a permutation ( 3, 4, 1, 2) and stored the permuted key P = ( 6, 3, 16, 7) . One year has passed and Alice wants to decrypt her message. Only now Bob has realised that this is impossible. As he has permuted the key randomly, the message is lost forever. Did we mention that Bob isn' t smart? Bob wants to salvage at least some information from the message. Since he is not so smart, he asks for your help. You know the encrypted message A and the permuted key P. What is the lexicographically smallest message that could have resulted in the given encrypted text? More precisely, for given A and P, find the lexicographically smallest message O, for which there exists a permutation \u03c0 such that for every i. Note that the sequence S is lexicographically smaller than the sequence T, if there is an index i such that Si < Ti and for all j < i the condition Sj = Tj holds.",
    "input": "The first line contains a single integer N ( 1 \u2264 N \u2264 300000) , the length of the message. The second line contains N integers A1, A2, . . . , AN ( 0 \u2264 Ai < 230) representing the encrypted message. The third line contains N integers P1, P2, . . . , PN ( 0 \u2264 Pi < 230) representing the permuted encryption key.",
    "output": "Output a single line with N integers, the lexicographically smallest possible message O. Note that all its elements should be non- negative.",
    "note": "In the first case, the solution is ( 10, 3, 28) , since , and . Other possible permutations of key yield messages ( 25, 6, 10) , ( 25, 3, 15) , ( 10, 21, 10) , ( 15, 21, 15) and ( 15, 6, 28) , which are all lexicographically larger than the solution.",
    "topics": [
      "data structures",
      "greedy",
      "strings",
      "trees"
    ],
    "id": "923C"
  },
  {
    "title": "Divisibility",
    "url": "https://codeforces.com/problemset/problem/922/F",
    "history": "Imp is really pleased that you helped him. But it you solve the last problem, his gladness would raise even more. Let' s define for some set of integers as the number of pairs a, b in , such that: a is strictly less than b; a divides b without a remainder. You are to find such a set , which is a subset of 1, 2, . . . , n ( the set that contains all positive integers not greater than n) , that .",
    "input": "The only line contains two integers n and k .",
    "output": "If there is no answer, print \" No\" . Otherwise, in the first line print \" Yes\" , in the second \u2014 an integer m that denotes the size of the set you have found, in the second line print m integers \u2014 the elements of the set , in any order. If there are multiple answers, print any of them.",
    "note": "In the second sample, the valid pairs in the output set are ( 1, 2) , ( 1, 4) , ( 1, 5) , ( 1, 6) , ( 2, 4) , ( 2, 6) . Thus, . In the third example, the valid pairs in the output set are ( 2, 4) , ( 4, 8) , ( 2, 8) . Thus, .",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy",
      "number theory"
    ],
    "id": "922F"
  },
  {
    "title": "Robot Vacuum Cleaner",
    "url": "https://codeforces.com/problemset/problem/922/D",
    "history": "Pushok the dog has been chasing Imp for a few hours already. Fortunately, Imp knows that Pushok is afraid of a robot vacuum cleaner. While moving, the robot generates a string t consisting of letters ' s' and ' h' , that produces a lot of noise. We define noise of string t as the number of occurrences of string \" sh\" as a subsequence in it, in other words, the number of such pairs ( i, j) , that i < j and and . The robot is off at the moment. Imp knows that it has a sequence of strings ti in its memory, and he can arbitrary change their order. When the robot is started, it generates the string t as a concatenation of these strings in the given order. The noise of the resulting string equals the noise of this concatenation. Help Imp to find the maximum noise he can achieve by changing the order of the strings.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 105) \u2014 the number of strings in robot' s memory. Next n lines contain the strings t1, t2, . . . , tn, one per line. It is guaranteed that the strings are non- empty, contain only English letters ' s' and ' h' and their total length does not exceed 105.",
    "output": "Print a single integer \u2014 the maxumum possible noise Imp can achieve by changing the order of the strings.",
    "note": "The optimal concatenation in the first sample is ssshhshhhs.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "922D"
  },
  {
    "title": "Tanks",
    "url": "https://codeforces.com/problemset/problem/920/D",
    "history": "Petya sometimes has to water his field. To water the field, Petya needs a tank with exactly V ml of water. Petya has got N tanks, i- th of them initially containing ai ml of water. The tanks are really large, any of them can contain any amount of water ( no matter how large this amount is) . Also Petya has got a scoop that can contain up to K ml of water ( initially the scoop is empty) . This scoop can be used to get some water from some tank, and after that pour it all into some tank ( it is impossible to get water from multiple tanks without pouring it, or leave some water in the scoop when pouring it) . When Petya tries to get some water from a tank, he gets min( v, K) water, where v is the current volume of water in the tank. Is it possible to obtain a tank with exactly V ml of water using these operations? If it is possible, print a sequence of operations that allows to do it. If there are multiple ways to obtain needed amount of water in some tank, print any of them.",
    "input": "The first line contains 3 integers: N ( 2 \u2264 N \u2264 5000) , K ( 1 \u2264 K \u2264 5000) , and V ( 0 \u2264 V \u2264 109) \u2014 the number of tanks, the maximum volume of water the scoop can contain, and the required amount of water in some tank, respectively. The second line contains N integers ai ( 0 \u2264 ai \u2264 105) , where ai is initial volume of water in i- th tank.",
    "output": "If it is impossible to obtain a tank with exactly V ml of water, print NO. Otherwise print YES in the first line, and beginning from the second line, print the sequence of operations in the following format: Each line has to contain 3 numbers denoting a compressed operation: \" cnt x y\" ( 1 \u2264 cnt \u2264 109, 1 \u2264 x, y \u2264 N) , where x is the index of the tank where we get water, y is the index of the tank where we pour water, and cnt is the number of times we transfer water from tank x to tank y. The number of these lines must not exceed N + 5.",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "920D"
  },
  {
    "title": "Swap Adjacent Elements",
    "url": "https://codeforces.com/problemset/problem/920/C",
    "history": "You have an array a consisting of n integers. Each integer from 1 to n appears exactly once in this array. For some indices i ( 1 \u2264 i \u2264 n - 1) it is possible to swap i- th element with ( i + 1) - th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap i- th element with ( i + 1) - th ( if the position is not forbidden) . Can you make this array sorted in ascending order performing some sequence of swapping operations?",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 200000) \u2014 the number of elements in the array. The second line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 200000) \u2014 the elements of the array. Each integer from 1 to n appears exactly once. The third line contains a string of n - 1 characters, each character is either 0 or 1. If i- th character is 1, then you can swap i- th element with ( i + 1) - th any number of times, otherwise it is forbidden to swap i- th element with ( i + 1) - th.",
    "output": "If it is possible to sort the array in ascending order using any sequence of swaps you are allowed to make, print YES. Otherwise, print NO.",
    "note": "In the first example you may swap a3 and a4, and then swap a4 and a5.",
    "topics": [
      "dfs and similar",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "920C"
  },
  {
    "title": "Supermarket",
    "url": "https://codeforces.com/problemset/problem/919/A",
    "history": "We often go to supermarkets to buy some fruits or vegetables, and on the tag there prints the price for a kilo. But in some supermarkets, when asked how much the items are, the clerk will say that a yuan for b kilos ( You don' t need to care about what \" yuan\" is) , the same as a/ b yuan for a kilo. Now imagine you' d like to buy m kilos of apples. You' ve asked n supermarkets and got the prices. Find the minimum cost for those apples. You can assume that there are enough apples in all supermarkets.",
    "input": "The first line contains two positive integers n and m ( 1 \u2264 n \u2264 5 000 , 1 \u2264 m \u2264 100 ) , denoting that there are n supermarkets and you want to buy m kilos of apples. The following n lines describe the information of the supermarkets. Each line contains two positive integers a, b ( 1 \u2264 a, b \u2264 100 ) , denoting that in this supermarket, you are supposed to pay a yuan for b kilos of apples.",
    "output": "The only line, denoting the minimum cost for m kilos of apples. Please make sure that the absolute or relative error between your answer and the correct answer won' t exceed 10^ - 6 . Formally, let your answer be x , and the jury' s answer be y . Your answer is considered correct if | x - y| / max( 1, | y| ) \u2264 10^ - 6 .",
    "note": "In the first sample, you are supposed to buy 5 kilos of apples in supermarket 3 . The cost is 5/ 3 yuan. In the second sample, you are supposed to buy 1 kilo of apples in supermarket 2 . The cost is 98/ 99 yuan.",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "919A"
  },
  {
    "title": "The Monster",
    "url": "https://codeforces.com/problemset/problem/917/A",
    "history": "As Will is stuck in the Upside Down, he can still communicate with his mom, Joyce, through the Christmas lights ( he can turn them on and off with his mind) . He can' t directly tell his mom where he is, because the monster that took him to the Upside Down will know and relocate him. Thus, he came up with a puzzle to tell his mom his coordinates. His coordinates are the answer to the following problem. A string consisting only of parentheses ( ' ( ' and ' ) ' ) is called a bracket sequence. Some bracket sequence are called correct bracket sequences. More formally: Empty string is a correct bracket sequence. if s is a correct bracket sequence, then ( s) is also a correct bracket sequence. if s and t are correct bracket sequences, then st ( concatenation of s and t) is also a correct bracket sequence. A string consisting of parentheses and question marks ( ' ? ' ) is called pretty if and only if there' s a way to replace each question mark with either ' ( ' or ' ) ' such that the resulting string is a non- empty correct bracket sequence. Will gave his mom a string s consisting of parentheses and question marks ( using Morse code through the lights) and his coordinates are the number of pairs of integers ( l, r) such that 1 \u2264 l \u2264 r \u2264 | s| and the string slsl + 1. . . sr is pretty, where si is i- th character of s. Joyce doesn' t know anything about bracket sequences, so she asked for your help.",
    "input": "The first and only line of input contains string s, consisting only of characters ' ( ' , ' ) ' and ' ? ' ( 2 \u2264 | s| \u2264 5000) .",
    "output": "Print the answer to Will' s puzzle in the first and only line of output.",
    "note": "For the first sample testcase, the pretty substrings of s are: \" ( ? \" which can be transformed to \" ( ) \" . \" ? ) \" which can be transformed to \" ( ) \" . \" ( ( ? ) \" which can be transformed to \" ( ( ) ) \" . \" ( ? ) ) \" which can be transformed to \" ( ( ) ) \" . For the second sample testcase, the pretty substrings of s are: \" ? ? \" which can be transformed to \" ( ) \" . \" ( ) \" . \" ? ? ( ) \" which can be transformed to \" ( ) ( ) \" . \" ? ( ) ? \" which can be transformed to \" ( ( ) ) \" . \" ? ? \" which can be transformed to \" ( ) \" . \" ( ) ? ? \" which can be transformed to \" ( ) ( ) \" . \" ? ? ( ) ? ? \" which can be transformed to \" ( ) ( ) ( ) \" .",
    "topics": [
      "dp",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "917A"
  },
  {
    "title": "Jamie and Binary Sequence (changed after round)",
    "url": "https://codeforces.com/problemset/problem/916/B",
    "history": "Jamie is preparing a Codeforces round. He has got an idea for a problem, but does not know how to solve it. Help him write a solution to the following problem: Find k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one. To be more clear, consider all integer sequence with length k ( a1, a2, . . . , ak) with . Give a value to each sequence. Among all sequence( s) that have the minimum y value, output the one that is the lexicographically largest. For definitions of powers and lexicographical order see notes.",
    "input": "The first line consists of two integers n and k ( 1 \u2264 n \u2264 1018, 1 \u2264 k \u2264 105) \u2014 the required sum and the length of the sequence.",
    "output": "Output \" No\" ( without quotes) in a single line if there does not exist such sequence. Otherwise, output \" Yes\" ( without quotes) in the first line, and k numbers separated by space in the second line \u2014 the required sequence. It is guaranteed that the integers in the answer sequence fit the range [ - 1018, 1018] .",
    "note": "Sample 1: 23 + 23 + 22 + 21 + 20 = 8 + 8 + 4 + 2 + 1 = 23Answers like ( 3, 3, 2, 0, 1) or ( 0, 1, 2, 3, 3) are not lexicographically largest. Answers like ( 4, 1, 1, 1, 0) do not have the minimum y value. Sample 2: It can be shown there does not exist a sequence with length 2. Sample 3: Powers of 2: If x > 0, then 2x = 2\u00b72\u00b72\u00b7. . . \u00b72 ( x times) . If x = 0, then 2x = 1. If x < 0, then . Lexicographical order: Given two different sequences of the same length, ( a1, a2, . . . , ak) and ( b1, b2, . . . , bk) , the first one is smaller than the second one for the lexicographical order, if and only if ai < bi, for the first i where ai and bi differ.",
    "topics": [
      "bitmasks",
      "greedy",
      "math"
    ],
    "id": "916B"
  },
  {
    "title": "Permute Digits",
    "url": "https://codeforces.com/problemset/problem/915/C",
    "history": "You are given two positive integer numbers a and b. Permute ( change order) of the digits of a to construct maximal number not exceeding b. No number in input and/ or output can start with the digit 0. It is allowed to leave a as it is.",
    "input": "The first line contains integer a ( 1 \u2264 a \u2264 1018) . The second line contains integer b ( 1 \u2264 b \u2264 1018) . Numbers don' t have leading zeroes. It is guaranteed that answer exists.",
    "output": "Print the maximum possible number that is a permutation of digits of a and is not greater than b. The answer can' t have any leading zeroes. It is guaranteed that the answer exists. The number in the output should have exactly the same length as number a. It should be a permutation of digits of a.",
    "note": "",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "915C"
  },
  {
    "title": "Conan and Agasa play a Card Game",
    "url": "https://codeforces.com/problemset/problem/914/B",
    "history": "Edogawa Conan got tired of solving cases, and invited his friend, Professor Agasa, over. They decided to play a game of cards. Conan has n cards, and the i- th card has a number ai written on it. They take turns playing, starting with Conan. In each turn, the player chooses a card and removes it. Also, he removes all cards having a number strictly lesser than the number on the chosen card. Formally, if the player chooses the i- th card, he removes that card and removes the j- th card for all j such that aj < ai. A player loses if he cannot make a move on his turn, that is, he loses if there are no cards left. Predict the outcome of the game, assuming both players play optimally.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 105) \u2014 the number of cards Conan has. The next line contains n integers a1, a2, . . . , an ( 1 \u2264 ai \u2264 105) , where ai is the number on the i- th card.",
    "output": "If Conan wins, print \" Conan\" ( without quotes) , otherwise print \" Agasa\" ( without quotes) .",
    "note": "In the first example, Conan can just choose the card having number 7 on it and hence remove all the cards. After that, there are no cards left on Agasa' s turn. In the second example, no matter which card Conan chooses, there will be one one card left, which Agasa can choose. After that, there are no cards left when it becomes Conan' s turn again.",
    "topics": [
      "games",
      "greedy",
      "implementation"
    ],
    "id": "914B"
  },
  {
    "title": "Johnny and James",
    "url": "https://codeforces.com/problemset/problem/1361/D",
    "history": "James Bond, Johnny' s favorite secret agent, has a new mission. There are n enemy bases, each of them is described by its coordinates so that we can think about them as points in the Cartesian plane. The bases can communicate with each other, sending a signal, which is the ray directed from the chosen point to the origin or in the opposite direction. The exception is the central base, which lies at the origin and can send a signal in any direction. When some two bases want to communicate, there are two possible scenarios. If they lie on the same line with the origin, one of them can send a signal directly to the other one. Otherwise, the signal is sent from the first base to the central, and then the central sends it to the second base. We denote the distance between two bases as the total Euclidean distance that a signal sent between them has to travel. Bond can damage all but some k bases, which he can choose arbitrarily. A damaged base can' t send or receive the direct signal but still can pass it between two working bases. In particular, James can damage the central base, and the signal can still be sent between any two undamaged bases as before, so the distance between them remains the same. What is the maximal sum of the distances between all pairs of remaining bases that 007 can achieve by damaging exactly n - k of them?",
    "input": "The first line contains two integers n and k ( 2 \u2264 k \u2264 n \u2264 5 \u00b7 10^ 5) \u2014 the total number of bases and number of bases that have to remain, respectively. Each of the next n lines contains two integers x and y ( - 10^ 9 \u2264 x, y \u2264 10^ 9) , i - th line contains coordinates of the i - th base. You can assume that no two points coincide and that one of them is ( 0, 0) .",
    "output": "You should output one number \u2014 the maximal possible sum of distances between all pairs of some k from given bases. Your answer will be accepted if the absolute or relative error is less than 10^ - 6 .",
    "note": "In the first example, in an optimal solution Bond doesn' t destroy bases with indices 4 and 6 ( marked in orange) : The following picture represents an optimal solution for the second example. These bases are are not destroyed: 2 , 3 , 4 , 5 , 6 ( marked in orange) . An optimal solution for the third test is visible in the picture. Only bases 3 , 4 , 5 are destroyed. Again, the not destroyed bases are marked in orange.",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "trees"
    ],
    "id": "1361D"
  },
  {
    "title": "Dune II: Battle For Arrakis",
    "url": "https://codeforces.com/problemset/problem/1346/F",
    "history": "You' re at the last mission in one very old and very popular strategy game Dune II: Battle For Arrakis. The map of the mission can be represented as a rectangular matrix of size n \u00d7 m . Initially, there are a_ i, j units of your army in the cell ( i, j) . You want to prepare for the final battle, so you want to move all your army into exactly one cell of the map ( i. e. nm- 1 cells should contain 0 units of the army and the remaining cell should contain the entire army) . To do this, you can do some ( possibly, zero) number of moves. During one move, you can select exactly one unit from some cell and move it to one of the adjacent by side cells. I. e. from the cell ( i, j) you can move the unit to cells: ( i - 1, j) ; ( i, j - 1) ; ( i + 1, j) ; ( i, j + 1) . Of course, you want to move all your army into exactly one cell as fast as possible. So, you want to know the minimum number of moves you need to do that. And, of course, life goes on, so the situation on the map changes. There are q updates, the i - th update is denoted by three integers x, y, z . This update affects the army in the cell ( x, y) : after this update, the number of units in the cell ( x, y) becomes z ( i. e. you replace a_ x, y with z ) . Also, you want to determine, for each i , the minimum number of moves needed to move your entire army into exactly one cell with the first i updates applied to the initial map. In other words, the map after the i - th update equals the initial map with the first i updates applied to it.",
    "input": "The first line of the input contains three integers n, m and q ( 1 \u2264 n, m \u2264 1000; 1 \u2264 q \u2264 5000 ) \u2014 the size of the matrix and the number of updates correspondingly. The next n lines contain m integers each, where the j - th integer in the i - th line is a_ i, j ( 1 \u2264 a_ i, j\u2264 10^ 9 ) \u2014 the number of units in the cell ( i, j) . The next q lines contain three integers each, where the i - th line contains three integers x_ i, y_ i and z_ i ( 1 \u2264 x_ i \u2264 n; 1 \u2264 y_ i \u2264 m; 1 \u2264 z_ i \u2264 10^ 9 ) \u2014 the cell in which the number of units updates and the new number of units in this cell correspondingly.",
    "output": "Print q+ 1 integers r_ 0, r_ 1, r_ 2, . . . , r_ n , where r_ 0 is the minimum number of moves you need to move all your army into exactly one cell, and r_ i for all i from 1 to q is the minimum number of moves you need to move all your army into exactly one cell after the first i updates.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1346F"
  },
  {
    "title": "Constructing the Dungeon",
    "url": "https://codeforces.com/problemset/problem/1346/D",
    "history": "Polycarp is developing an RPG game where the main character fights monsters and searches for treasure in dungeons. Now Polycarp is making one of the dungeons the character can explore. The dungeon consists of n rooms connected by m two- way tunnels, and it is possible to reach every room from every other room using tunnels. The rooms are guarded by monsters ( the number of monsters in the i - th room is a_ i ) , and the tunnels contain gold coins ( the number of coins in the i - th tunnel is w_ i ) . The i - th two- way tunnel connects rooms v_ i and u_ i . Polycarp has already fixed the number of coins in each tunnel ( the values of w_ i are already known) , and now he tries to place the monsters in the rooms ( the values of a_ i are not known yet) . Polycarp wants to choose the number of monsters in each room in such a way that the following two conditions are met: the number of coins for the tunnel connecting the rooms x and y should be equal to the minimum of a_ x and a_ y . That is, for each tunnel i , w_ i = min ( a_ v_ i, a_ u_ i) ; the number of monsters in the dungeon is as small as possible. That is, the value of a_ 1 + a_ 2 + . . . + a_ n is minimum possible. Help Polycarp to choose the values a_ 1 , a_ 2 , . . . , a_ n , or tell him that it is impossible and he has to change something in his dungeon plan.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100000 ) \u2014 the number of test cases. Then the test cases follow. The first line of each test case contains two integers n and m ( 2 \u2264 n \u2264 200000 ; n - 1 \u2264 m \u2264min( 200000, n( n- 1) / 2) ) \u2014 the number of rooms and tunnels in the dungeon, respectively. Then m lines follow, each line describing one of the tunnels in the dungeon. The i - th line contains three integers v_ i , u_ i and w_ i ( 1 \u2264 v_ i, u_ i \u2264 n ; v_ i u_ i ; 1 \u2264 w_ i \u2264 10^ 9 ) denoting a two- way tunnel that connects rooms v_ i and u_ i , and contains w_ i coins. The tunnel system is connected in each test case ( it is possible to reach every room from every other room using the tunnels) . Each pair of rooms is connected by at most one tunnel. The sum of n over all test cases does not exceed 200000 . Similarly, the sum of m over all test cases does not exceed 200000 .",
    "output": "For each test case, print the answer as follows: If it is impossible to find the values of a_ 1 , a_ 2 , . . . , a_ n satisfying all the constraints, print one single string NO on a separate line. Otherwise, print YES in the first line, and n integers a_ 1 , a_ 2 , . . . , a_ n in the second line. If there are multiple valid answers, print any of them.",
    "note": "",
    "topics": [
      "*special",
      "graphs",
      "greedy"
    ],
    "id": "1346D"
  },
  {
    "title": "Spring Cleaning",
    "url": "https://codeforces.com/problemset/problem/1346/C",
    "history": "Tanya wants to organize her bookcase. There are n bookshelves in the bookcase, the i - th bookshelf contains a_ i books on it. Tanya will be satisfied if each bookshelf contains no more than k books. Tanya can do one of the two following operations to achieve her goal: Choose exactly one bookshelf and put all the books from it in the storage room ( i. e. choose some i and assign a_ i : = 0 ) . During this operation she spends x seconds. Take all books from all n bookshelves and distribute them between all n bookshelves evenly ( the definition of the term is given below) . During this operation she spends y seconds. Consider the sequence a of n integers. Then its even distribution is such a sequence b of n integers that the sum of b equals the sum of a and the value max( b) - min( b) is the minimum possible. For example, if the array a= [ 5, 4, 3] then its even distribution is b= [ 4, 4, 4] . If a= [ 1, 2, 3, 4] then its even distribution is b= [ 2, 3, 3, 2] ( or any permutation of this array) . Your task is to find the minimum number of seconds Tanya has to spend to obtain the bookcase with no more than k books on each bookshelf.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains four integers n, k, x and y ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5; 1 \u2264 x, y \u2264 10^ 4 ) \u2014 the number of bookshelves, the maximum required number of books on each bookshelf and the number of seconds Tanya spends during the first and the second operation respectively. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the number of books on the i - th bookshelf. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum number of seconds Tanya has to spend to obtain the bookcase with no more than k books on each bookshelf.",
    "note": "In the first test case of the example, it' s optimal to use the first operation on the fifth bookshelf. So the array a becomes [ 1, 2, 2, 3, 5] \u2192 [ 1, 2, 2, 3, 0] . In the second test case of the example, it' s optimal to use the first operation on the second bookshelf and then use the second operation. So the array a becomes [ 1, 5, 1, 5, 5] \u2192 [ 1, 0, 1, 5, 5] \u2192 [ 2, 2, 3, 3, 2] . In the third test case of the example, it' s optimal to use the second operation. So the array a becomes [ 1, 2, 5, 3, 5] \u2192 [ 4, 3, 3, 3, 3] . In the fourth test case of the example, it' s optimal to use the first operation on the first and the second bookshelves. So the array a becomes [ 4, 4, 1, 1] \u2192 [ 0, 0, 1, 1] . In the fifth test case of the example, it' s optimal to use the second operation. So the array a becomes [ 4, 4, 1, 1] \u2192 [ 2, 3, 2, 3] .",
    "topics": [
      "*special",
      "greedy",
      "sortings"
    ],
    "id": "1346C"
  },
  {
    "title": "Boot Camp",
    "url": "https://codeforces.com/problemset/problem/1346/B",
    "history": "Berland State University ( BSU) is conducting a programming boot camp. The boot camp will last for n days, and the BSU lecturers are planning to give some number of lectures during these days. Some days of the boot camp are already planned as excursion days, and no lectures should be held during these days. To make sure the participants don' t get too tired of learning to program, the number of lectures for each day should not exceed k_ 1 , and the number of lectures for each pair of consecutive days should not exceed k_ 2 . Can you calculate the maximum number of lectures that can be conducted during the boot camp? Formally, find the maximum integer m such that it is possible to choose n non- negative integers c_ 1 , c_ 2 , . . . , c_ n ( where c_ i is the number of lectures held during day i ) so that: c_ 1 + c_ 2 + . . . + c_ n = m ; for each excursion day d , c_ d = 0 ; for each day i , c_ i \u2264 k_ 1 ; for each pair of consecutive days ( i, i + 1) , c_ i + c_ i + 1\u2264 k_ 2 . Note that there might be some non- excursion days without lectures ( i. e. , it is possible that c_ i = 0 even if i is not an excursion day) .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 50 ) \u2014 the number of testcases. Then the testcases follow, each consists of two lines. The first line contains three integers n , k_ 1 , k_ 2 ( 1 \u2264 n \u2264 5000 ; 1 \u2264 k_ 1 \u2264 k_ 2 \u2264 200 000 ) . The second line contains one string s consisting of exactly n characters, each character is either 0 or 1. If s_ i = 0 , then day i is an excursion day ( so there should be no lectures during that day) ; if s_ i = 1 , then day i is not an excursion day.",
    "output": "For each test case, print one integer \u2014 the maximum possible value of m ( the number of lectures that can be conducted) .",
    "note": "",
    "topics": [
      "*special",
      "greedy"
    ],
    "id": "1346B"
  },
  {
    "title": "R\u00e9sum\u00e9 Review",
    "url": "https://codeforces.com/problemset/problem/1344/D",
    "history": "Uh oh! Applications to tech companies are due soon, and you' ve been procrastinating by doing contests instead! ( Let' s pretend for now that it is actually possible to get a job in these uncertain times. ) You have completed many programming projects. In fact, there are exactly n types of programming projects, and you have completed a_ i projects of type i . Your re\u0301sume\u0301 has limited space, but you want to carefully choose them in such a way that maximizes your chances of getting hired. You want to include several projects of the same type to emphasize your expertise, but you also don' t want to include so many that the low- quality projects start slipping in. Specifically, you determine the following quantity to be a good indicator of your chances of getting hired: f( b_ 1, . . . , b_ n) = \u2211_ i= 1^ n b_ i( a_ i- b_ i^ 2) . Here, b_ i denotes the number of projects of type i you include in your re\u0301sume\u0301. Of course, you cannot include more projects than you have completed, so you require 0\u2264 b_ i \u2264 a_ i for all i . Your re\u0301sume\u0301 only has enough room for k projects, and you will absolutely not be hired if your re\u0301sume\u0301 has empty space, so you require \u2211_ i= 1^ n b_ i= k . Find values for b_ 1, . . . , b_ n that maximize the value of f( b_ 1, . . . , b_ n) while satisfying the above two constraints.",
    "input": "The first line contains two integers n and k ( 1\u2264 n\u2264 10^ 5 , 1\u2264 k\u2264\u2211_ i= 1^ n a_ i ) \u2014 the number of types of programming projects and the re\u0301sume\u0301 size, respectively. The next line contains n integers a_ 1, . . . , a_ n ( 1\u2264 a_ i\u2264 10^ 9 ) \u2014 a_ i is equal to the number of completed projects of type i .",
    "output": "In a single line, output n integers b_ 1, . . . , b_ n that achieve the maximum value of f( b_ 1, . . . , b_ n) , while satisfying the requirements 0\u2264 b_ i\u2264 a_ i and \u2211_ i= 1^ n b_ i= k . If there are multiple solutions, output any. Note that you do not have to output the value f( b_ 1, . . . , b_ n) .",
    "note": "For the first test, the optimal answer is f= - 269 . Note that a larger f value is possible if we ignored the constraint \u2211_ i= 1^ n b_ i= k . For the second test, the optimal answer is f= 9 .",
    "topics": [
      "binary search",
      "greedy",
      "math"
    ],
    "id": "1344D"
  },
  {
    "title": "Restore the Permutation by Sorted Segments",
    "url": "https://codeforces.com/problemset/problem/1343/F",
    "history": "We guessed a permutation p consisting of n integers. The permutation of length n is the array of length n where each element from 1 to n appears exactly once. This permutation is a secret for you. For each position r from 2 to n we chose some other index l ( l < r ) and gave you the segment p_ l, p_ l + 1, . . . , p_ r in sorted order ( i. e. we rearranged the elements of this segment in a way that the elements of this segment are sorted) . Thus, you are given exactly n- 1 segments of the initial permutation but elements inside each segment are sorted. The segments are given to you in random order. For example, if the secret permutation is p= [ 3, 1, 4, 6, 2, 5] then the possible given set of segments can be: [ 2, 5, 6] [ 4, 6] [ 1, 3, 4] [ 1, 3] [ 1, 2, 4, 6] Your task is to find any suitable permutation ( i. e. any permutation corresponding to the given input data) . It is guaranteed that the input data corresponds to some permutation ( i. e. such permutation exists) . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 2 \u2264 n \u2264 200 ) \u2014 the length of the permutation. The next n- 1 lines describe given segments. The i - th line contains the description of the i - th segment. The line starts with the integer k_ i ( 2 \u2264 k_ i \u2264 n ) \u2014 the length of the i - th segment. Then k_ i integers follow. All integers in a line are distinct, sorted in ascending order, between 1 and n , inclusive. It is guaranteed that the required p exists for each test case. It is also guaranteed that the sum of n over all test cases does not exceed 200 ( \u2211 n \u2264 200 ) .",
    "output": "For each test case, print the answer: n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i should be distinct) \u2014 any suitable permutation ( i. e. any permutation corresponding to the test case input) .",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1343F"
  },
  {
    "title": "Weights Distributing",
    "url": "https://codeforces.com/problemset/problem/1343/E",
    "history": "You are given an undirected unweighted graph consisting of n vertices and m edges ( which represents the map of Bertown) and the array of prices p of length m . It is guaranteed that there is a path between each pair of vertices ( districts) . Mike has planned a trip from the vertex ( district) a to the vertex ( district) b and then from the vertex ( district) b to the vertex ( district) c . He can visit the same district twice or more. But there is one issue: authorities of the city want to set a price for using the road so if someone goes along the road then he should pay the price corresponding to this road ( he pays each time he goes along the road) . The list of prices that will be used p is ready and they just want to distribute it between all roads in the town in such a way that each price from the array corresponds to exactly one road. You are a good friend of Mike ( and suddenly a mayor of Bertown) and want to help him to make his trip as cheap as possible. So, your task is to distribute prices between roads in such a way that if Mike chooses the optimal path then the price of the trip is the minimum possible. Note that you cannot rearrange prices after the start of the trip. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains five integers n, m, a, b and c ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n- 1 \u2264 m \u2264 min( n( n- 1) / 2, 2 \u00b7 10^ 5) , 1 \u2264 a, b, c \u2264 n ) \u2014 the number of vertices, the number of edges and districts in Mike' s trip. The second line of the test case contains m integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 10^ 9 ) , where p_ i is the i - th price from the array. The following m lines of the test case denote edges: edge i is represented by a pair of integers v_ i , u_ i ( 1 \u2264 v_ i, u_ i \u2264 n , u_ i v_ i ) , which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ( v_ i, u_ i ) there are no other pairs ( v_ i, u_ i ) or ( u_ i, v_ i ) in the array of edges, and for each pair ( v_ i, u_ i) the condition v_ i u_ i is satisfied. It is guaranteed that the given graph is connected. It is guaranteed that the sum of n ( as well as the sum of m ) does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 , \u2211 m \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum possible price of Mike' s trip if you distribute prices between edges optimally.",
    "note": "One of the possible solution to the first test case of the example: One of the possible solution to the second test case of the example:",
    "topics": [
      "brute force",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ],
    "id": "1343E"
  },
  {
    "title": "Constant Palindrome Sum",
    "url": "https://codeforces.com/problemset/problem/1343/D",
    "history": "You are given an array a consisting of n integers ( it is guaranteed that n is even, i. e. divisible by 2 ) . All a_ i does not exceed some integer k . Your task is to replace the minimum number of elements ( replacement is the following operation: choose some index i from 1 to n and replace a_ i with some integer in range [ 1; k] ) to satisfy the following conditions: after all replacements, all a_ i are positive integers not greater than k ; for all i from 1 to n/ 2 the following equation is true: a_ i + a_ n - i + 1 = x , where x should be the same for all n/ 2 pairs of elements. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 k \u2264 2 \u00b7 10^ 5 ) \u2014 the length of a and the maximum possible value of some a_ i correspondingly. It is guratanteed that n is even ( i. e. divisible by 2 ) . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 k ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n ( as well as the sum of k ) over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 , \u2211 k \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum number of elements you have to replace in a to satisfy the conditions from the problem statement.",
    "note": "",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "two pointers"
    ],
    "id": "1343D"
  },
  {
    "title": "Alternating Subsequence",
    "url": "https://codeforces.com/problemset/problem/1343/C",
    "history": "Recall that the sequence b is a a subsequence of the sequence a if b can be derived from a by removing zero or more elements without changing the order of the remaining elements. For example, if a= [ 1, 2, 1, 3, 1, 2, 1] , then possible subsequences are: [ 1, 1, 1, 1] , [ 3] and [ 1, 2, 1, 3, 1, 2, 1] , but not [ 3, 2, 3] and [ 1, 1, 1, 1, 2] . You are given a sequence a consisting of n positive and negative elements ( there is no zeros in the sequence) . Your task is to choose maximum by size ( length) alternating subsequence of the given sequence ( i. e. the sign of each next element is the opposite from the sign of the current element, like positive- negative- positive and so on or negative- positive- negative and so on) . Among all such subsequences, you have to choose one which has the maximum sum of elements. In other words, if the maximum length of alternating subsequence is k then your task is to find the maximum sum of elements of some alternating subsequence of length k . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a . The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9, a_ i 0 ) , where a_ i is the i - th element of a . It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the maximum sum of the maximum by size ( length) alternating subsequence of a .",
    "note": "In the first test case of the example, one of the possible answers is [ 1, 2, 3, - 1, - 2] . In the second test case of the example, one of the possible answers is [ - 1, - 2, - 1, - 3] . In the third test case of the example, one of the possible answers is [ - 2, 8, 3, 8, - 4, - 15, 5, - 2, - 3, 1] . In the fourth test case of the example, one of the possible answers is [ 1, - 1000000000, 1, - 1000000000, 1, - 1000000000] .",
    "topics": [
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1343C"
  },
  {
    "title": "Multiple Testcases",
    "url": "https://codeforces.com/problemset/problem/1342/D",
    "history": "So you decided to hold a contest on Codeforces. You prepared the problems: statements, solutions, checkers, validators, tests. . . Suddenly, your coordinator asks you to change all your tests to multiple testcases in the easiest problem! Initially, each test in that problem is just an array. The maximum size of an array is k . For simplicity, the contents of arrays don' t matter. You have n tests \u2014 the i - th test is an array of size m_ i ( 1 \u2264 m_ i \u2264 k ) . Your coordinator asks you to distribute all of your arrays into multiple testcases. Each testcase can include multiple arrays. However, each testcase should include no more than c_ 1 arrays of size greater than or equal to 1 ( \u2265 1 ) , no more than c_ 2 arrays of size greater than or equal to 2 , . . . , no more than c_ k arrays of size greater than or equal to k . Also, c_ 1 \u2265 c_ 2 \u2265. . . \u2265 c_ k . So now your goal is to create the new testcases in such a way that: each of the initial arrays appears in exactly one testcase; for each testcase the given conditions hold; the number of testcases is minimum possible. Print the minimum possible number of testcases you can achieve and the sizes of arrays included in each testcase.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n, k \u2264 2 \u00b7 10^ 5 ) \u2014 the number of initial tests and the limit for the size of each array. The second line contains n integers m_ 1, m_ 2, . . . , m_ n ( 1 \u2264 m_ i \u2264 k ) \u2014 the sizes of the arrays in the original tests. The third line contains k integers c_ 1, c_ 2, . . . , c_ k ( n \u2265 c_ 1 \u2265 c_ 2 \u2265. . . \u2265 c_ k \u2265 1 ) ; c_ i is the maximum number of arrays of size greater than or equal to i you can have in a single testcase.",
    "output": "In the first line print a single integer ans ( 1 \u2264 ans \u2264 n ) \u2014 the minimum number of testcases you can achieve. Each of the next ans lines should contain the description of a testcase in the following format: t a_ 1 a_ 2 . . . a_ t ( 1 \u2264 t\u2264 n ) \u2014 the testcase includes t arrays, a_ i is the size of the i - th array in that testcase. Each of the initial arrays should appear in exactly one testcase. In particular, it implies that the sum of t over all ans testcases should be equal to n . Note that the answer always exists due to c_ k \u2265 1 ( and therefore c_ 1 \u2265 1 ) . If there are multiple answers, you can output any one of them.",
    "note": "In the first example there is no way to distribute the tests into less than 3 testcases. The given answer satisfies the conditions: each of the testcases includes no more than 4 arrays of size greater than or equal to 1 and no more than 1 array of sizes greater than or equal to 2 and 3 . Note that there are multiple valid answers for this test. For example, testcases with sizes [ [ 2] , [ 1, 2] , [ 3] ] would also be correct. However, testcases with sizes [ [ 1, 2] , [ 2, 3] ] would be incorrect because there are 2 arrays of size greater than or equal to 2 in the second testcase. Note the difference between the third and the fourth examples. You can include up to 5 arrays of size greater than or equal to 1 in the third example, so you can put all arrays into a single testcase. And you can have only up to 1 array in the fourth example. Thus, every array should be included in a separate testcase.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "data structures",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1342D"
  },
  {
    "title": "Road To Zero",
    "url": "https://codeforces.com/problemset/problem/1342/A",
    "history": "You are given two integers x and y . You can perform two types of operations: Pay a dollars and increase or decrease any of these integers by 1 . For example, if x = 0 and y = 7 there are four possible outcomes after this operation: x = 0 , y = 6 ; x = 0 , y = 8 ; x = - 1 , y = 7 ; x = 1 , y = 7 . Pay b dollars and increase or decrease both integers by 1 . For example, if x = 0 and y = 7 there are two possible outcomes after this operation: x = - 1 , y = 6 ; x = 1 , y = 8 . Your goal is to make both given integers equal zero simultaneously, i. e. x = y = 0 . There are no other requirements. In particular, it is possible to move from x= 1 , y= 0 to x= y= 0 . Calculate the minimum amount of dollars you have to spend on it.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of testcases. The first line of each test case contains two integers x and y ( 0 \u2264 x, y \u2264 10^ 9 ) . The second line of each test case contains two integers a and b ( 1 \u2264 a, b \u2264 10^ 9 ) .",
    "output": "For each test case print one integer \u2014 the minimum amount of dollars you have to spend.",
    "note": "In the first test case you can perform the following sequence of operations: first, second, first. This way you spend 391 + 555 + 391 = 1337 dollars. In the second test case both integers are equal to zero initially, so you dont' have to spend money.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1342A"
  },
  {
    "title": "Nastya and Door",
    "url": "https://codeforces.com/problemset/problem/1341/B",
    "history": "On February 14 Denis decided to give Valentine to Nastya and did not come up with anything better than to draw a huge red heart on the door of the length k ( k \u2265 3 ) . Nastya was very confused by this present, so she decided to break the door, throwing it on the mountains. Mountains are described by a sequence of heights a_ 1, a_ 2, . . . , a_ n in order from left to right ( k \u2264 n ) . It is guaranteed that neighboring heights are not equal to each other ( that is, a_ i a_ i+ 1 for all i from 1 to n- 1 ) . Peaks of mountains on the segment [ l, r] ( from l to r ) are called indexes i such that l < i < r , a_ i - 1 < a_ i and a_ i > a_ i + 1 . It is worth noting that the boundary indexes l and r for the segment are not peaks. For example, if n= 8 and a= [ 3, 1, 4, 1, 5, 9, 2, 6] , then the segment [ 1, 8] has only two peaks ( with indexes 3 and 6 ) , and there are no peaks on the segment [ 3, 6] . To break the door, Nastya throws it to a segment [ l, l+ k- 1] of consecutive mountains of length k ( 1 \u2264 l \u2264 n- k+ 1 ) . When the door touches the peaks of the mountains, it breaks into two parts, after that these parts will continue to fall in different halves and also break into pieces when touching the peaks of the mountains, and so on. Formally, the number of parts that the door will break into will be equal to p+ 1 , where p is the number of peaks on the segment [ l, l+ k- 1] . Nastya wants to break it into as many pieces as possible. Help her choose such a segment of mountains [ l, l+ k- 1] that the number of peaks on it is maximum. If there are several optimal segments, Nastya wants to find one for which the value l is minimal. Formally, you need to choose a segment of mountains [ l, l+ k- 1] that has the maximum number of peaks. Among all such segments, you need to find the segment that has the minimum possible value l .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then the descriptions of the test cases follow. The first line of each test case contains two integers n and k ( 3 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of mountains and the length of the door. The second line of the input data set contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10 ^ 9 , a_ i = \u0338 a_ i + 1 ) \u2014 the heights of mountains. It is guaranteed that the sum of n over all the test cases will not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output two integers t and l \u2014 the maximum number of parts that the door can split into, and the left border of the segment of length k that the door should be reset to.",
    "note": "In the first example, you need to select a segment of mountains from 2 to 7 . In this segment, the indexes 3 and 6 are peaks, so the answer is 3 ( only 2 peaks, so the door will break into 3 parts) . It is not difficult to notice that the mountain segments [ 1, 6] and [ 3, 8] are not suitable since they only have a 1 peak ( for the first segment, the 6 index is not a peak, and for the second segment, the 3 index is not a peak) . In the second example, you need to select a segment of mountains from 2 to 4 . In this segment, the index 3 is a peak, so the answer is 2 ( only 1 peak, so the door will break into 2 parts) . In the third example, you need to select a segment of mountains from 1 to 4 . In this segment, the index 3 is a peak, so the answer is 2 ( only 1 peak, so the door will break into 2 parts) . You can see that on the segments [ 2, 5] , [ 4, 7] and [ 5, 8] the number of peaks is also 1 , but these segments have a left border greater than the segment [ 1, 4] , so they are not the correct answer.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1341B"
  },
  {
    "title": "Nastya and Scoreboard",
    "url": "https://codeforces.com/problemset/problem/1340/B",
    "history": "Denis, after buying flowers and sweets ( you will learn about this story in the next task) , went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally. . . Denis asks her to be together, but . . . Nastya doesn' t give any answer. The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks ( which are off now) ? It is allowed that the number includes leading zeros.",
    "input": "The first line contains integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of digits on scoreboard and k ( 0 \u2264 k \u2264 2000) \u2014 the number of segments that stopped working. The next n lines contain one binary string of length 7 , the i - th of which encodes the i - th digit of the scoreboard. Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i - th place of the binary string be 0 if the i - th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now. Thus, the sequences \" 1110111\" , \" 0010010\" , \" 1011101\" , \" 1011011\" , \" 0111010\" , \" 1101011\" , \" 1101111\" , \" 1010010\" , \" 1111111\" , \" 1111011\" encode in sequence all digits from 0 to 9 inclusive.",
    "output": "Output a single number consisting of n digits \u2014 the maximum number that can be obtained if you turn on exactly k sticks or - 1 , if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.",
    "note": "In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard. In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07 , 18 , 34 , 43 , 70 , 79 , 81 and 97 , of which we choose the maximum \u2014 97 . In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.",
    "topics": [
      "bitmasks",
      "dp",
      "graphs",
      "greedy"
    ],
    "id": "1340B"
  },
  {
    "title": "Nastya and Strange Generator",
    "url": "https://codeforces.com/problemset/problem/1340/A",
    "history": "Denis was very sad after Nastya rejected him. So he decided to walk through the gateways to have some fun. And luck smiled at him! When he entered the first courtyard, he met a strange man who was selling something. Denis bought a mysterious item and it was. . . Random permutation generator! Denis could not believed his luck. When he arrived home, he began to study how his generator works and learned the algorithm. The process of generating a permutation consists of n steps. At the i - th step, a place is chosen for the number i ( 1 \u2264 i \u2264 n) . The position for the number i is defined as follows: For all j from 1 to n , we calculate r_ j \u2014 the minimum index such that j \u2264 r_ j \u2264 n , and the position r_ j is not yet occupied in the permutation. If there are no such positions, then we assume that the value of r_ j is not defined. For all t from 1 to n , we calculate count_ t \u2014 the number of positions 1 \u2264 j \u2264 n such that r_ j is defined and r_ j = t . Consider the positions that are still not occupied by permutation and among those we consider the positions for which the value in the count array is maximum. The generator selects one of these positions for the number i . The generator can choose any position. Let' s have a look at the operation of the algorithm in the following example: Let n = 5 and the algorithm has already arranged the numbers 1, 2, 3 in the permutation. Consider how the generator will choose a position for the number 4 : The values of r will be r = [ 3, 3, 3, 4, \u00d7] , where \u00d7 means an indefinite value. Then the count values will be count = [ 0, 0, 3, 1, 0] . There are only two unoccupied positions in the permutation: 3 and 4 . The value in the count array for position 3 is 3 , for position 4 it is 1 . The maximum value is reached only for position 3 , so the algorithm will uniquely select this position for number 4 . Satisfied with his purchase, Denis went home. For several days without a break, he generated permutations. He believes that he can come up with random permutations no worse than a generator. After that, he wrote out the first permutation that came to mind p_ 1, p_ 2, . . . , p_ n and decided to find out if it could be obtained as a result of the generator. Unfortunately, this task was too difficult for him, and he asked you for help. It is necessary to define whether the written permutation could be obtained using the described algorithm if the generator always selects the position Denis needs.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5) \u2014 the number of test cases. Then the descriptions of the test cases follow. The first line of the test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5) \u2014 the size of the permutation. The second line of the test case contains n different integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the permutation written by Denis. It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "Print \" Yes\" if this permutation could be obtained as a result of the generator. Otherwise, print \" No\" . All letters can be displayed in any case.",
    "note": "Let' s simulate the operation of the generator in the first test. At the 1 step, r = [ 1, 2, 3, 4, 5] , count = [ 1, 1, 1, 1, 1] . The maximum value is reached in any free position, so the generator can choose a random position from 1 to 5 . In our example, it chose 5 . At the 2 step, r = [ 1, 2, 3, 4, \u00d7] , count = [ 1, 1, 1, 1, 0] . The maximum value is reached in positions from 1 to 4 , so the generator can choose a random position among them. In our example, it chose 1 . At the 3 step, r = [ 2, 2, 3, 4, \u00d7] , count = [ 0, 2, 1, 1, 0] . The maximum value is 2 and is reached only at the 2 position, so the generator will choose this position. At the 4 step, r = [ 3, 3, 3, 4, \u00d7] , count = [ 0, 0, 3, 1, 0] . The maximum value is 3 and is reached only at the 3 position, so the generator will choose this position. At the 5 step, r = [ 4, 4, 4, 4, \u00d7] , count = [ 0, 0, 0, 4, 0] . The maximum value is 4 and is reached only at the 4 position, so the generator will choose this position. In total, we got a permutation of 2, 3, 4, 5, 1 , that is, a generator could generate it.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1340A"
  },
  {
    "title": "Edge Weight Assignment",
    "url": "https://codeforces.com/problemset/problem/1338/B",
    "history": "You have unweighted tree of n vertices. You have to assign a positive weight to each edge so that the following condition would hold: For every two different leaves v_ 1 and v_ 2 of this tree, bitwise XOR of weights of all edges on the simple path between v_ 1 and v_ 2 has to be equal to 0 . Note that you can put very large positive integers ( like 10^ ( 10^ 10) ) . It' s guaranteed that such assignment always exists under given constraints. Now let' s define f as the number of distinct weights in assignment. In this example, assignment is valid, because bitwise XOR of all edge weights between every pair of leaves is 0 . f value is 2 here, because there are 2 distinct edge weights( 4 and 5 ) . In this example, assignment is invalid, because bitwise XOR of all edge weights between vertex 1 and vertex 6 ( 3, 4, 5, 4 ) is not 0 . What are the minimum and the maximum possible values of f for the given tree? Find and print both.",
    "input": "The first line contains integer n ( 3 \u2264 n \u2264 10^ 5 ) \u2014 the number of vertices in given tree. The i - th of the next n- 1 lines contains two integers a_ i and b_ i ( 1 \u2264 a_ i b_ i\u2264 n ) \u2014 it means there is an edge between a_ i and b_ i . It is guaranteed that given graph forms tree of n vertices.",
    "output": "Print two integers \u2014 the minimum and maximum possible value of f can be made from valid assignment of given tree. Note that it' s always possible to make an assignment under given constraints.",
    "note": "In the first example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum. In the second example, possible assignments for each minimum and maximum are described in picture below. The f value of valid assignment of this tree is always 3 . In the third example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "math",
      "trees"
    ],
    "id": "1338B"
  },
  {
    "title": "Powered Addition",
    "url": "https://codeforces.com/problemset/problem/1338/A",
    "history": "You have an array a of length n . For every positive integer x you are going to perform the following operation during the x - th second: Select some distinct indices i_ 1, i_ 2, . . . , i_ k which are between 1 and n inclusive, and add 2^ x- 1 to each corresponding position of a . Formally, a_ i_ j : = a_ i_ j + 2^ x- 1 for j = 1, 2, . . . , k . Note that you are allowed to not select any indices at all. You have to make a nondecreasing as fast as possible. Find the smallest number T such that you can make the array nondecreasing after at most T seconds. Array a is nondecreasing if and only if a_ 1\u2264 a_ 2\u2264. . . \u2264 a_ n . You have to answer t independent test cases.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The first line of each test case contains single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of array a . It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^ 5 . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9\u2264 a_ i\u2264 10^ 9 ) .",
    "output": "For each test case, print the minimum number of seconds in which you can make a nondecreasing.",
    "note": "In the first test case, if you select indices 3, 4 at the 1 - st second and 4 at the 2 - nd second, then a will become [ 1, 7, 7, 8] . There are some other possible ways to make a nondecreasing in 2 seconds, but you can' t do it faster. In the second test case, a is already nondecreasing, so answer is 0 . In the third test case, if you do nothing at first 2 seconds and select index 2 at the 3 - rd second, a will become [ 0, 0] .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1338A"
  },
  {
    "title": "Kana and Dragon Quest game",
    "url": "https://codeforces.com/problemset/problem/1337/B",
    "history": "Kana was just an ordinary high school girl before a talent scout discovered her. Then, she became an idol. But different from the stereotype, she is also a gameholic. One day Kana gets interested in a new adventure game called Dragon Quest. In this game, her quest is to beat a dragon. The dragon has a hit point of x initially. When its hit point goes to 0 or under 0 , it will be defeated. In order to defeat the dragon, Kana can cast the two following types of spells. Void Absorption Assume that the dragon' s current hit point is h , after casting this spell its hit point will become \u230ah/ 2\u230b + 10 . Here \u230ah/ 2\u230b denotes h divided by two, rounded down. Lightning Strike This spell will decrease the dragon' s hit point by 10 . Assume that the dragon' s current hit point is h , after casting this spell its hit point will be lowered to h- 10 . Due to some reasons Kana can only cast no more than n Void Absorptions and m Lightning Strikes. She can cast the spells in any order and doesn' t have to cast all the spells. Kana isn' t good at math, so you are going to help her to find out whether it is possible to defeat the dragon.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The next t lines describe test cases. For each test case the only line contains three integers x , n , m ( 1\u2264 x \u2264 10^ 5 , 0\u2264 n, m\u226430 ) \u2014 the dragon' s intitial hit point, the maximum number of Void Absorptions and Lightning Strikes Kana can cast respectively.",
    "output": "If it is possible to defeat the dragon, print \" YES\" ( without quotes) . Otherwise, print \" NO\" ( without quotes) . You can print each letter in any case ( upper or lower) .",
    "note": "One possible casting sequence of the first test case is shown below: Void Absorption \u230a100/ 2\u230b + 10= 60 . Lightning Strike 60- 10= 50 . Void Absorption \u230a50/ 2\u230b + 10= 35 . Void Absorption \u230a35/ 2\u230b + 10= 27 . Lightning Strike 27- 10= 17 . Lightning Strike 17- 10= 7 . Lightning Strike 7- 10= - 3 .",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1337B"
  },
  {
    "title": "Xenia and Colorful Gems",
    "url": "https://codeforces.com/problemset/problem/1336/B",
    "history": "Xenia is a girl being born a noble. Due to the inflexibility and harshness of her family, Xenia has to find some ways to amuse herself. Recently Xenia has bought n_ r red gems, n_ g green gems and n_ b blue gems. Each of the gems has a weight. Now, she is going to pick three gems. Xenia loves colorful things, so she will pick exactly one gem of each color. Xenia loves balance, so she will try to pick gems with little difference in weight. Specifically, supposing the weights of the picked gems are x , y and z , Xenia wants to find the minimum value of ( x- y) ^ 2+ ( y- z) ^ 2+ ( z- x) ^ 2 . As her dear friend, can you help her?",
    "input": "The first line contains a single integer t ( 1\u2264 t \u2264 100 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains three integers n_ r, n_ g, n_ b ( 1\u2264 n_ r, n_ g, n_ b\u2264 10^ 5 ) \u2014 the number of red gems, green gems and blue gems respectively. The second line of each test case contains n_ r integers r_ 1, r_ 2, . . . , r_ n_ r ( 1\u2264 r_ i \u2264 10^ 9 ) \u2014 r_ i is the weight of the i - th red gem. The third line of each test case contains n_ g integers g_ 1, g_ 2, . . . , g_ n_ g ( 1\u2264 g_ i \u2264 10^ 9 ) \u2014 g_ i is the weight of the i - th green gem. The fourth line of each test case contains n_ b integers b_ 1, b_ 2, . . . , b_ n_ b ( 1\u2264 b_ i \u2264 10^ 9 ) \u2014 b_ i is the weight of the i - th blue gem. It is guaranteed that \u2211 n_ r \u2264 10^ 5 , \u2211 n_ g \u2264 10^ 5 , \u2211 n_ b \u2264 10^ 5 ( the sum for all test cases) .",
    "output": "For each test case, print a line contains one integer \u2014 the minimum value which Xenia wants to find.",
    "note": "In the first test case, Xenia has the following gems: If she picks the red gem with weight 7 , the green gem with weight 6 , and the blue gem with weight 4 , she will achieve the most balanced selection with ( x- y) ^ 2+ ( y- z) ^ 2+ ( z- x) ^ 2= ( 7- 6) ^ 2+ ( 6- 4) ^ 2+ ( 4- 7) ^ 2= 14 .",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "sortings",
      "two pointers"
    ],
    "id": "1336B"
  },
  {
    "title": "Linova and Kingdom",
    "url": "https://codeforces.com/problemset/problem/1336/A",
    "history": "Writing light novels is the most important thing in Linova' s life. Last night, Linova dreamed about a fantastic kingdom. She began to write a light novel for the kingdom as soon as she woke up, and of course, she is the queen of it. There are n cities and n- 1 two- way roads connecting pairs of cities in the kingdom. From any city, you can reach any other city by walking through some roads. The cities are numbered from 1 to n , and the city 1 is the capital of the kingdom. So, the kingdom has a tree structure. As the queen, Linova plans to choose exactly k cities developing industry, while the other cities will develop tourism. The capital also can be either industrial or tourism city. A meeting is held in the capital once a year. To attend the meeting, each industry city sends an envoy. All envoys will follow the shortest path from the departure city to the capital ( which is unique) . Traveling in tourism cities is pleasant. For each envoy, his happiness is equal to the number of tourism cities on his path. In order to be a queen loved by people, Linova wants to choose k cities which can maximize the sum of happinesses of all envoys. Can you calculate the maximum sum for her?",
    "input": "The first line contains two integers n and k ( 2\u2264 n\u2264 2 \u00b7 10^ 5 , 1\u2264 k< n ) \u2014 the number of cities and industry cities respectively. Each of the next n- 1 lines contains two integers u and v ( 1\u2264 u, v\u2264 n ) , denoting there is a road connecting city u and city v . It is guaranteed that from any city, you can reach any other city by the roads.",
    "output": "Print the only line containing a single integer \u2014 the maximum possible sum of happinesses of all envoys.",
    "note": "In the first example, Linova can choose cities 2 , 5 , 6 , 7 to develop industry, then the happiness of the envoy from city 2 is 1 , the happiness of envoys from cities 5 , 6 , 7 is 2 . The sum of happinesses is 7 , and it can be proved to be the maximum one. In the second example, choosing cities 3 , 4 developing industry can reach a sum of 3 , but remember that Linova plans to choose exactly k cities developing industry, then the maximum sum is 2 .",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1336A"
  },
  {
    "title": "Robots on a Grid",
    "url": "https://codeforces.com/problemset/problem/1335/F",
    "history": "There is a rectangular grid of size n \u00d7 m . Each cell of the grid is colored black ( ' 0' ) or white ( ' 1' ) . The color of the cell ( i, j) is c_ i, j . You are also given a map of directions: for each cell, there is a direction s_ i, j which is one of the four characters ' U' , ' R' , ' D' and ' L' . If s_ i, j is ' U' then there is a transition from the cell ( i, j) to the cell ( i - 1, j) ; if s_ i, j is ' R' then there is a transition from the cell ( i, j) to the cell ( i, j + 1) ; if s_ i, j is ' D' then there is a transition from the cell ( i, j) to the cell ( i + 1, j) ; if s_ i, j is ' L' then there is a transition from the cell ( i, j) to the cell ( i, j - 1) . It is guaranteed that the top row doesn' t contain characters ' U' , the bottom row doesn' t contain characters ' D' , the leftmost column doesn' t contain characters ' L' and the rightmost column doesn' t contain characters ' R' . You want to place some robots in this field ( at most one robot in a cell) . The following conditions should be satisfied. Firstly, each robot should move every time ( i. e. it cannot skip the move) . During one move each robot goes to the adjacent cell depending on the current direction. Secondly, you have to place robots in such a way that there is no move before which two different robots occupy the same cell ( it also means that you cannot place two robots in the same cell) . I. e. if the grid is \" RL\" ( one row, two columns, colors does not matter there) then you can place two robots in cells ( 1, 1) and ( 1, 2) , but if the grid is \" RLL\" then you cannot place robots in cells ( 1, 1) and ( 1, 3) because during the first second both robots will occupy the cell ( 1, 2) . The robots make an infinite number of moves. Your task is to place the maximum number of robots to satisfy all the conditions described above and among all such ways, you have to choose one where the number of black cells occupied by robots before all movements is the maximum possible. Note that you can place robots only before all movements. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 5 \u00b7 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains two integers n and m ( 1 < nm \u2264 10^ 6 ) \u2014 the number of rows and the number of columns correspondingly. The next n lines contain m characters each, where the j - th character of the i - th line is c_ i, j ( c_ i, j is either ' 0' if the cell ( i, j) is black or ' 1' if the cell ( i, j) is white) . The next n lines also contain m characters each, where the j - th character of the i - th line is s_ i, j ( s_ i, j is ' U' , ' R' , ' D' or ' L' and describes the direction of the cell ( i, j) ) . It is guaranteed that the sum of the sizes of fields does not exceed 10^ 6 ( \u2211 nm \u2264 10^ 6 ) .",
    "output": "For each test case, print two integers \u2014 the maximum number of robots you can place to satisfy all the conditions described in the problem statement and the maximum number of black cells occupied by robots before all movements if the number of robots placed is maximized. Note that you can place robots only before all movements.",
    "note": "",
    "topics": [
      "data structures",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "matrices"
    ],
    "id": "1335F"
  },
  {
    "title": "Two Teams Composing",
    "url": "https://codeforces.com/problemset/problem/1335/C",
    "history": "You have n students under your control and you have to compose exactly two teams consisting of some subset of your students. Each student had his own skill, the i - th student skill is denoted by an integer a_ i ( different students can have the same skills) . So, about the teams. Firstly, these two teams should have the same size. Two more constraints: The first team should consist of students with distinct skills ( i. e. all skills in the first team are unique) . The second team should consist of students with the same skills ( i. e. all skills in the second team are equal) . Note that it is permissible that some student of the first team has the same skill as a student of the second team. Consider some examples ( skills are given) : [ 1, 2, 3] , [ 4, 4] is not a good pair of teams because sizes should be the same; [ 1, 1, 2] , [ 3, 3, 3] is not a good pair of teams because the first team should not contain students with the same skills; [ 1, 2, 3] , [ 3, 4, 4] is not a good pair of teams because the second team should contain students with the same skills; [ 1, 2, 3] , [ 3, 3, 3] is a good pair of teams; [ 5] , [ 6] is a good pair of teams. Your task is to find the maximum possible size x for which it is possible to compose a valid pair of teams, where each team size is x ( skills in the first team needed to be unique, skills in the second team should be the same between them) . A student cannot be part of more than one team. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students. The second line of the test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the skill of the i - th student. Different students can have the same skills. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 n \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the maximum possible size x for which it is possible to compose a valid pair of teams, where each team size is x .",
    "note": "In the first test case of the example, it is possible to construct two teams of size 3 : the first team is [ 1, 2, 4] and the second team is [ 4, 4, 4] . Note, that there are some other ways to construct two valid teams of size 3 .",
    "topics": [
      "binary search",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1335C"
  },
  {
    "title": "Strange Function",
    "url": "https://codeforces.com/problemset/problem/1334/F",
    "history": "Let' s denote the following function f . This function takes an array a of length n and returns an array. Initially the result is an empty array. For each integer i from 1 to n we add element a_ i to the end of the resulting array if it is greater than all previous elements ( more formally, if a_ i > max_ 1 \u2264 j < ia_ j ) . Some examples of the function f : if a = [ 3, 1, 2, 7, 7, 3, 6, 7, 8] then f( a) = [ 3, 7, 8] ; if a = [ 1] then f( a) = [ 1] ; if a = [ 4, 1, 1, 2, 3] then f( a) = [ 4] ; if a = [ 1, 3, 1, 2, 6, 8, 7, 7, 4, 11, 10] then f( a) = [ 1, 3, 6, 8, 11] . You are given two arrays: array a_ 1, a_ 2, . . . , a_ n and array b_ 1, b_ 2, . . . , b_ m . You can delete some elements of array a ( possibly zero) . To delete the element a_ i , you have to pay p_ i coins ( the value of p_ i can be negative, then you get | p_ i| coins, if you delete this element) . Calculate the minimum number of coins ( possibly negative) you have to spend for fulfilling equality f( a) = b .",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 5) \u2014 the length of array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n) \u2014 the array a . The third line contains n integers p_ 1, p_ 2, . . . , p_ n ( | p_ i| \u2264 10^ 9) \u2014 the array p . The fourth line contains one integer m ( 1 \u2264 m \u2264 n) \u2014 the length of array b . The fifth line contains m integers b_ 1, b_ 2, . . . , b_ m ( 1 \u2264 b_ i \u2264 n, b_ i- 1 < b_ i) \u2014 the array b .",
    "output": "If the answer exists, in the first line print YES. In the second line, print the minimum number of coins you have to spend for fulfilling equality f( a) = b . Otherwise in only line print NO.",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1334F"
  },
  {
    "title": "Divisor Paths",
    "url": "https://codeforces.com/problemset/problem/1334/E",
    "history": "You are given a positive integer D . Let' s build the following graph from it: each vertex is a divisor of D ( not necessarily prime, 1 and D itself are also included) ; two vertices x and y ( x > y ) have an undirected edge between them if x is divisible by y and x/ y is a prime; the weight of an edge is the number of divisors of x that are not divisors of y . For example, here is the graph for D= 12 : Edge ( 4, 12) has weight 3 because 12 has divisors [ 1, 2, 3, 4, 6, 12] and 4 has divisors [ 1, 2, 4] . Thus, there are 3 divisors of 12 that are not divisors of 4 \u2014 [ 3, 6, 12] . There is no edge between 3 and 2 because 3 is not divisible by 2 . There is no edge between 12 and 3 because 12/ 3= 4 is not a prime. Let the length of the path between some vertices v and u in the graph be the total weight of edges on it. For example, path [ ( 1, 2) , ( 2, 6) , ( 6, 12) , ( 12, 4) , ( 4, 2) , ( 2, 6) ] has length 1+ 2+ 2+ 3+ 1+ 2= 11 . The empty path has length 0 . So the shortest path between two vertices v and u is the path that has the minimal possible length. Two paths a and b are different if there is either a different number of edges in them or there is a position i such that a_ i and b_ i are different edges. You are given q queries of the following form: v u \u2014 calculate the number of the shortest paths between vertices v and u . The answer for each query might be large so print it modulo 998244353 .",
    "input": "The first line contains a single integer D ( 1 \u2264 D \u2264 10^ 15 ) \u2014 the number the graph is built from. The second line contains a single integer q ( 1 \u2264 q \u2264 3 \u00b7 10^ 5 ) \u2014 the number of queries. Each of the next q lines contains two integers v and u ( 1 \u2264 v, u \u2264 D ) . It is guaranteed that D is divisible by both v and u ( both v and u are divisors of D ) .",
    "output": "Print q integers \u2014 for each query output the number of the shortest paths between the two given vertices modulo 998244353 .",
    "note": "In the first example: The first query is only the empty path \u2014 length 0 ; The second query are paths [ ( 12, 4) , ( 4, 2) , ( 2, 1) ] ( length 3+ 1+ 1= 5 ) , [ ( 12, 6) , ( 6, 2) , ( 2, 1) ] ( length 2+ 2+ 1= 5 ) and [ ( 12, 6) , ( 6, 3) , ( 3, 1) ] ( length 2+ 2+ 1= 5 ) . The third query is only the path [ ( 3, 1) , ( 1, 2) , ( 2, 4) ] ( length 1+ 1+ 1= 3 ) .",
    "topics": [
      "combinatorics",
      "graphs",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1334E"
  },
  {
    "title": "Minimum Euler Cycle",
    "url": "https://codeforces.com/problemset/problem/1334/D",
    "history": "You are given a complete directed graph K_ n with n vertices: each pair of vertices u = \u0338 v in K_ n have both directed edges ( u, v) and ( v, u) ; there are no self- loops. You should find such a cycle in K_ n that visits every directed edge exactly once ( allowing for revisiting vertices) . We can write such cycle as a list of n( n - 1) + 1 vertices v_ 1, v_ 2, v_ 3, . . . , v_ n( n - 1) - 1, v_ n( n - 1) , v_ n( n - 1) + 1 = v_ 1 \u2014 a visiting order, where each ( v_ i, v_ i + 1) occurs exactly once. Find the lexicographically smallest such cycle. It' s not hard to prove that the cycle always exists. Since the answer can be too large print its [ l, r] segment, in other words, v_ l, v_ l + 1, . . . , v_ r .",
    "input": "The first line contains the single integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of test cases. Next T lines contain test cases \u2014 one per line. The first and only line of each test case contains three integers n , l and r ( 2 \u2264 n \u2264 10^ 5 , 1 \u2264 l \u2264 r \u2264 n( n - 1) + 1 , r - l + 1 \u2264 10^ 5 ) \u2014 the number of vertices in K_ n , and segment of the cycle to print. It' s guaranteed that the total sum of n doesn' t exceed 10^ 5 and the total sum of r - l + 1 doesn' t exceed 10^ 5 .",
    "output": "For each test case print the segment v_ l, v_ l + 1, . . . , v_ r of the lexicographically smallest cycle that visits every edge exactly once.",
    "note": "In the second test case, the lexicographically minimum cycle looks like: 1, 2, 1, 3, 2, 3, 1 . In the third test case, it' s quite obvious that the cycle should start and end in vertex 1 .",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "implementation"
    ],
    "id": "1334D"
  },
  {
    "title": "Circle of Monsters",
    "url": "https://codeforces.com/problemset/problem/1334/C",
    "history": "You are playing another computer game, and now you have to slay n monsters. These monsters are standing in a circle, numbered clockwise from 1 to n . Initially, the i - th monster has a_ i health. You may shoot the monsters to kill them. Each shot requires exactly one bullet and decreases the health of the targeted monster by 1 ( deals 1 damage to it) . Furthermore, when the health of some monster i becomes 0 or less than 0 , it dies and explodes, dealing b_ i damage to the next monster ( monster i + 1 , if i < n , or monster 1 , if i = n ) . If the next monster is already dead, then nothing happens. If the explosion kills the next monster, it explodes too, damaging the monster after it and possibly triggering another explosion, and so on. You have to calculate the minimum number of bullets you have to fire to kill all n monsters in the circle.",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 150000 ) \u2014 the number of test cases. Then the test cases follow, each test case begins with a line containing one integer n ( 2 \u2264 n \u2264 300000 ) \u2014 the number of monsters. Then n lines follow, each containing two integers a_ i and b_ i ( 1 \u2264 a_ i, b_ i \u2264 10^ 12 ) \u2014 the parameters of the i - th monster in the circle. It is guaranteed that the total number of monsters in all test cases does not exceed 300000 .",
    "output": "For each test case, print one integer \u2014 the minimum number of bullets you have to fire to kill all of the monsters.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1334C"
  },
  {
    "title": "Middle Class",
    "url": "https://codeforces.com/problemset/problem/1334/B",
    "history": "Many years ago Berland was a small country where only n people lived. Each person had some savings: the i - th one had a_ i burles. The government considered a person as wealthy if he had at least x burles. To increase the number of wealthy people Berland decided to carry out several reforms. Each reform looked like that: the government chooses some subset of people ( maybe all of them) ; the government takes all savings from the chosen people and redistributes the savings among the chosen people equally. For example, consider the savings as list [ 5, 1, 2, 1] : if the government chose the 1 - st and the 3 - rd persons then it, at first, will take all 5 + 2 = 7 burles and after that will return 3. 5 burles to the chosen people. As a result, the savings will become [ 3. 5, 1, 3. 5, 1] . A lot of data was lost from that time, so we don' t know how many reforms were implemented and to whom. All we can do is ask you to calculate the maximum possible number of wealthy people after several ( maybe zero) reforms.",
    "input": "The first line contains single integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of test cases. Next 2T lines contain the test cases \u2014 two lines per test case. The first line contains two integers n and x ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of people and the minimum amount of money to be considered as wealthy. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the initial savings of each person. It' s guaranteed that the total sum of n doesn' t exceed 10^ 5 .",
    "output": "Print T integers \u2014 one per test case. For each test case print the maximum possible number of wealthy people after several ( maybe zero) reforms.",
    "note": "The first test case is described in the statement. In the second test case, the government, for example, could carry out two reforms: [ 11, 9, 11, 9] \u2192 [ 10, 10, 11, 9] \u2192 [ 10, 10, 10, 10] . In the third test case, the government couldn' t make even one person wealthy. In the fourth test case, the government could choose all people to carry out a reform: [ 9, 4, 9] \u2192 [ 71/ 3, 71/ 3, 71/ 3] .",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1334B"
  },
  {
    "title": "Kate and imperfection",
    "url": "https://codeforces.com/problemset/problem/1333/F",
    "history": "Kate has a set S of n integers { 1, . . . , n} . She thinks that imperfection of a subset M \u2286 S is equal to the maximum of gcd( a, b) over all pairs ( a, b) such that both a and b are in M and a = \u0338 b . Kate is a very neat girl and for each k \u2208{ 2, . . . , n} she wants to find a subset that has the smallest imperfection among all subsets in S of size k . There can be more than one subset with the smallest imperfection and the same size, but you don' t need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size k , will name it I_ k . Please, help Kate to find I_ 2 , I_ 3 , . . . , I_ n .",
    "input": "The first and only line in the input consists of only one integer n ( 2\u2264 n \u2264 5 \u00b7 10^ 5 ) \u2014 the size of the given set S .",
    "output": "Output contains only one line that includes n - 1 integers: I_ 2 , I_ 3 , . . . , I_ n .",
    "note": "First sample: answer is 1, because gcd( 1, 2) = 1 . Second sample: there are subsets of S with sizes 2, 3 with imperfection equal to 1. For example, { 2, 3} and { 1, 2, 3} .",
    "topics": [
      "greedy",
      "implementation",
      "math",
      "number theory",
      "sortings",
      "two pointers"
    ],
    "id": "1333F"
  },
  {
    "title": "Challenges in school \u211641",
    "url": "https://codeforces.com/problemset/problem/1333/D",
    "history": "There are n children, who study at the school No41. It is well- known that they are good mathematicians. Once at a break, they arranged a challenge for themselves. All children arranged in a row and turned heads either to the left or to the right. Children can do the following: in one second several pairs of neighboring children who are looking at each other can simultaneously turn the head in the opposite direction. For instance, the one who was looking at the right neighbor turns left and vice versa for the second child. Moreover, every second at least one pair of neighboring children performs such action. They are going to finish when there is no pair of neighboring children who are looking at each other. You are given the number n , the initial arrangement of children and the number k . You have to find a way for the children to act if they want to finish the process in exactly k seconds. More formally, for each of the k moves, you need to output the numbers of the children who turn left during this move. For instance, for the configuration shown below and k = 2 children can do the following steps: At the beginning, two pairs make move: ( 1, 2) and ( 3, 4) . After that, we receive the following configuration: At the second move pair ( 2, 3) makes the move. The final configuration is reached. Good job. It is guaranteed that if the solution exists, it takes not more than n^ 2 \" headturns\" .",
    "input": "The first line of input contains two integers n and k ( 2 \u2264 n \u2264 3000 , 1 \u2264 k \u2264 3000000 ) \u2014 the number of children and required number of moves. The next line contains a string of length n and consists only of characters L and R, where L means that the child looks to the left and R means that the child looks to the right.",
    "output": "If there is no solution, print a single line with number - 1 . Otherwise, output k lines. Each line has to start with a number n_ i ( 1\u2264 n_ i \u2264n/ 2 ) \u2014 the number of pairs of children, who turn at this move. After that print n_ i distinct integers \u2014 the numbers of the children who will turn left during this move. After performing all \" headturns\" , there can' t be a pair of two neighboring children looking at each other. If there are many solutions, print any of them.",
    "note": "The first sample contains a pair of children who look at each other. After one move, they can finish the process. In the second sample, children can' t make any move. As a result, they can' t end in k> 0 moves. The third configuration is described in the statement.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "games",
      "graphs",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1333D"
  },
  {
    "title": "Kind Anton",
    "url": "https://codeforces.com/problemset/problem/1333/B",
    "history": "Once again, Boris needs the help of Anton in creating a task. This time Anton needs to solve the following problem: There are two arrays of integers a and b of length n . It turned out that array a contains only elements from the set { - 1, 0, 1} . Anton can perform the following sequence of operations any number of times: Choose any pair of indexes ( i, j) such that 1 \u2264 i < j \u2264 n . It is possible to choose the same pair ( i, j) more than once. Add a_ i to a_ j . In other words, j - th element of the array becomes equal to a_ i + a_ j . For example, if you are given array [ 1, - 1, 0] , you can transform it only to [ 1, - 1, - 1] , [ 1, 0, 0] and [ 1, - 1, 1] by one operation. Anton wants to predict if it is possible to apply some number ( zero or more) of these operations to the array a so that it becomes equal to array b . Can you help him?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10000 ) . The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the length of arrays. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 1 \u2264 a_ i \u2264 1 ) \u2014 elements of array a . There can be duplicates among elements. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( - 10^ 9 \u2264 b_ i \u2264 10^ 9 ) \u2014 elements of array b . There can be duplicates among elements. It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, output one line containing \" YES\" if it' s possible to make arrays a and b equal by performing the described operations, or \" NO\" if it' s impossible. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test- case we can choose ( i, j) = ( 2, 3) twice and after that choose ( i, j) = ( 1, 2) twice too. These operations will transform [ 1, - 1, 0] \u2192 [ 1, - 1, - 2] \u2192 [ 1, 1, - 2] In the second test case we can' t make equal numbers on the second position. In the third test case we can choose ( i, j) = ( 1, 2) 41 times. The same about the fourth test case. In the last lest case, it is impossible to make array a equal to the array b .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1333B"
  },
  {
    "title": "K-Complete Word",
    "url": "https://codeforces.com/problemset/problem/1332/C",
    "history": "Word s of length n is called k - complete if s is a palindrome, i. e. s_ i= s_ n+ 1- i for all 1 \u2264 i \u2264 n ; s has a period of k , i. e. s_ i= s_ k+ i for all 1 \u2264 i \u2264 n- k . For example, \" abaaba\" is a 3 - complete word, while \" abccba\" is not. Bob is given a word s of length n consisting of only lowercase Latin letters and an integer k , such that n is divisible by k . He wants to convert s to any k - complete word. To do this Bob can choose some i ( 1 \u2264 i \u2264 n ) and replace the letter at position i with some other lowercase Latin letter. So now Bob wants to know the minimum number of letters he has to replace to convert s to any k - complete word. Note that Bob can do zero changes if the word s is already k - complete. You are required to answer t test cases independently.",
    "input": "The first line contains a single integer t ( 1 \u2264 t\u2264 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains two integers n and k ( 1 \u2264 k < n \u2264 2 \u00b7 10^ 5 , n is divisible by k ) . The second line of each test case contains a word s of length n . It is guaranteed that word s only contains lowercase Latin letters. And it is guaranteed that the sum of n over all test cases will not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output one integer, representing the minimum number of characters he has to replace to convert s to any k - complete word.",
    "note": "In the first test case, one optimal solution is aaaaaa. In the second test case, the given word itself is k - complete.",
    "topics": [
      "dfs and similar",
      "dsu",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1332C"
  },
  {
    "title": "Composite Coloring",
    "url": "https://codeforces.com/problemset/problem/1332/B",
    "history": "A positive integer is called composite if it can be represented as a product of two positive integers, both greater than 1 . For example, the following numbers are composite: 6 , 4 , 120 , 27 . The following numbers aren' t: 1 , 2 , 3 , 17 , 97 . Alice is given a sequence of n composite numbers a_ 1, a_ 2, . . . , a_ n . She wants to choose an integer m \u2264 11 and color each element one of m colors from 1 to m so that: for each color from 1 to m there is at least one element of this color; each element is colored and colored exactly one color; the greatest common divisor of any two elements that are colored the same color is greater than 1 , i. e. ( a_ i, a_ j) > 1 for each pair i, j if these elements are colored the same color. Note that equal elements can be colored different colors \u2014 you just have to choose one of m colors for each of the indices from 1 to n . Alice showed already that if all a_ i \u2264 1000 then she can always solve the task by choosing some m \u2264 11 . Help Alice to find the required coloring. Note that you don' t have to minimize or maximize the number of colors, you just have to find the solution with some m from 1 to 11 .",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Then the descriptions of the test cases follow. The first line of the test case contains a single integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the amount of numbers in a sequence a . The second line of the test case contains n composite integers a_ 1, a_ 2, . . . , a_ n ( 4 \u2264 a_ i \u2264 1000 ) . It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 4 .",
    "output": "For each test case print 2 lines. The first line should contain a single integer m ( 1 \u2264 m \u2264 11 ) \u2014 the number of used colors. Consider colors to be numbered from 1 to m . The second line should contain any coloring that satisfies the above conditions. Print n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 m ) , where c_ i is the color of the i - th element. If there are multiple solutions then you can print any of them. Note that you don' t have to minimize or maximize the number of colors, you just have to find the solution with some m from 1 to 11 . Remember that each color from 1 to m should be used at least once. Any two elements of the same color should not be coprime ( i. e. their GCD should be greater than 1 ) .",
    "note": "In the first test case, ( 6, 10) = 2 , ( 6, 15) = 3 and ( 10, 15) = 5 . Therefore, it' s valid to color all elements the same color. Note that there are other colorings which satisfy Alice' s requirement in this test case. In the second test case there is only one element of each color, so the coloring definitely satisfies Alice' s requirement.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1332B"
  },
  {
    "title": "Exercising Walk",
    "url": "https://codeforces.com/problemset/problem/1332/A",
    "history": "Alice has a cute cat. To keep her cat fit, Alice wants to design an exercising walk for her cat! Initially, Alice' s cat is located in a cell ( x, y) of an infinite grid. According to Alice' s theory, cat needs to move: exactly a steps left: from ( u, v) to ( u- 1, v) ; exactly b steps right: from ( u, v) to ( u+ 1, v) ; exactly c steps down: from ( u, v) to ( u, v- 1) ; exactly d steps up: from ( u, v) to ( u, v+ 1) . Note that the moves can be performed in an arbitrary order. For example, if the cat has to move 1 step left, 3 steps right and 2 steps down, then the walk right, down, left, right, right, down is valid. Alice, however, is worrying that her cat might get lost if it moves far away from her. So she hopes that her cat is always in the area [ x_ 1, x_ 2] \u00d7 [ y_ 1, y_ 2] , i. e. for every cat' s position ( u, v) of a walk x_ 1 \u2264 u \u2264 x_ 2 and y_ 1 \u2264 v \u2264 y_ 2 holds. Also, note that the cat can visit the same cell multiple times. Can you help Alice find out if there exists a walk satisfying her wishes? Formally, the walk should contain exactly a+ b+ c+ d unit moves ( a to the left, b to the right, c to the down, d to the up) . Alice can do the moves in any order. Her current position ( u, v) should always satisfy the constraints: x_ 1 \u2264 u \u2264 x_ 2 , y_ 1 \u2264 v \u2264 y_ 2 . The staring point is ( x, y) . You are required to answer t test cases independently.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 3 ) \u2014 the number of testcases. The first line of each test case contains four integers a , b , c , d ( 0 \u2264 a, b, c, d \u2264 10^ 8 , a+ b+ c+ d \u2265 1 ) . The second line of the test case contains six integers x , y , x_ 1 , y_ 1 , x_ 2 , y_ 2 ( - 10^ 8 \u2264 x_ 1\u2264 x \u2264 x_ 2 \u2264 10^ 8 , - 10^ 8 \u2264 y_ 1 \u2264 y \u2264 y_ 2 \u2264 10^ 8 ) .",
    "output": "For each test case, output \" YES\" in a separate line, if there exists a walk satisfying her wishes. Otherwise, output \" NO\" in a separate line. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case, one valid exercising walk is ( 0, 0) \u2192 ( - 1, 0) \u2192 ( - 2, 0) \u2192 ( - 2, 1) \u2192 ( - 2, 2) \u2192 ( - 1, 2) \u2192( 0, 2) \u2192 ( 0, 1) \u2192 ( 0, 0) \u2192 ( - 1, 0)",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1332A"
  },
  {
    "title": "Dreamoon Loves AA",
    "url": "https://codeforces.com/problemset/problem/1329/E",
    "history": "There is a string of length n+ 1 of characters ' A' and ' B' . The first character and last character of the string are equal to ' A' . You are given m indices p_ 1, p_ 2, . . . , p_ m ( 0 - indexation) denoting the other indices of characters ' A' in the string. Let' s denote the minimum distance between two neighboring ' A' as l , and maximum distance between neighboring ' A' as r . For example, ( l, r) of string \" ABBAABBBA\" is ( 1, 4) . And let' s denote the balance degree of a string as the value of r- l . Now Dreamoon wants to change exactly k characters from ' B' to ' A' , and he wants to make the balance degree of the string as small as possible. Please calculate the required minimum possible value of balance degree.",
    "input": "The first line contains one integer t denoting the number of test cases ( 1 \u2264 t \u2264 400 000 ) . For each test case, the first line contains three integers n , m and k ( 1 \u2264 n \u2264 10^ 15, 0 \u2264 m \u2264 400 000, 0 \u2264 k < n - m ) . The second line contains m integers p_ 1, p_ 2, . . . , p_ m , ( 0 < p_ 1 < p_ 2 < . . . < p_ m < n ) . The total sum of m is at most 400 000 .",
    "output": "For each test case, print one integer: the smallest possible value of balance degree after k changes of ' B' to ' A' .",
    "note": "",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1329E"
  },
  {
    "title": "Drazil Likes Heap",
    "url": "https://codeforces.com/problemset/problem/1329/C",
    "history": "Drazil likes heap very much. So he created a problem with heap: There is a max heap with a height h implemented on the array. The details of this heap are the following: This heap contains exactly 2^ h - 1 distinct positive non- zero integers. All integers are distinct. These numbers are stored in the array a indexed from 1 to 2^ h- 1 . For any 1 < i < 2^ h , a[ i] < a[ \u230ai/ 2\u230b] . Now we want to reduce the height of this heap such that the height becomes g with exactly 2^ g- 1 numbers in heap. To reduce the height, we should perform the following action 2^ h- 2^ g times: Choose an index i , which contains an element and call the following function f in index i : Note that we suppose that if a[ i] = 0 , then index i don' t contain an element. After all operations, the remaining 2^ g- 1 element must be located in indices from 1 to 2^ g- 1 . Now Drazil wonders what' s the minimum possible sum of the remaining 2^ g- 1 elements. Please find this sum and find a sequence of the function calls to achieve this value.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 70 000 ) : the number of test cases. Each test case contain two lines. The first line contains two integers h and g ( 1 \u2264 g < h \u2264 20 ) . The second line contains n = 2^ h- 1 distinct positive integers a[ 1] , a[ 2] , . . . , a[ n] ( 1 \u2264 a[ i] < 2^ 20 ) . For all i from 2 to 2^ h - 1 , a[ i] < a[ \u230ai/ 2\u230b] . The total sum of n is less than 2^ 20 .",
    "output": "For each test case, print two lines. The first line should contain one integer denoting the minimum sum after reducing the height of heap to g . The second line should contain 2^ h - 2^ g integers v_ 1, v_ 2, . . . , v_ 2^ h- 2^ g . In i - th operation f( v_ i) should be called.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1329C"
  },
  {
    "title": "Dreamoon Likes Coloring",
    "url": "https://codeforces.com/problemset/problem/1329/A",
    "history": "Dreamoon likes coloring cells very much. There is a row of n cells. Initially, all cells are empty ( don' t contain any color) . Cells are numbered from 1 to n . You are given an integer m and m integers l_ 1, l_ 2, . . . , l_ m ( 1 \u2264 l_ i \u2264 n ) Dreamoon will perform m operations. In i - th operation, Dreamoon will choose a number p_ i from range [ 1, n- l_ i+ 1] ( inclusive) and will paint all cells from p_ i to p_ i+ l_ i- 1 ( inclusive) in i - th color. Note that cells may be colored more one than once, in this case, cell will have the color from the latest operation. Dreamoon hopes that after these m operations, all colors will appear at least once and all cells will be colored. Please help Dreamoon to choose p_ i in each operation to satisfy all constraints.",
    "input": "The first line contains two integers n, m ( 1 \u2264 m \u2264 n \u2264 100 000 ) . The second line contains m integers l_ 1, l_ 2, . . . , l_ m ( 1 \u2264 l_ i \u2264 n ) .",
    "output": "If it' s impossible to perform m operations to satisfy all constraints, print \" ' - 1\" ( without quotes) . Otherwise, print m integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 n - l_ i + 1 ) , after these m operations, all colors should appear at least once and all cells should be colored. If there are several possible solutions, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1329A"
  },
  {
    "title": "Make k Equal",
    "url": "https://codeforces.com/problemset/problem/1328/F",
    "history": "You are given the array a consisting of n elements and the integer k \u2264 n . You want to obtain at least k equal elements in the array a . In one move, you can make one of the following two operations: Take one of the minimum elements of the array and increase its value by one ( more formally, if the minimum value of a is mn then you choose such index i that a_ i = mn and set a_ i : = a_ i + 1 ) ; take one of the maximum elements of the array and decrease its value by one ( more formally, if the maximum value of a is mx then you choose such index i that a_ i = mx and set a_ i : = a_ i - 1 ) . Your task is to calculate the minimum number of moves required to obtain at least k equal elements in the array.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of elements in a and the required number of equal elements. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the i - th element of a .",
    "output": "Print one integer \u2014 the minimum number of moves required to obtain at least k equal elements in the array.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1328F"
  },
  {
    "title": "Carousel",
    "url": "https://codeforces.com/problemset/problem/1328/D",
    "history": "The round carousel consists of n figures of animals. Figures are numbered from 1 to n in order of the carousel moving. Thus, after the n - th figure the figure with the number 1 follows. Each figure has its own type \u2014 the type of the animal corresponding to this figure ( the horse, the tiger and so on) . The type of animal of the i - th figure equals t_ i . The example of the carousel for n= 9 and t= [ 5, 5, 1, 15, 1, 5, 5, 1, 1] . You want to color each figure in one of the colors. You think that it' s boring if the carousel contains two different figures ( with the distinct types of animals) going one right after another and colored in the same color. Your task is to color the figures in such a way that the number of distinct colors used is the minimum possible and there are no figures of the different types going one right after another and colored in the same color. If you use exactly k distinct colors, then the colors of figures should be denoted with integers from 1 to k .",
    "input": "The input contains one or more test cases. The first line contains one integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of test cases in the test. Then q test cases follow. One test case is given on two lines. The first line of the test case contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of figures in the carousel. Figures are numbered from 1 to n in order of carousel moving. Assume that after the n - th figure the figure 1 goes. The second line of the test case contains n integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 2 \u00b7 10^ 5 ) , where t_ i is the type of the animal of the i - th figure. The sum of n over all test cases does not exceed 2\u00b710^ 5 .",
    "output": "Print q answers, for each test case print two lines. In the first line print one integer k \u2014 the minimum possible number of distinct colors of figures. In the second line print n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 k ) , where c_ i is the color of the i - th figure. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "greedy",
      "math"
    ],
    "id": "1328D"
  },
  {
    "title": "Ternary XOR",
    "url": "https://codeforces.com/problemset/problem/1328/C",
    "history": "A number is ternary if it contains only digits 0 , 1 and 2 . For example, the following numbers are ternary: 1022 , 11 , 21 , 2002 . You are given a long ternary number x . The first ( leftmost) digit of x is guaranteed to be 2 , the other digits of x can be 0 , 1 or 2 . Let' s define the ternary XOR operation \u2299 of two ternary numbers a and b ( both of length n ) as a number c = a \u2299 b of length n , where c_ i = ( a_ i + b_ i) % 3 ( where % is modulo operation) . In other words, add the corresponding digits and take the remainders of the sums when divided by 3 . For example, 10222 \u2299 11021 = 21210 . Your task is to find such ternary numbers a and b both of length n and both without leading zeros that a \u2299 b = x and max( a, b) is the minimum possible. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 5 \u00b7 10^ 4 ) \u2014 the length of x . The second line of the test case contains ternary number x consisting of n digits 0, 1 or 2 . It is guaranteed that the first digit of x is 2 . It is guaranteed that the sum of n over all test cases does not exceed 5 \u00b7 10^ 4 ( \u2211 n \u2264 5 \u00b7 10^ 4 ) .",
    "output": "For each test case, print the answer \u2014 two ternary integers a and b both of length n and both without leading zeros such that a \u2299 b = x and max( a, b) is the minimum possible. If there are several answers, you can print any.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1328C"
  },
  {
    "title": "Princesses and Princes",
    "url": "https://codeforces.com/problemset/problem/1327/B",
    "history": "The King of Berland Polycarp LXXXIV has n daughters. To establish his power to the neighbouring kingdoms he wants to marry his daughters to the princes of these kingdoms. As a lucky coincidence there are n other kingdoms as well. So Polycarp LXXXIV has enumerated his daughters from 1 to n and the kingdoms from 1 to n . For each daughter he has compiled a list of kingdoms princes of which she wanted to marry. Polycarp LXXXIV is very busy, so he finds a couple for his daughters greedily one after another. For the first daughter he takes the kingdom with the lowest number from her list and marries the daughter to their prince. For the second daughter he takes the kingdom with the lowest number from her list, prince of which hasn' t been taken already. If there are no free princes in the list then the daughter marries nobody and Polycarp LXXXIV proceeds to the next daughter. The process ends after the n - th daughter. For example, let there be 4 daughters and kingdoms, the lists daughters have are [ 2, 3] , [ 1, 2] , [ 3, 4] , [ 3] , respectively. In that case daughter 1 marries the prince of kingdom 2 , daughter 2 marries the prince of kingdom 1 , daughter 3 marries the prince of kingdom 3 , leaving daughter 4 nobody to marry to. Actually, before starting the marriage process Polycarp LXXXIV has the time to convince one of his daughters that some prince is also worth marrying to. Effectively, that means that he can add exactly one kingdom to exactly one of his daughter' s list. Note that this kingdom should not be present in the daughter' s list. Polycarp LXXXIV wants to increase the number of married couples. Unfortunately, what he doesn' t have the time for is determining what entry to add. If there is no way to increase the total number of married couples then output that the marriages are already optimal. Otherwise, find such an entry that the total number of married couples increases if Polycarp LXXXIV adds it. If there are multiple ways to add an entry so that the total number of married couples increases then print any of them. For your and our convenience you are asked to answer t independent test cases.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of daughters and the number of kingdoms. Each of the next n lines contains the description of each daughter' s list. The first integer k ( 0 \u2264 k \u2264 n ) is the number of entries in the i - th daughter' s list. After that k distinct integers follow g_ i[ 1] , g_ i[ 2] , . . . , g_ i[ k] ( 1 \u2264 g_ i[ j] \u2264 n ) \u2014 the indices of the kingdoms in the list in the increasing order ( g_ i[ 1] < g_ i[ 2] < . . . < g_ i[ k] ) . It' s guaranteed that the total number of daughters over all test cases does not exceed 10^ 5 . It' s also guaranteed that the total number of kingdoms in lists over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print the answer to it. Print \" IMPROVE\" in the first line if Polycarp LXXXIV can add some kingdom to some of his daughter' s list so that the total number of married couples increases. The second line then should contain two integers \u2014 the index of the daughter and the index of the kingdom Polycarp LXXXIV should add to that daughter' s list. If there are multiple ways to add an entry so that the total number of married couples increases then print any of them. Otherwise the only line should contain one word \" OPTIMAL\" .",
    "note": "The first test case is depicted in the statement. Adding the fourth kingdom to the list of the fourth daughter makes her marry the prince of the fourth kingdom. In the second test case any new entry will increase the number of marriages from 0 to 1 . In the third and the fourth test cases there is no way to add an entry. In the fifth test case there is no way to change the marriages by adding any entry.",
    "topics": [
      "brute force",
      "graphs",
      "greedy"
    ],
    "id": "1327B"
  },
  {
    "title": "Prefix-Suffix Palindrome (Hard version)",
    "url": "https://codeforces.com/problemset/problem/1326/D2",
    "history": "This is the hard version of the problem. The difference is the constraint on the sum of lengths of strings and the number of test cases. You can make hacks only if you solve all versions of this task. You are given a string s , consisting of lowercase English letters. Find the longest string, t , which satisfies the following conditions: The length of t does not exceed the length of s . t is a palindrome. There exists two strings a and b ( possibly empty) , such that t = a + b ( \" + \" represents concatenation) , and a is prefix of s while b is suffix of s .",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) , the number of test cases. The next t lines each describe a test case. Each test case is a non- empty string s , consisting of lowercase English letters. It is guaranteed that the sum of lengths of strings over all test cases does not exceed 10^ 6 .",
    "output": "For each test case, print the longest string which satisfies the conditions described above. If there exists multiple possible solutions, print any of them.",
    "note": "In the first test, the string s = \" a\" satisfies all conditions. In the second test, the string \" abcdfdcba\" satisfies all conditions, because: Its length is 9 , which does not exceed the length of the string s , which equals 11 . It is a palindrome. \" abcdfdcba\" = \" abcdfdc\" + \" ba\" , and \" abcdfdc\" is a prefix of s while \" ba\" is a suffix of s . It can be proven that there does not exist a longer string which satisfies the conditions. In the fourth test, the string \" c\" is correct, because \" c\" = \" c\" + \" \" and a or b can be empty. The other possible solution for this test is \" s\" .",
    "topics": [
      "binary search",
      "greedy",
      "hashing",
      "string suffix structures",
      "strings"
    ],
    "id": "1326D2"
  },
  {
    "title": "Permutation Partitions",
    "url": "https://codeforces.com/problemset/problem/1326/C",
    "history": "You are given a permutation p_ 1, p_ 2, . . . , p_ n of integers from 1 to n and an integer k , such that 1 \u2264 k \u2264 n . A permutation means that every number from 1 to n is contained in p exactly once. Let' s consider all partitions of this permutation into k disjoint segments. Formally, a partition is a set of segments { [ l_ 1, r_ 1] , [ l_ 2, r_ 2] , . . . , [ l_ k, r_ k] } , such that: 1 \u2264 l_ i \u2264 r_ i \u2264 n for all 1 \u2264 i \u2264 k ; For all 1 \u2264 j \u2264 n there exists exactly one segment [ l_ i, r_ i] , such that l_ i \u2264 j \u2264 r_ i . Two partitions are different if there exists a segment that lies in one partition but not the other. Let' s calculate the partition value, defined as \u2211_ i= 1^ kmax_ l_ i \u2264 j \u2264 r_ ip_ j , for all possible partitions of the permutation into k disjoint segments. Find the maximum possible partition value over all such partitions, and the number of partitions with this value. As the second value can be very large, you should find its remainder when divided by 998 244 353 .",
    "input": "The first line contains two integers, n and k ( 1 \u2264 k \u2264 n \u2264 200 000 ) \u2014 the size of the given permutation and the number of segments in a partition. The second line contains n different integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n ) \u2014 the given permutation.",
    "output": "Print two integers \u2014 the maximum possible partition value over all partitions of the permutation into k disjoint segments and the number of such partitions for which the partition value is equal to the maximum possible value, modulo 998 244 353 . Please note that you should only find the second value modulo 998 244 353 .",
    "note": "In the first test, for k = 2 , there exists only two valid partitions: { [ 1, 1] , [ 2, 3] } and { [ 1, 2] , [ 3, 3] } . For each partition, the partition value is equal to 2 + 3 = 5 . So, the maximum possible value is 5 and the number of partitions is 2 . In the third test, for k = 3 , the partitions with the maximum possible partition value are { [ 1, 2] , [ 3, 5] , [ 6, 7] } , { [ 1, 3] , [ 4, 5] , [ 6, 7] } , { [ 1, 4] , [ 5, 5] , [ 6, 7] } , { [ 1, 2] , [ 3, 6] , [ 7, 7] } , { [ 1, 3] , [ 4, 6] , [ 7, 7] } , { [ 1, 4] , [ 5, 6] , [ 7, 7] } . For all of them, the partition value is equal to 7 + 5 + 6 = 18 . The partition { [ 1, 2] , [ 3, 4] , [ 5, 7] } , however, has the partition value 7 + 3 + 6 = 16 . This is not the maximum possible value, so we don' t count it.",
    "topics": [
      "combinatorics",
      "greedy",
      "math"
    ],
    "id": "1326C"
  },
  {
    "title": "Ehab's Last Theorem",
    "url": "https://codeforces.com/problemset/problem/1325/F",
    "history": "It' s the year 5555. You have a graph, and you want to find a long cycle and a huge independent set, just because you can. But for now, let' s just stick with finding either. Given a connected graph with n vertices, you can choose to either: find an independent set that has exactly \u2308\u221a( n) \u2309 vertices. find a simple cycle of length at least \u2308\u221a( n) \u2309 . An independent set is a set of vertices such that no two of them are connected by an edge. A simple cycle is a cycle that doesn' t contain any vertex twice. I have a proof you can always solve one of these problems, but it' s too long to fit this margin.",
    "input": "The first line contains two integers n and m ( 5 \u2264 n \u2264 10^ 5 , n- 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices and edges in the graph. Each of the next m lines contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 n ) that mean there' s an edge between vertices u and v . It' s guaranteed that the graph is connected and doesn' t contain any self- loops or multiple edges.",
    "output": "If you choose to solve the first problem, then on the first line print \" 1\" , followed by a line containing \u2308\u221a( n) \u2309 distinct integers not exceeding n , the vertices in the desired independent set. If you, however, choose to solve the second problem, then on the first line print \" 2\" , followed by a line containing one integer, c , representing the length of the found cycle, followed by a line containing c distinct integers integers not exceeding n , the vertices in the desired cycle, in the order they appear in the cycle.",
    "note": "In the first sample: Notice that you can solve either problem, so printing the cycle 2- 4- 3- 1- 5- 6 is also acceptable. In the second sample: Notice that if there are multiple answers you can print any, so printing the cycle 2- 5- 6 , for example, is acceptable. In the third sample:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1325F"
  },
  {
    "title": "Ehab the Xorcist",
    "url": "https://codeforces.com/problemset/problem/1325/D",
    "history": "Given 2 integers u and v , find the shortest array such that bitwise- xor of its elements is u , and the sum of its elements is v .",
    "input": "The only line contains 2 integers u and v ( 0 \u2264 u, v \u2264 10^ 18) .",
    "output": "If there' s no array that satisfies the condition, print \" - 1\" . Otherwise: The first line should contain one integer, n , representing the length of the desired array. The next line should contain n positive integers, the array itself. If there are multiple possible answers, print any.",
    "note": "In the first sample, 3\u2295 1 = 2 and 3 + 1 = 4 . There is no valid array of smaller length. Notice that in the fourth sample the array is empty.",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "greedy",
      "number theory"
    ],
    "id": "1325D"
  },
  {
    "title": "Ehab and Path-etic MEXs",
    "url": "https://codeforces.com/problemset/problem/1325/C",
    "history": "You are given a tree consisting of n nodes. You want to write some labels on the tree' s edges such that the following conditions hold: Every label is an integer between 0 and n- 2 inclusive. All the written labels are distinct. The largest value among MEX( u, v) over all pairs of nodes ( u, v) is as small as possible. Here, MEX( u, v) denotes the smallest non- negative integer that isn' t written on any edge on the unique simple path from node u to node v .",
    "input": "The first line contains the integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of nodes in the tree. Each of the next n- 1 lines contains two space- separated integers u and v ( 1 \u2264 u, v \u2264 n ) that mean there' s an edge between nodes u and v . It' s guaranteed that the given graph is a tree.",
    "output": "Output n- 1 integers. The i^ th of them will be the number written on the i^ th edge ( in the input order) .",
    "note": "The tree from the second sample:",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "trees"
    ],
    "id": "1325C"
  },
  {
    "title": "CopyCopyCopyCopyCopy",
    "url": "https://codeforces.com/problemset/problem/1325/B",
    "history": "Ehab has an array a of length n . He has just enough free time to make a new array consisting of n copies of the old array, written back- to- back. What will be the length of the new array' s longest increasing subsequence? A sequence a is a subsequence of an array b if a can be obtained from b by deletion of several ( possibly, zero or all) elements. The longest increasing subsequence of an array is the longest subsequence such that its elements are ordered in strictly increasing order.",
    "input": "The first line contains an integer t \u2014 the number of test cases you need to solve. The description of the test cases follows. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of elements in the array a . The second line contains n space- separated integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array a . The sum of n across the test cases doesn' t exceed 10^ 5 .",
    "output": "For each testcase, output the length of the longest increasing subsequence of a if you concatenate it to itself n times.",
    "note": "In the first sample, the new array is [ 3, 2, 1, 3, 2, 1, 3, 2, 1] . The longest increasing subsequence is marked in bold. In the second sample, the longest increasing subsequence will be [ 1, 3, 4, 5, 9] .",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1325B"
  },
  {
    "title": "EhAb AnD gCd",
    "url": "https://codeforces.com/problemset/problem/1325/A",
    "history": "You are given a positive integer x . Find any such 2 positive integers a and b such that GCD( a, b) + LCM( a, b) = x . As a reminder, GCD( a, b) is the greatest integer that divides both a and b . Similarly, LCM( a, b) is the smallest integer such that both a and b divide it. It' s guaranteed that the solution always exists. If there are several such pairs ( a, b) , you can output any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100) \u2014 the number of testcases. Each testcase consists of one line containing a single integer, x ( 2 \u2264 x \u2264 10^ 9) .",
    "output": "For each testcase, output a pair of positive integers a and b ( 1 \u2264 a, b \u2264 10^ 9) such that GCD( a, b) + LCM( a, b) = x . It' s guaranteed that the solution always exists. If there are several such pairs ( a, b) , you can output any of them.",
    "note": "In the first testcase of the sample, GCD( 1, 1) + LCM( 1, 1) = 1+ 1= 2 . In the second testcase of the sample, GCD( 6, 4) + LCM( 6, 4) = 2+ 12= 14 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "number theory"
    ],
    "id": "1325A"
  },
  {
    "title": "Frog Jumps",
    "url": "https://codeforces.com/problemset/problem/1324/C",
    "history": "There is a frog staying to the left of the string s = s_ 1 s_ 2 . . . s_ n consisting of n characters ( to be more precise, the frog initially stays at the cell 0 ) . Each character of s is either ' L' or ' R' . It means that if the frog is staying at the i - th cell and the i - th character is ' L' , the frog can jump only to the left. If the frog is staying at the i - th cell and the i - th character is ' R' , the frog can jump only to the right. The frog can jump only to the right from the cell 0 . Note that the frog can jump into the same cell twice and can perform as many jumps as it needs. The frog wants to reach the n+ 1 - th cell. The frog chooses some positive integer value d before the first jump ( and cannot change it later) and jumps by no more than d cells at once. I. e. if the i - th character is ' L' then the frog can jump to any cell in a range [ max( 0, i - d) ; i - 1] , and if the i - th character is ' R' then the frog can jump to any cell in a range [ i + 1; min( n + 1; i + d) ] . The frog doesn' t want to jump far, so your task is to find the minimum possible value of d such that the frog can reach the cell n+ 1 from the cell 0 if it can jump by no more than d cells at once. It is guaranteed that it is always possible to reach n+ 1 from 0 . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The next t lines describe test cases. The i - th test case is described as a string s consisting of at least 1 and at most 2 \u00b7 10^ 5 characters ' L' and ' R' . It is guaranteed that the sum of lengths of strings over all test cases does not exceed 2 \u00b7 10^ 5 ( \u2211 | s| \u2264 2 \u00b7 10^ 5 ) .",
    "output": "For each test case, print the answer \u2014 the minimum possible value of d such that the frog can reach the cell n+ 1 from the cell 0 if it jumps by no more than d at once.",
    "note": "The picture describing the first test case of the example and one of the possible answers: In the second test case of the example, the frog can only jump directly from 0 to n+ 1 . In the third test case of the example, the frog can choose d= 3 , jump to the cell 3 from the cell 0 and then to the cell 4 from the cell 3 . In the fourth test case of the example, the frog can choose d= 1 and jump 5 times to the right. In the fifth test case of the example, the frog can only jump directly from 0 to n+ 1 . In the sixth test case of the example, the frog can choose d= 1 and jump 2 times to the right.",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "greedy",
      "implementation"
    ],
    "id": "1324C"
  },
  {
    "title": "Count Subrectangles",
    "url": "https://codeforces.com/problemset/problem/1323/B",
    "history": "You are given an array a of length n and array b of length m both consisting of only integers 0 and 1 . Consider a matrix c of size n \u00d7 m formed by following rule: c_ i, j = a_ i \u00b7 b_ j ( i. e. a_ i multiplied by b_ j ) . It' s easy to see that c consists of only zeroes and ones too. How many subrectangles of size ( area) k consisting only of ones are there in c ? A subrectangle is an intersection of a consecutive ( subsequent) segment of rows and a consecutive ( subsequent) segment of columns. I. e. consider four integers x_ 1, x_ 2, y_ 1, y_ 2 ( 1 \u2264 x_ 1 \u2264 x_ 2 \u2264 n , 1 \u2264 y_ 1 \u2264 y_ 2 \u2264 m ) a subrectangle c[ x_ 1 . . . x_ 2] [ y_ 1 . . . y_ 2] is an intersection of the rows x_ 1, x_ 1+ 1, x_ 1+ 2, . . . , x_ 2 and the columns y_ 1, y_ 1+ 1, y_ 1+ 2, . . . , y_ 2 . The size ( area) of a subrectangle is the total number of cells in it.",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n, m \u2264 40 000, 1 \u2264 k \u2264 n \u00b7 m ) , length of array a , length of array b and required size of subrectangles. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) , elements of a . The third line contains m integers b_ 1, b_ 2, . . . , b_ m ( 0 \u2264 b_ i \u2264 1 ) , elements of b .",
    "output": "Output single integer \u2014 the number of subrectangles of c with size ( area) k consisting only of ones.",
    "note": "In first example matrix c is: There are 4 subrectangles of size 2 consisting of only ones in it: In second example matrix c is:",
    "topics": [
      "binary search",
      "greedy",
      "implementation"
    ],
    "id": "1323B"
  },
  {
    "title": "Even Subset Sum Problem",
    "url": "https://codeforces.com/problemset/problem/1323/A",
    "history": "You are given an array a consisting of n positive integers. Find a non- empty subset of its elements such that their sum is even ( i. e. divisible by 2 ) or determine that there is no such subset. Both the given array and required subset may contain equal values.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) , number of test cases to solve. Descriptions of t test cases follow. A description of each test case consists of two lines. The first line contains a single integer n ( 1 \u2264 n \u2264 100 ) , length of array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 100 ) , elements of a . The given array a can contain equal values ( duplicates) .",
    "output": "For each test case output - 1 if there is no such subset of elements. Otherwise output positive integer k , number of elements in the required subset. Then output k distinct integers ( 1 \u2264 p_ i \u2264 n ) , indexes of the chosen elements. If there are multiple solutions output any of them.",
    "note": "There are three test cases in the example. In the first test case, you can choose the subset consisting of only the second element. Its sum is 4 and it is even. In the second test case, there is only one non- empty subset of elements consisting of the first element, however sum in it is odd, so there is no solution. In the third test case, the subset consisting of all array' s elements has even sum.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1323A"
  },
  {
    "title": "Unusual Competitions",
    "url": "https://codeforces.com/problemset/problem/1322/A",
    "history": "A bracketed sequence is called correct ( regular) if by inserting \" + \" and \" 1\" you can get a well- formed mathematical expression from it. For example, sequences \" ( ( ) ) ( ) \" , \" ( ) \" and \" ( ( ) ( ( ) ) ) \" are correct, while \" ) ( \" , \" ( ( ) \" and \" ( ( ) ) ) ( \" are not. The teacher gave Dmitry' s class a very strange task \u2014 she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When Dima' s turn came, he suddenly realized that all his classmates got the correct bracketed sequence, and whether he got the correct bracketed sequence, he did not know. Dima suspects now that he simply missed the word \" correct\" in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can the arbitrary number of times ( possibly zero) perform the reorder operation. The reorder operation consists of choosing an arbitrary consecutive subsegment ( substring) of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes l nanoseconds, where l is the length of the subsegment being reordered. It' s easy to see that reorder operation doesn' t change the number of opening and closing brackets. For example for \" ) ) ( ( \" he can choose the substring \" ) ( \" and do reorder \" ) ( ) ( \" ( this operation will take 2 nanoseconds) . Since Dima will soon have to answer, he wants to make his sequence correct as fast as possible. Help him to do this, or determine that it' s impossible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the length of Dima' s sequence. The second line contains string of length n , consisting of characters \" ( \" and \" ) \" only.",
    "output": "Print a single integer \u2014 the minimum number of nanoseconds to make the sequence correct or \" - 1\" if it is impossible to do so.",
    "note": "In the first example we can firstly reorder the segment from first to the fourth character, replacing it with \" ( ) ( ) \" , the whole sequence will be \" ( ) ( ) ( ) ) ( \" . And then reorder the segment from the seventh to eighth character, replacing it with \" ( ) \" . In the end the sequence will be \" ( ) ( ) ( ) ( ) \" , while the total time spent is 4 + 2 = 6 nanoseconds.",
    "topics": [
      "greedy"
    ],
    "id": "1322A"
  },
  {
    "title": "Remove Adjacent",
    "url": "https://codeforces.com/problemset/problem/1321/C",
    "history": "You are given a string s consisting of lowercase Latin letters. Let the length of s be | s| . You may perform several operations on this string. In one operation, you can choose some index i and remove the i - th character of s ( s_ i ) if at least one of its adjacent characters is the previous letter in the Latin alphabet for s_ i . For example, the previous letter for b is a, the previous letter for s is r, the letter a has no previous letters. Note that after each removal the length of the string decreases by one. So, the index i should satisfy the condition 1 \u2264 i \u2264 | s| during each operation. For the character s_ i adjacent characters are s_ i- 1 and s_ i+ 1 . The first and the last characters of s both have only one adjacent character ( unless | s| = 1 ) . Consider the following example. Let s= bacabcab. During the first move, you can remove the first character s_ 1= b because s_ 2= a. Then the string becomes s= acabcab. During the second move, you can remove the fifth character s_ 5= c because s_ 4= b. Then the string becomes s= acabab. During the third move, you can remove the sixth character s_ 6= ' b' because s_ 5= a. Then the string becomes s= acaba. During the fourth move, the only character you can remove is s_ 4= b, because s_ 3= a ( or s_ 5= a) . The string becomes s= acaa and you cannot do anything with it. Your task is to find the maximum possible number of characters you can remove if you choose the sequence of operations optimally.",
    "input": "The first line of the input contains one integer | s| ( 1 \u2264 | s| \u2264 100 ) \u2014 the length of s . The second line of the input contains one string s consisting of | s| lowercase Latin letters.",
    "output": "Print one integer \u2014 the maximum possible number of characters you can remove if you choose the sequence of moves optimally.",
    "note": "The first example is described in the problem statement. Note that the sequence of moves provided in the statement is not the only, but it can be shown that the maximum possible answer to this test is 4 . In the second example, you can remove all but one character of s . The only possible answer follows. During the first move, remove the third character s_ 3= d, s becomes bca. During the second move, remove the second character s_ 2= c, s becomes ba. And during the third move, remove the first character s_ 1= b, s becomes a.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1321C"
  },
  {
    "title": "Contest for Robots",
    "url": "https://codeforces.com/problemset/problem/1321/A",
    "history": "Polycarp is preparing the first programming contest for robots. There are n problems in it, and a lot of robots are going to participate in it. Each robot solving the problem i gets p_ i points, and the score of each robot in the competition is calculated as the sum of p_ i over all problems i solved by it. For each problem, p_ i is an integer not less than 1 . Two corporations specializing in problem- solving robot manufacturing, \" Robo- Coder Inc. \" and \" BionicSolver Industries\" , are going to register two robots ( one for each corporation) for participation as well. Polycarp knows the advantages and flaws of robots produced by these companies, so, for each problem, he knows precisely whether each robot will solve it during the competition. Knowing this, he can try predicting the results \u2014 or manipulating them. For some reason ( which absolutely cannot involve bribing) , Polycarp wants the \" Robo- Coder Inc. \" robot to outperform the \" BionicSolver Industries\" robot in the competition. Polycarp wants to set the values of p_ i in such a way that the \" Robo- Coder Inc. \" robot gets strictly more points than the \" BionicSolver Industries\" robot. However, if the values of p_ i will be large, it may look very suspicious \u2014 so Polycarp wants to minimize the maximum value of p_ i over all problems. Can you help Polycarp to determine the minimum possible upper bound on the number of points given for solving the problems?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of problems. The second line contains n integers r_ 1 , r_ 2 , . . . , r_ n ( 0 \u2264 r_ i \u2264 1 ) . r_ i = 1 means that the \" Robo- Coder Inc. \" robot will solve the i - th problem, r_ i = 0 means that it won' t solve the i - th problem. The third line contains n integers b_ 1 , b_ 2 , . . . , b_ n ( 0 \u2264 b_ i \u2264 1 ) . b_ i = 1 means that the \" BionicSolver Industries\" robot will solve the i - th problem, b_ i = 0 means that it won' t solve the i - th problem.",
    "output": "If \" Robo- Coder Inc. \" robot cannot outperform the \" BionicSolver Industries\" robot by any means, print one integer - 1 . Otherwise, print the minimum possible value of max_ i = 1^ n p_ i , if all values of p_ i are set in such a way that the \" Robo- Coder Inc. \" robot gets strictly more points than the \" BionicSolver Industries\" robot.",
    "note": "In the first example, one of the valid score assignments is p = [ 3, 1, 3, 1, 1] . Then the \" Robo- Coder\" gets 7 points, the \" BionicSolver\" \u2014 6 points. In the second example, both robots get 0 points, and the score distribution does not matter. In the third example, both robots solve all problems, so their points are equal.",
    "topics": [
      "greedy"
    ],
    "id": "1321A"
  },
  {
    "title": "Journey Planning",
    "url": "https://codeforces.com/problemset/problem/1320/A",
    "history": "Tanya wants to go on a journey across the cities of Berland. There are n cities situated along the main railroad line of Berland, and these cities are numbered from 1 to n . Tanya plans her journey as follows. First of all, she will choose some city c_ 1 to start her journey. She will visit it, and after that go to some other city c_ 2 > c_ 1 , then to some other city c_ 3 > c_ 2 , and so on, until she chooses to end her journey in some city c_ k > c_ k - 1 . So, the sequence of visited cities [ c_ 1, c_ 2, . . . , c_ k] should be strictly increasing. There are some additional constraints on the sequence of cities Tanya visits. Each city i has a beauty value b_ i associated with it. If there is only one city in Tanya' s journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities c_ i and c_ i + 1 , the condition c_ i + 1 - c_ i = b_ c_ i + 1 - b_ c_ i must hold. For example, if n = 8 and b = [ 3, 4, 4, 6, 6, 7, 8, 9] , there are several three possible ways to plan a journey: c = [ 1, 2, 4] ; c = [ 3, 5, 6, 8] ; c = [ 7] ( a journey consisting of one city is also valid) . There are some additional ways to plan a journey that are not listed above. Tanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?",
    "input": "The first line contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of cities in Berland. The second line contains n integers b_ 1 , b_ 2 , . . . , b_ n ( 1 \u2264 b_ i \u2264 4 \u00b7 10^ 5 ) , where b_ i is the beauty value of the i - th city.",
    "output": "Print one integer \u2014 the maximum beauty of a journey Tanya can choose.",
    "note": "The optimal journey plan in the first example is c = [ 2, 4, 5] . The optimal journey plan in the second example is c = [ 1] . The optimal journey plan in the third example is c = [ 3, 6] .",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1320A"
  },
  {
    "title": "Team Building",
    "url": "https://codeforces.com/problemset/problem/1316/E",
    "history": "Alice, the president of club FCB, wants to build a team for the new volleyball tournament. The team should consist of p players playing in p different positions. She also recognizes the importance of audience support, so she wants to select k people as part of the audience. There are n people in Byteland. Alice needs to select exactly p players, one for each position, and exactly k members of the audience from this pool of n people. Her ultimate goal is to maximize the total strength of the club. The i - th of the n persons has an integer a_ i associated with him \u2014 the strength he adds to the club if he is selected as a member of the audience. For each person i and for each position j , Alice knows s_ i, j \u2014 the strength added by the i - th person to the club if he is selected to play in the j - th position. Each person can be selected at most once as a player or a member of the audience. You have to choose exactly one player for each position. Since Alice is busy, she needs you to help her find the maximum possible strength of the club that can be achieved by an optimal choice of players and the audience.",
    "input": "The first line contains 3 integers n, p, k ( 2 \u2264 n \u2264 10^ 5, 1 \u2264 p \u2264 7, 1 \u2264 k, p+ k \u2264 n ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n . ( 1 \u2264 a_ i\u2264 10^ 9 ) . The i - th of the next n lines contains p integers s_ i, 1, s_ i, 2, . . . , s_ i, p . ( 1 \u2264 s_ i, j\u2264 10^ 9 )",
    "output": "Print a single integer res \u2014 the maximum possible strength of the club.",
    "note": "In the first sample, we can select person 1 to play in the 1 - st position and persons 2 and 3 as audience members. Then the total strength of the club will be equal to a_ 2+ a_ 3+ s_ 1, 1 .",
    "topics": [
      "bitmasks",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1316E"
  },
  {
    "title": "Restoring Permutation",
    "url": "https://codeforces.com/problemset/problem/1315/C",
    "history": "You are given a sequence b_ 1, b_ 2, . . . , b_ n . Find the lexicographically minimal permutation a_ 1, a_ 2, . . . , a_ 2n such that b_ i = min( a_ 2i- 1, a_ 2i) , or determine that it is impossible.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . The first line of each test case consists of one integer n \u2014 the number of elements in the sequence b ( 1 \u2264 n \u2264 100 ) . The second line of each test case consists of n different integers b_ 1, . . . , b_ n \u2014 elements of the sequence b ( 1 \u2264 b_ i \u2264 2n ) . It is guaranteed that the sum of n by all test cases doesn' t exceed 100 .",
    "output": "For each test case, if there is no appropriate permutation, print one number - 1 . Otherwise, print 2n integers a_ 1, . . . , a_ 2n \u2014 required lexicographically minimal permutation of numbers from 1 to 2n .",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1315C"
  },
  {
    "title": "Homecoming",
    "url": "https://codeforces.com/problemset/problem/1315/B",
    "history": "After a long party Petya decided to return home, but he turned out to be at the opposite end of the town from his home. There are n crossroads in the line in the town, and there is either the bus or the tram station at each crossroad. The crossroads are represented as a string s of length n , where s_ i = , if there is a bus station at i - th crossroad, and s_ i = , if there is a tram station at i - th crossroad. Currently Petya is at the first crossroad ( which corresponds to s_ 1 ) and his goal is to get to the last crossroad ( which corresponds to s_ n ) . If for two crossroads i and j for all crossroads i, i+ 1, . . . , j- 1 there is a bus station, one can pay a roubles for the bus ticket, and go from i - th crossroad to the j - th crossroad by the bus ( it is not necessary to have a bus station at the j - th crossroad) . Formally, paying a roubles Petya can go from i to j if s_ t = for all i \u2264 t < j . If for two crossroads i and j for all crossroads i, i+ 1, . . . , j- 1 there is a tram station, one can pay b roubles for the tram ticket, and go from i - th crossroad to the j - th crossroad by the tram ( it is not necessary to have a tram station at the j - th crossroad) . Formally, paying b roubles Petya can go from i to j if s_ t = for all i \u2264 t < j . For example, if s = \" AABBBAB\" , a= 4 and b= 3 then Petya needs: buy one bus ticket to get from 1 to 3 , buy one tram ticket to get from 3 to 6 , buy one bus ticket to get from 6 to 7 . Thus, in total he needs to spend 4+ 3+ 4= 11 roubles. Please note that the type of the stop at the last crossroad ( i. e. the character s_ n ) does not affect the final expense. Now Petya is at the first crossroad, and he wants to get to the n - th crossroad. After the party he has left with p roubles. He' s decided to go to some station on foot, and then go to home using only public transport. Help him to choose the closest crossroad i to go on foot the first, so he has enough money to get from the i - th crossroad to the n - th, using only tram and bus tickets.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The first line of each test case consists of three integers a, b, p ( 1 \u2264 a, b, p \u2264 10^ 5 ) \u2014 the cost of bus ticket, the cost of tram ticket and the amount of money Petya has. The second line of each test case consists of one string s , where s_ i = , if there is a bus station at i - th crossroad, and s_ i = , if there is a tram station at i - th crossroad ( 2 \u2264 | s| \u2264 10^ 5 ) . It is guaranteed, that the sum of the length of strings s by all test cases in one test doesn' t exceed 10^ 5 .",
    "output": "For each test case print one number \u2014 the minimal index i of a crossroad Petya should go on foot. The rest of the path ( i. e. from i to n he should use public transport) .",
    "note": "",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1315B"
  },
  {
    "title": "Skyscrapers (hard version)",
    "url": "https://codeforces.com/problemset/problem/1313/C2",
    "history": "This is a harder version of the problem. In this version n \u2264 500 000 The outskirts of the capital are being actively built up in Berland. The company \" Kernel Panic\" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought n plots along the highway and is preparing to build n skyscrapers, one skyscraper per plot. Architects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it. Formally, let' s number the plots from 1 to n . Then if the skyscraper on the i - th plot has a_ i floors, it must hold that a_ i is at most m_ i ( 1 \u2264 a_ i \u2264 m_ i ) . Also there mustn' t be integers j and k such that j < i < k and a_ j > a_ i < a_ k . Plots j and k are not required to be adjacent to i . The company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i. e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 500 000 ) \u2014 the number of plots. The second line contains the integers m_ 1, m_ 2, . . . , m_ n ( 1 \u2264 m_ i \u2264 10^ 9 ) \u2014 the limit on the number of floors for every possible number of floors for a skyscraper on each plot.",
    "output": "Print n integers a_ i \u2014 the number of floors in the plan for each skyscraper, such that all requirements are met, and the total number of floors in all skyscrapers is the maximum possible. If there are multiple answers possible, print any of them.",
    "note": "In the first example, you can build all skyscrapers with the highest possible height. In the second test example, you cannot give the maximum height to all skyscrapers as this violates the design code restriction. The answer [ 10, 6, 6] is optimal. Note that the answer of [ 6, 6, 8] also satisfies all restrictions, but is not optimal.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1313C2"
  },
  {
    "title": "Skyscrapers (easy version)",
    "url": "https://codeforces.com/problemset/problem/1313/C1",
    "history": "This is an easier version of the problem. In this version n \u2264 1000 The outskirts of the capital are being actively built up in Berland. The company \" Kernel Panic\" manages the construction of a residential complex of skyscrapers in New Berlskva. All skyscrapers are built along the highway. It is known that the company has already bought n plots along the highway and is preparing to build n skyscrapers, one skyscraper per plot. Architects must consider several requirements when planning a skyscraper. Firstly, since the land on each plot has different properties, each skyscraper has a limit on the largest number of floors it can have. Secondly, according to the design code of the city, it is unacceptable for a skyscraper to simultaneously have higher skyscrapers both to the left and to the right of it. Formally, let' s number the plots from 1 to n . Then if the skyscraper on the i - th plot has a_ i floors, it must hold that a_ i is at most m_ i ( 1 \u2264 a_ i \u2264 m_ i ) . Also there mustn' t be integers j and k such that j < i < k and a_ j > a_ i < a_ k . Plots j and k are not required to be adjacent to i . The company wants the total number of floors in the built skyscrapers to be as large as possible. Help it to choose the number of floors for each skyscraper in an optimal way, i. e. in such a way that all requirements are fulfilled, and among all such construction plans choose any plan with the maximum possible total number of floors.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 1000 ) \u2014 the number of plots. The second line contains the integers m_ 1, m_ 2, . . . , m_ n ( 1 \u2264 m_ i \u2264 10^ 9 ) \u2014 the limit on the number of floors for every possible number of floors for a skyscraper on each plot.",
    "output": "Print n integers a_ i \u2014 the number of floors in the plan for each skyscraper, such that all requirements are met, and the total number of floors in all skyscrapers is the maximum possible. If there are multiple answers possible, print any of them.",
    "note": "In the first example, you can build all skyscrapers with the highest possible height. In the second test example, you cannot give the maximum height to all skyscrapers as this violates the design code restriction. The answer [ 10, 6, 6] is optimal. Note that the answer of [ 6, 6, 8] also satisfies all restrictions, but is not optimal.",
    "topics": [
      "brute force",
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1313C1"
  },
  {
    "title": "Different Rules",
    "url": "https://codeforces.com/problemset/problem/1313/B",
    "history": "Nikolay has only recently started in competitive programming, but already qualified to the finals of one prestigious olympiad. There going to be n participants, one of whom is Nikolay. Like any good olympiad, it consists of two rounds. Tired of the traditional rules, in which the participant who solved the largest number of problems wins, the organizers came up with different rules. Suppose in the first round participant A took x - th place and in the second round \u2014 y - th place. Then the total score of the participant A is sum x + y . The overall place of the participant A is the number of participants ( including A) having their total score less than or equal to the total score of A. Note, that some participants may end up having a common overall place. It is also important to note, that in both the first and the second round there were no two participants tying at a common place. In other words, for every i from 1 to n exactly one participant took i - th place in first round and exactly one participant took i - th place in second round. Right after the end of the Olympiad, Nikolay was informed that he got x - th place in first round and y - th place in the second round. Nikolay doesn' t know the results of other participants, yet he wonders what is the minimum and maximum place he can take, if we consider the most favorable and unfavorable outcome for him. Please help Nikolay to find the answer to this question.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases to solve. Each of the following t lines contains integers n , x , y ( 1 \u2264 n \u2264 10^ 9 , 1 \u2264 x, y \u2264 n ) \u2014 the number of participants in the olympiad, the place that Nikolay took in the first round and the place that Nikolay took in the second round.",
    "output": "Print two integers \u2014 the minimum and maximum possible overall place Nikolay could take.",
    "note": "Explanation for the first example: Suppose there were 5 participants A- E. Let' s denote Nikolay as A. The the most favorable results for Nikolay could look as follows: However, the results of the Olympiad could also look like this: In the first case Nikolay would have taken first place, and in the second \u2014 third place.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1313B"
  },
  {
    "title": "Fast Food Restaurant",
    "url": "https://codeforces.com/problemset/problem/1313/A",
    "history": "Tired of boring office work, Denis decided to open a fast food restaurant. On the first day he made a portions of dumplings, b portions of cranberry juice and c pancakes with condensed milk. The peculiarity of Denis' s restaurant is the procedure of ordering food. For each visitor Denis himself chooses a set of dishes that this visitor will receive. When doing so, Denis is guided by the following rules: every visitor should receive at least one dish ( dumplings, cranberry juice, pancakes with condensed milk are all considered to be dishes) ; each visitor should receive no more than one portion of dumplings, no more than one portion of cranberry juice and no more than one pancake with condensed milk; all visitors should receive different sets of dishes. What is the maximum number of visitors Denis can feed?",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 500 ) \u2014 the number of test cases to solve. Each of the remaining t lines contains integers a , b and c ( 0 \u2264 a, b, c \u2264 10 ) \u2014 the number of portions of dumplings, the number of portions of cranberry juice and the number of condensed milk pancakes Denis made.",
    "output": "For each test case print a single integer \u2014 the maximum number of visitors Denis can feed.",
    "note": "In the first test case of the example, Denis can feed the first visitor with dumplings, give the second a portion of cranberry juice, and give the third visitor a portion of cranberry juice and a pancake with a condensed milk. In the second test case of the example, the restaurant Denis is not very promising: he can serve no customers. In the third test case of the example, Denise can serve four visitors. The first guest will receive a full lunch of dumplings, a portion of cranberry juice and a pancake with condensed milk. The second visitor will get only dumplings. The third guest will receive a pancake with condensed milk, and the fourth guest will receive a pancake and a portion of dumplings. Please note that Denis hasn' t used all of the prepared products, but is unable to serve more visitors.",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1313A"
  },
  {
    "title": "Array Shrinking",
    "url": "https://codeforces.com/problemset/problem/1312/E",
    "history": "You are given an array a_ 1, a_ 2, . . . , a_ n . You can perform the following operation any number of times: Choose a pair of two neighboring equal elements a_ i = a_ i + 1 ( if there is at least one such pair) . Replace them by one element with value a_ i + 1 . After each such operation, the length of the array will decrease by one ( and elements are renumerated accordingly) . What is the minimum possible length of the array a you can get?",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 500 ) \u2014 the initial length of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 1000 ) \u2014 the initial array a .",
    "output": "Print the only integer \u2014 the minimum possible length you can get after performing the operation described above any number of times.",
    "note": "In the first test, this is one of the optimal sequences of operations: 4 3 2 2 3 \u2192 4 3 3 3 \u2192 4 4 3 \u2192 5 3 . In the second test, this is one of the optimal sequences of operations: 3 3 4 4 4 3 3 \u2192 4 4 4 4 3 3 \u2192 4 4 4 4 4 \u2192 5 4 4 4 \u2192 5 5 4 \u2192 6 4 . In the third and fourth tests, you can' t perform the operation at all.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1312E"
  },
  {
    "title": "Adding Powers",
    "url": "https://codeforces.com/problemset/problem/1312/C",
    "history": "Suppose you are performing the following algorithm. There is an array v_ 1, v_ 2, . . . , v_ n filled with zeroes at start. The following operation is applied to the array several times \u2014 at i - th step ( 0 - indexed) you can: either choose position pos ( 1 \u2264 pos \u2264 n ) and increase v_ pos by k^ i ; or not choose any position and skip this step. You can choose how the algorithm would behave on each step and when to stop it. The question is: can you make array v equal to the given array a ( v_ j = a_ j for each j ) after some step?",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of test cases. Next 2T lines contain test cases \u2014 two lines per test case. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 30 , 2 \u2264 k \u2264 100 ) \u2014 the size of arrays v and a and value k used in the algorithm. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 16 ) \u2014 the array you' d like to achieve.",
    "output": "For each test case print YES ( case insensitive) if you can achieve the array a after some step or NO ( case insensitive) otherwise.",
    "note": "In the first test case, you can stop the algorithm before the 0 - th step, or don' t choose any position several times and stop the algorithm. In the second test case, you can add k^ 0 to v_ 1 and stop the algorithm. In the third test case, you can' t make two 1 in the array v . In the fifth test case, you can skip 9^ 0 and 9^ 1 , then add 9^ 2 and 9^ 3 to v_ 3 , skip 9^ 4 and finally, add 9^ 5 to v_ 2 .",
    "topics": [
      "bitmasks",
      "greedy",
      "implementation",
      "math",
      "number theory",
      "ternary search"
    ],
    "id": "1312C"
  },
  {
    "title": "Two Regular Polygons",
    "url": "https://codeforces.com/problemset/problem/1312/A",
    "history": "You are given two integers n and m ( m < n ) . Consider a convex regular polygon of n vertices. Recall that a regular polygon is a polygon that is equiangular ( all angles are equal in measure) and equilateral ( all sides have the same length) . Examples of convex regular polygons Your task is to say if it is possible to build another convex regular polygon with m vertices such that its center coincides with the center of the initial polygon and each of its vertices is some vertex of the initial polygon. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The next t lines describe test cases. Each test case is given as two space- separated integers n and m ( 3 \u2264 m < n \u2264 100 ) \u2014 the number of vertices in the initial polygon and the number of vertices in the polygon you want to build.",
    "output": "For each test case, print the answer \u2014 \" YES\" ( without quotes) , if it is possible to build another convex regular polygon with m vertices such that its center coincides with the center of the initial polygon and each of its vertices is some vertex of the initial polygon and \" NO\" otherwise.",
    "note": "The first test case of the example It can be shown that the answer for the second test case of the example is \" NO\" .",
    "topics": [
      "geometry",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1312A"
  },
  {
    "title": "Add Odd or Subtract Even",
    "url": "https://codeforces.com/problemset/problem/1311/A",
    "history": "You are given two positive integers a and b . In one move, you can change a in the following way: Choose any positive odd integer x ( x > 0 ) and replace a with a+ x ; choose any positive even integer y ( y > 0 ) and replace a with a- y . You can perform as many such operations as you want. You can choose the same numbers x and y in different moves. Your task is to find the minimum number of moves required to obtain b from a . It is guaranteed that you can always obtain b from a . You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case is given as two space- separated integers a and b ( 1 \u2264 a, b \u2264 10^ 9 ) .",
    "output": "For each test case, print the answer \u2014 the minimum number of moves required to obtain b from a if you can perform any number of moves described in the problem statement. It is guaranteed that you can always obtain b from a .",
    "note": "In the first test case, you can just add 1 . In the second test case, you don' t need to do anything. In the third test case, you can add 1 two times. In the fourth test case, you can subtract 4 and add 1 . In the fifth test case, you can just subtract 6 .",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1311A"
  },
  {
    "title": "Recommendations",
    "url": "https://codeforces.com/problemset/problem/1310/A",
    "history": "VK news recommendation system daily selects interesting publications of one of n disjoint categories for each user. Each publication belongs to exactly one category. For each category i batch algorithm selects a_ i publications. The latest A/ B test suggests that users are reading recommended publications more actively if each category has a different number of publications within daily recommendations. The targeted algorithm can find a single interesting publication of i - th category within t_ i seconds. What is the minimum total time necessary to add publications to the result of batch algorithm execution, so all categories have a different number of publications? You can' t remove publications recommended by the batch algorithm.",
    "input": "The first line of input consists of single integer n \u2014 the number of news categories ( 1 \u2264 n \u2264 200 000 ) . The second line of input consists of n integers a_ i \u2014 the number of publications of i - th category selected by the batch algorithm ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line of input consists of n integers t_ i \u2014 time it takes for targeted algorithm to find one new publication of category i ( 1 \u2264 t_ i \u2264 10^ 5) .",
    "output": "Print one integer \u2014 the minimal required time for the targeted algorithm to get rid of categories with the same size.",
    "note": "In the first example, it is possible to find three publications of the second type, which will take 6 seconds. In the second example, all news categories contain a different number of publications.",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1310A"
  },
  {
    "title": "Cow and Treats",
    "url": "https://codeforces.com/problemset/problem/1307/E",
    "history": "After a successful year of milk production, Farmer John is rewarding his cows with their favorite treat: tasty grass! On the field, there is a row of n units of grass, each with a sweetness s_ i . Farmer John has m cows, each with a favorite sweetness f_ i and a hunger value h_ i . He would like to pick two disjoint subsets of cows to line up on the left and right side of the grass row. There is no restriction on how many cows must be on either side. The cows will be treated in the following manner: The cows from the left and right side will take turns feeding in an order decided by Farmer John. When a cow feeds, it walks towards the other end without changing direction and eats grass of its favorite sweetness until it eats h_ i units. The moment a cow eats h_ i units, it will fall asleep there, preventing further cows from passing it from both directions. If it encounters another sleeping cow or reaches the end of the grass row, it will get upset. Farmer John absolutely does not want any cows to get upset. Note that grass does not grow back. Also, to prevent cows from getting upset, not every cow has to feed since FJ can choose a subset of them. Surprisingly, FJ has determined that sleeping cows are the most satisfied. If FJ orders optimally, what is the maximum number of sleeping cows that can result, and how many ways can FJ choose the subset of cows on the left and right side to achieve that maximum number of sleeping cows ( modulo 10^ 9+ 7 ) ? The order in which FJ sends the cows does not matter as long as no cows get upset.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 5000 , 1 \u2264 m \u2264 5000 ) \u2014 the number of units of grass and the number of cows. The second line contains n integers s_ 1, s_ 2, . . . , s_ n ( 1 \u2264 s_ i \u2264 n ) \u2014 the sweetness values of the grass. The i - th of the following m lines contains two integers f_ i and h_ i ( 1 \u2264 f_ i, h_ i \u2264 n ) \u2014 the favorite sweetness and hunger value of the i - th cow. No two cows have the same hunger and favorite sweetness simultaneously.",
    "output": "Output two integers \u2014 the maximum number of sleeping cows that can result and the number of ways modulo 10^ 9+ 7 .",
    "note": "In the first example, FJ can line up the cows as follows to achieve 2 sleeping cows: Cow 1 is lined up on the left side and cow 2 is lined up on the right side. Cow 2 is lined up on the left side and cow 1 is lined up on the right side. In the second example, FJ can line up the cows as follows to achieve 1 sleeping cow: Cow 1 is lined up on the left side. Cow 2 is lined up on the left side. Cow 1 is lined up on the right side. Cow 2 is lined up on the right side. In the third example, FJ can line up the cows as follows to achieve 2 sleeping cows: Cow 1 and 2 are lined up on the left side. Cow 1 and 2 are lined up on the right side. Cow 1 is lined up on the left side and cow 2 is lined up on the right side. Cow 1 is lined up on the right side and cow 2 is lined up on the left side. In the fourth example, FJ cannot end up with any sleeping cows, so there will be no cows lined up on either side.",
    "topics": [
      "binary search",
      "combinatorics",
      "dp",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1307E"
  },
  {
    "title": "Cow and Fields",
    "url": "https://codeforces.com/problemset/problem/1307/D",
    "history": "Bessie is out grazing on the farm, which consists of n fields connected by m bidirectional roads. She is currently at field 1 , and will return to her home at field n at the end of the day. The Cowfederation of Barns has ordered Farmer John to install one extra bidirectional road. The farm has k special fields and he has decided to install the road between two different special fields. He may add the road between two special fields that already had a road directly connecting them. After the road is added, Bessie will return home on the shortest path from field 1 to field n . Since Bessie needs more exercise, Farmer John must maximize the length of this shortest path. Help him!",
    "input": "The first line contains integers n , m , and k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , n- 1 \u2264 m \u2264 2 \u00b7 10^ 5 , 2 \u2264 k \u2264 n ) \u2014 the number of fields on the farm, the number of roads, and the number of special fields. The second line contains k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ i \u2264 n ) \u2014 the special fields. All a_ i are distinct. The i - th of the following m lines contains integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) , representing a bidirectional road between fields x_ i and y_ i . It is guaranteed that one can reach any field from every other field. It is also guaranteed that for any pair of fields there is at most one road connecting them.",
    "output": "Output one integer, the maximum possible length of the shortest path from field 1 to n after Farmer John installs one road optimally.",
    "note": "The graph for the first example is shown below. The special fields are denoted by red. It is optimal for Farmer John to add a road between fields 3 and 5 , and the resulting shortest path from 1 to 5 is length 3 . The graph for the second example is shown below. Farmer John must add a road between fields 2 and 4 , and the resulting shortest path from 1 to 5 is length 3 .",
    "topics": [
      "binary search",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "shortest paths",
      "sortings"
    ],
    "id": "1307D"
  },
  {
    "title": "Cow and Friend",
    "url": "https://codeforces.com/problemset/problem/1307/B",
    "history": "Bessie has way too many friends because she is everyone' s favorite cow! Her new friend Rabbit is trying to hop over so they can play! More specifically, he wants to get from ( 0, 0) to ( x, 0) by making multiple hops. He is only willing to hop from one point to another point on the 2D plane if the Euclidean distance between the endpoints of a hop is one of its n favorite numbers: a_ 1, a_ 2, . . . , a_ n . What is the minimum number of hops Rabbit needs to get from ( 0, 0) to ( x, 0) ? Rabbit may land on points with non- integer coordinates. It can be proved that Rabbit can always reach his destination. Recall that the Euclidean distance between points ( x_ i, y_ i) and ( x_ j, y_ j) is \u221a( ( x_ i- x_ j) ^ 2+ ( y_ i- y_ j) ^ 2) . For example, if Rabbit has favorite numbers 1 and 3 he could hop from ( 0, 0) to ( 4, 0) in two hops as shown below. Note that there also exists other valid ways to hop to ( 4, 0) in 2 hops ( e. g. ( 0, 0) \u2192 ( 2, - \u221a( 5) ) \u2192 ( 4, 0) ) . Here is a graphic for the first example. Both hops have distance 3 , one of Rabbit' s favorite numbers. In other words, each time Rabbit chooses some number a_ i and hops with distance equal to a_ i in any direction he wants. The same number can be used multiple times.",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Next 2t lines contain test cases \u2014 two lines per test case. The first line of each test case contains two integers n and x ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 x \u2264 10^ 9 ) \u2014 the number of favorite numbers and the distance Rabbit wants to travel, respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 Rabbit' s favorite numbers. It is guaranteed that the favorite numbers are distinct. It is guaranteed that the sum of n over all the test cases will not exceed 10^ 5 .",
    "output": "For each test case, print a single integer \u2014 the minimum number of hops needed.",
    "note": "The first test case of the sample is shown in the picture above. Rabbit can hop to ( 2, \u221a( 5) ) , then to ( 4, 0) for a total of two hops. Each hop has a distance of 3 , which is one of his favorite numbers. In the second test case of the sample, one way for Rabbit to hop 3 times is: ( 0, 0) \u2192 ( 4, 0) \u2192 ( 8, 0) \u2192 ( 12, 0) . In the third test case of the sample, Rabbit can hop from ( 0, 0) to ( 5, 0) . In the fourth test case of the sample, Rabbit can hop: ( 0, 0) \u2192 ( 5, 10\u221a( 2) ) \u2192 ( 10, 0) .",
    "topics": [
      "geometry",
      "greedy",
      "math"
    ],
    "id": "1307B"
  },
  {
    "title": "Cow and Haybales",
    "url": "https://codeforces.com/problemset/problem/1307/A",
    "history": "The USA Construction Operation ( USACO) recently ordered Farmer John to arrange a row of n haybale piles on the farm. The i - th pile contains a_ i haybales. However, Farmer John has just left for vacation, leaving Bessie all on her own. Every day, Bessie the naughty cow can choose to move one haybale in any pile to an adjacent pile. Formally, in one day she can choose any two indices i and j ( 1 \u2264 i, j \u2264 n ) such that | i- j| = 1 and a_ i> 0 and apply a_ i = a_ i - 1 , a_ j = a_ j + 1 . She may also decide to not do anything on some days because she is lazy. Bessie wants to maximize the number of haybales in pile 1 ( i. e. to maximize a_ 1 ) , and she only has d days to do so before Farmer John returns. Help her find the maximum number of haybales that may be in pile 1 if she acts optimally!",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Next 2t lines contain a description of test cases \u2014 two lines per test case. The first line of each test case contains integers n and d ( 1 \u2264 n, d \u2264 100 ) \u2014 the number of haybale piles and the number of days, respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 100 ) \u2014 the number of haybales in each pile.",
    "output": "For each test case, output one integer: the maximum number of haybales that may be in pile 1 after d days if Bessie acts optimally.",
    "note": "In the first test case of the sample, this is one possible way Bessie can end up with 3 haybales in pile 1 : On day one, move a haybale from pile 3 to pile 2 On day two, move a haybale from pile 3 to pile 2 On day three, move a haybale from pile 2 to pile 1 On day four, move a haybale from pile 2 to pile 1 On day five, do nothing In the second test case of the sample, Bessie can do nothing on the first day and move a haybale from pile 2 to pile 1 on the second day.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1307A"
  },
  {
    "title": "Kuroni the Private Tutor",
    "url": "https://codeforces.com/problemset/problem/1305/H",
    "history": "As a professional private tutor, Kuroni has to gather statistics of an exam. Kuroni has appointed you to complete this important task. You must not disappoint him. The exam consists of n questions, and m students have taken the exam. Each question was worth 1 point. Question i was solved by at least l_ i and at most r_ i students. Additionally, you know that the total score of all students is t . Furthermore, you took a glance at the final ranklist of the quiz. The students were ranked from 1 to m , where rank 1 has the highest score and rank m has the lowest score. Ties were broken arbitrarily. You know that the student at rank p_ i had a score of s_ i for 1 \u2264 i \u2264 q . You wonder if there could have been a huge tie for first place. Help Kuroni determine the maximum number of students who could have gotten as many points as the student with rank 1 , and the maximum possible score for rank 1 achieving this maximum number of students.",
    "input": "The first line of input contains two integers ( 1 \u2264 n, m \u2264 10^ 5 ) , denoting the number of questions of the exam and the number of students respectively. The next n lines contain two integers each, with the i - th line containing l_ i and r_ i ( 0 \u2264 l_ i\u2264 r_ i\u2264 m ) . The next line contains a single integer q ( 0 \u2264 q \u2264 m ) . The next q lines contain two integers each, denoting p_ i and s_ i ( 1 \u2264 p_ i\u2264 m , 0 \u2264 s_ i\u2264 n ) . It is guaranteed that all p_ i are distinct and if p_ i\u2264 p_ j , then s_ i\u2265 s_ j . The last line contains a single integer t ( 0 \u2264 t \u2264 nm ) , denoting the total score of all students.",
    "output": "Output two integers: the maximum number of students who could have gotten as many points as the student with rank 1 , and the maximum possible score for rank 1 achieving this maximum number of students. If there is no valid arrangement that fits the given data, output - 1 - 1 .",
    "note": "For the first sample, here is one possible arrangement that fits the data: Students 1 and 2 both solved problems 1 and 2 . Student 3 solved problems 2 and 3 . Student 4 solved problem 4 . The total score of all students is T = 7 . Note that the scores of the students are 2 , 2 , 2 and 1 respectively, which satisfies the condition that the student at rank 4 gets exactly 1 point. Finally, 3 students tied for first with a maximum score of 2 , and it can be proven that we cannot do better with any other arrangement.",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1305H"
  },
  {
    "title": "Kuroni and the Score Distribution",
    "url": "https://codeforces.com/problemset/problem/1305/E",
    "history": "Kuroni is the coordinator of the next Mathforces round written by the \" Proof by AC\" team. All the preparation has been done, and he is discussing with the team about the score distribution for the round. The round consists of n problems, numbered from 1 to n . The problems are ordered in increasing order of difficulty, no two problems have the same difficulty. A score distribution for the round can be denoted by an array a_ 1, a_ 2, . . . , a_ n , where a_ i is the score of i - th problem. Kuroni thinks that the score distribution should satisfy the following requirements: The score of each problem should be a positive integer not exceeding 10^ 9 . A harder problem should grant a strictly higher score than an easier problem. In other words, 1 \u2264 a_ 1 < a_ 2 < . . . < a_ n \u2264 10^ 9 . The balance of the score distribution, defined as the number of triples ( i, j, k) such that 1 \u2264 i < j < k \u2264 n and a_ i + a_ j = a_ k , should be exactly m . Help the team find a score distribution that satisfies Kuroni' s requirement. In case such a score distribution does not exist, output - 1 .",
    "input": "The first and single line contains two integers n and m ( 1 \u2264 n \u2264 5000 , 0 \u2264 m \u2264 10^ 9 ) \u2014 the number of problems and the required balance.",
    "output": "If there is no solution, print a single integer - 1 . Otherwise, print a line containing n integers a_ 1, a_ 2, . . . , a_ n , representing a score distribution that satisfies all the requirements. If there are multiple answers, print any of them.",
    "note": "In the first example, there are 3 triples ( i, j, k) that contribute to the balance of the score distribution. ( 1, 2, 3) ( 1, 3, 4) ( 2, 4, 5)",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1305E"
  },
  {
    "title": "Kuroni and Simple Strings",
    "url": "https://codeforces.com/problemset/problem/1305/B",
    "history": "Now that Kuroni has reached 10 years old, he is a big boy and doesn' t like arrays of integers as presents anymore. This year he wants a Bracket sequence as a Birthday present. More specifically, he wants a bracket sequence so complex that no matter how hard he tries, he will not be able to remove a simple subsequence! We say that a string formed by n characters ' ( ' or ' ) ' is simple if its length n is even and positive, its first n/ 2 characters are ' ( ' , and its last n/ 2 characters are ' ) ' . For example, the strings ( ) and ( ( ) ) are simple, while the strings ) ( and ( ) ( ) are not simple. Kuroni will be given a string formed by characters ' ( ' and ' ) ' ( the given string is not necessarily simple) . An operation consists of choosing a subsequence of the characters of the string that forms a simple string and removing all the characters of this subsequence from the string. Note that this subsequence doesn' t have to be continuous. For example, he can apply the operation to the string ' ) ( ) ( ( ) ) ) ' , to choose a subsequence of bold characters, as it forms a simple string ' ( ( ) ) ' , delete these bold characters from the string and to get ' ) ) ( ) ' . Kuroni has to perform the minimum possible number of operations on the string, in such a way that no more operations can be performed on the remaining string. The resulting string does not have to be empty. Since the given string is too large, Kuroni is unable to figure out how to minimize the number of operations. Can you help him do it instead? A sequence of characters a is a subsequence of a string b if a can be obtained from b by deletion of several ( possibly, zero or all) characters.",
    "input": "The only line of input contains a string s ( 1 \u2264 | s| \u2264 1000 ) formed by characters ' ( ' and ' ) ' , where | s| is the length of s .",
    "output": "In the first line, print an integer k \u2014 the minimum number of operations you have to apply. Then, print 2k lines describing the operations in the following format: For each operation, print a line containing an integer m \u2014 the number of characters in the subsequence you will remove. Then, print a line containing m integers 1 \u2264 a_ 1 < a_ 2 < . . . < a_ m \u2014 the indices of the characters you will remove. All integers must be less than or equal to the length of the current string, and the corresponding subsequence must form a simple string. If there are multiple valid sequences of operations with the smallest k , you may print any of them.",
    "note": "In the first sample, the string is ' ( ( ) ( ( ' . The operation described corresponds to deleting the bolded subsequence. The resulting string is ' ( ( ( ' , and no more operations can be performed on it. Another valid answer is choosing indices 2 and 3 , which results in the same final string. In the second sample, it is already impossible to perform any operations.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "strings",
      "two pointers"
    ],
    "id": "1305B"
  },
  {
    "title": "Kuroni and the Gifts",
    "url": "https://codeforces.com/problemset/problem/1305/A",
    "history": "Kuroni has n daughters. As gifts for them, he bought n necklaces and n bracelets: the i - th necklace has a brightness a_ i , where all the a_ i are pairwise distinct ( i. e. all a_ i are different) , the i - th bracelet has a brightness b_ i , where all the b_ i are pairwise distinct ( i. e. all b_ i are different) . Kuroni wants to give exactly one necklace and exactly one bracelet to each of his daughters. To make sure that all of them look unique, the total brightnesses of the gifts given to each daughter should be pairwise distinct. Formally, if the i - th daughter receives a necklace with brightness x_ i and a bracelet with brightness y_ i , then the sums x_ i + y_ i should be pairwise distinct. Help Kuroni to distribute the gifts. For example, if the brightnesses are a = [ 1, 7, 5] and b = [ 6, 1, 2] , then we may distribute the gifts as follows: Give the third necklace and the first bracelet to the first daughter, for a total brightness of a_ 3 + b_ 1 = 11 . Give the first necklace and the third bracelet to the second daughter, for a total brightness of a_ 1 + b_ 3 = 3 . Give the second necklace and the second bracelet to the third daughter, for a total brightness of a_ 2 + b_ 2 = 8 . Here is an example of an invalid distribution: Give the first necklace and the first bracelet to the first daughter, for a total brightness of a_ 1 + b_ 1 = 7 . Give the second necklace and the second bracelet to the second daughter, for a total brightness of a_ 2 + b_ 2 = 8 . Give the third necklace and the third bracelet to the third daughter, for a total brightness of a_ 3 + b_ 3 = 7 . This distribution is invalid, as the total brightnesses of the gifts received by the first and the third daughter are the same. Don' t make them this upset!",
    "input": "The input consists of multiple test cases. The first line contains an integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of daughters, necklaces and bracelets. The second line of each test case contains n distinct integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 1000 ) \u2014 the brightnesses of the necklaces. The third line of each test case contains n distinct integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ i \u2264 1000 ) \u2014 the brightnesses of the bracelets.",
    "output": "For each test case, print a line containing n integers x_ 1, x_ 2, . . . , x_ n , representing that the i - th daughter receives a necklace with brightness x_ i . In the next line print n integers y_ 1, y_ 2, . . . , y_ n , representing that the i - th daughter receives a bracelet with brightness y_ i . The sums x_ 1 + y_ 1, x_ 2 + y_ 2, . . . , x_ n + y_ n should all be distinct. The numbers x_ 1, . . . , x_ n should be equal to the numbers a_ 1, . . . , a_ n in some order, and the numbers y_ 1, . . . , y_ n should be equal to the numbers b_ 1, . . . , b_ n in some order. It can be shown that an answer always exists. If there are multiple possible answers, you may print any of them.",
    "note": "In the first test case, it is enough to give the i - th necklace and the i - th bracelet to the i - th daughter. The corresponding sums are 1 + 8 = 9 , 8 + 4 = 12 , and 5 + 5 = 10 . The second test case is described in the statement.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "sortings"
    ],
    "id": "1305A"
  },
  {
    "title": "Animal Observation (hard version)",
    "url": "https://codeforces.com/problemset/problem/1304/F2",
    "history": "The only difference between easy and hard versions is the constraint on k . Gildong loves observing animals, so he bought two cameras to take videos of wild animals in a forest. The color of one camera is red, and the other one' s color is blue. Gildong is going to take videos for n days, starting from day 1 to day n . The forest can be divided into m areas, numbered from 1 to m . He' ll use the cameras in the following way: On every odd day ( 1 - st, 3 - rd, 5 - th, . . . ) , bring the red camera to the forest and record a video for 2 days. On every even day ( 2 - nd, 4 - th, 6 - th, . . . ) , bring the blue camera to the forest and record a video for 2 days. If he starts recording on the n - th day with one of the cameras, the camera records for only one day. Each camera can observe k consecutive areas of the forest. For example, if m= 5 and k= 3 , he can put a camera to observe one of these three ranges of areas for two days: [ 1, 3] , [ 2, 4] , and [ 3, 5] . Gildong got information about how many animals will be seen in each area on each day. Since he would like to observe as many animals as possible, he wants you to find the best way to place the two cameras for n days. Note that if the two cameras are observing the same area on the same day, the animals observed in that area are counted only once.",
    "input": "The first line contains three integers n , m , and k ( 1 \u2264 n \u2264 50 , 1 \u2264 m \u2264 2 \u00b7 10^ 4 , 1 \u2264 k \u2264 m ) \u2013 the number of days Gildong is going to record, the number of areas of the forest, and the range of the cameras, respectively. Next n lines contain m integers each. The j - th integer in the i+ 1 - st line is the number of animals that can be seen on the i - th day in the j - th area. Each number of animals is between 0 and 1000 , inclusive.",
    "output": "Print one integer \u2013 the maximum number of animals that can be observed.",
    "note": "The optimal way to observe animals in the four examples are as follows: Example 1: Example 2: Example 3: Example 4:",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1304F2"
  },
  {
    "title": "Shortest and Longest LIS",
    "url": "https://codeforces.com/problemset/problem/1304/D",
    "history": "Gildong recently learned how to find the longest increasing subsequence ( LIS) in O( nlogn) time for a sequence of length n . He wants to test himself if he can implement it correctly, but he couldn' t find any online judges that would do it ( even though there are actually many of them) . So instead he' s going to make a quiz for you about making permutations of n distinct integers between 1 and n , inclusive, to test his code with your output. The quiz is as follows. Gildong provides a string of length n- 1 , consisting of characters ' < ' and ' > ' only. The i - th ( 1- indexed) character is the comparison result between the i - th element and the i+ 1 - st element of the sequence. If the i - th character of the string is ' < ' , then the i - th element of the sequence is less than the i+ 1 - st element. If the i - th character of the string is ' > ' , then the i - th element of the sequence is greater than the i+ 1 - st element. He wants you to find two possible sequences ( not necessarily distinct) consisting of n distinct integers between 1 and n , inclusive, each satisfying the comparison results, where the length of the LIS of the first sequence is minimum possible, and the length of the LIS of the second sequence is maximum possible.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . Each test case contains exactly one line, consisting of an integer and a string consisting of characters ' < ' and ' > ' only. The integer is n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) , the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is n- 1 . It is guaranteed that the sum of all n in all test cases doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, print two lines with n integers each. The first line is the sequence with the minimum length of the LIS, and the second line is the sequence with the maximum length of the LIS. If there are multiple answers, print any one of them. Each sequence should contain all integers between 1 and n , inclusive, and should satisfy the comparison results. It can be shown that at least one answer always exists.",
    "note": "In the first case, 1 2 3 is the only possible answer. In the second case, the shortest length of the LIS is 2 , and the longest length of the LIS is 3 . In the example of the maximum LIS sequence, 4 ' 3 ' 1 7 ' 5 ' 2 ' 6 ' can be one of the possible LIS.",
    "topics": [
      "constructive algorithms",
      "graphs",
      "greedy",
      "two pointers"
    ],
    "id": "1304D"
  },
  {
    "title": "Air Conditioner",
    "url": "https://codeforces.com/problemset/problem/1304/C",
    "history": "Gildong owns a bulgogi restaurant. The restaurant has a lot of customers, so many of them like to make a reservation before visiting it. Gildong tries so hard to satisfy the customers that he even memorized all customers' preferred temperature ranges! Looking through the reservation list, he wants to satisfy all customers by controlling the temperature of the restaurant. The restaurant has an air conditioner that has 3 states: off, heating, and cooling. When it' s off, the restaurant' s temperature remains the same. When it' s heating, the temperature increases by 1 in one minute. Lastly, when it' s cooling, the temperature decreases by 1 in one minute. Gildong can change the state as many times as he wants, at any integer minutes. The air conditioner is off initially. Each customer is characterized by three values: t_ i \u2014 the time ( in minutes) when the i - th customer visits the restaurant, l_ i \u2014 the lower bound of their preferred temperature range, and h_ i \u2014 the upper bound of their preferred temperature range. A customer is satisfied if the temperature is within the preferred range at the instant they visit the restaurant. Formally, the i - th customer is satisfied if and only if the temperature is between l_ i and h_ i ( inclusive) in the t_ i - th minute. Given the initial temperature, the list of reserved customers' visit times and their preferred temperature ranges, you' re going to help him find if it' s possible to satisfy all customers.",
    "input": "Each test contains one or more test cases. The first line contains the number of test cases q ( 1 \u2264 q \u2264 500 ) . Description of the test cases follows. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 100 , - 10^ 9 \u2264 m \u2264 10^ 9 ) , where n is the number of reserved customers and m is the initial temperature of the restaurant. Next, n lines follow. The i - th line of them contains three integers t_ i , l_ i , and h_ i ( 1 \u2264 t_ i \u2264 10^ 9 , - 10^ 9 \u2264 l_ i \u2264 h_ i \u2264 10^ 9 ) , where t_ i is the time when the i - th customer visits, l_ i is the lower bound of their preferred temperature range, and h_ i is the upper bound of their preferred temperature range. The preferred temperature ranges are inclusive. The customers are given in non- decreasing order of their visit time, and the current time is 0 .",
    "output": "For each test case, print \" YES\" if it is possible to satisfy all customers. Otherwise, print \" NO\" . You can print each letter in any case ( upper or lower) .",
    "note": "In the first case, Gildong can control the air conditioner to satisfy all customers in the following way: At 0 - th minute, change the state to heating ( the temperature is 0) . At 2 - nd minute, change the state to off ( the temperature is 2) . At 5 - th minute, change the state to heating ( the temperature is 2, the 1 - st customer is satisfied) . At 6 - th minute, change the state to off ( the temperature is 3) . At 7 - th minute, change the state to cooling ( the temperature is 3, the 2 - nd customer is satisfied) . At 10 - th minute, the temperature will be 0, which satisfies the last customer. In the third case, Gildong can change the state to heating at 0 - th minute and leave it be. Then all customers will be satisfied. Note that the 1 - st customer' s visit time equals the 2 - nd customer' s visit time. In the second and the fourth case, Gildong has to make at least one customer unsatisfied.",
    "topics": [
      "dp",
      "greedy",
      "implementation",
      "sortings",
      "two pointers"
    ],
    "id": "1304C"
  },
  {
    "title": "Longest Palindrome",
    "url": "https://codeforces.com/problemset/problem/1304/B",
    "history": "Returning back to problem solving, Gildong is now studying about palindromes. He learned that a palindrome is a string that is the same as its reverse. For example, strings \" pop\" , \" noon\" , \" x\" , and \" kkkkkk\" are palindromes, while strings \" moon\" , \" tv\" , and \" abab\" are not. An empty string is also a palindrome. Gildong loves this concept so much, so he wants to play with it. He has n distinct strings of equal length m . He wants to discard some of the strings ( possibly none or all) and reorder the remaining strings so that the concatenation becomes a palindrome. He also wants the palindrome to be as long as possible. Please help him find one.",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 100 , 1 \u2264 m \u2264 50 ) \u2014 the number of strings and the length of each string. Next n lines contain a string of length m each, consisting of lowercase Latin letters only. All strings are distinct.",
    "output": "In the first line, print the length of the longest palindrome string you made. In the second line, print that palindrome. If there are multiple answers, print any one of them. If the palindrome is empty, print an empty line or don' t print this line at all.",
    "note": "In the first example, \" battab\" is also a valid answer. In the second example, there can be 4 different valid answers including the sample output. We are not going to provide any hints for what the others are. In the third example, the empty string is the only valid palindrome string.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1304B"
  },
  {
    "title": "Fill The Bag",
    "url": "https://codeforces.com/problemset/problem/1303/D",
    "history": "You have a bag of size n . Also you have m boxes. The size of i - th box is a_ i , where each a_ i is an integer non- negative power of two. You can divide boxes into two parts of equal size. Your goal is to fill the bag completely. For example, if n = 10 and a = [ 1, 1, 32] then you have to divide the box of size 32 into two parts of size 16 , and then divide the box of size 16 . So you can fill the bag with boxes of size 1 , 1 and 8 . Calculate the minimum number of divisions required to fill the bag of size n .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 10^ 18, 1 \u2264 m \u2264 10^ 5 ) \u2014 the size of bag and the number of boxes, respectively. The second line of each test case contains m integers a_ 1, a_ 2, . . . , a_ m ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 the sizes of boxes. It is guaranteed that each a_ i is a power of two. It is also guaranteed that sum of all m over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of divisions required to fill the bag of size n ( or - 1 , if it is impossible) .",
    "note": "",
    "topics": [
      "bitmasks",
      "greedy"
    ],
    "id": "1303D"
  },
  {
    "title": "Perfect Keyboard",
    "url": "https://codeforces.com/problemset/problem/1303/C",
    "history": "Polycarp wants to assemble his own keyboard. Layouts with multiple rows are too complicated for him \u2014 his keyboard will consist of only one row, where all 26 lowercase Latin letters will be arranged in some order. Polycarp uses the same password s on all websites where he is registered ( it is bad, but he doesn' t care) . He wants to assemble a keyboard that will allow to type this password very easily. He doesn' t like to move his fingers while typing the password, so, for each pair of adjacent characters in s , they should be adjacent on the keyboard. For example, if the password is abacaba, then the layout cabdefghi. . . is perfect, since characters a and c are adjacent on the keyboard, and a and b are adjacent on the keyboard. It is guaranteed that there are no two adjacent equal characters in s , so, for example, the password cannot be password ( two characters s are adjacent) . Can you help Polycarp with choosing the perfect layout of the keyboard, if it is possible?",
    "input": "The first line contains one integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of test cases. Then T lines follow, each containing one string s ( 1 \u2264 | s| \u2264 200 ) representing the test case. s consists of lowercase Latin letters only. There are no two adjacent equal characters in s .",
    "output": "For each test case, do the following: if it is impossible to assemble a perfect keyboard, print NO ( in upper case, it matters in this problem) ; otherwise, print YES ( in upper case) , and then a string consisting of 26 lowercase Latin letters \u2014 the perfect layout. Each Latin letter should appear in this string exactly once. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "greedy",
      "implementation"
    ],
    "id": "1303C"
  },
  {
    "title": "Ayoub's function",
    "url": "https://codeforces.com/problemset/problem/1301/C",
    "history": "Ayoub thinks that he is a very smart person, so he created a function f( s) , where s is a binary string ( a string which contains only symbols \" 0\" and \" 1\" ) . The function f( s) is equal to the number of substrings in the string s that contains at least one symbol, that is equal to \" 1\" . More formally, f( s) is equal to the number of pairs of integers ( l, r) , such that 1 \u2264 l \u2264 r \u2264 | s| ( where | s| is equal to the length of string s ) , such that at least one of the symbols s_ l, s_ l+ 1, . . . , s_ r is equal to \" 1\" . For example, if s = \" 01010\" then f( s) = 12 , because there are 12 such pairs ( l, r) : ( 1, 2) , ( 1, 3) , ( 1, 4) , ( 1, 5) , ( 2, 2) , ( 2, 3) , ( 2, 4) , ( 2, 5) , ( 3, 4) , ( 3, 5) , ( 4, 4) , ( 4, 5) . Ayoub also thinks that he is smarter than Mahmoud so he gave him two integers n and m and asked him this problem. For all binary strings s of length n which contains exactly m symbols equal to \" 1\" , find the maximum value of f( s) . Mahmoud couldn' t solve the problem so he asked you for help. Can you help him?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. The description of the test cases follows. The only line for each test case contains two integers n , m ( 1 \u2264 n \u2264 10^ 9 , 0 \u2264 m \u2264 n ) \u2014 the length of the string and the number of symbols equal to \" 1\" in it.",
    "output": "For every test case print one integer number \u2014 the maximum value of f( s) over all strings s of length n , which has exactly m symbols, equal to \" 1\" .",
    "note": "In the first test case, there exists only 3 strings of length 3 , which has exactly 1 symbol, equal to \" 1\" . These strings are: s_ 1 = \" 100\" , s_ 2 = \" 010\" , s_ 3 = \" 001\" . The values of f for them are: f( s_ 1) = 3, f( s_ 2) = 4, f( s_ 3) = 3 , so the maximum value is 4 and the answer is 4 . In the second test case, the string s with the maximum value is \" 101\" . In the third test case, the string s with the maximum value is \" 111\" . In the fourth test case, the only string s of length 4 , which has exactly 0 symbols, equal to \" 1\" is \" 0000\" and the value of f for that string is 0 , so the answer is 0 . In the fifth test case, the string s with the maximum value is \" 01010\" and it is described as an example in the problem statement.",
    "topics": [
      "binary search",
      "combinatorics",
      "greedy",
      "math",
      "strings"
    ],
    "id": "1301C"
  },
  {
    "title": "Motarack's Birthday",
    "url": "https://codeforces.com/problemset/problem/1301/B",
    "history": "Dark is going to attend Motarack' s birthday. Dark decided that the gift he is going to give to Motarack is an array a of n non- negative integers. Dark created that array 1000 years ago, so some elements in that array disappeared. Dark knows that Motarack hates to see an array that has two adjacent elements with a high absolute difference between them. He doesn' t have much time so he wants to choose an integer k ( 0 \u2264 k \u2264 10^ 9 ) and replaces all missing elements in the array a with k . Let m be the maximum absolute difference between all adjacent elements ( i. e. the maximum value of | a_ i - a_ i+ 1| for all 1 \u2264 i \u2264 n - 1 ) in the array a after Dark replaces all missing elements with k . Dark should choose an integer k so that m is minimized. Can you help him?",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains one integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the size of the array a . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 1 \u2264 a_ i \u2264 10 ^ 9 ) . If a_ i = - 1 , then the i - th integer is missing. It is guaranteed that at least one integer is missing in every test case. It is guaranteed, that the sum of n for all test cases does not exceed 4 \u00b7 10 ^ 5 .",
    "output": "Print the answers for each test case in the following format: You should print two integers, the minimum possible value of m and an integer k ( 0 \u2264 k \u2264 10^ 9 ) that makes the maximum absolute difference between adjacent elements in the array a equal to m . Make sure that after replacing all the missing elements with k , the maximum absolute difference between adjacent elements becomes m . If there is more than one possible k , you can print any of them.",
    "note": "In the first test case after replacing all missing elements with 11 the array becomes [ 11, 10, 11, 12, 11] . The absolute difference between any adjacent elements is 1 . It is impossible to choose a value of k , such that the absolute difference between any adjacent element will be \u2264 0 . So, the answer is 1 . In the third test case after replacing all missing elements with 6 the array becomes [ 6, 6, 9, 6, 3, 6] . | a_ 1 - a_ 2| = | 6 - 6| = 0 ; | a_ 2 - a_ 3| = | 6 - 9| = 3 ; | a_ 3 - a_ 4| = | 9 - 6| = 3 ; | a_ 4 - a_ 5| = | 6 - 3| = 3 ; | a_ 5 - a_ 6| = | 3 - 6| = 3 . So, the maximum difference between any adjacent elements is 3 .",
    "topics": [
      "binary search",
      "greedy",
      "ternary search"
    ],
    "id": "1301B"
  },
  {
    "title": "Assigning to Classes",
    "url": "https://codeforces.com/problemset/problem/1300/B",
    "history": "Reminder: the median of the array [ a_ 1, a_ 2, . . . , a_ 2k+ 1] of odd number of elements is defined as follows: let [ b_ 1, b_ 2, . . . , b_ 2k+ 1] be the elements of the array in the sorted order. Then median of this array is equal to b_ k+ 1 . There are 2n students, the i - th student has skill level a_ i . It' s not guaranteed that all skill levels are distinct. Let' s define skill level of a class as the median of skill levels of students of the class. As a principal of the school, you would like to assign each student to one of the 2 classes such that each class has odd number of students ( not divisible by 2 ) . The number of students in the classes may be equal or different, by your choice. Every student has to be assigned to exactly one class. Among such partitions, you want to choose one in which the absolute difference between skill levels of the classes is minimized. What is the minimum possible absolute difference you can achieve?",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of students halved. The second line of each test case contains 2n integers a_ 1, a_ 2, . . . , a_ 2 n ( 1 \u2264 a_ i \u2264 10^ 9 ) \u2014 skill levels of students. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case, output a single integer, the minimum possible absolute difference between skill levels of two classes of odd sizes.",
    "note": "In the first test, there is only one way to partition students \u2014 one in each class. The absolute difference of the skill levels will be | 1 - 1| = 0 . In the second test, one of the possible partitions is to make the first class of students with skill levels [ 6, 4, 2] , so that the skill level of the first class will be 4 , and second with [ 5, 1, 3] , so that the skill level of the second class will be 3 . Absolute difference will be | 4 - 3| = 1 . Note that you can' t assign like [ 2, 3] , [ 6, 5, 4, 1] or [ ] , [ 6, 5, 4, 1, 2, 3] because classes have even number of students. [ 2] , [ 1, 3, 4] is also not possible because students with skills 5 and 6 aren' t assigned to a class. In the third test you can assign the students in the following way: [ 3, 4, 13, 13, 20] , [ 2, 5, 8, 16, 17] or [ 3, 8, 17] , [ 2, 4, 5, 13, 13, 16, 20] . Both divisions give minimal possible absolute difference.",
    "topics": [
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1300B"
  },
  {
    "title": "Water Balance",
    "url": "https://codeforces.com/problemset/problem/1299/C",
    "history": "There are n water tanks in a row, i - th of them contains a_ i liters of water. The tanks are numbered from 1 to n from left to right. You can perform the following operation: choose some subsegment [ l, r] ( 1\u2264 l \u2264 r \u2264 n ) , and redistribute water in tanks l, l+ 1, . . . , r evenly. In other words, replace each of a_ l, a_ l+ 1, . . . , a_ r by a_ l + a_ l+ 1 + . . . + a_ r/ r- l+ 1 . For example, if for volumes [ 1, 3, 6, 7] you choose l = 2, r = 3 , new volumes of water will be [ 1, 4. 5, 4. 5, 7] . You can perform this operation any number of times. What is the lexicographically smallest sequence of volumes of water that you can achieve? As a reminder: A sequence a is lexicographically smaller than a sequence b of the same length if and only if the following holds: in the first ( leftmost) position where a and b differ, the sequence a has a smaller element than the corresponding element in b .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of water tanks. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 6 ) \u2014 initial volumes of water in the water tanks, in liters. Because of large input, reading input as doubles is not recommended.",
    "output": "Print the lexicographically smallest sequence you can get. In the i - th line print the final volume of water in the i - th tank. Your answer is considered correct if the absolute or relative error of each a_ i does not exceed 10^ - 9 . Formally, let your answer be a_ 1, a_ 2, . . . , a_ n , and the jury' s answer be b_ 1, b_ 2, . . . , b_ n . Your answer is accepted if and only if | a_ i - b_ i| / max( 1, | b_ i| ) \u2264 10^ - 9 for each i .",
    "note": "In the first sample, you can get the sequence by applying the operation for subsegment [ 1, 3] . In the second sample, you can' t get any lexicographically smaller sequence.",
    "topics": [
      "data structures",
      "geometry",
      "greedy"
    ],
    "id": "1299C"
  },
  {
    "title": "Anu Has a Function",
    "url": "https://codeforces.com/problemset/problem/1299/A",
    "history": "Anu has created her own function f : f( x, y) = ( x | y) - y where | denotes the bitwise OR operation. For example, f( 11, 6) = ( 11| 6) - 6 = 15 - 6 = 9 . It can be proved that for any nonnegative numbers x and y value of f( x, y) is also nonnegative. She would like to research more about this function and has created multiple problems for herself. But she isn' t able to solve all of them and needs your help. Here is one of these problems. A value of an array [ a_ 1, a_ 2, . . . , a_ n] is defined as f( f( . . . f( f( a_ 1, a_ 2) , a_ 3) , . . . a_ n- 1) , a_ n) ( see notes) . You are given an array with not necessarily distinct elements. How should you reorder its elements so that the value of the array is maximal possible?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . Elements of the array are not guaranteed to be different.",
    "output": "Output n integers, the reordering of the array with maximum value. If there are multiple answers, print any.",
    "note": "In the first testcase, value of the array [ 11, 6, 4, 0] is f( f( f( 11, 6) , 4) , 0) = f( f( 9, 4) , 0) = f( 9, 0) = 9 . [ 11, 4, 0, 6] is also a valid answer.",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1299A"
  },
  {
    "title": "Movie Fan",
    "url": "https://codeforces.com/problemset/problem/1297/F",
    "history": "Recently, Polycarp has been a fan of cinema novelties and is trying not to miss them! In the near future, n new movies will be released: the i - th of them will be airing from the day a_ i and to the day b_ i . This means that if Polycarp wants to watch the i - th movie in the cinema, he must do so in the period from a_ i to b_ i inclusive. If perhaps Polycarp will not have the opportunity to watch a movie in a cinema, he can then do it after day b_ i by watching it using an online service. Of course, this is an undesirable outcome for Polycarp because the whole world will have time to discuss this movie on social networks! Polycarp can watch no more than m movies per day. Help Polycarp find a movie- watching schedule such that every movie will be watched in the cinema. If such a schedule does not exist, then Polycarp wants to watch movies so that: for each movie that he doesn' t have time to watch in the cinema, we will find the number of days between the end of its airing and the day when Polycarpus watches the movie, the maximum of the values from the previous point should be as small as possible.",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The following are descriptions of the t test cases. The first line of each test case contains two integers n and m ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 m \u2264 10^ 9 ) \u2014 the number of movies and the maximum number of movies that Polycarp can view per day. In the next n lines, the movies themselves are described, one per line, by a pair of integers a_ i , b_ i ( 1 \u2264 a_ i \u2264 b_ i \u2264 10^ 9 ) \u2014 the first and last airing days for the i - th movie. It is guaranteed that the sum of the values n for all test cases in the input does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print t answers to given test cases in the order in which they appear in the input: the i - th answer should consist of two lines. Print the integer d in the first line of each test case answer: d= 0 , if there is a schedule such that all movies are watched during airing, d> 0 , if such a schedule does not exist \u2014 in this case, d is equal to the minimum value of maximum among all the watching \" delays\" after the end of airing. In the second line of the answer to each test case, print n positive integers t_ 1, t_ 2, . . . , t_ n , where t_ i is the number of the day when Polycarp needs to watch the i - th movie in the optimal schedule. If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "*special",
      "data structures",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1297F"
  },
  {
    "title": "Bonus Distribution ",
    "url": "https://codeforces.com/problemset/problem/1297/D",
    "history": "For the first time, Polycarp' s startup ended the year with a profit! Now he is about to distribute k burles as a bonus among n employees. It is known that the current salary of the i - th employee is a_ i and all the values of a_ i in the company are different. Polycarp wants to distribute the k burles between n employees so this month the i - th employee will be paid not a_ i , but a_ i+ d_ i ( d_ i \u2265 0 , d_ i is an integer) , where d_ i is the bonus for the i - th employee. Of course, d_ 1+ d_ 2+ . . . + d_ n= k . Polycarp will follow two rules for choosing the values d_ i : the relative order of the salaries should not be changed: the employee with originally the highest salary ( a_ i is the maximum) should have the highest total payment after receiving their bonus ( a_ i+ d_ i is also the maximum) , the employee whose salary was originally the second- largest should receive the second- largest total payment after receiving their bonus and so on. to emphasize that annual profit is a group effort, Polycarp wants to minimize the maximum total payment to an employee ( i. e minimize the maximum value of a_ i+ d_ i ) . Help Polycarp decide the non- negative integer bonuses d_ i such that: their sum is k , for each employee, the number of those who receive strictly more than them remains unchanged ( that is, if you sort employees by a_ i and by a_ i+ d_ i , you get the same order of employees) , all a_ i + d_ i are different, the maximum of the values a_ i+ d_ i is the minimum possible. Help Polycarp and print any of the possible answers d_ 1, d_ 2, . . . , d_ n .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then t test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 5 , 1 \u2264 k \u2264 10^ 9 ) \u2014 the number of employees and the total bonus. The second line of each test case contains n different integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the current salary of the i - th employee. It is guaranteed that the sum of all n values in the input does not exceed 10^ 5 .",
    "output": "Print the answers to t test cases in the order they appear in the input. Print each answer as a sequence of non- negative integers d_ 1, d_ 2, . . . , d_ n . If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "*special",
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1297D"
  },
  {
    "title": "Dream Team",
    "url": "https://codeforces.com/problemset/problem/1297/C",
    "history": "Polycarp is the project manager in the IT- company. Right now, he needs to choose developers for his team to start a new project. The company has n developers \" on the bench\" ( i. e not involved in other projects) . Polycarp assessed the skills of each of them: a_ i ( - 10^ 4 \u2264 a_ i \u2264 10^ 4 ) \u2014 an integer characteristic of the i - th developer. This value can be either positive, zero or even negative ( some developers cause distractions) . After Polycarp chooses a subset of developers for his team, the strength of the team will be determined by the sum of a_ i values for all selected developers. Polycarp fears that if he chooses a team in such a way that maximizes the sum of the characteristics of a_ i , other managers may find this unacceptable. For this reason, he plans to create such a team that the sum of the a_ i values for it is strictly less than the maximum possible value. Help Polycarp choose any team that: the sum of the characteristics a_ i for all members of the selected team is strictly less than the maximum value that can be achieved by choosing the team in some other way and at the same time, the sum of the characteristics of a_ i for all members of the selected team is the greatest possible. If, following the requirements above, you can select a team in several ways, then just find any of them. It' s guaranteed that the sum of the characteristics in the desired subset is strictly positive ( i. e. Polycarp can always choose a non- empty team) .",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases. Then t test cases follow. Each test case begins with a line containing one integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the number of developers \" on the bench\" . The second line of a test case contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 4 \u2264 a_ i \u2264 10^ 4 ) \u2014 the characteristics of the n developers. It is guaranteed that the characteristics are such that the sum of the characteristics in the answer is strictly positive. It is guaranteed that the sum of n over all test cases in the input doesn' t exceed 10^ 5 .",
    "output": "Print the answers for the given t test cases in the order that they appear in the input. In the first line of each answer, print a positive integer s \u2014 the sum of the characteristics in the desired subset. The second line should contain only the characters 0 and 1 and match the answer: the character in the i - th position should be equal to 1 if the i - th developer belongs to the team; the character in the i - th position should be equal to 0 if the i - th developer does not belong to the team. If there are several answers, print any of them.",
    "note": "In the first test case, the maximum subset a_ 1, a_ 3, a_ 5 has a sum equal to 3 , so Polycarp should choose a team with the maximum total sum which is less than 3 . In the second test case, the maximum subset a_ 1, a_ 2 has a sum equal to 12 , so Polycarp should choose a team with the maximum total sum which is less than 12 . In the third test case, the maximum subset a_ 1, a_ 3 has a sum equal to 9 . In the fourth test case, the maximum subset a_ 1, a_ 2 has a sum equal to 8 . In the fifth test case, there are several subsets with a maximum sum equal to 3 , so Polycarp should choose a team with a lower total sum.",
    "topics": [
      "*special",
      "greedy"
    ],
    "id": "1297C"
  },
  {
    "title": "Berland Beauty",
    "url": "https://codeforces.com/problemset/problem/1296/F",
    "history": "There are n railway stations in Berland. They are connected to each other by n- 1 railway sections. The railway network is connected, i. e. can be represented as an undirected tree. You have a map of that network, so for each railway section you know which stations it connects. Each of the n- 1 sections has some integer value of the scenery beauty. However, these values are not marked on the map and you don' t know them. All these values are from 1 to 10^ 6 inclusive. You asked m passengers some questions: the j - th one told you three values: his departure station a_ j ; his arrival station b_ j ; minimum scenery beauty along the path from a_ j to b_ j ( the train is moving along the shortest path from a_ j to b_ j ) . You are planning to update the map and set some value f_ i on each railway section \u2014 the scenery beauty. The passengers' answers should be consistent with these values. Print any valid set of values f_ 1, f_ 2, . . . , f_ n- 1 , which the passengers' answer is consistent with or report that it doesn' t exist.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 5000 ) \u2014 the number of railway stations in Berland. The next n- 1 lines contain descriptions of the railway sections: the i - th section description is two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n, x_ i y_ i ) , where x_ i and y_ i are the indices of the stations which are connected by the i - th railway section. All the railway sections are bidirected. Each station can be reached from any other station by the railway. The next line contains a single integer m ( 1 \u2264 m \u2264 5000 ) \u2014 the number of passengers which were asked questions. Then m lines follow, the j - th line contains three integers a_ j , b_ j and g_ j ( 1 \u2264 a_ j, b_ j \u2264 n ; a_ j b_ j ; 1 \u2264 g_ j \u2264 10^ 6 ) \u2014 the departure station, the arrival station and the minimum scenery beauty along his path.",
    "output": "If there is no answer then print a single integer - 1. Otherwise, print n- 1 integers f_ 1, f_ 2, . . . , f_ n- 1 ( 1 \u2264 f_ i \u2264 10^ 6 ) , where f_ i is some valid scenery beauty along the i - th railway section. If there are multiple answers, you can print any of them.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "greedy",
      "sortings",
      "trees"
    ],
    "id": "1296F"
  },
  {
    "title": "String Coloring (easy version)",
    "url": "https://codeforces.com/problemset/problem/1296/E1",
    "history": "This is an easy version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different. You are given a string s consisting of n lowercase Latin letters. You have to color all its characters one of the two colors ( each character to exactly one color, the same letters can be colored the same or different colors, i. e. you can choose exactly one color for each index in s ) . After coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary ( possibly, zero) number of times. The goal is to make the string sorted, i. e. all characters should be in alphabetical order. Your task is to say if it is possible to color the given string so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.",
    "input": "The first line of the input contains one integer n ( 1 \u2264 n \u2264 200 ) \u2014 the length of s . The second line of the input contains the string s consisting of exactly n lowercase Latin letters.",
    "output": "If it is impossible to color the given string so that after coloring it can become sorted by some sequence of swaps, print \" NO\" ( without quotes) in the first line. Otherwise, print \" YES\" in the first line and any correct coloring in the second line ( the coloring is the string consisting of n characters, the i - th character should be ' 0' if the i - th character is colored the first color and ' 1' otherwise) .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "dp",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1296E1"
  },
  {
    "title": "Fight with Monsters",
    "url": "https://codeforces.com/problemset/problem/1296/D",
    "history": "There are n monsters standing in a row numbered from 1 to n . The i - th monster has h_ i health points ( hp) . You have your attack power equal to a hp and your opponent has his attack power equal to b hp. You and your opponent are fighting these monsters. Firstly, you and your opponent go to the first monster and fight it till his death, then you and your opponent go the second monster and fight it till his death, and so on. A monster is considered dead if its hp is less than or equal to 0 . The fight with a monster happens in turns. You hit the monster by a hp. If it is dead after your hit, you gain one point and you both proceed to the next monster. Your opponent hits the monster by b hp. If it is dead after his hit, nobody gains a point and you both proceed to the next monster. You have some secret technique to force your opponent to skip his turn. You can use this technique at most k times in total ( for example, if there are two monsters and k= 4 , then you can use the technique 2 times on the first monster and 1 time on the second monster, but not 2 times on the first monster and 3 times on the second monster) . Your task is to determine the maximum number of points you can gain if you use the secret technique optimally.",
    "input": "The first line of the input contains four integers n, a, b and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5, 1 \u2264 a, b, k \u2264 10^ 9 ) \u2014 the number of monsters, your attack power, the opponent' s attack power and the number of times you can use the secret technique. The second line of the input contains n integers h_ 1, h_ 2, . . . , h_ n ( 1 \u2264 h_ i \u2264 10^ 9 ) , where h_ i is the health points of the i - th monster.",
    "output": "Print one integer \u2014 the maximum number of points you can gain if you use the secret technique optimally.",
    "note": "",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1296D"
  },
  {
    "title": "Obtain The String",
    "url": "https://codeforces.com/problemset/problem/1295/C",
    "history": "You are given two strings s and t consisting of lowercase Latin letters. Also you have a string z which is initially empty. You want string z to be equal to string t . You can perform the following operation to achieve this: append any subsequence of s at the end of string z . A subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements. For example, if z = ac , s = abcde , you may turn z into following strings in one operation: z = acace ( if we choose subsequence ace ) ; z = acbcd ( if we choose subsequence bcd ) ; z = acbce ( if we choose subsequence bce ) . Note that after this operation string s doesn' t change. Calculate the minimum number of such operations to turn string z into string t .",
    "input": "The first line contains the integer T ( 1 \u2264 T \u2264 100 ) \u2014 the number of test cases. The first line of each testcase contains one string s ( 1 \u2264 | s| \u2264 10^ 5 ) consisting of lowercase Latin letters. The second line of each testcase contains one string t ( 1 \u2264 | t| \u2264 10^ 5 ) consisting of lowercase Latin letters. It is guaranteed that the total length of all strings s and t in the input does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each testcase, print one integer \u2014 the minimum number of operations to turn string z into string t . If it' s impossible print - 1 .",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "strings"
    ],
    "id": "1295C"
  },
  {
    "title": "Display The Number",
    "url": "https://codeforces.com/problemset/problem/1295/A",
    "history": "You have a large electronic screen which can display up to 998244353 decimal digits. The digits are displayed in the same way as on different electronic alarm clocks: each place for a digit consists of 7 segments which can be turned on and off to compose different digits. The following picture describes how you can display all 10 decimal digits: As you can see, different digits may require different number of segments to be turned on. For example, if you want to display 1 , you have to turn on 2 segments of the screen, and if you want to display 8 , all 7 segments of some place to display a digit should be turned on. You want to display a really large integer on the screen. Unfortunately, the screen is bugged: no more than n segments can be turned on simultaneously. So now you wonder what is the greatest integer that can be displayed by turning on no more than n segments. Your program should be able to process t different test cases.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases in the input. Then the test cases follow, each of them is represented by a separate line containing one integer n ( 2 \u2264 n \u2264 10^ 5 ) \u2014 the maximum number of segments that can be turned on in the corresponding testcase. It is guaranteed that the sum of n over all test cases in the input does not exceed 10^ 5 .",
    "output": "For each test case, print the greatest integer that can be displayed by turning on no more than n segments of the screen. Note that the answer may not fit in the standard 32 - bit or 64 - bit integral data type.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1295A"
  },
  {
    "title": "Three Paths on a Tree",
    "url": "https://codeforces.com/problemset/problem/1294/F",
    "history": "You are given an unweighted tree with n vertices. Recall that a tree is a connected undirected graph without cycles. Your task is to choose three distinct vertices a, b, c on this tree such that the number of edges which belong to at least one of the simple paths between a and b , b and c , or a and c is the maximum possible. See the notes section for a better understanding. The simple path is the path that visits each vertex at most once.",
    "input": "The first line contains one integer number n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of vertices in the tree. Next n - 1 lines describe the edges of the tree in form a_ i, b_ i ( 1 \u2264 a_ i , b_ i \u2264 n , a_ i b_ i ) . It is guaranteed that given graph is a tree.",
    "output": "In the first line print one integer res \u2014 the maximum number of edges which belong to at least one of the simple paths between a and b , b and c , or a and c . In the second line print three integers a, b, c such that 1 \u2264 a, b, c \u2264 n and a , b c, a c . If there are several answers, you can print any.",
    "note": "The picture corresponding to the first example ( and another one correct answer) : If you choose vertices 1, 5, 6 then the path between 1 and 5 consists of edges ( 1, 2) , ( 2, 3) , ( 3, 4) , ( 4, 5) , the path between 1 and 6 consists of edges ( 1, 2) , ( 2, 3) , ( 3, 4) , ( 4, 6) and the path between 5 and 6 consists of edges ( 4, 5) , ( 4, 6) . The union of these paths is ( 1, 2) , ( 2, 3) , ( 3, 4) , ( 4, 5) , ( 4, 6) so the answer is 5 . It can be shown that there is no better answer.",
    "topics": [
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1294F"
  },
  {
    "title": "Obtain a Permutation",
    "url": "https://codeforces.com/problemset/problem/1294/E",
    "history": "You are given a rectangular matrix of size n \u00d7 m consisting of integers from 1 to 2 \u00b7 10^ 5 . In one move, you can: choose any element of the matrix and change its value to any integer between 1 and n \u00b7 m , inclusive; take any column and shift it one cell up cyclically ( see the example of such cyclic shift below) . A cyclic shift is an operation such that you choose some j ( 1 \u2264 j \u2264 m ) and set a_ 1, j : = a_ 2, j, a_ 2, j : = a_ 3, j, . . . , a_ n, j : = a_ 1, j simultaneously. Example of cyclic shift of the first column You want to perform the minimum number of moves to make this matrix look like this: In other words, the goal is to obtain the matrix, where a_ 1, 1 = 1, a_ 1, 2 = 2, . . . , a_ 1, m = m, a_ 2, 1 = m + 1, a_ 2, 2 = m + 2, . . . , a_ n, m = n \u00b7 m ( i. e. a_ i, j = ( i - 1) \u00b7 m + j ) with the minimum number of moves performed.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5, n \u00b7 m \u2264 2 \u00b7 10^ 5 ) \u2014 the size of the matrix. The next n lines contain m integers each. The number at the line i and position j is a_ i, j ( 1 \u2264 a_ i, j\u2264 2 \u00b7 10^ 5 ) .",
    "output": "Print one integer \u2014 the minimum number of moves required to obtain the matrix, where a_ 1, 1 = 1, a_ 1, 2 = 2, . . . , a_ 1, m = m, a_ 2, 1 = m + 1, a_ 2, 2 = m + 2, . . . , a_ n, m = n \u00b7 m ( a_ i, j = ( i - 1) m + j ) .",
    "note": "In the first example, you can set a_ 1, 1 : = 7, a_ 1, 2 : = 8 and a_ 1, 3 : = 9 then shift the first, the second and the third columns cyclically, so the answer is 6 . It can be shown that you cannot achieve a better answer. In the second example, the matrix is already good so the answer is 0 . In the third example, it is enough to shift the second column cyclically twice to obtain a good matrix, so the answer is 2 .",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1294E"
  },
  {
    "title": "MEX maximizing",
    "url": "https://codeforces.com/problemset/problem/1294/D",
    "history": "Recall that MEX of an array is a minimum non- negative integer that does not belong to the array. Examples: for the array [ 0, 0, 1, 0, 2] MEX equals to 3 because numbers 0, 1 and 2 are presented in the array and 3 is the minimum non- negative integer not presented in the array; for the array [ 1, 2, 3, 4] MEX equals to 0 because 0 is the minimum non- negative integer not presented in the array; for the array [ 0, 1, 4, 3] MEX equals to 2 because 2 is the minimum non- negative integer not presented in the array. You are given an empty array a= [ ] ( in other words, a zero- length array) . You are also given a positive integer x . You are also given q queries. The j - th query consists of one integer y_ j and means that you have to append one element y_ j to the array. The array length increases by 1 after a query. In one move, you can choose any index i and set a_ i : = a_ i + x or a_ i : = a_ i - x ( i. e. increase or decrease any element of the array by x ) . The only restriction is that a_ i cannot become negative. Since initially the array is empty, you can perform moves only after the first query. You have to maximize the MEX ( minimum excluded) of the array if you can perform any number of such operations ( you can even perform the operation multiple times with one element) . You have to find the answer after each of q queries ( i. e. the j - th answer corresponds to the array of length j ) . Operations are discarded before each query. I. e. the array a after the j - th query equals to [ y_ 1, y_ 2, . . . , y_ j] .",
    "input": "The first line of the input contains two integers q, x ( 1 \u2264 q, x \u2264 4 \u00b7 10^ 5 ) \u2014 the number of queries and the value of x . The next q lines describe queries. The j - th query consists of one integer y_ j ( 0 \u2264 y_ j \u2264 10^ 9 ) and means that you have to append one element y_ j to the array.",
    "output": "Print the answer to the initial problem after each query \u2014 for the query j print the maximum value of MEX after first j queries. Note that queries are dependent ( the array changes after each query) but operations are independent between queries.",
    "note": "In the first example: After the first query, the array is a= [ 0] : you don' t need to perform any operations, maximum possible MEX is 1 . After the second query, the array is a= [ 0, 1] : you don' t need to perform any operations, maximum possible MEX is 2 . After the third query, the array is a= [ 0, 1, 2] : you don' t need to perform any operations, maximum possible MEX is 3 . After the fourth query, the array is a= [ 0, 1, 2, 2] : you don' t need to perform any operations, maximum possible MEX is 3 ( you can' t make it greater with operations) . After the fifth query, the array is a= [ 0, 1, 2, 2, 0] : you can perform a[ 4] : = a[ 4] + 3 = 3 . The array changes to be a= [ 0, 1, 2, 2, 3] . Now MEX is maximum possible and equals to 4 . After the sixth query, the array is a= [ 0, 1, 2, 2, 0, 0] : you can perform a[ 4] : = a[ 4] + 3 = 0 + 3 = 3 . The array changes to be a= [ 0, 1, 2, 2, 3, 0] . Now MEX is maximum possible and equals to 4 . After the seventh query, the array is a= [ 0, 1, 2, 2, 0, 0, 10] . You can perform the following operations: a[ 3] : = a[ 3] + 3 = 2 + 3 = 5 , a[ 4] : = a[ 4] + 3 = 0 + 3 = 3 , a[ 5] : = a[ 5] + 3 = 0 + 3 = 3 , a[ 5] : = a[ 5] + 3 = 3 + 3 = 6 , a[ 6] : = a[ 6] - 3 = 10 - 3 = 7 , a[ 6] : = a[ 6] - 3 = 7 - 3 = 4 . The resulting array will be a= [ 0, 1, 2, 5, 3, 6, 4] . Now MEX is maximum possible and equals to 7 .",
    "topics": [
      "data structures",
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1294D"
  },
  {
    "title": "Product of Three Numbers",
    "url": "https://codeforces.com/problemset/problem/1294/C",
    "history": "You are given one integer number n . Find three distinct integers a, b, c such that 2 \u2264 a, b, c and a \u00b7 b \u00b7 c = n or say that it is impossible to do it. If there are several answers, you can print any. You have to answer t independent test cases.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The next n lines describe test cases. The i - th test case is given on a new line as one integer n ( 2 \u2264 n \u2264 10^ 9 ) .",
    "output": "For each test case, print the answer on it. Print \" NO\" if it is impossible to represent n as a \u00b7 b \u00b7 c for some distinct integers a, b, c such that 2 \u2264 a, b, c . Otherwise, print \" YES\" and any possible such representation.",
    "note": "",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1294C"
  },
  {
    "title": "JOE is on TV!",
    "url": "https://codeforces.com/problemset/problem/1293/B",
    "history": "3R2 - Standby for ActionOur dear Cafe' s owner, JOE Miller, will soon take part in a new game TV- show \" 1 vs. n \" ! The game goes in rounds, where in each round the host asks JOE and his opponents a common question. All participants failing to answer are eliminated. The show ends when only JOE remains ( we assume that JOE never answers a question wrong! ) . For each question JOE answers, if there are s ( s > 0 ) opponents remaining and t ( 0 \u2264 t \u2264 s ) of them make a mistake on it, JOE receives t/ s dollars, and consequently there will be s - t opponents left for the next question. JOE wonders what is the maximum possible reward he can receive in the best possible scenario. Yet he has little time before show starts, so can you help him answering it instead?",
    "input": "The first and single line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) , denoting the number of JOE' s opponents in the show.",
    "output": "Print a number denoting the maximum prize ( in dollars) JOE could have. Your answer will be considered correct if it' s absolute or relative error won' t exceed 10^ - 4 . In other words, if your answer is a and the jury answer is b , then it must hold that | a - b| / max( 1, b) \u2264 10^ - 4 .",
    "note": "In the second example, the best scenario would be: one contestant fails at the first question, the other fails at the next one. The total reward will be 1/ 2 + 1/ 1 = 1. 5 dollars.",
    "topics": [
      "combinatorics",
      "greedy",
      "math"
    ],
    "id": "1293B"
  },
  {
    "title": "Rin and The Unknown Flower",
    "url": "https://codeforces.com/problemset/problem/1292/E",
    "history": "MisoilePunch\u266a - \u5f69This is an interactive problem! On a normal day at the hidden office in A. R. C. Markland- N, Rin received an artifact, given to her by the exploration captain Sagar. After much analysis, she now realizes that this artifact contains data about a strange flower, which has existed way before the New Age. However, the information about its chemical structure has been encrypted heavily. The chemical structure of this flower can be represented as a string p . From the unencrypted papers included, Rin already knows the length n of that string, and she can also conclude that the string contains at most three distinct letters: \" C\" ( as in Carbon) , \" H\" ( as in Hydrogen) , and \" O\" ( as in Oxygen) . At each moment, Rin can input a string s of an arbitrary length into the artifact' s terminal, and it will return every starting position of s as a substring of p . However, the artifact has limited energy and cannot be recharged in any way, since the technology is way too ancient and is incompatible with any current A. R. C. ' s devices. To be specific: The artifact only contains 7/ 5 units of energy. For each time Rin inputs a string s of length t , the artifact consumes 1/ t^ 2 units of energy. If the amount of energy reaches below zero, the task will be considered failed immediately, as the artifact will go black forever. Since the artifact is so precious yet fragile, Rin is very nervous to attempt to crack the final data. Can you give her a helping hand? InteractionThe interaction starts with a single integer t ( 1 \u2264 t \u2264 500 ) , the number of test cases. The interaction for each testcase is described below: First, read an integer n ( 4 \u2264 n \u2264 50 ) , the length of the string p . Then you can make queries of type \" ? s\" ( 1 \u2264 | s| \u2264 n ) to find the occurrences of s as a substring of p . After the query, you need to read its result as a series of integers in a line: The first integer k denotes the number of occurrences of s as a substring of p ( - 1 \u2264 k \u2264 n ) . If k = - 1 , it means you have exceeded the energy limit or printed an invalid query, and you need to terminate immediately, to guarantee a \" Wrong answer\" verdict, otherwise you might get an arbitrary verdict because your solution will continue to read from a closed stream. The following k integers a_ 1, a_ 2, . . . , a_ k ( 1 \u2264 a_ 1 < a_ 2 < . . . < a_ k \u2264 n ) denote the starting positions of the substrings that match the string s . When you find out the string p , print \" ! p \" to finish a test case. This query doesn' t consume any energy. The interactor will return an integer 1 or 0 . If the interactor returns 1 , you can proceed to the next test case, or terminate the program if it was the last testcase. If the interactor returns 0 , it means that your guess is incorrect, and you should to terminate to guarantee a \" Wrong answer\" verdict. Note that in every test case the string p is fixed beforehand and will not change during the queries, i. e. the interactor is not adaptive. After printing any query do not forget to print end of line and flush the output. Otherwise, you might get Idleness limit exceeded. To do this, use: fflush( stdout) or cout. flush( ) in C+ + ; System. out. flush( ) in Java; flush( output) in Pascal; stdout. flush( ) in Python; see the documentation for other languages. HacksFor hack, use the following format. Note that you can only hack with one test case: The first line should contain a single integer t ( t = 1 ) . The second line should contain an integer n ( 4 \u2264 n \u2264 50 ) \u2014 the string' s size. The third line should contain a string of size n , consisting of characters \" C\" , \" H\" and \" O\" only. This is the string contestants will have to find out.",
    "input": "",
    "output": "",
    "note": "Note that the example interaction contains extra empty lines so that it' s easier to read. The real interaction doesn' t contain any empty lines and you shouldn' t print any extra empty lines as well.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "interactive",
      "math"
    ],
    "id": "1292E"
  },
  {
    "title": "Chaotic V.",
    "url": "https://codeforces.com/problemset/problem/1292/D",
    "history": "\u00c6sir - CHAOS \u00c6sir - V. \" Everything has been planned out. No more hidden concerns. The condition of Cytus is also perfect. The time right now. . . . . . 00: 01: 12. . . . . . It' s time. \" The emotion samples are now sufficient. After almost 3 years, it' s time for Ivy to awake her bonded sister, Vanessa. The system inside A. R. C. ' s Library core can be considered as an undirected graph with infinite number of processing nodes, numbered with all positive integers ( 1, 2, 3, . . . ) . The node with a number x ( x > 1 ) , is directly connected with a node with number x/ f( x) , with f( x) being the lowest prime divisor of x . Vanessa' s mind is divided into n fragments. Due to more than 500 years of coma, the fragments have been scattered: the i - th fragment is now located at the node with a number k_ i! ( a factorial of k_ i ) . To maximize the chance of successful awakening, Ivy decides to place the samples in a node P , so that the total length of paths from each fragment to P is smallest possible. If there are multiple fragments located at the same node, the path from that node to P needs to be counted multiple times. In the world of zeros and ones, such a requirement is very simple for Ivy. Not longer than a second later, she has already figured out such a node. But for a mere human like you, is this still possible? For simplicity, please answer the minimal sum of paths' lengths from every fragment to the emotion samples' assembly node P .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 number of fragments of Vanessa' s mind. The second line contains n integers: k_ 1, k_ 2, . . . , k_ n ( 0 \u2264 k_ i \u2264 5000 ) , denoting the nodes where fragments of Vanessa' s mind are located: the i - th fragment is at the node with a number k_ i! .",
    "output": "Print a single integer, denoting the minimal sum of path from every fragment to the node with the emotion samples ( a. k. a. node P ) . As a reminder, if there are multiple fragments at the same node, the distance from that node to P needs to be counted multiple times as well.",
    "note": "Considering the first 24 nodes of the system, the node network will look as follows ( the nodes 1! , 2! , 3! , 4! are drawn bold) : For the first example, Ivy will place the emotion samples at the node 1 . From here: The distance from Vanessa' s first fragment to the node 1 is 1 . The distance from Vanessa' s second fragment to the node 1 is 0 . The distance from Vanessa' s third fragment to the node 1 is 4 . The total length is 5 . For the second example, the assembly node will be 6 . From here: The distance from Vanessa' s first fragment to the node 6 is 0 . The distance from Vanessa' s second fragment to the node 6 is 2 . The distance from Vanessa' s third fragment to the node 6 is 2 . The distance from Vanessa' s fourth fragment to the node 6 is again 2 . The total path length is 6 .",
    "topics": [
      "dp",
      "graphs",
      "greedy",
      "math",
      "number theory",
      "trees"
    ],
    "id": "1292D"
  },
  {
    "title": "Xenon's Attack on the Gangs",
    "url": "https://codeforces.com/problemset/problem/1292/C",
    "history": "INSPION FullBand Master - INSPION INSPION - IOLITE- SUNSTONEOn another floor of the A. R. C. Markland- N, the young man Simon \" Xenon\" Jackson, takes a break after finishing his project early ( as always) . Having a lot of free time, he decides to put on his legendary hacker \" X\" instinct and fight against the gangs of the cyber world. His target is a network of n small gangs. This network contains exactly n - 1 direct links, each of them connecting two gangs together. The links are placed in such a way that every pair of gangs is connected through a sequence of direct links. By mining data, Xenon figured out that the gangs used a form of cross- encryption to avoid being busted: every link was assigned an integer from 0 to n - 2 such that all assigned integers are distinct and every integer was assigned to some link. If an intruder tries to access the encrypted data, they will have to surpass S password layers, with S being defined by the following formula: S = \u2211_ 1 \u2264 u < v \u2264 n mex( u, v) Here, mex( u, v) denotes the smallest non- negative integer that does not appear on any link on the unique simple path from gang u to gang v . Xenon doesn' t know the way the integers are assigned, but it' s not a problem. He decides to let his AI' s instances try all the passwords on his behalf, but before that, he needs to know the maximum possible value of S , so that the AIs can be deployed efficiently. Now, Xenon is out to write the AI scripts, and he is expected to finish them in two hours. Can you find the maximum possible S before he returns?",
    "input": "The first line contains an integer n ( 2 \u2264 n \u2264 3000 ) , the number of gangs in the network. Each of the next n - 1 lines contains integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n ; u_ i = \u0338 v_ i ) , indicating there' s a direct link between gangs u_ i and v_ i . It' s guaranteed that links are placed in such a way that each pair of gangs will be connected by exactly one simple path.",
    "output": "Print the maximum possible value of S \u2014 the number of password layers in the gangs' network.",
    "note": "In the first example, one can achieve the maximum S with the following assignment: With this assignment, mex( 1, 2) = 0 , mex( 1, 3) = 2 and mex( 2, 3) = 1 . Therefore, S = 0 + 2 + 1 = 3 . In the second example, one can achieve the maximum S with the following assignment: With this assignment, all non- zero mex value are listed below: mex( 1, 3) = 1 mex( 1, 5) = 2 mex( 2, 3) = 1 mex( 2, 5) = 2 mex( 3, 4) = 1 mex( 4, 5) = 3 Therefore, S = 1 + 2 + 1 + 2 + 1 + 3 = 10 .",
    "topics": [
      "combinatorics",
      "dfs and similar",
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1292C"
  },
  {
    "title": "Aroma's Search",
    "url": "https://codeforces.com/problemset/problem/1292/B",
    "history": "THE SxPLAY KIV\u039b - \u6f02\u6d41 KIV\u039b Nikki Simmons - PerspectivesWith a new body, our idol Aroma White ( or should we call her Kaori Minamiya? ) begins to uncover her lost past through the OS space. The space can be considered a 2D plane, with an infinite number of data nodes, indexed from 0 , with their coordinates defined as follows: The coordinates of the 0 - th node is ( x_ 0, y_ 0) For i > 0 , the coordinates of i - th node is ( a_ x \u00b7 x_ i- 1 + b_ x, a_ y \u00b7 y_ i- 1 + b_ y) Initially Aroma stands at the point ( x_ s, y_ s) . She can stay in OS space for at most t seconds, because after this time she has to warp back to the real world. She doesn' t need to return to the entry point ( x_ s, y_ s) to warp home. While within the OS space, Aroma can do the following actions: From the point ( x, y) , Aroma can move to one of the following points: ( x- 1, y) , ( x+ 1, y) , ( x, y- 1) or ( x, y+ 1) . This action requires 1 second. If there is a data node at where Aroma is staying, she can collect it. We can assume this action costs 0 seconds. Of course, each data node can be collected at most once. Aroma wants to collect as many data as possible before warping back. Can you help her in calculating the maximum number of data nodes she could collect within t seconds?",
    "input": "The first line contains integers x_ 0 , y_ 0 , a_ x , a_ y , b_ x , b_ y ( 1 \u2264 x_ 0, y_ 0 \u2264 10^ 16 , 2 \u2264 a_ x, a_ y \u2264 100 , 0 \u2264 b_ x, b_ y \u2264 10^ 16 ) , which define the coordinates of the data nodes. The second line contains integers x_ s , y_ s , t ( 1 \u2264 x_ s, y_ s, t \u2264 10^ 16 ) \u2013 the initial Aroma' s coordinates and the amount of time available.",
    "output": "Print a single integer \u2014 the maximum number of data nodes Aroma can collect within t seconds.",
    "note": "In all three examples, the coordinates of the first 5 data nodes are ( 1, 1) , ( 3, 3) , ( 7, 9) , ( 15, 27) and ( 31, 81) ( remember that nodes are numbered from 0 ) . In the first example, the optimal route to collect 3 nodes is as follows: Go to the coordinates ( 3, 3) and collect the 1 - st node. This takes | 3 - 2| + | 3 - 4| = 2 seconds. Go to the coordinates ( 1, 1) and collect the 0 - th node. This takes | 1 - 3| + | 1 - 3| = 4 seconds. Go to the coordinates ( 7, 9) and collect the 2 - nd node. This takes | 7 - 1| + | 9 - 1| = 14 seconds. In the second example, the optimal route to collect 2 nodes is as follows: Collect the 3 - rd node. This requires no seconds. Go to the coordinates ( 7, 9) and collect the 2 - th node. This takes | 15 - 7| + | 27 - 9| = 26 seconds. In the third example, Aroma can' t collect any nodes. She should have taken proper rest instead of rushing into the OS space like that.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "geometry",
      "greedy",
      "implementation"
    ],
    "id": "1292B"
  },
  {
    "title": "Array Sharpening",
    "url": "https://codeforces.com/problemset/problem/1291/B",
    "history": "You' re given an array a_ 1, . . . , a_ n of n non- negative integers. Let' s call it sharpened if and only if there exists an integer 1 \u2264 k \u2264 n such that a_ 1 < a_ 2 < . . . < a_ k and a_ k > a_ k+ 1 > . . . > a_ n . In particular, any strictly increasing or strictly decreasing array is sharpened. For example: The arrays [ 4] , [ 0, 1] , [ 12, 10, 8] and [ 3, 11, 15, 9, 7, 4] are sharpened; The arrays [ 2, 8, 2, 8, 6, 5] , [ 0, 1, 1, 0] and [ 2, 5, 6, 9, 8, 8] are not sharpened. You can do the following operation as many times as you want: choose any strictly positive element of the array, and decrease it by one. Formally, you can choose any i ( 1 \u2264 i \u2264 n ) such that a_ i> 0 and assign a_ i : = a_ i - 1 . Tell if it' s possible to make the given array sharpened using some number ( possibly zero) of these operations.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 15 000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3 \u00b7 10^ 5 ) . The second line of each test case contains a sequence of n non- negative integers a_ 1, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 9 ) . It is guaranteed that the sum of n over all test cases does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing \" Yes\" ( without quotes) if it' s possible to make the given array sharpened using the described operations, or \" No\" ( without quotes) otherwise.",
    "note": "In the first and the second test case of the first test, the given array is already sharpened. In the third test case of the first test, we can transform the array into [ 3, 11, 15, 9, 7, 4] ( decrease the first element 97 times and decrease the last element 4 times) . It is sharpened because 3 < 11 < 15 and 15 > 9 > 7 > 4 . In the fourth test case of the first test, it' s impossible to make the given array sharpened.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1291B"
  },
  {
    "title": "Even But Not Even",
    "url": "https://codeforces.com/problemset/problem/1291/A",
    "history": "Let' s define a number ebne ( even but not even) if and only if its sum of digits is divisible by 2 but the number itself is not divisible by 2 . For example, 13 , 1227 , 185217 are ebne numbers, while 12 , 2 , 177013 , 265918 are not. If you' re still unsure what ebne numbers are, you can look at the sample notes for more clarification. You are given a non- negative integer s , consisting of n digits. You can delete some digits ( they are not necessary consecutive/ successive) to make the given number ebne. You cannot change the order of the digits, that is, after deleting the digits the remaining digits collapse. The resulting number shouldn' t contain leading zeros. You can delete any number of digits between 0 ( do not delete any digits at all) and n- 1 . For example, if you are given s= 222373204424185217171912 then one of possible ways to make it ebne is: 222373204424185217171912 \u2192 2237344218521717191. The sum of digits of 2237344218521717191 is equal to 70 and is divisible by 2 , but number itself is not divisible by 2 : it means that the resulting number is ebne. Find any resulting number that is ebne. If it' s impossible to create an ebne number from the given number report about it.",
    "input": "The input consists of multiple test cases. The first line contains a single integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 3000 ) \u2014 the number of digits in the original number. The second line of each test case contains a non- negative integer number s , consisting of n digits. It is guaranteed that s does not contain leading zeros and the sum of n over all test cases does not exceed 3000 .",
    "output": "For each test case given in the input print the answer in the following format: If it is impossible to create an ebne number, print \" - 1\" ( without quotes) ; Otherwise, print the resulting number after deleting some, possibly zero, but not all digits. This number should be ebne. If there are multiple answers, you can print any of them. Note that answers with leading zeros or empty strings are not accepted. It' s not necessary to minimize or maximize the number of deleted digits.",
    "note": "In the first test case of the example, 1227 is already an ebne number ( as 1 + 2 + 2 + 7 = 12 , 12 is divisible by 2 , while in the same time, 1227 is not divisible by 2 ) so we don' t need to delete any digits. Answers such as 127 and 17 will also be accepted. In the second test case of the example, it is clearly impossible to create an ebne number from the given number. In the third test case of the example, there are many ebne numbers we can obtain by deleting, for example, 1 digit such as 17703 , 77013 or 17013 . Answers such as 1701 or 770 will not be accepted as they are not ebne numbers. Answer 013 will not be accepted as it contains leading zeroes. Explanation: 1 + 7 + 7 + 0 + 3 = 18 . As 18 is divisible by 2 while 17703 is not divisible by 2 , we can see that 17703 is an ebne number. Same with 77013 and 17013 ; 1 + 7 + 0 + 1 = 9 . Because 9 is not divisible by 2 , 1701 is not an ebne number; 7 + 7 + 0 = 14 . This time, 14 is divisible by 2 but 770 is also divisible by 2 , therefore, 770 is not an ebne number. In the last test case of the example, one of many other possible answers is given. Another possible answer is: 222373204424185217171912 \u2192 22237320442418521717191 ( delete the last digit) .",
    "topics": [
      "greedy",
      "math",
      "strings"
    ],
    "id": "1291A"
  },
  {
    "title": "Angry Students",
    "url": "https://codeforces.com/problemset/problem/1287/A",
    "history": "It' s a walking tour day in SIS. Winter, so t groups of students are visiting Torzhok. Streets of Torzhok are so narrow that students have to go in a row one after another. Initially, some students are angry. Let' s describe a group of students by a string of capital letters \" A\" and \" P\" : \" A\" corresponds to an angry student \" P\" corresponds to a patient student Such string describes the row from the last to the first student. Every minute every angry student throws a snowball at the next student. Formally, if an angry student corresponds to the character with index i in the string describing a group then they will throw a snowball at the student that corresponds to the character with index i+ 1 ( students are given from the last to the first student) . If the target student was not angry yet, they become angry. Even if the first ( the rightmost in the string) student is angry, they don' t throw a snowball since there is no one in front of them. Let' s look at the first example test. The row initially looks like this: PPAP. Then, after a minute the only single angry student will throw a snowball at the student in front of them, and they also become angry: PPAA. After that, no more students will become angry. Your task is to help SIS. Winter teachers to determine the last moment a student becomes angry for every group.",
    "input": "The first line contains a single integer t \u2014 the number of groups of students ( 1 \u2264 t \u2264 100 ) . The following 2t lines contain descriptions of groups of students. The description of the group starts with an integer k_ i ( 1 \u2264 k_ i \u2264 100 ) \u2014 the number of students in the group, followed by a string s_ i , consisting of k_ i letters \" A\" and \" P\" , which describes the i - th group of students.",
    "output": "For every group output single integer \u2014 the last moment a student becomes angry.",
    "note": "In the first test, after 1 minute the state of students becomes PPAA. After that, no new angry students will appear. In the second tets, state of students in the first group is: after 1 minute \u2014 AAPAAPPAAPPP after 2 minutes \u2014 AAAAAAPAAAPP after 3 minutes \u2014 AAAAAAAAAAAP after 4 minutes all 12 students are angry In the second group after 1 minute, all students are angry.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1287A"
  },
  {
    "title": "Numbers on Tree",
    "url": "https://codeforces.com/problemset/problem/1286/B",
    "history": "Evlampiy was gifted a rooted tree. The vertices of the tree are numbered from 1 to n . Each of its vertices also has an integer a_ i written on it. For each vertex i , Evlampiy calculated c_ i \u2014 the number of vertices j in the subtree of vertex i , such that a_ j < a_ i . Illustration for the second example, the first integer is a_ i and the integer in parentheses is c_ i After the new year, Evlampiy could not remember what his gift was! He remembers the tree and the values of c_ i , but he completely forgot which integers a_ i were written on the vertices. Help him to restore initial integers!",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2000) \u2014 the number of vertices in the tree. The next n lines contain descriptions of vertices: the i - th line contains two integers p_ i and c_ i ( 0 \u2264 p_ i \u2264 n ; 0 \u2264 c_ i \u2264 n- 1 ) , where p_ i is the parent of vertex i or 0 if vertex i is root, and c_ i is the number of vertices j in the subtree of vertex i , such that a_ j < a_ i . It is guaranteed that the values of p_ i describe a rooted tree with n vertices.",
    "output": "If a solution exists, in the first line print \" YES\" , and in the second line output n integers a_ i ( 1 \u2264 a_ i \u226410^ 9) . If there are several solutions, output any of them. One can prove that if there is a solution, then there is also a solution in which all a_ i are between 1 and 10^ 9 . If there are no solutions, print \" NO\" .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "data structures",
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1286B"
  },
  {
    "title": "Garland",
    "url": "https://codeforces.com/problemset/problem/1286/A",
    "history": "Vadim loves decorating the Christmas tree, so he got a beautiful garland as a present. It consists of n light bulbs in a single row. Each bulb has a number from 1 to n ( in arbitrary order) , such that all the numbers are distinct. While Vadim was solving problems, his home Carp removed some light bulbs from the garland. Now Vadim wants to put them back on. Vadim wants to put all bulb back on the garland. Vadim defines complexity of a garland to be the number of pairs of adjacent bulbs with numbers with different parity ( remainder of the division by 2 ) . For example, the complexity of 1 4 2 3 5 is 2 and the complexity of 1 3 5 7 6 4 2 is 1 . No one likes complexity, so Vadim wants to minimize the number of such pairs. Find the way to put all bulbs back on the garland, such that the complexity is as small as possible.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of light bulbs on the garland. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i \u2264 n ) \u2014 the number on the i - th bulb, or 0 if it was removed.",
    "output": "Output a single number \u2014 the minimum complexity of the garland.",
    "note": "In the first example, one should place light bulbs as 1 5 4 2 3. In that case, the complexity would be equal to 2, because only ( 5, 4) and ( 2, 3) are the pairs of adjacent bulbs that have different parity. In the second case, one of the correct answers is 1 7 3 5 6 4 2.",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1286A"
  },
  {
    "title": "Dr. Evil Underscores",
    "url": "https://codeforces.com/problemset/problem/1285/D",
    "history": "Today, as a friendship gift, Bakry gave Badawy n integers a_ 1, a_ 2, . . . , a_ n and challenged him to choose an integer X such that the value 1 \u2264 i \u2264 nmax ( a_ i \u2295 X) is minimum possible, where \u2295 denotes the bitwise XOR operation. As always, Badawy is too lazy, so you decided to help him and find the minimum possible value of 1 \u2264 i \u2264 nmax ( a_ i \u2295 X) .",
    "input": "The first line contains integer n ( 1\u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 2^ 30- 1 ) .",
    "output": "Print one integer \u2014 the minimum possible value of 1 \u2264 i \u2264 nmax ( a_ i \u2295 X) .",
    "note": "In the first sample, we can choose X = 3 . In the second sample, we can choose X = 5 .",
    "topics": [
      "bitmasks",
      "brute force",
      "dfs and similar",
      "divide and conquer",
      "dp",
      "greedy",
      "strings",
      "trees"
    ],
    "id": "1285D"
  },
  {
    "title": "Just Eat It!",
    "url": "https://codeforces.com/problemset/problem/1285/B",
    "history": "Today, Yasser and Adel are at the shop buying cupcakes. There are n cupcake types, arranged from 1 to n on the shelf, and there are infinitely many of each type. The tastiness of a cupcake of type i is an integer a_ i . There are both tasty and nasty cupcakes, so the tastiness can be positive, zero or negative. Yasser, of course, wants to try them all, so he will buy exactly one cupcake of each type. On the other hand, Adel will choose some segment [ l, r] ( 1 \u2264 l \u2264 r \u2264 n) that does not include all of cupcakes ( he can' t choose [ l, r] = [ 1, n] ) and buy exactly one cupcake of each of types l, l + 1, . . . , r . After that they will compare the total tastiness of the cupcakes each of them have bought. Yasser will be happy if the total tastiness of cupcakes he buys is strictly greater than the total tastiness of cupcakes Adel buys regardless of Adel' s choice. For example, let the tastinesses of the cupcakes be [ 7, 4, - 1] . Yasser will buy all of them, the total tastiness will be 7 + 4 - 1 = 10 . Adel can choose segments [ 7] , [ 4] , [ - 1] , [ 7, 4] or [ 4, - 1] , their total tastinesses are 7, 4, - 1, 11 and 3 , respectively. Adel can choose segment with tastiness 11 , and as 10 is not strictly greater than 11 , Yasser won' t be happy : ( Find out if Yasser will be happy after visiting the shop.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 10^ 4 ) . The description of the test cases follows. The first line of each test case contains n ( 2 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 9 \u2264 a_ i \u2264 10^ 9 ) , where a_ i represents the tastiness of the i - th type of cupcake. It is guaranteed that the sum of n over all test cases doesn' t exceed 10^ 5 .",
    "output": "For each test case, print \" YES\" , if the total tastiness of cupcakes Yasser buys will always be strictly greater than the total tastiness of cupcakes Adel buys regardless of Adel' s choice. Otherwise, print \" NO\" .",
    "note": "In the first example, the total tastiness of any segment Adel can choose is less than the total tastiness of all cupcakes. In the second example, Adel will choose the segment [ 1, 2] with total tastiness 11 , which is not less than the total tastiness of all cupcakes, which is 10 . In the third example, Adel can choose the segment [ 3, 3] with total tastiness of 5 . Note that Yasser' s cupcakes' total tastiness is also 5 , so in that case, the total tastiness of Yasser' s cupcakes isn' t strictly greater than the total tastiness of Adel' s cupcakes.",
    "topics": [
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1285B"
  },
  {
    "title": "DIY Garland",
    "url": "https://codeforces.com/problemset/problem/1283/F",
    "history": "Polycarp has decided to decorate his room because the New Year is soon. One of the main decorations that Polycarp will install is the garland he is going to solder himself. Simple garlands consisting of several lamps connected by one wire are too boring for Polycarp. He is going to solder a garland consisting of n lamps and n - 1 wires. Exactly one lamp will be connected to power grid, and power will be transmitted from it to other lamps by the wires. Each wire connectes exactly two lamps; one lamp is called the main lamp for this wire ( the one that gets power from some other wire and transmits it to this wire) , the other one is called the auxiliary lamp ( the one that gets power from this wire) . Obviously, each lamp has at most one wire that brings power to it ( and this lamp is the auxiliary lamp for this wire, and the main lamp for all other wires connected directly to it) . Each lamp has a brightness value associated with it, the i - th lamp has brightness 2^ i . We define the importance of the wire as the sum of brightness values over all lamps that become disconnected from the grid if the wire is cut ( and all other wires are still working) . Polycarp has drawn the scheme of the garland he wants to make ( the scheme depicts all n lamp and n - 1 wires, and the lamp that will be connected directly to the grid is marked; the wires are placed in such a way that the power can be transmitted to each lamp) . After that, Polycarp calculated the importance of each wire, enumerated them from 1 to n - 1 in descending order of their importance, and then wrote the index of the main lamp for each wire ( in the order from the first wire to the last one) . The following day Polycarp bought all required components of the garland and decided to solder it \u2014 but he could not find the scheme. Fortunately, Polycarp found the list of indices of main lamps for all wires. Can you help him restore the original scheme?",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of lamps. The second line contains n - 1 integers a_ 1 , a_ 2 , . . . , a_ n - 1 ( 1 \u2264 a_ i \u2264 n ) , where a_ i is the index of the main lamp for the i - th wire ( wires are numbered in descending order of importance) .",
    "output": "If it is impossible to restore the original scheme, print one integer - 1 . Otherwise print the scheme as follows. In the first line, print one integer k ( 1 \u2264 k \u2264 n ) \u2014 the index of the lamp that is connected to the power grid. Then print n - 1 lines, each containing two integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i y_ i ) \u2014 the indices of the lamps connected by some wire. The descriptions of the wires ( and the lamps connected by a wire) can be printed in any order. The printed description must correspond to a scheme of a garland such that Polycarp could have written the list a_ 1 , a_ 2 , . . . , a_ n - 1 from it. If there are multiple such schemes, output any of them.",
    "note": "The scheme for the first example ( R denotes the lamp connected to the grid, the numbers on wires are their importance values) :",
    "topics": [
      "constructive algorithms",
      "greedy",
      "trees"
    ],
    "id": "1283F"
  },
  {
    "title": "New Year Parties",
    "url": "https://codeforces.com/problemset/problem/1283/E",
    "history": "Oh, New Year. The time to gather all your friends and reflect on the heartwarming events of the past year. . . n friends live in a city which can be represented as a number line. The i - th friend lives in a house with an integer coordinate x_ i . The i - th friend can come celebrate the New Year to the house with coordinate x_ i- 1 , x_ i+ 1 or stay at x_ i . Each friend is allowed to move no more than once. For all friends 1 \u2264 x_ i \u2264 n holds, however, they can come to houses with coordinates 0 and n+ 1 ( if their houses are at 1 or n , respectively) . For example, let the initial positions be x = [ 1, 2, 4, 4] . The final ones then can be [ 1, 3, 3, 4] , [ 0, 2, 3, 3] , [ 2, 2, 5, 5] , [ 2, 1, 3, 5] and so on. The number of occupied houses is the number of distinct positions among the final ones. So all friends choose the moves they want to perform. After that the number of occupied houses is calculated. What is the minimum and the maximum number of occupied houses can there be?",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of friends. The second line contains n integers x_ 1, x_ 2, . . . , x_ n ( 1 \u2264 x_ i \u2264 n ) \u2014 the coordinates of the houses of the friends.",
    "output": "Print two integers \u2014 the minimum and the maximum possible number of occupied houses after all moves are performed.",
    "note": "In the first example friends can go to [ 2, 2, 3, 3] . So friend 1 goes to x_ 1+ 1 , friend 2 stays at his house x_ 2 , friend 3 goes to x_ 3- 1 and friend 4 goes to x_ 4- 1 . [ 1, 1, 3, 3] , [ 2, 2, 3, 3] or [ 2, 2, 4, 4] are also all valid options to obtain 2 occupied houses. For the maximum number of occupied houses friends can go to [ 1, 2, 3, 4] or to [ 0, 2, 4, 5] , for example.",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1283E"
  },
  {
    "title": "Christmas Trees",
    "url": "https://codeforces.com/problemset/problem/1283/D",
    "history": "There are n Christmas trees on an infinite number line. The i - th tree grows at the position x_ i . All x_ i are guaranteed to be distinct. Each integer point can be either occupied by the Christmas tree, by the human or not occupied at all. Non- integer points cannot be occupied by anything. There are m people who want to celebrate Christmas. Let y_ 1, y_ 2, . . . , y_ m be the positions of people ( note that all values x_ 1, x_ 2, . . . , x_ n, y_ 1, y_ 2, . . . , y_ m should be distinct and all y_ j should be integer) . You want to find such an arrangement of people that the value \u2211_ j= 1^ mmin_ i= 1^ n| x_ i - y_ j| is the minimum possible ( in other words, the sum of distances to the nearest Christmas tree for all people should be minimized) . In other words, let d_ j be the distance from the j - th human to the nearest Christmas tree ( d_ j = min_ i= 1^ n | y_ j - x_ i| ) . Then you need to choose such positions y_ 1, y_ 2, . . . , y_ m that \u2211_ j= 1^ m d_ j is the minimum possible.",
    "input": "The first line of the input contains two integers n and m ( 1 \u2264 n, m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of Christmas trees and the number of people. The second line of the input contains n integers x_ 1, x_ 2, . . . , x_ n ( - 10^ 9 \u2264 x_ i \u2264 10^ 9 ) , where x_ i is the position of the i - th Christmas tree. It is guaranteed that all x_ i are distinct.",
    "output": "In the first line print one integer res \u2014 the minimum possible value of \u2211_ j= 1^ mmin_ i= 1^ n| x_ i - y_ j| ( in other words, the sum of distances to the nearest Christmas tree for all people) . In the second line print m integers y_ 1, y_ 2, . . . , y_ m ( - 2 \u00b7 10^ 9 \u2264 y_ j \u2264 2 \u00b7 10^ 9 ) , where y_ j is the position of the j - th human. All y_ j should be distinct and all values x_ 1, x_ 2, . . . , x_ n, y_ 1, y_ 2, . . . , y_ m should be distinct. If there are multiple answers, print any of them.",
    "note": "",
    "topics": [
      "graphs",
      "greedy",
      "shortest paths"
    ],
    "id": "1283D"
  },
  {
    "title": "Petya and Exam",
    "url": "https://codeforces.com/problemset/problem/1282/C",
    "history": "Petya has come to the math exam and wants to solve as many problems as possible. He prepared and carefully studied the rules by which the exam passes. The exam consists of n problems that can be solved in T minutes. Thus, the exam begins at time 0 and ends at time T . Petya can leave the exam at any integer time from 0 to T , inclusive. All problems are divided into two types: easy problems \u2014 Petya takes exactly a minutes to solve any easy problem; hard problems \u2014 Petya takes exactly b minutes ( b > a ) to solve any hard problem. Thus, if Petya starts solving an easy problem at time x , then it will be solved at time x+ a . Similarly, if at a time x Petya starts to solve a hard problem, then it will be solved at time x+ b . For every problem, Petya knows if it is easy or hard. Also, for each problem is determined time t_ i ( 0 \u2264 t_ i \u2264 T ) at which it will become mandatory ( required) . If Petya leaves the exam at time s and there is such a problem i that t_ i \u2264 s and he didn' t solve it, then he will receive 0 points for the whole exam. Otherwise ( i. e if he has solved all such problems for which t_ i \u2264 s ) he will receive a number of points equal to the number of solved problems. Note that leaving at time s Petya can have both \" mandatory\" and \" non- mandatory\" problems solved. For example, if n= 2 , T= 5 , a= 2 , b= 3 , the first problem is hard and t_ 1= 3 and the second problem is easy and t_ 2= 2 . Then: if he leaves at time s= 0 , then he will receive 0 points since he will not have time to solve any problems; if he leaves at time s= 1 , he will receive 0 points since he will not have time to solve any problems; if he leaves at time s= 2 , then he can get a 1 point by solving the problem with the number 2 ( it must be solved in the range from 0 to 2 ) ; if he leaves at time s= 3 , then he will receive 0 points since at this moment both problems will be mandatory, but he will not be able to solve both of them; if he leaves at time s= 4 , then he will receive 0 points since at this moment both problems will be mandatory, but he will not be able to solve both of them; if he leaves at time s= 5 , then he can get 2 points by solving all problems. Thus, the answer to this test is 2 . Help Petya to determine the maximal number of points that he can receive, before leaving the exam.",
    "input": "The first line contains the integer m ( 1 \u2264 m \u2264 10^ 4 ) \u2014 the number of test cases in the test. The next lines contain a description of m test cases. The first line of each test case contains four integers n, T, a, b ( 2 \u2264 n \u2264 2\u00b710^ 5 , 1 \u2264 T \u2264 10^ 9 , 1 \u2264 a < b \u2264 10^ 9 ) \u2014 the number of problems, minutes given for the exam and the time to solve an easy and hard problem, respectively. The second line of each test case contains n numbers 0 or 1 , separated by single space: the i - th number means the type of the i - th problem. A value of 0 means that the problem is easy, and a value of 1 that the problem is hard. The third line of each test case contains n integers t_ i ( 0 \u2264 t_ i \u2264 T ) , where the i - th number means the time at which the i - th problem will become mandatory. It is guaranteed that the sum of n for all test cases does not exceed 2\u00b710^ 5 .",
    "output": "Print the answers to m test cases. For each set, print a single integer \u2014 maximal number of points that he can receive, before leaving the exam.",
    "note": "",
    "topics": [
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1282C"
  },
  {
    "title": "K for the Price of One (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1282/B2",
    "history": "This is the hard version of this problem. The only difference is the constraint on k \u2014 the number of gifts in the offer. In this version: 2 \u2264 k \u2264 n . Vasya came to the store to buy goods for his friends for the New Year. It turned out that he was very lucky \u2014 today the offer \" k of goods for the price of one\" is held in store. Using this offer, Vasya can buy exactly k of any goods, paying only for the most expensive of them. Vasya decided to take this opportunity and buy as many goods as possible for his friends with the money he has. More formally, for each good, its price is determined by a_ i \u2014 the number of coins it costs. Initially, Vasya has p coins. He wants to buy the maximum number of goods. Vasya can perform one of the following operations as many times as necessary: Vasya can buy one good with the index i if he currently has enough coins ( i. e p \u2265 a_ i ) . After buying this good, the number of Vasya' s coins will decrease by a_ i , ( i. e it becomes p : = p - a_ i ) . Vasya can buy a good with the index i , and also choose exactly k- 1 goods, the price of which does not exceed a_ i , if he currently has enough coins ( i. e p \u2265 a_ i ) . Thus, he buys all these k goods, and his number of coins decreases by a_ i ( i. e it becomes p : = p - a_ i ) . Please note that each good can be bought no more than once. For example, if the store now has n= 5 goods worth a_ 1= 2, a_ 2= 4, a_ 3= 3, a_ 4= 5, a_ 5= 7 , respectively, k= 2 , and Vasya has 6 coins, then he can buy 3 goods. A good with the index 1 will be bought by Vasya without using the offer and he will pay 2 coins. Goods with the indices 2 and 3 Vasya will buy using the offer and he will pay 4 coins. It can be proved that Vasya can not buy more goods with six coins. Help Vasya to find out the maximum number of goods he can buy.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The next lines contain a description of t test cases. The first line of each test case contains three integers n, p, k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 p \u2264 2\u00b710^ 9 , 2 \u2264 k \u2264 n ) \u2014 the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the prices of goods. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case in a separate line print one integer m \u2014 the maximum number of goods that Vasya can buy.",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1282B2"
  },
  {
    "title": "K for the Price of One (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1282/B1",
    "history": "This is the easy version of this problem. The only difference is the constraint on k \u2014 the number of gifts in the offer. In this version: k= 2 . Vasya came to the store to buy goods for his friends for the New Year. It turned out that he was very lucky \u2014 today the offer \" k of goods for the price of one\" is held in store. Remember, that in this problem k= 2 . Using this offer, Vasya can buy exactly k of any goods, paying only for the most expensive of them. Vasya decided to take this opportunity and buy as many goods as possible for his friends with the money he has. More formally, for each good, its price is determined by a_ i \u2014 the number of coins it costs. Initially, Vasya has p coins. He wants to buy the maximum number of goods. Vasya can perform one of the following operations as many times as necessary: Vasya can buy one good with the index i if he currently has enough coins ( i. e p \u2265 a_ i ) . After buying this good, the number of Vasya' s coins will decrease by a_ i , ( i. e it becomes p : = p - a_ i ) . Vasya can buy a good with the index i , and also choose exactly k- 1 goods, the price of which does not exceed a_ i , if he currently has enough coins ( i. e p \u2265 a_ i ) . Thus, he buys all these k goods, and his number of coins decreases by a_ i ( i. e it becomes p : = p - a_ i ) . Please note that each good can be bought no more than once. For example, if the store now has n= 5 goods worth a_ 1= 2, a_ 2= 4, a_ 3= 3, a_ 4= 5, a_ 5= 7 , respectively, k= 2 , and Vasya has 6 coins, then he can buy 3 goods. A good with the index 1 will be bought by Vasya without using the offer and he will pay 2 coins. Goods with the indices 2 and 3 Vasya will buy using the offer and he will pay 4 coins. It can be proved that Vasya can not buy more goods with six coins. Help Vasya to find out the maximum number of goods he can buy.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the test. The next lines contain a description of t test cases. The first line of each test case contains three integers n, p, k ( 2 \u2264 n \u2264 2 \u00b7 10^ 5 , 1 \u2264 p \u2264 2\u00b710^ 9 , k= 2 ) \u2014 the number of goods in the store, the number of coins Vasya has and the number of goods that can be bought by the price of the most expensive of them. The second line of each test case contains n integers a_ i ( 1 \u2264 a_ i \u2264 10^ 4 ) \u2014 the prices of goods. It is guaranteed that the sum of n for all test cases does not exceed 2 \u00b7 10^ 5 . It is guaranteed that in this version of the problem k= 2 for all test cases.",
    "output": "For each test case in a separate line print one integer m \u2014 the maximum number of goods that Vasya can buy.",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1282B1"
  },
  {
    "title": "Azamon Web Services",
    "url": "https://codeforces.com/problemset/problem/1281/B",
    "history": "Your friend Jeff Zebos has been trying to run his new online company, but it' s not going very well. He' s not getting a lot of sales on his website which he decided to call Azamon. His big problem, you think, is that he' s not ranking high enough on the search engines. If only he could rename his products to have better names than his competitors, then he' ll be at the top of the search results and will be a millionaire. After doing some research, you find out that search engines only sort their results lexicographically. If your friend could rename his products to lexicographically smaller strings than his competitor' s, then he' ll be at the top of the rankings! To make your strategy less obvious to his competitors, you decide to swap no more than two letters of the product names. Please help Jeff to find improved names for his products that are lexicographically smaller than his competitor' s! Given the string s representing Jeff' s product name and the string c representing his competitor' s product name, find a way to swap at most one pair of characters in s ( that is, find two distinct indices i and j and swap s_ i and s_ j ) such that the resulting new name becomes strictly lexicographically smaller than c , or determine that it is impossible. Note: String a is strictly lexicographically smaller than string b if and only if one of the following holds: a is a proper prefix of b , that is, a is a prefix of b such that a = \u0338 b ; There exists an integer 1 \u2264 i \u2264min( | a| , | b| ) such that a_ i < b_ i and a_ j = b_ j for 1 \u2264 j < i .",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 1500 ) denoting the number of test cases. The next lines contain descriptions of the test cases. Each test case consists of a single line containing two space- separated strings s and c ( 2 \u2264 | s| \u2264 5000, 1 \u2264 | c| \u2264 5000 ) . The strings s and c consists of uppercase English letters. It is guaranteed that the sum of | s| in the input is at most 5000 and the sum of the | c| in the input is at most 5000 .",
    "output": "For each test case, output a single line containing a single string, which is either the new name which is obtained after swapping no more than one pair of characters that is strictly lexicographically smaller than c . In case there are many possible such strings, you can output any of them; three dashes ( the string \" \u2014\" without quotes) if it is impossible.",
    "note": "In the first test case, it is possible to swap the second and the fourth letters of the string and the resulting string \" AMAZON\" is lexicographically smaller than \" APPLE\" . It is impossible to improve the product' s name in the second test case and satisfy all conditions. In the third test case, it is possible not to swap a pair of characters. The name \" APPLE\" is lexicographically smaller than \" BANANA\" . Note that there are other valid answers, e. g. , \" APPEL\" .",
    "topics": [
      "greedy"
    ],
    "id": "1281B"
  },
  {
    "title": "Miss Punyverse",
    "url": "https://codeforces.com/problemset/problem/1280/D",
    "history": "The Oak has n nesting places, numbered with integers from 1 to n . Nesting place i is home to b_ i bees and w_ i wasps. Some nesting places are connected by branches. We call two nesting places adjacent if there exists a branch between them. A simple path from nesting place x to y is given by a sequence s_ 0, . . . , s_ p of distinct nesting places, where p is a non- negative integer, s_ 0 = x , s_ p = y , and s_ i- 1 and s_ i are adjacent for each i = 1, . . . , p . The branches of The Oak are set up in such a way that for any two pairs of nesting places x and y , there exists a unique simple path from x to y . Because of this, biologists and computer scientists agree that The Oak is in fact, a tree. A village is a nonempty set V of nesting places such that for any two x and y in V , there exists a simple path from x to y whose intermediate nesting places all lie in V . A set of villages P is called a partition if each of the n nesting places is contained in exactly one of the villages in P . In other words, no two villages in P share any common nesting place, and altogether, they contain all n nesting places. The Oak holds its annual Miss Punyverse beauty pageant. The two contestants this year are Ugly Wasp and Pretty Bee. The winner of the beauty pageant is determined by voting, which we will now explain. Suppose P is a partition of the nesting places into m villages V_ 1, . . . , V_ m . There is a local election in each village. Each of the insects in this village vote for their favorite contestant. If there are strictly more votes for Ugly Wasp than Pretty Bee, then Ugly Wasp is said to win in that village. Otherwise, Pretty Bee wins. Whoever wins in the most number of villages wins. As it always goes with these pageants, bees always vote for the bee ( which is Pretty Bee this year) and wasps always vote for the wasp ( which is Ugly Wasp this year) . Unlike their general elections, no one abstains from voting for Miss Punyverse as everyone takes it very seriously. Mayor Waspacito, and his assistant Alexwasp, wants Ugly Wasp to win. He has the power to choose how to partition The Oak into exactly m villages. If he chooses the partition optimally, determine the maximum number of villages in which Ugly Wasp wins.",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 100 ) denoting the number of test cases. The next lines contain descriptions of the test cases. The first line of each test case contains two space- separated integers n and m ( 1 \u2264 m \u2264 n \u2264 3000 ) . The second line contains n space- separated integers b_ 1, b_ 2, . . . , b_ n ( 0 \u2264 b_ i \u2264 10^ 9 ) . The third line contains n space- separated integers w_ 1, w_ 2, . . . , w_ n ( 0 \u2264 w_ i \u2264 10^ 9 ) . The next n - 1 lines describe the pairs of adjacent nesting places. In particular, the i - th of them contains two space- separated integers x_ i and y_ i ( 1 \u2264 x_ i, y_ i \u2264 n , x_ i = \u0338 y_ i ) denoting the numbers of two adjacent nesting places. It is guaranteed that these pairs form a tree. It is guaranteed that the sum of n in a single file is at most 10^ 5 .",
    "output": "For each test case, output a single line containing a single integer denoting the maximum number of villages in which Ugly Wasp wins, among all partitions of The Oak into m villages.",
    "note": "In the first test case, we need to partition the n = 4 nesting places into m = 3 villages. We can make Ugly Wasp win in 2 villages via the following partition: { { 1, 2} , { 3} , { 4} } . In this partition, Ugly Wasp wins in village { 1, 2} , garnering 181 votes as opposed to Pretty Bee' s 170 ; Ugly Wasp also wins in village { 3} , garnering 111 votes as opposed to Pretty Bee' s 70 ; Ugly Wasp loses in the village { 4} , garnering 0 votes as opposed to Pretty Bee' s 50 . Thus, Ugly Wasp wins in 2 villages, and it can be shown that this is the maximum possible number. In the second test case, we need to partition the n = 2 nesting places into m = 1 village. There is only one way to do this: { { 1, 2} } . In this partition' s sole village, Ugly Wasp gets 563 votes, and Pretty Bee also gets 563 votes. Ugly Wasp needs strictly more votes in order to win. Therefore, Ugly Wasp doesn' t win in any village.",
    "topics": [
      "dp",
      "greedy",
      "trees"
    ],
    "id": "1280D"
  },
  {
    "title": "Jeremy Bearimy",
    "url": "https://codeforces.com/problemset/problem/1280/C",
    "history": "Welcome! Everything is fine. You have arrived in The Medium Place, the place between The Good Place and The Bad Place. You are assigned a task that will either make people happier or torture them for eternity. You have a list of k pairs of people who have arrived in a new inhabited neighborhood. You need to assign each of the 2k people into one of the 2k houses. Each person will be the resident of exactly one house, and each house will have exactly one resident. Of course, in the neighborhood, it is possible to visit friends. There are 2k - 1 roads, each of which connects two houses. It takes some time to traverse a road. We will specify the amount of time it takes in the input. The neighborhood is designed in such a way that from anyone' s house, there is exactly one sequence of distinct roads you can take to any other house. In other words, the graph with the houses as vertices and the roads as edges is a tree. The truth is, these k pairs of people are actually soulmates. We index them from 1 to k . We denote by f( i) the amount of time it takes for the i - th pair of soulmates to go to each other' s houses. As we have said before, you will need to assign each of the 2k people into one of the 2k houses. You have two missions, one from the entities in The Good Place and one from the entities of The Bad Place. Here they are: The first mission, from The Good Place, is to assign the people into the houses such that the sum of f( i) over all pairs i is minimized. Let' s define this minimized sum as G . This makes sure that soulmates can easily and efficiently visit each other; The second mission, from The Bad Place, is to assign the people into the houses such that the sum of f( i) over all pairs i is maximized. Let' s define this maximized sum as B . This makes sure that soulmates will have a difficult time to visit each other. What are the values of G and B ?",
    "input": "The first line of input contains a single integer t ( 1 \u2264 t \u2264 500 ) denoting the number of test cases. The next lines contain descriptions of the test cases. The first line of each test case contains a single integer k denoting the number of pairs of people ( 1 \u2264 k \u2264 10^ 5 ) . The next 2k - 1 lines describe the roads; the i - th of them contains three space- separated integers a_ i, b_ i, t_ i which means that the i - th road connects the a_ i - th and b_ i - th houses with a road that takes t_ i units of time to traverse ( 1 \u2264 a_ i, b_ i \u2264 2k , a_ i = \u0338 b_ i , 1 \u2264 t_ i \u2264 10^ 6 ) . It is guaranteed that the given roads define a tree structure. It is guaranteed that the sum of the k in a single file is at most 3 \u00b7 10^ 5 .",
    "output": "For each test case, output a single line containing two space- separated integers G and B .",
    "note": "For the sample test case, we have a minimum sum equal to G = 15 . One way this can be achieved is with the following assignment: The first pair of people get assigned to houses 5 and 6 , giving us f( 1) = 5 ; The second pair of people get assigned to houses 1 and 4 , giving us f( 2) = 6 ; The third pair of people get assigned to houses 3 and 2 , giving us f( 3) = 4 . Note that the sum of the f( i) is 5 + 6 + 4 = 15 . We also have a maximum sum equal to B = 33 . One way this can be achieved is with the following assignment: The first pair of people get assigned to houses 1 and 4 , giving us f( 1) = 6 ; The second pair of people get assigned to houses 6 and 2 , giving us f( 2) = 14 ; The third pair of people get assigned to houses 3 and 5 , giving us f( 3) = 13 . Note that the sum of the f( i) is 6 + 14 + 13 = 33 .",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy",
      "trees"
    ],
    "id": "1280C"
  },
  {
    "title": "Berry Jam",
    "url": "https://codeforces.com/problemset/problem/1278/C",
    "history": "Karlsson has recently discovered a huge stock of berry jam jars in the basement of the house. More specifically, there were 2n jars of strawberry and blueberry jam. All the 2n jars are arranged in a row. The stairs to the basement are exactly in the middle of that row. So when Karlsson enters the basement, he sees exactly n jars to his left and n jars to his right. For example, the basement might look like this: Being the starightforward man he is, he immediately starts eating the jam. In one minute he chooses to empty either the first non- empty jar to his left or the first non- empty jar to his right. Finally, Karlsson decided that at the end the amount of full strawberry and blueberry jam jars should become the same. For example, this might be the result: He has eaten 1 jar to his left and then 5 jars to his right. There remained exactly 3 full jars of both strawberry and blueberry jam. Jars are numbered from 1 to 2n from left to right, so Karlsson initially stands between jars n and n+ 1 . What is the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left? Your program should answer t independent test cases.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line of each test case contains 2n integers a_ 1, a_ 2, . . . , a_ 2n ( 1 \u2264 a_ i \u2264 2 ) \u2014 a_ i= 1 means that the i - th jar from the left is a strawberry jam jar and a_ i= 2 means that it is a blueberry jam jar. It is guaranteed that the sum of n over all test cases does not exceed 10^ 5 .",
    "output": "For each test case print the answer to it \u2014 the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left.",
    "note": "The picture from the statement describes the first test case. In the second test case the number of strawberry and blueberry jam jars is already equal. In the third test case Karlsson is required to eat all 6 jars so that there remain 0 jars of both jams. In the fourth test case Karlsson can empty either the second and the third jars or the third and the fourth one. The both scenarios will leave 1 jar of both jams.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1278C"
  },
  {
    "title": "A and B",
    "url": "https://codeforces.com/problemset/problem/1278/B",
    "history": "You are given two integers a and b . You can perform a sequence of operations: during the first operation you choose one of these numbers and increase it by 1 ; during the second operation you choose one of these numbers and increase it by 2 , and so on. You choose the number of these operations yourself. For example, if a = 1 and b = 3 , you can perform the following sequence of three operations: add 1 to a , then a = 2 and b = 3 ; add 2 to b , then a = 2 and b = 5 ; add 3 to a , then a = 5 and b = 5 . Calculate the minimum number of operations required to make a and b equal.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The only line of each test case contains two integers a and b ( 1 \u2264 a, b \u2264 10^ 9 ) .",
    "output": "For each test case print one integer \u2014 the minimum numbers of operations required to make a and b equal.",
    "note": "First test case considered in the statement. In the second test case integers a and b are already equal, so you don' t need to perform any operations. In the third test case you have to apply the first, the second, the third and the fourth operation to b ( b turns into 20 + 1 + 2 + 3 + 4 = 30 ) .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1278B"
  },
  {
    "title": "Make Them Odd",
    "url": "https://codeforces.com/problemset/problem/1277/B",
    "history": "There are n positive integers a_ 1, a_ 2, . . . , a_ n . For the one move you can choose any even value c and divide by two all elements that equal c . For example, if a= [ 6, 8, 12, 6, 3, 12] and you choose c= 6 , and a is transformed into a= [ 3, 8, 12, 3, 3, 12] after the move. You need to find the minimal number of moves for transforming a to an array of only odd integers ( each element shouldn' t be divisible by 2 ) .",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Then t test cases follow. The first line of a test case contains n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the number of integers in the sequence a . The second line contains positive integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The sum of n for all test cases in the input doesn' t exceed 2\u00b710^ 5 .",
    "output": "For t test cases print the answers in the order of test cases in the input. The answer for the test case is the minimal number of moves needed to make all numbers in the test case odd ( i. e. not divisible by 2 ) .",
    "note": "In the first test case of the example, the optimal sequence of moves can be as follows: before making moves a= [ 40, 6, 40, 3, 20, 1] ; choose c= 6 ; now a= [ 40, 3, 40, 3, 20, 1] ; choose c= 40 ; now a= [ 20, 3, 20, 3, 20, 1] ; choose c= 20 ; now a= [ 10, 3, 10, 3, 10, 1] ; choose c= 10 ; now a= [ 5, 3, 5, 3, 5, 1] \u2014 all numbers are odd. Thus, all numbers became odd after 4 moves. In 3 or fewer moves, you cannot make them all odd.",
    "topics": [
      "greedy",
      "number theory"
    ],
    "id": "1277B"
  },
  {
    "title": "Beautiful Rectangle",
    "url": "https://codeforces.com/problemset/problem/1276/C",
    "history": "You are given n integers. You need to choose a subset and put the chosen numbers in a beautiful rectangle ( rectangular matrix) . Each chosen number should occupy one of its rectangle cells, each cell must be filled with exactly one chosen number. Some of the n numbers may not be chosen. A rectangle ( rectangular matrix) is called beautiful if in each row and in each column all values are different. What is the largest ( by the total number of cells) beautiful rectangle you can construct? Print the rectangle itself.",
    "input": "The first line contains n ( 1 \u2264 n \u2264 4\u00b710^ 5 ) . The second line contains n integers ( 1 \u2264 a_ i \u2264 10^ 9 ) .",
    "output": "In the first line print x ( 1 \u2264 x \u2264 n ) \u2014 the total number of cells of the required maximum beautiful rectangle. In the second line print p and q ( p \u00b7 q= x ) : its sizes. In the next p lines print the required rectangle itself. If there are several answers, print any.",
    "note": "",
    "topics": [
      "brute force",
      "combinatorics",
      "constructive algorithms",
      "data structures",
      "greedy",
      "math"
    ],
    "id": "1276C"
  },
  {
    "title": "As Simple as One and Two",
    "url": "https://codeforces.com/problemset/problem/1276/A",
    "history": "You are given a non- empty string s= s_ 1s_ 2. . . s_ n , which consists only of lowercase Latin letters. Polycarp does not like a string if it contains at least one string \" one\" or at least one string \" two\" ( or both at the same time) as a substring. In other words, Polycarp does not like the string s if there is an integer j ( 1 \u2264 j \u2264 n- 2 ) , that s_ js_ j+ 1s_ j+ 2= \" one\" or s_ js_ j+ 1s_ j+ 2= \" two\" . For example: Polycarp does not like strings \" oneee\" , \" ontwow\" , \" twone\" and \" oneonetwo\" ( they all have at least one substring \" one\" or \" two\" ) , Polycarp likes strings \" oonnee\" , \" twwwo\" and \" twnoe\" ( they have no substrings \" one\" and \" two\" ) . Polycarp wants to select a certain set of indices ( positions) and remove all letters on these positions. All removals are made at the same time. For example, if the string looks like s= \" onetwone\" , then if Polycarp selects two indices 3 and 6 , then \" onetwone\" will be selected and the result is \" ontwne\" . What is the minimum number of indices ( positions) that Polycarp needs to select to make the string liked? What should these positions be?",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. Next, the test cases are given. Each test case consists of one non- empty string s . Its length does not exceed 1. 5\u00b710^ 5 . The string s consists only of lowercase Latin letters. It is guaranteed that the sum of lengths of all lines for all input data in the test does not exceed 1. 5\u00b710^ 6 .",
    "output": "Print an answer for each test case in the input in order of their appearance. The first line of each answer should contain r ( 0 \u2264 r \u2264 | s| ) \u2014 the required minimum number of positions to be removed, where | s| is the length of the given line. The second line of each answer should contain r different integers \u2014 the indices themselves for removal in any order. Indices are numbered from left to right from 1 to the length of the string. If r= 0 , then the second line can be skipped ( or you can print empty) . If there are several answers, print any of them.",
    "note": "In the first example, answers are: \" onetwone\" , \" testme\" \u2014 Polycarp likes it, there is nothing to remove, \" oneoneone\" , \" twotwo\" . In the second example, answers are: \" onetwonetwooneooonetwooo\" , \" two\" , \" one\" , \" twooooo\" , \" ttttwo\" , \" ttwwoo\" \u2014 Polycarp likes it, there is nothing to remove, \" ooone\" , \" onnne\" \u2014 Polycarp likes it, there is nothing to remove, \" oneeeee\" , \" oneeeeeeetwooooo\" .",
    "topics": [
      "dp",
      "greedy"
    ],
    "id": "1276A"
  },
  {
    "title": "Snow Walking Robot",
    "url": "https://codeforces.com/problemset/problem/1272/B",
    "history": "Recently you have bought a snow walking robot and brought it home. Suppose your home is a cell ( 0, 0) on an infinite grid. You also have the sequence of instructions of this robot. It is written as the string s consisting of characters ' L' , ' R' , ' U' and ' D' . If the robot is in the cell ( x, y) right now, he can move to one of the adjacent cells ( depending on the current instruction) . If the current instruction is ' L' , then the robot can move to the left to ( x - 1, y) ; if the current instruction is ' R' , then the robot can move to the right to ( x + 1, y) ; if the current instruction is ' U' , then the robot can move to the top to ( x, y + 1) ; if the current instruction is ' D' , then the robot can move to the bottom to ( x, y - 1) . You' ve noticed the warning on the last page of the manual: if the robot visits some cell ( except ( 0, 0) ) twice then it breaks. So the sequence of instructions is valid if the robot starts in the cell ( 0, 0) , performs the given instructions, visits no cell other than ( 0, 0) two or more times and ends the path in the cell ( 0, 0) . Also cell ( 0, 0) should be visited at most two times: at the beginning and at the end ( if the path is empty then it is visited only once) . For example, the following sequences of instructions are considered valid: \" UD\" , \" RL\" , \" UUURULLDDDDLDDRRUU\" , and the following are considered invalid: \" U\" ( the endpoint is not ( 0, 0) ) and \" UUDD\" ( the cell ( 0, 1) is visited twice) . The initial sequence of instructions, however, might be not valid. You don' t want your robot to break so you decided to reprogram it in the following way: you will remove some ( possibly, all or none) instructions from the initial sequence of instructions, then rearrange the remaining instructions as you wish and turn on your robot to move. Your task is to remove as few instructions from the initial sequence as possible and rearrange the remaining ones so that the sequence is valid. Report the valid sequence of the maximum length you can obtain. Note that you can choose any order of remaining instructions ( you don' t need to minimize the number of swaps or any other similar metric) . You have to answer q independent test cases.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 2 \u00b7 10^ 4 ) \u2014 the number of test cases. The next q lines contain test cases. The i - th test case is given as the string s consisting of at least 1 and no more than 10^ 5 characters ' L' , ' R' , ' U' and ' D' \u2014 the initial sequence of instructions. It is guaranteed that the sum of | s| ( where | s| is the length of s ) does not exceed 10^ 5 over all test cases ( \u2211 | s| \u2264 10^ 5 ) .",
    "output": "For each test case print the answer on it. In the first line print the maximum number of remaining instructions. In the second line print the valid sequence of remaining instructions t the robot has to perform. The moves are performed from left to right in the order of the printed sequence. If there are several answers, you can print any. If the answer is 0 , you are allowed to print an empty line ( but you can don' t print it) .",
    "note": "There are only two possible answers in the first test case: \" LR\" and \" RL\" . The picture corresponding to the second test case: Note that the direction of traverse does not matter Another correct answer to the third test case: \" URDDLLLUURDR\" .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1272B"
  },
  {
    "title": "Three Friends",
    "url": "https://codeforces.com/problemset/problem/1272/A",
    "history": "Three friends are going to meet each other. Initially, the first friend stays at the position x = a , the second friend stays at the position x = b and the third friend stays at the position x = c on the coordinate axis Ox . In one minute each friend independently from other friends can change the position x by 1 to the left or by 1 to the right ( i. e. set x : = x - 1 or x : = x + 1 ) or even don' t change it. Let' s introduce the total pairwise distance \u2014 the sum of distances between each pair of friends. Let a' , b' and c' be the final positions of the first, the second and the third friend, correspondingly. Then the total pairwise distance is | a' - b' | + | a' - c' | + | b' - c' | , where | x| is the absolute value of x . Friends are interested in the minimum total pairwise distance they can reach if they will move optimally. Each friend will move no more than once. So, more formally, they want to know the minimum total pairwise distance they can reach after one minute. You have to answer q independent test cases.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 1000 ) \u2014 the number of test cases. The next q lines describe test cases. The i - th test case is given as three integers a, b and c ( 1 \u2264 a, b, c \u2264 10^ 9 ) \u2014 initial positions of the first, second and third friend correspondingly. The positions of friends can be equal.",
    "output": "For each test case print the answer on it \u2014 the minimum total pairwise distance ( the minimum sum of distances between each pair of friends) if friends change their positions optimally. Each friend will move no more than once. So, more formally, you have to find the minimum total pairwise distance they can reach after one minute.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1272A"
  },
  {
    "title": "Portals",
    "url": "https://codeforces.com/problemset/problem/1271/D",
    "history": "You play a strategic video game ( yeah, we ran out of good problem legends) . In this game you control a large army, and your goal is to conquer n castles of your opponent. Let' s describe the game process in detail. Initially you control an army of k warriors. Your enemy controls n castles; to conquer the i - th castle, you need at least a_ i warriors ( you are so good at this game that you don' t lose any warriors while taking over a castle, so your army stays the same after the fight) . After you take control over a castle, you recruit new warriors into your army \u2014 formally, after you capture the i - th castle, b_ i warriors join your army. Furthermore, after capturing a castle ( or later) you can defend it: if you leave at least one warrior in a castle, this castle is considered defended. Each castle has an importance parameter c_ i , and your total score is the sum of importance values over all defended castles. There are two ways to defend a castle: if you are currently in the castle i , you may leave one warrior to defend castle i ; there are m one- way portals connecting the castles. Each portal is characterised by two numbers of castles u and v ( for each portal holds u > v ) . A portal can be used as follows: if you are currently in the castle u , you may send one warrior to defend castle v . Obviously, when you order your warrior to defend some castle, he leaves your army. You capture the castles in fixed order: you have to capture the first one, then the second one, and so on. After you capture the castle i ( but only before capturing castle i + 1 ) you may recruit new warriors from castle i , leave a warrior to defend castle i , and use any number of portals leading from castle i to other castles having smaller numbers. As soon as you capture the next castle, these actions for castle i won' t be available to you. If, during some moment in the game, you don' t have enough warriors to capture the next castle, you lose. Your goal is to maximize the sum of importance values over all defended castles ( note that you may hire new warriors in the last castle, defend it and use portals leading from it even after you capture it \u2014 your score will be calculated afterwards) . Can you determine an optimal strategy of capturing and defending the castles?",
    "input": "The first line contains three integers n , m and k ( 1 \u2264 n \u2264 5000 , 0 \u2264 m \u2264min( n( n - 1) / 2, 3 \u00b7 10^ 5) , 0 \u2264 k \u2264 5000 ) \u2014 the number of castles, the number of portals and initial size of your army, respectively. Then n lines follow. The i - th line describes the i - th castle with three integers a_ i , b_ i and c_ i ( 0 \u2264 a_ i, b_ i, c_ i \u2264 5000 ) \u2014 the number of warriors required to capture the i - th castle, the number of warriors available for hire in this castle and its importance value. Then m lines follow. The i - th line describes the i - th portal with two integers u_ i and v_ i ( 1 \u2264 v_ i < u_ i \u2264 n ) , meaning that the portal leads from the castle u_ i to the castle v_ i . There are no two same portals listed. It is guaranteed that the size of your army won' t exceed 5000 under any circumstances ( i. e. k + \u2211_ i = 1^ n b_ i \u2264 5000 ) .",
    "output": "If it' s impossible to capture all the castles, print one integer - 1 . Otherwise, print one integer equal to the maximum sum of importance values of defended castles.",
    "note": "The best course of action in the first example is as follows: capture the first castle; hire warriors from the first castle, your army has 11 warriors now; capture the second castle; capture the third castle; hire warriors from the third castle, your army has 13 warriors now; capture the fourth castle; leave one warrior to protect the fourth castle, your army has 12 warriors now. This course of action ( and several other ones) gives 5 as your total score. The best course of action in the second example is as follows: capture the first castle; hire warriors from the first castle, your army has 11 warriors now; capture the second castle; capture the third castle; hire warriors from the third castle, your army has 13 warriors now; capture the fourth castle; leave one warrior to protect the fourth castle, your army has 12 warriors now; send one warrior to protect the first castle through the third portal, your army has 11 warriors now. This course of action ( and several other ones) gives 22 as your total score. In the third example it' s impossible to capture the last castle: you need 14 warriors to do so, but you can accumulate no more than 13 without capturing it.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1271D"
  },
  {
    "title": "Shawarma Tent",
    "url": "https://codeforces.com/problemset/problem/1271/C",
    "history": "The map of the capital of Berland can be viewed on the infinite coordinate plane. Each point with integer coordinates contains a building, and there are streets connecting every building to four neighbouring buildings. All streets are parallel to the coordinate axes. The main school of the capital is located in ( s_ x, s_ y) . There are n students attending this school, the i - th of them lives in the house located in ( x_ i, y_ i) . It is possible that some students live in the same house, but no student lives in ( s_ x, s_ y) . After classes end, each student walks from the school to his house along one of the shortest paths. So the distance the i - th student goes from the school to his house is | s_ x - x_ i| + | s_ y - y_ i| . The Provision Department of Berland has decided to open a shawarma tent somewhere in the capital ( at some point with integer coordinates) . It is considered that the i - th student will buy a shawarma if at least one of the shortest paths from the school to the i - th student' s house goes through the point where the shawarma tent is located. It is forbidden to place the shawarma tent at the point where the school is located, but the coordinates of the shawarma tent may coincide with the coordinates of the house of some student ( or even multiple students) . You want to find the maximum possible number of students buying shawarma and the optimal location for the tent itself.",
    "input": "The first line contains three integers n , s_ x , s_ y ( 1 \u2264 n \u2264 200 000 , 0 \u2264 s_ x, s_ y \u2264 10^ 9 ) \u2014 the number of students and the coordinates of the school, respectively. Then n lines follow. The i - th of them contains two integers x_ i , y_ i ( 0 \u2264 x_ i, y_ i \u2264 10^ 9 ) \u2014 the location of the house where the i - th student lives. Some locations of houses may coincide, but no student lives in the same location where the school is situated.",
    "output": "The output should consist of two lines. The first of them should contain one integer c \u2014 the maximum number of students that will buy shawarmas at the tent. The second line should contain two integers p_ x and p_ y \u2014 the coordinates where the tent should be located. If there are multiple answers, print any of them. Note that each of p_ x and p_ y should be not less than 0 and not greater than 10^ 9 .",
    "note": "In the first example, If we build the shawarma tent in ( 4, 2) , then the students living in ( 4, 2) , ( 4, 1) and ( 5, 1) will visit it. In the second example, it is possible to build the shawarma tent in ( 1, 1) , then both students living in ( 0, 0) will visit it.",
    "topics": [
      "brute force",
      "geometry",
      "greedy",
      "implementation"
    ],
    "id": "1271C"
  },
  {
    "title": "Blocks",
    "url": "https://codeforces.com/problemset/problem/1271/B",
    "history": "There are n blocks arranged in a row and numbered from left to right, starting from one. Each block is either black or white. You may perform the following operation zero or more times: choose two adjacent blocks and invert their colors ( white block becomes black, and vice versa) . You want to find a sequence of operations, such that they make all the blocks having the same color. You don' t have to minimize the number of operations, but it should not exceed 3 \u00b7 n . If it is impossible to find such a sequence of operations, you need to report it.",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 200 ) \u2014 the number of blocks. The second line contains one string s consisting of n characters, each character is either \" W\" or \" B\" . If the i - th character is \" W\" , then the i - th block is white. If the i - th character is \" B\" , then the i - th block is black.",
    "output": "If it is impossible to make all the blocks having the same color, print - 1 . Otherwise, print an integer k ( 0 \u2264 k \u2264 3 \u00b7 n ) \u2014 the number of operations. Then print k integers p_ 1, p_ 2, . . . , p_ k ( 1 \u2264 p_ j \u2264 n - 1) , where p_ j is the position of the left block in the pair of blocks that should be affected by the j - th operation. If there are multiple answers, print any of them.",
    "note": "In the first example, it is possible to make all blocks black in 3 operations. Start with changing blocks 6 and 7 , so the sequence is \" BWWWWBBB\" . Then change blocks 2 and 3 , so the sequence is \" BBBWWBB\" . And finally, change blocks 4 and 5 , so all blocks are black. It is impossible to make all colors equal in the second example. All blocks are already white in the third example. In the fourth example it is possible to make all blocks white in two operations: first operation is to change blocks 2 and 3 ( so the sequence is \" BBW\" ) , and then change blocks 1 and 2 ( so all blocks are white) .",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1271B"
  },
  {
    "title": "Suits",
    "url": "https://codeforces.com/problemset/problem/1271/A",
    "history": "A new delivery of clothing has arrived today to the clothing store. This delivery consists of a ties, b scarves, c vests and d jackets. The store does not sell single clothing items \u2014 instead, it sells suits of two types: a suit of the first type consists of one tie and one jacket; a suit of the second type consists of one scarf, one vest and one jacket. Each suit of the first type costs e coins, and each suit of the second type costs f coins. Calculate the maximum possible cost of a set of suits that can be composed from the delivered clothing items. Note that one item cannot be used in more than one suit ( though some items may be left unused) .",
    "input": "The first line contains one integer a ( 1 \u2264 a \u2264 100 000) \u2014 the number of ties. The second line contains one integer b ( 1 \u2264 b \u2264 100 000) \u2014 the number of scarves. The third line contains one integer c ( 1 \u2264 c \u2264 100 000) \u2014 the number of vests. The fourth line contains one integer d ( 1 \u2264 d \u2264 100 000) \u2014 the number of jackets. The fifth line contains one integer e ( 1 \u2264 e \u2264 1 000) \u2014 the cost of one suit of the first type. The sixth line contains one integer f ( 1 \u2264 f \u2264 1 000) \u2014 the cost of one suit of the second type.",
    "output": "Print one integer \u2014 the maximum total cost of some set of suits that can be composed from the delivered items.",
    "note": "It is possible to compose three suits of the second type in the first example, and their total cost will be 6 . Since all jackets will be used, it' s impossible to add anything to this set. The best course of action in the second example is to compose nine suits of the first type and eleven suits of the second type. The total cost is 9 \u00b7 4 + 11 \u00b7 6 = 102 .",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1271A"
  },
  {
    "title": "Interesting Subarray",
    "url": "https://codeforces.com/problemset/problem/1270/B",
    "history": "For an array a of integers let' s denote its maximal element as max( a) , and minimal as min( a) . We will call an array a of k integers interesting if max( a) - min( a) \u2265 k . For example, array [ 1, 3, 4, 3] isn' t interesting as max( a) - min( a) = 4 - 1 = 3 < 4 while array [ 7, 3, 0, 4, 3] is as max( a) - min( a) = 7 - 0 = 7 \u2265 5 . You are given an array a of n integers. Find some interesting nonempty subarray of a , or tell that it doesn' t exist. An array b is a subarray of an array a if b can be obtained from a by deletion of several ( possibly, zero or all) elements from the beginning and several ( possibly, zero or all) elements from the end. In particular, an array is a subarray of itself.",
    "input": "The first line contains integer number t ( 1 \u2264 t \u2264 10 000 ) . Then t test cases follow. The first line of each test case contains a single integer n ( 2\u2264 n \u2264 2\u00b7 10^ 5 ) \u2014 the length of the array. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 0\u2264 a_ i \u2264 10^ 9 ) \u2014 the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case, output \" NO\" in a separate line if there is no interesting nonempty subarray in a . Otherwise, output \" YES\" in a separate line. In the next line, output two integers l and r ( 1\u2264 l \u2264 r \u2264 n ) \u2014 bounds of the chosen subarray. If there are multiple answers, print any. You can print each letter in any case ( upper or lower) .",
    "note": "In the second test case of the example, one of the interesting subarrays is a = [ 2, 0, 1, 9] : max( a) - min( a) = 9 - 0 = 9 \u2265 4 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1270B"
  },
  {
    "title": "Card Game",
    "url": "https://codeforces.com/problemset/problem/1270/A",
    "history": "Two players decided to play one interesting card game. There is a deck of n cards, with values from 1 to n . The values of cards are pairwise different ( this means that no two different cards have equal values) . At the beginning of the game, the deck is completely distributed between players such that each player has at least one card. The game goes as follows: on each turn, each player chooses one of their cards ( whichever they want) and puts on the table, so that the other player doesn' t see which card they chose. After that, both cards are revealed, and the player, value of whose card was larger, takes both cards in his hand. Note that as all cards have different values, one of the cards will be strictly larger than the other one. Every card may be played any amount of times. The player loses if he doesn' t have any cards. For example, suppose that n = 5 , the first player has cards with values 2 and 3 , and the second player has cards with values 1 , 4 , 5 . Then one possible flow of the game is: The first player chooses the card 3 . The second player chooses the card 1 . As 3> 1 , the first player gets both cards. Now the first player has cards 1 , 2 , 3 , the second player has cards 4 , 5 . The first player chooses the card 3 . The second player chooses the card 4 . As 3< 4 , the second player gets both cards. Now the first player has cards 1 , 2 . The second player has cards 3 , 4 , 5 . The first player chooses the card 1 . The second player chooses the card 3 . As 1< 3 , the second player gets both cards. Now the first player has only the card 2 . The second player has cards 1 , 3 , 4 , 5 . The first player chooses the card 2 . The second player chooses the card 4 . As 2< 4 , the second player gets both cards. Now the first player is out of cards and loses. Therefore, the second player wins. Who will win if both players are playing optimally? It can be shown that one of the players has a winning strategy.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases t ( 1 \u2264 t \u2264 100 ) . The description of the test cases follows. The first line of each test case contains three integers n , k_ 1 , k_ 2 ( 2 \u2264 n \u2264 100, 1 \u2264 k_ 1 \u2264 n - 1, 1 \u2264 k_ 2 \u2264 n - 1, k_ 1 + k_ 2 = n ) \u2014 the number of cards, number of cards owned by the first player and second player correspondingly. The second line of each test case contains k_ 1 integers a_ 1, . . . , a_ k_ 1 ( 1 \u2264 a_ i \u2264 n ) \u2014 the values of cards of the first player. The third line of each test case contains k_ 2 integers b_ 1, . . . , b_ k_ 2 ( 1 \u2264 b_ i \u2264 n ) \u2014 the values of cards of the second player. It is guaranteed that the values of all cards are different.",
    "output": "For each test case, output \" YES\" in a separate line, if the first player wins. Otherwise, output \" NO\" in a separate line. You can print each letter in any case ( upper or lower) .",
    "note": "In the first test case of the example, there is only one possible move for every player: the first player will put 2 , the second player will put 1 . 2> 1 , so the first player will get both cards and will win. In the second test case of the example, it can be shown that it is the second player who has a winning strategy. One possible flow of the game is illustrated in the statement.",
    "topics": [
      "games",
      "greedy",
      "math"
    ],
    "id": "1270A"
  },
  {
    "title": "Domino for Young",
    "url": "https://codeforces.com/problemset/problem/1268/B",
    "history": "You are given a Young diagram. Given diagram is a histogram with n columns of lengths a_ 1, a_ 2, . . . , a_ n ( a_ 1 \u2265 a_ 2 \u2265. . . \u2265 a_ n \u2265 1 ) . Young diagram for a= [ 3, 2, 2, 2, 1] . Your goal is to find the largest number of non- overlapping dominos that you can draw inside of this histogram, a domino is a 1 \u00d7 2 or 2 \u00d7 1 rectangle.",
    "input": "The first line of input contain one integer n ( 1 \u2264 n \u2264 300 000 ) : the number of columns in the given histogram. The next line of input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 300 000, a_ i \u2265 a_ i+ 1 ) : the lengths of columns.",
    "output": "Output one integer: the largest number of non- overlapping dominos that you can draw inside of the given Young diagram.",
    "note": "Some of the possible solutions for the example:",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1268B"
  },
  {
    "title": "Long Beautiful Integer",
    "url": "https://codeforces.com/problemset/problem/1268/A",
    "history": "You are given an integer x of n digits a_ 1, a_ 2, . . . , a_ n , which make up its decimal notation in order from left to right. Also, you are given a positive integer k < n . Let' s call integer b_ 1, b_ 2, . . . , b_ m beautiful if b_ i = b_ i+ k for each i , such that 1 \u2264 i \u2264 m - k . You need to find the smallest beautiful integer y , such that y \u2265 x .",
    "input": "The first line of input contains two integers n, k ( 2 \u2264 n \u2264 200 000, 1 \u2264 k < n ) : the number of digits in x and k . The next line of input contains n digits a_ 1, a_ 2, . . . , a_ n ( a_ 1 = \u0338 0 , 0 \u2264 a_ i \u2264 9 ) : digits of x .",
    "output": "In the first line print one integer m : the number of digits in y . In the next line print m digits b_ 1, b_ 2, . . . , b_ m ( b_ 1 = \u0338 0 , 0 \u2264 b_ i \u2264 9 ) : digits of y .",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation",
      "strings"
    ],
    "id": "1268A"
  },
  {
    "title": "Just Arrange the Icons",
    "url": "https://codeforces.com/problemset/problem/1267/J",
    "history": "BerPhone X is almost ready for release with n applications being preinstalled on the phone. A category of an application characterizes a genre or a theme of this application ( like \" game\" , \" business\" , or \" education\" ) . The categories are given as integers between 1 and n , inclusive; the i - th application has category c_ i . You can choose m \u2014 the number of screens and s \u2014 the size of each screen. You need to fit all n icons of the applications ( one icon representing one application) meeting the following requirements: On each screen, all the icons must belong to applications of the same category ( but different screens can contain icons of applications of the same category) ; Each screen must be either completely filled with icons ( the number of icons on the screen is equal to s ) or almost filled with icons ( the number of icons is equal to s- 1 ) . Your task is to find the minimal possible number of screens m .",
    "input": "The first line contains an integer t ( 1 \u2264 t \u2264 10 000 ) \u2014 the number of test cases in the input. Then t test cases follow. The first line of each test case contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 6 ) \u2014 the number of the icons. The second line contains n integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 n ) , where c_ i is the category of the i - th application. It is guaranteed that the sum of the values of n for all test cases in the input does not exceed 2\u00b710^ 6 .",
    "output": "Print t integers \u2014 the answers to the given test cases in the order they follow in the input. The answer to a test case is an integer m \u2014 the minimum number of screens on which all n icons can be placed satisfying the given requirements.",
    "note": "In the first test case of the example, all the icons can be placed on three screens of size 4 : a screen with 4 icons of the category 1 , a screen with 3 icons of the category 1 , and a screen with 4 icons of the category 5 .",
    "topics": [
      "greedy",
      "implementation",
      "math"
    ],
    "id": "1267J"
  },
  {
    "title": "Elections",
    "url": "https://codeforces.com/problemset/problem/1267/E",
    "history": "Byteburg Senate elections are coming. Usually \" United Byteland\" , the ruling Byteland party, takes all the seats in the Senate to ensure stability and sustainable development. But this year there is one opposition candidate in one of the constituencies. Even one opposition member can disturb the stability in the Senate, so the head of the Party asks you to ensure that the opposition candidate will not be elected. There are n candidates, numbered from 1 to n . Candidate n is the opposition candidate. There are m polling stations in the constituency, numbered from 1 to m . You know the number of votes cast for each candidate at each polling station. The only thing you can do to prevent the election of the opposition candidate is to cancel the election results at some polling stations. The opposition candidate will be elected if the sum of the votes cast in their favor at all non- canceled stations will be strictly greater than the analogous sum for every other candidate. Your task is to prevent the election of the opposition candidate by canceling the election results at the minimal possible number of polling stations. Notice that solution always exists, because if you cancel the elections at all polling stations, the number of votes for each candidate will be 0, and the opposition candidate will not be elected.",
    "input": "The first line of the input contains two integers n and m ( 2\u2264 n\u2264 100 ; 1\u2264 m \u2264 100 ) \u2014 the number of candidates and the number of polling stations. The next m lines contain the election results at each polling station with n numbers on each line. In the i - th line the j - th number is a_ i, j \u2014 the number of votes cast for the candidate j at the station i ( 0\u2264 a_ i, j\u2264 1 000 ) .",
    "output": "In the first line output integer k \u2014 the minimal number of the polling stations in which you need to cancel the election results. In the second line output k integers \u2014 the indices of canceled polling stations, in any order. If there are multiple ways to cancel results at k stations, output any one of them.",
    "note": "In the first example, the candidates from 1 to 5 received 14, 12, 13, 15, and 24 votes correspondingly. The opposition candidate has the most votes. However, if you cancel the election results at the first and the third polling stations, then only the result from the second polling station remains and the vote sums become 3, 7, 5, 6, and 7, without the opposition candidate being in the lead anymore.",
    "topics": [
      "greedy"
    ],
    "id": "1267E"
  },
  {
    "title": "Spaceship Solitaire",
    "url": "https://codeforces.com/problemset/problem/1266/E",
    "history": "Bob is playing a game of Spaceship Solitaire. The goal of this game is to build a spaceship. In order to do this, he first needs to accumulate enough resources for the construction. There are n types of resources, numbered 1 through n . Bob needs at least a_ i pieces of the i - th resource to build the spaceship. The number a_ i is called the goal for resource i . Each resource takes 1 turn to produce and in each turn only one resource can be produced. However, there are certain milestones that speed up production. Every milestone is a triple ( s_ j, t_ j, u_ j) , meaning that as soon as Bob has t_ j units of the resource s_ j , he receives one unit of the resource u_ j for free, without him needing to spend a turn. It is possible that getting this free resource allows Bob to claim reward for another milestone. This way, he can obtain a large number of resources in a single turn. The game is constructed in such a way that there are never two milestones that have the same s_ j and t_ j , that is, the award for reaching t_ j units of resource s_ j is at most one additional resource. A bonus is never awarded for 0 of any resource, neither for reaching the goal a_ i nor for going past the goal \u2014 formally, for every milestone 0 < t_ j < a_ s_ j . A bonus for reaching certain amount of a resource can be the resource itself, that is, s_ j = u_ j . Initially there are no milestones. You are to process q updates, each of which adds, removes or modifies a milestone. After every update, output the minimum number of turns needed to finish the game, that is, to accumulate at least a_ i of i - th resource for each i \u2208 [ 1, n] .",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of types of resources. The second line contains n space separated integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , the i - th of which is the goal for the i - th resource. The third line contains a single integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of updates to the game milestones. Then q lines follow, the j - th of which contains three space separated integers s_ j , t_ j , u_ j ( 1 \u2264 s_ j \u2264 n , 1 \u2264 t_ j < a_ s_ j , 0 \u2264 u_ j \u2264 n ) . For each triple, perform the following actions: First, if there is already a milestone for obtaining t_ j units of resource s_ j , it is removed. If u_ j = 0 , no new milestone is added. If u_ j = \u0338 0 , add the following milestone: \" For reaching t_ j units of resource s_ j , gain one free piece of u_ j . \" Output the minimum number of turns needed to win the game.",
    "output": "Output q lines, each consisting of a single integer, the i - th represents the answer after the i - th update.",
    "note": "After the first update, the optimal strategy is as follows. First produce 2 once, which gives a free resource 1 . Then, produce 2 twice and 1 once, for a total of four turns. After the second update, the optimal strategy is to produce 2 three times \u2014 the first two times a single unit of resource 1 is also granted. After the third update, the game is won as follows. First produce 2 once. This gives a free unit of 1 . This gives additional bonus of resource 1 . After the first turn, the number of resources is thus [ 2, 1] . Next, produce resource 2 again, which gives another unit of 1 . After this, produce one more unit of 2 . The final count of resources is [ 3, 3] , and three turns are needed to reach this situation. Notice that we have more of resource 1 than its goal, which is of no use.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1266E"
  },
  {
    "title": "Decreasing Debts",
    "url": "https://codeforces.com/problemset/problem/1266/D",
    "history": "There are n people in this world, conveniently numbered 1 through n . They are using burles to buy goods and services. Occasionally, a person might not have enough currency to buy what he wants or needs, so he borrows money from someone else, with the idea that he will repay the loan later with interest. Let d( a, b) denote the debt of a towards b , or 0 if there is no such debt. Sometimes, this becomes very complex, as the person lending money can run into financial troubles before his debtor is able to repay his debt, and finds himself in the need of borrowing money. When this process runs for a long enough time, it might happen that there are so many debts that they can be consolidated. There are two ways this can be done: Let d( a, b) > 0 and d( c, d) > 0 such that a = \u0338 c or b = \u0338 d . We can decrease the d( a, b) and d( c, d) by z and increase d( c, b) and d( a, d) by z , where 0 < z \u2264min( d( a, b) , d( c, d) ) . Let d( a, a) > 0 . We can set d( a, a) to 0 . The total debt is defined as the sum of all debts: \u03a3_ d = \u2211_ a, b d( a, b) Your goal is to use the above rules in any order any number of times, to make the total debt as small as possible. Note that you don' t have to minimise the number of non- zero debts, only the total debt.",
    "input": "The first line contains two space separated integers n ( 1 \u2264 n \u2264 10^ 5 ) and m ( 0 \u2264 m \u2264 3\u00b7 10^ 5 ) , representing the number of people and the number of debts, respectively. m lines follow, each of which contains three space separated integers u_ i , v_ i ( 1 \u2264 u_ i, v_ i \u2264 n, u_ i = \u0338 v_ i ) , d_ i ( 1 \u2264 d_ i \u2264 10^ 9 ) , meaning that the person u_ i borrowed d_ i burles from person v_ i .",
    "output": "On the first line print an integer m' ( 0 \u2264 m' \u2264 3\u00b7 10^ 5 ) , representing the number of debts after the consolidation. It can be shown that an answer always exists with this additional constraint. After that print m' lines, i - th of which contains three space separated integers u_ i, v_ i, d_ i , meaning that the person u_ i owes the person v_ i exactly d_ i burles. The output must satisfy 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i and 0 < d_ i \u2264 10^ 18 . For each pair i = \u0338 j , it should hold that u_ i = \u0338 u_ j or v_ i = \u0338 v_ j . In other words, each pair of people can be included at most once in the output.",
    "note": "In the first example the optimal sequence of operations can be the following: Perform an operation of the first type with a = 1 , b = 2 , c = 2 , d = 3 and z = 5 . The resulting debts are: d( 1, 2) = 5 , d( 2, 2) = 5 , d( 1, 3) = 5 , all other debts are 0 ; Perform an operation of the second type with a = 2 . The resulting debts are: d( 1, 2) = 5 , d( 1, 3) = 5 , all other debts are 0 . In the second example the optimal sequence of operations can be the following: Perform an operation of the first type with a = 1 , b = 2 , c = 3 , d = 1 and z = 10 . The resulting debts are: d( 3, 2) = 10 , d( 2, 3) = 15 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the first type with a = 2 , b = 3 , c = 3 , d = 2 and z = 10 . The resulting debts are: d( 2, 2) = 10 , d( 3, 3) = 10 , d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 2 . The resulting debts are: d( 3, 3) = 10 , d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 3 . The resulting debts are: d( 2, 3) = 5 , d( 1, 1) = 10 , all other debts are 0 ; Perform an operation of the second type with a = 1 . The resulting debts are: d( 2, 3) = 5 , all other debts are 0 .",
    "topics": [
      "constructive algorithms",
      "data structures",
      "graphs",
      "greedy",
      "implementation",
      "math",
      "two pointers"
    ],
    "id": "1266D"
  },
  {
    "title": "Diverse Matrix",
    "url": "https://codeforces.com/problemset/problem/1266/C",
    "history": "Let a be a matrix of size r \u00d7 c containing positive integers, not necessarily distinct. Rows of the matrix are numbered from 1 to r , columns are numbered from 1 to c . We can construct an array b consisting of r + c integers as follows: for each i \u2208 [ 1, r] , let b_ i be the greatest common divisor of integers in the i - th row, and for each j \u2208 [ 1, c] let b_ r+ j be the greatest common divisor of integers in the j - th column. We call the matrix diverse if all r + c numbers b_ k ( k \u2208 [ 1, r + c] ) are pairwise distinct. The magnitude of a matrix equals to the maximum of b_ k . For example, suppose we have the following matrix: [ 2 9 7; 4 144 84 ] We construct the array b : b_ 1 is the greatest common divisor of 2 , 9 , and 7 , that is 1 ; b_ 2 is the greatest common divisor of 4 , 144 , and 84 , that is 4 ; b_ 3 is the greatest common divisor of 2 and 4 , that is 2 ; b_ 4 is the greatest common divisor of 9 and 144 , that is 9 ; b_ 5 is the greatest common divisor of 7 and 84 , that is 7 . So b = [ 1, 4, 2, 9, 7] . All values in this array are distinct, so the matrix is diverse. The magnitude is equal to 9 . For a given r and c , find a diverse matrix that minimises the magnitude. If there are multiple solutions, you may output any of them. If there are no solutions, output a single integer 0 .",
    "input": "The only line in the input contains two space separated integers r and c ( 1 \u2264 r, c \u2264 500 ) \u2014 the number of rows and the number of columns of the matrix to be found.",
    "output": "If there is no solution, output a single integer 0 . Otherwise, output r rows. The i - th of them should contain c space- separated integers, the j - th of which is a_ i, j \u2014 the positive integer in the i - th row and j - th column of a diverse matrix minimizing the magnitude. Furthermore, it must hold that 1 \u2264 a_ i, j\u2264 10^ 9 . It can be shown that if a solution exists, there is also a solution with this additional constraint ( still having minimum possible magnitude) .",
    "note": "In the first example, the GCDs of rows are b_ 1 = 4 and b_ 2 = 1 , and the GCDs of columns are b_ 3 = 2 and b_ 4 = 3 . All GCDs are pairwise distinct and the maximum of them is 4 . Since the GCDs have to be distinct and at least 1 , it is clear that there are no diverse matrices of size 2 \u00d7 2 with magnitude smaller than 4 . In the second example, no matter what a_ 1, 1 is, b_ 1 = b_ 2 will always hold, so there are no diverse matrices.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1266C"
  },
  {
    "title": "Beautiful String",
    "url": "https://codeforces.com/problemset/problem/1265/A",
    "history": "A string is called beautiful if no two consecutive characters are equal. For example, \" ababcb\" , \" a\" and \" abab\" are beautiful strings, while \" aaaaaa\" , \" abaa\" and \" bb\" are not. Ahcl wants to construct a beautiful string. He has a string s , consisting of only characters ' a' , ' b' , ' c' and ' ? ' . Ahcl needs to replace each character ' ? ' with one of the three characters ' a' , ' b' or ' c' , such that the resulting string is beautiful. Please help him! More formally, after replacing all characters ' ? ' , the condition s_ i = \u0338 s_ i+ 1 should be satisfied for all 1 \u2264 i \u2264 | s| - 1 , where | s| is the length of the string s .",
    "input": "The first line contains positive integer t ( 1 \u2264 t \u2264 1000 ) \u2014 the number of test cases. Next t lines contain the descriptions of test cases. Each line contains a non- empty string s consisting of only characters ' a' , ' b' , ' c' and ' ? ' . It is guaranteed that in each test case a string s has at least one character ' ? ' . The sum of lengths of strings s in all test cases does not exceed 10^ 5 .",
    "output": "For each test case given in the input print the answer in the following format: If it is impossible to create a beautiful string, print \" - 1\" ( without quotes) ; Otherwise, print the resulting beautiful string after replacing all ' ? ' characters. If there are multiple answers, you can print any of them.",
    "note": "In the first test case, all possible correct answers are \" ababcb\" , \" abcacb\" , \" abcbcb\" , \" acabcb\" and \" acbacb\" . The two answers \" abcbab\" and \" abaabc\" are incorrect, because you can replace only ' ? ' characters and the resulting string must be beautiful. In the second test case, it is impossible to create a beautiful string, because the 4 - th and 5 - th characters will be always equal. In the third test case, the only answer is \" acbac\" .",
    "topics": [
      "constructive algorithms",
      "greedy"
    ],
    "id": "1265A"
  },
  {
    "title": "Beautiful Sequence",
    "url": "https://codeforces.com/problemset/problem/1264/B",
    "history": "An integer sequence is called beautiful if the difference between any two consecutive numbers is equal to 1 . More formally, a sequence s_ 1, s_ 2, . . . , s_ n is beautiful if | s_ i - s_ i+ 1| = 1 for all 1 \u2264 i \u2264 n - 1 . Trans has a numbers 0 , b numbers 1 , c numbers 2 and d numbers 3 . He wants to construct a beautiful sequence using all of these a + b + c + d numbers. However, it turns out to be a non- trivial task, and Trans was not able to do it. Could you please help Trans?",
    "input": "The only input line contains four non- negative integers a , b , c and d ( 0 < a+ b+ c+ d \u2264 10^ 5 ) .",
    "output": "If it is impossible to construct a beautiful sequence satisfying the above constraints, print \" NO\" ( without quotes) in one line. Otherwise, print \" YES\" ( without quotes) in the first line. Then in the second line print a + b + c + d integers, separated by spaces \u2014 a beautiful sequence. There should be a numbers equal to 0 , b numbers equal to 1 , c numbers equal to 2 and d numbers equal to 3 . If there are multiple answers, you can print any of them.",
    "note": "In the first test, it is easy to see, that the sequence is beautiful because the difference between any two consecutive numbers is equal to 1 . Also, there are exactly two numbers, equal to 0 , 1 , 2 and exactly one number, equal to 3 . It can be proved, that it is impossible to construct beautiful sequences in the second and third tests.",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy"
    ],
    "id": "1264B"
  },
  {
    "title": "Beautiful Regional Contest",
    "url": "https://codeforces.com/problemset/problem/1264/A",
    "history": "So the Beautiful Regional Contest ( BeRC) has come to an end! n students took part in the contest. The final standings are already known: the participant in the i - th place solved p_ i problems. Since the participants are primarily sorted by the number of solved problems, then p_ 1 \u2265 p_ 2 \u2265. . . \u2265 p_ n . Help the jury distribute the gold, silver and bronze medals. Let their numbers be g , s and b , respectively. Here is a list of requirements from the rules, which all must be satisfied: for each of the three types of medals, at least one medal must be awarded ( that is, g> 0 , s> 0 and b> 0 ) ; the number of gold medals must be strictly less than the number of silver and the number of bronze ( that is, g< s and g< b , but there are no requirements between s and b ) ; each gold medalist must solve strictly more problems than any awarded with a silver medal; each silver medalist must solve strictly more problems than any awarded a bronze medal; each bronze medalist must solve strictly more problems than any participant not awarded a medal; the total number of medalists g+ s+ b should not exceed half of all participants ( for example, if n= 21 , then you can award a maximum of 10 participants, and if n= 26 , then you can award a maximum of 13 participants) . The jury wants to reward with medals the total maximal number participants ( i. e. to maximize g+ s+ b ) so that all of the items listed above are fulfilled. Help the jury find such a way to award medals.",
    "input": "The first line of the input contains an integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases in the input. Then t test cases follow. The first line of a test case contains an integer n ( 1 \u2264 n \u2264 4\u00b710^ 5 ) \u2014 the number of BeRC participants. The second line of a test case contains integers p_ 1, p_ 2, . . . , p_ n ( 0 \u2264 p_ i \u2264 10^ 6 ) , where p_ i is equal to the number of problems solved by the i - th participant from the final standings. The values p_ i are sorted in non- increasing order, i. e. p_ 1 \u2265 p_ 2 \u2265. . . \u2265 p_ n . The sum of n over all test cases in the input does not exceed 4\u00b710^ 5 .",
    "output": "Print t lines, the j - th line should contain the answer to the j - th test case. The answer consists of three non- negative integers g, s, b . Print g= s= b= 0 if there is no way to reward participants with medals so that all requirements from the statement are satisfied at the same time. Otherwise, print three positive numbers g, s, b \u2014 the possible number of gold, silver and bronze medals, respectively. The sum of g+ s+ b should be the maximum possible. If there are several answers, print any of them.",
    "note": "In the first test case, it is possible to reward 1 gold, 2 silver and 3 bronze medals. In this case, the participant solved 5 tasks will be rewarded with the gold medal, participants solved 4 tasks will be rewarded with silver medals, participants solved 2 or 3 tasks will be rewarded with bronze medals. Participants solved exactly 1 task won' t be rewarded. It' s easy to see, that in this case, all conditions are satisfied and it is possible to reward participants in this way. It is impossible to give more than 6 medals because the number of medals should not exceed half of the number of participants. The answer 1 , 3 , 2 is also correct in this test case. In the second and third test cases, it is impossible to reward medals, because at least one medal of each type should be given, but the number of medals should not exceed half of the number of participants.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1264A"
  },
  {
    "title": "PIN Codes",
    "url": "https://codeforces.com/problemset/problem/1263/B",
    "history": "A PIN code is a string that consists of exactly 4 digits. Examples of possible PIN codes: 7013, 0000 and 0990. Please note that the PIN code can begin with any digit, even with 0. Polycarp has n ( 2 \u2264 n \u2264 10 ) bank cards, the PIN code of the i - th card is p_ i . Polycarp has recently read a recommendation that it is better to set different PIN codes on different cards. Thus he wants to change the minimal number of digits in the PIN codes of his cards so that all n codes would become different. Formally, in one step, Polycarp picks i - th card ( 1 \u2264 i \u2264 n ) , then in its PIN code p_ i selects one position ( from 1 to 4 ) , and changes the digit in this position to any other. He needs to change the minimum number of digits so that all PIN codes become different. Polycarp quickly solved this problem. Can you solve it?",
    "input": "The first line contains integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases in the input. Then test cases follow. The first line of each of t test sets contains a single integer n ( 2 \u2264 n \u2264 10 ) \u2014 the number of Polycarp' s bank cards. The next n lines contain the PIN codes p_ 1, p_ 2, . . . , p_ n \u2014 one per line. The length of each of them is 4 . All PIN codes consist of digits only.",
    "output": "Print the answers to t test sets. The answer to each set should consist of a n + 1 linesIn the first line print k \u2014 the least number of changes to make all PIN codes different. In the next n lines output the changed PIN codes in the order corresponding to their appearance in the input. If there are several optimal answers, print any of them.",
    "note": "",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1263B"
  },
  {
    "title": "Tournament",
    "url": "https://codeforces.com/problemset/problem/1260/E",
    "history": "You are organizing a boxing tournament, where n boxers will participate ( n is a power of 2 ) , and your friend is one of them. All boxers have different strength from 1 to n , and boxer i wins in the match against boxer j if and only if i is stronger than j . The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/ 2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains ( who is declared the winner) . Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower. Furthermore, during each stage you distribute the boxers into pairs as you wish. The boxer with strength i can be bribed if you pay him a_ i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?",
    "input": "The first line contains one integer n ( 2 \u2264 n \u2264 2^ 18 ) \u2014 the number of boxers. n is a power of 2 . The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n , where a_ i is the number of dollars you have to pay if you want to bribe the boxer with strength i . Exactly one of a_ i is equal to - 1 \u2014 it means that the boxer with strength i is your friend. All other values are in the range [ 1, 10^ 9] .",
    "output": "Print one integer \u2014 the minimum number of dollars you have to pay so your friend wins.",
    "note": "In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament. In the second test case you can distribute boxers as follows ( your friend is number 2 ) : 1 : 2, 8 : 5, 7 : 3, 6 : 4 ( boxers 2, 8, 7 and 6 advance to the next stage) ; 2 : 6, 8 : 7 ( boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6 ) ; 2 : 8 ( you have to bribe the boxer with strength 8 ) ;",
    "topics": [
      "brute force",
      "dp",
      "greedy"
    ],
    "id": "1260E"
  },
  {
    "title": "A Game with Traps",
    "url": "https://codeforces.com/problemset/problem/1260/D",
    "history": "You are playing a computer game, where you lead a party of m soldiers. Each soldier is characterised by his agility a_ i . The level you are trying to get through can be represented as a straight line segment from point 0 ( where you and your squad is initially located) to point n + 1 ( where the boss is located) . The level is filled with k traps. Each trap is represented by three numbers l_ i , r_ i and d_ i . l_ i is the location of the trap, and d_ i is the danger level of the trap: whenever a soldier with agility lower than d_ i steps on a trap ( that is, moves to the point l_ i ) , he gets instantly killed. Fortunately, you can disarm traps: if you move to the point r_ i , you disarm this trap, and it no longer poses any danger to your soldiers. Traps don' t affect you, only your soldiers. You have t seconds to complete the level \u2014 that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won' t be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions: if your location is x , you may move to x + 1 or x - 1 . This action consumes one second; if your location is x and the location of your squad is x , you may move to x + 1 or to x - 1 with your squad in one second. You may not perform this action if it puts some soldier in danger ( i. e. the point your squad is moving into contains a non- disarmed trap with d_ i greater than agility of some soldier from the squad) . This action consumes one second; if your location is x and there is a trap i with r_ i = x , you may disarm this trap. This action is done instantly ( it consumes no time) . Note that after each action both your coordinate and the coordinate of your squad should be integers. You have to choose the maximum number of soldiers such that they all can be brought from the point 0 to the point n + 1 ( where the boss waits) in no more than t seconds.",
    "input": "The first line contains four integers m , n , k and t ( 1 \u2264 m, n, k, t \u2264 2 \u00b7 10^ 5 , n < t ) \u2014 the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively. The second line contains m integers a_ 1 , a_ 2 , . . . , a_ m ( 1 \u2264 a_ i \u2264 2 \u00b7 10^ 5 ) , where a_ i is the agility of the i - th soldier. Then k lines follow, containing the descriptions of traps. Each line contains three numbers l_ i , r_ i and d_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 n , 1 \u2264 d_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.",
    "output": "Print one integer \u2014 the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than t seconds.",
    "note": "In the first example you may take soldiers with agility 3 , 4 and 5 with you. The course of action is as follows: go to 2 without your squad; disarm the trap 2 ; go to 3 without your squad; disartm the trap 3 ; go to 0 without your squad; go to 7 with your squad. The whole plan can be executed in 13 seconds.",
    "topics": [
      "binary search",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1260D"
  },
  {
    "title": "Infinite Fence",
    "url": "https://codeforces.com/problemset/problem/1260/C",
    "history": "You are a rebel leader and you are planning to start a revolution in your country. But the evil Government found out about your plans and set your punishment in the form of correctional labor. You must paint a fence which consists of 10^ 100 planks in two colors in the following way ( suppose planks are numbered from left to right from 0 ) : if the index of the plank is divisible by r ( such planks have indices 0 , r , 2r and so on) then you must paint it red; if the index of the plank is divisible by b ( such planks have indices 0 , b , 2b and so on) then you must paint it blue; if the index is divisible both by r and b you can choose the color to paint the plank; otherwise, you don' t need to paint the plank at all ( and it is forbidden to spent paint on it) . Furthermore, the Government added one additional restriction to make your punishment worse. Let' s list all painted planks of the fence in ascending order: if there are k consecutive planks with the same color in this list, then the Government will state that you failed the labor and execute you immediately. If you don' t paint the fence according to the four aforementioned conditions, you will also be executed. The question is: will you be able to accomplish the labor ( the time is not important) or the execution is unavoidable and you need to escape at all costs.",
    "input": "The first line contains single integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of test cases. The next T lines contain descriptions of test cases \u2014 one per line. Each test case contains three integers r , b , k ( 1 \u2264 r, b \u2264 10^ 9 , 2 \u2264 k \u2264 10^ 9 ) \u2014 the corresponding coefficients.",
    "output": "Print T words \u2014 one per line. For each test case print REBEL ( case insensitive) if the execution is unavoidable or OBEY ( case insensitive) otherwise.",
    "note": "",
    "topics": [
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1260C"
  },
  {
    "title": "Divisor Set",
    "url": "https://codeforces.com/problemset/problem/1257/G",
    "history": "You are given an integer x represented as a product of n its prime divisors p_ 1 \u00b7 p_ 2, \u00b7. . . \u00b7 p_ n . Let S be the set of all positive integer divisors of x ( including 1 and x itself) . We call a set of integers D good if ( and only if) there is no pair a \u2208 D , b \u2208 D such that a b and a divides b . Find a good subset of S with maximum possible size. Since the answer can be large, print the size of the subset modulo 998244353 .",
    "input": "The first line contains the single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of prime divisors in representation of x . The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( 2 \u2264 p_ i \u2264 3 \u00b7 10^ 6 ) \u2014 the prime factorization of x .",
    "output": "Print the maximum possible size of a good subset modulo 998244353 .",
    "note": "In the first sample, x = 2999999 \u00b7 43 \u00b7 2999957 and one of the maximum good subsets is { 43, 2999957, 2999999 } . In the second sample, x = 2 \u00b7 3 \u00b7 2 \u00b7 3 \u00b7 2 \u00b7 2 = 144 and one of the maximum good subsets is { 9, 12, 16 } .",
    "topics": [
      "divide and conquer",
      "fft",
      "greedy",
      "math",
      "number theory"
    ],
    "id": "1257G"
  },
  {
    "title": "The Contest",
    "url": "https://codeforces.com/problemset/problem/1257/E",
    "history": "A team of three programmers is going to play a contest. The contest consists of n problems, numbered from 1 to n . Each problem is printed on a separate sheet of paper. The participants have decided to divide the problem statements into three parts: the first programmer took some prefix of the statements ( some number of first paper sheets) , the third contestant took some suffix of the statements ( some number of last paper sheets) , and the second contestant took all remaining problems. But something went wrong \u2014 the statements were printed in the wrong order, so the contestants have received the problems in some random order. The first contestant has received problems a_ 1, 1, a_ 1, 2, . . . , a_ 1, k_ 1 . The second one has received problems a_ 2, 1, a_ 2, 2, . . . , a_ 2, k_ 2 . The third one has received all remaining problems ( a_ 3, 1, a_ 3, 2, . . . , a_ 3, k_ 3 ) . The contestants don' t want to play the contest before they redistribute the statements. They want to redistribute them so that the first contestant receives some prefix of the problemset, the third contestant receives some suffix of the problemset, and the second contestant receives all the remaining problems. During one move, some contestant may give one of their problems to other contestant. What is the minimum number of moves required to redistribute the problems? It is possible that after redistribution some participant ( or even two of them) will not have any problems.",
    "input": "The first line contains three integers k_ 1, k_ 2 and k_ 3 ( 1 \u2264 k_ 1, k_ 2, k_ 3 \u2264 2 \u00b7 10^ 5, k_ 1 + k_ 2 + k_ 3 \u2264 2 \u00b7 10^ 5 ) \u2014 the number of problems initially taken by the first, the second and the third participant, respectively. The second line contains k_ 1 integers a_ 1, 1, a_ 1, 2, . . . , a_ 1, k_ 1 \u2014 the problems initially taken by the first participant. The third line contains k_ 2 integers a_ 2, 1, a_ 2, 2, . . . , a_ 2, k_ 2 \u2014 the problems initially taken by the second participant. The fourth line contains k_ 3 integers a_ 3, 1, a_ 3, 2, . . . , a_ 3, k_ 3 \u2014 the problems initially taken by the third participant. It is guaranteed that no problem has been taken by two ( or three) participants, and each integer a_ i, j meets the condition 1 \u2264 a_ i, j\u2264 n , where n = k_ 1 + k_ 2 + k_ 3 .",
    "output": "Print one integer \u2014 the minimum number of moves required to redistribute the problems so that the first participant gets the prefix of the problemset, the third participant gets the suffix of the problemset, and the second participant gets all of the remaining problems.",
    "note": "In the first example the third contestant should give the problem 2 to the first contestant, so the first contestant has 3 first problems, the third contestant has 1 last problem, and the second contestant has 1 remaining problem. In the second example the distribution of problems is already valid: the first contestant has 3 first problems, the third contestant has 1 last problem, and the second contestant has 2 remaining problems. The best course of action in the third example is to give all problems to the third contestant. The best course of action in the fourth example is to give all problems to the second contestant.",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1257E"
  },
  {
    "title": "Yet Another Monster Killing Problem",
    "url": "https://codeforces.com/problemset/problem/1257/D",
    "history": "You play a computer game. In this game, you lead a party of m heroes, and you have to clear a dungeon with n monsters. Each monster is characterized by its power a_ i . Each hero is characterized by his power p_ i and endurance s_ i . The heroes clear the dungeon day by day. In the beginning of each day, you choose a hero ( exactly one) who is going to enter the dungeon this day. When the hero enters the dungeon, he is challenged by the first monster which was not defeated during the previous days ( so, if the heroes have already defeated k monsters, the hero fights with the monster k + 1 ) . When the hero fights the monster, there are two possible outcomes: if the monster' s power is strictly greater than the hero' s power, the hero retreats from the dungeon. The current day ends; otherwise, the monster is defeated. After defeating a monster, the hero either continues fighting with the next monster or leaves the dungeon. He leaves the dungeon either if he has already defeated the number of monsters equal to his endurance during this day ( so, the i - th hero cannot defeat more than s_ i monsters during each day) , or if all monsters are defeated \u2014 otherwise, he fights with the next monster. When the hero leaves the dungeon, the current day ends. Your goal is to defeat the last monster. What is the minimum number of days that you need to achieve your goal? Each day you have to use exactly one hero; it is possible that some heroes don' t fight the monsters at all. Each hero can be used arbitrary number of times.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases. Then the test cases follow. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of monsters in the dungeon. The second line contains n integers a_ 1 , a_ 2 , . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the power of the i - th monster. The third line contains one integer m ( 1 \u2264 m \u2264 2 \u00b7 10^ 5 ) \u2014 the number of heroes in your party. Then m lines follow, each describing a hero. Each line contains two integers p_ i and s_ i ( 1 \u2264 p_ i \u2264 10^ 9 , 1 \u2264 s_ i \u2264 n ) \u2014 the power and the endurance of the i - th hero. It is guaranteed that the sum of n + m over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of days you have to spend to defeat all of the monsters ( or - 1 if it is impossible) .",
    "note": "",
    "topics": [
      "binary search",
      "data structures",
      "dp",
      "greedy",
      "sortings",
      "two pointers"
    ],
    "id": "1257D"
  },
  {
    "title": "Dominated Subarray",
    "url": "https://codeforces.com/problemset/problem/1257/C",
    "history": "Let' s call an array t dominated by value v in the next situation. At first, array t should have at least 2 elements. Now, let' s calculate number of occurrences of each number num in t and define it as occ( num) . Then t is dominated ( by v ) if ( and only if) occ( v) > occ( v' ) for any other number v' . For example, arrays [ 1, 2, 3, 4, 5, 2] , [ 11, 11] and [ 3, 2, 3, 2, 3] are dominated ( by 2 , 11 and 3 respectevitely) but arrays [ 3] , [ 1, 2] and [ 3, 3, 2, 2, 1] are not. Small remark: since any array can be dominated only by one number, we can not specify this number and just say that array is either dominated or not. You are given array a_ 1, a_ 2, . . . , a_ n . Calculate its shortest dominated subarray or say that there are no such subarrays. The subarray of a is a contiguous part of the array a , i. e. the array a_ i, a_ i + 1, . . . , a_ j for some 1 \u2264 i \u2264 j \u2264 n .",
    "input": "The first line contains single integer T ( 1 \u2264 T \u2264 1000 ) \u2014 the number of test cases. Each test case consists of two lines. The first line contains single integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the length of the array a . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 n ) \u2014 the corresponding values of the array a . It' s guaranteed that the total length of all arrays in one test doesn' t exceed 2 \u00b7 10^ 5 .",
    "output": "Print T integers \u2014 one per test case. For each test case print the only integer \u2014 the length of the shortest dominated subarray, or - 1 if there are no such subarrays.",
    "note": "In the first test case, there are no subarrays of length at least 2 , so the answer is - 1 . In the second test case, the whole array is dominated ( by 1 ) and it' s the only dominated subarray. In the third test case, the subarray a_ 4, a_ 5, a_ 6 is the shortest dominated subarray. In the fourth test case, all subarrays of length more than one are dominated.",
    "topics": [
      "greedy",
      "implementation",
      "sortings",
      "strings",
      "two pointers"
    ],
    "id": "1257C"
  },
  {
    "title": "Two Rival Students",
    "url": "https://codeforces.com/problemset/problem/1257/A",
    "history": "You are the gym teacher in the school. There are n students in the row. And there are two rivalling students among them. The first one is in position a , the second in position b . Positions are numbered from 1 to n from left to right. Since they are rivals, you want to maximize the distance between them. If students are in positions p and s respectively, then distance between them is | p - s| . You can do the following operation at most x times: choose two adjacent ( neighbouring) students and swap them. Calculate the maximum distance between two rivalling students after at most x swaps.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. The only line of each test case contains four integers n , x , a and b ( 2 \u2264 n \u2264 100 , 0 \u2264 x \u2264 100 , 1 \u2264 a, b \u2264 n , a = \u0338 b ) \u2014 the number of students in the row, the number of swaps which you can do, and positions of first and second rivaling students respectively.",
    "output": "For each test case print one integer \u2014 the maximum distance between two rivaling students which you can obtain.",
    "note": "In the first test case you can swap students in positions 3 and 4 . And then the distance between the rivals is equal to | 4 - 2| = 2 . In the second test case you don' t have to swap students. In the third test case you can' t swap students.",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1257A"
  },
  {
    "title": "Yet Another Division Into Teams",
    "url": "https://codeforces.com/problemset/problem/1256/E",
    "history": "There are n students at your university. The programming skill of the i - th student is a_ i . As a coach, you want to divide them into teams to prepare them for the upcoming ICPC finals. Just imagine how good this university is if it has 2 \u00b7 10^ 5 students ready for the finals! Each team should consist of at least three students. Each student should belong to exactly one team. The diversity of a team is the difference between the maximum programming skill of some student that belongs to this team and the minimum programming skill of some student that belongs to this team ( in other words, if the team consists of k students with programming skills a[ i_ 1] , a[ i_ 2] , . . . , a[ i_ k] , then the diversity of this team is max_ j= 1^ k a[ i_ j] - min_ j= 1^ k a[ i_ j] ) . The total diversity is the sum of diversities of all teams formed. Your task is to minimize the total diversity of the division of students and find the optimal way to divide the students.",
    "input": "The first line of the input contains one integer n ( 3 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of students. The second line of the input contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) , where a_ i is the programming skill of the i - th student.",
    "output": "In the first line print two integers res and k \u2014 the minimum total diversity of the division of students and the number of teams in your division, correspondingly. In the second line print n integers t_ 1, t_ 2, . . . , t_ n ( 1 \u2264 t_ i \u2264 k ) , where t_ i is the number of team to which the i - th student belong. If there are multiple answers, you can print any. Note that you don' t need to minimize the number of teams. Each team should consist of at least three students.",
    "note": "In the first example, there is only one team with skills [ 1, 1, 2, 3, 4] so the answer is 3 . It can be shown that you cannot achieve a better answer. In the second example, there are two teams with skills [ 1, 2, 5] and [ 12, 13, 15] so the answer is 4 + 3 = 7 . In the third example, there are three teams with skills [ 1, 2, 5] , [ 129, 185, 581, 1041] and [ 1580, 1909, 8150] so the answer is 4 + 912 + 6570 = 7486 .",
    "topics": [
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1256E"
  },
  {
    "title": "Binary String Minimizing",
    "url": "https://codeforces.com/problemset/problem/1256/D",
    "history": "You are given a binary string of length n ( i. e. a string consisting of n characters ' 0' and ' 1' ) . In one move you can swap two adjacent characters of the string. What is the lexicographically minimum possible string you can obtain from the given one if you can perform no more than k moves? It is possible that you do not perform any moves at all. Note that you can swap the same pair of adjacent characters with indices i and i+ 1 arbitrary ( possibly, zero) number of times. Each such swap is considered a separate move. You have to answer q independent test cases.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 10^ 4 ) \u2014 the number of test cases. The first line of the test case contains two integers n and k ( 1 \u2264 n \u2264 10^ 6, 1 \u2264 k \u2264 n^ 2 ) \u2014 the length of the string and the number of moves you can perform. The second line of the test case contains one string consisting of n characters ' 0' and ' 1' . It is guaranteed that the sum of n over all test cases does not exceed 10^ 6 ( \u2211 n \u2264 10^ 6 ) .",
    "output": "For each test case, print the answer on it: the lexicographically minimum possible string of length n you can obtain from the given one if you can perform no more than k moves.",
    "note": "In the first example, you can change the string as follows: 11011010 \u219210111010 \u2192 01111010 \u2192 01110110 \u2192 01101110 \u2192 01011110 . In the third example, there are enough operations to make the string sorted.",
    "topics": [
      "greedy"
    ],
    "id": "1256D"
  },
  {
    "title": "Platforms Jumping",
    "url": "https://codeforces.com/problemset/problem/1256/C",
    "history": "There is a river of width n . The left bank of the river is cell 0 and the right bank is cell n + 1 ( more formally, the river can be represented as a sequence of n + 2 cells numbered from 0 to n + 1 ) . There are also m wooden platforms on a river, the i - th platform has length c_ i ( so the i - th platform takes c_ i consecutive cells of the river) . It is guaranteed that the sum of lengths of platforms does not exceed n . You are standing at 0 and want to reach n+ 1 somehow. If you are standing at the position x , you can jump to any position in the range [ x + 1; x + d] . However you don' t really like the water so you can jump only to such cells that belong to some wooden platform. For example, if d= 1 , you can jump only to the next position ( if it belongs to the wooden platform) . You can assume that cells 0 and n+ 1 belong to wooden platforms. You want to know if it is possible to reach n+ 1 from 0 if you can move any platform to the left or to the right arbitrary number of times ( possibly, zero) as long as they do not intersect each other ( but two platforms can touch each other) . It also means that you cannot change the relative order of platforms. Note that you should move platforms until you start jumping ( in other words, you first move the platforms and then start jumping) . For example, if n= 7 , m= 3 , d= 2 and c = [ 1, 2, 1] , then one of the ways to reach 8 from 0 is follow: The first example: n= 7 .",
    "input": "The first line of the input contains three integers n , m and d ( 1 \u2264 n, m, d \u2264 1000, m \u2264 n ) \u2014 the width of the river, the number of platforms and the maximum distance of your jump, correspondingly. The second line of the input contains m integers c_ 1, c_ 2, . . . , c_ m ( 1 \u2264 c_ i \u2264 n, \u2211_ i= 1^ m c_ i \u2264 n ) , where c_ i is the length of the i - th platform.",
    "output": "If it is impossible to reach n+ 1 from 0 , print NO in the first line. Otherwise, print YES in the first line and the array a of length n in the second line \u2014 the sequence of river cells ( excluding cell 0 and cell n + 1 ) . If the cell i does not belong to any platform, a_ i should be 0 . Otherwise, it should be equal to the index of the platform ( 1 - indexed, platforms are numbered from 1 to m in order of input) to which the cell i belongs. Note that all a_ i equal to 1 should form a contiguous subsegment of the array a of length c_ 1 , all a_ i equal to 2 should form a contiguous subsegment of the array a of length c_ 2 , . . . , all a_ i equal to m should form a contiguous subsegment of the array a of length c_ m . The leftmost position of 2 in a should be greater than the rightmost position of 1 , the leftmost position of 3 in a should be greater than the rightmost position of 2 , . . . , the leftmost position of m in a should be greater than the rightmost position of m- 1 . See example outputs for better understanding.",
    "note": "Consider the first example: the answer is [ 0, 1, 0, 2, 2, 0, 3] . The sequence of jumps you perform is 0 \u2192 2 \u2192 4 \u2192 5 \u2192 7 \u2192 8 . Consider the second example: it does not matter how to place the platform because you always can jump from 0 to 11 . Consider the third example: the answer is [ 0, 0, 0, 0, 1, 1, 0, 0, 0, 0] . The sequence of jumps you perform is 0 \u2192 5 \u2192 6 \u2192 11 .",
    "topics": [
      "greedy"
    ],
    "id": "1256C"
  },
  {
    "title": "Minimize the Permutation",
    "url": "https://codeforces.com/problemset/problem/1256/B",
    "history": "You are given a permutation of length n . Recall that the permutation is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [ 2, 3, 1, 5, 4] is a permutation, but [ 1, 2, 2] is not a permutation ( 2 appears twice in the array) and [ 1, 3, 4] is also not a permutation ( n= 3 but there is 4 in the array) . You can perform at most n- 1 operations with the given permutation ( it is possible that you don' t perform any operations at all) . The i - th operation allows you to swap elements of the given permutation on positions i and i+ 1 . Each operation can be performed at most once. The operations can be performed in arbitrary order. Your task is to find the lexicographically minimum possible permutation obtained by performing some of the given operations in some order. You can see the definition of the lexicographical order in the notes section. You have to answer q independent test cases. For example, let' s consider the permutation [ 5, 4, 1, 3, 2] . The minimum possible permutation we can obtain is [ 1, 5, 2, 4, 3] and we can do it in the following way: perform the second operation ( swap the second and the third elements) and obtain the permutation [ 5, 1, 4, 3, 2] ; perform the fourth operation ( swap the fourth and the fifth elements) and obtain the permutation [ 5, 1, 4, 2, 3] ; perform the third operation ( swap the third and the fourth elements) and obtain the permutation [ 5, 1, 2, 4, 3] . perform the first operation ( swap the first and the second elements) and obtain the permutation [ 1, 5, 2, 4, 3] ; Another example is [ 1, 2, 4, 3] . The minimum possible permutation we can obtain is [ 1, 2, 3, 4] by performing the third operation ( swap the third and the fourth elements) .",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 100 ) \u2014 the number of test cases. Then q test cases follow. The first line of the test case contains one integer n ( 1 \u2264 n \u2264 100 ) \u2014 the number of elements in the permutation. The second line of the test case contains n distinct integers from 1 to n \u2014 the given permutation.",
    "output": "For each test case, print the answer on it \u2014 the lexicograhically minimum possible permutation obtained by performing some of the given operations in some order.",
    "note": "Recall that the permutation p of length n is lexicographically less than the permutation q of length n if there is such index i \u2264 n that for all j from 1 to i - 1 the condition p_ j = q_ j is satisfied, and p_ i < q_ i . For example: p = [ 1, 3, 5, 2, 4] is less than q = [ 1, 3, 5, 4, 2] ( such i= 4 exists, that p_ i < q_ i and for each j < i holds p_ j = q_ j ) , p = [ 1, 2] is less than q = [ 2, 1] ( such i= 1 exists, that p_ i < q_ i and for each j < i holds p_ j = q_ j ) .",
    "topics": [
      "greedy"
    ],
    "id": "1256B"
  },
  {
    "title": "Send Boxes to Alice (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1254/B2",
    "history": "This is the harder version of the problem. In this version, 1 \u2264 n \u2264 10^ 6 and 0 \u2264 a_ i \u2264 10^ 6 . You can hack this problem if you locked it. But you can hack the previous problem only if you locked both problemsChristmas is coming, and our protagonist, Bob, is preparing a spectacular present for his long- time best friend Alice. This year, he decides to prepare n boxes of chocolate, numbered from 1 to n . Initially, the i - th box contains a_ i chocolate pieces. Since Bob is a typical nice guy, he will not send Alice n empty boxes. In other words, at least one of a_ 1, a_ 2, . . . , a_ n is positive. Since Alice dislikes coprime sets, she will be happy only if there exists some integer k > 1 such that the number of pieces in each box is divisible by k . Note that Alice won' t mind if there exists some empty boxes. Charlie, Alice' s boyfriend, also is Bob' s second best friend, so he decides to help Bob by rearranging the chocolate pieces. In one second, Charlie can pick up a piece in box i and put it into either box i- 1 or box i+ 1 ( if such boxes exist) . Of course, he wants to help his friend as quickly as possible. Therefore, he asks you to calculate the minimum number of seconds he would need to make Alice happy.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 6 ) \u2014 the number of chocolate boxes. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 10^ 6 ) \u2014 the number of chocolate pieces in the i - th box. It is guaranteed that at least one of a_ 1, a_ 2, . . . , a_ n is positive.",
    "output": "If there is no way for Charlie to make Alice happy, print - 1 . Otherwise, print a single integer x \u2014 the minimum number of seconds for Charlie to help Bob make Alice happy.",
    "note": "In the first example, Charlie can move all chocolate pieces to the second box. Each box will be divisible by 17 . In the second example, Charlie can move a piece from box 2 to box 3 and a piece from box 4 to box 5 . Each box will be divisible by 3 . In the third example, each box is already divisible by 5 . In the fourth example, since Charlie has no available move, he cannot help Bob make Alice happy.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory",
      "ternary search",
      "two pointers"
    ],
    "id": "1254B2"
  },
  {
    "title": "Send Boxes to Alice (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1254/B1",
    "history": "This is the easier version of the problem. In this version, 1 \u2264 n \u2264 10^ 5 and 0 \u2264 a_ i \u2264 1 . You can hack this problem only if you solve and lock both problems. Christmas is coming, and our protagonist, Bob, is preparing a spectacular present for his long- time best friend Alice. This year, he decides to prepare n boxes of chocolate, numbered from 1 to n . Initially, the i - th box contains a_ i chocolate pieces. Since Bob is a typical nice guy, he will not send Alice n empty boxes. In other words, at least one of a_ 1, a_ 2, . . . , a_ n is positive. Since Alice dislikes coprime sets, she will be happy only if there exists some integer k > 1 such that the number of pieces in each box is divisible by k . Note that Alice won' t mind if there exists some empty boxes. Charlie, Alice' s boyfriend, also is Bob' s second best friend, so he decides to help Bob by rearranging the chocolate pieces. In one second, Charlie can pick up a piece in box i and put it into either box i- 1 or box i+ 1 ( if such boxes exist) . Of course, he wants to help his friend as quickly as possible. Therefore, he asks you to calculate the minimum number of seconds he would need to make Alice happy.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of chocolate boxes. The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 0 \u2264 a_ i \u2264 1 ) \u2014 the number of chocolate pieces in the i - th box. It is guaranteed that at least one of a_ 1, a_ 2, . . . , a_ n is positive.",
    "output": "If there is no way for Charlie to make Alice happy, print - 1 . Otherwise, print a single integer x \u2014 the minimum number of seconds for Charlie to help Bob make Alice happy.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math",
      "number theory",
      "ternary search",
      "two pointers"
    ],
    "id": "1254B1"
  },
  {
    "title": "Feeding Chicken",
    "url": "https://codeforces.com/problemset/problem/1254/A",
    "history": "Long is a huge fan of CFC ( Codeforces Fried Chicken) . But the price of CFC is increasing, so he decides to breed the chicken on his own farm. His farm is presented by a rectangle grid with r rows and c columns. Some of these cells contain rice, others are empty. k chickens are living on his farm. The number of chickens is not greater than the number of cells with rice on the farm. Long wants to give his chicken playgrounds by assigning these farm cells to his chickens. He would like to satisfy the following requirements: Each cell of the farm is assigned to exactly one chicken. Each chicken is assigned at least one cell. The set of cells assigned to every chicken forms a connected area. More precisely, if two cells ( x, y) and ( u, v) are assigned to the same chicken, this chicken is able to walk from ( x, y) to ( u, v) by passing only its cells and moving from each cell to another cell sharing a side. Long also wants to prevent his chickens from fighting for food. Hence he wants the difference between the maximum and the minimum number of cells with rice assigned to a chicken to be as small as possible. Please help him.",
    "input": "Each test contains multiple test cases. The first line contains the number of test cases T ( 1 \u2264 T \u2264 2 \u00b7 10^ 4 ) . Description of the test cases follows. The first line of each test case contains three integers r , c and k ( 1 \u2264 r, c \u2264 100, 1 \u2264 k \u2264 62 ) , representing the size of Long' s farm and the number of chickens Long has. Each of the next r lines contains c characters, each is either \" . \" or \" R\" , representing an empty cell or a cell with rice. It is guaranteed that the number of chickens is not greater than the number of cells with rice on the farm. It is guaranteed that the sum of r \u00b7 c over all test cases does not exceed 2 \u00b7 10^ 4 .",
    "output": "For each test case, print r lines with c characters on each line. Each character should be either a lowercase English character, an uppercase English character, or a digit. Two characters should be equal if and only if the two corresponding cells are assigned to the same chicken. Uppercase and lowercase characters are considered different, so \" A\" and \" a\" belong to two different chickens. If there are multiple optimal answers, print any.",
    "note": "These pictures explain the sample output. Each color represents one chicken. Cells filled with patterns ( not solid colors) contain rice. In the first test case, each chicken has one cell with rice. Hence, the difference between the maximum and the minimum number of cells with rice assigned to a chicken is 0 . In the second test case, there are 4 chickens with 3 cells of rice, and 2 chickens with 2 cells of rice. Hence, the difference between the maximum and the minimum number of cells with rice assigned to a chicken is 3 - 2 = 1 . In the third test case, each chicken has 3 cells with rice. In the last test case, since there are 62 chicken with exactly 62 cells of rice, each chicken must be assigned to exactly one cell. The sample output is one of the possible way.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1254A"
  },
  {
    "title": "Antenna Coverage",
    "url": "https://codeforces.com/problemset/problem/1253/E",
    "history": "The mayor of the Central Town wants to modernize Central Street, represented in this problem by the ( Ox) axis. On this street, there are n antennas, numbered from 1 to n . The i - th antenna lies on the position x_ i and has an initial scope of s_ i : it covers all integer positions inside the interval [ x_ i - s_ i; x_ i + s_ i] . It is possible to increment the scope of any antenna by 1 , this operation costs 1 coin. We can do this operation as much as we want ( multiple times on the same antenna if we want) . To modernize the street, we need to make all integer positions from 1 to m inclusive covered by at least one antenna. Note that it is authorized to cover positions outside [ 1; m] , even if it' s not required. What is the minimum amount of coins needed to achieve this modernization?",
    "input": "The first line contains two integers n and m ( 1 \u2264 n \u2264 80 and n \u2264 m \u2264 100 000 ) . The i - th of the next n lines contains two integers x_ i and s_ i ( 1 \u2264 x_ i \u2264 m and 0 \u2264 s_ i \u2264 m ) . On each position, there is at most one antenna ( values x_ i are pairwise distinct) .",
    "output": "You have to output a single integer: the minimum amount of coins required to make all integer positions from 1 to m inclusive covered by at least one antenna.",
    "note": "In the first example, here is a possible strategy: Increase the scope of the first antenna by 40 , so that it becomes 2 + 40 = 42 . This antenna will cover interval [ 43 - 42; 43 + 42] which is [ 1; 85] Increase the scope of the second antenna by 210 , so that it becomes 4 + 210 = 214 . This antenna will cover interval [ 300 - 214; 300 + 214] , which is [ 86; 514] Increase the scope of the third antenna by 31 , so that it becomes 10 + 31 = 41 . This antenna will cover interval [ 554 - 41; 554 + 41] , which is [ 513; 595] Total cost is 40 + 210 + 31 = 281 . We can prove that it' s the minimum cost required to make all positions from 1 to 595 covered by at least one antenna. Note that positions 513 and 514 are in this solution covered by two different antennas, but it' s not important. \u2014In the second example, the first antenna already covers an interval [ 0; 2] so we have nothing to do. Note that the only position that we needed to cover was position 1 ; positions 0 and 2 are covered, but it' s not important.",
    "topics": [
      "data structures",
      "dp",
      "greedy",
      "sortings"
    ],
    "id": "1253E"
  },
  {
    "title": "Harmonious Graph",
    "url": "https://codeforces.com/problemset/problem/1253/D",
    "history": "You' re given an undirected graph with n nodes and m edges. Nodes are numbered from 1 to n . The graph is considered harmonious if and only if the following property holds: For every triple of integers ( l, m, r) such that 1 \u2264 l < m < r \u2264 n , if there exists a path going from node l to node r , then there exists a path going from node l to node m . In other words, in a harmonious graph, if from a node l we can reach a node r through edges ( l < r ) , then we should able to reach nodes ( l+ 1) , ( l+ 2) , . . . , ( r- 1) too. What is the minimum number of edges we need to add to make the graph harmonious?",
    "input": "The first line contains two integers n and m ( 3 \u2264 n \u2264 200 000 and 1 \u2264 m \u2264 200 000 ) . The i - th of the next m lines contains two integers u_ i and v_ i ( 1 \u2264 u_ i, v_ i \u2264 n , u_ i = \u0338 v_ i ) , that mean that there' s an edge between nodes u and v . It is guaranteed that the given graph is simple ( there is no self- loop, and there is at most one edge between every pair of nodes) .",
    "output": "Print the minimum number of edges we have to add to the graph to make it harmonious.",
    "note": "In the first example, the given graph is not harmonious ( for instance, 1 < 6 < 7 , node 1 can reach node 7 through the path 1 \u2192 2 \u2192 7 , but node 1 can' t reach node 6 ) . However adding the edge ( 2, 4) is sufficient to make it harmonious. In the second example, the given graph is already harmonious.",
    "topics": [
      "constructive algorithms",
      "dfs and similar",
      "dsu",
      "graphs",
      "greedy",
      "sortings"
    ],
    "id": "1253D"
  },
  {
    "title": "Sweets Eating",
    "url": "https://codeforces.com/problemset/problem/1253/C",
    "history": "Tsumugi brought n delicious sweets to the Light Music Club. They are numbered from 1 to n , where the i - th sweet has a sugar concentration described by an integer a_ i . Yui loves sweets, but she can eat at most m sweets each day for health reasons. Days are 1 - indexed ( numbered 1, 2, 3, . . . ) . Eating the sweet i at the d - th day will cause a sugar penalty of ( d \u00b7 a_ i) , as sweets become more sugary with time. A sweet can be eaten at most once. The total sugar penalty will be the sum of the individual penalties of each sweet eaten. Suppose that Yui chooses exactly k sweets, and eats them in any order she wants. What is the minimum total sugar penalty she can get? Since Yui is an undecided girl, she wants you to answer this question for every value of k between 1 and n .",
    "input": "The first line contains two integers n and m ( 1 \u2264 m \u2264 n \u2264 200 000 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 200 000 ) .",
    "output": "You have to output n integers x_ 1, x_ 2, . . . , x_ n on a single line, separed by spaces, where x_ k is the minimum total sugar penalty Yui can get if she eats exactly k sweets.",
    "note": "Let' s analyze the answer for k = 5 in the first example. Here is one of the possible ways to eat 5 sweets that minimize total sugar penalty: Day 1 : sweets 1 and 4 Day 2 : sweets 5 and 3 Day 3 : sweet 6 Total penalty is 1 \u00b7 a_ 1 + 1 \u00b7 a_ 4 + 2 \u00b7 a_ 5 + 2 \u00b7 a_ 3 + 3 \u00b7 a_ 6 = 6 + 4 + 8 + 6 + 6 = 30 . We can prove that it' s the minimum total sugar penalty Yui can achieve if she eats 5 sweets, hence x_ 5 = 30 .",
    "topics": [
      "dp",
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1253C"
  },
  {
    "title": "Silly Mistake",
    "url": "https://codeforces.com/problemset/problem/1253/B",
    "history": "The Central Company has an office with a sophisticated security system. There are 10^ 6 employees, numbered from 1 to 10^ 6 . The security system logs entrances and departures. The entrance of the i - th employee is denoted by the integer i , while the departure of the i - th employee is denoted by the integer - i . The company has some strict rules about access to its office: An employee can enter the office at most once per day. He obviously can' t leave the office if he didn' t enter it earlier that day. In the beginning and at the end of every day, the office is empty ( employees can' t stay at night) . It may also be empty at any moment of the day. Any array of events satisfying these conditions is called a valid day. Some examples of valid or invalid days: [ 1, 7, - 7, 3, - 1, - 3] is a valid day ( 1 enters, 7 enters, 7 leaves, 3 enters, 1 leaves, 3 leaves) . [ 2, - 2, 3, - 3] is also a valid day. [ 2, 5, - 5, 5, - 5, - 2] is not a valid day, because 5 entered the office twice during the same day. [ - 4, 4] is not a valid day, because 4 left the office without being in it. [ 4] is not a valid day, because 4 entered the office and didn' t leave it before the end of the day. There are n events a_ 1, a_ 2, . . . , a_ n , in the order they occurred. This array corresponds to one or more consecutive days. The system administrator erased the dates of events by mistake, but he didn' t change the order of the events. You must partition ( to cut) the array a of events into contiguous subarrays, which must represent non- empty valid days ( or say that it' s impossible) . Each array element should belong to exactly one contiguous subarray of a partition. Each contiguous subarray of a partition should be a valid day. For example, if n= 8 and a= [ 1, - 1, 1, 2, - 1, - 2, 3, - 3] then he can partition it into two contiguous subarrays which are valid days: a = [ 1, - 1 | 1, 2, - 1, - 2, 3, - 3] . Help the administrator to partition the given array a in the required way or report that it is impossible to do. Find any required partition, you should not minimize or maximize the number of parts.",
    "input": "The first line contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) . The second line contains n integers a_ 1, a_ 2, . . . , a_ n ( - 10^ 6 \u2264 a_ i \u2264 10^ 6 and a_ i = \u0338 0 ) .",
    "output": "If there is no valid partition, print - 1 . Otherwise, print any valid partition in the following format: On the first line print the number d of days ( 1 \u2264 d \u2264 n ) . On the second line, print d integers c_ 1, c_ 2, . . . , c_ d ( 1 \u2264 c_ i \u2264 n and c_ 1 + c_ 2 + . . . + c_ d = n ) , where c_ i is the number of events in the i - th day. If there are many valid solutions, you can print any of them. You don' t have to minimize nor maximize the number of days.",
    "note": "In the first example, the whole array is a valid day. In the second example, one possible valid solution is to split the array into [ 1, - 1] and [ 1, 2, - 1, - 2, 3, - 3] ( d = 2 and c = [ 2, 6] ) . The only other valid solution would be to split the array into [ 1, - 1] , [ 1, 2, - 1, - 2] and [ 3, - 3] ( d = 3 and c = [ 2, 4, 2] ) . Both solutions are accepted. In the third and fourth examples, we can prove that there exists no valid solution. Please note that the array given in input is not guaranteed to represent a coherent set of events.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1253B"
  },
  {
    "title": "Twin Buildings",
    "url": "https://codeforces.com/problemset/problem/1252/H",
    "history": "As you might already know, space has always been a problem in ICPC Jakarta. To cope with this, ICPC Jakarta is planning to build two new buildings. These buildings should have a shape of a rectangle of the same size. Now, their problem is to find land to build the buildings. There are N lands available for sale. The i^ th land has a rectangular shape of size L_ i \u00d7 W_ i . For a good feng shui, the building' s side should be parallel to the land' s sides. One way is to build the two buildings on two different lands, one on each land ( not necessarily with the same orientation) . A building of size A \u00d7 B can be build on the i^ th land if and only if at least one of the following is satisfied: A \u2264 L_ i and B \u2264 W_ i , or A \u2264 W_ i and B \u2264 L_ i . Alternatively, it is also possible to build two buildings of A \u00d7 B on the i^ th land with the same orientation. Formally, it is possible to build two buildings of A \u00d7 B on the i^ th land if and only if at least one of the following is satisfied: A \u00d7 2 \u2264 L_ i and B \u2264 W_ i , or A \u00d7 2 \u2264 W_ i and B \u2264 L_ i , or A \u2264 L_ i and B \u00d7 2 \u2264 W_ i , or A \u2264 W_ i and B \u00d7 2 \u2264 L_ i . Your task in this problem is to help ICPC Jakarta to figure out the largest possible buildings they can build given N available lands. Note that ICPC Jakarta has to build two buildings of A \u00d7 B ; output the largest possible for A \u00d7 B .",
    "input": "Input begins with a line containing an integer: N ( 1 \u2264 N \u2264 100 000 ) representing the number of available lands. The next N lines each contains two integers: L_ i W_ i ( 1 \u2264 L_ i, W_ i \u2264 10^ 9 ) representing the size of the land.",
    "output": "Output in a line a number representing the largest building that ICPC Jakarta can build with exactly one decimal point ( see sample input/ output for clarity) .",
    "note": "Explanation for the sample input/ output # 1Two buildings of 2. 5 \u00d7 5 can be built both on the first land. Explanation for the sample input/ output # 2Two buildings of 2 \u00d7 4 can be built each on the first and second lands. Explanation for the sample input/ output # 3Two buildings of 7 \u00d7 6 can be built each on the second and third lands.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1252H"
  },
  {
    "title": "Songwriter",
    "url": "https://codeforces.com/problemset/problem/1252/E",
    "history": "Andi is a mathematician, a computer scientist, and a songwriter. After spending so much time writing songs, he finally writes a catchy melody that he thought as his best creation. However, the singer who will sing the song/ melody has a unique vocal range, thus, an adjustment may be needed. A melody is defined as a sequence of N notes which are represented by integers. Let A be the original melody written by Andi. Andi needs to adjust A into a new melody B such that for every i where 1 \u2264 i < N : If A_ i < A_ i+ 1 , then B_ i < B_ i+ 1 . If A_ i = A_ i+ 1 , then B_ i = B_ i+ 1 . If A_ i > A_ i+ 1 , then B_ i > B_ i+ 1 . | B_ i - B_ i+ 1| \u2264 K , i. e. the difference between two successive notes is no larger than K . Moreover, the singer also requires that all notes are within her vocal range, i. e. L \u2264 B_ i \u2264 R for all 1 \u2264 i \u2264 N . Help Andi to determine whether such B exists, and find the lexicographically smallest B if it exists. A melody X is lexicographically smaller than melody Y if and only if there exists j ( 1 \u2264 j \u2264 N ) such that X_ i = Y_ i for all i < j and X_ j < Y_ j . For example, consider a melody A = { 1, 3, 5, 6, 7, 8, 9, 10, 3, 7, 8, 9, 10, 11, 12, 12} as shown in the following figure. The diagonal arrow up in the figure implies that A_ i < A_ i+ 1 , the straight right arrow implies that A_ i = A_ i+ 1 , and the diagonal arrow down implies that A_ i > A_ i+ 1 . Supposed we want to make a new melody with L = 1 , R = 8 , and K = 6 . The new melody B = { 1, 2, 3, 4, 5, 6, 7, 8, 2, 3, 4, 5, 6, 7, 8, 8} as shown in the figure satisfies all the requirements, and it is the lexicographically smallest possible.",
    "input": "Input begins with a line containing four integers: N L R K ( 1 \u2264 N \u2264 100 000 ; 1 \u2264 L \u2264 R \u2264 10^ 9 ; 1 \u2264 K \u2264 10^ 9 ) representing the number of notes in the melody, the vocal range ( L and R ) , and the maximum difference between two successive notes in the new melody, respectively. The next line contains N integers: A_ i ( 1 \u2264 A_ i \u2264 10^ 9 ) representing the original melody.",
    "output": "Output in a line N integers ( each separated by a single space) representing the lexicographically smallest melody satisfying all the requirements, or output - 1 if there is no melody satisfying all the requirements. Note that it might be possible that the lexicographically smallest melody which satisfies all the requirements to be the same as the original melody.",
    "note": "Explanation for the sample input/ output # 1This is the example from the problem description.",
    "topics": [
      "greedy",
      "two pointers"
    ],
    "id": "1252E"
  },
  {
    "title": "Voting (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1251/E2",
    "history": "The only difference between easy and hard versions is constraints. Now elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you. There are n voters, and two ways to convince each of them to vote for you. The first way to convince the i - th voter is to pay him p_ i coins. The second way is to make m_ i other voters vote for you, and the i - th voter will vote for free. Moreover, the process of such voting takes place in several steps. For example, if there are five voters with m_ 1 = 1 , m_ 2 = 2 , m_ 3 = 2 , m_ 4 = 4 , m_ 5 = 5 , then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: 5\u21921, 5\u21921, 2, 3, 5\u21921, 2, 3, 4, 5 . Calculate the minimum number of coins you have to spend so that everyone votes for you.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of voters. The next n lines contains the description of voters. i - th line contains two integers m_ i and p_ i ( 1 \u2264 p_ i \u2264 10^ 9, 0 \u2264 m_ i < n ) . It is guaranteed that the sum of all n over all test cases does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.",
    "note": "In the first test case you have to buy vote of the third voter. Then the set of people voting for you will change as follows: 3\u21921, 3\u21921, 2, 3 . In the second example you don' t need to buy votes. The set of people voting for you will change as follows: 1\u21921, 3, 5\u21921, 2, 3, 5\u21921, 2, 3, 5, 6, 7\u21921, 2, 3, 4, 5, 6, 7 . In the third test case you have to buy votes of the second and the fifth voters. Then the set of people voting for you will change as follows: 2, 5\u21921, 2, 3, 4, 5\u21921, 2, 3, 4, 5, 6 .",
    "topics": [
      "binary search",
      "data structures",
      "greedy"
    ],
    "id": "1251E2"
  },
  {
    "title": "Voting (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1251/E1",
    "history": "The only difference between easy and hard versions is constraints. Now elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you. There are n voters, and two ways to convince each of them to vote for you. The first way to convince the i - th voter is to pay him p_ i coins. The second way is to make m_ i other voters vote for you, and the i - th voter will vote for free. Moreover, the process of such voting takes place in several steps. For example, if there are five voters with m_ 1 = 1 , m_ 2 = 2 , m_ 3 = 2 , m_ 4 = 4 , m_ 5 = 5 , then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: 5\u21921, 5\u21921, 2, 3, 5\u21921, 2, 3, 4, 5 . Calculate the minimum number of coins you have to spend so that everyone votes for you.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 5000 ) \u2014 the number of test cases. The first line of each test case contains one integer n ( 1 \u2264 n \u2264 5000 ) \u2014 the number of voters. The next n lines contains the description of voters. i - th line contains two integers m_ i and p_ i ( 1 \u2264 p_ i \u2264 10^ 9, 0 \u2264 m_ i < n ) . It is guaranteed that the sum of all n over all test cases does not exceed 5000 .",
    "output": "For each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.",
    "note": "In the first test case you have to buy vote of the third voter. Then the set of people voting for you will change as follows: 3\u21921, 3\u21921, 2, 3 . In the second example you don' t need to buy votes. The set of people voting for you will change as follows: 1\u21921, 3, 5\u21921, 2, 3, 5\u21921, 2, 3, 5, 6, 7\u21921, 2, 3, 4, 5, 6, 7 . In the third test case you have to buy votes of the second and the fifth voters. Then the set of people voting for you will change as follows: 2, 5\u21921, 2, 3, 4, 5\u21921, 2, 3, 4, 5, 6 .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1251E1"
  },
  {
    "title": "Salary Changing",
    "url": "https://codeforces.com/problemset/problem/1251/D",
    "history": "You are the head of a large enterprise. n people work at you, and n is odd ( i. e. n is not divisible by 2 ) . You have to distribute salaries to your employees. Initially, you have s dollars for it, and the i - th employee should get a salary from l_ i to r_ i dollars. You have to distribute salaries in such a way that the median salary is maximum possible. To find the median of a sequence of odd length, you have to sort it and take the element in the middle position after sorting. For example: the median of the sequence [ 5, 1, 10, 17, 6] is 6 , the median of the sequence [ 1, 2, 1] is 1 . It is guaranteed that you have enough money to pay the minimum salary, i. e l_ 1 + l_ 2 + . . . + l_ n \u2264 s . Note that you don' t have to spend all your s dollars on salaries. You have to answer t test cases.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 2 \u00b7 10^ 5 ) \u2014 the number of test cases. The first line of each query contains two integers n and s ( 1 \u2264 n < 2 \u00b7 10^ 5 , 1 \u2264 s \u2264 2 \u00b7 10^ 14 ) \u2014 the number of employees and the amount of money you have. The value n is not divisible by 2 . The following n lines of each query contain the information about employees. The i - th line contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 10^ 9 ) . It is guaranteed that the sum of all n over all queries does not exceed 2 \u00b7 10^ 5 . It is also guaranteed that you have enough money to pay the minimum salary to each employee, i. e. \u2211_ i= 1^ n l_ i \u2264 s .",
    "output": "For each test case print one integer \u2014 the maximum median salary that you can obtain.",
    "note": "In the first test case, you can distribute salaries as follows: sal_ 1 = 12, sal_ 2 = 2, sal_ 3 = 11 ( sal_ i is the salary of the i - th employee) . Then the median salary is 11 . In the second test case, you have to pay 1337 dollars to the only employee. In the third test case, you can distribute salaries as follows: sal_ 1 = 4, sal_ 2 = 3, sal_ 3 = 6, sal_ 4 = 6, sal_ 5 = 7 . Then the median salary is 6 .",
    "topics": [
      "binary search",
      "greedy",
      "sortings"
    ],
    "id": "1251D"
  },
  {
    "title": "Minimize The Integer",
    "url": "https://codeforces.com/problemset/problem/1251/C",
    "history": "You are given a huge integer a consisting of n digits ( n is between 1 and 3 \u00b7 10^ 5 , inclusive) . It may contain leading zeros. You can swap two digits on adjacent ( neighboring) positions if the swapping digits are of different parity ( that is, they have different remainders when divided by 2 ) . For example, if a = 032867235 you can get the following integers in a single operation: 302867235 if you swap the first and the second digits; 023867235 if you swap the second and the third digits; 032876235 if you swap the fifth and the sixth digits; 032862735 if you swap the sixth and the seventh digits; 032867325 if you swap the seventh and the eighth digits. Note, that you can' t swap digits on positions 2 and 4 because the positions are not adjacent. Also, you can' t swap digits on positions 3 and 4 because the digits have the same parity. You can perform any number ( possibly, zero) of such operations. Find the minimum integer you can obtain. Note that the resulting integer also may contain leading zeros.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 4 ) \u2014 the number of test cases in the input. The only line of each test case contains the integer a , its length n is between 1 and 3 \u00b7 10^ 5 , inclusive. It is guaranteed that the sum of all values n does not exceed 3 \u00b7 10^ 5 .",
    "output": "For each test case print line \u2014 the minimum integer you can obtain.",
    "note": "In the first test case, you can perform the following sequence of operations ( the pair of swapped digits is highlighted) : 0 70 9 \u2192 0079 . In the second test case, the initial integer is optimal. In the third test case you can perform the following sequence of operations: 246 43 2 \u2192 24 6342 \u2192 2 43 642 \u2192 234642 .",
    "topics": [
      "greedy",
      "two pointers"
    ],
    "id": "1251C"
  },
  {
    "title": "Binary Palindromes",
    "url": "https://codeforces.com/problemset/problem/1251/B",
    "history": "A palindrome is a string t which reads the same backward as forward ( formally, t[ i] = t[ | t| + 1 - i] for all i \u2208 [ 1, | t| ] ) . Here | t| denotes the length of a string t . For example, the strings 010, 1001 and 0 are palindromes. You have n binary strings s_ 1, s_ 2, . . . , s_ n ( each s_ i consists of zeroes and/ or ones) . You can swap any pair of characters any number of times ( possibly, zero) . Characters can be either from the same string or from different strings \u2014 there are no restrictions. Formally, in one move you: choose four integer numbers x, a, y, b such that 1 \u2264 x, y \u2264 n and 1 \u2264 a \u2264 | s_ x| and 1 \u2264 b \u2264 | s_ y| ( where x and y are string indices and a and b are positions in strings s_ x and s_ y respectively) , swap ( exchange) the characters s_ x[ a] and s_ y[ b] . What is the maximum number of strings you can make palindromic simultaneously?",
    "input": "The first line contains single integer Q ( 1 \u2264 Q \u2264 50 ) \u2014 the number of test cases. The first line on each test case contains single integer n ( 1 \u2264 n \u2264 50 ) \u2014 the number of binary strings you have. Next n lines contains binary strings s_ 1, s_ 2, . . . , s_ n \u2014 one per line. It' s guaranteed that 1 \u2264 | s_ i| \u2264 50 and all strings constist of zeroes and/ or ones.",
    "output": "Print Q integers \u2014 one per test case. The i - th integer should be the maximum number of palindromic strings you can achieve simultaneously performing zero or more swaps on strings from the i - th test case.",
    "note": "In the first test case, s_ 1 is palindrome, so the answer is 1 . In the second test case you can' t make all three strings palindromic at the same time, but you can make any pair of strings palindromic. For example, let' s make s_ 1 = 0110 , s_ 2 = 111111 and s_ 3 = 010000 . In the third test case we can make both strings palindromic. For example, s_ 1 = 11011 and s_ 2 = 100001 . In the last test case s_ 2 is palindrome and you can make s_ 1 palindrome, for example, by swapping s_ 1[ 2] and s_ 1[ 3] .",
    "topics": [
      "greedy",
      "strings"
    ],
    "id": "1251B"
  },
  {
    "title": "Wires",
    "url": "https://codeforces.com/problemset/problem/1250/N",
    "history": "Polycarpus has a complex electronic device. The core of this device is a circuit board. The board has 10^ 9 contact points which are numbered from 1 to 10^ 9 . Also there are n wires numbered from 1 to n , each connecting two distinct contact points on the board. An electric signal can pass between wires A and B if: either both wires share the same contact point; or there is a sequence of wires starting with A and ending with B , and each pair of adjacent wires in the sequence share a contact point. The picture shows a circuit board with 5 wires. Contact points with numbers 2, 5, 7, 8, 10, 13 are used. Here an electrical signal can pass from wire 2 to wire 3 , but not to wire 1 . Currently the circuit board is broken. Polycarpus thinks that the board could be fixed if the wires were re- soldered so that a signal could pass between any pair of wires. It takes 1 minute for Polycarpus to re- solder an end of a wire. I. e. it takes one minute to change one of the two contact points for a wire. Any contact point from range [ 1, 10^ 9] can be used as a new contact point. A wire' s ends must always be soldered to distinct contact points. Both wire' s ends can be re- solded, but that will require two actions and will take 2 minutes in total. Find the minimum amount of time Polycarpus needs to re- solder wires so that a signal can pass between any pair of wires. Also output an optimal sequence of wire re- soldering.",
    "input": "The input contains one or several test cases. The first input line contains a single integer t \u2014 number of test cases. Then, t test cases follow. The first line of each test case contains a single integer n ( 1 \u2264 n \u2264 10^ 5 ) \u2014 the number of wires. The following n lines describe wires, each line containing two space- separated integers x_ i, y_ i ( 1 \u2264 x_ i, y_ i \u2264 10^ 9 , x_ i = \u0338 y_ i ) \u2014 contact points connected by the i - th wire. A couple of contact points can be connected with more than one wire. Sum of values of n across all test cases does not exceed 10^ 5 .",
    "output": "For each test case first print one line with a single integer k \u2014 the minimum number of minutes needed to re- solder wires so that a signal can pass between any pair of wires. In the following k lines print the description of re- solderings. Each re- soldering should be described by three integers w_ j, a_ j, b_ j ( 1 \u2264 w_ j \u2264 n , 1 \u2264 a_ j, b_ j \u2264 10^ 9 ) . Such triple means that during the j - th re- soldering an end of the w_ j - th wire, which was soldered to contact point a_ j , becomes soldered to contact point b_ j instead. After each re- soldering of a wire it must connect two distinct contact points. If there are multiple optimal re- solderings, print any of them.",
    "note": "",
    "topics": [
      "dfs and similar",
      "graphs",
      "greedy"
    ],
    "id": "1250N"
  },
  {
    "title": "Divide The Students",
    "url": "https://codeforces.com/problemset/problem/1250/L",
    "history": "A group of students has recently been admitted to the Faculty of Computer Sciences at the Berland State University. Now the programming teacher wants to divide them into three subgroups for practice sessions. The teacher knows that a lot of programmers argue which language is the best. The teacher doesn' t want to hear any arguments in the subgroups, so she wants to divide the students into three subgroups so that no pair of students belonging to the same subgroup want to argue. To perform this division, the teacher asked each student which programming language he likes. There are a students who answered that they enjoy Assembler, b students stated that their favourite language is Basic, and c remaining students claimed that C+ + is the best programming language \u2014 and there was a large argument between Assembler fans and C+ + fans. Now, knowing that Assembler programmers and C+ + programmers can start an argument every minute, the teacher wants to divide the students into three subgroups so that every student belongs to exactly one subgroup, and there is no subgroup that contains at least one Assembler fan and at least one C+ + fan. Since teaching a lot of students can be difficult, the teacher wants the size of the largest subgroup to be minimum possible. Please help the teacher to calculate the minimum possible size of the largest subgroup!",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 5 ) \u2014 the number of test cases in the input. Then test cases follow. Each test case consists of one line containing three integers a , b and c ( 1 \u2264 a, b, c \u2264 1000 ) \u2014 the number of Assembler fans, Basic fans and C+ + fans, respectively.",
    "output": "For each test case print one integer \u2014 the minimum size of the largest subgroup if the students are divided in such a way that there is no subgroup that contains at least one Assembler fan and at least one C+ + fan simultaneously.",
    "note": "Explanation of the answers for the example 1 : The first subgroup contains 3 Assembler fans and 2 Basic fans, the second subgroup \u2014 5 C+ + fans, the third subgroup \u2014 2 C+ + fans and 3 Basic fans. The first subgroup contains 4 Assembler fans, the second subgroup \u2014 6 Basic fans, the third subgroup \u2014 2 Basic fans and 4 C+ + fans. The first subgroup contains all Assembler fans, the second subgroup \u2014 all Basic fans, the third subgroup \u2014 all C+ + fans. The first subgroup contains all Assembler fans, the second subgroup \u2014 all Basic fans, the third subgroup \u2014 all C+ + fans. The first subgroup contains 12 Assembler fans and 2 Basic fans, the second subgroup \u2014 1 Assembler fan and 13 Basic fans, the third subgroup \u2014 7 Basic fans and 7 C+ + fans.",
    "topics": [
      "binary search",
      "greedy",
      "math"
    ],
    "id": "1250L"
  },
  {
    "title": "The Parade",
    "url": "https://codeforces.com/problemset/problem/1250/J",
    "history": "The Berland Army is preparing for a large military parade. It is already decided that the soldiers participating in it will be divided into k rows, and all rows will contain the same number of soldiers. Of course, not every arrangement of soldiers into k rows is suitable. Heights of all soldiers in the same row should not differ by more than 1 . The height of each soldier is an integer between 1 and n . For each possible height, you know the number of soldiers having this height. To conduct a parade, you have to choose the soldiers participating in it, and then arrange all of the chosen soldiers into k rows so that both of the following conditions are met: each row has the same number of soldiers, no row contains a pair of soldiers such that their heights differ by 2 or more. Calculate the maximum number of soldiers who can participate in the parade.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases. Then the test cases follow. Each test case begins with a line containing two integers n and k ( 1 \u2264 n \u2264 30000 , 1 \u2264 k \u2264 10^ 12 ) \u2014 the number of different heights of soldiers and the number of rows of soldiers in the parade, respectively. The second ( and final) line of each test case contains n integers c_ 1 , c_ 2 , . . . , c_ n ( 0 \u2264 c_ i \u2264 10^ 12 ) , where c_ i is the number of soldiers having height i in the Berland Army. It is guaranteed that the sum of n over all test cases does not exceed 30000 .",
    "output": "For each test case, print one integer \u2014 the maximum number of soldiers that can participate in the parade.",
    "note": "Explanations for the example test cases: the heights of soldiers in the rows can be: [ 3, 3, 3, 3] , [ 1, 2, 1, 1] , [ 1, 1, 1, 1] , [ 3, 3, 3, 3] ( each list represents a row) ; all soldiers can march in the same row; 33 soldiers with height 1 in each of 3 rows; all soldiers can march in the same row; all soldiers with height 2 and 3 can march in the same row.",
    "topics": [
      "binary search",
      "greedy"
    ],
    "id": "1250J"
  },
  {
    "title": "Show Must Go On",
    "url": "https://codeforces.com/problemset/problem/1250/I",
    "history": "The director of the famous dance show plans a tour. It is already decided that the tour will consist of up to m concerts. There are n dancers in the troupe. Each dancer is characterized by her awkwardness: the awkwardness of the i - th dancer is equal to a_ i . The director likes diversity. For this reason, each concert will be performed by a different set of dancers. A dancer may perform in multiple concerts. For example, it is possible that a set of dancers performs in one concert and a subset of this set of dancers performs in another concert. The only constraint is that the same set of dancers cannot perform twice. The director prefers the set with larger number of dancers over the set with smaller number of dancers. If two sets consist of the same number of dancers, then the director prefers the one which has smaller sum of awkwardness of dancers. If two sets of dancers are equal in size and total awkwardness, then the director does not have a preference which one is better. A marketing study shows that viewers are not ready to come to a concert if the total awkwardness of all the dancers performing in the concert is greater than k . The director wants to find the best plan for m concerts. He thinks to write down all possible sets of dancers; then get rid of the sets with total awkwardness greater than k . The remaining sets of dancers will be sorted according to his preference. The most preferred set of dancers will give the first concert, the second preferred set \u2014 the second concert and so on until the m - th concert. If it turns out that the total number of valid sets is less than m , then the total number of concerts will be equal to the number of valid sets. It turns out that the director delegated finding the plan to you! Please, notice that there might be several acceptable plans due to the fact that the director does not have a preference over sets of dancers with the same size and total awkwardness. In this case any of these plans is good enough. For each concert find the number of dancers and the total awkwardness of the set performing. Also, for the last concert find its set of dancers.",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 10^ 5 ) \u2014 the number of test cases in the input. Then the test cases follow. Each test case begins with a line containing three integers n , k and m ( 1 \u2264 n \u2264 10^ 6 , 1 \u2264 k \u2264 10^ 18 , 1 \u2264 m \u2264 10^ 6 ) \u2014 the total number of dancers, the maximum acceptable awkwardness of a set of dancers and the maximum number of concerts, respectively. The following line contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 12 ) , where a_ i is the awkwardness of the i - th dancer. The sum of the values of n over all test cases in the input does not exceed 10^ 6 . Similarly, the sum of the values of m over all test cases in the input does not exceed 10^ 6 .",
    "output": "Print the answers to all test cases in the input. If the troupe cannot give concerts at all, then simply print one line \" 0\" . In this case, you should not print anything else. If the troupe gives a positive number of concerts r ( r is equal to the minimum of m and the total number of valid sets) , then first print the value of r , then r lines: the j - th line should contain two integers s_ j and t_ j \u2014 the number of dancers in the j - th concert and the total awkwardness of the dancers performing in the j - th concert. Complete the output to a test case with a line that describes the last set: print exactly s_ r distinct integers from 1 to n \u2014 the numbers of the dancers who will perform at the r - th ( last) concert, in any order. If there are several answers, print any of them.",
    "note": "",
    "topics": [
      "binary search",
      "brute force",
      "greedy",
      "shortest paths"
    ],
    "id": "1250I"
  },
  {
    "title": "Discarding Game",
    "url": "https://codeforces.com/problemset/problem/1250/G",
    "history": "Eulampius has created a game with the following rules: there are two players in the game: a human and a computer; the game lasts for no more than n rounds. Initially both players have 0 points. In the j - th round the human gains a_ j points, and the computer gains b_ j points. The points are gained simultaneously; the game ends when one of the players gets k or more points. This player loses the game. If both players get k or more points simultaneously, both lose; if both players have less than k points after n rounds, the game ends in a tie; after each round the human can push the \" Reset\" button. If the human had x points, and the computer had y points before the button is pushed ( of course, x < k and y < k ) , then after the button is pushed the human will have x' = max( 0, x - y) points, and the computer will have y' = max( 0, y - x) points. E. g. the push of \" Reset\" button transforms the state ( x= 3, y= 5) into the state ( x' = 0, y' = 2) , and the state ( x= 8, y= 2) into the state ( x' = 6, y' = 0) . Eulampius asked his friend Polycarpus to test the game. Polycarpus has quickly revealed that amounts of points gained by the human and the computer in each of n rounds are generated before the game and stored in a file. In other words, the pushes of the \" Reset\" button do not influence the values a_ j and b_ j , so sequences a and b are fixed and known in advance. Polycarpus wants to make a plan for the game. He would like to win the game pushing the \" Reset\" button as few times as possible. Your task is to determine this minimal number of pushes or determine that Polycarpus cannot win.",
    "input": "The first line of the input contains one integer t ( 1 \u2264 t \u2264 10000 ) \u2014 the number of test cases. Then the test cases follow. The first line of each test case contains two integers n and k ( 1 \u2264 n \u2264 2 \u00b7 10^ 5 , 2 \u2264 k \u2264 10^ 9 ) \u2014 the maximum possible number of rounds in the game and the number of points, after reaching which a player loses, respectively. The second line of each test case contains n integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ j < k) , where a_ j is the amount of points the human gains in the j - th round. The third line of each test case contains n integers b_ 1, b_ 2, . . . , b_ n ( 1 \u2264 b_ j < k ) , where b_ j is the amount of points the computer gains in the j - th round. The sum of n over all test cases in the input does not exceed 2 \u00b7 10^ 5 .",
    "output": "Print the answers for all test cases in the order they appear in the input. If Polycarpus cannot win the game, then simply print one line \" - 1\" ( without quotes) . In this case, you should not output anything else for that test case. Otherwise, the first line of the test case answer should contain one integer d \u2014 the minimum possible number of \" Reset\" button pushes, required to win the game. The next line should contain d distinct integers r_ 1, r_ 2, . . . , r_ d ( 1 \u2264 r_ i < n ) \u2014 the numbers of rounds, at the end of which Polycarpus has to press the \" Reset\" button, in arbitrary order. If d= 0 then either leave the second line of the test case answer empty, or do not print the second line at all. If there are several possible solutions, print any of them.",
    "note": "In the second test case, if the human pushes the \" Reset\" button after the second and the fourth rounds, the game goes as follows: after the first round the human has 5 points, the computer \u2014 4 points; after the second round the human has 7 points, the computer \u2014 10 points; the human pushes the \" Reset\" button and now he has 0 points and the computer \u2014 3 points; after the third round the human has 8 points, the computer \u2014 6 points; after the fourth round the human has 10 points, the computer \u2014 9 points; the human pushes \" Reset\" button again, after it he has 1 point, the computer \u2014 0 points; after the fifth round the human has 5 points, the computer \u2014 5 points; after the sixth round the human has 11 points, the computer \u2014 6 points; after the seventh round the human has 12 points, the computer \u2014 13 points; after the eighth round the human has 14 points, the computer \u2014 17 points; the human wins, as the computer has k or more points and the human \u2014 strictly less than k points.",
    "topics": [
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1250G"
  },
  {
    "title": "The Feast and the Bus",
    "url": "https://codeforces.com/problemset/problem/1250/B",
    "history": "Employees of JebTrains are on their way to celebrate the 256- th day of the year! There are n employees and k teams in JebTrains. Each employee is a member of some ( exactly one) team. All teams are numbered from 1 to k . You are given an array of numbers t_ 1, t_ 2, . . . , t_ n where t_ i is the i - th employee' s team number. JebTrains is going to rent a single bus to get employees to the feast. The bus will take one or more rides. A bus can pick up an entire team or two entire teams. If three or more teams take a ride together they may start a new project which is considered unacceptable. It' s prohibited to split a team, so all members of a team should take the same ride. It is possible to rent a bus of any capacity s . Such a bus can take up to s people on a single ride. The total cost of the rent is equal to s \u00b7 r burles where r is the number of rides. Note that it' s impossible to rent two or more buses. Help JebTrains to calculate the minimum cost of the rent, required to get all employees to the feast, fulfilling all the conditions above.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 5\u00b710^ 5, 1 \u2264 k \u2264 8000 ) \u2014 the number of employees and the number of teams in JebTrains. The second line contains a sequence of integers t_ 1, t_ 2, . . . , t_ n , where t_ i ( 1 \u2264 t_ i \u2264 k ) is the i - th employee' s team number. Every team contains at least one employee.",
    "output": "Print the minimum cost of the rent.",
    "note": "",
    "topics": [
      "brute force",
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1250B"
  },
  {
    "title": "Too Many Segments (hard version)",
    "url": "https://codeforces.com/problemset/problem/1249/D2",
    "history": "The only difference between easy and hard versions is constraints. You are given n segments on the coordinate axis OX . Segments can intersect, lie inside each other and even coincide. The i - th segment is [ l_ i; r_ i] ( l_ i \u2264 r_ i ) and it covers all integer points j such that l_ i \u2264 j \u2264 r_ i . The integer point is called bad if it is covered by strictly more than k segments. Your task is to remove the minimum number of segments so that there are no bad points at all.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 2 \u00b7 10^ 5 ) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered. The next n lines contain segments. The i - th line contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 2 \u00b7 10^ 5 ) \u2014 the endpoints of the i - th segment.",
    "output": "In the first line print one integer m ( 0 \u2264 m \u2264 n ) \u2014 the minimum number of segments you need to remove so that there are no bad points. In the second line print m distinct integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 n ) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1249D2"
  },
  {
    "title": "Too Many Segments (easy version)",
    "url": "https://codeforces.com/problemset/problem/1249/D1",
    "history": "The only difference between easy and hard versions is constraints. You are given n segments on the coordinate axis OX . Segments can intersect, lie inside each other and even coincide. The i - th segment is [ l_ i; r_ i] ( l_ i \u2264 r_ i ) and it covers all integer points j such that l_ i \u2264 j \u2264 r_ i . The integer point is called bad if it is covered by strictly more than k segments. Your task is to remove the minimum number of segments so that there are no bad points at all.",
    "input": "The first line of the input contains two integers n and k ( 1 \u2264 k \u2264 n \u2264 200 ) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered. The next n lines contain segments. The i - th line contains two integers l_ i and r_ i ( 1 \u2264 l_ i \u2264 r_ i \u2264 200 ) \u2014 the endpoints of the i - th segment.",
    "output": "In the first line print one integer m ( 0 \u2264 m \u2264 n ) \u2014 the minimum number of segments you need to remove so that there are no bad points. In the second line print m distinct integers p_ 1, p_ 2, . . . , p_ m ( 1 \u2264 p_ i \u2264 n ) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.",
    "note": "",
    "topics": [
      "greedy"
    ],
    "id": "1249D1"
  },
  {
    "title": "Good Numbers (hard version)",
    "url": "https://codeforces.com/problemset/problem/1249/C2",
    "history": "The only difference between easy and hard versions is the maximum value of n . You are given a positive integer number n . You really love good numbers so you want to find the smallest good number greater than or equal to n . The positive integer is called good if it can be represented as a sum of distinct powers of 3 ( i. e. no duplicates of powers of 3 are allowed) . For example: 30 is a good number: 30 = 3^ 3 + 3^ 1 , 1 is a good number: 1 = 3^ 0 , 12 is a good number: 12 = 3^ 2 + 3^ 1 , but 2 is not a good number: you can' t represent it as a sum of distinct powers of 3 ( 2 = 3^ 0 + 3^ 0 ) , 19 is not a good number: you can' t represent it as a sum of distinct powers of 3 ( for example, the representations 19 = 3^ 2 + 3^ 2 + 3^ 0 = 3^ 2 + 3^ 1 + 3^ 1 + 3^ 1 + 3^ 0 are invalid) , 20 is also not a good number: you can' t represent it as a sum of distinct powers of 3 ( for example, the representation 20 = 3^ 2 + 3^ 2 + 3^ 0 + 3^ 0 is invalid) . Note, that there exist other representations of 19 and 20 as sums of powers of 3 but none of them consists of distinct powers of 3 . For the given positive integer n find such smallest m ( n \u2264 m ) that m is a good number. You have to answer q independent queries.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 500 ) \u2014 the number of queries. Then q queries follow. The only line of the query contains one integer n ( 1 \u2264 n \u2264 10^ 18 ) .",
    "output": "For each query, print such smallest integer m ( where n \u2264 m ) that m is a good number.",
    "note": "",
    "topics": [
      "binary search",
      "greedy",
      "math",
      "meet-in-the-middle"
    ],
    "id": "1249C2"
  },
  {
    "title": "Good Numbers (easy version)",
    "url": "https://codeforces.com/problemset/problem/1249/C1",
    "history": "The only difference between easy and hard versions is the maximum value of n . You are given a positive integer number n . You really love good numbers so you want to find the smallest good number greater than or equal to n . The positive integer is called good if it can be represented as a sum of distinct powers of 3 ( i. e. no duplicates of powers of 3 are allowed) . For example: 30 is a good number: 30 = 3^ 3 + 3^ 1 , 1 is a good number: 1 = 3^ 0 , 12 is a good number: 12 = 3^ 2 + 3^ 1 , but 2 is not a good number: you can' t represent it as a sum of distinct powers of 3 ( 2 = 3^ 0 + 3^ 0 ) , 19 is not a good number: you can' t represent it as a sum of distinct powers of 3 ( for example, the representations 19 = 3^ 2 + 3^ 2 + 3^ 0 = 3^ 2 + 3^ 1 + 3^ 1 + 3^ 1 + 3^ 0 are invalid) , 20 is also not a good number: you can' t represent it as a sum of distinct powers of 3 ( for example, the representation 20 = 3^ 2 + 3^ 2 + 3^ 0 + 3^ 0 is invalid) . Note, that there exist other representations of 19 and 20 as sums of powers of 3 but none of them consists of distinct powers of 3 . For the given positive integer n find such smallest m ( n \u2264 m ) that m is a good number. You have to answer q independent queries.",
    "input": "The first line of the input contains one integer q ( 1 \u2264 q \u2264 500 ) \u2014 the number of queries. Then q queries follow. The only line of the query contains one integer n ( 1 \u2264 n \u2264 10^ 4 ) .",
    "output": "For each query, print such smallest integer m ( where n \u2264 m ) that m is a good number.",
    "note": "",
    "topics": [
      "brute force",
      "greedy",
      "implementation"
    ],
    "id": "1249C1"
  },
  {
    "title": "The World Is Just a Programming Task (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1248/D1",
    "history": "This is an easier version of the problem. In this version, n \u2264 500 . Vasya is an experienced developer of programming competitions' problems. As all great minds at some time, Vasya faced a creative crisis. To improve the situation, Petya gifted him a string consisting of opening and closing brackets only. Petya believes, that the beauty of the bracket string is a number of its cyclical shifts, which form a correct bracket sequence. To digress from his problems, Vasya decided to select two positions of the string ( not necessarily distinct) and swap characters located at this positions with each other. Vasya will apply this operation exactly once. He is curious what is the maximum possible beauty he can achieve this way. Please help him. We remind that bracket sequence s is called correct if: s is empty; s is equal to \" ( t ) \" , where t is correct bracket sequence; s is equal to t_ 1 t_ 2 , i. e. concatenation of t_ 1 and t_ 2 , where t_ 1 and t_ 2 are correct bracket sequences. For example, \" ( ( ) ( ) ) \" , \" ( ) \" are correct, while \" ) ( \" and \" ( ) ) \" are not. The cyclical shift of the string s of length n by k ( 0 \u2264 k < n ) is a string formed by a concatenation of the last k symbols of the string s with the first n - k symbols of string s . For example, the cyclical shift of string \" ( ( ) ) ( ) \" by 2 equals \" ( ) ( ( ) ) \" . Cyclical shifts i and j are considered different, if i j .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 500 ) , the length of the string. The second line contains a string, consisting of exactly n characters, where each of the characters is either \" ( \" or \" ) \" .",
    "output": "The first line should contain a single integer \u2014 the largest beauty of the string, which can be achieved by swapping some two characters. The second line should contain integers l and r ( 1 \u2264 l, r \u2264 n ) \u2014 the indices of two characters, which should be swapped in order to maximize the string' s beauty. In case there are several possible swaps, print any of them.",
    "note": "In the first example, we can swap 7 - th and 8 - th character, obtaining a string \" ( ) ( ) ( ) ( ) ( ) \" . The cyclical shifts by 0, 2, 4, 6, 8 of this string form a correct bracket sequence. In the second example, after swapping 5 - th and 10 - th character, we obtain a string \" ) ( ( ) ) ( ) ( ) ( ( ) \" . The cyclical shifts by 11, 7, 5, 3 of this string form a correct bracket sequence. In the third example, swap of any two brackets results in 0 cyclical shifts being correct bracket sequences.",
    "topics": [
      "brute force",
      "dp",
      "greedy",
      "implementation"
    ],
    "id": "1248D1"
  },
  {
    "title": "Grow The Tree",
    "url": "https://codeforces.com/problemset/problem/1248/B",
    "history": "Gardener Alexey teaches competitive programming to high school students. To congratulate Alexey on the Teacher' s Day, the students have gifted him a collection of wooden sticks, where every stick has an integer length. Now Alexey wants to grow a tree from them. The tree looks like a polyline on the plane, consisting of all sticks. The polyline starts at the point ( 0, 0) . While constructing the polyline, Alexey will attach sticks to it one by one in arbitrary order. Each stick must be either vertical or horizontal ( that is, parallel to OX or OY axis) . It is not allowed for two consecutive sticks to be aligned simultaneously horizontally or simultaneously vertically. See the images below for clarification. Alexey wants to make a polyline in such a way that its end is as far as possible from ( 0, 0) . Please help him to grow the tree this way. Note that the polyline defining the form of the tree may have self- intersections and self- touches, but it can be proved that the optimal answer does not contain any self- intersections or self- touches.",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 000 ) \u2014 the number of sticks Alexey got as a present. The second line contains n integers a_ 1, . . . , a_ n ( 1 \u2264 a_ i \u2264 10 000 ) \u2014 the lengths of the sticks.",
    "output": "Print one integer \u2014 the square of the largest possible distance from ( 0, 0) to the tree end.",
    "note": "The following pictures show optimal trees for example tests. The squared distance in the first example equals 5 \u00b7 5 + 1 \u00b7 1 = 26 , and in the second example 4 \u00b7 4 + 2 \u00b7 2 = 20 .",
    "topics": [
      "greedy",
      "math",
      "sortings"
    ],
    "id": "1248B"
  },
  {
    "title": "Shichikuji and Power Grid",
    "url": "https://codeforces.com/problemset/problem/1245/D",
    "history": "Shichikuji is the new resident deity of the South Black Snail Temple. Her first job is as follows: There are n new cities located in Prefecture X. Cities are numbered from 1 to n . City i is located x_ i km North of the shrine and y_ i km East of the shrine. It is possible that ( x_ i, y_ i) = ( x_ j, y_ j) even when i j . Shichikuji must provide electricity to each city either by building a power station in that city, or by making a connection between that city and another one that already has electricity. So the City has electricity if it has a power station in it or it is connected to a City which has electricity by a direct connection or via a chain of connections. Building a power station in City i will cost c_ i yen; Making a connection between City i and City j will cost k_ i + k_ j yen per km of wire used for the connection. However, wires can only go the cardinal directions ( North, South, East, West) . Wires can cross each other. Each wire must have both of its endpoints in some cities. If City i and City j are connected by a wire, the wire will go through any shortest path from City i to City j . Thus, the length of the wire if City i and City j are connected is | x_ i - x_ j| + | y_ i - y_ j| km. Shichikuji wants to do this job spending as little money as possible, since according to her, there isn' t really anything else in the world other than money. However, she died when she was only in fifth grade so she is not smart enough for this. And thus, the new resident deity asks for your help. And so, you have to provide Shichikuji with the following information: minimum amount of yen needed to provide electricity to all cities, the cities in which power stations will be built, and the connections to be made. If there are multiple ways to choose the cities and the connections to obtain the construction of minimum price, then print any of them.",
    "input": "First line of input contains a single integer n ( 1 \u2264 n \u2264 2000 ) \u2014 the number of cities. Then, n lines follow. The i - th line contains two space- separated integers x_ i ( 1 \u2264 x_ i \u2264 10^ 6 ) and y_ i ( 1 \u2264 y_ i \u2264 10^ 6 ) \u2014 the coordinates of the i - th city. The next line contains n space- separated integers c_ 1, c_ 2, . . . , c_ n ( 1 \u2264 c_ i \u2264 10^ 9 ) \u2014 the cost of building a power station in the i - th city. The last line contains n space- separated integers k_ 1, k_ 2, . . . , k_ n ( 1 \u2264 k_ i \u2264 10^ 9 ) .",
    "output": "In the first line print a single integer, denoting the minimum amount of yen needed. Then, print an integer v \u2014 the number of power stations to be built. Next, print v space- separated integers, denoting the indices of cities in which a power station will be built. Each number should be from 1 to n and all numbers should be pairwise distinct. You can print the numbers in arbitrary order. After that, print an integer e \u2014 the number of connections to be made. Finally, print e pairs of integers a and b ( 1 \u2264 a, b \u2264 n , a b ) , denoting that a connection between City a and City b will be made. Each unordered pair of cities should be included at most once ( for each ( a, b) there should be no more ( a, b) or ( b, a) pairs) . You can print the pairs in arbitrary order. If there are multiple ways to choose the cities and the connections to obtain the construction of minimum price, then print any of them.",
    "note": "For the answers given in the samples, refer to the following diagrams ( cities with power stations are colored green, other cities are colored blue, and wires are colored red) : For the first example, the cost of building power stations in all cities is 3 + 2 + 3 = 8 . It can be shown that no configuration costs less than 8 yen. For the second example, the cost of building a power station in City 2 is 2. The cost of connecting City 1 and City 2 is 2 \u00b7 ( 3 + 2) = 10 . The cost of connecting City 2 and City 3 is 3 \u00b7 ( 2 + 3) = 15 . Thus the total cost is 2 + 10 + 15 = 27 . It can be shown that no configuration costs less than 27 yen.",
    "topics": [
      "dsu",
      "graphs",
      "greedy",
      "shortest paths",
      "trees"
    ],
    "id": "1245D"
  },
  {
    "title": "Restricted RPS",
    "url": "https://codeforces.com/problemset/problem/1245/B",
    "history": "Let n be a positive integer. Let a, b, c be nonnegative integers such that a + b + c = n . Alice and Bob are gonna play rock- paper- scissors n times. Alice knows the sequences of hands that Bob will play. However, Alice has to play rock a times, paper b times, and scissors c times. Alice wins if she beats Bob in at least \u2308n/ 2\u2309 ( n/ 2 rounded up to the nearest integer) hands, otherwise Alice loses. Note that in rock- paper- scissors: rock beats scissors; paper beats rock; scissors beat paper. The task is, given the sequence of hands that Bob will play, and the numbers a, b, c , determine whether or not Alice can win. And if so, find any possible sequence of hands that Alice can use to win. If there are multiple answers, print any of them.",
    "input": "The first line contains a single integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Then, t testcases follow, each consisting of three lines: The first line contains a single integer n ( 1 \u2264 n \u2264 100 ) . The second line contains three integers, a, b, c ( 0 \u2264 a, b, c \u2264 n ) . It is guaranteed that a + b + c = n . The third line contains a string s of length n . s is made up of only ' R' , ' P' , and ' S' . The i - th character is ' R' if for his i - th Bob plays rock, ' P' if paper, and ' S' if scissors.",
    "output": "For each testcase: If Alice cannot win, print \" NO\" ( without the quotes) . Otherwise, print \" YES\" ( without the quotes) . Also, print a string t of length n made up of only ' R' , ' P' , and ' S' \u2014 a sequence of hands that Alice can use to win. t must contain exactly a ' R' s, b ' P' s, and c ' S' s. If there are multiple answers, print any of them. The \" YES\" / \" NO\" part of the output is case- insensitive ( i. e. \" yEs\" , \" no\" or \" YEs\" are all valid answers) . Note that ' R' , ' P' and ' S' are case- sensitive.",
    "note": "In the first testcase, in the first hand, Alice plays paper and Bob plays rock, so Alice beats Bob. In the second hand, Alice plays scissors and Bob plays paper, so Alice beats Bob. In the third hand, Alice plays rock and Bob plays scissors, so Alice beats Bob. Alice beat Bob 3 times, and 3 \u2265\u23083/ 2\u2309 = 2 , so Alice wins. In the second testcase, the only sequence of hands that Alice can play is \" RRR\" . Alice beats Bob only in the last hand, so Alice can' t win. 1 < \u23083/ 2\u2309 = 2 .",
    "topics": [
      "constructive algorithms",
      "dp",
      "greedy"
    ],
    "id": "1245B"
  },
  {
    "title": "Running in Pairs",
    "url": "https://codeforces.com/problemset/problem/1244/G",
    "history": "Demonstrative competitions will be held in the run- up to the 20NN Berlatov Olympic Games. Today is the day for the running competition! Berlatov team consists of 2n runners which are placed on two running tracks; n runners are placed on each track. The runners are numbered from 1 to n on each track. The runner with number i runs through the entire track in i seconds. The competition is held as follows: first runners on both tracks start running at the same time; when the slower of them arrives at the end of the track, second runners on both tracks start running, and everyone waits until the slower of them finishes running, and so on, until all n pairs run through the track. The organizers want the run to be as long as possible, but if it lasts for more than k seconds, the crowd will get bored. As the coach of the team, you may choose any order in which the runners are arranged on each track ( but you can' t change the number of runners on each track or swap runners between different tracks) . You have to choose the order of runners on each track so that the duration of the competition is as long as possible, but does not exceed k seconds. Formally, you want to find two permutations p and q ( both consisting of n elements) such that sum = \u2211_ i= 1^ n max( p_ i, q_ i) is maximum possible, but does not exceed k . If there is no such pair, report about it.",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 10^ 6, 1 \u2264 k \u2264 n^ 2 ) \u2014 the number of runners on each track and the maximum possible duration of the competition, respectively.",
    "output": "If it is impossible to reorder the runners so that the duration of the competition does not exceed k seconds, print - 1 . Otherwise, print three lines. The first line should contain one integer sum \u2014 the maximum possible duration of the competition not exceeding k . The second line should contain a permutation of n integers p_ 1, p_ 2, . . . , p_ n ( 1 \u2264 p_ i \u2264 n , all p_ i should be pairwise distinct) \u2014 the numbers of runners on the first track in the order they participate in the competition. The third line should contain a permutation of n integers q_ 1, q_ 2, . . . , q_ n ( 1 \u2264 q_ i \u2264 n , all q_ i should be pairwise distinct) \u2014 the numbers of runners on the second track in the order they participate in the competition. The value of sum = \u2211_ i= 1^ n max( p_ i, q_ i) should be maximum possible, but should not exceed k . If there are multiple answers, print any of them.",
    "note": "In the first example the order of runners on the first track should be [ 5, 3, 2, 1, 4] , and the order of runners on the second track should be [ 1, 4, 2, 5, 3] . Then the duration of the competition is max( 5, 1) + max( 3, 4) + max( 2, 2) + max( 1, 5) + max( 4, 3) = 5 + 4 + 2 + 5 + 4 = 20 , so it is equal to the maximum allowed duration. In the first example the order of runners on the first track should be [ 2, 3, 1] , and the order of runners on the second track should be [ 2, 1, 3] . Then the duration of the competition is 8 , and it is the maximum possible duration for n = 3 .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "math"
    ],
    "id": "1244G"
  },
  {
    "title": "Minimizing Difference",
    "url": "https://codeforces.com/problemset/problem/1244/E",
    "history": "You are given a sequence a_ 1, a_ 2, . . . , a_ n consisting of n integers. You may perform the following operation on this sequence: choose any element and either increase or decrease it by one. Calculate the minimum possible difference between the maximum element and the minimum element in the sequence, if you can perform the aforementioned operation no more than k times.",
    "input": "The first line contains two integers n and k ( 2 \u2264 n \u2264 10^ 5, 1 \u2264 k \u2264 10^ 14) \u2014 the number of elements in the sequence and the maximum number of times you can perform the operation, respectively. The second line contains a sequence of integers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9) .",
    "output": "Print the minimum possible difference between the maximum element and the minimum element in the sequence, if you can perform the aforementioned operation no more than k times.",
    "note": "In the first example you can increase the first element twice and decrease the third element twice, so the sequence becomes [ 3, 3, 5, 5] , and the difference between maximum and minimum is 2 . You still can perform one operation after that, but it' s useless since you can' t make the answer less than 2 . In the second example all elements are already equal, so you may get 0 as the answer even without applying any operations.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "greedy",
      "sortings",
      "ternary search",
      "two pointers"
    ],
    "id": "1244E"
  },
  {
    "title": "Queue in the Train",
    "url": "https://codeforces.com/problemset/problem/1239/C",
    "history": "There are n seats in the train' s car and there is exactly one passenger occupying every seat. The seats are numbered from 1 to n from left to right. The trip is long, so each passenger will become hungry at some moment of time and will go to take boiled water for his noodles. The person at seat i ( 1 \u2264 i \u2264 n ) will decide to go for boiled water at minute t_ i . Tank with a boiled water is located to the left of the 1 - st seat. In case too many passengers will go for boiled water simultaneously, they will form a queue, since there can be only one passenger using the tank at each particular moment of time. Each passenger uses the tank for exactly p minutes. We assume that the time it takes passengers to go from their seat to the tank is negligibly small. Nobody likes to stand in a queue. So when the passenger occupying the i - th seat wants to go for a boiled water, he will first take a look on all seats from 1 to i - 1 . In case at least one of those seats is empty, he assumes that those people are standing in a queue right now, so he would be better seating for the time being. However, at the very first moment he observes that all seats with numbers smaller than i are busy, he will go to the tank. There is an unspoken rule, that in case at some moment several people can go to the tank, than only the leftmost of them ( that is, seating on the seat with smallest number) will go to the tank, while all others will wait for the next moment. Your goal is to find for each passenger, when he will receive the boiled water for his noodles.",
    "input": "The first line contains integers n and p ( 1 \u2264 n \u2264 100 000 , 1 \u2264 p \u2264 10^ 9 ) \u2014 the number of people and the amount of time one person uses the tank. The second line contains n integers t_ 1, t_ 2, . . . , t_ n ( 0 \u2264 t_ i \u2264 10^ 9 ) \u2014 the moments when the corresponding passenger will go for the boiled water.",
    "output": "Print n integers, where i - th of them is the time moment the passenger on i - th seat will receive his boiled water.",
    "note": "Consider the example. At the 0 - th minute there were two passengers willing to go for a water, passenger 1 and 5 , so the first passenger has gone first, and returned at the 314 - th minute. At this moment the passenger 2 was already willing to go for the water, so the passenger 2 has gone next, and so on. In the end, 5 - th passenger was last to receive the boiled water.",
    "topics": [
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1239C"
  },
  {
    "title": "Adilbek and the Watering System",
    "url": "https://codeforces.com/problemset/problem/1238/G",
    "history": "Adilbek has to water his garden. He is going to do it with the help of a complex watering system: he only has to deliver water to it, and the mechanisms will do all the remaining job. The watering system consumes one liter of water per minute ( if there is no water, it is not working) . It can hold no more than c liters. Adilbek has already poured c_ 0 liters of water into the system. He is going to start watering the garden right now and water it for m minutes, and the watering system should contain at least one liter of water at the beginning of the i - th minute ( for every i from 0 to m - 1 ) . Now Adilbek wonders what he will do if the watering system runs out of water. He called n his friends and asked them if they are going to bring some water. The i - th friend answered that he can bring no more than a_ i liters of water; he will arrive at the beginning of the t_ i - th minute and pour all the water he has into the system ( if the system cannot hold such amount of water, the excess water is poured out) ; and then he will ask Adilbek to pay b_ i dollars for each liter of water he has brought. You may assume that if a friend arrives at the beginning of the t_ i - th minute and the system runs out of water at the beginning of the same minute, the friend pours his water fast enough so that the system does not stop working. Of course, Adilbek does not want to pay his friends, but he has to water the garden. So he has to tell his friends how much water should they bring. Formally, Adilbek wants to choose n integers k_ 1 , k_ 2 , . . . , k_ n in such a way that: if each friend i brings exactly k_ i liters of water, then the watering system works during the whole time required to water the garden; the sum \u2211_ i = 1^ n k_ i b_ i is minimum possible. Help Adilbek to determine the minimum amount he has to pay his friends or determine that Adilbek not able to water the garden for m minutes. You have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 5 \u00b7 10^ 5 ) \u2013 the number of queries. The first line of each query contains four integers n, m, c and c_ 0 ( 0 \u2264 n \u2264 5 \u00b7 10^ 5, 2 \u2264 m \u2264 10^ 9, 1 \u2264 c_ 0 \u2264 c \u2264 10^ 9 ) \u2014 the number of friends, the number of minutes of watering, the capacity of the watering system and the number of liters poured by Adilbek. Each of the next n lines contains three integers t_ i, a_ i, b_ i ( 0 < t_ i < m, 1 \u2264 a_ i \u2264 c, 1 \u2264 b_ i \u2264 10^ 9 ) \u2014 the i - th friend' s arrival time, the maximum amount of water i - th friend can bring and the cost of 1 liter from i - th friend. It is guaranteed that sum of all n over all queries does not exceed 5 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the minimum amount Adilbek has to pay his friends, or - 1 if Adilbek is not able to water the garden for m minutes.",
    "note": "",
    "topics": [
      "data structures",
      "greedy",
      "sortings"
    ],
    "id": "1238G"
  },
  {
    "title": "Standard Free2play",
    "url": "https://codeforces.com/problemset/problem/1238/C",
    "history": "You are playing a game where your character should overcome different obstacles. The current problem is to come down from a cliff. The cliff has height h , and there is a moving platform on each height x from 1 to h . Each platform is either hidden inside the cliff or moved out. At first, there are n moved out platforms on heights p_ 1, p_ 2, . . . , p_ n . The platform on height h is moved out ( and the character is initially standing there) . If you character is standing on some moved out platform on height x , then he can pull a special lever, which switches the state of two platforms: on height x and x - 1 . In other words, the platform you are currently standing on will hide in the cliff and the platform one unit below will change it state: it will hide if it was moved out or move out if it was hidden. In the second case, you will safely land on it. Note that this is the only way to move from one platform to another. Your character is quite fragile, so it can safely fall from the height no more than 2 . In other words falling from the platform x to platform x - 2 is okay, but falling from x to x - 3 ( or lower) is certain death. Sometimes it' s not possible to come down from the cliff, but you can always buy ( for donate currency) several magic crystals. Each magic crystal can be used to change the state of any single platform ( except platform on height h , which is unaffected by the crystals) . After being used, the crystal disappears. What is the minimum number of magic crystal you need to buy to safely land on the 0 ground level?",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 100 ) \u2014 the number of queries. Each query contains two lines and is independent of all other queries. The first line of each query contains two integers h and n ( 1 \u2264 h \u2264 10^ 9 , 1 \u2264 n \u2264min( h, 2 \u00b7 10^ 5) ) \u2014 the height of the cliff and the number of moved out platforms. The second line contains n integers p_ 1, p_ 2, . . . , p_ n ( h = p_ 1 > p_ 2 > . . . > p_ n \u2265 1 ) \u2014 the corresponding moved out platforms in the descending order of their heights. The sum of n over all queries does not exceed 2 \u00b7 10^ 5 .",
    "output": "For each query print one integer \u2014 the minimum number of magic crystals you have to spend to safely come down on the ground level ( with height 0 ) .",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "math"
    ],
    "id": "1238C"
  },
  {
    "title": "Kill `Em All",
    "url": "https://codeforces.com/problemset/problem/1238/B",
    "history": "Ivan plays an old action game called Heretic. He' s stuck on one of the final levels of this game, so he needs some help with killing the monsters. The main part of the level is a large corridor ( so large and narrow that it can be represented as an infinite coordinate line) . The corridor is divided into two parts; let' s assume that the point x = 0 is where these parts meet. The right part of the corridor is filled with n monsters \u2014 for each monster, its initial coordinate x_ i is given ( and since all monsters are in the right part, every x_ i is positive) . The left part of the corridor is filled with crusher traps. If some monster enters the left part of the corridor or the origin ( so, its current coordinate becomes less than or equal to 0 ) , it gets instantly killed by a trap. The main weapon Ivan uses to kill the monsters is the Phoenix Rod. It can launch a missile that explodes upon impact, obliterating every monster caught in the explosion and throwing all other monsters away from the epicenter. Formally, suppose that Ivan launches a missile so that it explodes in the point c . Then every monster is either killed by explosion or pushed away. Let some monster' s current coordinate be y , then: if c = y , then the monster is killed; if y < c , then the monster is pushed r units to the left, so its current coordinate becomes y - r ; if y > c , then the monster is pushed r units to the right, so its current coordinate becomes y + r . Ivan is going to kill the monsters as follows: choose some integer point d and launch a missile into that point, then wait until it explodes and all the monsters which are pushed to the left part of the corridor are killed by crusher traps, then, if at least one monster is still alive, choose another integer point ( probably the one that was already used) and launch a missile there, and so on. What is the minimum number of missiles Ivan has to launch in order to kill all of the monsters? You may assume that every time Ivan fires the Phoenix Rod, he chooses the impact point optimally. You have to answer q independent queries.",
    "input": "The first line contains one integer q ( 1 \u2264 q \u2264 10^ 5 ) \u2014 the number of queries. The first line of each query contains two integers n and r ( 1 \u2264 n, r \u2264 10^ 5 ) \u2014 the number of enemies and the distance that the enemies are thrown away from the epicenter of the explosion. The second line of each query contains n integers x_ i ( 1 \u2264 x_ i \u2264 10^ 5 ) \u2014 the initial positions of the monsters. It is guaranteed that sum of all n over all queries does not exceed 10^ 5 .",
    "output": "For each query print one integer \u2014 the minimum number of shots from the Phoenix Rod required to kill all monsters.",
    "note": "In the first test case, Ivan acts as follows: choose the point 3 , the first monster dies from a crusher trap at the point - 1 , the second monster dies from the explosion, the third monster is pushed to the point 7 ; choose the point 7 , the third monster dies from the explosion. In the second test case, Ivan acts as follows: choose the point 5 , the first and fourth monsters die from the explosion, the second monster is pushed to the point 1 , the third monster is pushed to the point 2 ; choose the point 2 , the first monster dies from a crusher trap at the point 0 , the second monster dies from the explosion.",
    "topics": [
      "greedy",
      "sortings"
    ],
    "id": "1238B"
  },
  {
    "title": "Balanced Distribution",
    "url": "https://codeforces.com/problemset/problem/1237/G",
    "history": "There are n friends living on a circular street. The friends and their houses are numbered clockwise from 0 to n- 1 . Initially person i has a_ i stones. The friends want to make the distribution of stones among them perfectly balanced: everyone should possess the same number of stones. The only way to change the distribution of stones is by conducting meetings. During a meeting, people from exactly k consecutive houses ( remember that the street is circular) gather at the same place and bring all their stones with them. All brought stones may be redistributed among people attending the meeting arbitrarily. The total number of stones they possess before the meeting and after the meeting must stay the same. After the meeting, everyone returns to their home. Find a way to make the distribution of stones perfectly balanced conducting as few meetings as possible.",
    "input": "The first line contains two integers n and k ( 2 \u2264 k < n \u2264 10^ 5 ) , denoting the number of friends and the size of each meeting. The second line contains n integers a_ 0, a_ 1, . . . , a_ n- 1 ( 0 \u2264 a_ i \u2264 10^ 4 ) , denoting the number of stones people initially have. The sum of all a_ i is divisible by n .",
    "output": "Output the minimum number of meetings m ( m \u2265 0 ) , followed by m descriptions of meetings in chronological order. The i - th description must consist of an integer s_ i ( 0 \u2264 s_ i < n ) , followed by k non- negative integers b_ i, 0, b_ i, 1, . . . , b_ i, k- 1 ( b_ i, j\u2265 0 ) . Such a description denotes a meeting of people s_ i, ( s_ i + 1) n, . . . , ( s_ i + k - 1) n , and b_ i, j denotes the number of stones person ( s_ i + j) n must have after the i - th meeting. The sum of b_ i, j must match the total number of stones owned by these people before the i - th meeting. We can show that a solution exists for any valid input, and any correct output contains at most 10^ 7 non- whitespace characters.",
    "note": "In the first example, the distribution of stones changes as follows: after the first meeting: 2 6 7 3 4 2 ; after the second meeting: 4 2 7 3 4 4 ; after the third meeting: 4 4 4 4 4 4 . In the second example, the distribution of stones changes as follows: after the first meeting: 1 0 1 2 2 2 2 2 4 3 3 ; after the second meeting: 5 0 1 2 2 2 2 2 2 2 2 ; after the third meeting: 2 2 2 2 2 2 2 2 2 2 2 .",
    "topics": [
      "data structures",
      "dp",
      "greedy"
    ],
    "id": "1237G"
  },
  {
    "title": "Balanced Removals (Harder)",
    "url": "https://codeforces.com/problemset/problem/1237/C2",
    "history": "This is a harder version of the problem. In this version, n \u2264 50 000 . There are n distinct points in three- dimensional space numbered from 1 to n . The i - th point has coordinates ( x_ i, y_ i, z_ i) . The number of points n is even. You' d like to remove all n points using a sequence of n/ 2 snaps. In one snap, you can remove any two points a and b that have not been removed yet and form a perfectly balanced pair. A pair of points a and b is perfectly balanced if no other point c ( that has not been removed yet) lies within the axis- aligned minimum bounding box of points a and b . Formally, point c lies within the axis- aligned minimum bounding box of points a and b if and only if min( x_ a, x_ b) \u2264 x_ c \u2264max( x_ a, x_ b) , min( y_ a, y_ b) \u2264 y_ c \u2264max( y_ a, y_ b) , and min( z_ a, z_ b) \u2264 z_ c \u2264max( z_ a, z_ b) . Note that the bounding box might be degenerate. Find a way to remove all points in n/ 2 snaps.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 50 000 ; n is even) , denoting the number of points. Each of the next n lines contains three integers x_ i , y_ i , z_ i ( - 10^ 8 \u2264 x_ i, y_ i, z_ i \u2264 10^ 8 ) , denoting the coordinates of the i - th point. No two points coincide.",
    "output": "Output n/ 2 pairs of integers a_ i, b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) , denoting the indices of points removed on snap i . Every integer between 1 and n , inclusive, must appear in your output exactly once. We can show that it is always possible to remove all points. If there are many solutions, output any of them.",
    "note": "In the first example, here is what points and their corresponding bounding boxes look like ( drawn in two dimensions for simplicity, as all points lie on z = 0 plane) . Note that order of removing matters: for example, points 5 and 1 don' t form a perfectly balanced pair initially, but they do after point 3 is removed.",
    "topics": [
      "binary search",
      "constructive algorithms",
      "divide and conquer",
      "greedy",
      "implementation",
      "sortings"
    ],
    "id": "1237C2"
  },
  {
    "title": "Balanced Removals (Easier)",
    "url": "https://codeforces.com/problemset/problem/1237/C1",
    "history": "This is an easier version of the problem. In this version, n \u2264 2000 . There are n distinct points in three- dimensional space numbered from 1 to n . The i - th point has coordinates ( x_ i, y_ i, z_ i) . The number of points n is even. You' d like to remove all n points using a sequence of n/ 2 snaps. In one snap, you can remove any two points a and b that have not been removed yet and form a perfectly balanced pair. A pair of points a and b is perfectly balanced if no other point c ( that has not been removed yet) lies within the axis- aligned minimum bounding box of points a and b . Formally, point c lies within the axis- aligned minimum bounding box of points a and b if and only if min( x_ a, x_ b) \u2264 x_ c \u2264max( x_ a, x_ b) , min( y_ a, y_ b) \u2264 y_ c \u2264max( y_ a, y_ b) , and min( z_ a, z_ b) \u2264 z_ c \u2264max( z_ a, z_ b) . Note that the bounding box might be degenerate. Find a way to remove all points in n/ 2 snaps.",
    "input": "The first line contains a single integer n ( 2 \u2264 n \u2264 2000 ; n is even) , denoting the number of points. Each of the next n lines contains three integers x_ i , y_ i , z_ i ( - 10^ 8 \u2264 x_ i, y_ i, z_ i \u2264 10^ 8 ) , denoting the coordinates of the i - th point. No two points coincide.",
    "output": "Output n/ 2 pairs of integers a_ i, b_ i ( 1 \u2264 a_ i, b_ i \u2264 n ) , denoting the indices of points removed on snap i . Every integer between 1 and n , inclusive, must appear in your output exactly once. We can show that it is always possible to remove all points. If there are many solutions, output any of them.",
    "note": "In the first example, here is what points and their corresponding bounding boxes look like ( drawn in two dimensions for simplicity, as all points lie on z = 0 plane) . Note that order of removing matters: for example, points 5 and 1 don' t form a perfectly balanced pair initially, but they do after point 3 is removed.",
    "topics": [
      "constructive algorithms",
      "geometry",
      "greedy"
    ],
    "id": "1237C1"
  },
  {
    "title": "Alice and the Doll",
    "url": "https://codeforces.com/problemset/problem/1236/D",
    "history": "Alice got a new doll these days. It can even walk! Alice has built a maze for the doll and wants to test it. The maze is a grid with n rows and m columns. There are k obstacles, the i - th of them is on the cell ( x_ i, y_ i) , which means the cell in the intersection of the x_ i - th row and the y_ i - th column. However, the doll is clumsy in some ways. It can only walk straight or turn right at most once in the same cell ( including the start cell) . It cannot get into a cell with an obstacle or get out of the maze. More formally, there exist 4 directions, in which the doll can look: The doll looks in the direction along the row from the first cell to the last. While moving looking in this direction the doll will move from the cell ( x, y) into the cell ( x, y + 1) ; The doll looks in the direction along the column from the first cell to the last. While moving looking in this direction the doll will move from the cell ( x, y) into the cell ( x + 1, y) ; The doll looks in the direction along the row from the last cell to first. While moving looking in this direction the doll will move from the cell ( x, y) into the cell ( x, y - 1) ; The doll looks in the direction along the column from the last cell to the first. While moving looking in this direction the doll will move from the cell ( x, y) into the cell ( x - 1, y) . . Standing in some cell the doll can move into the cell in the direction it looks or it can turn right once. Turning right once, the doll switches it' s direction by the following rules: 1 \u2192 2 , 2 \u2192 3 , 3 \u2192 4 , 4 \u2192 1 . Standing in one cell, the doll can make at most one turn right. Now Alice is controlling the doll' s moves. She puts the doll in of the cell ( 1, 1) ( the upper- left cell of the maze) . Initially, the doll looks to the direction 1 , so along the row from the first cell to the last. She wants to let the doll walk across all the cells without obstacles exactly once and end in any place. Can it be achieved?",
    "input": "The first line contains three integers n , m and k , separated by spaces ( 1 \u2264 n, m \u2264 10^ 5, 0 \u2264 k \u2264 10^ 5 ) \u2014 the size of the maze and the number of obstacles. Next k lines describes the obstacles, the i - th line contains two integer numbers x_ i and y_ i , separated by spaces ( 1 \u2264 x_ i \u2264 n, 1 \u2264 y_ i \u2264 m ) , which describes the position of the i - th obstacle. It is guaranteed that no two obstacles are in the same cell and no obstacle is in cell ( 1, 1) .",
    "output": "Print ' Yes' ( without quotes) if the doll can walk across all the cells without obstacles exactly once by the rules, described in the statement. If it is impossible to walk across the maze by these rules print ' No' ( without quotes) .",
    "note": "Here is the picture of maze described in the first example: In the first example, the doll can walk in this way: The doll is in the cell ( 1, 1) , looks to the direction 1 . Move straight; The doll is in the cell ( 1, 2) , looks to the direction 1 . Move straight; The doll is in the cell ( 1, 3) , looks to the direction 1 . Turn right; The doll is in the cell ( 1, 3) , looks to the direction 2 . Move straight; The doll is in the cell ( 2, 3) , looks to the direction 2 . Move straight; The doll is in the cell ( 3, 3) , looks to the direction 2 . Turn right; The doll is in the cell ( 3, 3) , looks to the direction 3 . Move straight; The doll is in the cell ( 3, 2) , looks to the direction 3 . Move straight; The doll is in the cell ( 3, 1) , looks to the direction 3 . The goal is achieved, all cells of the maze without obstacles passed exactly once.",
    "topics": [
      "brute force",
      "data structures",
      "greedy",
      "implementation"
    ],
    "id": "1236D"
  },
  {
    "title": "Labs",
    "url": "https://codeforces.com/problemset/problem/1236/C",
    "history": "In order to do some research, n^ 2 labs are built on different heights of a mountain. Let' s enumerate them with integers from 1 to n^ 2 , such that the lab with the number 1 is at the lowest place, the lab with the number 2 is at the second- lowest place, . . . , the lab with the number n^ 2 is at the highest place. To transport water between the labs, pipes are built between every pair of labs. A pipe can transport at most one unit of water at a time from the lab with the number u to the lab with the number v if u > v . Now the labs need to be divided into n groups, each group should contain exactly n labs. The labs from different groups can transport water to each other. The sum of units of water that can be sent from a group A to a group B is equal to the number of pairs of labs ( u, v ) such that the lab with the number u is from the group A , the lab with the number v is from the group B and u > v . Let' s denote this value as f( A, B) ( i. e. f( A, B) is the sum of units of water that can be sent from a group A to a group B ) . For example, if n= 3 and there are 3 groups X , Y and Z : X = { 1, 5, 6} , Y = { 2, 4, 9} and Z = { 3, 7, 8} . In this case, the values of f are equal to: f( X, Y) = 4 because of 5 \u2192 2 , 5 \u2192 4 , 6 \u2192 2 , 6 \u2192 4 , f( X, Z) = 2 because of 5 \u2192 3 , 6 \u2192 3 , f( Y, X) = 5 because of 2 \u2192 1 , 4 \u2192 1 , 9 \u2192 1 , 9 \u2192 5 , 9 \u2192 6 , f( Y, Z) = 4 because of 4 \u2192 3 , 9 \u2192 3 , 9 \u2192 7 , 9 \u2192 8 , f( Z, X) = 7 because of 3 \u2192 1 , 7 \u2192 1 , 7 \u2192 5 , 7 \u2192 6 , 8 \u2192 1 , 8 \u2192 5 , 8 \u2192 6 , f( Z, Y) = 5 because of 3 \u2192 2 , 7 \u2192 2 , 7 \u2192 4 , 8 \u2192 2 , 8 \u2192 4 . Please, divide labs into n groups with size n , such that the value min f( A, B) over all possible pairs of groups A and B ( A = \u0338 B ) is maximal. In other words, divide labs into n groups with size n , such that minimum number of the sum of units of water that can be transported from a group A to a group B for every pair of different groups A and B ( A = \u0338 B ) as big as possible. Note, that the example above doesn' t demonstrate an optimal division, but it demonstrates how to calculate the values f for some division. If there are many optimal divisions, you can find any.",
    "input": "The only line contains one number n ( 2 \u2264 n \u2264 300 ) .",
    "output": "Output n lines: In the i - th line print n numbers, the numbers of labs of the i - th group, in any order you want. If there are multiple answers, that maximize the minimum number of the sum of units of water that can be transported from one group the another, you can print any.",
    "note": "In the first test we can divide 9 labs into groups { 2, 8, 5} , { 9, 3, 4} , { 7, 6, 1} . From the first group to the second group we can transport 4 units of water ( 8 \u2192 3, 8 \u2192 4, 5 \u2192 3, 5 \u2192 4 ) . From the first group to the third group we can transport 5 units of water ( 2 \u2192 1, 8 \u2192 7, 8 \u2192 6, 8 \u2192 1, 5 \u2192 1 ) . From the second group to the first group we can transport 5 units of water ( 9 \u2192 2, 9 \u2192 8, 9 \u2192 5, 3 \u2192 2, 4 \u2192 2 ) . From the second group to the third group we can transport 5 units of water ( 9 \u2192 7, 9 \u2192 6, 9 \u2192 1, 3 \u2192 1, 4 \u2192 1 ) . From the third group to the first group we can transport 4 units of water ( 7 \u2192 2, 7 \u2192 5, 6 \u2192 2, 6 \u2192 5 ) . From the third group to the second group we can transport 4 units of water ( 7 \u2192 3, 7 \u2192 4, 6 \u2192 3, 6 \u2192 4 ) . The minimal number of the sum of units of water, that can be transported from one group to another is equal to 4 . It can be proved, that it is impossible to make a better division.",
    "topics": [
      "constructive algorithms",
      "greedy",
      "implementation"
    ],
    "id": "1236C"
  },
  {
    "title": "Stones",
    "url": "https://codeforces.com/problemset/problem/1236/A",
    "history": "Alice is playing with some stones. Now there are three numbered heaps of stones. The first of them contains a stones, the second of them contains b stones and the third of them contains c stones. Each time she can do one of two operations: take one stone from the first heap and two stones from the second heap ( this operation can be done only if the first heap contains at least one stone and the second heap contains at least two stones) ; take one stone from the second heap and two stones from the third heap ( this operation can be done only if the second heap contains at least one stone and the third heap contains at least two stones) . She wants to get the maximum number of stones, but she doesn' t know what to do. Initially, she has 0 stones. Can you help her?",
    "input": "The first line contains one integer t ( 1 \u2264 t \u2264 100 ) \u2014 the number of test cases. Next t lines describe test cases in the following format: Line contains three non- negative integers a , b and c , separated by spaces ( 0 \u2264 a, b, c \u2264 100 ) \u2014 the number of stones in the first, the second and the third heap, respectively. In hacks it is allowed to use only one test case in the input, so t = 1 should be satisfied.",
    "output": "Print t lines, the answers to the test cases in the same order as in the input. The answer to the test case is the integer \u2014 the maximum possible number of stones that Alice can take after making some operations.",
    "note": "For the first test case in the first test, Alice can take two stones from the second heap and four stones from the third heap, making the second operation two times. Then she can take one stone from the first heap and two stones from the second heap, making the first operation one time. The summary number of stones, that Alice will take is 9 . It is impossible to make some operations to take more than 9 stones, so the answer is 9 .",
    "topics": [
      "brute force",
      "greedy",
      "math"
    ],
    "id": "1236A"
  },
  {
    "title": "Middle-Out",
    "url": "https://codeforces.com/problemset/problem/1231/E",
    "history": "The problem was inspired by Pied Piper story. After a challenge from Hooli' s compression competitor Nucleus, Richard pulled an all- nighter to invent a new approach to compression: middle- out. You are given two strings s and t of the same length n . Their characters are numbered from 1 to n from left to right ( i. e. from the beginning to the end) . In a single move you can do the following sequence of actions: choose any valid index i ( 1 \u2264 i \u2264 n ) , move the i - th character of s from its position to the beginning of the string or move the i - th character of s from its position to the end of the string. Note, that the moves don' t change the length of the string s . You can apply a move only to the string s . For example, if s= \" test\" in one move you can obtain: if i= 1 and you move to the beginning, then the result is \" test\" ( the string doesn' t change) , if i= 2 and you move to the beginning, then the result is \" etst\" , if i= 3 and you move to the beginning, then the result is \" stet\" , if i= 4 and you move to the beginning, then the result is \" ttes\" , if i= 1 and you move to the end, then the result is \" estt\" , if i= 2 and you move to the end, then the result is \" tste\" , if i= 3 and you move to the end, then the result is \" tets\" , if i= 4 and you move to the end, then the result is \" test\" ( the string doesn' t change) . You want to make the string s equal to the string t . What is the minimum number of moves you need? If it is impossible to transform s to t , print - 1.",
    "input": "The first line contains integer q ( 1 \u2264 q \u2264 100 ) \u2014 the number of independent test cases in the input. Each test case is given in three lines. The first line of a test case contains n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the strings s and t . The second line contains s , the third line contains t . Both strings s and t have length n and contain only lowercase Latin letters. There are no constraints on the sum of n in the test ( i. e. the input with q= 100 and all n= 100 is allowed) .",
    "output": "For every test print minimum possible number of moves, which are needed to transform s into t , or - 1, if it is impossible to do.",
    "note": "In the first example, the moves in one of the optimal answers are: for the first test case s= \" iredppipe\" , t= \" piedpiper\" : \" iredppipe\" \u2192 \" iedppiper\" \u2192 \" piedpiper\" ; for the second test case s= \" estt\" , t= \" test\" : \" estt\" \u2192 \" test\" ; for the third test case s= \" tste\" , t= \" test\" : \" tste\" \u2192 \" etst\" \u2192 \" test\" .",
    "topics": [
      "constructive algorithms",
      "greedy",
      "strings"
    ],
    "id": "1231E"
  },
  {
    "title": "Increasing Matrix",
    "url": "https://codeforces.com/problemset/problem/1231/C",
    "history": "In this problem, a n \u00d7 m rectangular matrix a is called increasing if, for each row of i , when go from left to right, the values strictly increase ( that is, a_ i, 1< a_ i, 2< . . . < a_ i, m ) and for each column j , when go from top to bottom, the values strictly increase ( that is, a_ 1, j< a_ 2, j< . . . < a_ n, j ) . In a given matrix of non- negative integers, it is necessary to replace each value of 0 with some positive integer so that the resulting matrix is increasing and the sum of its elements is maximum, or find that it is impossible. It is guaranteed that in a given value matrix all values of 0 are contained only in internal cells ( that is, not in the first or last row and not in the first or last column) .",
    "input": "The first line contains integers n and m ( 3 \u2264 n, m \u2264 500 ) \u2014 the number of rows and columns in the given matrix a . The following lines contain m each of non- negative integers \u2014 the values in the corresponding row of the given matrix: a_ i, 1, a_ i, 2, . . . , a_ i, m ( 0 \u2264 a_ i, j\u2264 8000 ) . It is guaranteed that for all a_ i, j= 0 , 1 < i < n and 1 < j < m are true.",
    "output": "If it is possible to replace all zeros with positive numbers so that the matrix is increasing, print the maximum possible sum of matrix elements. Otherwise, print - 1.",
    "note": "In the first example, the resulting matrix is as follows: 1 3 5 6 73 6 7 8 95 7 8 9 108 9 10 11 12In the second example, the value 3 must be put in the middle cell. In the third example, the desired resultant matrix does not exist.",
    "topics": [
      "greedy"
    ],
    "id": "1231C"
  },
  {
    "title": "Ania and Minimizing",
    "url": "https://codeforces.com/problemset/problem/1230/B",
    "history": "Ania has a large integer S . Its decimal representation has length n and doesn' t contain any leading zeroes. Ania is allowed to change at most k digits of S . She wants to do it in such a way that S still won' t contain any leading zeroes and it' ll be minimal possible. What integer will Ania finish with?",
    "input": "The first line contains two integers n and k ( 1 \u2264 n \u2264 200 000 , 0 \u2264 k \u2264 n ) \u2014 the number of digits in the decimal representation of S and the maximum allowed number of changed digits. The second line contains the integer S . It' s guaranteed that S has exactly n digits and doesn' t contain any leading zeroes.",
    "output": "Output the minimal possible value of S which Ania can end with. Note that the resulting integer should also have n digits.",
    "note": "A number has leading zeroes if it consists of at least two digits and its first digit is 0 . For example, numbers 00 , 00069 and 0101 have leading zeroes, while 0 , 3000 and 1010 don' t have leading zeroes.",
    "topics": [
      "greedy",
      "implementation"
    ],
    "id": "1230B"
  },
  {
    "title": "Optimal Subsequences (Hard Version)",
    "url": "https://codeforces.com/problemset/problem/1227/D2",
    "history": "This is the harder version of the problem. In this version, 1 \u2264 n, m \u2264 2\u00b710^ 5 . You can hack this problem if you locked it. But you can hack the previous problem only if you locked both problems. You are given a sequence of integers a= [ a_ 1, a_ 2, . . . , a_ n] of length n . Its subsequence is obtained by removing zero or more elements from the sequence a ( they do not necessarily go consecutively) . For example, for the sequence a= [ 11, 20, 11, 33, 11, 20, 11] : [ 11, 20, 11, 33, 11, 20, 11] , [ 11, 20, 11, 33, 11, 20] , [ 11, 11, 11, 11] , [ 20] , [ 33, 20] are subsequences ( these are just some of the long list) ; [ 40] , [ 33, 33] , [ 33, 20, 20] , [ 20, 20, 11, 11] are not subsequences. Suppose that an additional non- negative integer k ( 1 \u2264 k \u2264 n ) is given, then the subsequence is called optimal if: it has a length of k and the sum of its elements is the maximum possible among all subsequences of length k ; and among all subsequences of length k that satisfy the previous item, it is lexicographically minimal. Recall that the sequence b= [ b_ 1, b_ 2, . . . , b_ k] is lexicographically smaller than the sequence c= [ c_ 1, c_ 2, . . . , c_ k] if the first element ( from the left) in which they differ less in the sequence b than in c . Formally: there exists t ( 1 \u2264 t \u2264 k ) such that b_ 1= c_ 1 , b_ 2= c_ 2 , . . . , b_ t- 1= c_ t- 1 and at the same time b_ t< c_ t . For example: [ 10, 20, 20] lexicographically less than [ 10, 21, 1] , [ 7, 99, 99] is lexicographically less than [ 10, 21, 1] , [ 10, 21, 0] is lexicographically less than [ 10, 21, 1] . You are given a sequence of a= [ a_ 1, a_ 2, . . . , a_ n] and m requests, each consisting of two numbers k_ j and pos_ j ( 1 \u2264 k \u2264 n , 1 \u2264 pos_ j \u2264 k_ j ) . For each query, print the value that is in the index pos_ j of the optimal subsequence of the given sequence a for k= k_ j . For example, if n= 4 , a= [ 10, 20, 30, 20] , k_ j= 2 , then the optimal subsequence is [ 20, 30] \u2014 it is the minimum lexicographically among all subsequences of length 2 with the maximum total sum of items. Thus, the answer to the request k_ j= 2 , pos_ j= 1 is the number 20 , and the answer to the request k_ j= 2 , pos_ j= 2 is the number 30 .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 2\u00b710^ 5 ) \u2014 the length of the sequence a . The second line contains elements of the sequence a : integer numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains an integer m ( 1 \u2264 m \u2264 2\u00b710^ 5 ) \u2014 the number of requests. The following m lines contain pairs of integers k_ j and pos_ j ( 1 \u2264 k \u2264 n , 1 \u2264 pos_ j \u2264 k_ j ) \u2014 the requests.",
    "output": "Print m integers r_ 1, r_ 2, . . . , r_ m ( 1 \u2264 r_ j \u2264 10^ 9 ) one per line: answers to the requests in the order they appear in the input. The value of r_ j should be equal to the value contained in the position pos_ j of the optimal subsequence for k= k_ j .",
    "note": "In the first example, for a= [ 10, 20, 10] the optimal subsequences are: for k= 1 : [ 20] , for k= 2 : [ 10, 20] , for k= 3 : [ 10, 20, 10] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1227D2"
  },
  {
    "title": "Optimal Subsequences (Easy Version)",
    "url": "https://codeforces.com/problemset/problem/1227/D1",
    "history": "This is the easier version of the problem. In this version 1 \u2264 n, m \u2264 100 . You can hack this problem only if you solve and lock both problems. You are given a sequence of integers a= [ a_ 1, a_ 2, . . . , a_ n] of length n . Its subsequence is obtained by removing zero or more elements from the sequence a ( they do not necessarily go consecutively) . For example, for the sequence a= [ 11, 20, 11, 33, 11, 20, 11] : [ 11, 20, 11, 33, 11, 20, 11] , [ 11, 20, 11, 33, 11, 20] , [ 11, 11, 11, 11] , [ 20] , [ 33, 20] are subsequences ( these are just some of the long list) ; [ 40] , [ 33, 33] , [ 33, 20, 20] , [ 20, 20, 11, 11] are not subsequences. Suppose that an additional non- negative integer k ( 1 \u2264 k \u2264 n ) is given, then the subsequence is called optimal if: it has a length of k and the sum of its elements is the maximum possible among all subsequences of length k ; and among all subsequences of length k that satisfy the previous item, it is lexicographically minimal. Recall that the sequence b= [ b_ 1, b_ 2, . . . , b_ k] is lexicographically smaller than the sequence c= [ c_ 1, c_ 2, . . . , c_ k] if the first element ( from the left) in which they differ less in the sequence b than in c . Formally: there exists t ( 1 \u2264 t \u2264 k ) such that b_ 1= c_ 1 , b_ 2= c_ 2 , . . . , b_ t- 1= c_ t- 1 and at the same time b_ t< c_ t . For example: [ 10, 20, 20] lexicographically less than [ 10, 21, 1] , [ 7, 99, 99] is lexicographically less than [ 10, 21, 1] , [ 10, 21, 0] is lexicographically less than [ 10, 21, 1] . You are given a sequence of a= [ a_ 1, a_ 2, . . . , a_ n] and m requests, each consisting of two numbers k_ j and pos_ j ( 1 \u2264 k \u2264 n , 1 \u2264 pos_ j \u2264 k_ j ) . For each query, print the value that is in the index pos_ j of the optimal subsequence of the given sequence a for k= k_ j . For example, if n= 4 , a= [ 10, 20, 30, 20] , k_ j= 2 , then the optimal subsequence is [ 20, 30] \u2014 it is the minimum lexicographically among all subsequences of length 2 with the maximum total sum of items. Thus, the answer to the request k_ j= 2 , pos_ j= 1 is the number 20 , and the answer to the request k_ j= 2 , pos_ j= 2 is the number 30 .",
    "input": "The first line contains an integer n ( 1 \u2264 n \u2264 100 ) \u2014 the length of the sequence a . The second line contains elements of the sequence a : integer numbers a_ 1, a_ 2, . . . , a_ n ( 1 \u2264 a_ i \u2264 10^ 9 ) . The third line contains an integer m ( 1 \u2264 m \u2264 100 ) \u2014 the number of requests. The following m lines contain pairs of integers k_ j and pos_ j ( 1 \u2264 k \u2264 n , 1 \u2264 pos_ j \u2264 k_ j ) \u2014 the requests.",
    "output": "Print m integers r_ 1, r_ 2, . . . , r_ m ( 1 \u2264 r_ j \u2264 10^ 9 ) one per line: answers to the requests in the order they appear in the input. The value of r_ j should be equal to the value contained in the position pos_ j of the optimal subsequence for k= k_ j .",
    "note": "In the first example, for a= [ 10, 20, 10] the optimal subsequences are: for k= 1 : [ 20] , for k= 2 : [ 10, 20] , for k= 3 : [ 10, 20, 10] .",
    "topics": [
      "data structures",
      "greedy"
    ],
    "id": "1227D1"
  },
  {
    "title": "To Make 1",
    "url": "https://codeforces.com/problemset/problem/1225/G",
    "history": "There are n positive integers written on the blackboard. Also, a positive number k \u2265 2 is chosen, and none of the numbers on the blackboard are divisible by k . In one operation, you can choose any two integers x and y , erase them and write one extra number f( x + y) , where f( x) is equal to x if x is not divisible by k , otherwise f( x) = f( x / k) . In the end, there will be a single number of the blackboard. Is it possible to make the final number equal to 1 ? If so, restore any sequence of operations to do so.",
    "input": "The first line contains two integers n and k \u2014 the initial number of integers on the blackboard, and the chosen number ( 2 \u2264 n \u2264 16 , 2 \u2264 k \u2264 2000 ) . The second line contains n positive integers a_ 1, . . . , a_ n initially written on the blackboard. It is guaranteed that none of the numbers a_ i is divisible by k , and the sum of all a_ i does not exceed 2000 .",
    "output": "If it is impossible to obtain 1 as the final number, print \" NO\" in the only line. Otherwise, print \" YES\" on the first line, followed by n - 1 lines describing operations. The i - th of these lines has to contain two integers x_ i and y_ i to be erased and replaced with f( x_ i + y_ i) on the i - th operation. If there are several suitable ways, output any of them.",
    "note": "In the second sample case: f( 8 + 7) = f( 15) = f( 5) = 5 ; f( 23 + 13) = f( 36) = f( 12) = f( 4) = 4 ; f( 5 + 4) = f( 9) = f( 3) = f( 1) = 1 .",
    "topics": [
      "bitmasks",
      "constructive algorithms",
      "dp",
      "greedy",
      "number theory"
    ],
    "id": "1225G"
  },
  {
    "title": "Tree Factory",
    "url": "https://codeforces.com/problemset/problem/1225/F",
    "history": "Bytelandian Tree Factory produces trees for all kinds of industrial applications. You have been tasked with optimizing the production of a certain type of tree for an especially large and important order. The tree in question is a rooted tree with n vertices labelled with distinct integers from 0 to n - 1 . The vertex labelled 0 is the root of the tree, and for any non- root vertex v the label of its parent p( v) is less than the label of v . All trees at the factory are made from bamboo blanks. A bamboo is a rooted tree such that each vertex has exactly one child, except for a single leaf vertex with no children. The vertices of a bamboo blank can be labelled arbitrarily before its processing is started. To process a bamboo into another tree a single type of operation can be made: choose an arbitrary non- root vertex v such that its parent p( v) is not a root either. The operation consists of changing the parent of v to its parent' s parent p( p( v) ) . Note that parents of all other vertices remain unchanged, in particular, the subtree of v does not change. Efficiency is crucial, hence you have to minimize the number of operations to make the desired tree from a bamboo blank. Construct any optimal sequence of operations to produce the desired tree. Note that the labelling of the resulting tree has to coincide with the labelling of the desired tree. Formally, the labels of the roots have to be equal, and for non- root vertices with the same label the labels of their parents should be the same. It is guaranteed that for any test present in this problem an answer exists, and further, an optimal sequence contains at most 10^ 6 operations. Note that any hack that does not meet these conditions will be invalid.",
    "input": "The first line contains a single integer n \u2014 the number of vertices in the tree ( 2 \u2264 n \u2264 10^ 5 ) . The second line contains n - 1 integers p( 1) , . . . , p( n - 1) \u2014 indices of parent vertices of 1, . . . , n - 1 respectively ( 0 \u2264 p( i) < i ) .",
    "output": "In the first line, print n distinct integers id_ 1, . . . , id_ n \u2014 the initial labelling of the bamboo blank starting from the root vertex ( 0 \u2264 id_ i < n ) . In the second line, print a single integer k \u2014 the number of operations in your sequence ( 0 \u2264 k \u2264 10^ 6 ) . In the third line print k integers v_ 1, . . . , v_ k describing operations in order. The i - th operation consists of changing p( v_ i) to p( p( v_ i) ) . Each operation should be valid, i. e. neither v_ i nor p( v_ i) can be the root of the tree at the moment.",
    "note": "",
    "topics": [
      "constructive algorithms",
      "greedy",
      "trees"
    ],
    "id": "1225F"
  },
  {
    "title": "Sequence Sorting",
    "url": "https://codeforces.com/problemset/problem/1223/D",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "dp",
      "greedy",
      "two pointers"
    ],
    "id": "1223D"
  },
  {
    "title": "Berland University",
    "url": "https://codeforces.com/problemset/problem/1090/L",
    "history": "",
    "input": "",
    "output": "",
    "note": "",
    "topics": [
      "greedy",
      "math"
    ],
    "id": "1090L"
  }
]